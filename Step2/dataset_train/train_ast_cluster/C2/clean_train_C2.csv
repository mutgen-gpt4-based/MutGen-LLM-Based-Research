fixed,buggy,baseline_ast_gumtree,line_id_tp_dataset
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { double arg = METHOD_2 ( VAR_1 , METHOD_3 ( ) ) ; return java.lang.String.format ( STRING_1 , METHOD_4 ( ) , arg ) ; }","public java.lang.String METHOD_1 ( ) { return java.lang.String.format ( STRING_1 , METHOD_4 ( ) , METHOD_3 ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",2
"private void METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = VAR_2 . get ( 0 ) . METHOD_2 ( 0 , null ) ; TYPE_2 VAR_3 = new TYPE_2 ( this . VAR_4 , VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; }",private void METHOD_1 ( ) { TYPE_2 VAR_3 = new TYPE_2 ( this . VAR_4 ) ; VAR_3 . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Literal', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3
"public TYPE_1 METHOD_1 ( ) { int VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( ( ( VAR_2 ) / VAR_1 ) ) ; METHOD_4 ( ( ( VAR_3 ) / VAR_1 ) ) ; return this ; }","public TYPE_1 METHOD_1 ( ) { long VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ; return new TYPE_1 ( ( ( VAR_2 ) / VAR_1 ) , ( ( VAR_3 ) / VAR_1 ) ) ; }","['Update TypeReference', 'Insert ConstructorCall', 'Move BinaryOperator', 'Move BinaryOperator', 'Delete Invocation', 'Delete Invocation', 'Delete ThisAccess']",4
public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . remove ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_2 == null ) return ; VAR_1 . METHOD_3 ( VAR_2 ) ; },public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_2 == null ) return ; VAR_1 . METHOD_3 ( VAR_3 . remove ( VAR_1 . METHOD_2 ( ) ) ) ; },"['Insert Invocation', 'Move Invocation', 'Insert TypeAccess', 'Insert Invocation', 'Insert VariableRead', 'Delete VariableRead']",5
"protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; VAR_2 . show ( ) ; }",protected void METHOD_1 ( ) { VAR_1 . METHOD_3 ( STRING_2 ) ; VAR_2 . show ( ) ; boolean result = false ; },"['Insert LocalVariable', 'Insert TypeReference', 'Insert Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",6
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 , int VAR_3 , boolean VAR_4 ) { TYPE_1 VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; return VAR_5 ; }","public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 , int VAR_3 , boolean VAR_4 ) { }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Return']",8
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_3 ) == null ) { METHOD_3 ( false ) ; } else { METHOD_3 ( true ) ; } METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_4 ) ; }","public void METHOD_1 ( ) { METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_4 ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",9
"public boolean METHOD_1 ( ) { boolean VAR_1 = getBoolean ( VAR_2 , false ) ; return getBoolean ( VAR_3 , VAR_1 ) ; }","public boolean METHOD_1 ( ) { return getBoolean ( VAR_3 , getBoolean ( VAR_2 , false ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",10
public void METHOD_1 ( java.lang.Long VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_3 . delete ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_2 ) { VAR_3 . delete ( VAR_2 ) ; },"['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",13
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_2 . METHOD_2 ( ) ) { TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; return ( VAR_3 != null ) && ( VAR_3 . METHOD_4 ( ) ) ; } return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_2 . METHOD_2 ( ) ) { return VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; } return true ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",14
"public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = java.lang.String.format ( STRING_1 , ( INT_1 & ( VAR_2 . getColor ( ) ) ) ) ; return VAR_1 ; }",public int METHOD_1 ( ) { return VAR_2 . getColor ( ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",15
public java.lang.Integer METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( null ) ; } java.lang.String VAR_2 = VAR_1 . METHOD_5 ( ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; return 0 ; },public java.lang.Integer METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( null ) ; } return VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete Literal']",17
public java.lang.String METHOD_1 ( java.lang.Long id ) { TYPE_1 item = VAR_1 . METHOD_2 ( id ) ; item . METHOD_3 ( null ) ; VAR_1 . METHOD_4 ( item ) ; VAR_2 . delete ( id ) ; return STRING_1 ; },public java.lang.String METHOD_1 ( java.lang.Long id ) { VAR_2 . delete ( id ) ; return STRING_1 ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",18
"public void METHOD_1 ( TYPE_1 data ) { java.util.ArrayList < TYPE_1 > list = METHOD_2 ( ) ; VAR_1 . add ( data ) ; java.lang.String VAR_2 = VAR_3 . METHOD_3 ( list ) ; VAR_4 . METHOD_4 ( VAR_5 , VAR_2 ) . commit ( ) ; }","public void METHOD_1 ( TYPE_1 data ) { java.lang.String VAR_2 = VAR_3 . METHOD_3 ( METHOD_2 ( ) . add ( data ) ) ; VAR_4 . METHOD_4 ( VAR_5 , VAR_2 ) . commit ( ) ; }","['Insert LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move TypeAccess', 'Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",19
"public static long METHOD_1 ( ) { TYPE_1 state = VAR_1 . get ( ) ; if ( VAR_2 ) { return TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; } VAR_4 = TYPE_3 . METHOD_3 ( ) ; return VAR_4 ; }",public static long METHOD_1 ( ) { return TYPE_3 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",21
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_4 ( this , VAR_4 ) ; VAR_5 . show ( VAR_1 , STRING_1 ) ; VAR_6 . commit ( ) ; }","private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; TYPE_3 VAR_3 = new TYPE_4 ( this , VAR_4 ) ; VAR_5 . show ( VAR_1 , STRING_1 ) ; VAR_6 . commit ( ) ; }","['Insert ConstructorCall', 'Move ThisAccess', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",22
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = TYPE_1 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_1 , VAR_2 ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( VAR_1 , VAR_2 ) ; return VAR_2 ; }","['Insert ConstructorCall', 'Delete TypeAccess', 'Delete Invocation']",25
"protected java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.Object > params = new java.util.HashMap < > ( ) ; VAR_1 . put ( STRING_1 , STRING_2 ) ; return params ; }","protected java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( ) { return new java.util.HashMap < > ( ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",26
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( this ) . METHOD_3 ( new java.util.Date ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",27
"public void remove ( java.io.File key , java.io.File VAR_1 ) { java.util.Set < java.io.File > VAR_2 = new java.util.HashSet < > ( get ( key ) ) ; VAR_3 . remove ( VAR_1 ) ; set ( key , VAR_2 ) ; }","public void remove ( java.io.File key , java.io.File VAR_1 ) { java.util.Collection < java.io.File > VAR_2 = get ( key ) ; VAR_3 . remove ( VAR_1 ) ; set ( key , VAR_2 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete ConstructorCall']",28
"public int METHOD_1 ( double VAR_1 , long time ) { java.lang.Double VAR_2 = new java.lang.Double ( ( ( INT_1 * VAR_1 ) / ( java.lang.Long . METHOD_2 ( time ) . METHOD_3 ( ) ) ) ) ; return VAR_3 . intValue ( ) ; }","public int METHOD_1 ( double VAR_1 , long time ) { return ( ( int ) ( ( INT_1 * VAR_1 ) / ( java.lang.Long . METHOD_2 ( time ) . METHOD_3 ( ) ) ) ) ; }","['Move BinaryOperator', 'Insert TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",29
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { double x = java.lang.Double . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ; return TYPE_1 . METHOD_4 ( java.lang.Double . METHOD_5 ( x ) ) ; },public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_4 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",30
public static void main ( java.lang.String [ ] VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.lang.System.out.println ( VAR_2 . METHOD_1 ( ) ) ; },public static void main ( java.lang.String [ ] VAR_1 ) { java.lang.System.out.println ( METHOD_1 ( ) ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",32
"public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = METHOD_2 ( ) ; java.util.Collections.sort ( VAR_1 , TYPE_1 . METHOD_3 ( ) ) ; return VAR_1 ; }",public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",33
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object VAR_2 = ( VAR_3 . METHOD_2 ( ) ) - 1 ; java.lang.System.out.println ( ( STRING_1 + ( ( int ) ( VAR_2 ) ) ) ) ; VAR_4 . METHOD_3 ( VAR_5 . name , VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_5 . name , VAR_2 ) ; }","['Move Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete TypeReference', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",34
public boolean METHOD_1 ( TYPE_1 node ) { TYPE_2 VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 instanceof TYPE_3 ) this . METHOD_1 ( ( ( TYPE_3 ) ( VAR_1 ) ) ) ; return false ; },public boolean METHOD_1 ( TYPE_1 node ) { this . METHOD_1 ( ( ( TYPE_3 ) ( node . METHOD_2 ( ) ) ) ) ; return false ; },"['Move Invocation', 'Move Invocation', 'Move TypeReference', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",36
public java.util.List < TYPE_1 > list ( ) { java.util.List < TYPE_1 > list = VAR_1 . list ( VAR_2 class ) ; return list ; },public java.util.List < TYPE_1 > list ( ) { return VAR_1 . list ( VAR_2 class ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",37
void METHOD_1 ( TYPE_1 data ) { TYPE_2 message = TYPE_3 . METHOD_2 ( data ) ; message . METHOD_3 ( new java.util.Date ( ) ) ; view . METHOD_4 ( message ) ; },void METHOD_1 ( TYPE_1 data ) { view . METHOD_4 ( TYPE_3 . METHOD_2 ( data ) ) ; },"['Insert Invocation', 'Move FieldRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",38
public java.util.List < java.lang.String > METHOD_1 ( ) { return new java.util.ArrayList < > ( ) ; },public void METHOD_1 ( ) { java.util.List < java.lang.String > names = new java.util.ArrayList < > ( ) ; },"['Update TypeReference', 'Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Move TypeReference', 'Delete Return']",39
public boolean METHOD_1 ( TYPE_1 node ) { boolean set = METHOD_2 ( node ) ; if ( set ) METHOD_3 ( VAR_1 . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) ) ; return set ; },public void METHOD_1 ( TYPE_1 node ) { METHOD_2 ( node ) ; METHOD_3 ( VAR_1 . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) ) ; },"['Update TypeReference', 'Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete Return']",40
public java.util.Set < java.lang.String > METHOD_1 ( ) { java.util.Set < java.lang.String > set = new java.util.HashSet < java.lang.String > ( VAR_1 . METHOD_2 ( ) . METHOD_1 ( ) ) ; set . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; return set ; },public java.util.Set < java.lang.String > METHOD_1 ( ) { return VAR_2 . METHOD_4 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",41
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String path = STRING_1 ; new java.io.File ( path ) . METHOD_2 ( ) ; return new TYPE_1 ( new TYPE_3 ( ( ( path + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) ) ) ; },public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( new TYPE_3 ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) ) ) ; },"['Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead']",42
void METHOD_1 ( TYPE_1 event ) { long VAR_1 = event . METHOD_2 ( ) ; if ( VAR_1 > ( VAR_2 ) ) { event . METHOD_1 ( this ) ; VAR_2 = VAR_1 ; } },void METHOD_1 ( TYPE_1 event ) { if ( ( event . METHOD_2 ( ) ) > ( VAR_2 ) ) { event . METHOD_1 ( this ) ; VAR_2 = event . METHOD_2 ( ) ; } },"['Move Invocation', 'Insert Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",43
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { int VAR_4 = ( VAR_5 . x ) - VAR_2 ; VAR_6 . set ( VAR_4 , VAR_5 . y ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { VAR_6 . set ( ( ( VAR_5 . x ) - VAR_2 ) , VAR_5 . y ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",44
public java.util.Collection < java.lang.String > METHOD_1 ( ) { java.util.Collection < java.lang.String > VAR_1 = new java.util.ArrayList ( VAR_2 . METHOD_1 ( ) ) ; VAR_1 . METHOD_2 ( VAR_3 . METHOD_1 ( ) ) ; return VAR_1 ; },public java.util.Collection < java.lang.String > METHOD_1 ( ) { return VAR_2 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",45
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { METHOD_3 ( ) ; } },public void METHOD_1 ( ) { METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",46
public void METHOD_1 ( ) { boolean VAR_1 = METHOD_2 ( ) ; if ( ! VAR_1 ) { return ; } TYPE_1 VAR_2 = this . METHOD_3 ( ) . build ( ) ; this . METHOD_4 ( VAR_2 ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_2 = this . METHOD_3 ( ) . build ( ) ; this . METHOD_4 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",47
public java.lang.String METHOD_1 ( ) { return ( ( java.lang.String ) ( METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) ) ; },public java.lang.String METHOD_1 ( ) { java.lang.String value = ( ( java.lang.String ) ( METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) ) ; return value ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",50
public java.util.List < java.lang.String > getData ( java.lang.String target ) { java.util.List < java.lang.String > out = new java.util.ArrayList < java.lang.String > ( ( ( VAR_1 . size ( ) ) + INT_1 ) ) ; out . METHOD_1 ( data ) ; return out ; },public java.util.List < java.lang.String > getData ( java.lang.String target ) { return data ; },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",51
"private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; return VAR_3 . getBoolean ( getString ( VAR_4 ) , false ) ; }","private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( getActivity ( ) ) ; return VAR_3 . getBoolean ( getString ( VAR_4 ) , false ) ; }","['Insert Invocation', 'Delete TypeAccess']",52
"public int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = METHOD_2 ( ) ; VAR_1 . METHOD_1 ( VAR_3 , VAR_4 , VAR_2 ) ; return VAR_2 ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_1 ( VAR_3 , VAR_4 ) ; }","['Update TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",53
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_1 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , 0 ) ; }",private void METHOD_1 ( ) { VAR_3 . METHOD_3 ( VAR_4 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",55
"public void METHOD_1 ( int index , double value ) { int VAR_1 = index % ( VAR_2 ) ; int VAR_3 = index / ( VAR_2 ) ; super . METHOD_1 ( VAR_1 , VAR_3 , value ) ; }","public void METHOD_1 ( int index , double value ) { int VAR_1 = index / ( VAR_2 ) ; int VAR_3 = index % ( VAR_2 ) ; super . METHOD_1 ( VAR_1 , VAR_3 , value ) ; }","['Move LocalVariable', 'Update LocalVariable', 'Update LocalVariable']",57
"public java.lang.String METHOD_1 ( java.util.HashSet < java.lang.String > VAR_1 , java.util.HashSet < java.lang.String > VAR_2 ) { java.lang.String line = ( ( VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ) + STRING_1 ) + ( VAR_4 ) ; line += ""\n"" ; return line ; }","public java.lang.String METHOD_1 ( java.util.HashSet < java.lang.String > VAR_1 , java.util.HashSet < java.lang.String > VAR_2 ) { java.lang.String line = ( VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ) + STRING_1 ; line += ""\n"" ; return line ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",59
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_2 VAR_4 = METHOD_3 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; return VAR_3 ; }",public TYPE_1 METHOD_1 ( java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_4 = METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; return VAR_3 ; },"['Move LocalVariable', 'Update LocalVariable', 'Update LocalVariable', 'Move TypeReference', 'Update Invocation', 'Move TypeReference', 'Update Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead']",60
public int METHOD_1 ( ) { double VAR_1 = ( VAR_2 ) * INT_1 ; int value = ( ( int ) ( java.lang.Math.round ( VAR_1 ) ) ) ; return value ; },public int METHOD_1 ( ) { double VAR_1 = ( VAR_2 ) * INT_1 ; return ( ( int ) ( java.lang.Math.round ( VAR_1 ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",63
"public void METHOD_1 ( ) { int VAR_1 = ( METHOD_2 ( ) ) - 1 ; if ( VAR_1 >= 0 ) { METHOD_3 ( VAR_1 , true ) ; } }","public void METHOD_1 ( ) { METHOD_3 ( ( ( METHOD_2 ( ) ) - 1 ) , true ) ; }","['Move Invocation', 'Move BinaryOperator', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",64
"private java.lang.CharSequence METHOD_1 ( int VAR_1 ) { long time = TYPE_1 . METHOD_2 ( STRING_1 ) . METHOD_3 ( ( VAR_1 * ( VAR_2 ) ) , false ) ; return TYPE_2 . METHOD_4 ( time ) ; }",private java.lang.CharSequence METHOD_1 ( int VAR_1 ) { return TYPE_2 . METHOD_4 ( ( VAR_1 * ( VAR_2 ) ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete VariableRead', 'Delete Invocation']",66
public java.lang.String METHOD_1 ( ) { java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; return VAR_3 ; },public java.lang.String METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",67
public int METHOD_1 ( TYPE_1 VAR_1 ) { int id = VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; return id ; },public int METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",70
"public boolean getBoolean ( java.lang.String key , boolean VAR_1 ) { return METHOD_1 ( ) . getBoolean ( key , VAR_1 ) ; }","public boolean getBoolean ( java.lang.String key , boolean VAR_1 ) { boolean value = METHOD_1 ( ) . getBoolean ( key , VAR_1 ) ; return value ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",73
public void METHOD_1 ( TYPE_1 VAR_1 ) { state = VAR_2 ; java.lang.String filename = METHOD_2 ( VAR_1 ) ; if ( ! ( VAR_3 . isEmpty ( ) ) ) { VAR_4 . METHOD_3 ( filename ) ; } METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { state = VAR_2 ; METHOD_2 ( VAR_1 ) ; METHOD_4 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",74
long METHOD_1 ( ) { long VAR_1 = state ; VAR_2 . METHOD_2 ( ) ; try { state = VAR_3 ; } finally { VAR_2 . METHOD_3 ( ) ; } return VAR_1 ; },void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; try { state = VAR_3 ; } finally { VAR_2 . METHOD_3 ( ) ; } },"['Update TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",75
"private void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; METHOD_3 ( VAR_1 ) ; }",private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",76
"public java.lang.String METHOD_1 ( ) throws TYPE_1 { TYPE_2 result = TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; result . METHOD_3 ( ) ; return VAR_3 . getString ( STRING_1 ) ; }","public java.lang.String METHOD_1 ( ) throws TYPE_1 { return TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) . getString ( STRING_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess']",77
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 = VAR_3 . METHOD_2 ( ) ; VAR_5 . METHOD_3 ( false ) ; return TYPE_1 . METHOD_4 ( VAR_1 , VAR_2 , VAR_5 , VAR_4 ) ; }","public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { return TYPE_1 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , false ) ; }","['Move VariableRead', 'Move Literal', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",78
public void METHOD_1 ( android.view.View view ) { if ( VAR_1 . METHOD_2 ( ) ) { java.lang.String query = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( query ) ; } else { VAR_2 . METHOD_5 ( false ) ; } },public void METHOD_1 ( android.view.View view ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block']",79
"public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = this . METHOD_2 ( VAR_2 ) ; if ( VAR_1 != null ) { VAR_3 . replaceAll ( STRING_1 , STRING_2 ) ; } return VAR_1 ; }",public java.lang.String METHOD_1 ( ) { return this . METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",80
public java.lang.String format ( java.lang.String str ) { java.lang.String VAR_1 = VAR_2 . METHOD_1 ( str ) ; if ( ( VAR_3 ) != null ) { return VAR_4 . format ( VAR_3 . METHOD_2 ( VAR_1 ) ) ; } return VAR_4 . format ( VAR_1 ) ; },public java.lang.String format ( java.lang.String str ) { return VAR_4 . format ( VAR_2 . METHOD_1 ( str ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",82
public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; if ( id == ( VAR_1 ) ) TYPE_2 . METHOD_3 ( this ) ; return super . METHOD_1 ( item ) ; },public boolean METHOD_1 ( TYPE_1 item ) { if ( ( item . METHOD_2 ( ) ) == ( VAR_1 ) ) TYPE_2 . METHOD_3 ( this ) ; return super . METHOD_1 ( item ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",83
public static boolean METHOD_1 ( ) { java.util.Random VAR_1 = new java.util.Random ( ) ; int VAR_2 = VAR_1 . METHOD_2 ( INT_1 ) ; return VAR_2 == 0 ; },public static boolean METHOD_1 ( ) { int VAR_2 = ( ( int ) ( ( java.lang.Math.random ( ) ) * INT_1 ) ) ; return VAR_2 == 0 ; },"['Insert LocalVariable', 'Move TypeReference', 'Insert BinaryOperator', 'Insert TypeReference', 'Insert Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",84
"public void METHOD_1 ( byte [ ] data , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( data , 0 , VAR_3 . length ) ; METHOD_3 ( VAR_4 . METHOD_4 ( ) , VAR_2 ) ; VAR_5 . METHOD_5 ( VAR_2 ) ; }","public void METHOD_1 ( byte [ ] data , TYPE_1 VAR_1 ) { VAR_5 . METHOD_5 ( TYPE_3 . METHOD_2 ( data , 0 , VAR_3 . length ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",88
static long METHOD_1 ( long i ) { long VAR_1 = 1 ; return VAR_1 < < i ; },static long METHOD_1 ( int i ) { return 1 < < i ; },"['Update TypeReference', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",89
"private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { java.io.InputStream VAR_3 = METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_1 , VAR_3 ) ; VAR_3 . METHOD_4 ( ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { VAR_2 . METHOD_3 ( VAR_1 , METHOD_2 ( VAR_1 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",92
void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; TYPE_3 < TYPE_4 > VAR_2 = new TYPE_3 ( VAR_3 class ) ; java.lang.String VAR_4 = VAR_2 . METHOD_2 ( VAR_5 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; },void METHOD_1 ( TYPE_1 event ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",93
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; int position = VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( STRING_2 , position ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",96
public java.util.List METHOD_1 ( ) { TYPE_1 query = VAR_1 . METHOD_2 ( STRING_1 ) ; return VAR_2 . list ( ) ; },public java.util.List METHOD_1 ( ) { TYPE_1 query = VAR_1 . METHOD_2 ( STRING_1 ) ; java.util.List list = VAR_2 . list ( ) ; return list ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",97
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_3 . update ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . update ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",98
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String line ) { TYPE_2 . METHOD_2 ( ( STRING_1 + line ) ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String line ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",99
java.util.List < TYPE_1 > METHOD_1 ( TYPE_1 ... VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = java.util.Arrays.asList ( VAR_1 ) ; VAR_2 . METHOD_2 ( new TYPE_2 ( ) ) ; return VAR_2 ; },java.util.List < TYPE_1 > METHOD_1 ( TYPE_1 ... VAR_1 ) { return java.util.Arrays.asList ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead']",100
"protected void execute ( ) { double VAR_1 = 0 ; double VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_2 , VAR_2 ) ; }","protected void execute ( ) { double VAR_2 = VAR_3 . METHOD_1 ( ) ; VAR_4 . METHOD_2 ( VAR_2 , VAR_2 ) ; }","['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete VariableRead']",101
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",102
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { java.lang.String VAR_3 = VAR_4 . getText ( ) . toString ( ) ; new TYPE_2 ( java.lang.Integer.toString ( VAR_5 ) , VAR_6 , VAR_3 , VAR_7 ) . execute ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete VariableRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation']",105
public int METHOD_1 ( ) { if ( ( VAR_1 ) && ( ( VAR_2 ) != null ) ) { return VAR_2 . METHOD_2 ( ) ; } return 0 ; },public int METHOD_1 ( ) { if ( ( VAR_1 ) && ( ( VAR_2 ) != null ) ) { int count = VAR_2 . METHOD_2 ( ) ; return count ; } return 0 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",106
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 , VAR_4 ) ; METHOD_3 ( intent ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",107
public void METHOD_1 ( ) { try { while ( true ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { return ; } VAR_3 . error ( VAR_1 ) ; } } catch ( java.io.IOException VAR_4 ) { } },public void METHOD_1 ( ) { try { while ( true ) { VAR_3 . error ( VAR_2 . METHOD_2 ( ) ) ; } } catch ( java.io.IOException VAR_4 ) { } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",108
"public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_1 . METHOD_3 ( VAR_3 ) ) ; java.lang.String VAR_4 = VAR_1 . METHOD_3 ( STRING_1 ) ; return TYPE_3 . METHOD_1 ( VAR_2 , VAR_4 ) ; }","public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_3 ( VAR_3 ) ; java.lang.String VAR_4 = VAR_1 . METHOD_3 ( STRING_1 ) ; return TYPE_3 . METHOD_1 ( VAR_2 , VAR_4 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",109
public java.lang.Object METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { java.lang.String VAR_2 = VAR_3 . trim ( VAR_1 ) ; METHOD_2 ( new TYPE_2 ( VAR_2 ) ) ; METHOD_3 ( ) ; return VAR_4 ; },public java.lang.Object METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { METHOD_2 ( new TYPE_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; return VAR_4 ; },"['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",110
public TYPE_1 METHOD_1 ( TYPE_2 b ) { if ( b instanceof TYPE_1 ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( b ) ) . METHOD_3 ( ) ) ; return VAR_1 ; } return null ; },public TYPE_1 METHOD_1 ( TYPE_2 b ) { if ( b instanceof TYPE_1 ) { return new TYPE_1 ( ) ; } return null ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",112
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 != null ) { VAR_1 . METHOD_4 ( VAR_4 . getId ( ) ) ; } return VAR_3 . METHOD_5 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_3 . METHOD_5 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",113
"public void METHOD_1 ( ) { java.lang.CharSequence VAR_1 = VAR_2 . METHOD_2 ( STRING_1 , null ) ; VAR_3 . assertThat ( VAR_4 . toString ( ) ) . METHOD_3 ( STRING_2 ) ; }",public void METHOD_1 ( ) { java.lang.CharSequence VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; assertThat ( VAR_4 . toString ( ) ) . METHOD_3 ( STRING_2 ) ; },"['Update TypeAccess', 'Delete Literal']",115
public TYPE_1 get ( long id ) { TYPE_2 VAR_1 = VAR_2 . get ( id ) ; if ( VAR_1 != null ) VAR_3 = this . VAR_4 ; return VAR_1 ; },public TYPE_1 get ( long id ) { return VAR_2 . get ( id ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldWrite', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Assignment', 'Delete Block', 'Delete If', 'Delete VariableRead']",117
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( VAR_6 ) ; return VAR_4 ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_5 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",118
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = event . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 event ) { TYPE_3 . METHOD_3 ( event . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",119
"public void METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) >= INT_1 ) { VAR_1 . remove ( 0 ) ; } int VAR_2 = java.util.Calendar.getInstance ( ) . get ( VAR_3 ) ; VAR_1 . put ( VAR_2 , VAR_4 ) ; }","public void METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) >= INT_1 ) { VAR_1 . remove ( 0 ) ; } VAR_1 . put ( VAR_3 , VAR_4 ) ; }","['Move TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",120
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; VAR_5 = ( ( TYPE_4 ) ( view . METHOD_3 ( VAR_6 ) ) ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; VAR_5 = ( ( TYPE_4 ) ( view . METHOD_3 ( VAR_6 ) ) ) ; return view ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead', 'Delete FieldRead']",121
protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_3 VAR_1 = new TYPE_3 ( this ) ; VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; return VAR_1 ; },protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 ( getActivity ( ) ) ; },"['Insert ConstructorCall', 'Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",122
"public void METHOD_1 ( TYPE_1 target , int value ) { TYPE_2 line = new TYPE_2 ( VAR_1 , this , target , value , VAR_2 ) ; this . VAR_3 . add ( line ) ; }",public void METHOD_1 ( TYPE_1 target ) { this . VAR_3 . add ( target ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete FieldRead', 'Delete ThisAccess', 'Delete VariableRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",124
"public void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , VAR_2 ) ; METHOD_3 ( intent ) ; METHOD_4 ( ) ; }","public void METHOD_1 ( ) { METHOD_3 ( new android.content.Intent ( this , VAR_1 class ) ) ; METHOD_4 ( ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",125
public void METHOD_1 ( int id ) { TYPE_1 VAR_1 = METHOD_2 ( id ) . get ( ) ; VAR_2 . setState ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( int id ) { TYPE_1 VAR_1 = METHOD_2 ( id ) ; VAR_2 . setState ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; },"['Move Invocation', 'Delete Invocation']",126
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( false ) ; TYPE_1 VAR_2 = METHOD_4 ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_5 ( true ) ; } } },public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( false ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; } },"['Insert Invocation', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",127
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( false ) ; android.content.Intent intent = METHOD_3 ( ) ; if ( intent != null ) { METHOD_4 ( intent ) ; return ; } super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( false ) ; super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",128
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 . METHOD_1 ( VAR_2 new TYPE_3 ( ) ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldWrite', 'Delete ConstructorCall', 'Delete Assignment', 'Delete Invocation']",129
public void getData ( ) { METHOD_1 ( ) ; java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( this . VAR_2 ) ; METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; },public void getData ( ) { METHOD_1 ( ) ; METHOD_2 ( ) . METHOD_3 ( this . VAR_2 ) ; },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",130
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_3 { TYPE_1 VAR_4 = VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_2 ) ; return VAR_4 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_3 { return VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",131
"private void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_5 . getId ( ) , true ) ; }",private void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",132
"public java.lang.String getValue ( java.lang.String key , java.lang.String VAR_1 ) { return VAR_2 . getString ( key , VAR_1 ) ; }","public java.lang.String getValue ( java.lang.String key , java.lang.String VAR_1 ) { java.lang.String value = VAR_2 . getString ( key , VAR_1 ) ; return value ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",133
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_2 ) ; return STRING_2 ; }",public java.lang.String METHOD_1 ( ) { return STRING_2 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",135
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable']",136
"public java.lang.String getId ( ) { java.lang.String VAR_1 = java.lang.String . METHOD_1 ( index . METHOD_2 ( ) ) ; TYPE_1 . METHOD_3 ( STRING_1 , VAR_1 , VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) ) ; return VAR_1 ; }",public java.lang.String getId ( ) { return java.lang.String . METHOD_1 ( VAR_2 . METHOD_5 ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",138
"public boolean METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { java.io.File VAR_2 = METHOD_2 ( context , VAR_1 , false ) ; return ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( ) ) ; }","public boolean METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { return ( ( METHOD_2 ( context , VAR_1 , false ) ) != null ) && ( METHOD_2 ( context , VAR_1 , false ) . METHOD_3 ( ) ) ; }","['Insert Invocation', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",139
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; METHOD_6 ( getIntent ( ) ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_3 . METHOD_2 ( ) ; METHOD_5 ( ) ; METHOD_6 ( getIntent ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",140
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 [ ] VAR_1 = VAR_2 . METHOD_2 ( STRING_1 , STRING_2 ) . METHOD_3 ( ) . VAR_1 ; }","public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 [ ] VAR_1 = VAR_2 . METHOD_2 ( STRING_1 , STRING_2 ) . METHOD_3 ( ) ; }","['Move Invocation', 'Delete FieldRead']",141
public void update ( float VAR_1 ) { this . VAR_2 += VAR_1 ; long VAR_3 = TYPE_1 . METHOD_1 ( ) ; if ( VAR_4 . METHOD_2 ( VAR_3 ) ) { this . VAR_5 = true ; } VAR_6 . update ( ) ; },public void update ( float VAR_1 ) { this . VAR_2 += VAR_1 ; if ( VAR_4 . METHOD_2 ( VAR_2 ) ) { this . VAR_5 = true ; } VAR_6 . update ( ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",142
"public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; int VAR_1 = new TYPE_1 ( ) . METHOD_2 ( ) ; int VAR_2 = new TYPE_1 ( ) . METHOD_2 ( ) ; VAR_3 . assertEquals ( VAR_1 , VAR_2 ) ; }",public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; new TYPE_1 ( ) . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",144
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",145
"public java.util.Set < TYPE_1 > METHOD_1 ( java.lang.String query ) { TYPE_2 < TYPE_1 > VAR_1 = new TYPE_2 ( ) ; return VAR_1 . METHOD_2 ( this . VAR_2 , query ) ; }","public java.util.Set < TYPE_1 > METHOD_1 ( java.lang.String query ) { return new TYPE_2 < TYPE_1 > ( ) . METHOD_2 ( this . VAR_2 , query ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",146
"java.lang.String METHOD_1 ( ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ; java.lang.String VAR_2 = VAR_1 . METHOD_4 ( STRING_1 ) ; if ( VAR_2 == null ) { TYPE_3 . METHOD_5 ( STRING_2 ) ; } return VAR_2 ; }","java.lang.String METHOD_1 ( ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ; return VAR_1 . METHOD_4 ( STRING_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",147
public boolean METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; },public boolean METHOD_1 ( ) { boolean VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess', 'Delete FieldRead']",149
"public TYPE_1 METHOD_1 ( ) { java.util.ArrayList < TYPE_2 > VAR_1 = new java.util.ArrayList < > ( VAR_2 ) ; VAR_3 . add ( METHOD_2 ( ) ) ; path . METHOD_3 ( VAR_1 , false ) ; return path ; }","public TYPE_1 METHOD_1 ( ) { path . METHOD_3 ( VAR_2 , this ) ; return path ; }","['Insert Invocation', 'Move FieldRead', 'Insert TypeAccess', 'Insert ThisAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",151
"private TYPE_1 METHOD_1 ( long VAR_1 ) throws TYPE_2 , java.io.IOException { TYPE_3 VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_3 = METHOD_3 ( VAR_1 , VAR_4 , VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; return VAR_3 ; }","private TYPE_1 METHOD_1 ( long VAR_1 ) throws TYPE_2 , java.io.IOException { TYPE_1 VAR_3 = METHOD_3 ( VAR_1 , VAR_4 ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; return VAR_3 ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",154
"public TYPE_1 METHOD_1 ( ) throws TYPE_2 , java.io.IOException { TYPE_1 answer = METHOD_2 ( ( - 1 ) ) ; out . METHOD_3 ( ) ; return answer ; }","public TYPE_1 METHOD_1 ( ) throws TYPE_2 , java.io.IOException { return METHOD_2 ( ( - 1 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead']",155
public void METHOD_1 ( TYPE_1 result ) { if ( ( VAR_1 ) != null ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( result ) ; if ( METHOD_3 ( ) ) { VAR_3 . METHOD_1 ( VAR_2 ) ; } } },public void METHOD_1 ( TYPE_1 result ) { if ( ( METHOD_3 ( ) ) && ( ( VAR_1 ) != null ) ) { VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( result ) ) ; } },"['Insert BinaryOperator', 'Move Invocation', 'Move BinaryOperator', 'Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",156
"public long METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; long VAR_4 = VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_5 . METHOD_2 ( VAR_2 ) ; return VAR_4 ; }","public long METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { long VAR_4 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_5 . METHOD_2 ( VAR_2 ) ; return VAR_4 ; }","['Move Invocation', 'Delete VariableRead', 'Delete Invocation']",157
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException , TYPE_3 { java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { return METHOD_3 ( VAR_2 ) ; } else { return null ; } }","private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException , TYPE_3 { return METHOD_3 ( METHOD_2 ( VAR_1 ) ) ; }","['Insert Return', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",158
public static void METHOD_1 ( TYPE_1 a ) { TYPE_1 id = VAR_1 ; TYPE_1 VAR_2 = VAR_3 ; TYPE_2 VAR_4 ; VAR_5 . expr ( VAR_2 ) ; VAR_6 . value = VAR_7 ; },public static void METHOD_1 ( TYPE_1 a ) { TYPE_1 id = VAR_1 ; TYPE_1 VAR_2 = VAR_3 ; VAR_5 . expr ( VAR_2 ) ; VAR_6 . value = VAR_7 ; },"['Delete TypeReference', 'Delete LocalVariable']",161
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_2 != ( VAR_4 ) ) { METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_5 ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_6 ( ) ) ; },"['Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",163
public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) return METHOD_3 ( ) ; return ( ( VAR_2 . getName ( ) ) + STRING_1 ) + ( METHOD_3 ( ) ) ; },public java.lang.String METHOD_1 ( ) { return ( ( METHOD_2 ( ) . getName ( ) ) + STRING_1 ) + ( METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",165
public synchronized TYPE_1 getData ( ) { if ( ( data ) == null ) { TYPE_2 VAR_1 = METHOD_1 ( ) ; if ( VAR_1 != null ) { data = VAR_2 . get ( VAR_1 ) ; } } return data ; },public synchronized TYPE_1 getData ( ) { if ( ( data ) == null ) { data = VAR_2 . get ( METHOD_1 ( ) ) ; } return data ; },"['Move If', 'Move BinaryOperator', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Block', 'Delete If']",168
public static java.lang.String METHOD_1 ( java.lang.String item ) { java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; java.lang.String VAR_3 = STRING_1 ; java.lang.System.out.println ( STRING_2 ) ; return VAR_3 ; },public static java.lang.String METHOD_1 ( java.lang.String item ) { java.lang.String VAR_3 = STRING_1 ; java.lang.System.out.println ( STRING_2 ) ; return VAR_3 ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable']",169
public java.lang.String METHOD_1 ( int i ) { java.lang.String TYPE_1 = METHOD_2 ( i ) ; if ( VAR_1 . isEmpty ( ) ) return TYPE_1 ; return TYPE_2 . METHOD_3 ( VAR_1 . toLowerCase ( ) ) ; },public java.lang.String METHOD_1 ( int i ) { return TYPE_2 . METHOD_3 ( METHOD_2 ( i ) . toLowerCase ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",170
public char METHOD_1 ( ) { char VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; },public char METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Return']",172
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_5 . METHOD_4 ( VAR_1 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_5 . METHOD_4 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",176
public int METHOD_1 ( ) { int VAR_1 = ( VAR_2 . METHOD_2 ( ( ( ( VAR_3 ) - ( min ) ) + 1 ) ) ) + ( min ) ; java.lang.System.out.println ( VAR_1 ) ; return VAR_1 ; },public int METHOD_1 ( ) { return ( VAR_2 . METHOD_2 ( ( ( ( VAR_3 ) - ( min ) ) + 1 ) ) ) + ( min ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",177
"public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 . METHOD_2 ( STRING_1 ) ; TYPE_4 VAR_1 = METHOD_3 ( ) ; if ( VAR_1 == null ) { return null ; } return VAR_2 . METHOD_4 ( VAR_1 , this . VAR_3 ) ; }","public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 . METHOD_2 ( STRING_1 ) ; return VAR_2 . METHOD_4 ( METHOD_3 ( ) , this . VAR_3 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",178
"public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { boolean VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 ) { VAR_4 . add ( VAR_1 ) ; } return VAR_3 ; }","public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",179
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return getData ( VAR_1 ) . getString ( STRING_1 , STRING_2 ) ; }",public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String str = getData ( VAR_1 ) . getString ( STRING_1 ) ; if ( str != null ) { return str ; } return STRING_2 ; },"['Insert LocalVariable', 'Insert If', 'Insert TypeReference', 'Move Invocation', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert VariableRead', 'Insert Literal', 'Insert Return', 'Insert VariableRead', 'Delete TypeAccess']",180
private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String key = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( key ) ; VAR_2 . METHOD_5 ( key ) . METHOD_5 ( STRING_1 ) . setValue ( VAR_1 ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_5 ( STRING_1 ) . setValue ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",181
public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; return VAR_2 . format ( this . VAR_3 ) ; },public java.util.Date METHOD_1 ( ) { return this . VAR_3 ; },"['Update TypeReference', 'Move FieldRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",182
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { int VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_3 ) ; VAR_5 . METHOD_1 ( VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_5 . METHOD_1 ( VAR_1 ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",183
"protected TYPE_1 METHOD_1 ( TYPE_2 node , TYPE_3 context ) { TYPE_3 c = new TYPE_3 ( context ) ; return TYPE_4 . METHOD_2 ( node . METHOD_3 ( ) , c ) ; }","protected TYPE_1 METHOD_1 ( TYPE_2 node , TYPE_3 context ) { return TYPE_4 . METHOD_2 ( node . METHOD_3 ( ) , context ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",184
"public TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_1 p = super . METHOD_1 ( ) ; return p ; }","public TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; return super . METHOD_1 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",185
public static java.lang.Object METHOD_1 ( java.lang.String string ) { java.lang.Object VAR_1 = TYPE_1 . METHOD_1 ( string ) ; if ( VAR_1 instanceof java.lang.String ) { return TYPE_2 . METHOD_2 ( ( ( java.lang.String ) ( VAR_1 ) ) ) ; } return VAR_1 ; },public static java.lang.Object METHOD_1 ( java.lang.String string ) { return TYPE_1 . METHOD_1 ( string ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",186
"public void METHOD_1 ( ) { TYPE_1 t = new TYPE_1 ( INT_1 , INT_1 , 1 ) ; VAR_1 . assertEquals ( VAR_2 , TYPE_2 . METHOD_2 ( t ) ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",187
"public int METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 < 0 ) return - 1 ; return ( ( int ) ( VAR_3 . METHOD_3 ( VAR_1 , 0 ) ) ) ; }",public int METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",188
"public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ( ( VAR_3 . METHOD_3 ( ) ) - 1 ) ) ; long VAR_4 = ( VAR_2 . METHOD_4 ( ) ) - 1 ; METHOD_5 ( VAR_4 , VAR_1 ) ; }",public void METHOD_1 ( int offset ) { METHOD_5 ( offset ) ; },"['Update Parameter', 'Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",190
"public java.lang.String METHOD_1 ( ) { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; java.lang.String filePath = ( ( VAR_1 . METHOD_4 ( ) ) + STRING_1 ) + ( METHOD_5 ( ) ) ; return VAR_2 . replaceAll ( VAR_3 , STRING_2 ) ; }",public java.lang.String METHOD_1 ( ) { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; return ( ( VAR_1 . METHOD_4 ( ) ) + STRING_1 ) + ( METHOD_5 ( ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",191
"public boolean METHOD_1 ( java.lang.String key , TYPE_1 VAR_1 ) { boolean VAR_2 = set ( key , VAR_1 , false ) ; if ( VAR_2 ) { VAR_1 . METHOD_2 ( this ) ; } return VAR_2 ; }","public boolean METHOD_1 ( java.lang.String key , TYPE_1 VAR_1 ) { return set ( key , VAR_1 , false ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",194
private void METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_2 . setText ( VAR_1 ) ; } },private void METHOD_1 ( ) { VAR_2 . setText ( TYPE_1 . METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",195
public TYPE_1 METHOD_1 ( ) { java.lang.Object VAR_1 = get ( VAR_2 ) ; if ( VAR_1 == null ) { return null ; } return ( ( TYPE_1 ) ( get ( VAR_2 ) ) ) ; },public TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( get ( VAR_2 ) ) ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",196
public void METHOD_1 ( ) { new TYPE_1 ( null ) ; },public void METHOD_1 ( ) { TYPE_1 msg = new TYPE_1 ( null ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall']",197
protected void METHOD_1 ( TYPE_1 < TYPE_2 > result ) { java.lang.String temp = VAR_1 ; VAR_2 . METHOD_2 ( result . METHOD_3 ( ) ) ; },protected void METHOD_1 ( TYPE_1 < TYPE_2 > result ) { VAR_2 . METHOD_2 ( result . METHOD_3 ( ) ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",198
"private static boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_1 == null ) || ( ! ( TYPE_1 . METHOD_2 ( VAR_2 . replaceAll ( STRING_1 , STRING_2 ) . replaceAll ( STRING_3 , STRING_2 ) ) ) ) ; }","private static boolean METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String type = VAR_2 . replaceAll ( STRING_1 , STRING_2 ) . replaceAll ( STRING_3 , STRING_2 ) ; return TYPE_1 . METHOD_2 ( type ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert Invocation', 'Move TypeAccess', 'Insert VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",199
"public void METHOD_1 ( ) { double VAR_1 = METHOD_2 ( temp , INT_1 ) ; VAR_2 . setText ( ( VAR_3 ? STRING_1 + VAR_1 : STRING_2 ) ) ; }",public void METHOD_1 ( ) { VAR_2 . setText ( ( VAR_3 ? STRING_1 + ( temp ) : STRING_2 ) ) ; },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",200
public java.util.Set < java.lang.String > METHOD_1 ( java.lang.String name ) { java.util.Set < java.lang.String > VAR_1 = this . VAR_2 . get ( name ) ; if ( VAR_1 == null ) { return TYPE_1 . METHOD_2 ( ) ; } return VAR_1 ; },public java.util.Set < java.lang.String > METHOD_1 ( java.lang.String name ) { return this . VAR_2 . get ( name ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",201
"public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_5 , INT_1 ) ; }","public void METHOD_1 ( ) { VAR_4 . METHOD_4 ( VAR_5 , INT_1 ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",204
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { long VAR_3 = TYPE_2 . METHOD_2 ( ) ; VAR_4 . update ( ) ; VAR_5 . METHOD_3 ( ) ; long VAR_6 = TYPE_2 . METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . update ( ) ; VAR_5 . METHOD_3 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete Block', 'Delete If']",205
"public void METHOD_1 ( java.lang.String str , TYPE_1 VAR_1 ) { java.lang.System.out.println ( str ) ; java.util.ArrayList < TYPE_2 > VAR_2 = METHOD_2 ( str ) ; TYPE_3 . METHOD_3 ( VAR_2 ) ; }","public void METHOD_1 ( java.lang.String str , TYPE_1 VAR_1 ) { java.lang.System.out.println ( str ) ; METHOD_2 ( str ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",206
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 ) ; TYPE_3 VAR_3 = VAR_4 . getConfig ( ) ; VAR_3 . METHOD_2 ( VAR_5 , new TYPE_4 ( ) ) ; VAR_6 . execute ( VAR_1 , METHOD_3 ( ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 ) ; VAR_6 . execute ( VAR_1 , METHOD_3 ( ) ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete ConstructorCall', 'Delete Invocation']",207
"public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { java.net.URL url = new java.net.URL ( VAR_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) ; return TYPE_2 . METHOD_1 ( url , false ) ; }","public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { VAR_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; return TYPE_2 . METHOD_1 ( new java.net.URL ( VAR_1 ) , false ) ; }","['Move Invocation', 'Insert ConstructorCall', 'Insert VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",209
"public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = this . METHOD_2 ( ) ; java.util.List < TYPE_1 > list = METHOD_3 ( VAR_2 , null , VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; return list ; }","public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = this . METHOD_2 ( ) ; return METHOD_3 ( VAR_2 , null , VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",213
public void update ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) . commit ( ) ; },public void update ( TYPE_1 VAR_1 ) throws TYPE_2 { },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",214
"private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = METHOD_2 ( ) ; if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( VAR_1 , VAR_3 ) ; VAR_4 = VAR_3 ; } return VAR_2 ; }","private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( METHOD_2 ( ) , VAR_3 ) ; } return VAR_2 ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldWrite', 'Delete FieldRead', 'Delete Assignment']",216
public int METHOD_1 ( ) { int i = METHOD_2 ( ) ; return METHOD_3 ( i ) ; },public int METHOD_1 ( ) { METHOD_2 ( ) ; return METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",217
protected final void METHOD_1 ( final TYPE_1 event ) { java.lang.System.out.println ( VAR_1 . toString ( ) ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( new TYPE_1 [ ] { event } ) ; } },protected final void METHOD_1 ( final TYPE_1 event ) { java.lang.System.out.println ( VAR_1 . toString ( ) ) ; TYPE_2 . METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ ] { event } ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",218
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( java.util.Arrays.asList ( STRING_1 ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",219
private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_2 = VAR_3 . getString ( VAR_4 ) ; VAR_5 = VAR_3 . getString ( VAR_6 ) ; } },private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( VAR_1 != null ) { VAR_2 = VAR_3 . getString ( VAR_4 ) ; VAR_5 = VAR_3 . getString ( VAR_6 ) ; } },"['Insert ConstructorCall', 'Delete Invocation']",220
"private void METHOD_1 ( java.lang.String msg ) { if ( VAR_1 ) { java.lang.String format = STRING_1 ; java.lang.String text = java.lang.String.format ( format , VAR_2 , TYPE_1 . METHOD_2 ( STRING_2 , VAR_3 ) , msg ) ; TYPE_2 . METHOD_3 ( VAR_4 , text ) ; } }",private void METHOD_1 ( java.lang.String msg ) { },"['Delete FieldRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",221
"public void METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( INT_1 , INT_2 ) ; VAR_2 . assertEquals ( INT_3 , VAR_1 ) ; int VAR_3 = TYPE_1 . METHOD_2 ( INT_4 , INT_5 ) ; VAR_2 . assertEquals ( INT_6 , VAR_3 ) ; }","public void METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( INT_1 , INT_2 ) ; VAR_2 . assertEquals ( INT_3 , VAR_1 ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",222
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean result = super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_1 ) ; VAR_1 . METHOD_4 ( 1 ) . METHOD_5 ( true ) ; return result ; }",public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean result = super . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_4 ( 1 ) . METHOD_5 ( true ) ; return result ; },"['Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",225
"public static boolean METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 , final byte [ ] VAR_3 ) { final TYPE_2 VAR_4 = TYPE_3 . METHOD_2 ( VAR_3 , 0 ) ; return TYPE_3 . METHOD_3 ( VAR_1 , VAR_2 , VAR_4 ) ; }","public static boolean METHOD_1 ( final TYPE_1 VAR_1 , final byte [ ] VAR_3 , final java.lang.String VAR_2 ) { final TYPE_2 VAR_4 = TYPE_3 . METHOD_2 ( VAR_3 ) ; return TYPE_3 . METHOD_3 ( VAR_1 , VAR_4 , VAR_2 ) ; }","['Move Parameter', 'Move VariableRead', 'Delete Literal']",226
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String key = VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; TYPE_3 . METHOD_4 ( context , key ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",227
public synchronized boolean METHOD_1 ( java.lang.Integer VAR_1 ) { boolean VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 ) { VAR_3 . METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; } return VAR_2 ; },public synchronized void METHOD_1 ( java.lang.Integer VAR_1 ) { if ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_3 . METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; } },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",228
"static void METHOD_1 ( java.lang.String format , java.lang.Object ... args ) { java.lang.String VAR_1 = java.lang.String.format ( format , args ) ; java.lang.String VAR_2 = java.lang.String.format ( VAR_3 , format , args ) ; }","static void METHOD_1 ( java.lang.String format , java.lang.Object ... args ) { java.lang.String VAR_1 = java.lang.String.format ( VAR_3 , format , args ) ; }","['Update LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",229
"public void METHOD_1 ( ) { TYPE_1 result = VAR_1 . METHOD_2 ( STRING_1 ) ; assertEquals ( INT_1 , result . METHOD_3 ( ) , FLOAT_1 ) ; }","public void METHOD_1 ( ) { assertEquals ( INT_1 , VAR_1 . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) , FLOAT_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",230
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; if ( VAR_3 != null ) { android.content.Intent intent = new android.content.Intent ( METHOD_4 ( ) , VAR_3 ) ; METHOD_5 ( intent ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; }","['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",231
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_1 ) ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_6 ( true ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_6 ( true ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",232
"public float METHOD_1 ( java.lang.String key , float VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( key , VAR_1 ) ; }","public float METHOD_1 ( java.lang.String key , float VAR_1 ) { float value = METHOD_2 ( ) . METHOD_1 ( key , VAR_1 ) ; return value ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",233
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 , VAR_1 ) ; TYPE_3 VAR_4 = VAR_1 . METHOD_4 ( VAR_5 ) ; VAR_4 . METHOD_5 ( false ) ; return super . METHOD_1 ( VAR_1 ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 , VAR_1 ) ; return super . METHOD_1 ( VAR_1 ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",234
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int status ) { if ( status == ( VAR_3 ) ) { java.lang.String data = VAR_2 . METHOD_2 ( 0 ) ; TYPE_3 . METHOD_3 ( VAR_4 , ( STRING_1 + data ) ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int status ) { if ( status == ( VAR_3 ) ) { } }","['Delete TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",235
public int METHOD_1 ( ) { int sum = 0 ; final int VAR_1 = VAR_2 . length ; for ( int i = VAR_1 - 1 ; i >= 0 ; i -- ) { sum += i ; } return sum ; },public int METHOD_1 ( ) { int sum = 0 ; final int VAR_1 = VAR_2 . length ; for ( int i = VAR_1 ; i >= 0 ; i -- ) { sum += i ; } return sum ; },"['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",236
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( ) ; VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; VAR_5 . METHOD_3 ( VAR_6 , VAR_2 ) ; VAR_5 . METHOD_4 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",238
public static boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; return true ; },public static boolean METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; return true ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",239
"private int METHOD_1 ( int [ ] VAR_1 , int size ) { for ( int i = size - 1 ; i > 0 ; i -- ) if ( ( VAR_1 [ i ] ) > 0 ) return i ; return - 1 ; }","private int METHOD_1 ( int [ ] VAR_1 , int size ) { for ( int i = size ; i > 0 ; i -- ) if ( ( VAR_1 [ i ] ) > 0 ) return i ; return - 1 ; }","['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",241
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_3 ) ; VAR_1 . METHOD_4 ( STRING_2 ) . METHOD_5 ( VAR_1 , VAR_2 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { VAR_1 . METHOD_4 ( STRING_2 ) . METHOD_5 ( VAR_1 , VAR_2 ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",242
public void init ( ) { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_1 ( ) ) ; VAR_1 . METHOD_2 ( ( ) - > VAR_2 . METHOD_3 ( ) ) ; },public void init ( ) { VAR_2 . METHOD_3 ( ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable']",243
public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( 0 ) ; while ( VAR_2 <= INT_1 ) { VAR_1 . METHOD_3 ( 0 ) ; } return ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; int VAR_2 = VAR_1 . METHOD_2 ( 0 ) ; while ( VAR_2 <= INT_1 ) { VAR_1 . METHOD_3 ( 0 ) ; } },"['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Delete Parameter', 'Delete Return']",244
private boolean METHOD_1 ( java.lang.String [ ] params ) { if ( params != null ) { int VAR_1 = java.util.Arrays.asList ( params ) . METHOD_2 ( VAR_2 ) ; return VAR_1 > ( - 1 ) ; } else { return false ; } },private boolean METHOD_1 ( java.lang.String [ ] params ) { if ( params != null ) { return java.util.Arrays.asList ( ) . contains ( VAR_2 ) ; } else { return false ; } },"['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator']",245
"public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_3 ) ; VAR_4 . add ( 0 , new TYPE_2 ( VAR_2 ) . METHOD_3 ( VAR_5 ) ) ; return VAR_1 ; }",public java.util.List < TYPE_1 > METHOD_1 ( ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",247
public static void main ( java.lang.String [ ] args ) { TYPE_1 f = new TYPE_1 ( STRING_1 ) ; java.lang.System.out.println ( f . METHOD_1 ( ) ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",248
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = new TYPE_4 ( VAR_1 , VAR_2 ) . execute ( VAR_4 ) ; java.lang.System.out.println ( VAR_3 ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return new TYPE_4 ( VAR_1 , VAR_2 ) . execute ( VAR_4 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",249
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; new TYPE_2 ( ) . METHOD_2 ( ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Invocation']",251
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_1 ( ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_2 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",252
"public void METHOD_1 ( ) throws TYPE_1 { METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_1 = METHOD_3 ( METHOD_4 ( VAR_2 class , STRING_2 , VAR_3 class ) , METHOD_5 ( ) ) ; VAR_4 . execute ( ) ; METHOD_6 ( STRING_1 ) ; }","public void METHOD_1 ( ) throws TYPE_1 { METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_1 = METHOD_3 ( METHOD_4 ( STRING_2 , VAR_3 class ) , METHOD_5 ( ) ) ; VAR_4 . execute ( ) ; METHOD_6 ( STRING_1 ) ; }",['Delete TypeAccess'],253
"public void METHOD_1 ( android.view.View VAR_1 ) { int VAR_2 = INT_1 ; int VAR_3 = INT_1 ; int VAR_4 = INT_2 ; int VAR_5 = INT_3 ; start ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { int VAR_2 = INT_1 ; int VAR_3 = INT_1 ; int VAR_4 = INT_2 ; start ( VAR_2 , VAR_3 , VAR_4 ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",254
"public void METHOD_1 ( android.view.View view ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , ( STRING_1 + STRING_2 ) , VAR_1 ) . show ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_4 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , STRING_1 , VAR_1 ) . show ( ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",256
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.io.File VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; if ( VAR_2 != null ) { VAR_4 = VAR_2 ; VAR_5 = new TYPE_2 ( VAR_6 . toString ( ) ) ; } },public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_4 = VAR_1 . METHOD_2 ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_5 = new TYPE_2 ( VAR_6 . toString ( ) ) ; } },"['Insert Assignment', 'Move FieldWrite', 'Move Invocation', 'Insert FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Assignment']",257
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( VAR_3 class , 1L ) ; if ( VAR_1 == null ) VAR_4 . error ( STRING_1 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { return VAR_2 . METHOD_1 ( VAR_3 class , 1L ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",258
"private void METHOD_1 ( ) { final android.content.Intent intent = TYPE_1 . METHOD_2 ( this ) . METHOD_3 ( ) . METHOD_4 ( true ) . METHOD_5 ( false ) . METHOD_6 ( true ) . build ( ) ; METHOD_7 ( intent , VAR_1 ) ; }","private void METHOD_1 ( ) { final android.content.Intent intent = TYPE_1 . METHOD_2 ( this ) . METHOD_3 ( true , false , true ) . build ( ) ; METHOD_7 ( intent , VAR_1 ) ; }","['Update Invocation', 'Move Invocation', 'Move Literal', 'Move Literal', 'Move Literal', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",261
"public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 args = new TYPE_2 ( ) ; args . METHOD_2 ( VAR_2 , VAR_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_3 ( args ) ; return VAR_3 ; }",public static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; return VAR_3 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",263
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 class ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_4 ( VAR_4 class ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",266
public final java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) throws java.lang.Exception { double value = VAR_2 . METHOD_2 ( VAR_1 ) ; return java.lang.String . METHOD_3 ( ( ( int ) ( value ) ) ) ; },public final java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_2 . METHOD_2 ( VAR_1 ) ; return new java.lang.String ( ) ; },"['Move Invocation', 'Insert ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation']",267
public void METHOD_1 ( ) { TYPE_1 c = VAR_1 . METHOD_2 ( ) ; c . METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( c ) ; },public void METHOD_1 ( ) { VAR_2 . METHOD_5 ( VAR_1 . METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",269
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_3 ( VAR_3 , METHOD_2 ( ) , VAR_1 , VAR_4 ) ; VAR_5 . info ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_3 ( VAR_3 , METHOD_2 ( ) , VAR_1 , VAR_4 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead']",270
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_3 . METHOD_2 ( ) ; java.lang.System.out.println ( VAR_2 ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ) ; java.lang.System.out.println ( VAR_2 ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",271
"public TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( this , STRING_1 , null ) ; TYPE_1 VAR_1 = TYPE_1 . METHOD_3 ( position , type , TYPE_3 . METHOD_4 ( VAR_2 ) ) ; TYPE_2 . METHOD_5 ( VAR_1 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( this , STRING_1 , null ) ; TYPE_1 VAR_1 = new TYPE_1 ( position , type , TYPE_3 . METHOD_4 ( VAR_2 ) ) ; TYPE_2 . METHOD_5 ( VAR_1 ) ; return VAR_1 ; }","['Insert ConstructorCall', 'Move FieldRead', 'Move FieldRead', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",273
public static long METHOD_1 ( java.util.Date VAR_1 ) { java.util.Calendar VAR_2 = TYPE_1 . METHOD_2 ( ) ; return ( VAR_3 . getTime ( ) ) + ( VAR_4 . get ( VAR_5 ) ) ; },public static long METHOD_1 ( java.util.Date VAR_1 ) { return ( VAR_3 . getTime ( ) ) + ( TYPE_1 . METHOD_2 ( ) . get ( VAR_5 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",274
public void METHOD_1 ( int i ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( ( VAR_1 . METHOD_3 ( ) ) || ( VAR_1 . METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else { VAR_1 . METHOD_1 ( i ) ; } },public void METHOD_1 ( int i ) { if ( ( METHOD_2 ( ) . METHOD_3 ( ) ) || ( METHOD_2 ( ) . METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else { METHOD_2 ( ) . METHOD_1 ( i ) ; } },"['Insert Invocation', 'Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Insert Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",276
"public long METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 != null ) { return VAR_4 . size ( ) ; } return 0 ; }",public long METHOD_1 ( java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_4 . size ( ) ; } return 0 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",277
"protected void execute ( ) { double VAR_1 = 0 ; double VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_2 , ( - VAR_2 ) ) ; }","protected void execute ( ) { double VAR_2 = VAR_3 . METHOD_1 ( ) ; VAR_4 . METHOD_2 ( VAR_2 , ( - VAR_2 ) ) ; }","['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete VariableRead']",278
private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ; if ( VAR_1 == null ) { return false ; } return ( VAR_1 . METHOD_4 ( ) ) == ( VAR_4 ) ; },private boolean METHOD_1 ( ) { return ( VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( ) . METHOD_4 ( ) ) == ( VAR_4 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",281
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",282
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; METHOD_3 ( VAR_4 ) ; METHOD_4 ( ) ; return VAR_4 ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",283
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = this . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = this . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; return VAR_3 ; }",['Delete VariableRead'],285
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . METHOD_2 ( VAR_2 . values ( ) ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return ( ( java.util.List < TYPE_1 > ) ( VAR_2 . values ( ) ) ) ; },"['Insert Invocation', 'Insert TypeReference', 'Move TypeAccess', 'Move TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",288
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , java.lang.String.format ( STRING_1 , STRING_2 ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , STRING_3 ) ; VAR_2 . METHOD_3 ( true ) ; VAR_4 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , java.lang.String.format ( STRING_1 , STRING_2 ) ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",289
public void delete ( java.lang.Object key ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_1 ( key ) ) ; VAR_3 . remove ( VAR_2 ) ; },public void delete ( java.lang.Object key ) { VAR_3 . remove ( key ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",291
protected boolean METHOD_1 ( ) { for ( java.lang.String fieldName : VAR_1 ) { java.lang.Object VAR_2 = VAR_3 . get ( fieldName ) ; if ( VAR_2 == null ) { java.lang.System.out.println ( ( fieldName + STRING_1 ) ) ; return false ; } } return true ; },protected boolean METHOD_1 ( ) { for ( java.lang.Object field : VAR_3 . values ( ) ) { if ( field == null ) return false ; } return true ; },"['Insert LocalVariable', 'Update Invocation', 'Move Invocation', 'Move TypeReference', 'Update VariableRead', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",292
public TYPE_1 METHOD_1 ( ) { int VAR_1 = size ( ) ; if ( VAR_1 > 0 ) { return this . VAR_2 . get ( ( VAR_1 - 1 ) ) ; } else { return null ; } },public TYPE_1 METHOD_1 ( ) { int VAR_1 = ( size ( ) ) - 1 ; if ( VAR_1 > 0 ) { return this . VAR_2 . get ( VAR_1 ) ; } else { return null ; } },"['Insert BinaryOperator', 'Move Invocation', 'Move Literal', 'Move VariableRead', 'Delete BinaryOperator']",293
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 p = VAR_2 . METHOD_2 ( VAR_1 ) ; p . METHOD_3 ( TYPE_2 . METHOD_4 ( p . METHOD_5 ( ) ) ) ; return p ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",294
"protected double METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { double VAR_3 = VAR_4 . METHOD_2 ( ) ; double VAR_5 = FLOAT_1 ; return ( ( VAR_6 [ VAR_1 ] ) + VAR_5 ) / VAR_3 ; }","protected double METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { double VAR_3 = VAR_4 . METHOD_2 ( ) ; return ( VAR_6 [ VAR_1 ] ) / VAR_3 ; }","['Update BinaryOperator', 'Move BinaryOperator', 'Move VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator']",295
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; return VAR_4 . METHOD_4 ( VAR_1 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; }",public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_4 . METHOD_4 ( VAR_1 ) . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",296
"public long METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; long id = VAR_3 . METHOD_3 ( VAR_4 , null , VAR_2 ) ; VAR_1 . METHOD_4 ( id ) ; return id ; }",public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return null ; },"['Update TypeReference', 'Move Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",297
"public void METHOD_1 ( ) { java.lang.String filePath = METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ( STRING_1 + filePath ) ) ; METHOD_4 ( java.lang.String.format ( VAR_3 , filePath ) ) ; }","public void METHOD_1 ( ) { VAR_2 . METHOD_3 ( ( STRING_1 + ( VAR_1 ) ) ) ; METHOD_4 ( java.lang.String.format ( VAR_3 , VAR_1 ) ) ; }","['Insert FieldRead', 'Move TypeAccess', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",298
"protected static TYPE_1 < TYPE_2 > METHOD_1 ( int VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return new TYPE_1 < TYPE_2 > ( INT_1 , VAR_2 ) ; }","protected static TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_1 < TYPE_2 > ( INT_1 , new TYPE_3 ( ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",299
public int METHOD_1 ( float VAR_1 ) { int i = ( TYPE_1 . METHOD_2 ( VAR_1 ) ) / ( VAR_2 ) ; return i ; },public int METHOD_1 ( float VAR_1 ) { return ( TYPE_1 . METHOD_2 ( VAR_1 ) ) / ( VAR_2 ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",300
private void METHOD_1 ( int num ) { for ( int f = num ; f <= INT_1 ; f += num ) VAR_1 [ ( f - 1 ) ] = ! ( VAR_1 [ ( f - 1 ) ] ) ; },private void METHOD_1 ( int num ) { for ( int f = 0 ; f < INT_1 ; f += num ) VAR_1 [ f ] = ! ( VAR_1 [ f ] ) ; },"['Update BinaryOperator', 'Insert Literal', 'Move VariableRead', 'Move VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",302
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 ; if ( VAR_2 != null ) { if ( ! ( VAR_4 ) ) { METHOD_2 ( VAR_1 ) ; } else { METHOD_3 ( VAR_1 ) ; METHOD_1 ( VAR_2 ) ; } } },private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) != null ) { if ( ! ( VAR_4 ) ) { METHOD_2 ( VAR_1 ) ; } else { METHOD_3 ( VAR_1 ) ; METHOD_1 ( VAR_3 ) ; } } },"['Move FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",303
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . getValue ( VAR_4 class ) ; int num = VAR_5 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_3 ( this , ( STRING_1 + num ) , VAR_6 ) . show ( ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",304
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_3 = VAR_1 . METHOD_3 ( VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_3 ) ; },public void METHOD_1 ( ) { VAR_3 = VAR_1 . METHOD_3 ( VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_3 ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",305
"public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( VAR_1 ) ; java.util.Collections.sort ( VAR_2 , new TYPE_2 ( ) ) ; return VAR_2 ; }","public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_2 ) { java.util.Collections.sort ( VAR_2 , new TYPE_2 ( ) ) ; return VAR_2 ; }","['Update Parameter', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",306
public void handle ( TYPE_1 event ) { java.lang.String id = VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . split ( STRING_1 ) [ 1 ] ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 . trim ( ) ) ; },public void handle ( TYPE_1 event ) { java.lang.String id = VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . split ( STRING_1 ) [ 1 ] ; java.lang.System.out.println ( id ) ; },"['Update Invocation', 'Insert FieldRead', 'Update VariableRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",307
"public void METHOD_1 ( TYPE_1 a ) { METHOD_2 ( VAR_1 . getClass ( ) . getName ( ) , STRING_1 , null , null , null , null , null ) ; TYPE_2 VAR_2 = new TYPE_2 ( a ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 a ) { METHOD_2 ( VAR_1 . getClass ( ) . getName ( ) , STRING_1 , null , null , null , null , null ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",310
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_3 VAR_1 = ( ( TYPE_3 ) ( VAR_2 . getContext ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; java.lang.System.out.println ( VAR_1 . METHOD_4 ( ) ) ; return VAR_3 . METHOD_5 ( ) ; },public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_3 . METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",312
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Long VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( java.lang.String . METHOD_4 ( VAR_1 ) ) . METHOD_5 ( ) . METHOD_6 ( ) ; return VAR_4 . list ( ) ; },public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Long VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( java.lang.String . METHOD_4 ( VAR_1 ) ) ; return VAR_4 . list ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Invocation']",313
public java.lang.String getName ( ) { return new java.io.File ( METHOD_1 ( ) ) . getName ( ) ; },public java.lang.String getName ( ) { java.lang.String p = METHOD_1 ( ) ; return new java.io.File ( p ) . getName ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",314
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) throws java.lang.Exception { TYPE_2 < TYPE_1 > VAR_1 = new TYPE_2 < TYPE_1 > ( new TYPE_3 ( ) ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return new java.util.ArrayList ( VAR_1 ) ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) throws java.lang.Exception { return new java.util.ArrayList ( VAR_2 ) ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",316
"public static void main ( java.lang.String [ ] args ) { TYPE_1 context = TYPE_2 . METHOD_1 ( VAR_1 class , args ) ; }","public static void main ( java.lang.String [ ] args ) { TYPE_2 . METHOD_1 ( VAR_1 class , args ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable']",317
"public static TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( ) { TYPE_4 TYPE_5 = TYPE_4 . METHOD_2 ( ) ; if ( TYPE_5 == null ) { return null ; } return VAR_1 < TYPE_2 , TYPE_3 > METHOD_3 ( VAR_2 class ) ; }","public static TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( ) . < TYPE_2 , TYPE_3 > METHOD_3 ( VAR_2 class ) ; }","['Insert Invocation', 'Insert TypeReference', 'Insert TypeReference', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete BinaryOperator']",319
"public TYPE_1 < java.lang.Long > METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.Long VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; return new TYPE_1 < java.lang.Long > ( VAR_2 , VAR_4 ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 VAR_1 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 , VAR_4 ) ; }","['Move Invocation', 'Update TypeReference', 'Update VariableRead', 'Delete TypeReference', 'Delete LocalVariable']",320
public boolean METHOD_1 ( ) { try { int VAR_1 = java.lang.Integer.parseInt ( getText ( ) ) ; return VAR_1 > 1 ; } catch ( TYPE_1 | java.lang.NullPointerException VAR_2 ) { return false ; } },public boolean METHOD_1 ( ) { try { java.lang.Integer.parseInt ( getText ( ) ) ; return true ; } catch ( TYPE_1 | java.lang.NullPointerException VAR_2 ) { return false ; } },"['Move Invocation', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator']",321
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent i = new android.content.Intent ( this , VAR_2 class ) . METHOD_2 ( STRING_1 , ( ( int ) ( VAR_1 . METHOD_3 ( ) ) ) ) ; METHOD_4 ( i ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent i = new android.content.Intent ( this , VAR_2 class ) ; METHOD_4 ( i ) ; }","['Move ConstructorCall', 'Delete TypeAccess', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",322
public void METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",324
public int METHOD_1 ( TYPE_1 VAR_1 ) { int value = 0 ; return value ; },public int METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",325
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) ; java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; }",public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; },"['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",328
private void METHOD_1 ( ) { TYPE_1 < java.lang.String > VAR_1 = VAR_2 < java.lang.String > METHOD_2 ( null ) ; METHOD_3 ( VAR_3 . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( VAR_1 ) ; },private void METHOD_1 ( ) { METHOD_3 ( VAR_3 . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( null ) ; },"['Move Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",331
"private void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , boolean VAR_3 ) { TYPE_2 VAR_4 = VAR_1 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ) . METHOD_4 ( true ) ; VAR_5 . METHOD_5 ( VAR_4 , VAR_2 , VAR_3 , null ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , boolean VAR_3 ) { VAR_5 . METHOD_5 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal']",332
"public final void METHOD_1 ( int i , double VAR_1 ) { long VAR_2 = java.lang.Double . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_1 ( i , VAR_2 ) ; }","public final void METHOD_1 ( int i , double VAR_1 ) { set ( i , VAR_1 ) ; }","['Update Invocation', 'Update TypeAccess', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",333
"public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String VAR_2 = VAR_3 . getText ( ) . toString ( ) ; new TYPE_1 ( ) . execute ( VAR_2 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { new TYPE_1 ( ) . execute ( VAR_4 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess']",334
"public TYPE_1 METHOD_1 ( java.lang.String id ) { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 , VAR_3 , id ) ; }",public TYPE_1 METHOD_1 ( java.lang.String id ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",335
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_1 ) . METHOD_4 ( ) ; }","public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_1 ) . commit ( ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",337
protected void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = METHOD_3 ( VAR_4 ) ; if ( VAR_3 != null ) { VAR_5 . METHOD_2 ( VAR_3 ) ; VAR_5 . METHOD_4 ( STRING_1 ) ; } },protected void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",340
private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 ; if ( ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) return false ; VAR_1 . METHOD_1 ( ) ; return true ; },private boolean METHOD_1 ( ) { if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) return false ; VAR_2 . METHOD_1 ( ) ; return true ; },"['Insert TypeAccess', 'Move FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",341
protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 < TYPE_2 > VAR_2 = VAR_3 . execute ( ) ; METHOD_3 ( VAR_4 . size ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; },protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_4 ( VAR_3 . execute ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",342
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 view = ( ( TYPE_2 ) ( METHOD_3 ( VAR_3 ) ) ) ; view . METHOD_4 ( 0 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",345
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 , TYPE_3 , TYPE_4 { TYPE_5 VAR_2 = new TYPE_5 ( VAR_1 ) ; VAR_3 . info ( VAR_4 . toString ( ) ) ; return new TYPE_1 ( VAR_5 . METHOD_1 ( VAR_2 ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_5 VAR_2 ) throws TYPE_2 , TYPE_3 , TYPE_4 { VAR_3 . info ( VAR_4 . toString ( ) ) ; return new TYPE_1 ( VAR_5 . METHOD_1 ( VAR_2 ) ) ; }","['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",349
"public TYPE_1 METHOD_1 ( java.lang.Integer id ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( id ) ; TYPE_1 view = METHOD_3 ( STRING_1 , VAR_1 ) ; METHOD_4 ( view , METHOD_5 ( VAR_1 ) ) ; return view ; }","public TYPE_1 METHOD_1 ( java.lang.Integer id ) { return METHOD_3 ( STRING_1 , VAR_2 . METHOD_2 ( id ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead']",350
private java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . split ( STRING_1 ) ; },private java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String [ ] result = VAR_2 . split ( STRING_1 ) ; return result ; },"['Insert LocalVariable', 'Move Invocation', 'Insert VariableRead']",354
public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = getIntent ( ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( intent ) ; },public void METHOD_1 ( android.view.View view ) { METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",356
public void METHOD_1 ( ) { if ( VAR_1 != null ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( ) ; } VAR_1 . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { if ( VAR_1 != null ) { VAR_1 . METHOD_4 ( ) ; } },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",357
private boolean METHOD_1 ( ) { int size = ( ( java.lang.Double ) ( METHOD_2 ( ) . get ( STRING_1 ) ) ) . intValue ( ) ; return size >= ( VAR_1 ) ; },private boolean METHOD_1 ( ) { int size = ( ( java.lang.Integer ) ( METHOD_2 ( ) . get ( STRING_1 ) ) ) ; return size >= ( VAR_1 ) ; },"['Move Invocation', 'Update TypeReference', 'Delete Invocation']",358
public TYPE_1 setValue ( TYPE_1 value ) { TYPE_1 VAR_1 = this . value ; this . value = value ; return VAR_1 ; },public TYPE_1 setValue ( TYPE_1 value ) { TYPE_1 VAR_1 = value ; this . value = value ; return VAR_1 ; },"['Insert VariableRead', 'Delete ThisAccess', 'Delete FieldRead']",359
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Integer VAR_2 = ( ( java.lang.Integer ) ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) ; return STRING_2 ; },public java.lang.String METHOD_1 ( ) { return STRING_2 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",360
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ; return ( VAR_2 . METHOD_3 ( ) ) || ( VAR_2 . METHOD_4 ( ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) . METHOD_3 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",361
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; TYPE_4 . METHOD_3 ( this , view ) ; return VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation']",362
public void execute ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_1 ( VAR_4 ) ; },public void execute ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_1 ( VAR_4 ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",363
private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; },private void METHOD_1 ( ) { METHOD_4 ( ) ; METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",364
private int METHOD_1 ( ) { int VAR_1 = - 1 ; if ( ( VAR_2 ) != null ) { VAR_1 += 1 ; } return VAR_1 ; },private int METHOD_1 ( ) { int VAR_1 = 0 ; if ( ( VAR_2 ) != null ) { VAR_1 += 1 ; } return VAR_1 ; },"['Insert Literal', 'Delete Literal', 'Delete UnaryOperator']",365
public int METHOD_1 ( ) { if ( METHOD_2 ( ) ) { TYPE_1 VAR_1 = METHOD_3 ( VAR_2 ) ; if ( VAR_1 == null ) { return VAR_3 ; } return VAR_1 . METHOD_1 ( ) ; } else { return VAR_3 ; } },public int METHOD_1 ( ) { return VAR_3 ; },"['Move Return', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",366
public static java.lang.String name ( TYPE_1 path ) { TYPE_1 n = path . METHOD_1 ( ) ; if ( n == null ) return STRING_1 ; return VAR_1 . toString ( ) ; },public static java.lang.String name ( TYPE_1 path ) { return path . METHOD_1 ( ) . toString ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",367
"private void init ( ) { if ( METHOD_1 ( ) ) { METHOD_2 ( this . getContext ( ) , VAR_1 , this ) ; } }","private void init ( ) { if ( METHOD_1 ( ) ) { android.view.View view = METHOD_2 ( this . getContext ( ) , VAR_1 , this ) ; } }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation']",368
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = STRING_1 + VAR_1 ; TYPE_2 VAR_3 = this . METHOD_2 ( ) ; TYPE_1 query = VAR_3 . METHOD_3 ( VAR_2 , null ) ; return query ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = STRING_1 + VAR_1 ; TYPE_2 VAR_3 = this . METHOD_2 ( ) ; return VAR_3 . METHOD_3 ( VAR_2 , null ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",369
"public void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 , VAR_4 ) . show ( ) ; }","public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 ) . show ( ) ; }","['Update VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",370
"public static int METHOD_1 ( ) { int temp = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( ) ) ; java.lang.System.out.println ( temp ) ; return temp ; }","public static int METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",371
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_4 ( VAR_2 ) ) ) ; VAR_3 . setText ( STRING_1 ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",372
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_2 class ) ; METHOD_2 ( intent ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",374
public void select ( java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = VAR_3 . split ( STRING_1 ) ; },public void select ( ) { },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",375
private java.util.Properties METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Properties VAR_2 = new java.util.Properties ( ) ; VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_2 . METHOD_2 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; return VAR_2 ; },private java.util.Properties METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Properties VAR_2 = METHOD_3 ( ) ; VAR_2 . METHOD_2 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; return VAR_2 ; },"['Move Invocation', 'Delete ConstructorCall', 'Delete VariableRead', 'Delete Invocation']",378
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . start ( ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",379
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( INT_1 ) ; return new TYPE_4 ( VAR_2 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_4 ( new TYPE_3 ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ) ; }","['Update ConstructorCall', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",380
public static void main ( java.lang.String [ ] args ) { try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_2 ( ) ; } },public void main ( java.lang.String [ ] args ) { try { METHOD_1 ( ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_2 ( ) ; } },"['Delete Wra', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",383
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( getContext ( ) , VAR_3 , VAR_4 ) ; VAR_5 . show ( ) ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",384
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 VAR_4 = TYPE_2 . METHOD_1 ( VAR_1 , VAR_3 ) ; return new TYPE_4 ( ) . METHOD_3 ( VAR_4 ) ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_4 = TYPE_2 . METHOD_1 ( VAR_1 , VAR_3 ) ; return new TYPE_4 ( ) . METHOD_3 ( VAR_4 ) ; }","['Insert Assignment', 'Insert FieldWrite', 'Move Invocation', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",387
"public TYPE_1 METHOD_1 ( int n , int VAR_1 ) { int y = ( ( int ) ( ( VAR_2 ) / ( VAR_3 ) ) ) - 1 ; return VAR_4 . get ( ( n + ( VAR_1 * y ) ) ) ; }","public TYPE_1 METHOD_1 ( int n , int VAR_1 ) { int y = ( ( int ) ( ( VAR_2 ) / ( VAR_3 ) ) ) ; return VAR_4 . get ( ( n + ( VAR_1 * y ) ) ) ; }","['Move BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",388
public TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",389
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_2 = STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_2 ) ; },protected void METHOD_1 ( ) { VAR_2 = STRING_1 + ( METHOD_2 ( ) . METHOD_3 ( ) ) ; METHOD_4 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",390
"public TYPE_1 METHOD_1 ( TYPE_2 response , java.lang.String VAR_1 ) { android.content.Intent intent = new android.content.Intent ( VAR_2 , VAR_3 class ) ; TYPE_1 result = new TYPE_1 ( ) ; result . METHOD_2 ( VAR_4 , intent ) ; return result ; }","public TYPE_1 METHOD_1 ( TYPE_2 response , java.lang.String VAR_1 ) { return null ; }","['Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",391
private static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_1 ( new java.util.Date ( ) . getTime ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; },private static void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( new java.util.Date ( ) . getTime ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Delete Parameter']",392
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = getActivity ( ) ; if ( ( VAR_3 ) && ( VAR_2 != null ) ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) ; } VAR_5 . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_3 ) { getActivity ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) ; } VAR_5 . METHOD_4 ( ) ; },"['Move FieldRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete VariableRead']",393
"public void METHOD_1 ( java.lang.String buffer ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 , VAR_3 class ) ; TYPE_2 VAR_4 = VAR_1 . METHOD_3 ( ) ; java.lang.String VAR_5 = VAR_4 . METHOD_1 ( buffer ) ; VAR_6 . info ( VAR_5 ) ; }","public void METHOD_1 ( java.lang.String buffer ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 , VAR_3 class ) ; TYPE_2 VAR_4 = VAR_1 . METHOD_3 ( ) ; VAR_4 . METHOD_1 ( buffer ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",395
public static int METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; if ( VAR_2 < 0 ) { return 0 ; } else { return TYPE_1 . METHOD_3 ( VAR_3 . substring ( VAR_2 ) ) ; } },"public static int METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_1 ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_1 ) ) ; }","['Insert Return', 'Insert Invocation', 'Move TypeAccess', 'Move VariableRead', 'Insert Invocation', 'Insert TypeAccess', 'Insert VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",397
"public TYPE_1 update ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 ) { TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_1 ( VAR_2 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; return VAR_5 . update ( VAR_4 , VAR_3 ) ; }","public TYPE_1 update ( java.lang.String id , TYPE_1 VAR_3 ) { return VAR_5 . update ( id , VAR_3 ) ; }","['Update Parameter', 'Update VariableRead', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",403
"protected void getView ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { view = VAR_3 . METHOD_1 ( VAR_4 , VAR_2 , false ) ; TYPE_3 . METHOD_2 ( this , view ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( view ) ; }","protected void getView ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { android.view.View view = VAR_3 . METHOD_1 ( VAR_4 , VAR_2 , false ) ; TYPE_3 . METHOD_2 ( this , view ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( view ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead', 'Delete FieldRead']",405
"public void METHOD_1 ( java.lang.Object VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . METHOD_2 ( ) ; TYPE_2 VAR_4 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( this ) ; }","public void METHOD_1 ( java.lang.Object VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . METHOD_2 ( ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation']",406
public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; java.lang.String VAR_3 = VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; return VAR_4 . METHOD_5 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) { return VAR_4 . METHOD_5 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",409
private java.lang.String METHOD_1 ( java.lang.Integer VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . delete ( VAR_2 ) ; return STRING_1 ; },private java.lang.String METHOD_1 ( java.lang.Integer VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; java.lang.Boolean result = VAR_4 . delete ( VAR_2 ) ; return STRING_1 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation']",410
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; TYPE_3 VAR_4 = TYPE_3 . METHOD_3 ( getActivity ( ) , STRING_1 , VAR_5 ) ; VAR_6 . show ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",412
private java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( getActivity ( ) ) ; return VAR_1 . METHOD_3 ( ) ; },private java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; return VAR_1 . METHOD_3 ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",413
"java.lang.Double METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( VAR_2 ) ; if ( VAR_3 == null ) { return null ; } double VAR_4 = VAR_3 . METHOD_3 ( ) ; return VAR_4 ; }","double METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { double VAR_4 = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; return VAR_4 ; }","['Update TypeReference', 'Update LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",416
public static final void METHOD_1 ( ) throws TYPE_1 { java.lang.Thread VAR_1 = java.lang.Thread . METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; TYPE_2 VAR_3 = TYPE_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( VAR_3 ) ; },public static final void METHOD_1 ( ) throws TYPE_1 { java.lang.Thread VAR_1 = java.lang.Thread . METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_5 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",417
public static TYPE_1 METHOD_1 ( int type ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( type ) ; VAR_1 . METHOD_3 ( new TYPE_2 ( ) ) ; return VAR_1 ; },public static TYPE_1 METHOD_1 ( int type ) { TYPE_1 VAR_1 = new TYPE_1 ( type ) ; VAR_1 . METHOD_3 ( new TYPE_2 ( ) ) ; return VAR_1 ; },"['Update ConstructorCall', 'Move VariableRead', 'Delete VariableRead', 'Delete Invocation']",419
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; },"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_1 ( VAR_1 , VAR_1 ) ; }","['Update Invocation', 'Move VariableRead', 'Update VariableRead', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable']",421
private static void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_3 . substring ( VAR_4 . get ( STRING_1 ) . length ( ) ) . trim ( ) ; VAR_5 . METHOD_1 ( VAR_2 ) ; },private static void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",422
private java.lang.String METHOD_1 ( ) { java.lang.String path = ( VAR_1 ) + ( VAR_2 ) ; java.io.File filePath = new java.io.File ( VAR_1 ) ; if ( ! ( filePath . METHOD_2 ( ) ) ) { filePath . METHOD_3 ( ) ; } return path ; },private java.lang.String METHOD_1 ( ) { java.lang.String path = VAR_1 ; java.io.File filePath = new java.io.File ( VAR_1 ) ; if ( ! ( filePath . METHOD_2 ( ) ) ) { filePath . METHOD_3 ( ) ; } return path ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",423
"public TYPE_1 METHOD_1 ( TYPE_2 key , TYPE_1 value ) { TYPE_3 VAR_1 = METHOD_2 ( key ) ; VAR_1 . METHOD_3 ( ) ; try { return METHOD_4 ( key , value , VAR_1 ) ; } finally { METHOD_5 ( key ) ; } }","public TYPE_1 METHOD_1 ( TYPE_2 key , TYPE_1 value ) { METHOD_3 ( key ) ; try { return METHOD_4 ( key , value ) ; } finally { METHOD_5 ( key ) ; } }","['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",425
"public static boolean METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( ) ; java.lang.String VAR_2 = VAR_3 . get ( VAR_4 ) ; return ( VAR_2 != null ) && ( VAR_5 . equals ( ""true"" ) ) ; }","public static boolean METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( ) ; return VAR_3 . get ( VAR_4 ) . equals ( ""true"" ) ; }","['Insert Invocation', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",426
"private int METHOD_1 ( int [ ] VAR_1 , int size ) { for ( int i = size - 1 ; i > 0 ; i -- ) if ( ( VAR_1 [ i ] ) == INT_1 ) return i ; return - 1 ; }","private int METHOD_1 ( int [ ] VAR_1 , int size ) { for ( int i = size ; i > 0 ; i -- ) if ( ( VAR_1 [ i ] ) == INT_1 ) return i ; return - 1 ; }","['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",429
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 . METHOD_2 ( VAR_4 ) ) ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_6 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",431
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; }","public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_1 ) . METHOD_4 ( ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",432
public static void main ( java.lang.String [ ] args ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . start ( ) ; },public static void main ( java.lang.String [ ] args ) throws java.io.IOException { new TYPE_1 ( ) . start ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",433
public void METHOD_1 ( java.lang.Long time ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( time ) ; new TYPE_3 ( ) . execute ( VAR_1 ) ; },public void METHOD_1 ( java.lang.Long time ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete ConstructorCall', 'Delete VariableRead', 'Delete Invocation']",435
"public boolean METHOD_1 ( ) { for ( int VAR_1 = 1 ; VAR_1 <= ( VAR_2 ) ; VAR_1 ++ ) { if ( METHOD_2 ( VAR_2 , VAR_1 ) ) { return true ; } } return false ; }","public boolean METHOD_1 ( ) { for ( int VAR_1 = 0 ; VAR_1 < ( VAR_2 ) ; VAR_1 ++ ) { if ( METHOD_2 ( ( ( VAR_2 ) - 1 ) , VAR_1 ) ) { return true ; } } return false ; }","['Update BinaryOperator', 'Insert Literal', 'Insert BinaryOperator', 'Insert FieldRead', 'Move Literal', 'Delete TypeAccess']",436
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = TYPE_5 . METHOD_2 ( VAR_1 ) ; TYPE_6 VAR_4 = TYPE_5 . METHOD_3 ( VAR_1 ) ; return new TYPE_7 ( VAR_3 , VAR_4 , VAR_2 ) ; }","private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_2 ( ) ; TYPE_6 VAR_4 = METHOD_3 ( ) ; return new TYPE_7 ( VAR_3 , VAR_4 , VAR_2 ) ; }","['Insert LocalVariable', 'Insert LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move TypeReference', 'Insert Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",437
private void METHOD_1 ( ) { double VAR_1 = ( VAR_2 ) + ( VAR_3 ) ; VAR_2 += ( VAR_4 ) * ( ( VAR_2 ) / VAR_1 ) ; VAR_3 += ( VAR_4 ) * ( ( VAR_3 ) / VAR_1 ) ; VAR_4 = 0 ; },private void METHOD_1 ( ) { double VAR_1 = 1 ; VAR_2 += ( VAR_4 ) * ( ( VAR_2 ) / VAR_1 ) ; VAR_3 += ( VAR_4 ) * ( ( VAR_3 ) / VAR_1 ) ; VAR_4 = 0 ; },"['Insert Literal', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",439
private void METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 VAR_2 = METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; if ( VAR_2 == null ) { METHOD_5 ( VAR_1 ) ; } },private void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; if ( VAR_2 == null ) { METHOD_5 ( VAR_1 ) ; } },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",441
"public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( 1 , VAR_1 ) ; int a = 0 ; }","public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( 1 , VAR_1 ) ; }","['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",444
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . getContext ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( VAR_2 . getContext ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",445
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 ) ) ; VAR_1 . METHOD_2 ( ) ; VAR_3 = new TYPE_2 ( ) ; VAR_4 . show ( METHOD_3 ( ) , STRING_1 ) ; }","public void METHOD_1 ( ) { VAR_3 = new TYPE_2 ( ) ; VAR_4 . show ( METHOD_3 ( ) , STRING_1 ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",448
public TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( id ) ; if ( VAR_1 == null ) { java.lang.System.out.println ( STRING_1 ) ; } else { java.lang.System.out.println ( STRING_2 ) ; } return VAR_1 ; },public TYPE_1 METHOD_1 ( java.lang.String id ) { return VAR_2 . METHOD_1 ( id ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",449
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = java.util.Calendar.getInstance ( ) . METHOD_3 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; android.content.Intent intent = getIntent ( ) ; long VAR_3 = java.util.Calendar.getInstance ( ) . METHOD_3 ( ) ; },"['Insert LocalVariable', 'Insert LocalVariable', 'Insert TypeReference', 'Insert Invocation', 'Insert TypeReference', 'Move Invocation', 'Delete FieldWrite', 'Delete Assignment']",451
private static void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( ) ; } },private static void METHOD_1 ( ) throws java.lang.Exception { TYPE_2 . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",453
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; METHOD_2 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",454
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; VAR_2 . METHOD_4 ( this ) ; } },private void METHOD_1 ( ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; VAR_2 . METHOD_4 ( this ) ; },"['Insert LocalVariable', 'Move Invocation', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldWrite', 'Delete Assignment', 'Delete Block', 'Delete If']",455
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , boolean VAR_3 ) { int VAR_4 = VAR_5 . METHOD_1 ( VAR_2 , VAR_3 ) ; VAR_5 . METHOD_2 ( ) ; return VAR_4 ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , boolean VAR_3 ) { return VAR_5 . METHOD_1 ( VAR_2 , VAR_3 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",456
public static java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 t = VAR_2 . get ( VAR_1 ) ; if ( t != null ) { return t . METHOD_1 ( ) ; } return null ; },public static java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) . METHOD_1 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",457
"protected boolean METHOD_1 ( TYPE_1 state , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . getValue ( VAR_4 ) ; if ( VAR_2 == ( VAR_5 ) ) return TYPE_3 . METHOD_2 ( VAR_1 ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }",protected boolean METHOD_1 ( TYPE_1 state ) { return TYPE_3 . METHOD_3 ( state ) ; },"['Update VariableRead', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",458
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; return VAR_3 ; },public java.lang.String METHOD_1 ( ) { return VAR_3 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",459
"public void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { TYPE_1 VAR_3 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_2 ( ) . METHOD_1 ( VAR_3 , VAR_1 , VAR_2 , data ) ; }","public void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { METHOD_2 ( ) . METHOD_1 ( VAR_1 , VAR_2 , data ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",461
"public boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 < TYPE_1 < TYPE_2 > > VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; return VAR_3 . METHOD_5 ( VAR_2 ) ; }",public boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { return VAR_3 . METHOD_5 ( VAR_1 . METHOD_3 ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",462
public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_1 ) ) ; return VAR_2 . list ( ) ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; return VAR_2 . list ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",463
public TYPE_1 METHOD_1 ( ) { long VAR_1 = VAR_2 . METHOD_2 ( ) ; position ( VAR_1 ) ; return this ; },public TYPE_1 METHOD_1 ( ) { position ( VAR_2 . METHOD_2 ( ) ) ; return this ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",464
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . remove ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_4 . delete ( ) ; METHOD_2 ( STRING_1 ) ; } return VAR_2 ; },public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . remove ( name ) ; if ( VAR_2 != null ) { VAR_4 . delete ( ) ; METHOD_2 ( STRING_1 ) ; } },"['Update TypeReference', 'Insert FieldRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",465
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Throwable { java.lang.String VAR_2 = METHOD_2 ( VAR_3 . source ) ; VAR_4 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_5 . toString ( ) ) ) + STRING_2 ) + VAR_2 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Throwable { },"['Delete TypeReference', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",466
public TYPE_1 METHOD_1 ( int i ) { TYPE_1 VAR_1 = new TYPE_1 ( get ( i ) . METHOD_2 ( ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( int i ) { return ( ( TYPE_1 ) ( get ( i ) . METHOD_2 ( ) ) ) ; },"['Move Invocation', 'Insert TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",468
public void delete ( java.lang.String id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( id ) ; VAR_3 . delete ( VAR_1 ) ; },public void delete ( java.lang.Long id ) { VAR_3 . delete ( id ) ; },"['Update Invocation', 'Move Invocation', 'Update TypeReference', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",469
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; return VAR_2 . METHOD_2 ( ) . equals ( this . VAR_3 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return false ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation']",471
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_1 ) ; TYPE_3 target = position . METHOD_2 ( VAR_3 ) ; if ( target != null ) { target . METHOD_3 ( VAR_2 , position ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_1 ) ; position . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_2 , position ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",473
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; return VAR_2 ; },private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",474
"public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { VAR_3 . METHOD_2 ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > list = VAR_4 . METHOD_3 ( VAR_1 , VAR_5 ) ; return list ; }","public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { VAR_3 . METHOD_2 ( STRING_1 , VAR_1 ) ; int VAR_5 = 1 ; java.util.List < TYPE_1 > list = VAR_4 . METHOD_3 ( VAR_1 , VAR_5 ) ; return list ; }","['Insert LocalVariable', 'Insert TypeReference', 'Insert Literal', 'Insert VariableRead', 'Delete TypeAccess']",475
"public TYPE_1 METHOD_1 ( TYPE_2 state ) { TYPE_3 VAR_1 = new TYPE_3 ( state , null ) ; METHOD_2 ( VAR_1 , INT_1 ) ; TYPE_1 VAR_2 = METHOD_3 ( VAR_1 ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( TYPE_2 state ) { return new TYPE_1 ( false , 0 ) ; }","['Insert ConstructorCall', 'Insert Literal', 'Insert Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",477
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( METHOD_2 ( ) , VAR_3 class ) ; METHOD_3 ( VAR_2 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",478
"public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( 1 , STRING_1 , ( STRING_2 + STRING_3 ) ) ; return new TYPE_3 ( VAR_2 . METHOD_2 ( ) , VAR_1 ) ; }",public TYPE_1 METHOD_1 ( ) { return new TYPE_3 ( VAR_2 . METHOD_2 ( ) ) ; },"['Delete TypeReference', 'Delete Literal', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",480
public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; int VAR_2 = VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; if ( VAR_2 == 0 ) { VAR_6 . METHOD_5 ( 0 ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",487
public java.util.Set < TYPE_1 > METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( this . VAR_2 ) ; return VAR_1 ; },public java.util.Set < TYPE_1 > METHOD_1 ( ) { return VAR_2 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead']",488
"public TYPE_1 METHOD_1 ( java.lang.String name , int VAR_1 ) { java.lang.String VAR_2 = ( ( VAR_3 . METHOD_2 ( ) ) + STRING_1 ) + name ; TYPE_2 . METHOD_3 ( VAR_2 ) ; return super . METHOD_1 ( VAR_2 , VAR_1 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String name , int VAR_1 ) { return super . METHOD_1 ( ( ( ( VAR_3 . METHOD_2 ( ) ) + STRING_1 ) + name ) , VAR_1 ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",489
public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 . equals ( STRING_1 ) ) { VAR_3 . delete ( VAR_4 . METHOD_2 ( ) ) ; } else { long id = VAR_5 . getId ( ) ; VAR_3 . delete ( id ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_3 . delete ( VAR_4 . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",491
public java.lang.String [ ] METHOD_1 ( java.io.BufferedReader VAR_1 ) { java.lang.String str = METHOD_2 ( VAR_1 ) ; java.lang.String [ ] VAR_2 = VAR_3 . split ( STRING_1 ) ; return VAR_2 ; },public java.lang.String [ ] METHOD_1 ( java.io.BufferedReader VAR_1 ) { METHOD_2 ( ) ; java.lang.String [ ] VAR_2 = VAR_3 . split ( STRING_1 ) ; return VAR_2 ; },"['Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable']",493
private TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_2 line = new TYPE_2 ( ) ; if ( ( VAR_2 ) > INT_1 ) { return true ; } else { return false ; } },private TYPE_1 METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) > INT_1 ) { return true ; } else { return false ; } },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",494
"public java.lang.String METHOD_1 ( java.lang.Long VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_3 ) ; return STRING_2 ; }","public java.lang.String METHOD_1 ( java.lang.Long VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = null ; VAR_2 . METHOD_3 ( STRING_1 , VAR_3 ) ; return STRING_2 ; }","['Insert Literal', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",495
"public static java.lang.String METHOD_1 ( java.lang.CharSequence VAR_1 , int VAR_2 , java.lang.String VAR_3 ) { java.lang.String VAR_4 = java.lang.String.format ( TYPE_1 . METHOD_2 ( ) , VAR_5 , STRING_1 , VAR_6 , VAR_2 , VAR_3 ) ; return ( VAR_4 + VAR_1 ) + ( VAR_7 ) ; }","public static java.lang.String METHOD_1 ( java.lang.CharSequence VAR_1 , int VAR_2 , java.lang.String VAR_3 ) { java.lang.String VAR_4 = java.lang.String.format ( VAR_5 , STRING_1 , VAR_2 , VAR_3 ) ; java.lang.String result = ( VAR_4 + VAR_1 ) + ( VAR_7 ) ; return result ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move BinaryOperator', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess']",496
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_2 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",497
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; try ( TYPE_3 VAR_3 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) { VAR_4 . assertTrue ( VAR_3 . METHOD_5 ( 0 ) ) ; } },public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; try ( TYPE_3 VAR_3 = VAR_1 . METHOD_4 ( ) ) { VAR_4 . assertTrue ( VAR_3 . METHOD_5 ( 0 ) ) ; } },"['Update Invocation', 'Move Invocation', 'Delete Invocation']",498
private void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = VAR_3 . position ; VAR_4 . METHOD_2 ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_5 . toString ( ) ) ) ) ; throw new TYPE_1 ( ) ; },private void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { VAR_4 . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; throw new TYPE_1 ( ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",499
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( listener ) ; VAR_2 . METHOD_1 ( ) ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) TYPE_1 . METHOD_2 ( VAR_3 ) . METHOD_1 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",501
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( VAR_2 class ) ; VAR_3 . info ( STRING_1 ) ; },public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( STRING_1 ) ; },"['Update Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess']",502
"private TYPE_1 METHOD_1 ( android.view.View view ) { int x = 1 ; TYPE_1 VAR_1 = new TYPE_1 ( getContext ( ) , view ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_1 . METHOD_4 ( ) ) ; return VAR_1 ; }","private TYPE_1 METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = new TYPE_1 ( getContext ( ) , view ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_1 . METHOD_4 ( ) ) ; return VAR_1 ; }","['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",503
public void METHOD_1 ( android.view.View view ) { try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . execute ( ) . get ( ) ; VAR_3 . setText ( VAR_4 ) ; } catch ( java.lang.Exception VAR_5 ) { } },public void METHOD_1 ( android.view.View view ) { try { new TYPE_1 ( ) . execute ( ) . get ( ) ; } catch ( java.lang.Exception VAR_5 ) { } },"['Insert Invocation', 'Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",505
"public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return true ; } java.lang.Integer VAR_2 = 0 ; return TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; }","public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return true ; } return TYPE_2 . METHOD_2 ( VAR_1 , 0 ) ; }","['Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",506
public TYPE_1 get ( int VAR_1 ) { TYPE_1 VAR_2 = this . VAR_3 . get ( VAR_1 ) ; return VAR_2 ; },public TYPE_1 get ( int VAR_1 ) { return this . VAR_3 . get ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",508
public void METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) . format ( VAR_3 ) ; VAR_4 . setText ( VAR_1 ) ; },public void METHOD_1 ( ) { VAR_4 . setText ( TYPE_1 . METHOD_2 ( VAR_2 ) . format ( VAR_3 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",509
private static boolean METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) . toUpperCase ( ) ; TYPE_2 . METHOD_3 ( ( STRING_2 + VAR_1 ) ) ; if ( VAR_2 . contains ( STRING_3 ) ) { return true ; } return false ; },private static boolean METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( STRING_1 ) . toUpperCase ( ) . contains ( STRING_3 ) ) { return true ; } return false ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete TypeAccess']",510
public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; if ( id == ( VAR_1 ) ) { METHOD_3 ( ) ; } return super . METHOD_1 ( item ) ; },public boolean METHOD_1 ( TYPE_1 item ) { return super . METHOD_1 ( item ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",512
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; return TYPE_2 . METHOD_3 ( VAR_3 , VAR_2 ) ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_2 . METHOD_3 ( VAR_3 , VAR_1 ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",514
"public TYPE_1 METHOD_1 ( TYPE_2 expr , TYPE_3 VAR_1 ) { TYPE_1 result = VAR_2 . METHOD_2 ( expr , VAR_1 ) ; if ( VAR_1 == null ) { METHOD_3 ( result , expr ) ; } return METHOD_4 ( VAR_1 , result , expr ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 expr , TYPE_3 VAR_1 ) { return METHOD_4 ( VAR_1 , VAR_2 . METHOD_2 ( expr , VAR_1 ) , expr ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",515
"public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { super . METHOD_1 ( VAR_1 , VAR_2 class , true ) ; TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_4 ) , true , STRING_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { super . METHOD_1 ( VAR_1 , VAR_2 class , true ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation']",517
"protected TYPE_1 METHOD_1 ( java.net.URL VAR_1 ) throws java.io.IOException , TYPE_2 , TYPE_3 { TYPE_1 answer = METHOD_1 ( VAR_1 , getType ( ) ) ; METHOD_2 ( answer ) ; return answer ; }","protected TYPE_1 METHOD_1 ( java.net.URL VAR_1 ) throws java.io.IOException , TYPE_2 , TYPE_3 { return METHOD_1 ( VAR_1 , getType ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",519
public void METHOD_1 ( ) { if ( VAR_1 . equals ( VAR_2 ) ) { android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_2 ( VAR_3 ) ; this . METHOD_3 ( intent ) ; } METHOD_1 ( false ) ; },public void METHOD_1 ( ) { METHOD_1 ( false ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",520
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( METHOD_2 ( ) ) ; VAR_4 . open ( ) ; VAR_3 . METHOD_3 ( VAR_5 ) ; VAR_3 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . METHOD_5 ( ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",521
public int METHOD_1 ( int position ) { int result = position % ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; return result % ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 ) ; },public int METHOD_1 ( int position ) { return position % ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",522
"public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 , TYPE_2 , TYPE_3 { TYPE_4 VAR_2 = new TYPE_4 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_3 { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",523
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . getContext ( ) . METHOD_2 ( ) ; if ( VAR_2 instanceof TYPE_3 ) { return STRING_1 ; } VAR_1 . METHOD_3 ( VAR_4 , VAR_2 . METHOD_4 ( ) ) ; return STRING_1 ; }",public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return STRING_1 ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",524
"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int i , long VAR_2 ) { TYPE_2 VAR_3 = TYPE_2 . METHOD_2 ( this , VAR_4 ) ; VAR_5 . start ( ) ; }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int i , long VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( this , VAR_4 ) ; VAR_5 . start ( ) ; }","['Move Invocation', 'Insert ConstructorCall', 'Insert VariableRead', 'Delete TypeAccess']",525
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 c = VAR_2 . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( STRING_1 , c . METHOD_3 ( ) ) ; return VAR_4 . METHOD_4 ( VAR_3 ) ; }",public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 c = VAR_2 . METHOD_1 ( VAR_1 ) ; return VAR_4 . METHOD_4 ( c ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",526
public void METHOD_1 ( TYPE_1 error ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 < TYPE_3 > METHOD_2 ( ) ) ; VAR_3 . error = error ; VAR_4 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ; },public void METHOD_1 ( TYPE_1 error ) { TYPE_2 VAR_1 = new TYPE_2 ( new java.util.ArrayList < TYPE_3 > ( ) ) ; VAR_3 . error = error ; VAR_4 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ; },"['Update ConstructorCall', 'Insert ConstructorCall', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete BinaryOperator']",528
public void METHOD_1 ( java.lang.String name ) { this . name = name ; METHOD_2 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( name ) ; METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.String name ) { this . name = name ; METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",529
"public void METHOD_1 ( android.view.View view , int position ) { long id = VAR_1 . METHOD_2 ( ) . get ( position ) . getId ( ) ; VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( id ) ) ; METHOD_5 ( ) ; }","public void METHOD_1 ( android.view.View view , int position ) { VAR_2 . METHOD_3 ( position ) ; METHOD_5 ( ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",531
private void METHOD_1 ( ) { boolean VAR_1 = VAR_2 ; VAR_2 = VAR_3 . isEmpty ( ) ; VAR_4 = ( VAR_2 ) ? 1 : 0 ; if ( VAR_1 != ( VAR_2 ) ) METHOD_2 ( ) ; },private void METHOD_1 ( ) { boolean VAR_1 = VAR_2 ; boolean isEmpty = VAR_3 . isEmpty ( ) ; VAR_2 = ! isEmpty ; VAR_4 = ( isEmpty ) ? 0 : 1 ; if ( VAR_1 != ( VAR_2 ) ) METHOD_2 ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert UnaryOperator', 'Move Literal', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldRead']",532
"public static long METHOD_1 ( android.content.Context context ) { long id = TYPE_1 . METHOD_2 ( context ) . METHOD_3 ( VAR_1 , ( - 1 ) ) ; return id ; }","public static long METHOD_1 ( android.content.Context context ) { return TYPE_1 . METHOD_2 ( context ) . METHOD_3 ( VAR_1 , ( - 1 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",533
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( VAR_1 , VAR_2 class ) ; VAR_1 . METHOD_2 ( intent ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",535
public boolean equals ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( VAR_2 . METHOD_1 ( ) ) == ( this . VAR_3 ) ; } return false ; },public boolean equals ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_1 ( ) ) == ( this . VAR_3 ) ; },"['Move Return', 'Move TypeReference', 'Move VariableRead', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",537
"private void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; VAR_2 . METHOD_2 ( STRING_1 , VAR_4 . getId ( ) ) ; METHOD_3 ( VAR_2 ) ; }",private void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",538
"public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 = VAR_1 ; if ( VAR_1 > 0 ) { VAR_3 = VAR_1 - 1 ; } TYPE_2 VAR_4 = new TYPE_2 ( VAR_2 ) ; METHOD_2 ( VAR_4 , VAR_3 ) ; }","public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 = VAR_1 ; if ( VAR_1 > 0 ) { VAR_3 = VAR_1 - 1 ; } new TYPE_2 ( VAR_2 ) . execute ( VAR_3 ) ; }","['Update Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",539
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { boolean status = VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; if ( status ) { return STRING_1 ; } else { return STRING_2 ; } }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",540
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( this ) ; VAR_3 . execute ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",541
"public void METHOD_1 ( java.lang.String msg , boolean VAR_1 ) { java.lang.String VAR_2 = ( ( STRING_1 + ( name ) ) + STRING_2 ) + msg ; VAR_3 . METHOD_1 ( VAR_2 ) ; if ( VAR_1 ) TYPE_1 . METHOD_2 ( VAR_2 ) ; }","public void METHOD_1 ( java.lang.String msg , boolean VAR_1 ) { VAR_3 . METHOD_1 ( msg ) ; if ( VAR_1 ) TYPE_1 . METHOD_2 ( msg ) ; }","['Move VariableRead', 'Update VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",542
"public void METHOD_1 ( final TYPE_1 source , final TYPE_1 target ) { TYPE_2 < TYPE_1 , TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . put ( target , source ) ; }","public void METHOD_1 ( final TYPE_1 source , final TYPE_1 target ) { TYPE_2 < TYPE_1 , TYPE_1 > VAR_1 = this . VAR_2 . METHOD_2 ( ) ; VAR_3 . put ( source , target ) ; }","['Move VariableRead', 'Insert FieldRead', 'Insert ThisAccess', 'Delete TypeAccess']",544
public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = new TYPE_1 ( context ) ; VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( VAR_2 . getId ( ) ) ) ; },public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",546
public void METHOD_1 ( ) { TYPE_1 buffer = METHOD_2 ( INT_1 ) ; METHOD_3 ( buffer . METHOD_4 ( 1 ) ) ; VAR_1 . assertTrue ( buffer . METHOD_5 ( ) ) ; },public void METHOD_1 ( ) { METHOD_3 ( METHOD_2 ( INT_1 ) . METHOD_4 ( 1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",547
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; int VAR_2 = VAR_3 ; int VAR_4 = TYPE_2 . METHOD_2 ( null , STRING_2 , STRING_3 , VAR_2 ) ; if ( VAR_4 == ( VAR_5 ) ) { METHOD_3 ( ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",548
"public void METHOD_1 ( ) { java.lang.Integer VAR_1 = java.lang.Integer . METHOD_2 ( INT_1 ) ; java.lang.Integer VAR_2 = VAR_1 ; TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( ) { java.lang.Integer VAR_1 = java.lang.Integer . METHOD_2 ( INT_1 ) ; java.lang.Integer VAR_2 = java.lang.Integer . METHOD_2 ( INT_1 ) ; TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete VariableRead']",550
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = getIntent ( ) . METHOD_2 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",553
"public static void METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 ) ; TYPE_2 . METHOD_4 ( STRING_2 , STRING_3 ) ; TYPE_2 . METHOD_5 ( STRING_4 ) ; }","public static void METHOD_1 ( ) { TYPE_2 . METHOD_5 ( STRING_1 ) ; TYPE_2 . METHOD_5 ( STRING_2 , STRING_3 ) ; TYPE_2 . METHOD_5 ( STRING_4 ) ; }","['Update Invocation', 'Update Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",554
private double METHOD_1 ( java.lang.Integer VAR_1 ) { double VAR_2 = ( 1 - ( ( VAR_3 . METHOD_2 ( ) ) / ( VAR_1 . METHOD_2 ( ) ) ) ) * INT_1 ; double VAR_4 = java.lang.Math.abs ( VAR_2 ) ; return VAR_4 ; },private double METHOD_1 ( java.lang.Integer VAR_1 ) { double VAR_4 = java.lang.Math.abs ( ( 1 - ( ( ( VAR_3 . METHOD_2 ( ) ) / ( VAR_1 . METHOD_2 ( ) ) ) * INT_1 ) ) ) ; return VAR_4 ; },"['Update LocalVariable', 'Insert Invocation', 'Move TypeAccess', 'Update BinaryOperator', 'Move BinaryOperator', 'Move Literal', 'Update BinaryOperator', 'Move FieldRead', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",556
"public static void METHOD_1 ( android.content.Context VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) ) ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; }","public static void METHOD_1 ( android.content.Context VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( VAR_4 ) ) ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; }","['Move VariableRead', 'Delete Invocation']",557
public static synchronized void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 . METHOD_2 ( ) ) { VAR_3 . remove ( VAR_1 ) ; } else { VAR_2 . METHOD_3 ( true ) ; } },public static void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 . remove ( VAR_1 ) ; },"['Move Invocation', 'Delete Wra', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",558
private boolean METHOD_1 ( TYPE_1 field ) { TYPE_2 VAR_1 = field . METHOD_2 ( VAR_2 class ) ; return ( VAR_1 != null ) && ( VAR_1 . METHOD_3 ( ) ) ; },private boolean METHOD_1 ( TYPE_1 field ) { return ( field . METHOD_2 ( VAR_2 class ) ) != null ; },"['Update BinaryOperator', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation']",559
"public void METHOD_1 ( ) { java.lang.String url = STRING_1 + ( ( VAR_1 ) + INT_1 ) ; java.lang.String VAR_2 = METHOD_2 ( url , ( ( STRING_2 + ( token ) ) + STRING_3 ) ) ; java.lang.System.out.println ( VAR_2 ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",560
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ; },public void METHOD_1 ( ) { TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ; },"['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",562
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.io.InputStream VAR_2 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_2 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { VAR_3 . METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",563
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",564
"public TYPE_1 METHOD_1 ( TYPE_1 TYPE_2 , java.lang.String name ) { TYPE_1 VAR_1 = new TYPE_3 ( METHOD_2 ( TYPE_2 , name ) , ( METHOD_3 ( name ) ? VAR_2 : VAR_2 . METHOD_1 ( TYPE_2 , name ) ) ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( TYPE_1 TYPE_2 , java.lang.String name ) { return new TYPE_3 ( METHOD_2 ( TYPE_2 , name ) , ( METHOD_3 ( name ) ? VAR_2 : VAR_2 . METHOD_1 ( TYPE_2 , name ) ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",565
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_3 = METHOD_3 ( ) ; VAR_4 . put ( VAR_1 ) ; VAR_5 . update ( VAR_3 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",567
public static void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; },public static void METHOD_1 ( ) { METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",568
"private void METHOD_1 ( ) { java.net.URL VAR_1 = TYPE_1 . METHOD_2 ( ""true"" , ""false"" ) ; new TYPE_2 ( ) . execute ( VAR_1 ) ; }",private void METHOD_1 ( ) { java.net.URL VAR_1 = TYPE_1 . METHOD_2 ( ) ; new TYPE_2 ( ) . execute ( VAR_1 ) ; },"['Delete Literal', 'Delete Literal']",570
"public byte METHOD_1 ( byte VAR_1 ) { boolean VAR_2 = ( VAR_1 & 1 ) != 0 ; byte result = METHOD_2 ( VAR_1 , ( - 1 ) , TYPE_1 . METHOD_3 ( ) ) ; TYPE_1 . METHOD_4 ( VAR_2 ) ; return result ; }","public byte METHOD_1 ( byte VAR_1 ) { boolean VAR_2 = ( VAR_1 & 1 ) != 0 ; TYPE_1 . METHOD_4 ( VAR_2 ) ; return METHOD_2 ( VAR_1 , ( - 1 ) , VAR_2 ) ; }","['Move Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",571
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( this ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",575
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String msg = VAR_2 . getText ( ) . toString ( ) ; if ( VAR_3 . equals ( STRING_1 ) ) return ; VAR_4 . METHOD_2 ( msg ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . METHOD_2 ( VAR_2 . getText ( ) . toString ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",576
public TYPE_1 METHOD_1 ( long count ) { TYPE_2 VAR_1 = new TYPE_2 ( ) . METHOD_2 ( count ) ; VAR_1 . METHOD_3 ( this ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( long count ) { return new TYPE_2 ( ) . METHOD_2 ( count ) . METHOD_3 ( this ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",577
public boolean METHOD_1 ( TYPE_1 t ) { boolean VAR_1 = this . METHOD_2 ( t ) ; if ( VAR_1 ) { this . VAR_2 . METHOD_1 ( t ) ; } return VAR_1 ; },public void METHOD_1 ( TYPE_1 t ) { },"['Update TypeReference', 'Delete TypeReference', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete Return']",578
protected boolean METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; return METHOD_2 ( VAR_1 ) ; },protected boolean METHOD_1 ( ) { return false ; },"['Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",579
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_3 . info ( ( STRING_2 + VAR_2 ) ) ; return new TYPE_1 ( STRING_3 ) ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( STRING_3 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",582
"protected void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 , INT_1 ) ; if ( VAR_2 != null ) { METHOD_3 ( VAR_2 , 0.0F ) ; } }","protected void METHOD_1 ( int VAR_1 ) { METHOD_3 ( METHOD_2 ( VAR_1 , INT_1 ) , 0.0F ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",583
"public static java.lang.String METHOD_1 ( java.lang.Double number ) { assert number >= 0 : STRING_1 ; java.lang.Double VAR_1 = new java.lang.Double ( FLOAT_1 ) ; java.lang.String VAR_2 = java.lang.String.format ( STRING_2 , number ) ; return VAR_2 ; }","public static java.lang.String METHOD_1 ( java.lang.Double number ) { assert number >= 0 : STRING_1 ; java.lang.Double VAR_1 = new java.lang.Double ( FLOAT_1 ) ; return java.lang.String.format ( STRING_2 , number ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",584
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( VAR_4 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_4 ) ; },"['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",585
"protected java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_1 ; }","protected java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( ) { return VAR_2 ; }","['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",586
public byte [ ] METHOD_1 ( TYPE_1 key ) { TYPE_1 VAR_1 = this . METHOD_2 ( key ) ; if ( VAR_1 == null ) return null ; return VAR_2 . array ( ) ; },public byte [ ] METHOD_1 ( TYPE_1 key ) { return this . METHOD_2 ( key ) . array ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",587
public TYPE_1 METHOD_1 ( ) { int VAR_1 = ( VAR_2 ) - 1 ; return new TYPE_2 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( VAR_2 ) ; },"['Update ConstructorCall', 'Move FieldRead', 'Delete TypeReference', 'Delete Literal', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",588
private TYPE_1 getType ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_1 VAR_2 = getType ( VAR_3 . getType ( ) ) ; if ( VAR_1 . METHOD_1 ( ) ) { VAR_2 . METHOD_2 ( VAR_4 ) ; } return VAR_2 ; },private TYPE_1 getType ( TYPE_2 VAR_1 ) throws TYPE_3 { return getType ( VAR_3 . getType ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",591
"public void METHOD_1 ( ) { TYPE_1 t = new TYPE_1 ( ( - 1 ) , INT_1 , 1 ) ; TYPE_2 . METHOD_2 ( t ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Literal', 'Delete UnaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",592
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( VAR_2 class , args ) ; TYPE_3 . METHOD_2 ( VAR_1 ) ; }","public static void main ( java.lang.String [ ] args ) { TYPE_2 . METHOD_1 ( VAR_2 class , args ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",594
"public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_1 . METHOD_2 ( ) , TYPE_1 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( true ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_4 . info ( VAR_3 ) ; } }",public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . METHOD_4 ( true ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_4 . info ( VAR_3 ) ; } },"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",595
"private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , TYPE_2 . METHOD_2 ( VAR_2 ) ) ; METHOD_3 ( VAR_3 ) ; return VAR_3 ; }","private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_2 ) ; METHOD_3 ( VAR_3 ) ; return VAR_3 ; }","['Update ConstructorCall', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",598
"public boolean METHOD_1 ( java.lang.Integer VAR_1 , java.lang.String VAR_2 , java.lang.Integer VAR_3 ) throws java.lang.Exception { boolean VAR_4 = VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_6 , VAR_3 , STRING_1 ) ; return VAR_4 ; }","public boolean METHOD_1 ( java.lang.String VAR_2 , java.lang.Integer VAR_3 ) throws java.lang.Exception { boolean VAR_4 = VAR_5 . METHOD_1 ( VAR_2 , VAR_6 , VAR_3 , STRING_1 ) ; return VAR_4 ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",599
"public void METHOD_1 ( TYPE_1 < ? super java.lang.Boolean > VAR_1 ) { TYPE_2 < TYPE_3 > VAR_2 = new TYPE_2 ( VAR_1 , VAR_3 , first , VAR_4 , VAR_5 ) ; VAR_2 . METHOD_1 ( ) ; }",public void METHOD_1 ( TYPE_1 < ? super java.lang.Boolean > VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",600
public double METHOD_1 ( ) { java.lang.Object VAR_1 = ( ( TYPE_1 ) ( VAR_2 . get ( STRING_1 ) ) ) . get ( STRING_2 ) ; double temp = METHOD_2 ( VAR_1 ) ; return temp ; },public long METHOD_1 ( ) { long temp = ( ( long ) ( ( ( TYPE_1 ) ( VAR_2 . get ( STRING_1 ) ) ) . get ( STRING_2 ) ) ) ; return temp ; },"['Update TypeReference', 'Update LocalVariable', 'Update TypeReference', 'Insert TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",601
"public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws java.lang.Exception { TYPE_1 VAR_3 = new TYPE_1 ( METHOD_2 ( VAR_1 ) ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; return VAR_3 ; }",public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) throws java.lang.Exception { return new TYPE_1 ( METHOD_2 ( VAR_1 ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",602
"public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; final TYPE_2 VAR_2 = ( ( TYPE_2 ) ( getActivity ( ) . METHOD_2 ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; }","public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; final TYPE_2 VAR_2 = ( ( TYPE_2 ) ( view . METHOD_2 ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; }","['Insert VariableRead', 'Delete Invocation']",604
"private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ( ( TYPE_3 ) ( TYPE_4 . METHOD_2 ( this ) ) ) , true ) ; VAR_2 . METHOD_3 ( true ) ; }",private void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",605
"public void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { TYPE_3 VAR_3 = new TYPE_3 ( ) ; java.lang.String VAR_4 = VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_5 . METHOD_3 ( VAR_4 , VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { VAR_5 . METHOD_3 ( VAR_1 , VAR_2 ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",606
private void METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == ( - 1 ) ) return ; VAR_3 . remove ( VAR_1 ) ; },private void METHOD_1 ( ) { VAR_3 . remove ( VAR_2 . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",607
public void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) > 0 ) { android.view.View VAR_1 = METHOD_3 ( ) ; VAR_2 . remove ( VAR_1 ) ; this . METHOD_4 ( ) ; } },public void METHOD_1 ( android.view.View view ) { VAR_2 . remove ( view ) ; this . METHOD_4 ( ) ; },"['Insert Parameter', 'Move Invocation', 'Move Invocation', 'Move TypeReference', 'Update VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete Block', 'Delete If']",608
"private void init ( ) { TYPE_1 . METHOD_1 ( STRING_1 , STRING_2 ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_1 = new TYPE_2 ( VAR_2 ) ; METHOD_4 ( ) ; }",private void init ( ) { METHOD_2 ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete FieldWrite', 'Delete Assignment', 'Delete Invocation']",609
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = new TYPE_2 ( ) ; java.util.List < TYPE_1 > list = VAR_3 . METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( list ) ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",610
"public TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_1 c = VAR_1 . METHOD_3 ( STRING_2 , null ) ; TYPE_2 . METHOD_2 ( ( STRING_1 + ( VAR_2 . toString ( ) ) ) ) ; return c ; }","public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( STRING_2 , null ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead']",611
public boolean METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { boolean VAR_2 = super . METHOD_1 ( VAR_1 ) ; return VAR_2 ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { return super . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",612
int METHOD_1 ( ) throws java.io.IOException { int VAR_1 = METHOD_2 ( true ) ; if ( VAR_1 > 0 ) { METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; } return VAR_1 ; },int METHOD_1 ( ) throws java.io.IOException { return METHOD_2 ( true ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",613
"public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; return new TYPE_1 ( VAR_1 , STRING_1 ) ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( new TYPE_2 ( ) , STRING_1 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",614
public static void main ( java.lang.String [ ] args ) { java.lang.String VAR_1 = VAR_2 ; TYPE_1 . METHOD_1 ( VAR_1 ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",615
"public java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > results = new java.util.ArrayList < java.lang.String > ( ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) , 1 , height ( VAR_1 ) , results ) ; return results ; }","public void METHOD_1 ( ) { METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) , 1 , height ( VAR_1 ) ) ; }","['Update TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",617
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) == ( VAR_3 ) ) { java.io.File VAR_4 = VAR_2 . METHOD_4 ( ) ; METHOD_1 ( VAR_4 , VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_1 ) ) == ( VAR_3 ) ) { java.io.File VAR_4 = METHOD_2 ( VAR_1 ) . METHOD_4 ( ) ; METHOD_1 ( VAR_4 , VAR_1 ) ; } }","['Update LocalVariable', 'Move LocalVariable', 'Insert Invocation', 'Move TypeReference', 'Insert Invocation', 'Insert VariableRead', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",618
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( this , ( STRING_1 + VAR_2 ) , VAR_3 ) . show ( ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_3 ( this , ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) , VAR_3 ) . show ( ) ; return true ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",620
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; TYPE_4 . METHOD_3 ( this , VAR_4 ) ; return VAR_4 ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; TYPE_4 . METHOD_3 ( this , view ) ; }","['Update LocalVariable', 'Update VariableRead', 'Delete VariableRead', 'Delete Return']",622
"public double METHOD_1 ( TYPE_1 TYPE_2 , TYPE_1 VAR_1 ) { double VAR_2 = TYPE_2 . METHOD_2 ( this ) ; double VAR_3 = this . METHOD_2 ( VAR_1 ) ; double diff = VAR_3 - VAR_2 ; return diff + ( INT_1 % INT_2 ) ; }","public double METHOD_1 ( TYPE_1 TYPE_2 , TYPE_1 VAR_1 ) { return 0 ; }","['Insert Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",623
public void METHOD_1 ( ) { this . context = TYPE_1 . METHOD_2 ( ) ; this . VAR_1 = VAR_2 . get ( context ) ; VAR_1 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { android.content.Context context = TYPE_1 . METHOD_2 ( ) ; VAR_1 = VAR_2 . get ( context ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete ThisAccess', 'Delete FieldWrite', 'Delete Assignment', 'Delete ThisAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",624
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( ) ; VAR_4 . add ( VAR_1 ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { java.util.Set < TYPE_1 > VAR_3 = new java.util.HashSet < TYPE_1 > ( ) ; VAR_4 . add ( VAR_1 ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Insert ConstructorCall', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation']",625
"public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_3 ( VAR_3 , true , VAR_4 , INT_1 ) ) ; }",public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_3 ( true ) ) ; },"['Update ConstructorCall', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead']",626
public void METHOD_1 ( double VAR_1 ) { double VAR_2 = java.lang.Math.round ( VAR_1 ) ; double VAR_3 = INT_1 / VAR_2 ; this . VAR_1 = ( ( long ) ( VAR_3 ) ) ; },public void METHOD_1 ( long VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Update TypeReference', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead']",628
public java.lang.String toString ( ) { java.lang.String VAR_1 = ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) + ( text ) ) + STRING_4 ) + ( VAR_3 ) ) + CHAR_1 ; return VAR_1 ; },public java.lang.String toString ( ) { return ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) + ( text ) ) + STRING_4 ) + ( VAR_3 ) ) + CHAR_1 ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",629
"protected java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.util.Properties VAR_2 ) { java.lang.String VAR_3 = VAR_4 . getValue ( VAR_1 ) ; return VAR_3 ; }","protected java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.util.Properties VAR_2 ) { return VAR_4 . getValue ( VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",631
public TYPE_1 METHOD_1 ( TYPE_1 [ ] VAR_1 ) { java.util.Random VAR_2 = new java.util.Random ( ) ; int VAR_3 = VAR_2 . METHOD_2 ( VAR_4 . length ) ; return VAR_1 [ VAR_3 ] ; },public TYPE_1 METHOD_1 ( TYPE_1 [ ] VAR_1 ) { return VAR_1 [ 0 ] ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",633
public boolean METHOD_1 ( TYPE_1 context ) { char c = context . METHOD_2 ( ) ; if ( c == ( VAR_1 ) ) { return false ; } return true ; },public boolean METHOD_1 ( TYPE_1 context ) { context . METHOD_2 ( ) ; return true ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",635
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { this . VAR_2 = null ; return ; } TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; this . VAR_2 = VAR_3 ; },public void METHOD_1 ( TYPE_1 VAR_2 ) { this . VAR_2 = VAR_2 ; },"['Update Parameter', 'Update VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ThisAccess', 'Delete FieldWrite', 'Delete Literal', 'Delete Assignment', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",636
protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; return VAR_1 . METHOD_4 ( ) ; },protected TYPE_1 METHOD_1 ( ) { return TYPE_3 . METHOD_2 ( ) . METHOD_4 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",637
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 , VAR_4 . getText ( ) ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent i = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( i ) ; }","['Update LocalVariable', 'Update VariableRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",638
"public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; int size = VAR_2 . size ( ) ; VAR_3 . assertEquals ( STRING_1 , INT_1 , size ) ; }","public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; int size = VAR_2 . size ( ) ; VAR_3 . assertEquals ( STRING_1 , INT_1 , size ) ; }","['Move Invocation', 'Delete Invocation']",641
public float METHOD_1 ( java.lang.String key ) { java.lang.Object value = get ( key ) ; java.lang.Float VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( VAR_1 == null ) { return 0.0F ; } return VAR_1 . METHOD_3 ( ) ; },public float METHOD_1 ( java.lang.String key ) { java.lang.Object value = get ( key ) ; if ( value == null ) { return 0.0F ; } return TYPE_1 . METHOD_2 ( value ) . METHOD_3 ( ) ; },"['Update VariableRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",642
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( this ) ; android.content.Intent intent = getIntent ( ) ; java.lang.String VAR_3 = intent . METHOD_4 ( STRING_1 ) ; METHOD_5 ( VAR_3 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( this ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",644
protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( 0.0 ) ; VAR_1 . METHOD_3 ( 0.0 ) ; return VAR_1 ; },protected TYPE_1 METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",646
public void METHOD_1 ( ) { while ( true ) { try { int VAR_1 = VAR_2 . METHOD_2 ( ) ; java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; } catch ( java.lang.Exception VAR_3 ) { java.lang.System.out.println ( VAR_3 ) ; } } },public void METHOD_1 ( ) { while ( true ) { try { } catch ( java.lang.Exception VAR_3 ) { java.lang.System.out.println ( VAR_3 ) ; } } },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",650
"private static java.lang.String METHOD_1 ( java.lang.String n , java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( n ) ; return VAR_2 != null ? VAR_3 . trim ( ) : VAR_1 ; }","private static java.lang.String METHOD_1 ( java.lang.String n , java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( n ) . trim ( ) ; return VAR_2 != null ? VAR_2 : VAR_1 ; }","['Insert Invocation', 'Move Invocation', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",651
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { java.lang.String VAR_3 = TYPE_4 . METHOD_2 ( TYPE_5 . METHOD_3 ( STRING_1 ) , TYPE_6 . METHOD_3 ( STRING_2 ) ) ; return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { java.lang.String VAR_3 = TYPE_5 . METHOD_3 ( STRING_1 ) ; return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",653
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 . text ) ) ) ; VAR_5 . setText ( STRING_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",654
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 token = VAR_2 . METHOD_2 ( VAR_1 ) ; return TYPE_3 . METHOD_3 ( token . METHOD_4 ( ) ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_4 ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",655
"void METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; }",void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",656
"public static boolean METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 . getConfig ( VAR_3 ) ) ; if ( VAR_1 ) VAR_4 = VAR_5 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }","public static boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 . getConfig ( VAR_3 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldWrite', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Assignment', 'Delete Block', 'Delete If', 'Delete VariableRead']",657
"public java.lang.String METHOD_1 ( ) { return getString ( VAR_1 , TYPE_1 . METHOD_2 ( ) ) ; }","public java.lang.String METHOD_1 ( ) { java.lang.String value = getString ( VAR_1 , TYPE_1 . METHOD_2 ( ) ) ; return value ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",658
public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ; VAR_3 . show ( ) ; },public void METHOD_1 ( int VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",659
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) . METHOD_2 ( ) ) ; if ( ( METHOD_3 ( ) ) == null ) { METHOD_4 ( VAR_1 ) ; } METHOD_5 ( VAR_1 ) ; },protected void METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; if ( ( METHOD_3 ( ) ) == null ) { METHOD_4 ( VAR_1 ) ; } METHOD_5 ( VAR_1 ) ; },"['Update TypeReference', 'Move ConstructorCall', 'Delete Invocation', 'Delete ConstructorCall']",660
public void METHOD_1 ( android.view.View VAR_1 ) { remove ( VAR_2 ) ; VAR_3 . get ( position ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; TYPE_2 VAR_4 = new TYPE_2 ( this ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { remove ( VAR_2 ) ; },"['Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",662
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_3 ( intent ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",663
public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ! ( VAR_2 == INT_1 ) ) { VAR_3 . add ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . add ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",664
public byte [ ] METHOD_1 ( ) { TYPE_1 buffer = TYPE_1 . METHOD_2 ( VAR_1 . length ( ) ) ; buffer . METHOD_3 ( VAR_2 ) ; VAR_3 . put ( content . METHOD_1 ( ) ) ; return VAR_3 . array ( ) ; },public byte [ ] METHOD_1 ( ) { return content . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",665
"public void METHOD_1 ( android.view.View VAR_1 ) { int VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( VAR_2 == 0 ) { METHOD_3 ( 0 , ""0"" ) ; } else { METHOD_3 ( VAR_2 , null ) ; } }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( 0 , ""0"" ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",666
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_2 ) ; VAR_4 . add ( VAR_3 ) ; return VAR_3 ; }","public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { VAR_4 . add ( new TYPE_1 ( VAR_1 , VAR_2 ) ) ; }","['Update TypeReference', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",667
"public static TYPE_1 METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public static TYPE_1 METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 ) { return TYPE_2 . METHOD_1 ( VAR_1 , VAR_1 , VAR_3 ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",668
public void METHOD_1 ( ) { if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_2 ) ; VAR_3 . start ( ) ; } else { new TYPE_2 ( ) ; } },public void METHOD_1 ( ) { if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_2 ) ; VAR_3 . start ( ) ; } else { TYPE_2 p = new TYPE_2 ( ) ; } },"['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall']",669
public TYPE_1 < TYPE_2 > add ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_2 . info ( STRING_1 ) ; TYPE_1 < TYPE_2 > response = METHOD_1 ( VAR_3 . add ( VAR_1 ) ) ; return response ; },public java.lang.Long add ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_2 . info ( STRING_1 ) ; return VAR_3 . add ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",671
"public TYPE_1 < java.lang.Object > METHOD_1 ( int id , TYPE_2 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( id ) ; VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; return TYPE_1 . METHOD_5 ( VAR_4 . update ( VAR_1 ) ) ; }","public TYPE_1 < java.lang.Object > METHOD_1 ( int id , TYPE_2 VAR_1 ) { return TYPE_1 . METHOD_5 ( VAR_4 . update ( VAR_1 ) ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",673
public java.lang.String METHOD_1 ( ) { java.lang.Object VAR_1 = get ( STRING_1 ) ; if ( VAR_1 != null ) return VAR_2 . toString ( ) ; return null ; },public java.lang.String METHOD_1 ( ) { if ( ( get ( STRING_1 ) ) != null ) return get ( STRING_1 ) . toString ( ) ; return null ; },"['Move Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess']",674
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 . remove ( VAR_1 ) ) ) ; if ( VAR_3 . isEmpty ( ) ) VAR_4 = TYPE_2 . METHOD_2 ( ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . remove ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldWrite', 'Delete TypeAccess', 'Delete Invocation', 'Delete Assignment', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete VariableRead']",675
public static int METHOD_1 ( java.lang.Integer VAR_1 ) { java.util.Scanner VAR_2 = new java.util.Scanner ( VAR_3 ) ; int VAR_4 = 0 ; java.lang.System.out.println ( STRING_1 ) ; return VAR_4 ; },public static int METHOD_1 ( java.lang.Integer VAR_1 ) { int VAR_4 = 0 ; return VAR_4 ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",676
"protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; android.content.Intent VAR_3 = new android.content.Intent ( VAR_4 ) ; context . METHOD_3 ( VAR_3 ) ; }","protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",678
"public boolean METHOD_1 ( final long id ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; return VAR_2 . METHOD_1 ( VAR_1 , id ) ; }",public boolean METHOD_1 ( final long id ) throws TYPE_1 { return false ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",681
public static java.net.URL METHOD_1 ( java.lang.String path ) throws java.io.IOException { return VAR_1 class . METHOD_2 ( ( STRING_1 + path ) ) ; },public static java.net.URL METHOD_1 ( java.lang.String path ) throws java.io.IOException { java.net.URL url = VAR_1 class . METHOD_2 ( ( STRING_1 + path ) ) ; return url ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",682
public java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { return TYPE_1 . METHOD_2 ( ) ; } return VAR_2 ; },public java.util.ArrayList < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . get ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",683
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( ) ; VAR_2 . set ( STRING_1 , STRING_2 ) ; java.lang.String string = VAR_2 . get ( STRING_1 ) ; java.lang.System.out.println ( string ) ; }",public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",684
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > list = new java.util.ArrayList < > ( ) ; return list ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",686
public void METHOD_1 ( int VAR_1 ) { int VAR_2 = VAR_1 * INT_1 ; VAR_3 . METHOD_2 ( VAR_2 ) ; if ( VAR_2 == 0 ) { VAR_3 . METHOD_3 ( VAR_4 ) ; } },public void METHOD_1 ( int VAR_1 ) { VAR_3 . METHOD_2 ( ( VAR_1 * INT_1 ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",687
public void delete ( java.lang.String name ) { TYPE_1 < TYPE_2 > VAR_1 = METHOD_1 ( name ) ; if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . remove ( VAR_3 . get ( ) ) ; } },public void delete ( java.lang.String name ) { VAR_2 . remove ( METHOD_1 ( name ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",688
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( this . METHOD_2 ( VAR_1 ) ) != null ) { TYPE_2 p = this . METHOD_2 ( VAR_1 ) ; p . METHOD_1 ( VAR_2 ) ; p . METHOD_3 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 p = new TYPE_2 ( VAR_1 ) ; p . METHOD_1 ( VAR_2 ) ; p . METHOD_3 ( ) ; }","['Move LocalVariable', 'Move Invocation', 'Move Invocation', 'Insert ConstructorCall', 'Move VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",690
private void METHOD_1 ( boolean VAR_1 ) { TYPE_1 f = METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; if ( f instanceof TYPE_2 ) { return ; } METHOD_4 ( ) ; METHOD_5 ( VAR_3 ) ; },private void METHOD_1 ( boolean VAR_1 ) { METHOD_4 ( ) ; METHOD_5 ( VAR_3 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",691
"public void METHOD_1 ( TYPE_1 TYPE_2 , TYPE_3 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_4 VAR_2 = VAR_3 . METHOD_4 ( VAR_4 ) ; if ( VAR_2 != null ) VAR_3 . METHOD_5 ( VAR_4 , VAR_2 , VAR_2 , INT_1 ) ; }","public void METHOD_1 ( TYPE_1 TYPE_2 , TYPE_3 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",692
"public TYPE_1 METHOD_1 ( java.lang.String path , TYPE_1 VAR_1 ) { java.lang.String item = getString ( path , STRING_1 ) ; if ( TYPE_2 . METHOD_2 ( item ) ) { return TYPE_2 . METHOD_3 ( item ) ; } return VAR_1 ; }","public TYPE_1 METHOD_1 ( java.lang.String path , java.lang.Integer VAR_1 ) { return ( ( TYPE_1 ) ( get ( path , VAR_1 ) ) ) ; }","['Update TypeReference', 'Update Invocation', 'Move Invocation', 'Insert TypeReference', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",696
"private static void METHOD_1 ( ) { java.lang.System.out.println ( ( ""\n"" + ( STRING_1 + STRING_2 ) ) ) ; java.lang.System.out.println ( ( STRING_3 + STRING_4 ) ) ; java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; }","private static void METHOD_1 ( ) { java.lang.System.out.println ( ( ""\n"" + ( STRING_1 + STRING_2 ) ) ) ; TYPE_1 . METHOD_3 ( ) ; }","['Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",697
public void METHOD_1 ( final TYPE_1 event ) { if ( event . METHOD_2 ( ) . equals ( VAR_1 ) ) { java.lang.System.exit ( 0 ) ; } },public void METHOD_1 ( final TYPE_1 event ) { java.lang.Object obj = event . METHOD_2 ( ) ; if ( event . METHOD_2 ( ) . equals ( VAR_1 ) ) { java.lang.System.exit ( 0 ) ; } },"['Insert LocalVariable', 'Insert TypeReference', 'Insert Invocation', 'Insert VariableRead']",699
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 i = METHOD_2 ( null ) ; i . METHOD_3 ( true ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( null ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",701
"public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = this . METHOD_2 ( VAR_1 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_3 ( ) . equals ( VAR_2 ) ; } return false ; }","public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return false ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",702
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . METHOD_2 ( VAR_1 ) ) != null ) { TYPE_2 p = this . METHOD_2 ( VAR_1 ) ; p . METHOD_1 ( ) ; p . METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 p = new TYPE_2 ( VAR_1 ) ; p . METHOD_1 ( ) ; p . METHOD_3 ( ) ; },"['Move LocalVariable', 'Move Invocation', 'Move Invocation', 'Insert ConstructorCall', 'Move VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",703
protected boolean METHOD_1 ( TYPE_1 item ) { boolean result = VAR_1 . add ( item ) ; java.util.Collections.sort ( this . VAR_2 ) ; return result ; },protected boolean METHOD_1 ( TYPE_1 item ) { return VAR_1 . add ( item ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead']",704
"public void METHOD_1 ( ) { java.lang.String VAR_1 = java.lang.String.format ( VAR_2 . toString ( ) , params ) ; TYPE_1 . METHOD_2 ( VAR_3 . context , VAR_1 , length ) . show ( ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_3 . context , java.lang.String.format ( VAR_2 . toString ( ) , params ) , length ) . show ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",705
"public void METHOD_1 ( android.view.View view ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = TYPE_1 . METHOD_3 ( this , VAR_2 ) ; VAR_3 . start ( ) ; }",public void METHOD_1 ( android.view.View view ) { METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",708
public static void init ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_1 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( TYPE_2 ) ; VAR_3 = new TYPE_4 ( ) . METHOD_3 ( VAR_1 ) ; },public static void init ( ) { java.util.List < TYPE_1 > VAR_1 = java.util.Arrays.asList ( TYPE_2 . METHOD_1 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( TYPE_2 ) ; VAR_3 = new TYPE_4 ( ) . METHOD_3 ( VAR_1 ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Move Invocation']",709
public < TYPE_1 > TYPE_1 METHOD_1 ( ) { java.util.Calendar date = VAR_1 . METHOD_1 ( ) ; return ( ( TYPE_1 ) ( VAR_2 . format ( VAR_3 . getTime ( ) ) ) ) ; },public < TYPE_1 > TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( VAR_2 . format ( VAR_1 . METHOD_1 ( ) ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",712
public TYPE_1 METHOD_1 ( ) { int temp = VAR_1 ; VAR_1 = VAR_2 . METHOD_2 ( ( ( VAR_1 ) + 1 ) ) ; return new TYPE_1 ( temp ) ; },public TYPE_1 METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ( ( VAR_1 ) + 1 ) ) ; return new TYPE_1 ( VAR_1 ) ; },"['Update ConstructorCall', 'Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",715
"public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { TYPE_1 . METHOD_2 ( context , STRING_1 , VAR_1 ) . show ( ) ; android.content.Intent VAR_2 = new android.content.Intent ( context , VAR_3 class ) ; TYPE_2 . METHOD_3 ( context , VAR_2 ) ; }","public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { TYPE_1 . METHOD_2 ( context , STRING_1 , VAR_1 ) . show ( ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",716
"public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 , VAR_3 ) . show ( ) ; METHOD_4 ( ) ; TYPE_2 VAR_4 = new TYPE_2 ( this ) ; VAR_4 . METHOD_5 ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 , VAR_3 ) . show ( ) ; METHOD_4 ( ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",720
private static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 params = VAR_1 . METHOD_2 ( ) ; params . METHOD_3 ( ( ( VAR_2 ) / INT_1 ) ) ; params . METHOD_4 ( false ) ; return VAR_1 ; },private static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; return VAR_1 ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",723
"public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String name , java.lang.String value ) { TYPE_3 VAR_1 = new TYPE_3 ( value ) ; METHOD_2 ( name , VAR_1 ) ; return TYPE_1 . METHOD_3 ( new TYPE_4 ( name , VAR_1 ) ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String name , java.lang.String value ) { return TYPE_1 . METHOD_3 ( new TYPE_4 ( name , new TYPE_3 ( value ) ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",724
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = null ; TYPE_1 VAR_2 = getActivity ( ) . METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( getString ( VAR_3 ) ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = null ; },"['Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",725
public static int METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( ) ; int VAR_2 = TYPE_1 . METHOD_3 ( ) ; int VAR_3 = ( VAR_2 + VAR_1 ) + VAR_1 ; return VAR_3 ; },public static int METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( ) ; int VAR_2 = TYPE_1 . METHOD_3 ( ) ; int VAR_3 = VAR_2 + VAR_1 ; return VAR_3 ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator']",728
"public java.lang.Object METHOD_1 ( java.lang.String VAR_1 ) { java.lang.Integer VAR_2 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { return TYPE_2 . METHOD_3 ( STRING_1 ) ; } return VAR_3 . METHOD_1 ( VAR_2 , VAR_1 ) ; }","public java.lang.Object METHOD_1 ( java.lang.Integer VAR_2 , java.lang.String VAR_1 ) { return VAR_3 . METHOD_1 ( VAR_2 , VAR_1 ) ; }","['Insert Parameter', 'Move TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",730
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_4 VAR_3 : VAR_1 . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( this . METHOD_5 ( VAR_3 ) ) ; } return VAR_4 . build ( ) ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 ; for ( TYPE_4 VAR_3 : VAR_1 . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( this . METHOD_5 ( VAR_3 ) ) ; } return VAR_4 . build ( ) ; },"['Delete TypeAccess', 'Delete Invocation']",731
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_4 [ VAR_2 ] , VAR_5 ) ; VAR_6 . execute ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { new TYPE_2 ( VAR_4 [ VAR_2 ] , VAR_5 ) . execute ( ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",732
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_1 , true ) ; TYPE_2 . METHOD_3 ( VAR_1 , false ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_5 , VAR_6 ) ; VAR_4 . METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_1 , true ) ; TYPE_2 . METHOD_3 ( VAR_1 , false ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",734
"public void METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; if ( ( ( VAR_2 . METHOD_3 ( ) ) == VAR_1 ) || ( VAR_1 == ( - 1 ) ) ) { VAR_3 . METHOD_4 ( false , METHOD_5 ( ) ) ; } }","public void METHOD_1 ( ) { VAR_3 . METHOD_4 ( false , METHOD_5 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",735
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( METHOD_2 ( VAR_1 ) ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",738
public TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_1 = VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ; return METHOD_5 ( VAR_3 . METHOD_6 ( VAR_1 ) ) ; },public TYPE_1 METHOD_1 ( ) { return METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",740
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 class ) ; VAR_1 . METHOD_1 ( new TYPE_2 ( STRING_1 ) ) ; VAR_1 . METHOD_2 ( args ) ; },"public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_2 class , args ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Insert TypeAccess', 'Move VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",742
"public static void main ( java.lang.String [ ] args ) throws TYPE_1 { java.lang.String str = STRING_1 ; java.lang.System.out.println ( VAR_1 . replaceAll ( STRING_2 , STRING_3 ) ) ; }",public static void main ( java.lang.String [ ] args ) throws TYPE_1 { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",743
public int METHOD_1 ( ) { int sum = 0 ; for ( int i = ( VAR_1 . length ) - 1 ; i >= 0 ; i -- ) { sum += i ; } return sum ; },public int METHOD_1 ( ) { int sum = 0 ; for ( int i = VAR_1 . length ; i >= 0 ; i -- ) { sum += i ; } return sum ; },"['Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",744
"public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_4 , name , VAR_1 , VAR_2 ) ; ( VAR_4 ) ++ ; VAR_5 . add ( VAR_3 ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_5 . size ( ) , name , VAR_1 , VAR_2 ) ; VAR_5 . add ( VAR_3 ) ; return VAR_3 ; }","['Insert Invocation', 'Insert TypeAccess', 'Delete FieldRead', 'Delete FieldWrite', 'Delete UnaryOperator']",748
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( ( VAR_4 . getName ( ) ) == STRING_2 ) { java.lang.System.out.println ( STRING_3 ) ; } else { } },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",749
"public int METHOD_1 ( java.lang.String name ) { java.util.Map < java.lang.String , java.lang.Integer > VAR_1 = METHOD_2 ( ) ; return VAR_1 . METHOD_3 ( name ) ? METHOD_2 ( ) . get ( name ) : 0 ; }",public int METHOD_1 ( java.lang.String name ) { return ( METHOD_2 ( ) . get ( name ) ) == null ? 0 : METHOD_2 ( ) . get ( name ) ; },"['Move Invocation', 'Insert BinaryOperator', 'Insert Invocation', 'Insert Literal', 'Insert Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",750
protected void METHOD_1 ( ) throws TYPE_1 { java.lang.String text = VAR_1 . toString ( ) ; METHOD_2 ( TYPE_2 . METHOD_3 ( text ) ) ; VAR_2 . METHOD_4 ( 0 ) ; },protected void METHOD_1 ( ) throws TYPE_1 { METHOD_2 ( VAR_1 . toString ( ) ) ; VAR_2 . METHOD_4 ( 0 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",751
"public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; java.lang.String VAR_4 = VAR_5 . getString ( STRING_1 , STRING_2 ) ; return VAR_4 ; }","public java.lang.String METHOD_1 ( ) { TYPE_2 VAR_2 = this . METHOD_2 ( VAR_3 ) ; java.lang.String VAR_4 = VAR_5 . getString ( STRING_1 , STRING_2 ) ; return VAR_4 ; }","['Insert ThisAccess', 'Delete Wra', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",752
"public static double METHOD_1 ( TYPE_1 data , TYPE_2 VAR_1 ) { double VAR_2 = TYPE_3 . METHOD_2 ( data ) ; double VAR_3 = TYPE_3 . METHOD_3 ( data , VAR_1 ) ; return VAR_2 - VAR_3 ; }","public static double METHOD_1 ( TYPE_1 data , TYPE_2 VAR_1 ) { return ( TYPE_3 . METHOD_2 ( data ) ) - ( TYPE_3 . METHOD_3 ( data , VAR_1 ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",753
"private TYPE_1 METHOD_1 ( int VAR_1 , TYPE_2 < TYPE_1 > VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . get ( VAR_1 ) ; VAR_4 . remove ( VAR_1 ) ; if ( ( VAR_5 ) == VAR_3 ) { VAR_5 = null ; } return VAR_3 ; }","private TYPE_1 METHOD_1 ( int VAR_1 , TYPE_2 < TYPE_1 > VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . remove ( VAR_1 ) ; if ( ( VAR_5 ) == VAR_3 ) { VAR_5 = null ; } return VAR_3 ; }","['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",754
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this ) ; VAR_1 . METHOD_2 ( INT_1 , INT_1 , INT_1 , INT_1 , INT_2 , INT_1 ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( this ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",755
"public TYPE_1 METHOD_1 ( java.lang.String pattern , int VAR_1 ) throws TYPE_2 { TYPE_1 response = METHOD_2 ( pattern , false , 0 , VAR_1 ) ; if ( ( response . METHOD_3 ( ) ) == ( VAR_2 ) ) METHOD_4 ( pattern ) ; return response ; }","public TYPE_1 METHOD_1 ( java.lang.String pattern , int VAR_1 ) throws TYPE_2 { return METHOD_2 ( pattern , false , 0 , VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",756
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( VAR_2 ) ; java.util.Collections.sort ( VAR_1 ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return new java.util.ArrayList ( VAR_2 ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",757
"private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 , STRING_2 ) ; return TYPE_2 . METHOD_3 ( VAR_2 ) ; }","private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 , STRING_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",758
public void METHOD_1 ( ) { java.lang.String info = VAR_1 . METHOD_2 ( VAR_2 ) . toString ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; java.lang.String output = VAR_4 . toString ( ) ; assertTrue ( VAR_5 . equals ( info ) ) ; },public void METHOD_1 ( ) { java.lang.String info = VAR_1 . METHOD_2 ( VAR_2 ) . toString ( ) ; assertTrue ( VAR_3 . METHOD_3 ( VAR_2 ) . equals ( info ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess']",759
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; TYPE_1 VAR_2 = new TYPE_2 ( STRING_1 , false ) ; METHOD_3 ( ) . METHOD_4 ( VAR_3 , java.util.Arrays.asList ( VAR_2 ) ) ; super . METHOD_1 ( ) ; }",public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",760
private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( VAR_4 class ) . VAR_5 ; return ( VAR_2 == ( VAR_6 ) ) || ( VAR_2 == ( VAR_7 ) ) ; },private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_3 . get ( VAR_4 class ) . VAR_5 ) == ( VAR_6 ) ; },"['Update BinaryOperator', 'Move FieldRead', 'Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",761
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( STRING_1 , VAR_4 ) . METHOD_4 ( INT_1 , INT_2 ) ; assertEquals ( STRING_2 , VAR_5 . getString ( ) ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( STRING_1 , VAR_4 , null , INT_1 , INT_2 ) ; assertEquals ( STRING_2 , VAR_5 . getString ( ) ) ; }","['Move ConstructorCall', 'Insert Literal', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",763
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < ? extends TYPE_3 > values , TYPE_4 context ) throws java.io.IOException , TYPE_5 { TYPE_6 VAR_2 = VAR_3 . get ( ) ; for ( TYPE_3 VAR_4 : values ) context . METHOD_2 ( VAR_2 , VAR_4 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < ? extends TYPE_3 > values , TYPE_4 context ) throws java.io.IOException , TYPE_5 { for ( TYPE_3 VAR_4 : values ) context . METHOD_2 ( VAR_1 , VAR_4 ) ; }","['Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",764
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_3 . trim ( ) ; return VAR_4 . METHOD_1 ( VAR_2 ) ; },private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_4 . METHOD_1 ( VAR_1 ) ; },"['Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",765
public void METHOD_1 ( ) { TYPE_1 obj = new TYPE_1 ( STRING_1 ) ; new TYPE_2 ( ) . METHOD_2 ( VAR_1 . get ( STRING_2 ) ) ; },public void METHOD_1 ( ) { new TYPE_2 ( ) . METHOD_2 ( null ) ; },"['Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",766
public static void main ( java.lang.String [ ] arg ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 results = VAR_1 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] arg ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",767
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this , VAR_1 , VAR_2 ) . show ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 . show ( METHOD_4 ( ) , STRING_1 ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this , VAR_1 , VAR_2 ) . show ( ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",768
public java.lang.Long [ ] METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; java.lang.String result = METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ( STRING_1 + result ) ) ; java.lang.Long [ ] VAR_2 = TYPE_2 . METHOD_5 ( result ) ; return VAR_2 ; },public java.lang.String METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; java.lang.String result = METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ( STRING_1 + result ) ) ; return result ; },"['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",770
"private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; return new TYPE_1 ( VAR_2 , VAR_3 ) ; }","private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; TYPE_1 id = new TYPE_1 ( VAR_2 , VAR_3 ) ; return id ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead']",772
public TYPE_1 METHOD_1 ( int index ) { TYPE_1 VAR_1 = VAR_2 . get ( index ) ; VAR_2 . remove ( index ) ; VAR_3 . METHOD_2 ( ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( int index ) { VAR_2 . remove ( index ) ; VAR_3 . METHOD_2 ( ) ; return VAR_2 . get ( index ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",774
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",775
"public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = new TYPE_2 ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) . build ( ) ; VAR_2 . show ( this , VAR_1 ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation']",776
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( context , VAR_3 class ) ; VAR_2 . METHOD_2 ( STRING_1 , VAR_4 ) ; ( ( TYPE_1 ) ( context ) ) . METHOD_3 ( VAR_2 , 1 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",778
public java.lang.Object METHOD_1 ( java.lang.Object VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.Object VAR_3 = VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_2 ( ) . commit ( ) ; return VAR_3 ; },public void METHOD_1 ( java.lang.Object VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_2 ( ) . commit ( ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",782
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( ) ; VAR_1 . METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( ) { VAR_2 . get ( ) . METHOD_1 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",785
private static TYPE_1 METHOD_1 ( java.lang.String filename ) { try { TYPE_2 VAR_1 = new TYPE_2 ( filename ) ; return VAR_1 . METHOD_1 ( filename ) ; } catch ( TYPE_3 VAR_2 ) { return null ; } catch ( java.io.IOException VAR_3 ) { return null ; } },private static TYPE_1 METHOD_1 ( java.lang.String filename ) { try { return TYPE_2 . METHOD_1 ( filename ) ; } catch ( TYPE_3 VAR_2 ) { return null ; } catch ( java.io.IOException VAR_3 ) { return null ; } },"['Insert TypeAccess', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",786
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) VAR_2 . METHOD_3 ( VAR_3 . get ( ) ) ; else java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_3 . get ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",787
public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; METHOD_2 ( ( ! VAR_1 ) ) ; if ( ! VAR_1 ) { TYPE_1 VAR_3 = METHOD_3 ( ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_4 ( VAR_4 ) ; } } },public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; METHOD_2 ( ( ! VAR_1 ) ) ; },"['Delete VariableRead', 'Delete UnaryOperator', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If']",788
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( new android.content.Intent ( this , VAR_3 class ) ) ; METHOD_3 ( ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",789
"public static void list ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( ) ; boolean VAR_2 = false ; java.lang.String VAR_3 = TYPE_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public static void list ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( ) ; boolean VAR_2 = false ; METHOD_3 ( VAR_1 , VAR_2 ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",790
public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { return false ; } return VAR_2 . METHOD_1 ( VAR_1 ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . get ( VAR_1 ) . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",791
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; int size = this . VAR_1 . size ( ) ; this . VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( 0 , size ) ; }",public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete VariableRead', 'Delete Invocation']",792
"void METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( context , VAR_1 , VAR_2 . get ( ) , VAR_3 ) ; }","void METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( context , VAR_1 , VAR_2 . get ( ) . toString ( ) , VAR_3 ) ; }","['Insert Invocation', 'Move Invocation']",793
public void METHOD_1 ( ) { try { while ( true ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { return ; } VAR_3 . info ( VAR_1 ) ; } } catch ( java.io.IOException VAR_4 ) { } },public void METHOD_1 ( ) { try { while ( true ) { VAR_3 . info ( VAR_2 . METHOD_2 ( ) ) ; } } catch ( java.io.IOException VAR_4 ) { } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",794
"public static void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; java.util.List < TYPE_2 > VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; }",public static void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",795
private double METHOD_1 ( java.lang.Integer VAR_1 ) { double VAR_2 = java.lang.Math.abs ( ( 1 - ( ( ( VAR_3 . METHOD_2 ( ) ) / ( VAR_1 . METHOD_2 ( ) ) ) * INT_1 ) ) ) ; return VAR_2 ; },private double METHOD_1 ( java.lang.Integer VAR_1 ) { double VAR_2 = 1 - ( ( ( VAR_3 . METHOD_2 ( ) ) / ( VAR_1 . METHOD_2 ( ) ) ) * INT_1 ) ; return VAR_2 ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation']",796
"public final void METHOD_1 ( double VAR_1 ) { long VAR_2 = java.lang.Double . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_1 ( this , VAR_2 ) ; }",public final void METHOD_1 ( double VAR_1 ) { set ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation']",798
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( this ) ; METHOD_4 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_4 ( new TYPE_2 ( ) . METHOD_2 ( VAR_1 ) ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",799
public java.lang.String toString ( ) { return ( ( super . toString ( ) ) + STRING_1 ) + ( this . VAR_1 . METHOD_1 ( ) ) ; },public java.lang.String toString ( ) { java.lang.String result = super . toString ( ) ; return ( result + STRING_1 ) + ( this . VAR_1 . METHOD_1 ( ) ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",800
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; METHOD_2 ( intent ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",802
"public synchronized TYPE_1 METHOD_1 ( java.lang.String url ) { if ( VAR_1 . METHOD_2 ( url ) ) { return VAR_2 . get ( url ) ; } TYPE_1 result = new TYPE_1 ( url ) ; VAR_2 . put ( url , result ) ; return result ; }",public TYPE_1 METHOD_1 ( java.lang.String url ) { return new TYPE_1 ( url ) ; },"['Move ConstructorCall', 'Delete Wra', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",803
"public void METHOD_1 ( TYPE_1 < java.util.List < TYPE_2 > > VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_3 class , TYPE_5 . METHOD_4 ( ) , VAR_4 ) ; VAR_2 . METHOD_1 ( ) . METHOD_5 ( VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 < java.util.List < TYPE_2 > > VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_3 ( VAR_3 class , TYPE_5 . METHOD_4 ( ) , VAR_4 ) ; VAR_2 . METHOD_1 ( ) . METHOD_5 ( VAR_1 ) ; }","['Move TypeAccess', 'Delete Invocation']",804
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; assertEquals ( INT_1 , VAR_1 . METHOD_3 ( ) . length ) ; TYPE_2 . METHOD_4 ( STRING_1 , STRING_2 ) . list ( ) ; }","public void METHOD_1 ( ) { TYPE_2 . METHOD_4 ( STRING_1 , STRING_2 ) . list ( ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete Invocation']",806
"public void METHOD_1 ( TYPE_1 type , int index ) { TYPE_2 msg = new TYPE_2 ( ) ; VAR_1 = 0 ; VAR_2 . obj = new TYPE_3 ( type , index ) ; VAR_3 . METHOD_2 ( msg ) ; }","public boolean METHOD_1 ( TYPE_1 type , int index ) { return false ; }","['Update TypeReference', 'Insert Return', 'Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete Literal', 'Delete Assignment', 'Delete FieldWrite', 'Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Assignment', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",807
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 error = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( new TYPE_4 ( error ) ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete Invocation']",808
protected java.lang.Boolean METHOD_1 ( java.lang.Void ... params ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_3 . METHOD_4 ( VAR_3 ) ; return null ; },protected java.lang.Boolean METHOD_1 ( java.lang.Void ... params ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_3 . METHOD_4 ( VAR_3 ) ; return null ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",809
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_3 ( VAR_3 ) ; VAR_2 . METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { new TYPE_3 ( VAR_3 ) . METHOD_2 ( true ) ; },"['Insert Invocation', 'Move ConstructorCall', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",810
public void METHOD_1 ( TYPE_1 a ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( a ) ) ; },public void METHOD_1 ( TYPE_1 a ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",811
private boolean METHOD_1 ( TYPE_1 listener ) { METHOD_2 ( ) ; boolean VAR_1 = VAR_2 . remove ( listener ) ; if ( VAR_1 ) return ( VAR_3 . METHOD_3 ( ) ) == 0 ; return false ; },private boolean METHOD_1 ( TYPE_1 listener ) { METHOD_2 ( ) ; return VAR_2 . remove ( listener ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",812
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; return view ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",813
"public java.lang.String METHOD_1 ( int id , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( id ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_2 ) ; return STRING_2 ; }","public java.lang.String METHOD_1 ( int id , TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( VAR_3 . METHOD_2 ( id ) ) ; return STRING_2 ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead']",814
"public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String fileName = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; return VAR_2 . format ( VAR_3 , VAR_4 . getId ( ) , fileName ) ; }","public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . format ( VAR_3 , VAR_4 . getId ( ) , VAR_1 . METHOD_3 ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",815
public static void main ( java.lang.String [ ] args ) { TYPE_1 content = new TYPE_2 ( STRING_1 ) ; TYPE_3 VAR_1 = content . METHOD_1 ( VAR_2 class ) ; java.lang.System.out.println ( VAR_1 . METHOD_2 ( ) . get ( STRING_2 ) ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",818
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",819
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.System.out.println ( STRING_1 ) ; java.util.ArrayList < java.lang.String > VAR_3 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_4 . put ( VAR_1 , VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.System.out.println ( STRING_1 ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",821
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; android.widget.LinearLayout VAR_3 = ( ( android.widget.LinearLayout ) ( VAR_1 . METHOD_3 ( VAR_4 , null ) ) ) ; METHOD_4 ( VAR_3 ) ; }",private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",825
protected boolean METHOD_1 ( java.lang.String token ) { boolean result = ( ( ! ( METHOD_2 ( token ) ) ) && ( ! ( VAR_1 ) ) ) && ( ! ( VAR_2 . equals ( STRING_1 ) ) ) ; return result ; },protected boolean METHOD_1 ( java.lang.String token ) { boolean result = ( ! ( METHOD_2 ( token ) ) ) && ( ! ( VAR_1 ) ) ; return result ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",826
public synchronized TYPE_1 METHOD_1 ( ) { TYPE_2 < java.lang.Boolean > VAR_1 = VAR_2 ; if ( ( VAR_1 . METHOD_2 ( ) ) && ( VAR_3 . value ( ) ) ) { return node ; } else return null ; },public TYPE_1 METHOD_1 ( ) { return node ; },"['Move Return', 'Delete Wra', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",828
"private void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_1 , this , this ) ; }","private void METHOD_1 ( ) { java.lang.String url = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( url , this , this ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",829
public boolean METHOD_1 ( TYPE_1 event ) { java.lang.String value = event . METHOD_2 ( ) ; return ( ( value == null ) || ( VAR_1 . trim ( ) . equals ( STRING_1 ) ) ) || ( METHOD_3 ( value ) ) ; },public boolean METHOD_1 ( TYPE_1 event ) { return METHOD_3 ( event . METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",830
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 p = new TYPE_2 ( VAR_1 ) ; return VAR_2 . contains ( p ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . contains ( VAR_1 ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",831
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_2 . start ( ) ; VAR_3 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { VAR_3 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",833
"public static TYPE_1 METHOD_1 ( ) { java.lang.String name = VAR_1 . get ( STRING_1 , VAR_2 ) ; if ( VAR_3 . METHOD_2 ( ) . contains ( name ) ) return TYPE_2 . METHOD_3 ( name ) ; else return TYPE_2 . METHOD_3 ( VAR_2 ) ; }",public static TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_3 ( VAR_2 ) ; },"['Move Return', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",834
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . assertEquals ( 0 , VAR_2 . METHOD_3 ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; int start = VAR_1 . METHOD_3 ( ) ; VAR_3 . assertEquals ( 0 , start ) ; }","['Update LocalVariable', 'Update TypeReference', 'Update Invocation', 'Insert VariableRead', 'Delete VariableRead', 'Delete Invocation']",835
public boolean METHOD_1 ( java.lang.Object event ) { boolean VAR_1 = ( event != null ) && ( ( VAR_2 class ) == ( VAR_3 . getClass ( ) ) ) ; return VAR_1 ; },public boolean METHOD_1 ( java.lang.Object event ) { return ( event != null ) && ( ( VAR_2 class ) == ( VAR_3 . getClass ( ) ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",836
public void METHOD_1 ( java.lang.String error ) { java.util.LinkedList < TYPE_1 > list = VAR_1 . METHOD_2 ( ) ; listener . METHOD_3 ( list ) ; },public void METHOD_1 ( java.lang.String error ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",838
"public TYPE_1 METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , int position ) { TYPE_1 VAR_2 = VAR_3 . get ( position ) ; return VAR_2 ; }",public TYPE_1 METHOD_1 ( int position ) { return VAR_3 . get ( position ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",839
"private void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; android.content.Intent i = new android.content.Intent ( this , VAR_3 class ) ; i . METHOD_3 ( STRING_1 , VAR_1 ) ; METHOD_4 ( i ) ; }",private void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",840
"public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . getText ( ) , VAR_3 . getText ( ) , VAR_4 . getText ( ) ) ; return METHOD_2 ( VAR_1 ) ; }",public boolean METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",842
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , true ) ; VAR_1 . METHOD_1 ( INT_1 ) ; java.lang.System.out.println ( VAR_1 ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",843
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; },public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",844
public int METHOD_1 ( int size ) { TYPE_1 VAR_1 = METHOD_2 ( size ) ; if ( VAR_1 != null ) { return VAR_1 . METHOD_3 ( ) ; } return - 1 ; },public int METHOD_1 ( int size ) { int handle = - 1 ; TYPE_1 VAR_1 = METHOD_2 ( size ) ; if ( handle != ( - 1 ) ) { } return handle ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move UnaryOperator', 'Insert VariableRead', 'Update VariableRead', 'Insert UnaryOperator', 'Insert Literal', 'Delete Literal', 'Delete VariableRead', 'Delete Invocation', 'Delete Return']",846
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( 0 ) ; boolean VAR_3 = VAR_4 . METHOD_4 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( 0 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",848
public long METHOD_1 ( long VAR_1 ) { long offset = VAR_2 . METHOD_2 ( VAR_1 ) ; long time = VAR_1 + offset ; return ( field . METHOD_3 ( time ) ) - offset ; },public long METHOD_1 ( long VAR_1 ) { long time = VAR_1 + ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; return field . METHOD_3 ( time ) ; },"['Update LocalVariable', 'Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator']",849
public TYPE_1 format ( ) { java.lang.String value = this . VAR_1 . getString ( VAR_2 ) ; return value != null ? TYPE_1 . METHOD_1 ( value ) : VAR_3 ; },public TYPE_1 format ( ) { TYPE_1 value = TYPE_1 . METHOD_1 ( this . VAR_1 . getString ( VAR_2 ) ) ; return value != null ? value : VAR_3 ; },"['Update TypeReference', 'Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",850
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; android.view.View view = METHOD_3 ( ) ; if ( view != null ) { VAR_1 . METHOD_4 ( view . METHOD_5 ( ) , 0 ) ; } }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_4 ( METHOD_3 ( ) . METHOD_5 ( ) , 0 ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",851
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 , STRING_1 ) ; return TYPE_1 . METHOD_3 ( VAR_2 ) ; }",public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",852
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_3 . start ( ) ; TYPE_2 VAR_4 = TYPE_2 . METHOD_2 ( ) ; VAR_5 . METHOD_3 ( VAR_6 , VAR_4 . METHOD_4 ( ) ) ; }",public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_3 . start ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",853
"public TYPE_1 METHOD_1 ( TYPE_2 start , TYPE_2 target ) { java.util.Map < TYPE_2 , TYPE_3 > VAR_1 = METHOD_1 ( start ) ; return METHOD_2 ( target , VAR_1 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 start , TYPE_2 target ) { java.util.Map < TYPE_2 , TYPE_3 > VAR_1 = METHOD_1 ( start ) ; return METHOD_2 ( start , VAR_1 ) ; }",['Update VariableRead'],854
"public static java.lang.String METHOD_1 ( java.util.Date date , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; return VAR_4 . format ( date ) ; }","public static java.lang.String METHOD_1 ( java.util.Date date , java.lang.String VAR_1 ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 ) ; return VAR_4 . format ( date ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",855
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 . getId ( ) ) ; VAR_2 . METHOD_3 ( VAR_4 . getName ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_3 ( VAR_4 . getName ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; },"['Insert ConstructorCall', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",861
"public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = getActivity ( ) ; if ( VAR_1 instanceof TYPE_2 ) { TYPE_3 . METHOD_2 ( VAR_1 , new TYPE_4 ( ) , false ) ; } else { getActivity ( ) . METHOD_3 ( ) ; } return true ; }",public boolean METHOD_1 ( ) { getActivity ( ) . METHOD_3 ( ) ; return true ; },"['Move Invocation', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",862
"public void METHOD_1 ( android.view.View view , int position ) { java.lang.String text = STRING_1 + position ; TYPE_1 . METHOD_2 ( this , text ) ; }","public void METHOD_1 ( android.view.View view , int position ) { }","['Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation']",863
"public void METHOD_1 ( int VAR_1 , TYPE_1 [ ] VAR_2 , java.lang.Throwable VAR_3 , TYPE_2 VAR_4 ) { int VAR_5 = METHOD_2 ( VAR_4 ) ; TYPE_3 . METHOD_3 ( STRING_1 , STRING_2 ) ; VAR_6 . METHOD_4 ( VAR_5 ) ; }","public void METHOD_1 ( int VAR_1 , TYPE_1 [ ] VAR_2 , java.lang.Throwable VAR_3 , TYPE_2 VAR_4 ) { METHOD_2 ( VAR_4 ) ; VAR_6 . METHOD_4 ( false ) ; }","['Move Invocation', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",865
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . getString ( VAR_1 , VAR_4 ) ; if ( VAR_5 . equals ( STRING_1 ) ) { return STRING_2 ; } return STRING_3 ; }",public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return STRING_3 ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",866
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { android.content.Intent i = new android.content.Intent ( VAR_3 ) ; METHOD_2 ( i ) ; VAR_1 . METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . METHOD_3 ( ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",867
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = getActivity ( ) ; if ( VAR_1 == null ) { return ; } VAR_2 . setText ( java.lang.String.format ( VAR_3 . getString ( VAR_4 ) , TYPE_2 . METHOD_2 ( VAR_1 , METHOD_3 ( ) ) ) ) ; }","private void METHOD_1 ( ) { VAR_2 . setText ( java.lang.String.format ( getActivity ( ) . getString ( VAR_4 ) , TYPE_2 . METHOD_2 ( getActivity ( ) , METHOD_3 ( ) ) ) ) ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete VariableRead']",869
private static TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 class . METHOD_2 ( ) . METHOD_3 ( ) ; return ( VAR_1 != null ) && ( VAR_3 . startsWith ( STRING_1 ) ) ? VAR_4 : VAR_5 ; },private static TYPE_1 METHOD_1 ( ) { return VAR_2 class . METHOD_2 ( ) . METHOD_3 ( ) . startsWith ( STRING_1 ) ? VAR_4 : VAR_5 ; },"['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",871
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; java.lang.System.out.println ( VAR_1 ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",872
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; TYPE_2 VAR_3 = VAR_4 new TYPE_1 ( c ) ; VAR_3 . METHOD_4 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete VariableRead', 'Delete Invocation']",876
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { java.lang.String [ ] message = TYPE_2 . METHOD_2 ( ( ( ( VAR_1 . METHOD_3 ( ) ) + STRING_1 ) + VAR_2 ) ) ; TYPE_3 . METHOD_4 ( message ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { java.lang.String message = ( ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) + STRING_1 ) + VAR_2 ; TYPE_3 . METHOD_4 ( message ) ; }","['Move BinaryOperator', 'Move Invocation', 'Move Invocation']",877
"public TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getContext ( ) . METHOD_2 ( ) . getName ( ) ; return new TYPE_1 ( STRING_1 , STRING_2 , VAR_3 . METHOD_3 ( VAR_1 ) ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( STRING_1 , STRING_2 , VAR_3 . METHOD_3 ( VAR_1 ) ) ; }","['Insert Parameter', 'Move TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",878
private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( false ) ; VAR_3 . info ( VAR_2 ) ; VAR_4 . info ( VAR_2 ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . info ( VAR_1 . METHOD_2 ( false ) ) ; VAR_4 . info ( VAR_1 . METHOD_2 ( false ) ) ; },"['Insert Invocation', 'Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Move TypeAccess', 'Insert Invocation', 'Insert VariableRead', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",879
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; java.lang.String VAR_3 = STRING_1 ; java.lang.String VAR_4 = STRING_2 ; TYPE_2 . METHOD_3 ( METHOD_4 ( ) , VAR_3 , VAR_4 ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",880
public void METHOD_1 ( double VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; double value = java.lang.Double . METHOD_2 ( VAR_3 . format ( VAR_1 ) ) ; VAR_4 . METHOD_1 ( value ) ; },public void METHOD_1 ( double VAR_1 ) { VAR_4 . METHOD_1 ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",882
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.String t = STRING_1 ; VAR_2 . assertEquals ( STRING_1 , t ) ; }","public void METHOD_1 ( ) { java.lang.String t = STRING_1 ; VAR_2 . assertEquals ( STRING_1 , t ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",883
"public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_3 ; int VAR_4 = TYPE_2 . METHOD_2 ( null , STRING_1 , STRING_2 , VAR_2 ) ; if ( VAR_4 == ( VAR_5 ) ) { METHOD_3 ( ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",884
"private static int sum ( int a , int b ) { int result = a + b ; return result ; }","private static int sum ( int a , int b ) { return a + b ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",885
"public void METHOD_1 ( ) { TYPE_1 buffer = METHOD_2 ( INT_1 ) ; METHOD_3 ( buffer . METHOD_4 ( 0 , 1 ) ) ; VAR_1 . assertTrue ( buffer . METHOD_5 ( ) ) ; }","public void METHOD_1 ( ) { METHOD_3 ( METHOD_2 ( INT_1 ) . METHOD_4 ( 0 , 1 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",886
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_5 , VAR_1 ) ; VAR_5 . METHOD_3 ( VAR_1 ) ; }","public void METHOD_1 ( ) { VAR_5 . METHOD_3 ( new TYPE_1 ( VAR_2 , VAR_3 ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",887
"private void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 ( INT_1 , false ) ) ; TYPE_2 VAR_1 = new TYPE_3 ( this , VAR_2 , VAR_3 ) . METHOD_3 ( ) ; }","private void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 ( INT_1 , false ) ) ; new TYPE_3 ( this , VAR_2 , VAR_3 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable']",889
"public TYPE_1 build ( java.lang.String name , java.util.Date VAR_1 , java.lang.String message ) { java.lang.String VAR_2 = METHOD_1 ( message , name ) ; java.lang.String VAR_3 = METHOD_2 ( message ) ; return new TYPE_1 ( name , null , VAR_2 , VAR_1 , VAR_3 ) ; }","public TYPE_1 build ( java.lang.String name , java.util.Date VAR_1 , java.lang.String message ) { java.lang.String VAR_2 = METHOD_1 ( message ) ; java.lang.String VAR_3 = METHOD_2 ( message ) ; return new TYPE_1 ( name , null , VAR_2 , VAR_1 , VAR_3 ) ; }",['Delete VariableRead'],890
"void METHOD_1 ( java.lang.String url ) { TYPE_1 VAR_1 = new TYPE_1 ( url ) ; assertEquals ( VAR_2 . list ( url ) , VAR_3 . METHOD_2 ( VAR_1 ) ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; }",void METHOD_1 ( java.lang.String url ) { VAR_3 . METHOD_3 ( new TYPE_1 ( url ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",891
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = buffer . METHOD_2 ( ) ; VAR_2 . position ( 0 ) ; VAR_1 . METHOD_3 ( VAR_3 . position ( ) ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_4 . METHOD_4 ( buffer ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",892
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int id = VAR_1 . METHOD_2 ( ) . getId ( ) ; TYPE_3 VAR_2 = VAR_3 . METHOD_1 ( id ) ; return VAR_4 . METHOD_3 ( VAR_2 , VAR_5 class ) ; }","public TYPE_1 METHOD_1 ( int id ) { TYPE_3 VAR_2 = VAR_3 . METHOD_1 ( id ) ; return VAR_4 . METHOD_3 ( VAR_2 , VAR_5 class ) ; }","['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",893
public boolean equals ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( VAR_3 . equals ( VAR_4 ) ) && ( ( VAR_5 ) == ( VAR_6 ) ) ; },public boolean equals ( TYPE_1 VAR_2 ) { return ( VAR_3 . equals ( VAR_4 ) ) && ( ( VAR_5 ) == ( VAR_6 ) ) ; },"['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable']",894
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 c = super . METHOD_1 ( VAR_1 ) ; if ( c == null ) return null ; return new TYPE_3 ( c , true ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_3 ( super . METHOD_1 ( VAR_1 ) , true ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",900
"public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( 0 , INT_1 ) . METHOD_3 ( ) ; int size = VAR_3 . size ( ) ; VAR_4 . assertEquals ( STRING_1 , INT_1 , size ) ; }","public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( 0 , INT_1 ) ; int size = VAR_3 . size ( ) ; VAR_4 . assertEquals ( STRING_1 , INT_1 , size ) ; }","['Move Invocation', 'Delete Invocation']",901
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( ) ; } },"['Insert FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",902
"public void METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( true ) ; put ( STRING_1 , name ) ; put ( STRING_2 , VAR_1 ) ; }","public void METHOD_1 ( java.lang.String name ) { put ( STRING_1 , name ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",903
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_1 > list = VAR_2 . METHOD_2 ( VAR_1 ) ; java.util.Collections.sort ( list ) ; return list ; },public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",904
"public void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( ) ; METHOD_2 ( VAR_1 , intent ) ; super . METHOD_1 ( ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",906
"public static void init ( java.io.File file ) { java.lang.String path = file . METHOD_1 ( ) . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_1 . c = new TYPE_1 ( new java.io.File ( path ) ) ; TYPE_2 . METHOD_3 ( ) ; }",public static void init ( java.io.File file ) { VAR_1 . c = new TYPE_1 ( file ) ; TYPE_2 . METHOD_3 ( ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall']",907
"public boolean METHOD_1 ( android.content.Intent intent ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_3 ( STRING_2 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_4 = false ; return true ; }","public boolean METHOD_1 ( android.content.Intent intent ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_4 = false ; return true ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",912
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( this ) ; return VAR_1 . METHOD_2 ( ) ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( context ) ; return VAR_1 . METHOD_2 ( ) ; },"['Update ConstructorCall', 'Insert FieldRead', 'Delete ThisAccess']",913
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 = VAR_1 ; return VAR_2 ; },public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete VariableRead', 'Delete Assignment', 'Delete VariableRead']",914
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { this . VAR_3 . delete ( VAR_4 , VAR_5 , VAR_6 ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_7 class ) ; METHOD_2 ( intent ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { this . VAR_3 . delete ( VAR_4 , VAR_5 , VAR_6 ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",916
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.util.List < TYPE_2 > VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 = VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_5 . assertEquals ( VAR_3 , VAR_4 ) ; }","public void METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 = TYPE_1 . METHOD_3 ( VAR_2 ) ; VAR_5 . assertEquals ( VAR_3 , VAR_4 ) ; }","['Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",918
public TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( name ) . build ( ) ; return METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( name ) . build ( ) ; TYPE_1 index = METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; return index ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",921
public void execute ( ) { TYPE_1 VAR_1 = METHOD_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; java.util.List < java.lang.String > VAR_3 = METHOD_3 ( ) ; METHOD_4 ( VAR_3 ) ; },public void execute ( ) { java.util.List < java.lang.String > VAR_3 = METHOD_3 ( ) ; METHOD_4 ( VAR_3 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",922
private TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 . METHOD_2 ( ) ) { java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 == VAR_1 ) return VAR_2 ; } return null ; },private TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 . METHOD_2 ( ) ) { if ( ( VAR_2 . METHOD_3 ( ) ) == VAR_1 ) return VAR_2 ; } return null ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",924
"public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.Map < java.lang.Long , TYPE_1 > VAR_1 = new java.util.HashMap < java.lang.Long , TYPE_1 > ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return new java.util.ArrayList < TYPE_1 > ( VAR_3 . values ( ) ) ; }",public java.util.List < TYPE_1 > METHOD_1 ( ) { return new java.util.ArrayList < TYPE_1 > ( VAR_3 . values ( ) ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",925
public TYPE_1 METHOD_1 ( java.util.List VAR_1 ) { METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_2 = METHOD_3 ( ) ; TYPE_3 VAR_3 = METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_3 ) ; return METHOD_6 ( ) ; },public TYPE_1 METHOD_1 ( java.util.List VAR_1 ) { METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_2 = METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; return METHOD_6 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",926
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; TYPE_2 VAR_2 = METHOD_4 ( ) ; VAR_1 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_2 ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; return VAR_1 ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",927
private void METHOD_1 ( TYPE_1 event ) { TYPE_2 list = new TYPE_2 ( ) ; list . METHOD_2 ( VAR_1 ) ; list . METHOD_2 ( VAR_2 ) ; list . METHOD_2 ( VAR_3 ) ; list . METHOD_2 ( VAR_4 ) ; },private void METHOD_1 ( TYPE_1 event ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",928
"public boolean METHOD_1 ( java.lang.String id ) { java.lang.Long VAR_1 = VAR_2 . METHOD_2 ( id , STRING_1 ) ; if ( 1 == VAR_1 ) { VAR_2 . METHOD_3 ( id , INT_1 ) ; return true ; } return false ; }","public boolean METHOD_1 ( java.lang.String id ) { if ( 1 == ( VAR_2 . METHOD_2 ( id , STRING_1 ) ) ) { VAR_2 . METHOD_3 ( id , ( INT_1 * 1 ) ) ; return true ; } return false ; }","['Move Invocation', 'Insert BinaryOperator', 'Insert FieldRead', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess']",932
public void METHOD_1 ( ) { java.util.ArrayList VAR_1 = new java.util.ArrayList ( VAR_2 ) ; VAR_3 . add ( VAR_1 ) ; },public void METHOD_1 ( ) { VAR_3 . add ( VAR_2 ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",933
"private boolean METHOD_1 ( java.lang.String name , long id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( name ) ; return ( VAR_1 == null ) || ( ( VAR_3 . getId ( ) ) == id ) ; }",private boolean METHOD_1 ( java.lang.String name ) { return ( VAR_2 . METHOD_2 ( name ) ) == null ; },"['Update BinaryOperator', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete BinaryOperator']",934
private void METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( ) ; },private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",937
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( context ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( context ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_1 . METHOD_3 ( ) . METHOD_5 ( ) ; },"['Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Insert Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",938
public static boolean METHOD_1 ( ) { TYPE_1 TYPE_2 = TYPE_1 . METHOD_2 ( ) ; if ( TYPE_2 == null ) return false ; TYPE_3 VAR_1 = TYPE_2 . METHOD_3 ( STRING_1 ) ; if ( VAR_1 == null ) return false ; return true ; },public static boolean METHOD_1 ( ) { TYPE_3 VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; if ( VAR_1 == null ) return false ; return true ; },"['Update LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",939
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_4 ( 1 ) ; VAR_1 . METHOD_5 ( VAR_3 ) ; return VAR_4 . METHOD_6 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_4 . METHOD_6 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",941
"public void METHOD_1 ( boolean VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_4 ) ) ) ; VAR_5 . setEnabled ( true ) ; VAR_6 . METHOD_3 ( ) ; }","public void METHOD_1 ( boolean VAR_1 , java.lang.String VAR_2 ) { VAR_6 . METHOD_3 ( ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",943
"private java.lang.String METHOD_1 ( int index , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . get ( ( index - 1 ) ) ; return VAR_2 . METHOD_3 ( ) ; }","private java.lang.String METHOD_1 ( int index , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . get ( ( index - 1 ) ) ; java.lang.String text = VAR_2 . METHOD_3 ( ) ; return text ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",944
public TYPE_1 [ ] METHOD_1 ( ) throws TYPE_2 { java.util.Collection < TYPE_1 > VAR_1 = VAR_2 . values ( ) ; return VAR_1 . METHOD_2 ( new TYPE_1 [ VAR_3 . size ( ) ] ) ; },public TYPE_1 [ ] METHOD_1 ( ) throws TYPE_2 { return VAR_2 . values ( ) . METHOD_2 ( new TYPE_1 [ 0 ] ) ; },"['Move Invocation', 'Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",946
"public java.lang.Long METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException , java.lang.ClassNotFoundException { long VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; return VAR_2 ; }","public java.lang.Long METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException , java.lang.ClassNotFoundException { return VAR_1 . METHOD_2 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",948
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( this . VAR_2 ) ; return new TYPE_3 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_3 ( ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",949
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_2 . info ( STRING_2 ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( STRING_1 ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",950
public synchronized java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > tmp = new java.util.ArrayList ( VAR_1 ) ; VAR_1 . METHOD_2 ( ) ; return tmp ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > tmp = VAR_1 ; VAR_1 . METHOD_2 ( ) ; return tmp ; },"['Move FieldRead', 'Delete Wra', 'Delete ConstructorCall']",951
protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_3 . METHOD_2 ( VAR_4 ) ) ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_6 . METHOD_4 ( VAR_3 . METHOD_2 ( VAR_7 ) ) ; },protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_6 . METHOD_4 ( VAR_3 . METHOD_2 ( VAR_7 ) ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",953
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Collection < TYPE_3 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 . isEmpty ( ) ) { return null ; } return new TYPE_4 ( VAR_4 . iterator ( ) . METHOD_3 ( ) ) ; },private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; },"['Move Return', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Return']",954
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_3 params = new TYPE_3 ( VAR_2 , VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_4 , 1 , params ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete Literal', 'Delete VariableRead']",955
private int METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { int n = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; return n ; } return 0 ; },private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } },"['Update TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return', 'Delete Literal', 'Delete Return']",956
"public int METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; return VAR_3 ; }",public int METHOD_1 ( TYPE_1 VAR_1 ) { return 0 ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead']",957
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; },public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable']",958
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( this ) ; TYPE_3 VAR_3 = new TYPE_3 ( this ) ; TYPE_4 VAR_4 = new TYPE_4 ( this ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable']",959
"public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( INT_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_3 ( STRING_1 ) ; VAR_3 . METHOD_4 ( STRING_2 , VAR_1 ) ; return VAR_3 ; }",public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return new TYPE_1 ( STRING_1 ) ; },"['Insert ConstructorCall', 'Insert FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",960
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = java.lang.String.format ( STRING_1 , VAR_1 , METHOD_2 ( ) , METHOD_3 ( ) , METHOD_4 ( ) , METHOD_5 ( ) ) ; return VAR_2 + ( METHOD_6 ( VAR_1 ) ) ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return java.lang.String.format ( STRING_1 , VAR_1 , METHOD_2 ( ) , METHOD_3 ( ) , METHOD_4 ( ) , METHOD_5 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",963
public void handle ( TYPE_1 a ) { java.lang.String name = TYPE_2 . METHOD_1 ( ) ; if ( ! ( VAR_1 . isEmpty ( ) ) ) { METHOD_2 ( name ) ; } },public void handle ( TYPE_1 a ) { METHOD_2 ( TYPE_2 . METHOD_1 ( ) ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",965
"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; VAR_1 . METHOD_3 ( STRING_1 , false ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; }","public void METHOD_1 ( android.view.View view ) { METHOD_4 ( new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) , VAR_3 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",967
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable']",968
"public void METHOD_1 ( ) throws java.io.IOException , java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 . assertNotNull ( VAR_1 ) ; }","public void METHOD_1 ( ) throws java.io.IOException , java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 . assertNotNull ( VAR_1 ) ; }","['Move TypeAccess', 'Delete Invocation']",969
public void METHOD_1 ( boolean VAR_1 ) { this . VAR_1 = VAR_1 ; double VAR_2 = ( VAR_3 ) - ( VAR_4 ) ; },public void METHOD_1 ( boolean VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable']",970
"public java.lang.Long METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 < java.lang.Integer , java.lang.Integer > VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( VAR_3 . getValue ( ) ) ; return - 1L ; }",public java.lang.Long METHOD_1 ( TYPE_1 VAR_1 ) { return - 1L ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",973
"public final void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_2 VAR_2 = METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_3 , VAR_1 ) ; }","public final void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_3 , VAR_1 ) ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",975
"public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( TYPE_4 VAR_1 ) throws java.io.IOException , TYPE_5 { TYPE_6 file = METHOD_2 ( VAR_1 , STRING_1 ) . METHOD_3 ( ) ; return new TYPE_7 < TYPE_3 > ( VAR_1 , file ) ; }","public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( TYPE_4 VAR_1 ) throws java.io.IOException , TYPE_5 { TYPE_6 file = METHOD_2 ( VAR_1 , STRING_1 ) ; return new TYPE_7 < TYPE_3 > ( VAR_1 , file ) ; }","['Move Invocation', 'Delete Invocation']",976
"public final void METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( null , STRING_1 ) ; java.lang.String VAR_2 = java.lang.String.format ( STRING_2 , VAR_1 ) ; VAR_3 . setText ( ( STRING_3 + VAR_2 ) ) ; }","public final void METHOD_1 ( ) { java.lang.String VAR_2 = java.lang.String.format ( STRING_2 , TYPE_1 . METHOD_2 ( null , STRING_1 ) ) ; VAR_3 . setText ( ( STRING_3 + VAR_2 ) ) ; }","['Update LocalVariable', 'Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable']",977
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { int i = METHOD_2 ( VAR_1 , false ) ; if ( i >= 0 ) METHOD_3 ( this , i , i ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { int i = METHOD_2 ( VAR_1 ) ; if ( i >= 0 ) METHOD_3 ( this , i , i ) ; }",['Delete Literal'],978
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . replace ( CHAR_1 , CHAR_2 ) ; return new TYPE_1 ( VAR_2 ) ; }",public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; return new TYPE_1 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",979
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.Integer VAR_2 ) { java.lang.String VAR_3 = ( ( ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) + ( VAR_5 ) ) + STRING_3 ) + ( VAR_6 . toString ( ) ) ; return null ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.Integer VAR_2 ) { return null ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete LocalVariable']",980
"public void METHOD_1 ( TYPE_1 < TYPE_2 , ? > VAR_1 , TYPE_3 < java.lang.Void > VAR_2 ) { TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( ) ; if ( VAR_3 . METHOD_3 ( ) ) VAR_3 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 , ? > VAR_1 , TYPE_3 < java.lang.Void > VAR_2 ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",982
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = VAR_4 . METHOD_1 ( VAR_5 , VAR_6 , VAR_2 , false ) ; VAR_1 = TYPE_4 . METHOD_2 ( VAR_1 , VAR_3 , VAR_2 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = VAR_4 . METHOD_1 ( VAR_5 , VAR_6 , false ) ; VAR_1 = TYPE_4 . METHOD_2 ( VAR_1 , VAR_3 , VAR_2 ) ; return VAR_1 ; }",['Delete VariableRead'],984
"public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = METHOD_2 ( ) ; METHOD_3 ( new TYPE_3 ( new TYPE_1 ( VAR_3 ) , VAR_2 ) ) ; VAR_3 = VAR_2 ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_3 = METHOD_2 ( ) ; METHOD_3 ( new TYPE_3 ( new TYPE_1 ( VAR_3 ) , VAR_3 ) ) ; }","['Move Invocation', 'Move Invocation', 'Insert FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",985
"public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = this . METHOD_2 ( ) ; int VAR_3 = this . METHOD_3 ( ) ; t = VAR_1 ; t . METHOD_4 ( VAR_2 , VAR_3 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { t = VAR_1 ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",986
public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = java.util.Calendar.getInstance ( ) . get ( VAR_3 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( java.util.Calendar.getInstance ( ) . get ( VAR_3 ) ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",988
public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . toString ( ) ; java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( ( STRING_2 + VAR_2 ) ) ; VAR_3 = java.lang.Integer.parseInt ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . toString ( ) ; java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( ( STRING_2 + VAR_2 ) ) ; int VAR_3 = java.lang.Integer.parseInt ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",989
"public static TYPE_1 METHOD_1 ( ) { TYPE_1 out = VAR_1 . get ( ) ; VAR_2 . put ( 0 , 0 ) ; return out ; }",public static TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",990
"public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( ) ; final TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 ) ; VAR_4 . METHOD_3 ( true ) ; } catch ( final java.lang.Exception VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } }",public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( ) ; final TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( true ) ; } catch ( final java.lang.Exception VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } },['Delete FieldRead'],991
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) . METHOD_4 ( ) ; if ( VAR_2 != null ) VAR_2 . METHOD_5 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) . METHOD_4 ( ) . METHOD_5 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",993
"public void METHOD_1 ( android.view.View VAR_1 ) { if ( true ) { android.content.Intent i = new android.content.Intent ( getActivity ( ) , VAR_2 class ) ; METHOD_2 ( i ) ; } }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete Literal', 'Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",994
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_1 result = TYPE_1 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; return result ; },public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead']",995
public void METHOD_1 ( ) { TYPE_1 VAR_1 = getActivity ( ) ; if ( VAR_1 == null ) return ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { VAR_2 . METHOD_4 ( false ) ; } } ) ; },public void METHOD_1 ( ) { getActivity ( ) . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { VAR_2 . METHOD_4 ( false ) ; } } ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",996
public static TYPE_1 METHOD_1 ( java.io.File file ) { TYPE_1 info = new TYPE_1 ( ) ; return info ; },public static TYPE_1 METHOD_1 ( java.io.File file ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",997
"private TYPE_1 METHOD_1 ( int VAR_1 ) { final TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 class , ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 ) ; return VAR_2 ; }",private TYPE_1 METHOD_1 ( int VAR_1 ) { final TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 class ) ; TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 ) ; return VAR_2 ; },"['Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",998
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = METHOD_2 ( ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; VAR_4 . replace ( VAR_5 , VAR_1 , VAR_6 ) ; VAR_4 . commit ( ) ; }",private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",999
"private static void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , STRING_1 ) ; }",private static void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable']",1000
public TYPE_1 METHOD_1 ( java.lang.Object label ) { TYPE_1 VAR_1 = VAR_2 . get ( label ) ; if ( VAR_1 == null ) return VAR_2 . get ( VAR_3 ) ; else return VAR_1 ; },public TYPE_1 METHOD_1 ( java.lang.Object label ) { return VAR_2 . get ( label ) ; },"['Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",1001
public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; TYPE_1 update = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_2 ( ) ; return update ; },public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; return VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1002
"public void METHOD_1 ( ) { int VAR_1 = VAR_2 ; int VAR_3 = TYPE_1 . METHOD_2 ( null , STRING_1 , STRING_2 , VAR_1 ) ; if ( VAR_3 == 0 ) { VAR_4 . METHOD_3 ( ) ; } }",public void METHOD_1 ( ) { VAR_4 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1004
"public void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 , VAR_3 ) ; intent . METHOD_3 ( STRING_2 , VAR_2 ) ; METHOD_4 ( intent ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1005
protected final void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; },protected final void METHOD_1 ( ) { VAR_2 . METHOD_3 ( VAR_3 ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1006
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 , FLOAT_1 ) ) ; VAR_3 . assertThat ( VAR_4 . getName ( ) , TYPE_2 . METHOD_3 ( STRING_2 ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , FLOAT_1 ) ; VAR_3 . assertThat ( VAR_4 . getName ( ) , TYPE_2 . METHOD_3 ( STRING_2 ) ) ; }","['Insert TypeAccess', 'Insert TypeAccess', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall']",1007
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_4 class ) ; }",public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",1008
public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( ) . toString ( ) . trim ( ) ; if ( VAR_4 . equals ( STRING_1 ) ) { VAR_5 . show ( ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_5 . show ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1009
public java.lang.Object METHOD_1 ( ) { java.lang.Object VAR_1 = VAR_2 . METHOD_1 ( ) ; if ( ( ! ( VAR_3 ) ) && ( VAR_1 != null ) ) { METHOD_2 ( VAR_1 ) ; VAR_3 = true ; } return VAR_1 ; },public java.lang.Object METHOD_1 ( ) { return VAR_2 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldWrite', 'Delete Literal', 'Delete Assignment', 'Delete Block', 'Delete If', 'Delete VariableRead']",1011
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( ) ; METHOD_2 ( VAR_3 , VAR_2 ) ; METHOD_3 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",1013
"public void METHOD_1 ( final TYPE_1 VAR_1 , int position ) { TYPE_2 x = TYPE_3 . METHOD_2 ( position ) ; if ( ! ( x . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( x ) ; } }","public void METHOD_1 ( final TYPE_1 VAR_1 , int position ) { VAR_1 . METHOD_4 ( TYPE_3 . METHOD_2 ( position ) ) ; }","['Insert Invocation', 'Move VariableRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1015
private TYPE_1 METHOD_1 ( int VAR_1 ) { int VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = TYPE_3 . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_3 ) ; return VAR_4 ; },private TYPE_1 METHOD_1 ( int VAR_1 ) { java.lang.String VAR_3 = TYPE_3 . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_4 ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; METHOD_5 ( VAR_3 ) ; return VAR_4 ; },"['Move LocalVariable', 'Update LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",1017
"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { java.lang.String VAR_3 = VAR_4 . getText ( ) . toString ( ) ; METHOD_2 ( VAR_3 , VAR_2 ) ; METHOD_3 ( context , VAR_5 , VAR_6 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { METHOD_2 ( VAR_4 . getText ( ) . toString ( ) , VAR_2 ) ; METHOD_3 ( context , VAR_5 , VAR_6 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1018
public int METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object value = getValue ( VAR_1 ) ; if ( value == null ) { return 1 ; } return value . METHOD_1 ( ) ; },public int METHOD_1 ( TYPE_1 VAR_1 ) { return getValue ( VAR_1 ) . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",1019
private TYPE_1 METHOD_1 ( java.util.Date VAR_1 ) { java.util.Calendar VAR_2 = java.util.Calendar.getInstance ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return new TYPE_1 ( VAR_2 ) ; },private TYPE_1 METHOD_1 ( java.util.Date VAR_1 ) { return new TYPE_1 ( java.util.Calendar.getInstance ( ) . METHOD_2 ( VAR_1 ) ) ; },"['Update ConstructorCall', 'Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1022
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; VAR_2 = ( ( TYPE_3 ) ( VAR_3 . METHOD_1 ( ) ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Assignment', 'Delete VariableRead']",1023
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ""\n"" ; java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( STRING_2 , INT_1 ) ; assertEquals ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( STRING_2 , INT_1 ) ; assertEquals ( VAR_1 , VAR_2 ) ; }","['Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1025
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; android.content.Intent intent = getIntent ( ) ; java.lang.String VAR_3 = intent . METHOD_3 ( STRING_1 ) ; METHOD_4 ( VAR_3 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; android.content.Intent intent = getIntent ( ) ; METHOD_4 ( intent . METHOD_3 ( STRING_1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1027
public void METHOD_1 ( int position ) { int VAR_1 = VAR_2 ; if ( VAR_1 != ( VAR_3 ) ) { METHOD_2 ( VAR_1 ) ; } if ( VAR_1 != position ) { VAR_2 = position ; METHOD_3 ( position ) ; } },public void METHOD_1 ( int position ) { if ( ( VAR_2 ) != ( VAR_3 ) ) { METHOD_2 ( VAR_2 ) ; } VAR_2 = position ; METHOD_3 ( position ) ; },"['Move Assignment', 'Move Invocation', 'Move FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1028
"public void open ( java.util.Map VAR_1 , TYPE_1 context , TYPE_2 VAR_2 ) { super . open ( VAR_1 , context , VAR_2 ) ; this . VAR_2 = VAR_2 ; VAR_3 = 0 ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; }","public void open ( java.util.Map VAR_1 , TYPE_1 context , TYPE_2 VAR_2 ) { super . open ( VAR_1 , context , VAR_2 ) ; this . VAR_2 = VAR_2 ; VAR_3 = 0 ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",1029
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; android.content.Intent intent = getIntent ( ) ; long VAR_3 = java.util.Calendar.getInstance ( ) . METHOD_3 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",1030
"public TYPE_1 METHOD_1 ( ) { TYPE_1 x = new TYPE_1 ( this , VAR_1 , status , name , index ) ; return x ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( this , VAR_1 , context , name , index ) ; }","['Move ConstructorCall', 'Update FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1033
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . getValue ( VAR_4 . String class ) ; if ( VAR_2 != null ) { ( ( TYPE_2 ) ( METHOD_2 ( VAR_5 ) ) ) . setText ( VAR_2 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { ( ( TYPE_2 ) ( METHOD_2 ( VAR_5 ) ) ) . setText ( VAR_3 . getValue ( VAR_4 . String class ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1034
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; return VAR_1 ; },public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1037
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( VAR_2 != null ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; } else { return null ; } },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; },"['Insert Return', 'Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1038
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View VAR_3 = TYPE_3 . METHOD_2 ( VAR_4 . getContext ( ) ) . METHOD_3 ( VAR_5 , VAR_1 , false ) ; return new TYPE_1 ( VAR_3 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { return null ; }","['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall']",1039
"public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { TYPE_3 VAR_3 = new TYPE_3 ( ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",1040
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > errors = METHOD_2 ( ) ; return VAR_2 . contains ( VAR_3 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( ) . contains ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",1041
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) . METHOD_5 ( METHOD_6 ( ) ) . build ( ) ; VAR_1 . METHOD_7 ( VAR_2 ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) . build ( ) ; VAR_1 . METHOD_7 ( VAR_2 ) ; return VAR_1 ; },"['Update Invocation', 'Move Invocation', 'Delete Invocation', 'Delete Invocation']",1042
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( METHOD_3 ( ) ) ; if ( VAR_1 instanceof TYPE_2 ) value = ! ( ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_2 . equals ( STRING_1 ) ) ; },public void METHOD_1 ( ) { value = ! ( ( ( TYPE_2 ) ( METHOD_2 ( METHOD_3 ( ) ) ) ) . VAR_2 . equals ( STRING_1 ) ) ; },"['Move Assignment', 'Move Invocation', 'Move TypeReference', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1043
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { android.content.Intent intent = new android.content.Intent ( this , METHOD_3 ( ) ) ; METHOD_4 ( intent ) ; } }",protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1044
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 t = new TYPE_2 ( ) ; c . METHOD_2 ( t ) ; c . METHOD_3 ( t . METHOD_4 ( ) ) ; c . METHOD_5 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { c . METHOD_2 ( new TYPE_2 ( ) ) ; c . METHOD_3 ( ) ; c . METHOD_5 ( ) ; },"['Move Invocation', 'Update Invocation', 'Update Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1045
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , INT_2 , 0 , 1 , INT_3 ) ; java.lang.String VAR_2 = VAR_1 . METHOD_1 ( ) ; java.lang.System.out.println ( VAR_2 ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete Literal', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",1046
public static boolean METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = VAR_3 . split ( STRING_1 ) ; if ( ( VAR_4 . length ) != INT_1 ) { TYPE_1 . METHOD_2 ( STRING_2 ) ; return false ; } else { return true ; } },public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_3 . length ( ) ) != INT_1 ) { java.lang.System.out.println ( STRING_2 ) ; } return STRING_1 ; },"['Update TypeReference', 'Insert Return', 'Insert FieldRead', 'Update Invocation', 'Move Invocation', 'Update Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Return', 'Delete Literal', 'Delete Return', 'Delete Block']",1047
"public void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.ClassNotFoundException , TYPE_1 , TYPE_2 , TYPE_3 { TYPE_4 VAR_2 = VAR_3 ; if ( VAR_2 == null ) { METHOD_2 ( ) ; } else { METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.ClassNotFoundException , TYPE_1 , TYPE_2 , TYPE_3 { METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1048
"public java.lang.String index ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_1 ( STRING_1 ) ; this . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_2 , VAR_3 ) ; return STRING_1 ; }","public java.lang.String index ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { this . METHOD_2 ( VAR_1 ) ; return STRING_1 ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1050
"public void METHOD_1 ( ) { boolean VAR_1 = true ; boolean VAR_2 = false ; if ( ( VAR_3 ) != null ) { METHOD_2 ( VAR_3 , VAR_2 ) ; } else { super . METHOD_1 ( ) ; } }","public void METHOD_1 ( ) { boolean VAR_1 = true ; if ( ( VAR_3 ) != null ) { METHOD_2 ( VAR_3 , ( ! VAR_1 ) ) ; } else { super . METHOD_1 ( ) ; } }","['Insert UnaryOperator', 'Insert VariableRead', 'Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete VariableRead']",1051
public static TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . getContext ( ) . METHOD_2 ( ) ; if ( ! ( VAR_1 instanceof TYPE_3 ) ) { return ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( ) ) ) ; } return null ; },public static TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( VAR_2 . getContext ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; },"['Insert Invocation', 'Move TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",1052
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + 1 ) ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; return VAR_3 . METHOD_1 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1053
"public static void METHOD_1 ( double p , double VAR_1 ) { double VAR_2 = p * VAR_1 ; java.lang.System.out.println ( ( STRING_1 + p ) ) ; java.lang.System.out.println ( ( STRING_2 + VAR_2 ) ) ; }","public static void METHOD_1 ( double p , double VAR_1 ) { double VAR_2 = VAR_1 ; java.lang.System.out.println ( ( STRING_1 + p ) ) ; java.lang.System.out.println ( ( STRING_2 + VAR_2 ) ) ; }","['Move VariableRead', 'Delete VariableRead', 'Delete BinaryOperator']",1054
"public int METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; return VAR_3 . value ; }",public int METHOD_1 ( TYPE_1 VAR_1 ) { return 0 ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead']",1059
"private void METHOD_1 ( java.util.HashSet < TYPE_1 > VAR_1 ) { java.util.Set < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( ) ; assertEquals ( VAR_1 , VAR_2 ) ; }","private void METHOD_1 ( java.util.HashSet < TYPE_1 > VAR_2 ) { assertEquals ( VAR_2 , VAR_3 . METHOD_2 ( ) ) ; }","['Update Parameter', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1062
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) . toString ( ) , VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_5 ( VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_4 ( new TYPE_2 ( VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) . toString ( ) , VAR_1 . METHOD_3 ( ) ) ) ; VAR_3 . METHOD_5 ( VAR_1 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1065
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , VAR_1 ) ; VAR_4 . open ( ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",1066
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( VAR_2 ) ; intent . METHOD_3 ( VAR_3 , VAR_4 ) ; METHOD_4 ( intent , VAR_5 ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1067
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_3 ( intent ) ; METHOD_4 ( VAR_4 , VAR_5 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1068
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 . METHOD_2 ( VAR_2 . build ( ) ) ; VAR_3 = this ; METHOD_3 ( ) ; METHOD_4 ( this ) ; METHOD_5 ( this ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_3 = this ; METHOD_3 ( ) ; METHOD_4 ( this ) ; METHOD_5 ( this ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1069
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Delete FieldWrite', 'Delete Assignment']",1070
"public int METHOD_1 ( int key ) { int VAR_1 = METHOD_1 ( key , VAR_2 ) ; return VAR_1 ; }","public void METHOD_1 ( int key ) { java.lang.System.out.println ( METHOD_1 ( key , VAR_2 ) ) ; }","['Update TypeReference', 'Insert Invocation', 'Insert FieldRead', 'Move Invocation', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",1071
public void handle ( TYPE_1 VAR_1 ) { java.lang.String output = VAR_2 . METHOD_1 ( result ) ; setText ( output ) ; VAR_3 . METHOD_2 ( ) ; },public void handle ( TYPE_1 VAR_1 ) { setText ( result ) ; VAR_3 . METHOD_2 ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1072
public java.lang.String METHOD_1 ( long id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( id ) ; if ( VAR_1 != null ) return VAR_1 . METHOD_3 ( ) ; else return null ; },public java.lang.String METHOD_1 ( long id ) { return VAR_2 . METHOD_2 ( id ) . METHOD_3 ( ) ; },"['Insert Return', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1073
"public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 ) ; TYPE_3 VAR_2 = TYPE_3 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_3 , true ) ; TYPE_1 VAR_4 = new TYPE_4 ( VAR_2 ) ; return VAR_4 ; }","public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 ) ; TYPE_1 VAR_4 = new TYPE_4 ( ) ; return VAR_4 ; }","['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",1074
"public void METHOD_1 ( android.view.View view , int position ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( position ) ; METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; }","public void METHOD_1 ( android.view.View view , int position ) { METHOD_3 ( TYPE_2 . METHOD_2 ( position ) . METHOD_4 ( ) ) ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1076
public void METHOD_1 ( ) { int size = METHOD_2 ( ) ; if ( size == 1 ) { METHOD_3 ( ( size + STRING_1 ) ) ; } else { METHOD_3 ( ( size + STRING_2 ) ) ; } },public abstract void METHOD_1 ( ) ;,"['Insert Wra', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",1078
public static void main ( java.lang.String [ ] args ) { java.util.ArrayList < java.lang.Integer > VAR_1 = TYPE_1 . METHOD_1 ( ) ; java.lang.System.out.println ( ( STRING_1 + ( VAR_2 . get ( ( ( VAR_2 . size ( ) ) - 1 ) ) ) ) ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation']",1079
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.System.out.println ( VAR_1 ) ; java.lang.System.out.println ( new TYPE_2 ( VAR_1 ) ) ; },public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( new TYPE_1 ( ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation']",1080
public static int METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; if ( VAR_2 == null ) { return VAR_3 ; } return VAR_2 . METHOD_1 ( ) ; },public static int METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",1081
public java.lang.Void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( true ) ; return null ; },public java.lang.Void METHOD_1 ( ) throws java.lang.Exception { METHOD_4 ( VAR_2 . METHOD_2 ( ) ) ; VAR_2 . METHOD_5 ( true ) ; return null ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1084
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_3 > VAR_4 = VAR_2 . METHOD_3 ( ) ; return TYPE_1 . METHOD_4 ( VAR_4 ) . build ( ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return TYPE_1 . METHOD_4 ( VAR_4 ) . build ( ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1085
public java.lang.String [ ] METHOD_1 ( ) { java.lang.String [ ] VAR_1 = VAR_2 . METHOD_2 ( ) ; return VAR_1 ; },public java.lang.String [ ] METHOD_1 ( ) { return VAR_2 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1086
"public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 class ) ; TYPE_3 VAR_5 = new TYPE_3 ( VAR_3 , VAR_2 . METHOD_3 ( ) ) ; VAR_5 . METHOD_4 ( null ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_5 = new TYPE_3 ( VAR_3 ) ; VAR_5 . METHOD_4 ( null ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1090
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 VAR_3 = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_3 ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1093
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 . METHOD_2 ( ) . toString ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_3 ( VAR_1 . METHOD_2 ( ) . toString ( ) ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",1094
"public void METHOD_1 ( long VAR_1 , long VAR_2 ) { long VAR_3 = VAR_1 ; long VAR_4 = VAR_2 ; TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable']",1096
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 < java.lang.Double > VAR_3 = ( ( TYPE_2 < java.lang.Double > ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_3 . METHOD_4 ( FLOAT_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1098
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( ( STRING_1 + ( VAR_3 . getText ( ) ) ) ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_2 ( VAR_3 . getText ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( ( STRING_1 + ( VAR_3 . getText ( ) ) ) ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1099
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 ) ; METHOD_6 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_6 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",1100
void METHOD_1 ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; stringBuilder.append ( STRING_1 ) . append ( VAR_2 . toString ( ) ) . append ( STRING_2 ) . append ( VAR_3 ) ; java.lang.System.out.println ( VAR_4 . toString ( ) ) ; },void METHOD_1 ( ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_2 . toString ( ) ) ) ) ; },"['Update Invocation', 'Move Invocation', 'Move FieldRead', 'Insert BinaryOperator', 'Insert FieldRead', 'Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1101
"public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String VAR_2 = VAR_3 ; android.content.Intent intent = new android.content.Intent ( VAR_4 , TYPE_1 . METHOD_2 ( VAR_2 ) ) ; getContext ( ) . METHOD_3 ( intent ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1102
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { java.lang.Integer VAR_2 = VAR_1 . METHOD_2 ( ) ; this . VAR_3 . add ( VAR_2 ) ; return null ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { return null ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",1104
"private void METHOD_1 ( ) { METHOD_2 ( new android.content.Intent ( this , VAR_1 class ) ) ; }","private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; METHOD_2 ( intent ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead']",1107
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1108
public void METHOD_1 ( ) { android.content.Intent intent = TYPE_1 . METHOD_2 ( getActivity ( ) ) ; METHOD_3 ( intent ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1109
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; TYPE_3 TYPE_4 = new TYPE_3 ( VAR_1 ) ; TYPE_5 VAR_2 = new TYPE_5 ( new TYPE_6 ( ) ) ; TYPE_4 . METHOD_2 ( VAR_2 ) ; assertEquals ( ) ; },public void METHOD_1 ( ) throws TYPE_1 { TYPE_3 TYPE_4 = new TYPE_3 ( ) ; TYPE_5 VAR_2 = new TYPE_5 ( new TYPE_6 ( ) ) ; TYPE_4 . METHOD_2 ( VAR_2 ) ; assertEquals ( ) ; },"['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",1110
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 p = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( p ) ; VAR_1 . METHOD_3 ( ) ; },"['Update LocalVariable', 'Update VariableRead', 'Delete VariableRead', 'Delete Invocation']",1112
"public TYPE_1 METHOD_1 ( java.lang.String token ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . get ( token ) . METHOD_3 ( ) ) ; VAR_2 . replace ( token , VAR_1 ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( java.lang.String token ) { return VAR_2 . get ( token ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1114
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean remove = VAR_2 . remove ( VAR_1 ) ; if ( remove ) { VAR_1 . METHOD_2 ( null ) ; } return remove ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . remove ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",1115
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . execute ( VAR_1 . METHOD_3 ( ) ) ; },private void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( new TYPE_1 ( ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",1116
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; if ( ( VAR_2 != null ) && ( VAR_2 . METHOD_4 ( ) ) ) { return ; } METHOD_5 ( STRING_2 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_5 ( STRING_2 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1117
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 , boolean VAR_3 ) { TYPE_1 result = super . METHOD_1 ( VAR_1 , VAR_2 , INT_1 , VAR_3 ) ; METHOD_2 ( ) ; return result ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 , boolean VAR_3 ) { return super . METHOD_1 ( VAR_1 , VAR_2 , 1 , VAR_3 ) ; }","['Move Invocation', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead']",1118
private void METHOD_1 ( ) throws TYPE_1 { boolean fail = false ; if ( ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) || fail ) { throw new TYPE_1 ( VAR_3 ) ; } },private void METHOD_1 ( ) throws TYPE_1 { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) { throw new TYPE_1 ( VAR_3 ) ; } },"['Move UnaryOperator', 'Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator']",1119
"public void METHOD_1 ( ) { java.lang.CharSequence VAR_1 = VAR_2 . METHOD_2 ( java.util.Arrays.asList ( STRING_1 , STRING_2 ) , null ) ; VAR_3 . assertThat ( VAR_4 . toString ( ) ) . METHOD_3 ( ( STRING_3 + STRING_4 ) ) ; }","public void METHOD_1 ( ) { java.lang.CharSequence VAR_1 = VAR_2 . METHOD_2 ( java.util.Arrays.asList ( STRING_1 , STRING_2 ) ) ; assertThat ( VAR_4 . toString ( ) ) . METHOD_3 ( ( STRING_3 + STRING_4 ) ) ; }","['Update TypeAccess', 'Delete Literal']",1120
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_3 ( METHOD_2 ( ) , VAR_1 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 result = new TYPE_3 ( METHOD_2 ( ) , VAR_1 ) ; return result ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead']",1121
public synchronized void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < java.lang.String > ( METHOD_2 ( ) . values ( ) ) ; for ( java.lang.String VAR_2 : VAR_1 ) { METHOD_3 ( VAR_2 ) ; } },public synchronized void METHOD_1 ( ) { for ( java.lang.String VAR_2 : METHOD_2 ( ) . values ( ) ) { METHOD_3 ( VAR_2 ) ; } },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1124
"public int METHOD_1 ( int VAR_1 , int VAR_2 ) { int a = java.lang.Integer . METHOD_2 ( VAR_3 [ VAR_1 ] [ VAR_2 ] . substring ( INT_1 , INT_2 ) ) ; return a ; }","public java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 ) { java.lang.String a = VAR_3 [ VAR_1 ] [ VAR_2 ] . substring ( INT_1 , INT_2 ) ; return a ; }","['Update TypeReference', 'Update TypeReference', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1125
public TYPE_1 METHOD_1 ( java.lang.String name ) { java.util.Set < TYPE_1 > VAR_1 = get ( name ) ; if ( VAR_1 == null ) return null ; return VAR_2 . iterator ( ) . METHOD_2 ( ) ; },public TYPE_1 METHOD_1 ( java.lang.String name ) { return get ( name ) . iterator ( ) . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",1127
public void update ( ) { if ( ( VAR_1 ) == null ) { METHOD_1 ( new java.util.HashSet < > ( ) ) ; return ; } double VAR_2 = VAR_3 . METHOD_2 ( ) ; METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; },public void update ( ) { if ( ( VAR_1 ) == null ) { METHOD_1 ( new java.util.HashSet < > ( ) ) ; return ; } METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1128
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; super . METHOD_1 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1129
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 ) { if ( TYPE_3 . METHOD_1 ( VAR_1 ) ) { VAR_2 = METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_5 . info ( STRING_1 ) ; } return VAR_2 ; }","private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = null ; if ( TYPE_3 . METHOD_1 ( VAR_1 ) ) { VAR_2 = METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_5 . info ( STRING_1 ) ; } return VAR_2 ; }","['Insert LocalVariable', 'Move TypeReference', 'Insert Literal', 'Delete Parameter']",1131
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , 1 , 1 , INT_1 , INT_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_2 , INT_2 , INT_3 ) ; }","public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , 1 , 1 , INT_1 , INT_1 ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable']",1132
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; int a = 1 ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",1134
public TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ; },public TYPE_1 METHOD_1 ( ) { TYPE_1 msg = METHOD_3 ( ) ; return ( ( TYPE_1 ) ( msg . METHOD_2 ( ) ) ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Update Invocation', 'Move Invocation', 'Update Invocation', 'Insert VariableRead']",1136
"public void METHOD_1 ( java.lang.String name , java.lang.String value ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . getContext ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; VAR_3 = name ; VAR_4 = value ; }","public void METHOD_1 ( java.lang.String name , java.lang.String value ) { VAR_3 = name ; VAR_4 = value ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",1137
public double METHOD_1 ( ) { double VAR_1 = VAR_2 . METHOD_1 ( ) ; if ( ( VAR_1 == 0 ) || ( VAR_1 > INT_1 ) ) { return METHOD_1 ( ) ; } else { return VAR_1 ; } },public double METHOD_1 ( ) { return VAR_2 . METHOD_1 ( ) ; },"['Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",1138
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . getName ( ) ) ; VAR_3 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_4 . fail ( ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_4 . fail ( ) ; }","['Delete TypeAccess', 'Delete Invocation']",1139
public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; },public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; },"['Update ConstructorCall', 'Move VariableRead', 'Delete VariableRead', 'Delete Invocation']",1142
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , INT_1 ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; VAR_3 . METHOD_4 ( ) ; }",private void METHOD_1 ( ) { VAR_3 . METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1143
"private boolean METHOD_1 ( TYPE_1 event , int VAR_1 ) { boolean VAR_2 = ( VAR_3 [ VAR_1 ] [ event . METHOD_2 ( ) ] ) >= ( VAR_4 . getTime ( ) ) ; return VAR_2 ; }","private boolean METHOD_1 ( TYPE_1 event , int VAR_1 ) { return ( VAR_3 [ VAR_1 ] [ event . METHOD_2 ( ) ] ) >= ( VAR_4 . getTime ( ) ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1144
"public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( ) { TYPE_4 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) return null ; return new TYPE_5 < TYPE_2 , TYPE_3 > ( METHOD_3 ( ) , METHOD_2 ( ) . METHOD_1 ( ) ) ; }","public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( ) { return new TYPE_5 < TYPE_2 , TYPE_3 > ( METHOD_3 ( ) , METHOD_2 ( ) . METHOD_1 ( ) ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1145
"public boolean METHOD_1 ( java.lang.String name ) { boolean b = METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . METHOD_4 ( ) . METHOD_5 ( ""name"" , name ) . METHOD_6 ( ) . isEmpty ( ) ; return b ; }","public boolean METHOD_1 ( java.lang.String name ) { return METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . METHOD_4 ( ) . METHOD_5 ( ""name"" , name ) . METHOD_6 ( ) . isEmpty ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1147
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 ; if ( VAR_1 == null ) { return VAR_3 ; } return TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_2 ) == null ) { return VAR_3 ; } return TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; },"['Move FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1148
boolean METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 ; return VAR_1 != null ? VAR_1 . METHOD_2 ( ) : VAR_3 ; },boolean METHOD_1 ( ) { return ( VAR_2 ) != null ? VAR_2 . METHOD_2 ( ) : VAR_3 ; },"['Move FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1149
public boolean METHOD_1 ( ) { boolean b = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 . METHOD_3 ( ) ) VAR_2 . METHOD_4 ( ( STRING_1 + b ) ) ; return b ; },public boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",1150
public static boolean METHOD_1 ( TYPE_1 status ) { int type = VAR_1 . getType ( ) ; return ( ( type == ( VAR_2 ) ) || ( type == ( VAR_3 ) ) ) || ( type == ( VAR_4 ) ) ; },public static boolean METHOD_1 ( int type ) { return ( ( type == ( VAR_2 ) ) || ( type == ( VAR_3 ) ) ) || ( type == ( VAR_4 ) ) ; },"['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",1151
public void METHOD_1 ( int i ) { int id = ( ( METHOD_2 ( ) ) + i ) % INT_1 ; if ( id < 0 ) id = INT_2 ; METHOD_3 ( id ) ; },public void METHOD_1 ( int i ) { int id = ( METHOD_2 ( ) ) + i ; if ( id < 0 ) id = INT_2 ; METHOD_3 ( id ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1153
"private java.lang.String METHOD_1 ( java.lang.String path ) { java.lang.String result = VAR_1 . replaceAll ( STRING_1 , STRING_2 ) ; if ( VAR_2 . equals ( STRING_2 ) ) { return result ; } return STRING_3 + result ; }","private java.lang.String METHOD_1 ( java.lang.String path ) { if ( VAR_1 . equals ( STRING_2 ) ) { return path ; } return STRING_3 + ( VAR_1 . replaceAll ( STRING_1 , STRING_2 ) ) ; }","['Update TypeAccess', 'Move Invocation', 'Update VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1154
"public void METHOD_1 ( ) { TYPE_1 x = new TYPE_1 ( ) ; x . METHOD_2 ( STRING_1 ) ; assertEquals ( STRING_1 , VAR_1 . getName ( ) ) ; assertTrue ( true ) ; }",public void METHOD_1 ( ) { assertTrue ( true ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1155
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_3 = VAR_4 . getId ( ) ; java.lang.String VAR_5 = VAR_6 . getName ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",1157
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( VAR_2 class , args ) ; VAR_1 . METHOD_2 ( ) ; }","public static void main ( java.lang.String [ ] args ) { TYPE_2 . METHOD_1 ( VAR_2 class , args ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1158
public void METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; long position = ( VAR_2 . METHOD_3 ( ) ) + VAR_1 ; VAR_2 . METHOD_4 ( position ) ; },public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_4 ( ( ( VAR_2 . METHOD_3 ( ) ) + VAR_1 ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move BinaryOperator', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1159
"public TYPE_1 < TYPE_2 > METHOD_1 ( long VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return new TYPE_1 < TYPE_2 > ( VAR_2 , VAR_4 ) ; }",public TYPE_1 < TYPE_2 > METHOD_1 ( long VAR_1 ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete ConstructorCall']",1161
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_2 ( VAR_2 ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_3 ( VAR_1 , VAR_3 ) ; return VAR_4 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_2 ( VAR_2 ) ; return VAR_5 . METHOD_3 ( VAR_1 , VAR_3 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1162
private void METHOD_1 ( TYPE_1 < TYPE_2 > node ) { int VAR_1 = VAR_2 ; ( VAR_2 ) ++ ; if ( ( VAR_2 ) == ( VAR_3 ) ) { VAR_4 = false ; } },private void METHOD_1 ( TYPE_1 < TYPE_2 > node ) { ( VAR_2 ) ++ ; if ( ( VAR_2 ) == ( VAR_3 ) ) { VAR_4 = false ; } },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",1163
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; this . VAR_2 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; this . VAR_3 . append ( ( ( VAR_4 . getName ( ) ) + STRING_1 ) ) ; },public void METHOD_1 ( ) throws java.io.IOException { this . VAR_2 . METHOD_3 ( TYPE_2 . METHOD_2 ( ) ) ; METHOD_4 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",1164
"public TYPE_1 METHOD_1 ( java.lang.Exception VAR_1 , TYPE_2 VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_2 , STRING_3 ) ; VAR_2 . METHOD_3 ( STRING_4 , VAR_1 ) ; return VAR_3 ; }","public java.lang.String METHOD_1 ( java.lang.Exception VAR_1 , TYPE_2 VAR_2 ) { VAR_2 . METHOD_3 ( STRING_2 , STRING_3 ) ; VAR_2 . METHOD_3 ( STRING_4 , VAR_1 ) ; return STRING_1 ; }","['Update TypeReference', 'Insert FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1165
public void METHOD_1 ( java.lang.String id ) { java.lang.Long VAR_1 = java.lang.Long.parseLong ( VAR_2 . METHOD_2 ( ) ) ; if ( ( VAR_1 > INT_1 ) || ( VAR_1 < ( java.lang.Long.parseLong ( id ) ) ) ) { VAR_2 . METHOD_3 ( id ) ; } },public void METHOD_1 ( java.lang.String id ) { if ( ( java.lang.Long.parseLong ( VAR_2 . METHOD_2 ( ) ) ) < ( java.lang.Long.parseLong ( id ) ) ) { VAR_2 . METHOD_3 ( id ) ; } },"['Move BinaryOperator', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1166
java.util.Set < TYPE_1 > METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = new java.util.HashSet < > ( VAR_2 ) ; if ( VAR_3 . contains ( this ) ) VAR_3 . remove ( this ) ; return VAR_1 ; },java.util.Set < TYPE_1 > METHOD_1 ( ) { return new java.util.HashSet < > ( VAR_2 ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",1168
"public TYPE_1 METHOD_1 ( TYPE_2 p ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getData ( p , VAR_2 ) ) ) ; METHOD_2 ( p , VAR_2 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( TYPE_2 p ) { return ( ( TYPE_1 ) ( getData ( p , VAR_2 ) ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1169
"public TYPE_1 METHOD_1 ( TYPE_2 id , TYPE_3 VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) . METHOD_1 ( id ) ; VAR_3 . METHOD_3 ( ) . info ( VAR_4 . toString ( ) ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( TYPE_2 id , TYPE_3 VAR_1 ) { return METHOD_2 ( VAR_1 ) . METHOD_1 ( id ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",1170
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( METHOD_3 ( ) , VAR_1 ) ; int VAR_3 = METHOD_4 ( VAR_2 ) ; java.lang.String VAR_4 = METHOD_5 ( VAR_3 ) ; return VAR_5 . METHOD_6 ( VAR_4 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( METHOD_3 ( ) , VAR_1 ) ; int VAR_3 = METHOD_4 ( VAR_2 ) ; return VAR_5 . METHOD_6 ( java.lang.Integer.toString ( VAR_3 ) ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1171
private java.util.List < TYPE_1 > METHOD_1 ( ) { VAR_1 = VAR_2 . select ( STRING_1 ) . METHOD_2 ( INT_1 ) . METHOD_3 ( VAR_3 class ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . select ( STRING_1 ) . METHOD_2 ( INT_1 ) . METHOD_3 ( VAR_3 class ) ; return VAR_1 ; },"['Insert LocalVariable', 'Update Wra', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert TypeReference', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",1173
public void METHOD_1 ( int VAR_1 ) { java.lang.String VAR_2 = STRING_1 + ( VAR_1 + 1 ) ; VAR_3 . setText ( VAR_2 ) ; VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ; },public void METHOD_1 ( java.lang.String VAR_2 ) { VAR_3 . setText ( VAR_2 ) ; },"['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1174
"public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object [ ] args = VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; java.lang.Object value = this . VAR_3 . METHOD_3 ( VAR_1 , args ) ; return value ; }","public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object value = this . VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ; VAR_2 = null ; return value ; }","['Move Assignment', 'Move TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1176
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; assertNotNull ( VAR_1 ) ; assertThat ( VAR_1 . METHOD_2 ( ) , TYPE_2 . METHOD_3 ( 0 ) ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Invocation']",1179
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = this . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_3 ( ) ; return VAR_2 . METHOD_4 ( ) ; },public TYPE_1 METHOD_1 ( ) { return this . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1180
public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( ) ; TYPE_2 VAR_1 = new TYPE_3 ( ) ; TYPE_4 . METHOD_2 ( VAR_1 ) ; TYPE_5 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( ) ; TYPE_5 . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1181
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 = TYPE_2 . METHOD_2 ( this , VAR_1 ) ; if ( ( VAR_2 ) < INT_1 ) { java.lang.String VAR_3 = STRING_1 ; } super . METHOD_1 ( VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 = TYPE_2 . METHOD_2 ( this , VAR_1 ) ; super . METHOD_1 ( VAR_1 ) ; }","['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete Block', 'Delete If']",1182
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this ) ; VAR_2 . start ( ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",1183
public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( METHOD_2 ( ) ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } } },public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( METHOD_2 ( ) ) { TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) . METHOD_1 ( VAR_1 ) ; } },"['Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1184
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; return STRING_2 ; },public java.lang.String METHOD_1 ( ) { return STRING_2 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1185
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_1 , VAR_3 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_1 , VAR_3 ) ; }","['Update Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Invocation']",1187
"private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( true ) ; TYPE_5 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_3 ) . METHOD_5 ( VAR_1 , response ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { VAR_1 . METHOD_4 ( VAR_3 ) . METHOD_5 ( VAR_1 , response ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1188
"public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String url = METHOD_2 ( VAR_1 ) ; delete ( url ) ; android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_2 class ) ; METHOD_3 ( intent ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String url = METHOD_2 ( VAR_1 ) ; delete ( url ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1189
"public void METHOD_1 ( java.lang.String VAR_1 , double VAR_2 ) { int number = VAR_3 . METHOD_2 ( ) ; this . VAR_4 . METHOD_3 ( VAR_1 , VAR_2 , number ) ; this . VAR_5 . METHOD_3 ( VAR_1 , VAR_2 , number ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , double VAR_2 ) { this . VAR_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 . METHOD_2 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1191
public void execute ( ) throws TYPE_1 { java.io.File VAR_1 = new java.io.File ( VAR_2 ) ; if ( VAR_1 . METHOD_1 ( ) ) { METHOD_2 ( VAR_2 ) ; } },public void execute ( ) throws TYPE_1 { METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1193
public boolean METHOD_1 ( ) { java.lang.String name = TYPE_1 . METHOD_2 ( ( ( VAR_1 ) + ( VAR_2 ) ) ) ; return ( name != null ) && ( ! ( VAR_3 . isEmpty ( ) ) ) ; },public boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ( ( VAR_1 ) + ( VAR_2 ) ) ) ) != null ; },"['Update BinaryOperator', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator']",1194
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String result = ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ; java.lang.System.out.println ( result ) ; return TYPE_1 . METHOD_2 ( ) ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ; }","['Update TypeReference', 'Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",1196
"private void METHOD_1 ( TYPE_1 VAR_1 , int value ) { if ( VAR_2 ) { return ; } value = METHOD_2 ( VAR_1 , value ) ; TYPE_2 VAR_3 = METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_4 , value ) ; METHOD_5 ( value ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , int value ) { if ( VAR_2 ) { return ; } value = METHOD_2 ( VAR_1 , value ) ; METHOD_5 ( value ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1198
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . remove ( id ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; } },public void METHOD_1 ( ) { VAR_2 . remove ( id ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1199
"public java.lang.String METHOD_1 ( ) { java.lang.String name = ( ( TYPE_1 ) ( METHOD_2 ( STRING_1 ) ) ) . METHOD_3 ( ) ; TYPE_1 VAR_1 = VAR_2 . METHOD_4 ( name ) ; METHOD_5 ( STRING_1 , VAR_1 ) ; return STRING_2 ; }","public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_4 ( ( ( java.lang.String ) ( METHOD_2 ( STRING_1 ) ) ) ) ; METHOD_5 ( STRING_1 , VAR_1 ) ; return STRING_2 ; }","['Update LocalVariable', 'Move TypeReference', 'Update Invocation', 'Move TypeAccess', 'Update TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",1200
public java.lang.String METHOD_1 ( TYPE_1 key ) { TYPE_1 VAR_1 = this . METHOD_2 ( key ) ; if ( VAR_1 == null ) return null ; return VAR_2 . toString ( ) ; },public java.lang.String METHOD_1 ( TYPE_1 key ) { return this . METHOD_2 ( key ) . toString ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",1202
public java.util.Collection < TYPE_1 > METHOD_1 ( ) { java.util.Collection < TYPE_1 > VAR_1 = ( ( java.util.Collection < TYPE_1 > ) ( VAR_2 . METHOD_2 ( STRING_1 ) ) ) ; if ( VAR_1 == null ) return VAR_3 ; return VAR_1 ; },public java.util.Collection < TYPE_1 > METHOD_1 ( ) { return ( ( java.util.Collection < TYPE_1 > ) ( VAR_2 . METHOD_2 ( STRING_1 ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",1203
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( ) ) ; if ( ( this . VAR_2 ) == ( VAR_3 ) ) { VAR_1 . METHOD_4 ( VAR_4 ) ; } return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",1204
"public java.lang.String METHOD_1 ( java.lang.String name , TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( name ) ; int i = INT_1 ; VAR_1 . METHOD_3 ( STRING_1 , name ) ; return STRING_2 ; }","public java.lang.String METHOD_1 ( java.lang.String name , TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( name ) ; VAR_1 . METHOD_3 ( STRING_1 , name ) ; return STRING_2 ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",1205
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ; TYPE_2 . METHOD_3 ( this ) . METHOD_4 ( VAR_4 ) . METHOD_5 ( VAR_1 ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_2 . METHOD_3 ( this ) . METHOD_4 ( VAR_4 ) . METHOD_5 ( ( ( TYPE_1 ) ( VAR_2 ) ) ) ; },"['Insert TypeAccess', 'Move TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1206
public void METHOD_1 ( int index ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_4 ( index ) ; } },public void METHOD_1 ( int index ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1208
"public void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_2 ( STRING_1 , VAR_1 ) ; METHOD_3 ( VAR_2 , intent ) ; METHOD_4 ( ) ; }",public void METHOD_1 ( ) { METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1210
public java.lang.String METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; return VAR_2 ; } else { return VAR_5 ; } },public java.lang.String METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { VAR_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; return VAR_3 . METHOD_2 ( ) ; } else { return VAR_5 ; } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1211
"protected double METHOD_1 ( double VAR_1 , double VAR_2 ) { double VAR_3 = VAR_1 + VAR_2 ; return VAR_3 ; }","protected double METHOD_1 ( java.lang.Double VAR_1 , java.lang.Double VAR_2 ) { return VAR_1 + VAR_2 ; }","['Update TypeReference', 'Update TypeReference', 'Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1212
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_1 ( VAR_1 , this ) ; TYPE_3 VAR_2 = new TYPE_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_1 ( VAR_1 , this ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",1213
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 != ( VAR_3 ) ) { VAR_3 = METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 ( VAR_3 ) ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 = METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 ( VAR_3 ) ) ; },"['Move Assignment', 'Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1215
private java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( this ) . METHOD_3 ( ) ; return VAR_1 ; },private java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( this ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1216
"public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( STRING_1 , VAR_1 ) ; VAR_2 = TYPE_4 . METHOD_5 ( VAR_3 ) ; }",public void METHOD_1 ( ) throws TYPE_1 { VAR_2 = TYPE_4 . METHOD_5 ( VAR_3 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1217
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , byte [ ] data ) { java.lang.String VAR_4 = new java.lang.String ( data ) ; VAR_5 . add ( VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , byte [ ] data ) { }","['Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1219
"public int METHOD_1 ( long id ) { int VAR_1 = VAR_2 . delete ( VAR_3 , ( ( ( VAR_4 ) + STRING_1 ) + id ) , null ) ; METHOD_2 ( VAR_5 ) ; return VAR_1 ; }","public void METHOD_1 ( long id ) { VAR_2 . delete ( VAR_3 , ( ( ( VAR_4 ) + STRING_1 ) + id ) , null ) ; METHOD_2 ( VAR_5 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",1220
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_1 error = new TYPE_1 ( ) . METHOD_3 ( VAR_2 , STRING_3 ) ; TYPE_3 . METHOD_4 ( error ) ; VAR_3 . METHOD_1 ( error ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_3 . METHOD_1 ( new TYPE_1 ( ) . METHOD_3 ( VAR_2 , STRING_3 ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1221
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( true ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_3 ( true ) ; },['Delete Invocation'],1222
"public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { TYPE_2 VAR_2 = VAR_3 . get ( i ) ; boolean VAR_4 = i == ( ( VAR_3 . size ( ) ) - 1 ) ; VAR_1 . METHOD_2 ( VAR_2 , VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { TYPE_2 VAR_2 = VAR_3 . get ( i ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",1223
public void METHOD_1 ( ) { java.util.Set < java.lang.String > VAR_1 = new java.util.HashSet < java.lang.String > ( VAR_2 ) ; TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1224
public java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > a = new java.util.ArrayList < java.lang.String > ( field . METHOD_2 ( ) ) ; java.util.Collections.sort ( a ) ; return a ; },public java.util.Set < java.lang.String > METHOD_1 ( ) { return field . METHOD_2 ( ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1225
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getActivity ( ) . METHOD_2 ( VAR_2 ) ) ) ; VAR_3 . setText ( VAR_4 ) ; VAR_5 . METHOD_3 ( VAR_6 ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1226
"public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Thread VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; TYPE_2 . METHOD_2 ( VAR_1 , null , VAR_3 , VAR_2 , true ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Thread VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_1 , null , null , VAR_2 , true ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",1228
private TYPE_1 METHOD_1 ( char c ) { TYPE_1 key = VAR_1 . get ( c ) ; if ( TYPE_2 . METHOD_2 ( key ) ) { return VAR_2 ; } else { return key ; } },private TYPE_1 METHOD_1 ( char c ) { return VAR_1 . get ( c ) ; },"['Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",1230
public static void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 tmp = VAR_1 ; VAR_1 = null ; tmp . METHOD_2 ( ) ; } },public static void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } },"['Move Assignment', 'Insert TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",1231
"private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( false ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , 0 ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) , 0 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1232
public static TYPE_1 list ( ) { java.util.List < TYPE_2 > VAR_1 = TYPE_2 . METHOD_1 ( ) ; return VAR_2 ; },public static TYPE_1 list ( ) { return VAR_2 ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",1233
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; return METHOD_4 ( VAR_3 . METHOD_5 ( VAR_1 ) ) ; },public TYPE_1 METHOD_1 ( ) { return METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1235
public static void main ( java.lang.String [ ] args ) { int VAR_1 = INT_1 ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { java.lang.System.out.println ( i ) ; TYPE_1 . METHOD_1 ( ) ; } },public static void main ( java.lang.String [ ] args ) { for ( int i = 0 ; i < 1 ; i ++ ) { java.lang.System.out.println ( i ) ; TYPE_1 . METHOD_1 ( ) ; } },"['Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",1237
protected java.lang.Boolean METHOD_1 ( java.lang.String value ) { java.lang.Boolean VAR_1 = java.lang.Boolean . METHOD_2 ( value ) ; return VAR_1 ; },protected java.lang.Boolean METHOD_1 ( java.lang.String value ) { java.lang.Boolean VAR_1 = new java.lang.Boolean ( value ) ; return VAR_1 ; },"['Insert ConstructorCall', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1238
public float METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { return METHOD_2 ( ) . METHOD_3 ( event ) ; } return 0 ; },public float METHOD_1 ( TYPE_1 event ) { return METHOD_2 ( ) . METHOD_3 ( event ) ; },"['Move Return', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1239
public TYPE_1 METHOD_1 ( ) { if ( ( this . count ) == 0 ) { throw new TYPE_2 ( ) ; } TYPE_1 VAR_1 = this . METHOD_2 ( ) ; ( this . count ) -- ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { if ( ( this . count ) != 0 ) { throw new TYPE_2 ( ) ; } ( this . count ) -- ; return this . METHOD_2 ( ) ; },"['Update BinaryOperator', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1240
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; TYPE_3 VAR_3 = METHOD_2 ( ) ; if ( VAR_3 != null ) METHOD_3 ( VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; METHOD_3 ( METHOD_2 ( ) ) ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1243
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) ; }","public void METHOD_1 ( ) { VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) , VAR_2 . METHOD_2 ( ) . METHOD_6 ( ) , VAR_2 . METHOD_2 ( ) . METHOD_7 ( ) ) ; }","['Insert Invocation', 'Insert Invocation', 'Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1244
"public static synchronized TYPE_1 METHOD_1 ( ) { java.io.File VAR_1 = new java.io.File ( STRING_1 ) ; TYPE_2 . METHOD_2 ( STRING_2 , VAR_1 . METHOD_3 ( ) ) ; ( VAR_2 ) ++ ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; return VAR_3 ; }","public static TYPE_1 METHOD_1 ( ) { java.io.File VAR_1 = new java.io.File ( STRING_1 ) ; TYPE_2 . METHOD_2 ( STRING_2 , VAR_1 . METHOD_3 ( ) ) ; return new TYPE_1 ( ) ; }","['Move ConstructorCall', 'Delete Wra', 'Delete FieldWrite', 'Delete UnaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1245
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; ( ( TYPE_2 ) ( VAR_5 ) ) . METHOD_3 ( VAR_6 , VAR_2 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { ( ( TYPE_2 ) ( VAR_5 ) ) . METHOD_3 ( VAR_6 , null ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1246
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( true ) ; TYPE_1 VAR_2 = new TYPE_1 ( false ) ; VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( true ) ; },"['Delete TypeReference', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1248
public static TYPE_1 METHOD_1 ( ) { TYPE_1 p = new TYPE_1 ( ) ; p . METHOD_2 ( true ) ; return p ; },public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",1250
private static int METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; return VAR_1 <= 1 ? 1 : VAR_1 - 1 ; },private static int METHOD_1 ( ) { int VAR_1 = ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) - 1 ; return VAR_1 <= 1 ? 1 : VAR_1 - 1 ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1253
public java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) { java.lang.Long VAR_2 = ( ( java.lang.Long ) ( VAR_1 ) ) ; long VAR_3 = TYPE_1 . METHOD_2 ( VAR_2 ) ; java.util.Date date = new java.util.Date ( VAR_3 ) ; return METHOD_3 ( ) . format ( date ) ; },public java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) { java.util.Date date = new java.util.Date ( ( ( java.lang.Long ) ( VAR_1 ) ) ) ; return METHOD_3 ( ) . format ( date ) ; },"['Update LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",1254
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( true ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",1255
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = message . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 != null ) { return TYPE_1 . METHOD_4 ( VAR_1 ) ; } return null ; },public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_4 ( message . METHOD_2 ( ) . METHOD_3 ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",1256
public void METHOD_1 ( TYPE_1 listener ) { VAR_1 . add ( listener ) ; TYPE_2 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 != null ) { listener . METHOD_3 ( VAR_2 ) ; listener . METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 listener ) { VAR_1 . add ( listener ) ; listener . METHOD_3 ( METHOD_2 ( ) ) ; listener . METHOD_4 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1257
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( METHOD_2 ( ) . METHOD_1 ( ) ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1258
"public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( context ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( context , STRING_1 , VAR_2 ) . show ( ) ; }","public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { TYPE_1 VAR_1 = new TYPE_1 ( context ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( context , STRING_1 , VAR_2 ) . show ( ) ; }","['Insert ConstructorCall', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1259
"public void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_1 class ) ; getActivity ( ) . METHOD_2 ( intent ) ; getActivity ( ) . METHOD_3 ( ) ; }",public void METHOD_1 ( ) { getActivity ( ) . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1260
public TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; return TYPE_1 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",1262
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; if ( VAR_2 . METHOD_3 ( ) ) VAR_2 . METHOD_4 ( ( STRING_1 + VAR_1 ) ) ; return VAR_1 ; },public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",1263
"private void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) { final TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_4 . put ( java.lang.Long . METHOD_2 ( VAR_1 ) , VAR_3 ) ; }","private void METHOD_1 ( TYPE_1 VAR_2 , long VAR_1 ) { final TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 ) ; VAR_4 . put ( java.lang.Long . METHOD_2 ( VAR_1 ) , VAR_3 ) ; }","['Move Parameter', 'Update ConstructorCall', 'Insert VariableRead']",1264
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_3 ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_4 class ) ; intent . METHOD_4 ( VAR_5 , true ) ; METHOD_5 ( intent ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_3 ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1265
"public void METHOD_1 ( ) { java.util.List < java.lang.Object > VAR_1 = new java.util.ArrayList < > ( ) ; java.lang.String VAR_2 = STRING_1 ; VAR_3 . assertEquals ( TYPE_1 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; }","public void METHOD_1 ( ) { java.util.List < java.lang.Object > VAR_1 = new java.util.ArrayList < > ( ) ; java.lang.String VAR_2 = new java.lang.String ( ) ; VAR_3 . assertEquals ( TYPE_1 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; }","['Insert ConstructorCall', 'Delete FieldRead']",1266
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = VAR_2 . getSelection ( ) ; if ( VAR_1 instanceof TYPE_3 ) { METHOD_2 ( ( ( TYPE_3 ) ( VAR_1 ) ) ) ; } },public void METHOD_1 ( TYPE_1 event ) { METHOD_2 ( ) ; },"['Insert Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1269
"public void METHOD_1 ( ) { java.lang.String VAR_1 ; super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 . getId ( ) ) ; }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 . getId ( ) ) ; }","['Delete TypeReference', 'Delete LocalVariable']",1270
"public java.io.InputStream METHOD_1 ( java.lang.String source ) throws java.io.IOException { java.lang.String [ ] VAR_1 = METHOD_2 ( source , true ) ; TYPE_1 VAR_2 = this . VAR_3 . METHOD_3 ( VAR_1 [ 0 ] , VAR_1 [ 1 ] ) ; return VAR_2 . METHOD_4 ( ) ; }","public java.io.InputStream METHOD_1 ( java.lang.String source ) throws java.io.IOException { java.lang.String [ ] VAR_1 = METHOD_2 ( source ) ; TYPE_1 VAR_2 = this . VAR_3 . METHOD_3 ( VAR_1 [ 0 ] , VAR_1 [ 1 ] ) ; return VAR_2 . METHOD_4 ( ) ; }",['Delete Literal'],1272
private void METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; if ( VAR_1 > ( - 1 ) ) { METHOD_3 ( VAR_1 ) ; } },private void METHOD_1 ( ) { METHOD_3 ( METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1274
private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String temp = VAR_2 ; if ( ! ( VAR_3 . isEmpty ( ) ) ) { VAR_4 . METHOD_2 ( temp ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Insert TypeAccess', 'Delete VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1275
public static void main ( java.lang.String [ ] args ) { TYPE_1 output = new TYPE_1 ( ) ; output . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1276
TYPE_1 METHOD_1 ( java.lang.Integer VAR_1 ) throws TYPE_2 { TYPE_1 VAR_2 = this . VAR_3 . METHOD_2 ( VAR_1 ) . get ( ) ; TYPE_3 VAR_4 = VAR_5 . METHOD_3 ( VAR_1 ) . get ( ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; return VAR_2 ; },TYPE_1 METHOD_1 ( java.lang.Integer VAR_1 ) throws TYPE_2 { TYPE_1 VAR_2 = this . VAR_3 . METHOD_2 ( VAR_1 ) . get ( ) ; return VAR_2 ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1278
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; METHOD_3 ( view ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; METHOD_3 ( view ) ; return view ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead', 'Delete FieldRead']",1279
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( VAR_2 class , args ) ; }","public static void main ( java.lang.String [ ] args ) { TYPE_2 . METHOD_1 ( VAR_2 class , args ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable']",1280
"private java.lang.String METHOD_1 ( double value ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( CHAR_1 ) ; return new TYPE_2 ( STRING_1 , VAR_1 ) . format ( value ) ; }",private java.lang.String METHOD_1 ( double value ) { return new TYPE_2 ( STRING_1 ) . format ( value ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1281
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) throws TYPE_2 , TYPE_3 { TYPE_4 VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.String query = java.lang.String.format ( STRING_1 , VAR_2 ) ; int VAR_4 = VAR_3 . METHOD_3 ( query ) ; return ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) throws TYPE_2 , TYPE_3 { }","['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete Return']",1283
public void METHOD_1 ( ) { int VAR_1 = this . VAR_2 . METHOD_2 ( ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { this . VAR_2 . METHOD_1 ( 0 ) ; } },public void METHOD_1 ( ) { for ( int i = 0 ; i < ( this . VAR_2 . METHOD_2 ( ) ) ; i ++ ) { this . VAR_2 . METHOD_1 ( i ) ; } },"['Move Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal']",1284
"public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) , getId ( ) ) ; VAR_2 . METHOD_3 ( true ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_4 . info ( VAR_3 ) ; } }",public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . METHOD_3 ( true ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_4 . info ( VAR_3 ) ; } },"['Delete Invocation', 'Delete Invocation']",1285
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( STRING_3 ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; },private void METHOD_1 ( ) { VAR_2 . METHOD_5 ( new TYPE_1 ( STRING_1 ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1286
"protected int METHOD_1 ( java.lang.String key , TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) ; }","protected int METHOD_1 ( java.lang.String key , TYPE_1 VAR_1 ) { int count = VAR_1 . METHOD_2 ( ) ; return count ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",1290
"public static android.content.Intent getIntent ( android.content.Context context ) { return new android.content.Intent ( context , VAR_1 class ) ; }","public static android.content.Intent getIntent ( android.content.Context context ) { android.content.Intent intent = new android.content.Intent ( context , VAR_1 class ) ; return intent ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead']",1291
"public TYPE_1 METHOD_1 ( java.lang.String fileName ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_4 . get ( VAR_5 class , 1 ) ) ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( java.lang.String fileName ) { return ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( ) . get ( VAR_5 class , 1 ) ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead']",1292
public TYPE_1 METHOD_1 ( int i ) throws java.io.IOException { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( i ) ; VAR_1 . METHOD_2 ( true ) ; return METHOD_3 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( int i ) throws java.io.IOException { return METHOD_3 ( VAR_2 . METHOD_1 ( i ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",1295
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) return null ; return VAR_4 . get ( VAR_2 ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_4 . get ( VAR_3 . get ( VAR_1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",1296
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; },"['Insert Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1298
public TYPE_1 update ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) ; TYPE_1 VAR_3 = VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_1 ( ) . commit ( ) ; return VAR_3 ; },public TYPE_1 update ( TYPE_1 VAR_1 ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",1299
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( this ) ; VAR_3 . METHOD_3 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1300
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; VAR_2 . METHOD_2 ( STRING_1 , VAR_4 . getId ( ) ) ; METHOD_3 ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; VAR_2 . METHOD_2 ( STRING_1 , VAR_4 . getId ( ) ) ; METHOD_3 ( VAR_2 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess', 'Delete TypeAccess']",1301
"public void METHOD_1 ( ) { float VAR_1 = VAR_2 ; float VAR_3 = VAR_4 ; float VAR_5 = ( VAR_6 ) / FLOAT_1 ; VAR_7 = VAR_8 . METHOD_2 ( ) ; VAR_9 . METHOD_3 ( VAR_1 , VAR_3 , VAR_5 , VAR_7 ) ; }","public void METHOD_1 ( ) { float VAR_1 = VAR_2 ; float VAR_3 = VAR_4 ; float VAR_5 = VAR_6 ; VAR_7 = VAR_8 . METHOD_2 ( ) ; VAR_9 . METHOD_3 ( VAR_1 , VAR_3 , VAR_5 , VAR_7 ) ; }","['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1302
public void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; java.lang.System.out.println ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.System.out.println ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1304
private int METHOD_1 ( ) { int VAR_1 = VAR_2 ; if ( VAR_3 ) VAR_1 ++ ; if ( VAR_4 ) VAR_1 += INT_1 ; return VAR_1 * ( VAR_5 ) ; },private int METHOD_1 ( ) { int VAR_1 = ( VAR_5 ) * ( VAR_2 ) ; if ( VAR_3 ) VAR_1 ++ ; if ( VAR_4 ) VAR_1 += INT_1 ; return VAR_1 ; },"['Move BinaryOperator', 'Move VariableRead', 'Move FieldRead']",1306
"private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; return ( ( ( target ) != null ) && ( METHOD_4 ( ) ) ) && ( METHOD_5 ( VAR_1 , VAR_4 . position ) ) ; }",private boolean METHOD_1 ( ) { return ( ( target ) != null ) && ( METHOD_4 ( ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",1308
"public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { final TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; VAR_2 . METHOD_4 ( true ) ; METHOD_5 ( new android.content.Intent ( VAR_4 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { final TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_3 ) ) ) ; VAR_2 . METHOD_4 ( true ) ; METHOD_5 ( new android.content.Intent ( VAR_4 ) ) ; }",['Delete Invocation'],1309
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( this , VAR_4 class ) ; METHOD_3 ( VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1310
private static void METHOD_1 ( ) { java.lang.String [ ] VAR_1 = VAR_2 . METHOD_2 ( ) ; java.util.Random VAR_3 = new java.util.Random ( ) ; int index = VAR_3 . METHOD_3 ( INT_1 ) ; },private static void METHOD_1 ( ) { },"['Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",1311
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_1 instanceof TYPE_3 ) { TYPE_4 VAR_3 = METHOD_3 ( VAR_1 ) ; if ( VAR_3 != null ) VAR_2 . METHOD_4 ( VAR_3 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If']",1312
"protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( VAR_2 ) ; java.lang.String VAR_3 = VAR_4 . getString ( VAR_5 , null ) ; if ( VAR_3 == null ) { return new TYPE_3 ( ) ; } else { return new TYPE_4 ( ) ; } }",protected TYPE_1 METHOD_1 ( ) { return new TYPE_3 ( ) ; },"['Move Return', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",1313
"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( ) ; METHOD_2 ( VAR_2 , VAR_1 ) ; METHOD_3 ( ) ; }",public void METHOD_1 ( android.view.View view ) { METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1316
"public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 , java.io.IOException { if ( VAR_1 < 1 ) { throw new TYPE_2 ( STRING_1 ) ; } else { TYPE_1 answer = METHOD_2 ( VAR_1 ) ; out . METHOD_3 ( ) ; return answer ; } }","public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 , java.io.IOException { if ( VAR_1 < 1 ) { throw new TYPE_2 ( STRING_1 ) ; } else { return METHOD_2 ( VAR_1 ) ; } }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead']",1317
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.HashSet < TYPE_2 > VAR_2 = VAR_3 ; for ( TYPE_2 listener : VAR_2 ) { listener . METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 listener : VAR_3 ) { listener . METHOD_2 ( VAR_1 ) ; } },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1318
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1319
public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { final TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; return VAR_2 ; },"['Delete VariableRead', 'Delete Invocation']",1320
private java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; try { while ( results . METHOD_2 ( ) ) { } } catch ( TYPE_1 VAR_2 ) { java.lang.System.out.println ( VAR_2 ) ; } return VAR_1 ; },private void METHOD_1 ( ) { try { while ( results . METHOD_2 ( ) ) { } } catch ( TYPE_1 VAR_2 ) { java.lang.System.out.println ( VAR_2 ) ; } },"['Update TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",1321
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Set < TYPE_2 > VAR_2 = new java.util.HashSet < TYPE_2 > ( METHOD_2 ( VAR_1 ) ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { METHOD_1 ( VAR_1 , VAR_3 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_3 : METHOD_2 ( VAR_1 ) ) { METHOD_1 ( VAR_1 , VAR_3 ) ; } }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1323
"public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( VAR_1 ) ; return super . METHOD_1 ( item ) ; }",public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; return super . METHOD_1 ( item ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1324
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( ) ; java.util.HashSet < TYPE_2 > VAR_4 = new java.util.HashSet ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_4 ) ; return STRING_2 ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_2 ) ; return STRING_2 ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1325
"private static int METHOD_1 ( int a , int b ) { int result = a * b ; return result ; }","private static int METHOD_1 ( int a , int b ) { return a * b ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1326
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( STRING_1 , VAR_3 . METHOD_3 ( ) ) ; METHOD_4 ( intent ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1327
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) , VAR_3 . to ( ) ) ; VAR_2 . METHOD_4 ( METHOD_5 ( ) . METHOD_6 ( ) ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",1328
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; return super . METHOD_1 ( VAR_1 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return super . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",1329
public synchronized java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_1 ; },public synchronized java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_2 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1330
"protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_2 . set ( VAR_3 , true ) ; return VAR_1 ; }",protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",1333
public void METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; for ( TYPE_1 p : VAR_1 ) { METHOD_3 ( p ) ; } },public void METHOD_1 ( ) { for ( TYPE_1 p : VAR_2 . METHOD_2 ( ) ) { METHOD_3 ( p ) ; } },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1334
public java.util.Set < TYPE_1 > get ( TYPE_2 key ) { java.util.Set < TYPE_1 > VAR_1 = VAR_2 . get ( key ) ; if ( VAR_1 == null ) { return null ; } else { return new java.util.HashSet < > ( VAR_1 ) ; } },public java.util.Set < TYPE_1 > get ( TYPE_2 key ) { return new java.util.HashSet < > ( VAR_2 . get ( key ) ) ; },"['Insert Return', 'Insert ConstructorCall', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",1336
public final void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . getView ( ) . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; },public final void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_3 . getView ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1337
public void METHOD_1 ( android.view.View VAR_1 ) { boolean VAR_2 = ! ( VAR_3 . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_4 . METHOD_4 ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move UnaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1338
public java.util.Collection < java.lang.String > METHOD_1 ( ) { java.util.Set < java.lang.String > VAR_1 = new java.util.HashSet < > ( VAR_2 ) ; VAR_3 . add ( VAR_4 ) ; return VAR_1 ; },public java.util.Collection < java.lang.String > METHOD_1 ( ) { return VAR_2 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1339
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_2 ( ) ; TYPE_3 VAR_2 = METHOD_2 ( STRING_1 , VAR_1 ) ; assertEquals ( STRING_2 , VAR_2 . METHOD_3 ( ) ) ; assertEquals ( STRING_3 , VAR_1 . METHOD_4 ( ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { TYPE_3 VAR_2 = METHOD_2 ( STRING_1 ) ; assertEquals ( STRING_2 , VAR_2 . METHOD_3 ( ) ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",1341
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 ) throws TYPE_3 { TYPE_1 VAR_3 = new TYPE_1 ( this . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 ) throws TYPE_3 { return new TYPE_1 ( this . METHOD_2 ( ) , VAR_2 , VAR_1 ) ; }","['Move ConstructorCall', 'Move VariableRead', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1342
"public void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_2 ( VAR_1 , false ) ; METHOD_3 ( VAR_2 , intent ) ; this . METHOD_4 ( ) ; }",public void METHOD_1 ( ) { this . METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1343
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 , STRING_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; },"['Insert Invocation', 'Insert FieldRead', 'Move TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1344
"public java.util.List < TYPE_1 > METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . execute ( VAR_3 . getName ( ) ) ; java.util.List < TYPE_1 > VAR_4 = VAR_5 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_6 class ) ; return VAR_4 ; }",public java.util.List < TYPE_1 > METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1345
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; TYPE_3 VAR_3 = METHOD_3 ( ) . METHOD_1 ( VAR_1 ) ; TYPE_1 equals = VAR_2 . METHOD_4 ( VAR_3 ) ; return equals . METHOD_5 ( ) ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; TYPE_3 VAR_3 = METHOD_3 ( ) . METHOD_1 ( VAR_1 ) ; return VAR_2 . METHOD_4 ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1347
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_3 ( STRING_1 , ( STRING_2 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete ConstructorCall', 'Delete LocalVariable']",1348
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String result = VAR_1 ; if ( ! ( VAR_2 . contains ( STRING_1 ) ) ) { result = java.lang.String.format ( STRING_2 , STRING_1 , VAR_1 ) ; } return result ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String result = null ; if ( ! ( VAR_2 . contains ( STRING_1 ) ) ) { result = java.lang.String.format ( STRING_2 , STRING_1 , VAR_1 ) ; } return result ; }","['Insert Literal', 'Delete VariableRead']",1349
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1350
"public static TYPE_1 METHOD_1 ( TYPE_2 obj ) throws java.lang.Exception { java.lang.String VAR_1 = VAR_2 . toString ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; return VAR_3 . METHOD_2 ( VAR_1 , VAR_4 class ) ; }","public static TYPE_1 METHOD_1 ( TYPE_2 obj ) throws java.lang.Exception { TYPE_3 VAR_3 = new TYPE_3 ( ) ; return VAR_3 . METHOD_2 ( VAR_2 . toString ( ) , VAR_4 class ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1352
public void METHOD_1 ( ) { java.util.LinkedList < TYPE_1 > list = VAR_1 . METHOD_2 ( ) ; listener . METHOD_3 ( list ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",1354
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { TYPE_4 out = response . METHOD_2 ( ) ; out . METHOD_3 ( STRING_1 ) ; out . METHOD_4 ( ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { }","['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1355
"public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( 0 , INT_1 ) . METHOD_3 ( ) ; int size = VAR_2 . size ( ) ; VAR_3 . assertEquals ( STRING_1 , INT_1 , size ) ; }","public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( 0 , INT_1 ) ; int size = VAR_2 . size ( ) ; VAR_3 . assertEquals ( STRING_1 , INT_1 , size ) ; }","['Move Invocation', 'Delete Invocation']",1356
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; return METHOD_3 ( VAR_1 ) ; },public java.lang.String METHOD_1 ( ) { return VAR_2 . METHOD_2 ( STRING_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1358
"public java.lang.String METHOD_1 ( ) { java.lang.String filePath = ( ( METHOD_2 ( ) ) + STRING_1 ) + ( METHOD_3 ( ) ) ; return VAR_1 . replace ( VAR_2 , STRING_2 ) ; }",public java.lang.String METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) + STRING_1 ) + ( METHOD_3 ( ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1360
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; METHOD_3 ( intent ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1361
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_3 . getColor ( ) ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_5 ( ) ; VAR_4 . METHOD_6 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_3 . getColor ( ) ) ; METHOD_6 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1364
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { METHOD_3 ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1366
public java.lang.String METHOD_1 ( ) throws java.lang.Exception { java.lang.String key = VAR_1 . split ( STRING_1 ) [ 1 ] ; java.lang.String VAR_2 = VAR_3 . get ( key ) ; if ( VAR_2 == null ) { return VAR_2 ; } else { return VAR_2 ; } },public java.lang.String METHOD_1 ( ) throws java.lang.Exception { java.lang.String key = VAR_1 . split ( STRING_1 ) [ 1 ] ; return VAR_3 . get ( key ) ; },"['Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",1367
public void METHOD_1 ( TYPE_1 VAR_1 ) { byte [ ] b = VAR_1 . METHOD_2 ( ) ; value = TYPE_2 . METHOD_3 ( b ) ; java.lang.String VAR_2 = STRING_1 + ( value ) ; VAR_3 . METHOD_4 ( ) . setText ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { byte [ ] b = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_4 ( ) . setText ( TYPE_2 . METHOD_3 ( b ) ) ; },"['Move Invocation', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",1371
public static void main ( java.lang.String [ ] args ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = VAR_3 . toLowerCase ( ) ; java.lang.System.out.println ( VAR_2 ) ; },public static void main ( java.lang.String [ ] args ) { java.lang.String VAR_1 = STRING_1 ; VAR_3 . toLowerCase ( ) ; java.lang.System.out.println ( VAR_1 ) ; },"['Move Invocation', 'Update VariableRead', 'Delete TypeReference', 'Delete LocalVariable']",1372
public void METHOD_1 ( java.lang.Boolean result ) { },public void METHOD_1 ( java.lang.Boolean result ) { int x = 0 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Insert Literal']",1374
private java.util.Set < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; },private java.util.Set < TYPE_1 > METHOD_1 ( ) throws java.lang.Exception { return new TYPE_2 ( ) . METHOD_5 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1376
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( INT_1 ) ; VAR_2 . setText ( java.lang.String.format ( STRING_1 , INT_1 ) ) ; java.lang.Thread VAR_3 = new java.lang.Thread ( VAR_4 ) ; VAR_5 . start ( ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( INT_1 ) ; VAR_2 . setText ( java.lang.String.format ( STRING_1 , INT_1 ) ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",1377
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.lang.Exception { java.lang.String VAR_4 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; commit ( VAR_2 ) ; return VAR_4 ; }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; commit ( VAR_2 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",1378
public static java.lang.String METHOD_1 ( ) { java.io.File f = new java.io.File ( VAR_1 ) ; if ( f . METHOD_2 ( ) ) { return VAR_1 ; } else { VAR_1 = ( TYPE_1 . METHOD_3 ( STRING_1 ) ) + STRING_2 ; return VAR_1 ; } },public static java.lang.String METHOD_1 ( ) { return VAR_1 ; },"['Move Return', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete FieldWrite', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Assignment', 'Delete Block', 'Delete If']",1379
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( VAR_2 , STRING_1 ) ; METHOD_3 ( intent ) ; METHOD_4 ( ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; METHOD_3 ( intent ) ; java.lang.String source = STRING_1 ; intent . METHOD_2 ( VAR_2 , source ) ; METHOD_4 ( ) ; }","['Move Invocation', 'Insert LocalVariable', 'Insert TypeReference', 'Insert FieldRead', 'Insert VariableRead', 'Delete TypeAccess']",1381
"private void METHOD_1 ( ) { java.lang.System.out.println ( VAR_1 ) ; int count = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_1 ( METHOD_3 ( ) , count ) ; java.lang.System.out.println ( VAR_4 ) ; }","private void METHOD_1 ( ) { java.lang.System.out.println ( VAR_1 ) ; VAR_3 . METHOD_1 ( METHOD_3 ( ) , VAR_2 . METHOD_2 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1383
"public void METHOD_1 ( TYPE_1 status ) { if ( status . METHOD_2 ( ) ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; android.content.Intent VAR_3 = new android.content.Intent ( METHOD_3 ( ) , VAR_4 class ) ; METHOD_4 ( VAR_3 ) ; } }","public void METHOD_1 ( TYPE_1 status ) { if ( status . METHOD_2 ( ) ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; } }","['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1385
"public TYPE_1 METHOD_1 ( long id ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( get ( ( STRING_1 + id ) ) ) ) ; VAR_2 . put ( STRING_2 , true ) ; return new TYPE_1 ( STRING_3 , STRING_4 , VAR_1 ) ; }","public TYPE_1 METHOD_1 ( long id ) { return new TYPE_1 ( STRING_3 , STRING_4 , get ( ( STRING_1 + id ) ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeReference', 'Delete VariableRead']",1386
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_4 , VAR_5 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_5 . METHOD_3 ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_2 ( VAR_4 , VAR_2 ) ; VAR_5 . METHOD_3 ( VAR_2 ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead']",1388
"private int METHOD_1 ( int i , int VAR_1 , int VAR_2 ) { i = i / VAR_1 ; int VAR_3 = ( ( i * INT_1 ) + INT_1 ) + VAR_2 ; return VAR_3 ; }","private int METHOD_1 ( int i , int VAR_1 ) { i = i / VAR_1 ; int VAR_3 = ( i * INT_1 ) + INT_1 ; return VAR_3 ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete BinaryOperator']",1389
"public void METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = METHOD_2 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_4 [ VAR_2 ] , VAR_5 , VAR_2 ) ; ( VAR_5 ) ++ ; VAR_6 . add ( VAR_3 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = METHOD_2 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_4 [ VAR_2 ] , VAR_5 , VAR_2 ) ; ( VAR_5 ) ++ ; VAR_6 . add ( VAR_3 ) ; }","['Insert Assignment', 'Insert FieldWrite', 'Move Invocation', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1390
"public static java.lang.String METHOD_1 ( long VAR_1 , boolean VAR_2 ) { java.util.Date date = new java.util.Date ( ( VAR_1 * INT_1 ) ) ; if ( VAR_2 ) return VAR_3 . format ( date ) ; else return VAR_4 . format ( date ) ; }",public static java.lang.String METHOD_1 ( long VAR_1 ) { return VAR_4 . format ( new java.util.Date ( ( VAR_1 * INT_1 ) ) ) ; },"['Insert Return', 'Insert Invocation', 'Move TypeAccess', 'Move ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1391
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = new java.util.HashSet < > ( ) ; TYPE_1 value = METHOD_1 ( VAR_1 , VAR_2 ) ; return value ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; TYPE_1 value = METHOD_1 ( VAR_1 , VAR_2 ) ; return value ; }","['Update TypeReference', 'Update ConstructorCall']",1393
"public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( VAR_6 . getName ( ) ) ) ; }","public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( VAR_3 . METHOD_2 ( ) . getName ( ) ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",1394
public int METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return VAR_3 . getId ( ) ; },public int METHOD_1 ( TYPE_1 VAR_1 ) { int id = VAR_2 . METHOD_2 ( VAR_1 ) ; return id ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1395
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( STRING_1 ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1397
private java.lang.String METHOD_1 ( TYPE_1 node ) { TYPE_2 var = VAR_1 . METHOD_2 ( ) . METHOD_3 ( node . METHOD_4 ( ) ) ; if ( var == null ) { return STRING_1 ; } return VAR_2 . getType ( ) ; },private java.lang.String METHOD_1 ( TYPE_1 node ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( node . METHOD_4 ( ) ) . getType ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",1399
protected java.lang.String METHOD_1 ( ) { java.lang.String filePath = TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( filePath ) ; return filePath ; },protected java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( STRING_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1400
public int METHOD_1 ( int position ) { TYPE_1 VAR_1 = VAR_2 . get ( position ) ; if ( STRING_1 . equals ( VAR_3 . getName ( ) ) ) { return 1 ; } else { return 0 ; } },public int METHOD_1 ( int position ) { return 0 ; },"['Move Return', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1402
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_3 ( ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; boolean result = VAR_1 . METHOD_3 ( ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation']",1404
"private final java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String result = VAR_3 . replace ( CHAR_1 , CHAR_2 ) . replace ( CHAR_3 , CHAR_2 ) ; return result ; }","private final java.lang.String METHOD_1 ( java.lang.String VAR_2 ) { return VAR_3 . replace ( CHAR_1 , CHAR_2 ) . replace ( CHAR_3 , CHAR_2 ) ; }","['Update Parameter', 'Move TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1406
"protected TYPE_1 get ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , title , message , type , listener . METHOD_1 ( ) ) ; if ( ! ( VAR_3 ) ) { VAR_1 . METHOD_2 ( ) ; } return VAR_1 ; }","protected TYPE_1 get ( ) { return new TYPE_1 ( VAR_2 , title , message , type , listener . METHOD_1 ( ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",1407
"public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_1 ) ; return VAR_2 ; }",public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1409
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) . METHOD_6 ( STRING_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",1410
"private static TYPE_1 METHOD_1 ( long id ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_2 = TYPE_5 . METHOD_3 ( VAR_1 , id ) ; return VAR_2 != null ? VAR_2 : VAR_3 ; }","private static TYPE_1 METHOD_1 ( long id ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_2 = TYPE_5 . METHOD_3 ( id , VAR_1 ) ; return VAR_2 != null ? VAR_2 : VAR_3 ; }",['Move VariableRead'],1416
"private boolean METHOD_1 ( ) { int VAR_1 = VAR_2 ; if ( VAR_1 >= ( VAR_3 ) ) { return TYPE_1 . METHOD_2 ( getActivity ( ) ) . getBoolean ( VAR_4 , true ) ; } else { return false ; } }",private boolean METHOD_1 ( ) { return false ; },"['Move Return', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1417
"public void METHOD_1 ( TYPE_1 name , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) ; TYPE_4 VAR_3 = ( ( TYPE_4 ) ( VAR_2 . METHOD_2 ( ) ) ) ; VAR_4 = VAR_3 ; }","public void METHOD_1 ( TYPE_1 name , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) ; VAR_4 = VAR_2 . METHOD_2 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead']",1418
public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; TYPE_1 VAR_3 = METHOD_2 ( ) ; if ( VAR_3 == null ) { return ; } VAR_3 . METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1419
public static void METHOD_1 ( double t ) { double VAR_1 = ( VAR_2 . getTime ( ) ) - t ; VAR_3 . add ( VAR_1 ) ; VAR_4 = VAR_3 . get ( ( ( VAR_3 . size ( ) ) / INT_1 ) ) ; },public static void METHOD_1 ( double t ) { VAR_4 = ( VAR_2 . getTime ( ) ) - t ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",1421
public void METHOD_1 ( int position ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( position ) ; } },public void METHOD_1 ( int position ) { if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( position ) ; } },"['Insert FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1422
public TYPE_1 METHOD_1 ( ) { TYPE_1 item = this . VAR_1 . remove ( 0 ) ; return item ; },public TYPE_1 METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1425
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_2 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1426
"public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_1 ( VAR_3 ) ; return VAR_3 ; }","public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Update TypeReference', 'Insert Invocation', 'Move TypeAccess', 'Move VariableRead', 'Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Return']",1430
public TYPE_1 METHOD_1 ( ) { java.util.List < TYPE_1 > list = VAR_1 . METHOD_2 ( ) ; return METHOD_3 ( ) ; },public TYPE_1 METHOD_1 ( ) { return METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",1431
"public java.lang.String METHOD_1 ( java.lang.Integer VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_3 = METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; return VAR_3 . METHOD_1 ( VAR_2 , VAR_4 ) ; }","public java.lang.String METHOD_1 ( java.lang.Integer VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_3 = METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; java.lang.String status = VAR_3 . METHOD_1 ( VAR_2 , VAR_4 ) ; return status ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",1432
private java.lang.String time ( ) { java.util.Date VAR_1 = new java.util.Date ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; return VAR_3 . format ( new java.util.Date ( VAR_4 . getTime ( ) ) ) ; },public java.lang.String time ( ) { java.util.Date VAR_1 = new java.util.Date ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; java.lang.String time = VAR_3 . format ( new java.util.Date ( VAR_4 . getTime ( ) ) ) ; return time ; },"['Insert LocalVariable', 'Update Wra', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",1433
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 class ) ; VAR_1 . METHOD_1 ( false ) ; VAR_1 . METHOD_2 ( args ) ; },"public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( VAR_2 class , args ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Insert TypeAccess', 'Move VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1434
public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String VAR_2 = VAR_3 . getText ( ) . toString ( ) ; if ( ! ( VAR_4 . isEmpty ( ) ) ) { METHOD_2 ( VAR_5 ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_5 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1435
"public java.util.List < java.util.Map < java.lang.String , java.lang.Object > > METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; return VAR_2 . METHOD_1 ( VAR_1 ) ; }","public java.util.List < java.util.Map < java.lang.String , java.lang.Object > > METHOD_1 ( ) { return VAR_2 . METHOD_1 ( ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1436
"public void delete ( TYPE_1 event ) { java.util.Set < TYPE_2 > VAR_1 = new java.util.HashSet ( event . METHOD_1 ( ) ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { VAR_3 . METHOD_2 ( VAR_2 , event ) ; } VAR_4 . delete ( event ) ; }","public void delete ( TYPE_1 event ) { for ( TYPE_2 VAR_2 : event . METHOD_1 ( ) ) { VAR_3 . METHOD_2 ( VAR_2 , event ) ; } VAR_4 . delete ( event ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1437
protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 class ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_3 class ) ; return VAR_1 ; },protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 class ) ; return VAR_1 ; },"['Move ConstructorCall', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",1438
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }",public void METHOD_1 ( ) throws java.lang.Exception { METHOD_4 ( ) ; METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1439
public static java.lang.Class < ? > METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_1 ( VAR_2 ) ; return TYPE_1 . METHOD_3 ( VAR_3 ) ; },public static java.lang.Class < ? > METHOD_1 ( java.lang.String VAR_2 ) { TYPE_2 VAR_3 = TYPE_2 . METHOD_1 ( VAR_2 ) ; return TYPE_1 . METHOD_3 ( VAR_3 ) ; },"['Update Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",1440
public java.lang.String METHOD_1 ( ) { java.lang.String answer = java.lang.Integer.toString ( METHOD_2 ( ) ) ; java.lang.System.out.println ( answer ) ; return answer ; },public java.lang.String METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1441
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) { TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; return TYPE_4 . METHOD_2 ( ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) { return new TYPE_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","['Insert ConstructorCall', 'Move VariableRead', 'Move VariableRead', 'Move VariableRead', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",1443
public TYPE_1 METHOD_1 ( ) { TYPE_1 a = TYPE_2 . METHOD_2 ( ) ; VAR_1 . add ( a ) ; return a ; },public void METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1445
public boolean METHOD_1 ( ) { boolean VAR_1 = ( value ) == ( VAR_2 ) ; if ( ( VAR_3 ) != VAR_1 ) { java.lang.System.err.println ( STRING_1 ) ; } return VAR_1 ; },public boolean METHOD_1 ( ) { return VAR_3 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",1446
"public void METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { TYPE_1 VAR_4 = METHOD_2 ( VAR_1 , VAR_5 ) ; TYPE_1 VAR_6 = METHOD_2 ( VAR_2 , VAR_5 ) ; METHOD_3 ( VAR_4 , VAR_6 , VAR_3 ) ; }","public void METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { TYPE_1 VAR_4 = METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_6 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_4 , VAR_6 , VAR_3 ) ; }","['Delete TypeAccess', 'Delete TypeAccess']",1447
"private void step ( int VAR_1 ) { TYPE_1 step = METHOD_1 ( VAR_2 , VAR_1 ) ; if ( step == null ) { return ; } synchronized ( VAR_3 ) { VAR_3 . METHOD_2 ( ) ; } }","private void step ( int VAR_1 ) { METHOD_1 ( VAR_2 , VAR_1 ) ; synchronized ( VAR_3 ) { VAR_3 . METHOD_2 ( ) ; } }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1448
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . add ( 0 , VAR_3 , 0 , VAR_4 ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean result = super . METHOD_1 ( VAR_1 ) ; VAR_2 . add ( 0 , VAR_3 , 0 , VAR_4 ) ; return result ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete Literal']",1450
"public void METHOD_1 ( ) { java.lang.String name = VAR_1 . getName ( ) ; assertEquals ( STRING_1 , name ) ; }","public void METHOD_1 ( ) { assertEquals ( VAR_1 . getName ( ) , STRING_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1451
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Date VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; if ( ( listener ) != null ) { listener . METHOD_3 ( VAR_2 ) ; } return super . METHOD_1 ( VAR_1 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; return super . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1453
"public void METHOD_1 ( java.lang.String str ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( context , str , VAR_2 class ) ; }",public void METHOD_1 ( java.lang.String str ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",1455
private void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getText ( ) ; METHOD_1 ( ( VAR_1 + STRING_1 ) ) ; },private void METHOD_1 ( ) { java.lang.String name = VAR_2 . getText ( ) ; METHOD_1 ( ( name + STRING_1 ) ) ; },"['Update LocalVariable', 'Update VariableRead']",1457
public void METHOD_1 ( ) { VAR_1 = METHOD_2 ( ) . get ( 0 ) ; VAR_2 = METHOD_2 ( ) . get ( 1 ) ; METHOD_3 ( ) ; },public void METHOD_1 ( ) { java.lang.Double VAR_1 = METHOD_2 ( ) . get ( 0 ) ; java.lang.Double VAR_2 = METHOD_2 ( ) . get ( 1 ) ; },"['Insert LocalVariable', 'Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert TypeReference', 'Move Invocation', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldWrite', 'Delete Assignment', 'Delete Invocation']",1458
protected TYPE_1 METHOD_1 ( TYPE_2 c ) { TYPE_3 VAR_1 = ( ( TYPE_3 ) ( c ) ) ; TYPE_4 data = VAR_2 . METHOD_2 ( ) ; if ( data == null ) { return null ; } return new TYPE_5 ( data ) ; },protected TYPE_1 METHOD_1 ( TYPE_2 c ) { TYPE_3 VAR_1 = ( ( TYPE_3 ) ( c ) ) ; return new TYPE_5 ( VAR_2 . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",1459
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_2 . METHOD_2 ( VAR_1 ) . size ( ) ) > 0 ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean result = ( VAR_2 . METHOD_2 ( VAR_1 ) . size ( ) ) > 0 ; return result ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move BinaryOperator', 'Insert VariableRead']",1461
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 ; if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) . set ( VAR_1 ) ; TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) . set ( VAR_1 ) ; TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ; } },"['Move FieldRead', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",1462
"public void METHOD_1 ( android.view.View view ) { VAR_1 . i ( STRING_1 , STRING_2 ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { VAR_1 . i ( STRING_1 , STRING_2 ) ; android.content.Intent intent = new android.content.Intent ( ) ; METHOD_2 ( intent ) ; }","['Delete ThisAccess', 'Delete FieldRead']",1465
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( this ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( this ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1468
public java.lang.String METHOD_1 ( ) { long VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( ( VAR_1 - ( this . VAR_2 ) ) > INT_1 ) { METHOD_3 ( VAR_1 ) ; } return VAR_3 ; },public java.lang.String METHOD_1 ( ) { return VAR_3 ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1471
"public java.lang.String get ( TYPE_1 url ) { java.lang.String VAR_1 = url . METHOD_1 ( ) ; return VAR_2 . substring ( 1 , ( ( VAR_2 . length ( ) ) - 1 ) ) ; }",public java.lang.String get ( TYPE_1 url ) { return url . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation']",1472
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { java.lang.String VAR_2 = METHOD_2 ( VAR_1 , response ) ; VAR_1 . METHOD_3 ( VAR_2 ) . METHOD_4 ( VAR_1 , response ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { METHOD_2 ( VAR_1 , response ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1473
"final void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = METHOD_2 ( VAR_3 , VAR_1 ) ; METHOD_1 ( VAR_1 , VAR_2 ) ; }","final void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { METHOD_1 ( VAR_1 , METHOD_2 ( VAR_3 , VAR_1 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1477
public TYPE_1 remove ( int index ) { TYPE_1 VAR_1 = VAR_2 . remove ( index ) ; METHOD_1 ( ) ; return VAR_1 ; },public TYPE_1 remove ( int index ) { return VAR_2 . remove ( index ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead']",1478
public static boolean METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) . toLowerCase ( ) . trim ( ) ; return VAR_2 . startsWith ( VAR_3 ) ; },public static boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( STRING_1 ) . startsWith ( VAR_3 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",1480
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( STRING_1 , VAR_1 ) ; java.lang.Integer VAR_4 = VAR_5 . getInt ( STRING_2 ) ; return new TYPE_1 ( VAR_1 , VAR_4 ) ; }","public int METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( STRING_1 , VAR_1 ) ; return VAR_5 . getInt ( STRING_2 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall']",1481
"public boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { java.util.Set < java.lang.Long > VAR_3 = METHOD_2 ( VAR_2 ) ; if ( VAR_3 == null ) return false ; else return VAR_4 . contains ( java.lang.Long . METHOD_3 ( VAR_1 ) ) ; }","public boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { return METHOD_2 ( VAR_2 ) . contains ( java.lang.Long . METHOD_3 ( VAR_1 ) ) ; }","['Move Return', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1482
"public void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { java.lang.String VAR_3 = java.lang.String . METHOD_2 ( VAR_2 ) ; VAR_4 . setValue ( ( VAR_1 + ( VAR_5 ) ) , VAR_3 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { VAR_4 . setValue ( ( VAR_1 + ( VAR_5 ) ) , VAR_2 ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1483
public void execute ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_1 . METHOD_2 ( true ) ; return ; } VAR_1 . METHOD_3 ( VAR_2 ) ; },public void execute ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_1 ( ) ) == null ) { VAR_1 . METHOD_2 ( true ) ; return ; } VAR_1 . METHOD_3 ( VAR_1 . METHOD_1 ( ) ) ; },"['Move Invocation', 'Insert Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1484
public void METHOD_1 ( ) { for ( int i = ( VAR_1 . size ( ) ) - 1 ; i >= 0 ; i -- ) METHOD_2 ( VAR_1 . remove ( i ) ) ; },public void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) METHOD_2 ( VAR_1 . remove ( i ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Update UnaryOperator', 'Move Literal', 'Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",1485
"private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String msg ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 , msg ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String msg ) { VAR_1 . METHOD_3 ( VAR_3 , msg ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1486
"public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( 1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_3 ( STRING_1 ) ; VAR_3 . METHOD_4 ( STRING_2 , VAR_1 ) ; return VAR_3 ; }",public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return new TYPE_1 ( STRING_1 ) ; },"['Insert ConstructorCall', 'Insert FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1488
private void METHOD_1 ( TYPE_1 event ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 != null ) { METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; } },private void METHOD_1 ( TYPE_1 event ) { METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1489
private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( this . METHOD_2 ( VAR_2 ) ) ) ; return ( VAR_1 . METHOD_3 ( VAR_3 ) ) || ( VAR_1 . METHOD_3 ( VAR_4 ) ) ; },private boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_3 ( VAR_3 ) ) || ( VAR_1 . METHOD_3 ( VAR_4 ) ) ; },"['Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1490
"public TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } TYPE_1 out = METHOD_3 ( VAR_1 ) ; VAR_3 . put ( VAR_1 , out ) ; return out ; }",public TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } return METHOD_3 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1492
private void METHOD_1 ( ) { int VAR_1 = ( ( int ) ( ( TYPE_1 . METHOD_2 ( VAR_2 ) ) & - 1 ) ) ; if ( ( VAR_3 ) != VAR_1 ) throw new TYPE_2 ( STRING_1 ) ; },private void METHOD_1 ( ) { long VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; if ( ( VAR_3 ) != VAR_1 ) throw new TYPE_2 ( STRING_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator']",1494
protected void METHOD_1 ( char VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; java.lang.String VAR_2 = ( ( TYPE_1 ) ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) . getText ( ) ; METHOD_4 ( VAR_2 ) ; VAR_4 = 0 ; },protected void METHOD_1 ( char VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_4 = 0 ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1495
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 , VAR_4 ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( new android.content.Intent ( this , VAR_2 class ) ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1496
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 == ( VAR_4 ) ) { VAR_5 = VAR_6 . toString ( ) ; } return false ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_5 = VAR_6 . toString ( ) ; return false ; },"['Move Assignment', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1497
"private boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = VAR_1 & INT_1 ; int VAR_4 = VAR_2 & INT_1 ; return VAR_3 != VAR_4 ; }","private boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return false ; }","['Insert Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator']",1498
public void METHOD_1 ( ) throws TYPE_1 { java.lang.String type = STRING_1 ; TYPE_2 . METHOD_2 ( type ) ; },public void METHOD_1 ( ) throws TYPE_1 { java.lang.String type = STRING_1 ; java.lang.Object obj = TYPE_2 . METHOD_2 ( type ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation']",1499
public java.lang.String toString ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( INT_1 ) . append ( STRING_1 ) . append ( VAR_2 ) . append ( STRING_2 ) . append ( VAR_3 ) . append ( STRING_3 ) ; return VAR_4 . toString ( ) ; },public java.lang.String toString ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( INT_1 ) . append ( STRING_1 ) . append ( VAR_2 ) ; append ( STRING_2 ) ; append ( VAR_3 ) ; append ( STRING_3 ) ; return VAR_4 . toString ( ) ; },"['Insert Invocation', 'Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Move TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",1500
"private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( this . VAR_3 ) ; METHOD_5 ( VAR_2 ) ; }","private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; METHOD_5 ( TYPE_2 . METHOD_3 ( ) ) ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1502
public java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_4 ; } return null ; },public java.util.List < java.lang.String > METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_2 = VAR_3 . get ( id ) ; if ( VAR_2 != null ) { return VAR_4 ; } return null ; },"['Update Parameter', 'Update VariableRead']",1504
"TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 c = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , c ) ; return c ; }","void METHOD_1 ( TYPE_2 VAR_1 ) { METHOD_3 ( VAR_1 , METHOD_2 ( ) ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",1505
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 t = VAR_1 . METHOD_2 ( ) . METHOD_3 ( this ) ; VAR_2 . put ( VAR_1 , t ) ; return t ; }",public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( this ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1508
public void start ( ) { java.lang.Thread VAR_1 = new java.lang.Thread ( ( ( TYPE_1 ) ( this ) ) ) ; VAR_2 . start ( ) ; },public void start ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",1511
"public int METHOD_1 ( ) { java.lang.String VAR_1 = java.lang.String . METHOD_2 ( getInt ( VAR_2 , 0 ) ) ; return java.lang.Integer . METHOD_2 ( getString ( VAR_3 , VAR_1 ) ) ; }","public int METHOD_1 ( ) { return java.lang.Integer . METHOD_2 ( getString ( VAR_3 , java.lang.String . METHOD_2 ( getInt ( VAR_2 , 0 ) ) ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1513
"private long METHOD_1 ( long length ) { int VAR_1 = ( VAR_2 ) - ( VAR_3 ) ; return VAR_4 . min ( ( length / INT_1 ) , VAR_1 ) ; }","private long METHOD_1 ( long length ) { return VAR_4 . min ( ( length / INT_1 ) , VAR_2 ) ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",1515
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = getString ( VAR_2 ) ; java.lang.String VAR_3 = VAR_4 . METHOD_2 ( ) . toString ( ) ; return VAR_5 . equals ( VAR_3 ) ? null : VAR_3 ; },public java.lang.String METHOD_1 ( ) { return VAR_4 . METHOD_2 ( ) . toString ( ) . equals ( VAR_2 ) ? null : VAR_4 . METHOD_2 ( ) . toString ( ) ; },"['Move Invocation', 'Insert Invocation', 'Move TypeAccess', 'Insert Invocation', 'Insert TypeAccess', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead']",1517
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( ( ( VAR_3 ) | ( VAR_4 ) ) ) ; METHOD_3 ( intent ) ; METHOD_4 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1518
"public void METHOD_1 ( android.view.View VAR_1 ) { int position = VAR_2 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( context , ( STRING_1 + position ) , VAR_3 ) . show ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_3 ( context , STRING_1 , VAR_3 ) . show ( ) ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator']",1519
public void METHOD_1 ( ) throws TYPE_1 { java.lang.String type = VAR_1 . String class . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( type ) ; },public void METHOD_1 ( ) throws TYPE_1 { java.lang.String type = VAR_1 . String class . METHOD_2 ( ) ; java.lang.Object obj = TYPE_2 . METHOD_3 ( type ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation']",1520
public TYPE_1 remove ( int VAR_1 ) { TYPE_1 i = get ( VAR_1 ) ; VAR_2 . remove ( i ) ; return i ; },public TYPE_1 remove ( int VAR_1 ) { return VAR_2 . remove ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1521
"private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_1 != null ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( getContext ( ) . getString ( VAR_2 ) ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( getContext ( ) . getString ( VAR_2 ) ) ; } }","['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1525
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 . METHOD_3 ( VAR_1 . METHOD_4 ( new TYPE_5 ( context ) ) , new TYPE_6 ( ) , VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_4 . METHOD_3 ( VAR_1 . METHOD_4 ( new TYPE_5 ( context ) ) , new TYPE_6 ( ) , VAR_1 ) ; }","['Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",1526
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_6 ( ) ; VAR_2 . METHOD_5 ( ) ; },public void METHOD_1 ( ) { },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1527
public TYPE_1 METHOD_1 ( ) { TYPE_2 < TYPE_1 > node = VAR_1 ; VAR_2 . remove ( ) ; return node . METHOD_2 ( ) ; },public TYPE_1 METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1529
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( VAR_1 , VAR_2 ) ; METHOD_2 ( intent , 1 ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",1532
"public void METHOD_1 ( TYPE_1 i ) { java.lang.String value = getValue ( ) ; if ( value == null ) { return ; } i . METHOD_2 ( getName ( ) , getValue ( ) ) ; i . METHOD_3 ( getValue ( ) ) ; }","public void METHOD_1 ( TYPE_1 i ) { i . METHOD_2 ( getName ( ) , getValue ( ) ) ; i . METHOD_3 ( getValue ( ) ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1533
public void METHOD_1 ( TYPE_1 buffer ) { this . VAR_1 = buffer ; TYPE_2 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; },public void METHOD_1 ( TYPE_1 buffer ) { this . VAR_1 = buffer ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1534
"public java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) throws java.io.IOException { java.io.File VAR_2 = new java.io.File ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 ) ) ; return VAR_4 . toString ( VAR_2 , VAR_5 ) ; }","public java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) throws java.io.IOException { return VAR_4 . toString ( new java.io.File ( VAR_1 ) , VAR_5 ) ; }","['Insert ConstructorCall', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1535
java.lang.String METHOD_1 ( byte [ ] VAR_1 ) { java.lang.System.out.println ( ( STRING_1 + ( new java.lang.String ( VAR_1 ) ) ) ) ; java.lang.String VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; java.lang.System.out.println ( ( STRING_2 + VAR_2 ) ) ; return VAR_2 ; },java.lang.String METHOD_1 ( byte [ ] VAR_1 ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete BinaryOperator', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead']",1536
public boolean METHOD_1 ( java.lang.Class type ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . get ( type ) ; return ( VAR_1 != null ) && ( ( VAR_3 . size ( ) ) > 0 ) ; },public boolean METHOD_1 ( java.lang.Class type ) { return ( VAR_2 . get ( type ) ) != null ; },"['Update BinaryOperator', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator']",1537
"public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 , java.lang.String VAR_4 ) { TYPE_2 VAR_5 = TYPE_3 . METHOD_2 ( VAR_3 ) ; return TYPE_4 . METHOD_3 ( VAR_1 , VAR_2 , null , VAR_5 , VAR_4 ) ; }","public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 , java.lang.String VAR_4 ) { return TYPE_4 . METHOD_3 ( VAR_1 , VAR_2 , null , VAR_3 , VAR_4 ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1538
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ; VAR_1 . METHOD_5 ( STRING_3 , VAR_2 ) ; TYPE_2 . METHOD_6 ( new TYPE_3 ( STRING_4 , VAR_1 ) ) ; }","public void METHOD_1 ( ) { TYPE_2 . METHOD_6 ( new TYPE_3 ( STRING_4 , METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Insert ConstructorCall', 'Move FieldRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation']",1542
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.System.out.println ( ( STRING_1 + ( VAR_1 . METHOD_1 ( ) ) ) ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation']",1543
"public void METHOD_1 ( android.view.View VAR_1 ) { int VAR_2 = METHOD_2 ( ) ; if ( VAR_2 != ( VAR_3 ) ) { METHOD_3 ( ) . METHOD_4 ( VAR_2 , true ) ; } }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) , true ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1545
"private static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_3 , VAR_4 ) ; VAR_2 . METHOD_6 ( ) ; }","public static void METHOD_1 ( android.content.Context context ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( context ) . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_3 , VAR_4 ) ; VAR_2 . METHOD_6 ( ) ; }","['Insert Parameter', 'Update Wra', 'Insert TypeReference', 'Insert VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1547
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( VAR_3 ) ; return VAR_2 ; },public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_3 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1548
public void METHOD_1 ( int type ) { TYPE_1 VAR_1 = VAR_2 . get ( type ) ; if ( null != VAR_1 ) { VAR_2 . remove ( type ) ; VAR_1 . METHOD_2 ( ) ; } },public void METHOD_1 ( int type ) { if ( null != ( VAR_2 . get ( type ) ) ) { VAR_2 . get ( type ) . METHOD_2 ( ) ; VAR_2 . remove ( type ) ; } },"['Move Invocation', 'Move Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1549
"public void METHOD_1 ( float VAR_1 , float VAR_2 , TYPE_1 VAR_3 , int VAR_4 ) { VAR_5 = VAR_3 ; TYPE_2 VAR_6 = TYPE_2 . METHOD_2 ( name ) ; VAR_7 . METHOD_3 ( VAR_6 ) ; }","public void METHOD_1 ( float VAR_1 , float VAR_2 , TYPE_1 VAR_3 , int VAR_4 ) { VAR_5 = VAR_3 ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1550
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_1 ( ) ; java.lang.System.out.println ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation']",1551
public TYPE_1 METHOD_1 ( TYPE_2 element ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . getType ( ) . METHOD_2 ( ) ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( TYPE_2 element ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . getType ( ) ) ) ; return VAR_1 ; },"['Move Invocation', 'Move TypeReference', 'Delete Invocation']",1552
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = METHOD_2 ( ) . getInt ( STRING_1 ) ; int VAR_3 = METHOD_2 ( ) . getInt ( STRING_2 ) ; METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = METHOD_2 ( ) . getInt ( STRING_1 ) ; METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1554
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 data ) { TYPE_2 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( STRING_1 , TYPE_4 . METHOD_3 ( ) ) ; this . METHOD_4 ( VAR_3 , VAR_2 , VAR_1 , true ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 data ) { }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",1555
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; },"['Insert ConstructorCall', 'Delete Invocation']",1557
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( VAR_3 , 0 , 0 , this ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Literal', 'Delete ThisAccess', 'Delete Invocation']",1563
"public float height ( ) { float min = min ( ) ; float VAR_1 = 0 ; for ( TYPE_1 VAR_2 : VAR_3 ) { VAR_1 = TYPE_2 . METHOD_1 ( VAR_1 , VAR_4 . y ) ; } return VAR_1 - min ; }","public float height ( ) { float VAR_1 = 0 ; for ( TYPE_1 VAR_2 : VAR_3 ) { VAR_1 = TYPE_2 . METHOD_1 ( VAR_1 , VAR_4 . y ) ; } return VAR_1 ; }","['Move VariableRead', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator']",1564
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( new java.util.Date ( ) ) ; VAR_5 . METHOD_1 ( VAR_1 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_4 ( new java.util.Date ( ) ) ; VAR_5 . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1566
private int METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( this ) ; int result = VAR_1 . METHOD_2 ( ) ; if ( result == ( VAR_2 ) ) METHOD_3 ( ) ; return result ; },private int METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( this ) ; return VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",1567
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.String id = VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( id ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1569
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; android.content.Intent intent = getIntent ( ) ; intent . METHOD_4 ( STRING_1 , STRING_2 ) ; METHOD_5 ( VAR_3 , intent ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1570
"public static void main ( java.lang.String [ ] args ) { TYPE_1 < ? > f = TYPE_1 . METHOD_1 ( INT_1 , ( ) - > new TYPE_2 ( ) , ( ) - > new TYPE_3 ( ) ) ; f . METHOD_2 ( ) ; }","public static void main ( java.lang.String [ ] args ) { TYPE_1 < ? > f = TYPE_1 . METHOD_1 ( 0 , null , null ) ; f . METHOD_2 ( ) ; }","['Insert Invocation', 'Insert Invocation', 'Insert VariableRead', 'Insert TypeAccess', 'Insert Literal', 'Insert Literal', 'Insert Literal']",1572
"public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_5 . METHOD_5 ( VAR_1 ) ; }","public void METHOD_1 ( ) { TYPE_1 < java.lang.CharSequence > VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_5 . METHOD_5 ( VAR_1 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Insert TypeReference', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess', 'Delete TypeAccess']",1573
"public static int METHOD_1 ( ) { final int min = INT_1 ; final int VAR_1 = INT_2 ; return TYPE_1 . METHOD_2 ( min , ( ( int ) ( VAR_1 * ( TYPE_2 . METHOD_3 ( ) ) ) ) ) ; }","public static int METHOD_1 ( ) { final int min = 1 ; final int VAR_1 = INT_1 ; return TYPE_1 . METHOD_2 ( min , ( ( int ) ( VAR_1 * ( TYPE_2 . METHOD_3 ( ) ) ) ) ) ; }","['Move LocalVariable', 'Update LocalVariable', 'Update LocalVariable', 'Insert Literal', 'Delete FieldRead']",1574
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String result = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , STRING_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String result = TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; }","['Move VariableRead', 'Delete Invocation', 'Delete Invocation']",1577
public static void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = ( ( ( ( TYPE_1 . METHOD_2 ( ) ) + STRING_1 ) + ( TYPE_1 . METHOD_3 ( ) ) ) + STRING_1 ) + VAR_1 ; java.lang.System.out.println ( VAR_2 ) ; },public static void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.System.out.println ( ( ( ( ( ( TYPE_1 . METHOD_2 ( ) ) + STRING_1 ) + ( TYPE_1 . METHOD_3 ( ) ) ) + STRING_1 ) + VAR_1 ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1578
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , 0 ) ; METHOD_5 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",1579
"public int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = METHOD_2 ( VAR_1 ) ; int VAR_3 = VAR_4 . METHOD_3 ( VAR_1 ) ; return ( VAR_4 . METHOD_4 ( VAR_1 , VAR_2 ) ) - VAR_3 ; }","public int METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_4 . METHOD_4 ( VAR_1 , METHOD_2 ( VAR_1 ) ) ) - ( VAR_4 . METHOD_3 ( VAR_1 ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1580
"public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; return TYPE_1 . METHOD_3 ( VAR_2 , STRING_2 ) ; }","public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1583
public void METHOD_1 ( ) throws java.lang.Throwable { if ( ( this . VAR_1 ) != null ) { TYPE_1 VAR_2 = new TYPE_1 ( ( STRING_1 + ( VAR_3 ) ) ) ; VAR_2 . METHOD_2 ( this . VAR_1 ) ; throw VAR_2 ; } },"public void METHOD_1 ( ) throws java.lang.Throwable { if ( ( this . VAR_1 ) != null ) { throw new TYPE_1 ( ( STRING_1 + ( VAR_3 ) ) , this . VAR_1 ) ; } }","['Move ConstructorCall', 'Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1584
"public boolean contains ( TYPE_1 VAR_1 ) { TYPE_2 < TYPE_1 > VAR_2 = new TYPE_2 ( VAR_3 , VAR_1 ) ; return VAR_4 . contains ( VAR_2 ) ; }",public boolean contains ( TYPE_1 VAR_1 ) { return VAR_4 . contains ( VAR_1 ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1585
private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 ; if ( ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) return ; VAR_1 . METHOD_1 ( ) ; },private void METHOD_1 ( ) { if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) return ; VAR_2 . METHOD_1 ( ) ; },"['Insert TypeAccess', 'Move FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",1586
"public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 . show ( METHOD_3 ( ) , STRING_1 ) ; }","public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; VAR_4 . show ( METHOD_3 ( ) , STRING_1 ) ; }","['Insert ConstructorCall', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1587
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( this ) . METHOD_2 ( VAR_3 ) ; if ( ! ( VAR_4 . isEmpty ( ) ) ) { VAR_2 . METHOD_3 ( VAR_5 ) ; } VAR_6 . show ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { new TYPE_1 ( this ) . METHOD_2 ( VAR_3 ) . show ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeAccess']",1588
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_1 ) ; TYPE_2 VAR_3 = METHOD_4 ( ) ; VAR_3 . METHOD_5 ( new TYPE_3 ( this . METHOD_6 ( ) . getColor ( VAR_4 ) ) ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_1 ) ; return true ; }","['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Invocation']",1589
public static void main ( java.lang.String [ ] args ) { TYPE_1 context = new TYPE_1 ( STRING_1 ) ; TYPE_2 VAR_1 = context . METHOD_1 ( VAR_2 class ) ; VAR_1 . METHOD_2 ( ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1590
"public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( METHOD_3 ( VAR_2 class , STRING_1 ) , METHOD_4 ( ) ) ; VAR_3 . execute ( ) ; METHOD_5 ( ""true"" ) ; }","public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( METHOD_3 ( STRING_1 ) , METHOD_4 ( ) ) ; VAR_3 . execute ( ) ; METHOD_5 ( ""true"" ) ; }",['Delete TypeAccess'],1591
"private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_3 ) != null ) { final TYPE_2 result = new TYPE_2 ( VAR_4 , VAR_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( result ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) != null ) { final TYPE_2 result = new TYPE_2 ( VAR_4 , VAR_1 ) ; VAR_3 . METHOD_2 ( result ) ; } }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1593
public boolean METHOD_1 ( TYPE_1 item ) { return ( ( item . METHOD_2 ( ) ) == ( VAR_1 ) ) || ( super . METHOD_1 ( item ) ) ; },public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; return ( id == ( VAR_1 ) ) || ( super . METHOD_1 ( item ) ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",1594
"public void METHOD_1 ( ) { if ( VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( intent ) ; METHOD_3 ( ) ; } super . METHOD_1 ( ) ; METHOD_4 ( VAR_3 , VAR_4 ) ; }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_4 ( VAR_3 , VAR_4 ) ; }","['Delete FieldRead', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1595
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; TYPE_4 VAR_4 = new TYPE_4 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",1596
"public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_3 > VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 data = new TYPE_2 ( ) ; data . METHOD_3 ( VAR_1 ) ; return new TYPE_1 < TYPE_2 > ( data , VAR_3 ) ; }","public TYPE_1 < java.util.List < TYPE_3 > > METHOD_1 ( ) { return new TYPE_1 < java.util.List < TYPE_3 > > ( VAR_2 . METHOD_2 ( ) , VAR_3 ) ; }","['Update TypeReference', 'Move TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1601
"protected java.util.Map < java.lang.String , java.util.Map > METHOD_1 ( java.lang.Integer ... params ) { java.util.Map < java.lang.String , java.util.Map > result = VAR_1 . METHOD_2 ( VAR_2 ) ; return result ; }","protected java.util.Map < java.lang.String , java.util.Map > METHOD_1 ( java.lang.Integer ... params ) { return VAR_1 . METHOD_2 ( VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1602
"protected void METHOD_1 ( TYPE_1 value ) { int index = VAR_1 . get ( VAR_2 . METHOD_2 ( value ) ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( value ) , ( STRING_1 + index ) ) ; }","protected void METHOD_1 ( TYPE_1 value ) { int index = VAR_1 . get ( value ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( value ) , ( STRING_1 + index ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1603
public boolean METHOD_1 ( java.net.URL url ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( url ) ; return ( VAR_1 != null ) && ( ( VAR_1 . METHOD_3 ( ) ) < INT_1 ) ; },public boolean METHOD_1 ( java.net.URL url ) throws TYPE_1 { return ( METHOD_2 ( url ) . METHOD_3 ( ) ) < INT_1 ; },"['Update BinaryOperator', 'Insert Invocation', 'Move FieldRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",1604
"public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { TYPE_2 VAR_2 = VAR_3 . get ( i ) ; VAR_4 . setText ( VAR_2 . METHOD_2 ( ) ) ; VAR_5 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",1605
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { return METHOD_2 ( new TYPE_1 ( VAR_1 ) ) ; } return VAR_2 ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . get ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",1606
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.ArrayList < TYPE_2 > VAR_2 = METHOD_2 ( ) ; java.util.List < TYPE_1 > list = new java.util.LinkedList < > ( ) ; VAR_3 . add ( VAR_1 ) ; return list ; },public java.util.List < TYPE_1 > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_1 > list = new java.util.LinkedList < > ( ) ; VAR_3 . add ( VAR_1 ) ; return list ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable']",1607
"public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) . add ( VAR_4 , VAR_3 ) . commit ( ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",1610
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_3 . METHOD_3 ( STRING_1 , STRING_2 ) ; return VAR_3 ; }",public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; return new TYPE_3 ( VAR_2 ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1611
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ( ( TYPE_3 ) ( view ) ) ) ; VAR_1 . METHOD_2 ( ( ( TYPE_3 ) ( view ) ) . METHOD_3 ( ) ) ; return new TYPE_4 ( VAR_1 ) ; },private TYPE_1 METHOD_1 ( ) { return new TYPE_4 ( new TYPE_2 ( ( ( TYPE_3 ) ( view ) ) ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",1612
"public static TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , TYPE_2 . METHOD_3 ( VAR_3 ) . METHOD_4 ( VAR_2 ) . array ( ) , VAR_4 , true ) ; }","public static TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { return new TYPE_1 ( VAR_1 , TYPE_2 . METHOD_3 ( VAR_3 ) . METHOD_4 ( VAR_2 ) . array ( ) ) ; }","['Insert ConstructorCall', 'Move VariableRead', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",1613
public void METHOD_1 ( ) { java.util.Set VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; for ( java.lang.Object VAR_3 : VAR_1 ) { VAR_2 . METHOD_4 ( ( ( java.lang.String ) ( VAR_3 ) ) ) ; } },public void METHOD_1 ( ) { for ( java.lang.Object VAR_3 : VAR_2 . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( ( ( java.lang.String ) ( VAR_3 ) ) ) ; } },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1614
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( STRING_2 ) ; return VAR_3 ; }","public java.lang.String METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { java.lang.System.out.println ( STRING_1 ) ; return STRING_2 ; }","['Update TypeReference', 'Move FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1615
protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . getName ( ) ) ; VAR_1 . METHOD_3 ( ) . METHOD_5 ( VAR_2 ) ; return VAR_1 ; },protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . getName ( ) ) ; VAR_1 . METHOD_3 ( ) . METHOD_5 ( VAR_2 ) ; return VAR_1 ; },['Update TypeAccess'],1616
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_2 . METHOD_2 ( ) ) ) ; TYPE_4 VAR_4 = VAR_2 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( VAR_3 , VAR_4 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_2 . METHOD_2 ( ) ) ) ; VAR_5 . METHOD_4 ( VAR_3 ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1617
"public java.lang.Boolean METHOD_1 ( java.lang.String VAR_1 ) { long value = this . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; return value >= 0 ; }","public java.lang.Boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( this . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ) >= 0 ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1618
public synchronized java.lang.Object get ( ) throws TYPE_1 { while ( VAR_1 . isEmpty ( ) ) METHOD_1 ( ) ; return VAR_1 . remove ( 0 ) ; },public synchronized java.lang.Object get ( ) throws TYPE_1 { while ( VAR_1 . isEmpty ( ) ) METHOD_1 ( ) ; java.lang.Object obj = VAR_1 . remove ( 0 ) ; return obj ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",1620
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; android.content.Intent intent = getIntent ( ) ; java.lang.String VAR_3 = intent . METHOD_3 ( VAR_4 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",1621
public void METHOD_1 ( java.lang.String name ) { java.lang.String VAR_1 = VAR_2 . get ( name ) ; TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 . remove ( name ) ; VAR_3 . METHOD_3 ( ) . remove ( VAR_1 ) ; },public void METHOD_1 ( java.lang.String name ) { TYPE_1 . METHOD_2 ( VAR_2 . get ( name ) ) ; VAR_2 . remove ( name ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1622
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; TYPE_4 . METHOD_3 ( this , view ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1623
public void METHOD_1 ( ) { TYPE_1 VAR_1 = this . VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = this . VAR_2 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_3 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { TYPE_2 VAR_3 = this . VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1624
"public boolean METHOD_1 ( TYPE_1 target , float VAR_1 ) { TYPE_2 VAR_2 = target . METHOD_2 ( ) ; if ( METHOD_3 ( VAR_2 ) ) { METHOD_4 ( VAR_2 , null ) ; return true ; } return false ; }","public boolean METHOD_1 ( TYPE_1 target , float VAR_1 ) { return false ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1626
public int METHOD_1 ( ) { int VAR_1 = VAR_2 ; ( VAR_2 ) ++ ; return VAR_1 ; },public int METHOD_1 ( ) { return ( VAR_2 ) ++ ; },"['Move UnaryOperator', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",1627
public TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; return VAR_3 . get ( VAR_2 ) ; },public TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { return VAR_3 . get ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1629
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( VAR_4 ) ; TYPE_2 VAR_5 = VAR_2 . METHOD_2 ( VAR_6 ) ; return VAR_3 . METHOD_3 ( op , VAR_5 ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return false ; }","['Insert Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",1630
"public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( null ) ; METHOD_3 ( ) ; boolean VAR_2 = METHOD_4 ( ) ; METHOD_5 ( VAR_2 ) ; if ( VAR_2 ) { METHOD_6 ( TYPE_2 . METHOD_7 ( STRING_1 ) , VAR_3 ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_5 ( false ) ; METHOD_2 ( null ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Move Invocation', 'Move Invocation', 'Insert Literal', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1632
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( ) ; },public void METHOD_1 ( ) { METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1633
"public void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) { public void METHOD_2 ( ) { METHOD_3 ( ) ; METHOD_4 ( VAR_3 , VAR_1 , listener ) ; } } ; METHOD_5 ( VAR_2 ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) { public void METHOD_2 ( ) { METHOD_4 ( VAR_3 , VAR_1 , listener ) ; } } ; METHOD_5 ( VAR_2 ) ; }",['Delete Invocation'],1635
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ( VAR_2 - VAR_6 ) ) ; VAR_5 . METHOD_4 ( VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { parameters . METHOD_3 ( ( VAR_2 - VAR_6 ) ) ; VAR_5 . METHOD_4 ( parameters ) ; }","['Insert FieldRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1636
"public boolean METHOD_1 ( android.view.View VAR_1 ) { int VAR_2 = VAR_3 . METHOD_2 ( ) ; return ( VAR_2 != ( VAR_4 ) ) && ( VAR_5 . METHOD_3 ( VAR_2 , VAR_6 , VAR_3 ) ) ; }","public boolean METHOD_1 ( android.view.View VAR_1 ) { return VAR_5 . METHOD_3 ( VAR_3 . METHOD_2 ( ) , VAR_6 , VAR_3 ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1637
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object args ) { java.lang.String className = VAR_2 . getName ( ) . toLowerCase ( ) ; for ( java.lang.String type : VAR_3 ) if ( VAR_4 . contains ( VAR_5 . toLowerCase ( ) ) ) VAR_6 = true ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object args ) { for ( java.lang.String type : VAR_3 ) if ( VAR_2 . getName ( ) . contains ( type ) ) VAR_6 = true ; }","['Update Invocation', 'Move Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1640
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_3 class ) ; VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_3 class ) ; VAR_1 . METHOD_4 ( ) ; },"['Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1641
"public static TYPE_1 METHOD_1 ( android.content.Context context ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( context . METHOD_3 ( ) , VAR_2 ) ; TYPE_1 VAR_3 = TYPE_1 . METHOD_4 ( VAR_1 , INT_1 , INT_1 , false ) ; return VAR_3 ; }","public static TYPE_1 METHOD_1 ( android.content.Context context ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( context . METHOD_3 ( ) , VAR_2 ) ; return VAR_1 ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1642
"public TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( true ) ; return param ( METHOD_3 ( VAR_3 , new TYPE_2 ( VAR_4 ) , VAR_1 ) , name ) ; }","public TYPE_1 METHOD_1 ( java.lang.String name ) { return param ( METHOD_3 ( VAR_3 , new TYPE_2 ( VAR_4 ) , new TYPE_2 ( VAR_2 ) ) , name ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",1643
private TYPE_1 METHOD_1 ( ) { TYPE_2 TYPE_3 = TYPE_2 . METHOD_2 ( ) ; if ( TYPE_3 == null ) { return null ; } TYPE_1 VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 class ) ; return VAR_1 ; },private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 class ) ; return VAR_1 ; },"['Update LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",1647
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { TYPE_1 item = TYPE_3 . METHOD_2 ( ) . METHOD_1 ( VAR_2 ) ; return item ; }","public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int id ) { TYPE_1 item = TYPE_3 . METHOD_1 ( VAR_1 , id ) ; return item ; }","['Update Parameter', 'Move TypeAccess', 'Update VariableRead', 'Insert VariableRead', 'Delete Invocation']",1650
public java.lang.String METHOD_1 ( ) { java.lang.String value = METHOD_2 ( STRING_1 ) ; if ( value == STRING_2 ) { return null ; } else { return value ; } },public java.lang.String METHOD_1 ( ) { return METHOD_2 ( STRING_1 ) ; },"['Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",1651
"private void METHOD_1 ( ) { android.view.View VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 , null ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_4 . show ( METHOD_4 ( ) , STRING_1 ) ; }","private void METHOD_1 ( ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_4 . show ( METHOD_4 ( ) , STRING_1 ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable']",1652
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.LinkedList < TYPE_1 > ( ) ; VAR_3 . add ( VAR_1 ) ; TYPE_2 VAR_4 = new TYPE_2 ( false ) ; return METHOD_1 ( VAR_2 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.LinkedList < TYPE_1 > ( ) ; VAR_3 . add ( VAR_1 ) ; return METHOD_1 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable']",1653
public double METHOD_1 ( TYPE_1 data ) { java.lang.System.err.println ( STRING_1 ) ; java.util.LinkedList < TYPE_1 > VAR_1 = new java.util.LinkedList < TYPE_1 > ( ) ; VAR_2 . add ( data ) ; return METHOD_1 ( VAR_1 ) . get ( 0 ) ; },public double METHOD_1 ( TYPE_1 data ) { return - 1 ; },"['Insert UnaryOperator', 'Insert Literal', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",1654
public double METHOD_1 ( double VAR_1 ) { double VAR_2 = java.lang.Math.round ( ( VAR_1 * FLOAT_1 ) ) ; return VAR_2 / FLOAT_1 ; },public double METHOD_1 ( double VAR_1 ) { int VAR_2 = ( ( int ) ( VAR_1 * FLOAT_1 ) ) ; return VAR_2 / FLOAT_1 ; },"['Update TypeReference', 'Move BinaryOperator', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation']",1655
"private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { java.util.HashSet < TYPE_2 > VAR_3 = new java.util.HashSet < TYPE_2 > ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 = METHOD_1 ( VAR_2 , VAR_3 ) ; } }",private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 = METHOD_1 ( VAR_2 ) ; } },"['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1656
public java.util.ArrayList < TYPE_1 > METHOD_1 ( int VAR_1 ) { java.util.ArrayList < TYPE_1 > list = METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) VAR_3 . add ( VAR_2 ) ; return list ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( int VAR_1 ) { java.util.ArrayList < TYPE_1 > list = METHOD_1 ( VAR_1 ) ; VAR_3 . add ( METHOD_2 ( VAR_1 ) ) ; return list ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1657
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; java.lang.String VAR_2 = STRING_1 ; java.lang.String VAR_3 = VAR_4 . getName ( ) ; assertTrue ( ( VAR_2 == VAR_3 ) ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; java.lang.String VAR_2 = STRING_1 ; assertTrue ( ( VAR_2 == ( VAR_4 . getName ( ) ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1658
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1659
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , java.lang.String VAR_3 , double VAR_4 ) { TYPE_2 VAR_5 = new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 ) ; return METHOD_2 ( VAR_5 , VAR_4 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int a ) { }","['Update Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Return']",1660
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; VAR_1 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1661
private boolean METHOD_1 ( ) { double a = VAR_1 . METHOD_2 ( ) ; boolean b = a <= ( VAR_2 ) ; return b ; },private boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) ) <= ( VAR_2 ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",1663
"public TYPE_1 METHOD_1 ( android.content.Intent intent ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_4 ) ; return VAR_3 . METHOD_2 ( ) ; }",public TYPE_1 METHOD_1 ( android.content.Intent intent ) { return null ; },"['Insert Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1665
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , INT_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 , INT_1 ) ; assertEquals ( true , VAR_3 . equals ( VAR_2 ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; assertEquals ( true , VAR_3 . equals ( VAR_2 ) ) ; }","['Insert LocalVariable', 'Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Move TypeReference', 'Insert ConstructorCall', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable']",1667
protected TYPE_1 METHOD_1 ( java.lang.Integer ... params ) { try { TYPE_1 p = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( params [ 0 ] ) ; return p ; } catch ( java.lang.Exception VAR_1 ) { return null ; } },protected TYPE_1 METHOD_1 ( java.lang.Integer ... params ) { try { return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( params [ 0 ] ) ; } catch ( java.lang.Exception VAR_1 ) { return null ; } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1669
private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } },private void METHOD_1 ( ) { VAR_2 . METHOD_3 ( VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1671
public boolean METHOD_1 ( ) { java.util.Date VAR_1 = new java.util.Date ( ) ; java.util.Date VAR_2 = this . METHOD_2 ( ) ; boolean VAR_3 = VAR_1 . METHOD_3 ( VAR_2 ) ; return VAR_3 ; },public boolean METHOD_1 ( ) { return VAR_3 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1672
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = TYPE_2 . METHOD_3 ( VAR_1 ) ; return METHOD_4 ( VAR_2 , TYPE_2 . METHOD_5 ( VAR_3 ) ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { return METHOD_4 ( TYPE_2 . METHOD_2 ( VAR_1 ) , TYPE_2 . METHOD_3 ( VAR_1 ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1673
public java.lang.String METHOD_1 ( ) { this . VAR_1 = ! ( this . VAR_1 ) ; java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; return VAR_2 + STRING_1 ; },public void METHOD_1 ( ) { this . VAR_1 = ! ( this . VAR_1 ) ; },"['Update TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Return']",1674
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; return new TYPE_1 ( VAR_1 ) ; },private TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( new TYPE_2 ( ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1675
public java.lang.String METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . execute ( STRING_1 ) ; VAR_2 . execute ( STRING_2 ) ; new TYPE_2 ( ) . METHOD_2 ( ) ; return STRING_3 ; },public java.lang.String METHOD_1 ( ) throws java.lang.Exception { new TYPE_2 ( ) . METHOD_2 ( ) ; return STRING_3 ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1677
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",1678
"private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String name = java.lang.String . METHOD_3 ( VAR_3 . get ( VAR_4 ) ) ; return name ; }","private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String name = ( ( java.lang.String ) ( VAR_3 . get ( VAR_4 ) ) ) ; return name ; }","['Move Invocation', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation']",1679
public static void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( ) ; } },public static void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1680
"public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) . replace ( VAR_3 , VAR_1 , VAR_4 ) . METHOD_4 ( null ) . commit ( ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) . replace ( VAR_3 , VAR_1 , VAR_4 ) . METHOD_4 ( null ) . commit ( ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",1682
"public long METHOD_1 ( java.lang.String key , long VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( key , VAR_1 ) ; }","public long METHOD_1 ( java.lang.String key , long VAR_1 ) { long value = METHOD_2 ( ) . METHOD_1 ( key , VAR_1 ) ; return value ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",1683
"public void METHOD_1 ( double VAR_1 ) { TYPE_1 value = new TYPE_1 ( ( STRING_1 + VAR_1 ) ) . METHOD_2 ( INT_1 , VAR_2 ) ; VAR_3 = value . METHOD_3 ( ) ; METHOD_4 ( ) ; }",public void METHOD_1 ( double VAR_1 ) { VAR_3 = VAR_1 ; METHOD_4 ( ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete ConstructorCall', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1684
"public final boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 type = TYPE_3 . METHOD_2 ( VAR_2 ) ; return ( VAR_3 . equals ( VAR_4 . getType ( ) ) ) || ( METHOD_1 ( VAR_1 , type . METHOD_3 ( ) ) ) ; }","public final boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return VAR_3 . equals ( TYPE_3 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator']",1685
public int METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ( ( VAR_3 . size ( ) ) - 1 ) ) ; int VAR_4 = VAR_3 . get ( VAR_1 ) ; VAR_3 . remove ( VAR_1 ) ; return VAR_4 ; },public int METHOD_1 ( ) { int VAR_1 = ( VAR_2 . METHOD_2 ( VAR_3 . size ( ) ) ) - 1 ; int VAR_4 = VAR_3 . get ( VAR_1 ) ; VAR_3 . remove ( VAR_1 ) ; return VAR_4 ; },"['Move BinaryOperator', 'Move Invocation', 'Move Invocation']",1686
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) java.lang.System.out.println ( VAR_1 ) ; return VAR_2 ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . get ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",1687
public void start ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_2 = VAR_1 ; VAR_3 = new TYPE_2 ( ) ; METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; TYPE_3 p = new TYPE_3 ( STRING_1 ) ; METHOD_4 ( ) ; },public void start ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_2 = VAR_1 ; VAR_3 = new TYPE_2 ( ) ; METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable']",1688
"public java.lang.String METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) ; int VAR_4 = VAR_2 . METHOD_4 ( ) ; VAR_3 . METHOD_3 ( STRING_2 , VAR_4 ) ; return VAR_5 ; }","public java.lang.String METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) ; return VAR_5 ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1691
public TYPE_1 get ( TYPE_2 key ) { TYPE_3 element = VAR_1 . get ( VAR_2 . toString ( ) ) ; return element == null ? null : ( ( TYPE_1 ) ( element . METHOD_1 ( ) ) ) ; },public TYPE_1 get ( TYPE_2 key ) { TYPE_3 element = VAR_1 . get ( key ) ; return element == null ? null : ( ( TYPE_1 ) ( element . METHOD_1 ( ) ) ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1692
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 < java.lang.Integer > VAR_2 = new TYPE_2 < java.lang.Integer > ( ) ; TYPE_3 < java.lang.Integer > VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1696
private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_3 ( ) ; return ( VAR_1 != null ) && ( VAR_2 != null ) ; },private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; return VAR_1 != null ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1698
"protected TYPE_1 METHOD_1 ( ) { TYPE_2 a = VAR_1 . METHOD_2 ( ) ; TYPE_2 b = VAR_1 . METHOD_2 ( ) ; TYPE_2 c = VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( a , b , c ) ; return VAR_2 ; }",protected TYPE_1 METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1699
public TYPE_1 METHOD_1 ( java.lang.String type ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_4 . getType ( ) . equals ( type ) ) { VAR_1 = VAR_2 ; break ; } } return VAR_1 ; },public TYPE_1 METHOD_1 ( java.lang.String type ) { TYPE_1 VAR_1 = null ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_4 . getType ( ) . equals ( type ) ) { VAR_1 = VAR_2 ; break ; } } return VAR_1 ; },"['Insert Literal', 'Delete ConstructorCall']",1700
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String content ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , content ) ; TYPE_1 VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; return VAR_5 ; }","public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String content ) { return VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , content ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1703
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.System.out.println ( STRING_1 ) ; VAR_1 . METHOD_1 ( ) ; int result = TYPE_1 . METHOD_2 ( null , STRING_2 , STRING_3 , VAR_2 ) ; assertEquals ( VAR_3 , result ) ; }",public void METHOD_1 ( ) throws java.lang.Exception { java.lang.System.out.println ( STRING_1 ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1704
public int METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { return - 1 ; } METHOD_3 ( ) ; return VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete Invocation', 'Delete Return']",1705
"public void METHOD_1 ( int id ) throws TYPE_1 { int VAR_1 = METHOD_2 ( id ) ; METHOD_3 ( VAR_2 , VAR_1 ) ; VAR_3 . remove ( VAR_1 ) ; TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; }","public void METHOD_1 ( int id ) throws TYPE_1 { METHOD_3 ( VAR_2 , id ) ; VAR_3 . remove ( id ) ; TYPE_2 . METHOD_4 ( ) . METHOD_5 ( id ) ; }","['Move VariableRead', 'Update VariableRead', 'Update VariableRead', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1706
"protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { TYPE_1 VAR_3 = VAR_2 . METHOD_2 ( VAR_1 ) ; return ( VAR_3 . METHOD_3 ( ) ) && ( VAR_3 . METHOD_4 ( ) ) ? VAR_3 : null ; }","protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { return ( VAR_2 . METHOD_3 ( ) ) && ( VAR_2 . METHOD_4 ( ) ) ? VAR_2 : null ; }","['Update VariableRead', 'Update Invocation', 'Move Invocation', 'Update VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1711
public static TYPE_1 METHOD_1 ( TYPE_1 ... args ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( args ) ; return VAR_1 ; },public static TYPE_1 METHOD_1 ( TYPE_1 ... args ) { return new TYPE_2 ( ) . METHOD_2 ( args ) ; },"['Move Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1712
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 result = METHOD_2 ( VAR_1 , STRING_1 ) ; result . METHOD_3 ( STRING_2 , STRING_3 ) ; return result ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1714
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; for ( TYPE_1 c : VAR_2 ) { VAR_1 += c + STRING_1 ; } return VAR_1 ; },public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; for ( char c : VAR_2 ) { VAR_1 += c + STRING_1 ; } return VAR_1 ; },['Update TypeReference'],1715
protected final void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . METHOD_5 ( ) ; } finally { VAR_1 . METHOD_6 ( ) ; } },protected final void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_4 ( ) ; try { METHOD_3 ( ) . METHOD_5 ( ) ; } finally { METHOD_2 ( ) . METHOD_6 ( ) ; } },"['Move Invocation', 'Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Insert Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1716
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; java.lang.System.out.println ( STRING_1 ) ; VAR_1 . METHOD_2 ( ) ; },public static void main ( java.lang.String [ ] args ) { new TYPE_1 ( ) . METHOD_1 ( ) ; },"['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1717
public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { java.util.Date VAR_1 = new java.util.Date ( ) ; return ( ( TYPE_1 . METHOD_2 ( ) . size ( ) ) == 0 ) || ( VAR_1 . METHOD_3 ( VAR_2 ) ) ; },public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { return ( TYPE_1 . METHOD_2 ( ) . size ( ) ) == 0 ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",1718
public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 { TYPE_3 date = METHOD_2 ( VAR_1 ) ; return METHOD_1 ( date ) ; },public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 { return new TYPE_1 ( METHOD_2 ( VAR_1 ) . getTime ( ) ) ; },"['Insert ConstructorCall', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1719
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_3 ) ( METHOD_3 ( ) . METHOD_4 ( VAR_4 ) ) ) . METHOD_5 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",1720
"private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = java.util.logging.Logger.getLogger ( METHOD_2 ( VAR_1 , VAR_2 ) ) ; VAR_4 . add ( VAR_3 ) ; VAR_3 . METHOD_3 ( VAR_5 ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { java.util.logging.Logger.getLogger ( METHOD_2 ( VAR_1 , VAR_2 ) ) . METHOD_3 ( VAR_5 ) ; }","['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1724
public static void main ( java.lang.String [ ] args ) throws TYPE_1 { TYPE_2 f = new TYPE_2 ( ) ; TYPE_3 TYPE_4 = new TYPE_3 ( ) ; java.lang.System.out.println ( f . METHOD_1 ( STRING_1 ) ) ; java.lang.System.out.println ( TYPE_4 . METHOD_2 ( STRING_2 ) ) ; },public static void main ( java.lang.String [ ] args ) throws TYPE_1 { TYPE_3 TYPE_4 = new TYPE_3 ( ) ; java.lang.System.out.println ( TYPE_2 . METHOD_1 ( STRING_1 ) ) ; java.lang.System.out.println ( TYPE_4 . METHOD_2 ( STRING_2 ) ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1725
protected static java.lang.String METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.String name = ( VAR_1 . METHOD_2 ( ) ) + ( VAR_1 . METHOD_3 ( ) ) ; return name ; },protected static java.lang.String METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; return VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",1726
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( intent ) ; this . METHOD_3 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { this . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1727
public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { METHOD_2 ( VAR_1 ) . show ( ) ; } },public void METHOD_1 ( int VAR_1 ) { METHOD_2 ( VAR_1 ) . show ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1728
void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 ) ; VAR_4 . update ( ) ; },void METHOD_1 ( ) { },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",1729
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_4 class ) ; TYPE_4 VAR_5 = VAR_6 . METHOD_1 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_4 class ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1730
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( this ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_5 ( STRING_3 , TYPE_2 ) ; TYPE_3 . METHOD_6 ( STRING_4 , STRING_5 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_5 ( STRING_3 , TYPE_2 ) ; TYPE_3 . METHOD_6 ( STRING_4 , STRING_5 ) ; }","['Insert Parameter', 'Move TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable']",1731
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { if ( VAR_1 == null ) return null ; if ( ! ( METHOD_2 ( ) ) ) return null ; return VAR_2 . METHOD_1 ( VAR_1 ) ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { if ( VAR_1 == null ) return null ; if ( ! ( METHOD_2 ( ) ) ) return null ; TYPE_1 response = VAR_2 . METHOD_1 ( VAR_1 ) ; return response ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",1732
"public TYPE_1 < TYPE_2 , TYPE_2 > METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 ) { int index = METHOD_2 ( VAR_1 , ( ! VAR_2 ) ) ; return METHOD_3 ( VAR_3 , index , VAR_4 ) ; }","public TYPE_1 < TYPE_2 , TYPE_2 > METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 ) { int index = ( METHOD_2 ( VAR_1 , ( ! VAR_2 ) ) ) - 1 ; return METHOD_3 ( VAR_3 , index , VAR_4 ) ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1733
public TYPE_1 METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( ) ; int VAR_2 = METHOD_3 ( ) ; return VAR_3 . get ( VAR_2 ) ; },public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( ) . get ( METHOD_3 ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead']",1735
"public long METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; long value = VAR_2 . METHOD_3 ( ( ( VAR_3 ) + VAR_1 ) , 0 ) ; return value ; }","public long METHOD_1 ( ) { long value = VAR_2 . METHOD_3 ( VAR_3 , 0 ) ; return value ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator']",1737
"public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 . values ( ) ) { if ( METHOD_2 ( VAR_1 ) ) continue ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_4 , VAR_1 ) ; } }","public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 . values ( ) ) { if ( METHOD_2 ( VAR_1 ) ) continue ; new TYPE_2 ( VAR_4 , VAR_1 ) ; } }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable']",1739
"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; VAR_2 . METHOD_2 ( VAR_4 , id ) ; METHOD_3 ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1742
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = ( ( TYPE_5 ) ( VAR_1 ) ) ; return VAR_2 . METHOD_2 ( this ) ; },public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation']",1743
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = this ; TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_4 ( ) ; VAR_3 . init ( METHOD_3 ( ) ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = this ; TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1744
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 ) { } ; VAR_4 . assertTrue ( ( ( VAR_5 ) == ( VAR_6 class ) ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 ) ; VAR_4 . assertTrue ( ( ( VAR_5 ) == ( VAR_6 class ) ) ) ; }","['Insert ConstructorCall', 'Insert FieldRead', 'Insert FieldRead', 'Delete FieldWrite', 'Delete FieldRead', 'Delete Assignment']",1746
public char METHOD_1 ( ) { char c = VAR_1 . toUpperCase ( VAR_2 . METHOD_2 ( ) . trim ( ) . METHOD_3 ( 0 ) ) ; return c ; },public char METHOD_1 ( ) { return VAR_1 . toUpperCase ( VAR_2 . METHOD_2 ( ) . trim ( ) . METHOD_3 ( 0 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1748
"double length ( ) { double VAR_1 = TYPE_1 . METHOD_1 ( ( ( ( java.lang.Math.pow ( x , INT_1 ) ) + ( java.lang.Math.pow ( y , INT_1 ) ) ) + ( java.lang.Math.pow ( VAR_2 , INT_1 ) ) ) ) ; return VAR_1 ; }","double length ( ) { return TYPE_1 . METHOD_1 ( ( ( ( java.lang.Math.pow ( x , INT_1 ) ) + ( java.lang.Math.pow ( y , INT_1 ) ) ) + ( java.lang.Math.pow ( VAR_2 , INT_1 ) ) ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1749
"public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; TYPE_1 args = METHOD_2 ( ) ; if ( args != null ) { } }","public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1750
"public int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { java.lang.String path = ( ( VAR_3 . getName ( ) . toLowerCase ( ) ) + STRING_1 ) + VAR_2 ; return VAR_4 . getInt ( path ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { return VAR_4 . getInt ( ( ( ( VAR_3 . getName ( ) . toLowerCase ( ) ) + STRING_1 ) + VAR_2 ) ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1752
public static int METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; if ( VAR_2 == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( VAR_2 ) ) ; },public static int METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( java.lang.Integer ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; },"['Move Invocation', 'Move TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",1753
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 , boolean VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_1 ( VAR_2 , VAR_3 ) ; VAR_5 . METHOD_2 ( ) ; return VAR_4 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 , boolean VAR_3 ) { return VAR_5 . METHOD_1 ( VAR_2 , VAR_3 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1754
public void METHOD_1 ( ) { int sum = 0 ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 instanceof TYPE_2 ) { sum += ( ( TYPE_2 ) ( VAR_1 ) ) . getValue ( ) ; } } VAR_3 = sum ; },public void METHOD_1 ( ) { int sum = VAR_3 ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 instanceof TYPE_2 ) { sum += ( ( TYPE_2 ) ( VAR_1 ) ) . getValue ( ) ; } } VAR_3 = sum ; },"['Insert FieldRead', 'Delete Literal']",1756
"public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; int VAR_4 = VAR_5 ; METHOD_3 ( view , VAR_1 , VAR_4 ) ; VAR_6 . i ( STRING_1 , STRING_2 ) ; }","public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { int VAR_4 = VAR_2 = VAR_3 . METHOD_2 ( ) ; METHOD_3 ( view , VAR_1 , VAR_4 ) ; VAR_6 . i ( STRING_1 , STRING_2 ) ; }","['Move Assignment', 'Delete FieldRead']",1757
public double METHOD_1 ( ) { java.lang.Object VAR_1 = ( ( TYPE_1 ) ( VAR_2 . get ( STRING_1 ) ) ) . get ( STRING_2 ) ; double temp = METHOD_2 ( VAR_1 ) ; return temp - FLOAT_1 ; },public double METHOD_1 ( ) { double temp = ( ( double ) ( ( ( TYPE_1 ) ( VAR_2 . get ( STRING_1 ) ) ) . get ( STRING_2 ) ) ) ; return temp - FLOAT_1 ; },"['Update LocalVariable', 'Move TypeReference', 'Insert TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",1760
"public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { METHOD_4 ( ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",1762
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = ( ( TYPE_2 ) ( getActivity ( ) ) ) ; VAR_3 . METHOD_2 ( ) ; getActivity ( ) . METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { getActivity ( ) . METHOD_3 ( ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1763
protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; return VAR_1 ; },protected java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_2 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1764
public int METHOD_1 ( ) { final int VAR_1 = INT_1 ; long temp = java.lang.Double . METHOD_2 ( value ) ; return ( ( int ) ( temp ^ ( temp > > > VAR_1 ) ) ) ; },public int METHOD_1 ( ) { final int VAR_1 = INT_1 ; long temp = java.lang.Double . METHOD_2 ( value ) ; int result = ( ( int ) ( temp ^ ( temp > > > VAR_1 ) ) ) ; return result ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move BinaryOperator', 'Insert VariableRead']",1767
protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; this . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_1 ; },protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1768
"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( VAR_1 ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_3 ( intent ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1769
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 obj = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) ) ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",1770
public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = new java.lang.String ( VAR_2 . METHOD_2 ( ) ) ; assert VAR_3 . startsWith ( STRING_1 ) ; assert VAR_1 . METHOD_3 ( STRING_2 ) ; },public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; assert VAR_3 . startsWith ( STRING_1 ) ; assert VAR_1 . METHOD_3 ( STRING_2 ) ; },"['Move Invocation', 'Delete ConstructorCall']",1771
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 ) ; VAR_2 . assertTrue ( VAR_1 . METHOD_3 ( ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",1772
public TYPE_1 METHOD_1 ( ) { TYPE_1 item = VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; return item ; },public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; return VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1773
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { boolean VAR_3 = super . METHOD_1 ( VAR_1 , VAR_2 ) ; if ( VAR_3 && ( VAR_4 . getName ( ) . equals ( STRING_1 ) ) ) METHOD_2 ( ) ; return VAR_3 ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_4 . getName ( ) . equals ( STRING_1 ) ) METHOD_2 ( ) ; return super . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead']",1774
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String url = VAR_1 . METHOD_2 ( ) ; return VAR_2 . contains ( url ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . contains ( VAR_1 . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1775
"public void METHOD_1 ( java.lang.String VAR_1 , long VAR_2 ) { java.lang.String VAR_3 = VAR_4 . source ( VAR_1 ) ; TYPE_1 writer = VAR_5 . get ( VAR_3 ) ; writer . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( java.lang.String VAR_3 , long VAR_2 ) { TYPE_1 writer = VAR_5 . get ( VAR_3 ) ; writer . METHOD_1 ( VAR_3 , VAR_2 ) ; }","['Update Parameter', 'Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",1776
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) ; if ( VAR_1 . METHOD_4 ( ) ) { METHOD_5 ( ) ; } },public void METHOD_1 ( ) { if ( ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) . METHOD_4 ( ) ) { METHOD_5 ( ) ; } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1777
public void METHOD_1 ( int i ) { VAR_1 = java.lang.Integer . METHOD_2 ( i ) ; },public void METHOD_1 ( int i ) { VAR_1 = java.lang.Integer . METHOD_2 ( i ) ; java.lang.String x = VAR_1 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Insert FieldRead']",1779
public boolean METHOD_1 ( ) { boolean VAR_1 = VAR_2 . isEmpty ( ) ; return VAR_1 && ( ( VAR_3 ) || ( VAR_4 . METHOD_2 ( ( ( int ) ( VAR_5 ) ) ) ) ) ; },public boolean METHOD_1 ( ) { return ( VAR_3 ) || ( VAR_4 . METHOD_2 ( ( ( int ) ( VAR_5 ) ) ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator']",1780
"public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 . add ( new TYPE_4 < TYPE_1 , TYPE_3 > ( VAR_1 , VAR_3 ) ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_4 . add ( new TYPE_4 < TYPE_1 , TYPE_3 > ( VAR_1 , new TYPE_3 ( VAR_2 ) ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1781
public java.util.Set < java.lang.String > METHOD_1 ( ) { java.util.Set < java.lang.String > VAR_1 = new java.util.HashSet < java.lang.String > ( VAR_2 . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( VAR_3 . METHOD_2 ( ) ) ; return VAR_1 ; },public java.util.Set < java.lang.String > METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",1783
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 instanceof TYPE_1 ) { return ( ( TYPE_1 ) ( VAR_1 ) ) ; } return null ; },public TYPE_1 METHOD_1 ( ) { return null ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",1785
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; if ( ( TYPE_2 ) != null ) { TYPE_2 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { if ( ( TYPE_2 ) != null ) { TYPE_2 . METHOD_3 ( ) ; } },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1786
"public void METHOD_1 ( TYPE_1 target ) { VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_3 . get ( VAR_4 ) ; VAR_1 . METHOD_1 ( VAR_2 , target ) ; VAR_5 = target ; METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 target ) { VAR_1 . METHOD_1 ( VAR_3 . get ( VAR_4 ) , target ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldWrite', 'Delete VariableRead', 'Delete Assignment', 'Delete Invocation']",1788
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { boolean VAR_4 = VAR_3 ; TYPE_2 . METHOD_2 ( VAR_5 , VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_5 , VAR_2 ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable']",1791
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 != null ) { return TYPE_1 . METHOD_3 ( VAR_2 ) ; } return null ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { return TYPE_1 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",1794
"public void METHOD_1 ( android.view.View view ) { VAR_1 . METHOD_2 ( VAR_2 ) ; int VAR_3 = position - 1 ; METHOD_3 ( VAR_3 ) ; TYPE_1 . METHOD_4 ( STRING_1 , ( STRING_2 + VAR_3 ) ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",1795
public void METHOD_1 ( ) { VAR_1 = false ; TYPE_1 VAR_2 = getActivity ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; } },public void METHOD_1 ( ) { VAR_1 = false ; getActivity ( ) . METHOD_2 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1796
"public static float METHOD_1 ( TYPE_1 VAR_1 , android.content.Context context ) { float VAR_2 = context . METHOD_2 ( ) . METHOD_3 ( ) . VAR_2 ; return ( VAR_1 . METHOD_4 ( ) ) / VAR_2 ; }",public static float METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_4 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator']",1797
private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; METHOD_3 ( VAR_1 ) ; TYPE_2 VAR_3 = METHOD_4 ( ) ; VAR_3 . METHOD_5 ( STRING_1 ) ; },private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; METHOD_3 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1801
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; try { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; try { METHOD_3 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { } },"['Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1802
protected void METHOD_1 ( int VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; boolean VAR_2 = ( VAR_1 & INT_1 ) != 0 ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_2 ) ; },protected void METHOD_1 ( int VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ( ( VAR_1 & INT_1 ) != 0 ) ) ; },"['Insert Invocation', 'Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1803
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( event . METHOD_4 ( ) ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_5 ( ) ; } },public void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( event . METHOD_4 ( ) ) . METHOD_5 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1805
private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return ; } VAR_2 = new TYPE_2 ( VAR_1 ) ; VAR_3 = new TYPE_3 ( VAR_1 ) ; VAR_4 = new TYPE_4 ( VAR_1 ) ; },private void METHOD_1 ( ) { VAR_2 = new TYPE_2 ( METHOD_2 ( ) ) ; VAR_3 = new TYPE_3 ( METHOD_2 ( ) ) ; VAR_4 = new TYPE_4 ( METHOD_2 ( ) ) ; },"['Insert Assignment', 'Insert Assignment', 'Insert Assignment', 'Move FieldWrite', 'Insert ConstructorCall', 'Move FieldWrite', 'Insert ConstructorCall', 'Move FieldWrite', 'Insert ConstructorCall', 'Move Invocation', 'Insert Invocation', 'Insert Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Assignment', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Assignment', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Assignment']",1806
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 ) ; }",public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1807
"public static TYPE_1 METHOD_1 ( TYPE_2 response ) { java.lang.String VAR_1 = METHOD_2 ( response , VAR_2 ) ; if ( VAR_1 == null ) return null ; return new TYPE_1 ( VAR_1 ) ; }","public static TYPE_1 METHOD_1 ( TYPE_2 response ) { return new TYPE_1 ( METHOD_2 ( response , VAR_2 ) ) ; }","['Update ConstructorCall', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",1809
public static void main ( java.lang.String [ ] args ) { new TYPE_1 ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( STRING_1 ) ; VAR_1 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { new TYPE_1 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1810
"public TYPE_1 METHOD_1 ( TYPE_2 expr , TYPE_3 context ) { TYPE_4 type = METHOD_2 ( VAR_1 . getType ( ) ) ; TYPE_5 < TYPE_6 > VAR_2 = METHOD_3 ( expr . METHOD_4 ( ) , context ) ; return new TYPE_7 ( type , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 expr , TYPE_3 context ) { METHOD_3 ( expr . METHOD_4 ( ) , context ) ; return null ; }","['Move Invocation', 'Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall']",1812
public TYPE_1 METHOD_1 ( long id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( id ) ; VAR_1 . METHOD_2 ( new java.util.ArrayList < > ( ) ) ; VAR_1 . METHOD_3 ( new java.util.ArrayList < > ( ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( long id ) { return VAR_2 . METHOD_1 ( id ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead']",1813
"private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_2 ) ; return VAR_3 ; }","private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_2 ) ; return VAR_3 ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",1814
private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; java.util.List < TYPE_2 > VAR_2 = METHOD_4 ( 1 ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete Invocation', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable']",1815
"private static long METHOD_1 ( int n , int VAR_1 ) { int k = ( VAR_1 - 1 ) / n ; return ( ( n * k ) * ( k + 1 ) ) / INT_1 ; }","private static long METHOD_1 ( int n , int VAR_1 ) { int k = VAR_1 - ( 1 / n ) ; return ( ( n * k ) * ( k + 1 ) ) / INT_1 ; }","['Move BinaryOperator', 'Move BinaryOperator', 'Move Literal']",1817
"private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.String VAR_3 = METHOD_2 ( VAR_2 ) ; java.lang.String message = METHOD_3 ( VAR_1 , VAR_2 ) ; TYPE_3 . METHOD_4 ( VAR_4 , VAR_3 , message ) ; }","private void METHOD_1 ( java.lang.String message , TYPE_2 VAR_2 ) { java.lang.String VAR_3 = METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( VAR_4 , VAR_3 , message ) ; }","['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",1818
"public void to ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; response . METHOD_2 ( STRING_1 , VAR_2 ) ; response . METHOD_3 ( INT_1 ) ; }","public void to ( java.lang.String VAR_1 ) { response . METHOD_2 ( STRING_1 , VAR_3 . METHOD_1 ( VAR_1 ) ) ; response . METHOD_3 ( INT_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1819
"public double METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( this , VAR_3 class ) ; if ( VAR_1 != null ) return VAR_1 . METHOD_3 ( ) . METHOD_4 ( this . METHOD_3 ( ) ) ; return VAR_4 ; }","public double METHOD_1 ( ) { return VAR_2 . METHOD_2 ( this , VAR_3 class ) . METHOD_3 ( ) . METHOD_4 ( this . METHOD_3 ( ) ) ; }","['Move Return', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",1820
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = ( ( TYPE_1 ) ( VAR_2 ) ) . getName ( ) ; return METHOD_2 ( VAR_1 ) ; },public java.lang.String METHOD_1 ( ) { return ( ( TYPE_1 ) ( VAR_2 ) ) . getName ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1821
public static void start ( ) throws java.lang.Throwable { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . execute ( null ) ; VAR_1 . METHOD_1 ( ) ; VAR_3 . get ( ) . start ( ) ; },public static void start ( ) throws java.lang.Throwable { VAR_3 . get ( ) . start ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1823
public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_3 . METHOD_2 ( ) ; for ( int i = VAR_2 - 1 ; i >= 1 ; i -- ) { VAR_3 . METHOD_3 ( i ) ; METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 1 ; i < ( VAR_3 . METHOD_2 ( ) ) ; i ++ ) { VAR_3 . METHOD_3 ( i ) ; METHOD_4 ( ) ; } },"['Update BinaryOperator', 'Update UnaryOperator', 'Move Literal', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Literal']",1824
"public double METHOD_1 ( double VAR_1 , double VAR_2 ) { double VAR_3 = ( ( double ) ( VAR_1 / VAR_2 ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( STRING_1 ) ; VAR_5 . format ( VAR_3 ) ; return VAR_3 ; }","public double METHOD_1 ( int VAR_1 , int VAR_2 ) { return VAR_1 / VAR_2 ; }","['Update TypeReference', 'Update TypeReference', 'Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete VariableRead']",1825
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Long VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList ( VAR_2 . METHOD_3 ( ) ) ; return VAR_4 ; },public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Long VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_2 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1827
public java.lang.Void METHOD_1 ( java.util.List VAR_1 ) { METHOD_2 ( STRING_1 ) ; TYPE_1 VAR_2 = METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; return null ; },public java.lang.Void METHOD_1 ( java.util.List VAR_1 ) { METHOD_2 ( STRING_1 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; return null ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1828
"protected TYPE_1 METHOD_1 ( android.content.Context context , TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_3 ( context , VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; return VAR_2 ; }","protected TYPE_1 METHOD_1 ( android.content.Context context , TYPE_2 VAR_1 ) { return new TYPE_3 ( context , VAR_1 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",1829
"public double METHOD_1 ( ) { double VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; double VAR_4 = TYPE_1 . METHOD_2 ( VAR_5 , VAR_6 ) ; double diff = METHOD_3 ( ( VAR_4 - VAR_1 ) ) ; return diff ; }",public double METHOD_1 ( ) { return 0 ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1830
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; return ( VAR_2 . METHOD_1 ( VAR_1 ) ) || ( METHOD_3 ( VAR_1 ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_3 . METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ) || ( METHOD_3 ( VAR_1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1833
"public static void main ( java.lang.String [ ] VAR_1 ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_2 . METHOD_1 ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_5 ) ; VAR_4 . METHOD_2 ( ) ; }","public static void main ( java.lang.String [ ] VAR_1 ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_2 . METHOD_1 ( ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1835
public void METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( name ) ; } },public void METHOD_1 ( java.lang.String name ) { METHOD_2 ( ) . METHOD_3 ( name ) ; },"['Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1836
TYPE_1 METHOD_1 ( TYPE_1 type ) { if ( type instanceof TYPE_2 ) { TYPE_1 VAR_1 = VAR_2 . get ( type ) ; if ( VAR_1 instanceof TYPE_2 ) { return METHOD_1 ( VAR_1 ) ; } else { return VAR_1 ; } } return null ; },TYPE_1 METHOD_1 ( TYPE_1 type ) { if ( type instanceof TYPE_2 ) { return VAR_2 . get ( ( ( TYPE_2 ) ( type ) ) ) ; } return null ; },"['Insert Return', 'Insert Invocation', 'Move TypeAccess', 'Insert VariableRead', 'Insert TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",1837
"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( getActivity ( ) . METHOD_2 ( ) , VAR_2 class ) ; METHOD_3 ( VAR_1 ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1838
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = null ; java.lang.Class VAR_2 ; TYPE_2 VAR_3 = METHOD_2 ( ) ; VAR_2 = VAR_4 class ; METHOD_3 ( VAR_3 , VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = null ; java.lang.Class VAR_2 ; VAR_2 = VAR_4 class ; METHOD_3 ( VAR_1 , VAR_2 ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",1839
public boolean METHOD_1 ( ) throws java.io.IOException { VAR_1 = METHOD_2 ( ) ; if ( ( METHOD_3 ( ) ) < ( VAR_1 ) ) { return true ; } return false ; },public boolean METHOD_1 ( ) throws java.io.IOException { int VAR_1 = METHOD_2 ( ) ; if ( ( METHOD_3 ( ) ) < VAR_1 ) { return true ; } return false ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",1840
"public TYPE_1 < ? > METHOD_1 ( java.lang.String id ) { VAR_1 . delete ( id ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 , VAR_3 ) ; return new TYPE_1 ( VAR_2 , VAR_3 ) ; }","public TYPE_1 < ? > METHOD_1 ( java.lang.String id ) { VAR_1 . delete ( id ) ; return new TYPE_1 ( STRING_1 , VAR_3 ) ; }","['Update ConstructorCall', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete ConstructorCall']",1842
"public void METHOD_1 ( TYPE_1 VAR_1 ) { long VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; android.content.Intent VAR_3 = new android.content.Intent ( this , VAR_4 class ) ; VAR_3 . METHOD_4 ( STRING_1 , VAR_2 ) ; METHOD_5 ( VAR_3 , VAR_5 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent VAR_3 = new android.content.Intent ( this , VAR_4 class ) ; VAR_3 . METHOD_4 ( STRING_1 , METHOD_2 ( ) . METHOD_3 ( ) ) ; METHOD_5 ( VAR_3 , VAR_5 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1844
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( this ) ; VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_3 . METHOD_4 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( this ) ; VAR_2 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1845
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { this . VAR_1 = VAR_1 ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; TYPE_3 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; TYPE_3 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; },"['Delete ThisAccess', 'Delete FieldWrite', 'Delete VariableRead', 'Delete Assignment']",1846
"public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String text = VAR_2 . getText ( ) . toString ( ) ; android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_2 ( STRING_1 , text ) ; METHOD_3 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",1847
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Long id ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = this . VAR_2 . METHOD_2 ( id ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Long id ) throws java.lang.Exception { return this . VAR_2 . METHOD_2 ( id ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1848
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = null ; java.lang.System.out.println ( new TYPE_2 ( ) . METHOD_1 ( VAR_1 ) ) ; },public static void main ( java.lang.String args ) { },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",1850
private int METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Integer value = TYPE_2 . METHOD_2 ( ) . VAR_2 . get ( VAR_3 . getName ( ) ) ; return value == null ? 0 : value ; },private int METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Integer value = TYPE_2 . METHOD_2 ( ) . VAR_2 . get ( VAR_1 ) ; return value == null ? 0 : value ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1852
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent i = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( i ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { update ( ) ; },"['Update Invocation', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1853
"public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . setText ( STRING_1 ) ; java.awt.Font VAR_3 = new java.awt.Font ( STRING_2 , VAR_4 , INT_1 ) ; VAR_5 . METHOD_2 ( VAR_3 ) ; } }",public void METHOD_1 ( ) { if ( VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; } },"['Insert Invocation', 'Insert FieldRead', 'Move TypeAccess', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1854
public TYPE_1 METHOD_1 ( ) { if ( ( count ) <= 0 ) throw new TYPE_2 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = first ; } TYPE_1 result = VAR_2 . item ; VAR_1 = VAR_3 ; return result ; },public TYPE_1 METHOD_1 ( ) { if ( ( count ) <= 0 ) throw new TYPE_2 ( ) ; TYPE_1 result = VAR_2 . item ; VAR_1 = VAR_3 ; if ( ( VAR_1 ) == null ) { VAR_1 = first ; } return result ; },['Move If'],1855
"private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_3 ) . METHOD_4 ( VAR_4 ) . METHOD_5 ( VAR_5 ) . METHOD_6 ( ""true"" ) ; return METHOD_7 ( VAR_1 , VAR_6 class ) ; }","private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_3 ) . METHOD_4 ( VAR_4 ) . METHOD_5 ( VAR_5 ) ; return METHOD_7 ( VAR_1 , VAR_6 class ) ; }","['Move Invocation', 'Delete Literal', 'Delete Invocation']",1860
"public void METHOD_1 ( java.lang.String name , float value ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; int VAR_2 = VAR_1 . METHOD_3 ( VAR_3 , name ) ; VAR_1 . METHOD_4 ( VAR_2 , value ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String name , float value ) { int VAR_2 = VAR_1 . METHOD_3 ( VAR_3 , name ) ; VAR_1 . METHOD_4 ( VAR_2 , value ) ; }","['Insert Parameter', 'Move TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",1861
"public void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = VAR_4 . string ( VAR_2 , VAR_5 ) ; java.lang.String VAR_6 = VAR_4 . string ( VAR_2 , VAR_7 ) ; VAR_8 . METHOD_2 ( VAR_3 , VAR_6 ) ; }","public void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = string ( VAR_2 , VAR_5 ) ; java.lang.String VAR_6 = string ( VAR_2 , VAR_7 ) ; VAR_8 . METHOD_2 ( VAR_3 , VAR_6 ) ; }","['Update TypeAccess', 'Update TypeAccess']",1862
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = new VAR_2 . main ( ) . METHOD_1 ( STRING_1 ) ; java.lang.System.out.print ( VAR_3 . toString ( ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { },"['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1863
public static boolean METHOD_1 ( java.lang.String str ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( str ) ; return VAR_1 . METHOD_3 ( STRING_1 ) ; },public static boolean METHOD_1 ( java.lang.String str ) { return str . METHOD_3 ( STRING_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1864
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 temp = this . VAR_2 . METHOD_2 ( VAR_3 class , VAR_4 . getId ( ) ) ; if ( temp != null ) { this . VAR_5 . remove ( temp ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_5 . remove ( VAR_1 ) ; },"['Move Invocation', 'Update VariableRead', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1865
public java.io.File METHOD_1 ( java.lang.String VAR_1 ) { java.io.File file = new java.io.File ( VAR_1 ) ; if ( ( VAR_2 . METHOD_2 ( file ) ) != 0 ) { java.lang.System.out.println ( STRING_1 ) ; } return file ; },public java.io.File METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete VariableRead']",1866
"public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 = new TYPE_2 ( VAR_1 , VAR_3 ) ; }","public void METHOD_1 ( ) { android.content.Context VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 = new TYPE_2 ( VAR_1 , VAR_3 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",1867
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; java.lang.System.out.println ( VAR_2 . METHOD_1 ( ) ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; java.lang.System.out.println ( VAR_2 . METHOD_1 ( ) ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",1868
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { int id = VAR_2 . get ( VAR_3 . name ) ; return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_1 ( id ) ; },public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_1 ( VAR_2 . get ( VAR_3 . name ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1869
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String data ) { java.lang.Long id = java.lang.Long.parseLong ( data ) ; if ( VAR_2 . equals ( 0L ) ) { VAR_1 . METHOD_2 ( null ) ; } else { VAR_1 . METHOD_2 ( id ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String data ) { VAR_1 . METHOD_2 ( java.lang.Long.parseLong ( data ) ) ; }","['Insert Invocation', 'Move VariableRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1870
"public static java.lang.String METHOD_1 ( java.lang.String message , java.lang.String VAR_1 ) { java.lang.String result = new java.lang.String ( TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( message , VAR_1 ) . METHOD_4 ( ) , 0 ) ) ; return result ; }","public static java.lang.String METHOD_1 ( java.lang.String message , java.lang.String VAR_1 ) { return new java.lang.String ( TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( message , VAR_1 ) . METHOD_4 ( ) , 0 ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1871
public void METHOD_1 ( TYPE_1 t ) { TYPE_2 VAR_1 = VAR_2 . get ( ) ; if ( ( VAR_1 == null ) || ( VAR_1 != ( this ) ) ) VAR_3 . add ( t ) ; else VAR_4 . add ( t ) ; },public void METHOD_1 ( TYPE_1 t ) { if ( ( VAR_2 . get ( ) ) == null ) VAR_3 . add ( t ) ; else VAR_4 . add ( t ) ; },"['Update BinaryOperator', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete ThisAccess', 'Delete BinaryOperator']",1873
protected void METHOD_1 ( java.lang.String result ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( result ) ; VAR_2 . setText ( VAR_1 ) ; },protected void METHOD_1 ( java.lang.String result ) { VAR_2 . setText ( result ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1874
public void setEnabled ( boolean VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( ) ; if ( VAR_2 != null ) { VAR_4 . setEnabled ( VAR_1 ) ; } },public void setEnabled ( boolean VAR_1 ) { VAR_3 . METHOD_1 ( ) . setEnabled ( VAR_1 ) ; },"['Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1876
"private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; TYPE_3 VAR_3 = TYPE_3 . METHOD_3 ( STRING_1 ) ; VAR_4 . show ( VAR_2 , STRING_2 ) ; }",private void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1878
"public TYPE_1 METHOD_1 ( TYPE_2 state ) { TYPE_1 node = new TYPE_1 ( state , null , VAR_1 , 0 , 0 , 0 , false ) ; return node ; }","public TYPE_1 METHOD_1 ( TYPE_2 state ) { return new TYPE_1 ( state , null , VAR_1 , 0 , 0 , 0 , false ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1880
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( METHOD_2 ( ) , VAR_3 class ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1881
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { java.lang.String VAR_2 = METHOD_2 ( ) ; return VAR_3 . METHOD_3 ( VAR_2 ) ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { return VAR_3 . METHOD_3 ( METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1882
"public void METHOD_1 ( TYPE_1 item ) { android.content.Intent i = new android.content.Intent ( this , VAR_1 class ) ; METHOD_2 ( i ) ; }",public void METHOD_1 ( TYPE_1 item ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1883
private void METHOD_1 ( int start ) { for ( int i = start ; i < ( VAR_1 . size ( ) ) ; i ++ ) { VAR_1 . get ( i ) . METHOD_2 ( i ) ; } },private void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { VAR_1 . get ( i ) . METHOD_2 ( i ) ; } },"['Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1884
public static TYPE_1 METHOD_1 ( java.lang.String type ) { TYPE_1 VAR_1 = VAR_2 . get ( type ) ; if ( VAR_1 == null ) { return VAR_3 ; } return VAR_1 ; },public static TYPE_1 METHOD_1 ( java.lang.String type ) { return VAR_2 . get ( type ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",1885
public void METHOD_1 ( int VAR_1 ) { double VAR_2 = VAR_3 . get ( VAR_1 ) . VAR_4 ; if ( ( VAR_3 . get ( VAR_1 ) . VAR_4 ) <= 0 ) { METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_3 . get ( VAR_1 ) . VAR_4 ) <= 0 ) { METHOD_2 ( VAR_1 ) ; } },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete LocalVariable']",1887
public void METHOD_1 ( ) { final java.lang.StringBuffer buffer = new java.lang.StringBuffer ( ) . append ( CHAR_1 ) ; java.lang.System.out.println ( VAR_1 . toString ( ) ) ; },public void METHOD_1 ( ) { final java.lang.StringBuffer buffer = new java.lang.StringBuffer ( ) ; java.lang.System.out.println ( VAR_1 . toString ( ) ) ; },"['Move ConstructorCall', 'Delete TypeAccess', 'Delete Invocation']",1889
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; return ( VAR_1 != null ) && ( ( METHOD_2 ( ) ) instanceof TYPE_2 ) ; },public boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) instanceof TYPE_2 ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1892
"public java.lang.String METHOD_1 ( ) { return getData ( ) . getString ( STRING_1 , getData ( ) . getString ( STRING_2 , STRING_3 ) ) ; }","public java.lang.String METHOD_1 ( ) { java.lang.String msg = getData ( ) . getString ( STRING_1 , getData ( ) . getString ( STRING_2 , STRING_3 ) ) ; return msg ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",1893
public static void main ( java.lang.String [ ] args ) { java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; int count = TYPE_1 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; java.lang.System.out.println ( ( STRING_1 + count ) ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",1894
"public void METHOD_1 ( java.util.Map < TYPE_1 , TYPE_2 > VAR_1 ) { java.util.Map < TYPE_1 , TYPE_3 > VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . VAR_3 ; VAR_4 . METHOD_4 ( VAR_1 ) ; }","public void METHOD_1 ( java.util.Map < TYPE_1 , TYPE_2 > VAR_1 ) { VAR_4 . METHOD_4 ( VAR_1 ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete LocalVariable']",1897
public void METHOD_1 ( TYPE_1 VAR_1 ) { boolean result = METHOD_2 ( ) ; if ( result ) METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Block', 'Delete If']",1898
public static void METHOD_1 ( java.lang.String name ) { TYPE_1 temp = new TYPE_1 ( name ) ; VAR_1 . add ( temp ) ; },public static void METHOD_1 ( java.lang.String name ) { VAR_1 . add ( new TYPE_1 ( name ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1899
"public java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 , int VAR_2 ) { java.util.List < TYPE_1 > result = VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; return result ; }","public java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 , int VAR_2 ) { return VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1900
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( 1 ) ; assertEquals ( VAR_1 . METHOD_3 ( ) , false ) ; VAR_2 . METHOD_4 ( VAR_1 , true ) ; assertEquals ( VAR_1 . METHOD_3 ( ) , true ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",1901
public void METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; java.io.File file = new java.io.File ( VAR_1 ) ; if ( ! ( file . METHOD_3 ( ) ) ) { return ; } METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; METHOD_4 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1902
public java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; return VAR_2 . METHOD_2 ( this . VAR_1 ) ; },public void METHOD_1 ( int VAR_1 ) { return TYPE_1 . METHOD_2 ( this . VAR_1 ) ; },"['Update TypeReference', 'Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1903
"public java.lang.Class METHOD_1 ( java.lang.Class param ) { java.lang.Class VAR_1 = VAR_2 . get ( param ) ; TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 , param ) ; return VAR_1 ; }",public java.lang.Class METHOD_1 ( java.lang.Class param ) { return VAR_2 . get ( param ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1904
public java.util.ArrayList < TYPE_1 > METHOD_1 ( int VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; java.util.ArrayList < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; return VAR_3 ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Return']",1905
void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_4 = VAR_4 . METHOD_2 ( VAR_2 ) ; } VAR_3 . remove ( VAR_1 ) ; },void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 . remove ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldWrite', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Assignment', 'Delete Block', 'Delete If']",1908
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( VAR_3 ) ) ) ; VAR_4 . setText ( VAR_5 . toString ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1909
"public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( null ) . METHOD_3 ( ) ; return VAR_3 . METHOD_4 ( VAR_1 , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( null ) ; return VAR_3 . METHOD_4 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete Invocation']",1910
"public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = ( STRING_1 + VAR_2 ) + STRING_1 ; return super . METHOD_2 ( VAR_4 , VAR_1 , VAR_2 , VAR_2 , VAR_3 , VAR_3 ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { return super . METHOD_2 ( VAR_4 , VAR_1 , VAR_2 , VAR_2 ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1911
"public void METHOD_1 ( ) { long VAR_1 = INT_1 ; new TYPE_1 ( ) . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { VAR_2 . METHOD_4 ( VAR_3 ) ; } } , VAR_1 , VAR_4 ) ; }","public void METHOD_1 ( ) { new TYPE_1 ( ) . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { VAR_2 . METHOD_4 ( VAR_3 ) ; } } , 0 , VAR_4 ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",1912
"private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { VAR_3 = new TYPE_2 ( VAR_4 ) ; java.lang.String url = VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_3 ( url ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_4 ) ; java.lang.String url = VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_3 ( url ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess', 'Delete TypeAccess']",1913
"protected void METHOD_1 ( java.lang.String [ ] VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( getActivity ( ) . METHOD_2 ( ) , getActivity ( ) , VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; VAR_5 . METHOD_4 ( VAR_4 ) ; }","protected void METHOD_1 ( java.lang.String [ ] VAR_1 ) { VAR_4 . METHOD_3 ( new TYPE_1 ( getActivity ( ) . METHOD_2 ( ) , getActivity ( ) , VAR_3 ) ) ; VAR_5 . METHOD_4 ( VAR_4 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1914
"public void METHOD_1 ( android.view.View VAR_1 ) throws TYPE_1 { if ( METHOD_2 ( VAR_1 ) ) { METHOD_3 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_4 ( intent ) ; } }",public void METHOD_1 ( android.view.View VAR_1 ) throws TYPE_1 { if ( METHOD_2 ( VAR_1 ) ) { METHOD_3 ( ) ; } },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1915
public TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 VAR_1 ) { int VAR_2 = type . METHOD_2 ( VAR_1 ) ; return ( ( TYPE_1 < java.lang.String > ) ( this . VAR_3 [ VAR_2 ] ) ) ; },public TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 VAR_1 ) { return ( ( TYPE_1 < java.lang.String > ) ( this . VAR_3 [ type . METHOD_2 ( VAR_1 ) ] ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1916
"public int METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.util.Map < java.lang.String , java.lang.Integer > VAR_3 = new java.util.HashMap < > ( ) ; return METHOD_1 ( VAR_1 , VAR_2 , VAR_4 . length ( ) , VAR_5 . length ( ) , VAR_3 ) ; }","public int METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return 0 ; }","['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1917
public static int METHOD_1 ( ) { java.util.Calendar VAR_1 = java.util.Calendar.getInstance ( TYPE_1 . METHOD_2 ( ) ) ; return VAR_2 . get ( VAR_3 ) ; },public static int METHOD_1 ( ) { java.util.Calendar VAR_1 = java.util.Calendar.getInstance ( ) ; return VAR_2 . get ( VAR_3 ) ; },"['Delete TypeAccess', 'Delete Invocation']",1918
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_3 ) ; return STRING_2 ; }",public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return STRING_2 ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1919
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) return null ; return VAR_3 . METHOD_3 ( ) ; }",public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) return null ; return VAR_3 . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1921
public java.lang.Boolean METHOD_1 ( ) { int result = this . element . METHOD_2 ( VAR_1 ) ; return ( this . element . METHOD_1 ( ) ) == 1 ; },public java.lang.Boolean METHOD_1 ( ) { return ( this . element . METHOD_1 ( ) ) == 1 ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",1924
public int METHOD_1 ( int VAR_1 ) { int VAR_2 = ( VAR_3 ) - ( ( VAR_1 * INT_1 ) / INT_2 ) ; if ( VAR_2 < 0 ) { return 0 ; } return VAR_2 ; },public int METHOD_1 ( int VAR_1 ) { int VAR_2 = ( ( VAR_3 ) - VAR_1 ) + ( ( VAR_1 * INT_1 ) / INT_2 ) ; if ( VAR_2 < 0 ) { return 0 ; } return VAR_2 ; },"['Update BinaryOperator', 'Insert BinaryOperator', 'Move FieldRead', 'Insert VariableRead']",1925
"private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , null ) ; }",private void METHOD_1 ( final TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",1932
void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 ; if ( VAR_1 != null ) { VAR_2 = null ; VAR_3 . METHOD_2 ( VAR_1 ) ; } },void METHOD_1 ( ) { if ( ( VAR_2 ) != null ) { VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_2 = null ; } },"['Move Assignment', 'Move FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1933
public TYPE_1 METHOD_1 ( TYPE_2 key ) throws java.io.IOException { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . get ( key ) ) ) ; VAR_3 = key ; return VAR_1 ; },public TYPE_1 METHOD_1 ( TYPE_2 key ) throws java.io.IOException { return ( ( TYPE_1 ) ( VAR_2 . get ( key ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete VariableRead', 'Delete Assignment', 'Delete VariableRead']",1934
public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return null ; } return VAR_1 . METHOD_1 ( ) ; },public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) { return null ; } return METHOD_2 ( ) . METHOD_1 ( ) ; },"['Move Invocation', 'Insert Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1936
public double METHOD_1 ( ) { double value = ( METHOD_2 ( ) ) / ( METHOD_3 ( ) ) ; return ( ( double ) ( java.lang.Math.round ( ( value * FLOAT_1 ) ) ) ) / FLOAT_1 ; },public double METHOD_1 ( ) { return ( METHOD_2 ( ) ) / ( METHOD_3 ( ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1938
"public void METHOD_1 ( ) { TYPE_1 < java.lang.String , TYPE_2 > VAR_1 = new TYPE_1 < java.lang.String , TYPE_2 > ( ) ; VAR_2 = new TYPE_3 ( VAR_1 ) ; }",public void METHOD_1 ( ) { VAR_2 = new TYPE_3 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1939
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , VAR_2 ) ; intent . METHOD_3 ( VAR_3 ) ; METHOD_4 ( intent ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1940
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( ( VAR_3 . METHOD_3 ( ) ) == null ) ) { VAR_3 . METHOD_4 ( VAR_2 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1943
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 ; METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( VAR_1 , METHOD_5 ( METHOD_6 ( ) ) , false ) ; METHOD_2 ( VAR_2 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_4 ( VAR_1 , METHOD_5 ( METHOD_6 ( ) ) , false ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1944
"public int METHOD_1 ( TYPE_1 first , TYPE_1 VAR_1 ) { int VAR_2 = ( VAR_3 ) - ( VAR_4 ) ; if ( VAR_2 == 0 ) { return ( VAR_5 ) - ( VAR_6 ) ; } else { return VAR_2 ; } }","public int METHOD_1 ( TYPE_1 first , TYPE_1 VAR_1 ) { return ( VAR_3 ) - ( VAR_4 ) ; }","['Insert Return', 'Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",1946
"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_4 ) ; VAR_5 . show ( ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_4 ) ; VAR_5 . show ( ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",1947
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , INT_1 ) ; VAR_2 . assertEquals ( VAR_3 , VAR_1 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_3 = new TYPE_1 ( STRING_1 , INT_1 ) ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , INT_1 ) ; VAR_2 . assertEquals ( VAR_3 , VAR_1 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Insert ConstructorCall', 'Insert VariableRead', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeAccess']",1948
public TYPE_1 METHOD_1 ( ) { TYPE_2 TYPE_3 = TYPE_2 . METHOD_2 ( ) ; if ( TYPE_3 == null ) { return null ; } return ( ( TYPE_1 ) ( TYPE_3 . METHOD_3 ( getClass ( ) ) ) ) ; },public TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( getClass ( ) ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",1951
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; boolean VAR_3 = VAR_2 . METHOD_4 ( false , VAR_4 , true , STRING_1 ) ; VAR_2 . METHOD_5 ( VAR_3 , true ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( false , VAR_4 , true , STRING_1 ) ; VAR_2 . METHOD_5 ( false , true ) ; }","['Move Invocation', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1952
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 ; java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( ( STRING_2 + ( VAR_3 . toString ( ) ) ) ) ; java.lang.System.out.println ( STRING_1 ) ; this . VAR_2 . METHOD_1 ( this ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( ( STRING_2 + ( VAR_3 . toString ( ) ) ) ) ; java.lang.System.out.println ( STRING_1 ) ; this . VAR_2 . METHOD_1 ( this ) ; return VAR_2 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1954
"private void METHOD_1 ( ) { if ( ( VAR_1 ) >= 0 ) { METHOD_2 ( VAR_2 ) ; } else { int VAR_3 = ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 ) ) - ( VAR_1 ) ; METHOD_2 ( VAR_3 ) ; } }","private void METHOD_1 ( ) { if ( ( VAR_1 ) >= 0 ) { METHOD_2 ( VAR_2 ) ; } else { METHOD_2 ( ( ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 ) ) - ( VAR_1 ) ) ) ; } }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1956
"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { TYPE_2 VAR_2 = METHOD_2 ( position ) ; if ( VAR_2 != null ) { VAR_3 . METHOD_3 ( VAR_4 . getId ( ) ) ; } }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { VAR_3 . METHOD_3 ( position ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1957
"public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( new TYPE_3 ( this ) , METHOD_3 ( ) ) ; VAR_2 . METHOD_1 ( VAR_1 , VAR_3 ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1959
public void METHOD_1 ( java.lang.String id ) { java.lang.String fileName = id + STRING_1 ; context . METHOD_2 ( fileName ) ; },public void METHOD_1 ( java.lang.String name ) { context . METHOD_2 ( name ) ; },"['Update Parameter', 'Update VariableRead', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable']",1960
public void METHOD_1 ( java.util.List < TYPE_1 > results ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . METHOD_2 ( results ) ; VAR_2 = VAR_1 ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; },public void METHOD_1 ( java.util.List < TYPE_1 > results ) { VAR_2 . METHOD_2 ( results ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( ) ; },"['Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldWrite', 'Delete VariableRead', 'Delete Assignment', 'Delete VariableRead']",1961
"public static void main ( java.lang.String [ ] args ) { java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; TYPE_1 . METHOD_1 ( INT_1 , INT_2 , VAR_1 ) ; java.lang.System.out.println ( STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( ) ; }","public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( INT_1 , INT_2 ) ; TYPE_1 . METHOD_2 ( ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1963
"public java.lang.String METHOD_1 ( int id , java.lang.String date , TYPE_1 VAR_1 ) { java.lang.String name = VAR_2 . getName ( ) ; VAR_3 . delete ( id , name , date ) ; return STRING_1 ; }",public java.lang.String METHOD_1 ( int id ) { VAR_3 . delete ( id ) ; return STRING_1 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",1964
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 < TYPE_3 , java.lang.String > VAR_2 = VAR_1 . METHOD_1 ( STRING_1 ) ; }",public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( STRING_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable']",1965
"public java.lang.Object METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 ) { TYPE_1 VAR_7 = new TYPE_1 ( ) ; VAR_7 . METHOD_2 ( true ) ; return VAR_7 ; }","public java.lang.Object METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 ) { return null ; }","['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",1966
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 < java.lang.Integer > VAR_2 = VAR_1 . METHOD_2 ( ) ; int VAR_3 = VAR_1 . METHOD_3 ( VAR_2 ) ; assertEquals ( INT_1 , VAR_3 ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1967
"public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( METHOD_3 ( VAR_2 class , STRING_1 , VAR_3 class ) , METHOD_4 ( ) ) ; VAR_4 . execute ( ) ; METHOD_5 ( ""true"" ) ; }","public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( METHOD_3 ( STRING_1 , VAR_3 class ) , METHOD_4 ( ) ) ; VAR_4 . execute ( ) ; METHOD_5 ( ""true"" ) ; }",['Delete TypeAccess'],1968
"public void METHOD_1 ( TYPE_1 [ ] VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_3 . METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_4 , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 [ ] VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_3 = new TYPE_3 ( new TYPE_2 ( ) ) ; VAR_3 . METHOD_2 ( STRING_1 , VAR_4 , VAR_1 ) ; }","['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",1970
"public void METHOD_1 ( TYPE_1 error ) { TYPE_2 listener = VAR_1 . get ( VAR_2 ) ; if ( listener != null ) listener . METHOD_1 ( METHOD_2 ( ) , VAR_2 , java.lang.String . METHOD_3 ( error ) , null ) ; }","public void METHOD_1 ( TYPE_1 error ) { VAR_1 . get ( VAR_2 ) . METHOD_1 ( METHOD_2 ( ) , VAR_2 , java.lang.String . METHOD_3 ( error ) , null ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1972
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_1 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1973
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( VAR_3 . getColor ( this , VAR_4 ) ) ; }",private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1974
public java.util.Set < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( VAR_2 . METHOD_2 ( ) ) ) ; java.util.Set < TYPE_1 > VAR_3 = new java.util.HashSet ( VAR_1 ) ; return VAR_3 ; },public java.util.Set < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { return new java.util.HashSet ( VAR_2 . METHOD_2 ( ) ) ; },"['Insert ConstructorCall', 'Insert Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",1975
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; return VAR_2 ; },public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { return ( ( java.util.List ) ( VAR_1 . METHOD_3 ( ) ) ) ; },"['Move Invocation', 'Insert TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",1976
public static float METHOD_1 ( float number ) { java.lang.String str = VAR_1 . format ( number ) ; return TYPE_1 . METHOD_2 ( str ) ; },public static float METHOD_1 ( float number ) { return TYPE_1 . METHOD_2 ( VAR_1 . format ( number ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",1977
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; },"['Delete VariableRead', 'Delete Invocation']",1978
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_2 result = METHOD_3 ( VAR_1 ) ; this . VAR_4 = result ; this . VAR_5 = new TYPE_1 ( result ) ; },public void METHOD_1 ( ) { TYPE_2 result = METHOD_3 ( VAR_2 . METHOD_2 ( VAR_3 ) ) ; this . VAR_4 = result ; this . VAR_5 = new TYPE_1 ( result ) ; },"['Update LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",1979
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( METHOD_2 ( ) , VAR_1 class ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; this . METHOD_3 ( intent ) ; }","['Insert ThisAccess', 'Insert ThisAccess', 'Delete Invocation']",1980
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_3 ( ) ; VAR_3 . execute ( ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",1982
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . remove ( VAR_3 . getId ( ) ) ; TYPE_2 . METHOD_2 ( VAR_4 ) . delete ( null ) ; },public void METHOD_1 ( ) { java.lang.Long id = null ; VAR_2 . remove ( id ) ; TYPE_2 . METHOD_2 ( VAR_4 ) . delete ( null ) ; },"['Update LocalVariable', 'Update TypeReference', 'Insert Literal', 'Insert VariableRead', 'Delete ConstructorCall', 'Delete TypeAccess', 'Delete Invocation']",1984
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( METHOD_2 ( new TYPE_2 ( ) ) ) ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( new TYPE_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete VariableRead']",1985
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . getData ( VAR_1 . METHOD_2 ( ) ) ; TYPE_2 VAR_5 = VAR_4 . getData ( VAR_2 . METHOD_2 ( ) ) ; return ( VAR_6 ) - ( VAR_7 ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . getData ( VAR_1 ) ; TYPE_2 VAR_5 = VAR_4 . getData ( VAR_2 ) ; return ( VAR_6 ) - ( VAR_7 ) ; }","['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Delete Invocation', 'Delete Invocation']",1986
private TYPE_1 METHOD_1 ( ) { VAR_1 = METHOD_2 ( ) ; p = METHOD_2 ( ) ; if ( ! ( VAR_2 . equals ( p ) ) ) return p . METHOD_3 ( VAR_1 ) ; return null ; },private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_1 p = METHOD_2 ( ) ; if ( ! ( VAR_2 . equals ( p ) ) ) return p . METHOD_3 ( VAR_1 ) ; return null ; },"['Insert LocalVariable', 'Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead', 'Delete FieldRead', 'Delete TypeAccess']",1988
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = value . METHOD_2 ( ) ; VAR_2 . position ( offset ) ; VAR_1 . METHOD_3 ( ( ( offset ) + ( length ) ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return value ; },"['Move FieldRead', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead']",1990
"public void METHOD_1 ( TYPE_1 VAR_1 , int position , java.lang.Object VAR_2 ) { super . METHOD_1 ( VAR_1 , position , VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( VAR_2 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int position , java.lang.Object VAR_2 ) { super . METHOD_1 ( VAR_1 , position , VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_2 ) ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move VariableRead', 'Delete FieldWrite', 'Delete Assignment']",1991
public void METHOD_1 ( float VAR_1 ) { double VAR_2 = 0 ; double VAR_3 = FLOAT_1 ; double VAR_4 = INT_1 - VAR_3 ; double VAR_5 = 0 ; },public void METHOD_1 ( float VAR_1 ) { double VAR_2 = 0 ; double VAR_3 = FLOAT_1 ; double VAR_4 = INT_1 - VAR_3 ; double VAR_5 = 0 ; double VAR_3 = INT_1 ; double VAR_4 = INT_1 - VAR_3 ; double VAR_5 = 0 ; },"['Insert LocalVariable', 'Insert LocalVariable', 'Insert LocalVariable', 'Insert TypeReference', 'Insert FieldRead', 'Insert TypeReference', 'Insert BinaryOperator', 'Insert TypeReference', 'Insert Literal', 'Insert FieldRead', 'Insert VariableRead']",1992
private TYPE_1 METHOD_1 ( java.util.ArrayList < TYPE_2 > VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( 1 ) ; return VAR_2 ; },private TYPE_1 METHOD_1 ( java.util.ArrayList < TYPE_2 > VAR_1 ) { TYPE_1 VAR_2 = null ; return VAR_2 ; },"['Insert Literal', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",1996
public void METHOD_1 ( TYPE_1 item ) { VAR_1 . remove ( item ) ; VAR_2 . remove ( VAR_3 . METHOD_2 ( item ) ) ; METHOD_3 ( ) ; },public int METHOD_1 ( TYPE_1 item ) { int result = VAR_2 . remove ( VAR_3 . METHOD_2 ( item ) ) ; VAR_1 . remove ( item ) ; METHOD_3 ( ) ; return result ; },"['Update TypeReference', 'Insert LocalVariable', 'Insert Return', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",1998
"public int METHOD_1 ( long time ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( time ) , TYPE_3 . METHOD_4 ( ) ) . METHOD_5 ( ) ; }",public int METHOD_1 ( long time ) { java.util.Date date = new java.util.Date ( time ) ; return date . METHOD_5 ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Insert ConstructorCall', 'Move VariableRead', 'Insert VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2000
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = this . VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_4 . toString ( ) ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return this . VAR_3 . METHOD_2 ( VAR_1 ) . toString ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",2002
protected void execute ( ) { double VAR_1 = VAR_2 ; double VAR_3 = VAR_2 . METHOD_1 ( VAR_4 ) ; super . execute ( ) ; },protected void execute ( ) { super . execute ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",2003
"public TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 ) ; TYPE_3 . METHOD_3 ( VAR_3 , VAR_1 , VAR_2 , VAR_4 ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_3 . METHOD_3 ( VAR_3 , VAR_1 , TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 ) , VAR_4 ) ; return VAR_3 ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2007
"protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_1 VAR_4 = TYPE_5 . METHOD_2 ( VAR_1 , VAR_3 , null , false , VAR_5 , VAR_6 , 0 ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; return VAR_4 ; }","protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_1 VAR_4 = TYPE_5 . METHOD_2 ( VAR_1 , VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; return VAR_4 ; }","['Delete Literal', 'Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal']",2008
public final boolean METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( ) ; return ( VAR_3 != null ) && ( VAR_3 . METHOD_1 ( ) ) ; },public final boolean METHOD_1 ( ) { return true ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",2009
private boolean METHOD_1 ( ) { boolean VAR_1 = false ; VAR_2 . length ( ) ; return VAR_1 ; },private boolean METHOD_1 ( ) { return true ; },"['Insert Literal', 'Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2011
"public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; int result = VAR_2 . count ( VAR_1 ) ; assertEquals ( 1 , result ) ; }","public void METHOD_1 ( ) { int VAR_1 = 1 ; int result = VAR_2 . count ( VAR_1 ) ; assertEquals ( VAR_1 , result ) ; }","['Update TypeReference', 'Move Literal', 'Insert VariableRead', 'Delete FieldRead']",2012
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( METHOD_2 ( ) , getId ( ) ) ; VAR_3 . main ( null ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 . main ( null ) ; },"['Delete Invocation', 'Delete Invocation']",2013
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; },public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Delete FieldWrite', 'Delete Assignment']",2014
"public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , final java.lang.Object VAR_2 , java.lang.Object VAR_3 ) { TYPE_2 label = new TYPE_2 ( ( ( java.lang.String ) ( VAR_2 ) ) ) ; label . METHOD_2 ( ) ; label . METHOD_3 ( STRING_1 ) ; return label ; }","public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , final java.lang.Object VAR_2 , java.lang.Object VAR_3 ) { return VAR_2 ; }","['Update VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2015
public void METHOD_1 ( int VAR_1 ) { int a ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; VAR_4 . setText ( java.lang.String . METHOD_3 ( VAR_1 ) ) ; },public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; VAR_4 . setText ( java.lang.String . METHOD_3 ( VAR_1 ) ) ; },"['Delete TypeReference', 'Delete LocalVariable']",2017
"public void METHOD_1 ( ) { VAR_1 = true ; android.content.Intent data = new android.content.Intent ( ) ; data . METHOD_2 ( VAR_2 , VAR_3 ) ; data . METHOD_2 ( VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_6 , data ) ; super . METHOD_1 ( ) ; }",public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = true ; },"['Move Assignment', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2019
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { boolean VAR_2 = VAR_3 . equals ( VAR_1 . METHOD_2 ( ) ) ; METHOD_3 ( VAR_1 , response , VAR_2 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { METHOD_3 ( VAR_1 , response , false ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2022
public void METHOD_1 ( ) { byte VAR_1 = INT_1 ; byte VAR_2 = - 1 ; java.lang.System.out.println ( ( ( VAR_1 & INT_2 ) < < ( INT_3 + VAR_2 ) ) ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete Literal', 'Delete UnaryOperator', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Invocation']",2023
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.util.List < TYPE_2 > VAR_3 = VAR_4 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_3 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_4 . METHOD_1 ( ) ) ; return VAR_1 ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2025
"private void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.System.out.println ( ) ; VAR_2 . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ( STRING_2 + VAR_1 ) ) , VAR_3 , VAR_4 ) ) ) ; }",private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete ConstructorCall', 'Delete Invocation']",2026
"protected void execute ( ) { double VAR_1 = ( ( - ( VAR_2 . METHOD_1 ( ) ) ) + 1 ) / INT_1 ; VAR_3 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( STRING_1 , VAR_2 . METHOD_1 ( ) ) ; }",protected void execute ( ) { VAR_3 . METHOD_2 ( VAR_2 . METHOD_1 ( ) ) ; },"['Update Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess']",2027
public void METHOD_1 ( java.lang.Throwable t ) { long p = VAR_1 ; if ( p != 0L ) { VAR_1 = 0 ; TYPE_1 . METHOD_2 ( p ) ; } VAR_2 . METHOD_3 ( 1 ) ; VAR_3 . METHOD_4 ( t ) ; },public void METHOD_1 ( java.lang.Throwable t ) { VAR_2 . METHOD_3 ( 1 ) ; VAR_3 . METHOD_4 ( t ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldWrite', 'Delete Literal', 'Delete Assignment', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2028
"public TYPE_1 counter ( java.lang.String name ) { return METHOD_1 ( name , VAR_1 . counter ( name ) ) ; }","public TYPE_1 counter ( java.lang.String name ) { TYPE_1 c = VAR_1 . counter ( name ) ; return METHOD_1 ( name , c ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",2030
public java.lang.String METHOD_1 ( ) { int VAR_1 = java.util.Calendar.getInstance ( ) . get ( VAR_2 ) ; return ( ( url ) + STRING_1 ) + VAR_1 ; },public java.lang.String METHOD_1 ( ) { return url ; },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator']",2031
"public java.lang.String get ( java.lang.String url ) throws TYPE_1 { java.lang.String result = METHOD_1 ( STRING_1 , null , url ) ; TYPE_2 . METHOD_2 ( result ) ; return result ; }","public java.lang.String get ( java.lang.String url ) throws TYPE_1 { return METHOD_1 ( STRING_1 , null , url ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2034
"public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String line ) { int VAR_2 = 1 + ( this . VAR_3 . METHOD_2 ( VAR_1 , line ) ) ; return VAR_2 > ( VAR_4 ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String line ) { return this . VAR_3 . METHOD_1 ( VAR_1 , line ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete Literal', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",2035
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( true ) ) ; try { VAR_2 . start ( ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_2 ( ) ; } return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; try { VAR_2 . start ( ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_2 ( ) ; } return VAR_1 ; },"['Delete Literal', 'Delete ConstructorCall']",2036
private boolean METHOD_1 ( ) { java.util.Date VAR_1 = new java.util.Date ( ) ; if ( VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) { return true ; } else { return false ; } },private boolean METHOD_1 ( ) { java.util.Calendar VAR_1 = java.util.Calendar.getInstance ( ) ; if ( VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) { return true ; } else { return false ; } },"['Update TypeReference', 'Insert Invocation', 'Insert TypeAccess', 'Delete ConstructorCall']",2038
"protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 = TYPE_2 . METHOD_3 ( ) ; METHOD_4 ( ) . METHOD_5 ( ) . replace ( VAR_3 , VAR_2 , VAR_4 ) . commit ( ) ; }","protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_3 ( ) ; METHOD_4 ( ) . METHOD_5 ( ) . replace ( VAR_3 , VAR_2 , VAR_4 ) . commit ( ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",2040
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_3 ( VAR_3 ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2041
TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { METHOD_2 ( VAR_1 ) ; TYPE_1 node = new TYPE_2 ( ) . METHOD_3 ( VAR_1 ) ; new TYPE_3 ( ) . index ( node ) ; return node ; },void METHOD_1 ( TYPE_1 node ) { new TYPE_3 ( ) . index ( node ) ; },"['Update TypeReference', 'Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete ConstructorCall', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",2042
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 , VAR_2 . METHOD_3 ( ) ) ; return VAR_1 ; }",public java.lang.String METHOD_1 ( ) { return STRING_1 ; },"['Update TypeReference', 'Move FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",2044
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.System.out.println ( VAR_1 . METHOD_1 ( INT_1 ) ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2045
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( 0 , 0 , VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ; this . VAR_3 . METHOD_1 ( VAR_1 , VAR_2 , 0 , 0 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( 0 , 0 , METHOD_2 ( ) , METHOD_3 ( ) ) ; this . VAR_3 . METHOD_1 ( VAR_1 , VAR_2 , 0 , 0 ) ; }","['Insert Invocation', 'Insert Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2047
"private boolean METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . get ( STRING_1 ) ; return ( VAR_1 != null ) && ( VAR_3 . equals ( ""true"" ) ) ; }",private boolean METHOD_1 ( ) { return true ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete BinaryOperator']",2048
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 , VAR_2 ) ; return STRING_3 ; }",public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { return STRING_3 ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2049
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_2 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2050
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2052
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_2 > VAR_2 ) { VAR_3 . METHOD_2 ( VAR_2 ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_3 ( VAR_1 ) ; return VAR_4 ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_2 > VAR_2 ) { VAR_3 . METHOD_2 ( VAR_2 ) ; return VAR_5 . METHOD_3 ( VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2053
"public void METHOD_1 ( TYPE_1 data ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( data ) ; }",public void METHOD_1 ( TYPE_1 data ) { TYPE_2 VAR_1 = new TYPE_2 ( data ) ; VAR_1 . METHOD_2 ( ) ; },"['Move VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead']",2054
private boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { boolean VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ( index ) - > ( index < 0 ) || ( index > ( VAR_4 . size ( ) ) ) ) ; return VAR_2 ; },private boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { return VAR_3 . METHOD_2 ( ) . METHOD_3 ( ( index ) - > ( index < 0 ) && ( index > ( VAR_4 . size ( ) ) ) ) ; },"['Move Invocation', 'Update BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2055
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 c = new TYPE_1 ( ) ; assertEquals ( STRING_1 , c . METHOD_2 ( 1 ) . toString ( ) ) ; assertEquals ( STRING_2 , c . METHOD_2 ( INT_1 ) . toString ( ) ) ; }",public void METHOD_1 ( ) throws java.lang.Exception { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",2057
private static int METHOD_1 ( double VAR_1 ) { int size = TYPE_1 . METHOD_2 ( ( ( int ) ( INT_1 / VAR_1 ) ) ) ; return size ; },private static int METHOD_1 ( double VAR_1 ) { return ( ( int ) ( INT_1 / VAR_1 ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2058
"public int METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( element ) ) ; return TYPE_2 . METHOD_2 ( VAR_2 . toString ( ) , VAR_3 . toString ( ) , VAR_4 . toString ( ) ) ; }",public int METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( element ) ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2059
public boolean METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_2 != null ; },public boolean METHOD_1 ( int VAR_1 ) { return ( VAR_3 . METHOD_2 ( VAR_1 ) ) != null ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2061
public void delete ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) . delete ( VAR_2 ) ; },public void delete ( java.lang.String VAR_1 ) { VAR_3 . METHOD_2 ( ) . delete ( VAR_1 ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2062
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 , STRING_1 ) ; VAR_2 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_3 ( new TYPE_2 ( STRING_1 , STRING_1 ) ) ; return VAR_1 ; }","['Update VariableRead', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2064
"public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.util.Collection < ? extends TYPE_2 > VAR_2 ) throws java.io.IOException { java.lang.String VAR_3 = TYPE_3 . METHOD_2 ( VAR_2 ) ; return TYPE_3 . METHOD_1 ( VAR_1 , VAR_3 ) ; }","public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.util.Collection < ? extends TYPE_2 > VAR_2 ) throws java.io.IOException { return TYPE_3 . METHOD_1 ( VAR_1 , TYPE_3 . METHOD_2 ( VAR_2 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2065
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( TYPE_1 ) ; TYPE_2 name = TYPE_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( name ) ; METHOD_5 ( VAR_2 ) . METHOD_6 ( name ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( TYPE_1 ) ; VAR_1 . METHOD_4 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_5 ( VAR_2 ) . METHOD_6 ( TYPE_1 ) ; },"['Move Invocation', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2066
"public static void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; }",public static void METHOD_1 ( ) throws java.lang.Exception { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2067
TYPE_1 METHOD_1 ( ) { TYPE_1 event = VAR_1 . METHOD_1 ( ) ; if ( event != null ) { return event ; } return ( ( TYPE_1 ) ( VAR_2 . METHOD_1 ( ) ) ) ; },TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation']",2068
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( ) ) { return ; } VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; METHOD_5 ( ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String value = VAR_3 . METHOD_4 ( ) ; VAR_2 . METHOD_3 ( value ) ; METHOD_5 ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",2069
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 , STRING_3 ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( STRING_4 , VAR_3 ) ; return STRING_5 ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_3 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 , STRING_3 ) ; return STRING_5 ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2070
private void METHOD_1 ( boolean VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ( VAR_1 ? TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) : VAR_4 ) ) ; VAR_3 . METHOD_5 ( VAR_1 ) ; },private void METHOD_1 ( boolean VAR_1 ) { VAR_3 . METHOD_4 ( ( VAR_1 ? TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) : VAR_4 ) ) ; VAR_3 . METHOD_5 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",2071
"public TYPE_1 METHOD_1 ( long VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { java.lang.String VAR_3 = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; TYPE_1 result = new TYPE_3 ( ) ; result . METHOD_2 ( VAR_3 ) ; return result ; }","public TYPE_1 METHOD_1 ( long VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { java.lang.String VAR_3 = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; return new TYPE_3 ( VAR_3 ) ; }","['Insert ConstructorCall', 'Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2073
"protected void METHOD_1 ( java.lang.Void result , java.lang.Exception VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_3 ) ; if ( VAR_2 != null ) { VAR_4 . METHOD_3 ( VAR_2 ) ; } }","protected void METHOD_1 ( java.lang.Void result , java.lang.Exception VAR_1 ) { VAR_4 . METHOD_3 ( METHOD_2 ( VAR_3 ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2074
public static java.lang.String getName ( java.lang.String key ) { java.lang.String value = VAR_1 . get ( key ) ; if ( key == null ) { return STRING_1 ; } else { return value ; } },public static java.lang.String getName ( java.lang.String key ) { return VAR_1 . get ( key ) ; },"['Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",2075
private int METHOD_1 ( ) { int VAR_1 = ( ( int ) ( TYPE_1 . METHOD_2 ( ( ( ( double ) ( METHOD_3 ( ) ) ) / FLOAT_1 ) ) ) ) ; return VAR_1 ; },private int METHOD_1 ( ) { return 0 ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2076
"public boolean remove ( java.lang.String path ) throws java.io.IOException { java.lang.String [ ] VAR_1 = METHOD_1 ( path , true ) ; this . VAR_2 . METHOD_2 ( VAR_1 [ 0 ] , VAR_1 [ 1 ] ) ; return true ; }","public boolean remove ( java.lang.String path ) throws java.io.IOException { java.lang.String [ ] VAR_1 = METHOD_1 ( path ) ; this . VAR_2 . METHOD_2 ( VAR_1 [ 0 ] , VAR_1 [ 1 ] ) ; return true ; }",['Delete Literal'],2077
"public void METHOD_1 ( java.lang.Long VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 , VAR_1 ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( java.lang.Long VAR_1 ) { METHOD_3 ( new android.content.Intent ( this , VAR_2 class ) ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2078
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; int VAR_3 = VAR_2 . METHOD_3 ( CHAR_1 ) ; METHOD_4 ( VAR_4 . substring ( ( VAR_3 + 1 ) ) ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; METHOD_4 ( VAR_4 . substring ( 1 ) ) ; }","['Move Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator']",2079
public java.util.List < TYPE_1 > METHOD_1 ( final java.lang.Long VAR_1 ) { TYPE_2 state = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( state != null ) { return new java.util.LinkedList ( state . METHOD_3 ( ) ) ; } else return null ; },public java.util.List < TYPE_1 > METHOD_1 ( final java.lang.Long VAR_1 ) { return new java.util.LinkedList ( VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ) ; },"['Insert Return', 'Insert ConstructorCall', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2080
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( INT_1 ) ) ; VAR_2 . setValue ( new TYPE_2 ( INT_2 ) ) ; assertTrue ( VAR_2 . getValue ( ) . equals ( new TYPE_2 ( INT_1 ) ) ) ; },"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; VAR_2 . setValue ( INT_2 ) ; assertEquals ( VAR_2 . getValue ( ) , INT_1 ) ; }","['Insert Invocation', 'Update Invocation', 'Move Invocation', 'Update ConstructorCall', 'Move ConstructorCall', 'Move TypeAccess', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete ConstructorCall', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete Invocation']",2081
"public static TYPE_1 METHOD_1 ( java.lang.String message , java.lang.Throwable VAR_1 ) { TYPE_1 result = new TYPE_1 ( message , VAR_1 , true ) ; result . METHOD_2 ( VAR_2 ) ; return result ; }","public static TYPE_1 METHOD_1 ( java.lang.String message , java.lang.Throwable VAR_1 ) { return new TYPE_1 ( message , VAR_1 , false ) ; }","['Move ConstructorCall', 'Update Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2082
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( this ) ; VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 . METHOD_4 ( VAR_3 . getInt ( STRING_1 ) ) , this ) ) ; }","private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this ) ; VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 . METHOD_4 ( VAR_3 . getInt ( STRING_1 ) ) , this ) ) ; }","['Insert ConstructorCall', 'Move ThisAccess', 'Delete TypeAccess', 'Delete Invocation']",2083
public void METHOD_1 ( double VAR_1 ) { java.lang.String message = ( STRING_1 + VAR_1 ) + STRING_2 ; VAR_2 . i ( message ) ; },public void METHOD_1 ( double VAR_1 ) { VAR_2 . i ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2085
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( STRING_1 , VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_3 ( STRING_1 , TYPE_2 . METHOD_2 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2092
"protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 query , TYPE_4 context , TYPE_5 VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , query , context , VAR_2 ) ; VAR_3 . METHOD_2 ( ) ; return VAR_3 ; }","protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 query , TYPE_4 context , TYPE_5 VAR_2 ) { return new TYPE_1 ( VAR_1 , query , context , VAR_2 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2094
public java.util.Properties METHOD_1 ( ) { java.util.Properties VAR_1 = new java.util.Properties ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_1 ; },public java.util.Properties METHOD_1 ( ) { return new java.util.Properties ( VAR_2 ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2095
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; assertTrue ( ( ( VAR_3 . size ( ) ) > 0 ) ) ; assertNotNull ( VAR_3 . get ( 0 ) . METHOD_3 ( ) ) ; },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",2096
"public void METHOD_1 ( int VAR_1 ) throws java.lang.Exception { int index = this . VAR_2 . METHOD_2 ( VAR_1 ) ; if ( index > 0 ) METHOD_3 ( index , VAR_3 ) ; }","public void METHOD_1 ( int VAR_1 ) throws java.lang.Exception { METHOD_3 ( this . VAR_2 . METHOD_2 ( VAR_1 ) , VAR_3 ) ; }","['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2097
private static void METHOD_1 ( TYPE_1 path ) { java.io.File file = path . METHOD_2 ( ) ; if ( ( file . METHOD_3 ( ) ) && ( ! ( file . METHOD_4 ( ) ) ) ) { file . METHOD_5 ( true ) ; } },private static void METHOD_1 ( java.lang.String path ) { java.io.File file = new java.io.File ( path ) ; if ( ( file . METHOD_3 ( ) ) && ( ! ( file . METHOD_4 ( ) ) ) ) { file . METHOD_5 ( true ) ; } },"['Update TypeReference', 'Insert ConstructorCall', 'Move VariableRead', 'Delete Invocation']",2099
"public long METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 != null ) { return VAR_4 . METHOD_3 ( ) ; } return 0 ; }",public long METHOD_1 ( java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_4 . METHOD_3 ( ) ; } return 0 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2100
public static void main ( java.lang.String ... args ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( new TYPE_2 ( ) . METHOD_1 ( new TYPE_3 ( ) ) ) ) ; VAR_1 . METHOD_2 ( ) ; },public static void main ( java.lang.String ... args ) { new TYPE_2 ( ) . METHOD_1 ( new TYPE_3 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2101
"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_3 ) ; METHOD_3 ( VAR_1 ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( intent ) ; }","['Update LocalVariable', 'Update VariableRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2103
"public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_3 . i ( VAR_4 , ( STRING_1 + VAR_1 ) ) ; VAR_5 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }",public void METHOD_1 ( android.view.View view ) { VAR_5 . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; METHOD_5 ( ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2107
public boolean METHOD_1 ( ) { TYPE_1 result = VAR_1 . METHOD_2 ( this ) ; return ( result . METHOD_3 ( ) ) || ( result . METHOD_4 ( ) ) ; },public boolean METHOD_1 ( ) { VAR_1 . METHOD_2 ( this ) ; return true ; },"['Move Invocation', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",2108
public java.lang.Boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; int result = this . element . METHOD_2 ( VAR_1 ) ; return ( VAR_2 . getValue ( ) ) == 1 ; },public java.lang.Boolean METHOD_1 ( ) { int result = this . element . METHOD_2 ( VAR_1 ) ; return ( this . element . METHOD_1 ( ) ) == 1 ; },"['Insert TypeAccess', 'Update Invocation', 'Insert FieldRead', 'Insert ThisAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess']",2109
public boolean METHOD_1 ( java.lang.String value ) { java.lang.String VAR_1 = ( STRING_1 + ( this . pattern ) ) + STRING_1 ; TYPE_1 p = TYPE_1 . METHOD_2 ( VAR_1 ) ; return p . METHOD_3 ( value ) . METHOD_4 ( ) ; },public boolean METHOD_1 ( java.lang.String value ) { TYPE_1 p = TYPE_1 . METHOD_2 ( this . pattern ) ; return p . METHOD_3 ( value ) . METHOD_4 ( ) ; },"['Update LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move TypeAccess', 'Move FieldRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",2110
"public void METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( VAR_2 ) ; if ( null != VAR_3 ) { VAR_3 . METHOD_3 ( VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) { METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_1 ) ; }","['Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2112
"public void METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . assertThat ( ( VAR_1 >= 0 ) , TYPE_1 . METHOD_3 ( true ) ) ; }",public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Invocation']",2113
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; java.lang.String VAR_1 = TYPE_2 . METHOD_3 ( ) ; VAR_2 = TYPE_3 . METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; VAR_2 = TYPE_3 . METHOD_4 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2115
public java.lang.String METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_2 ( STRING_1 ) ; } java.lang.String VAR_2 = STRING_2 ; throw new TYPE_1 ( ( VAR_2 + ( VAR_3 ) ) ) ; },public java.lang.String METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_2 ( STRING_1 ) ; } throw new TYPE_1 ( ( STRING_2 + ( VAR_3 ) ) ) ; },"['Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2116
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; VAR_3 = METHOD_4 ( ) ; METHOD_5 ( ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_5 . start ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; VAR_3 = METHOD_4 ( ) ; METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",2117
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; return TYPE_3 . METHOD_4 ( VAR_2 ) ; },public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) ; return TYPE_3 . METHOD_4 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2118
private void update ( java.net.URL url ) { java.lang.String VAR_1 = VAR_2 . toString ( ) ; VAR_3 . METHOD_1 ( ) . METHOD_2 ( VAR_1 ) ; VAR_4 . setText ( VAR_1 ) ; METHOD_3 ( ) ; },private void update ( java.net.URL url ) { VAR_3 . METHOD_1 ( ) . METHOD_2 ( VAR_2 . toString ( ) ) ; VAR_4 . setText ( VAR_2 . toString ( ) ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2119
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( VAR_2 . toString ( ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( METHOD_2 ( ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",2120
"public static TYPE_1 METHOD_1 ( int index ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( STRING_1 , index ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; return VAR_1 ; }","public static TYPE_1 METHOD_1 ( int index ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 b = new TYPE_2 ( ) ; b . METHOD_2 ( STRING_1 , index ) ; VAR_1 . METHOD_3 ( b ) ; return VAR_1 ; }","['Update LocalVariable', 'Update VariableRead', 'Update VariableRead']",2121
public void METHOD_1 ( TYPE_1 VAR_1 ) { int i = this . VAR_2 . METHOD_2 ( VAR_1 ) ; this . VAR_3 . remove ( i ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_3 . remove ( VAR_1 ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2122
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String file = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; final java.lang.String VAR_1 = ( STRING_1 + file ) + STRING_2 ; METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String file = TYPE_1 . METHOD_2 ( ) ; final java.lang.String VAR_1 = ( STRING_1 + file ) + STRING_2 ; METHOD_4 ( VAR_1 ) ; },"['Move Invocation', 'Delete Invocation']",2124
public static java.lang.String METHOD_1 ( java.util.Calendar VAR_1 ) { java.lang.String VAR_2 = null ; TYPE_1 VAR_3 = new TYPE_1 ( STRING_1 ) ; VAR_2 = VAR_4 . format ( VAR_5 . getTime ( ) ) ; java.util.Date VAR_6 = VAR_5 . getTime ( ) ; return VAR_2 ; },public static java.lang.String METHOD_1 ( java.util.Calendar VAR_1 ) { java.lang.String VAR_2 = null ; TYPE_1 VAR_3 = new TYPE_1 ( STRING_1 ) ; VAR_2 = VAR_4 . format ( VAR_5 . getTime ( ) ) ; return VAR_2 ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",2126
public TYPE_1 answer ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = this . VAR_3 . answer ( VAR_1 ) ; this . VAR_4 = this . VAR_5 . METHOD_1 ( ) ; return VAR_2 ; },public TYPE_1 answer ( TYPE_2 VAR_1 ) { this . VAR_4 = this . VAR_5 . METHOD_1 ( ) ; return this . VAR_3 . answer ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2127
public void METHOD_1 ( ) { try ( TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_3 ( ) ) { VAR_3 . execute ( VAR_4 ) ; } catch ( TYPE_4 VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { try ( TYPE_3 VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_3 . execute ( VAR_4 ) ; } catch ( TYPE_4 VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } },"['Update LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",2128
public int METHOD_1 ( int VAR_1 ) { int i = METHOD_2 ( VAR_1 ) . size ( ) ; return i ; },public int METHOD_1 ( int VAR_1 ) { return METHOD_2 ( VAR_1 ) . size ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2129
"public TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_3 VAR_2 = ( ( TYPE_3 ) ( super . METHOD_1 ( ) ) ) ; VAR_2 . METHOD_3 ( STRING_2 , null ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; return super . METHOD_1 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeReference', 'Delete VariableRead']",2130
public static double METHOD_1 ( final int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_2 ( ) ; return VAR_3 . METHOD_1 ( ) ; },public static double METHOD_1 ( final int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; int start = VAR_2 . METHOD_1 ( ) ; return start ; },"['Update LocalVariable', 'Update TypeReference', 'Update Invocation', 'Insert VariableRead', 'Delete VariableRead', 'Delete Invocation']",2131
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( STRING_1 , ( STRING_2 + VAR_1 ) ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_3 ( ) ) ) ; if ( VAR_2 != null ) VAR_2 . METHOD_4 ( VAR_1 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( STRING_1 , ( STRING_2 + VAR_1 ) ) ; METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; }","['Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2132
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; TYPE_3 VAR_2 = new TYPE_4 ( VAR_1 ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",2133
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { this . VAR_1 = VAR_1 ; } return this . VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return this . VAR_1 ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ThisAccess', 'Delete FieldWrite', 'Delete VariableRead', 'Delete Assignment', 'Delete Block', 'Delete If']",2134
"public int METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; return VAR_3 . min ; }",public int METHOD_1 ( TYPE_1 VAR_1 ) { return 0 ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead']",2135
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException , TYPE_2 { boolean VAR_3 = VAR_4 . METHOD_1 ( VAR_2 , VAR_1 ) ; return TYPE_3 . METHOD_2 ( VAR_3 ) . toString ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException , TYPE_2 { VAR_4 . METHOD_1 ( VAR_2 , VAR_1 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Return']",2136
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . getContext ( ) . METHOD_2 ( ) ; if ( ! ( VAR_2 instanceof TYPE_4 ) ) { return new TYPE_1 ( STRING_1 ) ; } return new TYPE_1 ( STRING_2 ) ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( STRING_2 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete UnaryOperator', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",2137
"public TYPE_1 METHOD_1 ( TYPE_1 item ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_2 . METHOD_1 ( item ) ; VAR_3 . METHOD_3 ( VAR_4 class ) . METHOD_4 ( item , VAR_5 ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( TYPE_1 item ) { return VAR_2 . METHOD_1 ( item ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2139
int METHOD_1 ( TYPE_1 p ) { int VAR_1 = p . METHOD_2 ( ) ; if ( VAR_1 != 0 ) return VAR_1 ; return values [ VAR_2 . getColor ( ) ] [ p . METHOD_3 ( ) . METHOD_4 ( ) ] ; },int METHOD_1 ( TYPE_1 p ) { return values [ VAR_2 . getColor ( ) ] [ p . METHOD_3 ( ) . METHOD_4 ( ) ] ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",2141
public java.lang.String METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( ) ; java.lang.String VAR_1 = VAR_2 . getName ( ) ; return STRING_1 ; },public java.lang.String METHOD_1 ( ) { return STRING_1 ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",2142
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . start ( ) ; return new TYPE_1 ( VAR_1 , VAR_2 , null ) ; }","public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { return new TYPE_1 ( VAR_1 , VAR_1 . METHOD_2 ( ) . start ( ) , null ) ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2143
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 writer ) throws TYPE_4 , java.io.IOException { TYPE_5 VAR_2 = new TYPE_5 ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; response . METHOD_3 ( STRING_1 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 writer ) throws TYPE_4 , java.io.IOException { }","['Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2145
"public java.lang.String getString ( java.lang.String key , java.lang.String VAR_1 ) { java.lang.String str = VAR_2 . getString ( key , VAR_1 ) ; if ( str == STRING_1 ) { return VAR_1 ; } else { return str ; } }","public java.lang.String getString ( java.lang.String key , java.lang.String VAR_1 ) { return this . VAR_2 . getString ( key , VAR_1 ) ; }","['Insert Return', 'Move Invocation', 'Insert FieldRead', 'Insert ThisAccess', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",2147
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return VAR_2 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",2149
"public static TYPE_1 METHOD_1 ( int id , android.content.Context context ) { TYPE_2 VAR_1 = new TYPE_2 ( context ) ; TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( id ) ; if ( VAR_2 == null ) { return null ; } else return VAR_2 ; }","public static TYPE_1 METHOD_1 ( int id , android.content.Context context ) { TYPE_2 VAR_1 = new TYPE_2 ( context ) ; if ( ( VAR_1 . METHOD_2 ( id ) ) == null ) { return null ; } else return VAR_1 . METHOD_2 ( id ) ; }","['Move Invocation', 'Insert Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2151
"public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 . delete ( STRING_1 , VAR_1 ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2153
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 = new TYPE_1 ( VAR_1 ) ; return VAR_3 ; },public TYPE_1 METHOD_1 ( ) { VAR_3 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) ) ; return VAR_3 ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2154
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . setValue ( VAR_2 ) ; TYPE_1 listener = VAR_3 ; VAR_4 = new TYPE_2 ( STRING_1 ) ; VAR_5 = VAR_6 ; VAR_4 . METHOD_2 ( listener ) ; VAR_4 . METHOD_1 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . setValue ( VAR_2 ) ; VAR_4 = new TYPE_2 ( STRING_1 ) ; VAR_5 = VAR_6 ; VAR_4 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2155
"public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . METHOD_4 ( ""name"" ) . METHOD_5 ( ) ; return result ; }","public java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . METHOD_4 ( ""name"" ) . METHOD_5 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2156
private void METHOD_1 ( TYPE_1 VAR_1 ) { int index = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( index ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2157
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return VAR_1 . METHOD_2 ( ) ; },public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_1 result = VAR_1 . METHOD_2 ( ) ; return result ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",2162
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_1 ( ) ; new TYPE_3 ( ) ; },public static void main ( java.lang.String [ ] args ) { new TYPE_3 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2163
public static void main ( java.lang.String [ ] args ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 ) ; int VAR_3 = VAR_2 . METHOD_2 ( ) . size ( ) ; java.lang.System.out.println ( VAR_3 ) ; },public static void main ( java.lang.String [ ] args ) { java.lang.String VAR_1 = STRING_1 ; TYPE_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",2164
"public float METHOD_1 ( float VAR_1 , int VAR_2 ) { float VAR_3 = ( ( float ) ( VAR_2 ) ) ; return VAR_1 / VAR_3 ; }","public float METHOD_1 ( float VAR_1 , int VAR_2 ) { float VAR_3 = ( ( float ) ( VAR_2 ) ) ; float t = VAR_1 ; float sum = t / VAR_3 ; return sum ; }","['Insert LocalVariable', 'Insert LocalVariable', 'Insert TypeReference', 'Move VariableRead', 'Insert TypeReference', 'Move BinaryOperator', 'Insert VariableRead', 'Insert VariableRead']",2165
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 = TYPE_5 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; return ( VAR_4 != null ) && ( ( VAR_5 ) != ( VAR_6 ) ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return ( TYPE_5 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) != null ; }","['Update BinaryOperator', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2166
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) . METHOD_2 ( true ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",2168
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ; long VAR_2 = ( java.lang.Integer . METHOD_4 ( VAR_3 . getString ( VAR_4 , ""0"" ) ) ) * INT_1 ; TYPE_3 . METHOD_5 ( VAR_2 ) ; }","private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ; int VAR_2 = java.lang.Integer . METHOD_4 ( VAR_3 . getString ( VAR_4 , ""0"" ) ) ; TYPE_3 . METHOD_5 ( VAR_2 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2169
"TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( false ) ; return VAR_1 ; }","TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_2 , VAR_3 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",2170
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . info ( ( STRING_1 + ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( this . VAR_2 ) ; VAR_4 . METHOD_3 ( ) ; },public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . info ( ( STRING_1 + ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2171
"public java.lang.String METHOD_1 ( java.lang.Long VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_3 ) ; VAR_2 . METHOD_3 ( STRING_2 , VAR_5 . METHOD_4 ( VAR_3 ) ) ; return STRING_3 ; }","public java.lang.String METHOD_1 ( java.lang.Long VAR_1 , TYPE_1 VAR_2 ) { VAR_2 . METHOD_3 ( STRING_2 , VAR_5 . METHOD_4 ( VAR_4 . METHOD_2 ( VAR_1 ) ) ) ; return STRING_3 ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2172
"long METHOD_1 ( int VAR_1 , int VAR_2 ) { long VAR_3 = ( ( long ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ) ) * ( VAR_4 ) ; return VAR_3 ; }","long METHOD_1 ( int VAR_1 , int VAR_2 ) { return ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ) * ( VAR_4 ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead']",2175
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( VAR_1 ) ; intent . METHOD_2 ( STRING_1 ) ; intent . METHOD_3 ( VAR_2 , true ) ; METHOD_4 ( android.content.Intent . METHOD_5 ( intent , STRING_2 ) , VAR_3 ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete FieldRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2176
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; TYPE_2 VAR_1 = TYPE_2 . METHOD_4 ( ) ; VAR_2 . init ( METHOD_3 ( ) ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2177
public java.lang.String replace ( java.lang.String [ ] args ) { java.lang.String VAR_1 = METHOD_1 ( args ) ; if ( VAR_1 != null ) { java.lang.System.out.println ( VAR_1 ) ; return VAR_1 ; } return STRING_1 ; },private void replace ( java.lang.String [ ] args ) { },"['Update TypeReference', 'Update Wra', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",2178
public TYPE_1 METHOD_1 ( java.lang.String key ) { java.lang.String VAR_1 = METHOD_2 ( key ) ; try { return new TYPE_1 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_2 . METHOD_3 ( ) ; return null ; } },public TYPE_1 METHOD_1 ( java.lang.String key ) { java.lang.String VAR_1 = METHOD_2 ( key ) ; try { TYPE_1 obj = new TYPE_1 ( VAR_1 ) ; return obj ; } catch ( java.lang.Exception VAR_2 ) { VAR_2 . METHOD_3 ( ) ; return null ; } },"['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead']",2180
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; android.view.View VAR_3 = METHOD_3 ( VAR_4 ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( 1 ) . METHOD_6 ( INT_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2181
"public < TYPE_1 > boolean METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 VAR_2 ) { boolean VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 ) VAR_4 . METHOD_3 ( VAR_1 ) ; return VAR_3 ; }","public < TYPE_1 > void METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 VAR_2 ) { METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete Return']",2182
public void METHOD_1 ( ) { java.lang.String temp = TYPE_1 . METHOD_2 ( ) ; if ( ! ( VAR_1 . equals ( STRING_1 ) ) ) { path = temp ; } },public void METHOD_1 ( ) { path = TYPE_1 . METHOD_2 ( ) ; },"['Insert Assignment', 'Move FieldWrite', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Assignment', 'Delete Block', 'Delete If']",2183
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( STRING_1 ) ; TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( STRING_2 , VAR_1 ) ; VAR_2 . METHOD_3 ( TYPE_4 . METHOD_2 ( VAR_3 class ) , STRING_3 ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2187
"public void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = this . VAR_1 ; this . VAR_1 = VAR_1 ; VAR_3 . METHOD_2 ( STRING_1 , VAR_2 , VAR_1 ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",2188
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( intent ) ; TYPE_1 VAR_3 = TYPE_1 . METHOD_3 ( METHOD_4 ( ) , STRING_1 , VAR_4 ) ; VAR_5 . show ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( intent ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",2189
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_2 ( ) . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 class ) ; },public void METHOD_1 ( ) throws java.lang.Exception { new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2190
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_2 . remove ( VAR_1 ) ; return this ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { boolean a = VAR_2 . remove ( VAR_1 ) ; return this ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation']",2191
public TYPE_1 METHOD_1 ( TYPE_2 TYPE_3 ) throws java.lang.Exception { TYPE_4 VAR_1 = METHOD_2 ( TYPE_3 ) ; return new TYPE_1 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( TYPE_2 TYPE_3 ) throws java.lang.Exception { TYPE_4 VAR_1 = new TYPE_4 ( TYPE_3 ) ; return new TYPE_1 ( VAR_1 ) ; },"['Insert ConstructorCall', 'Move VariableRead', 'Delete Invocation']",2192
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; java.util.List < TYPE_3 > VAR_5 = new java.util.ArrayList < TYPE_3 > ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",2193
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . get ( VAR_3 class , 1 ) ) ) ; VAR_2 . delete ( VAR_1 ) ; }",public void METHOD_1 ( ) { VAR_2 . delete ( 1 ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2194
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 listener = this . listener ; if ( listener != null ) { listener . METHOD_1 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( listener ) != null ) listener . METHOD_1 ( VAR_1 ) ; },"['Insert FieldRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2196
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( VAR_2 ) ; METHOD_2 ( ) ; return VAR_1 ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = VAR_2 ; METHOD_2 ( ) ; return VAR_1 ; },"['Move FieldRead', 'Delete ConstructorCall']",2197
"public void METHOD_1 ( ) { int result = VAR_1 . METHOD_1 ( VAR_2 [ 0 ] , 1 , 1 , 1 , 0 , ( ( float ) ( FLOAT_1 ) ) ) ; VAR_3 . add ( result ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( VAR_2 [ 0 ] , 1 , 1 , 1 , 0 , ( ( float ) ( FLOAT_1 ) ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2198
public java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( ( ( ( VAR_3 ) + STRING_1 ) + ( VAR_4 ) ) + STRING_1 ) + ( VAR_5 ) ; },public java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; java.lang.String str = ( ( ( ( VAR_3 ) + STRING_1 ) + ( VAR_4 ) ) + STRING_1 ) + ( VAR_5 ) ; return str ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move BinaryOperator', 'Insert VariableRead']",2201
"public void METHOD_1 ( android.view.View VAR_1 ) { boolean VAR_2 = METHOD_2 ( VAR_3 , position ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_3 ( ) ; } }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_3 , position ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2202
"private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 . context ) . METHOD_3 ( VAR_1 , false ) ; TYPE_2 . METHOD_4 ( VAR_4 , ( STRING_1 + VAR_2 ) ) ; return VAR_2 ; }","private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 . context ) . METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_4 , ( STRING_1 + VAR_2 ) ) ; return VAR_2 ; }",['Delete Literal'],2203
public TYPE_1 METHOD_1 ( java.lang.String format ) { TYPE_2 VAR_1 = new TYPE_2 ( format ) ; VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( STRING_1 ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( java.lang.String format ) { return new TYPE_2 ( format ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",2204
public void METHOD_1 ( ) { java.util.Random VAR_1 = new java.util.Random ( ) ; x = ( x ) + ( VAR_1 . METHOD_2 ( INT_1 ) ) ; },public void METHOD_1 ( int x ) { this . x = x ; },"['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead', 'Insert ThisAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",2205
private java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { synchronized ( this . VAR_1 ) { java.util.ArrayList < TYPE_1 > get = new java.util.ArrayList < TYPE_1 > ( this . VAR_1 ) ; this . VAR_1 . METHOD_2 ( ) ; return get ; } },private java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { synchronized ( this . VAR_1 ) { return new java.util.ArrayList < TYPE_1 > ( this . VAR_1 ) ; } },"['Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead']",2206
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; java.util.ArrayList < TYPE_2 > VAR_2 = VAR_1 . METHOD_1 ( VAR_3 ) ; java.lang.System.out.println ( VAR_2 ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",2207
"public void METHOD_1 ( android.view.View view ) { android.content.Intent start = new android.content.Intent ( VAR_1 , VAR_2 class ) ; METHOD_2 ( start ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2208
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_2 . METHOD_3 ( ) . METHOD_4 ( TYPE_3 : : new ) . METHOD_5 ( TYPE_4 . METHOD_6 ( ) ) ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( ) . METHOD_4 ( TYPE_3 : : new ) . METHOD_5 ( TYPE_4 . METHOD_6 ( ) ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2210
public void METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( name ) ; this . VAR_3 . METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( name ) . get ( 0 ) ; this . VAR_3 . METHOD_3 ( VAR_1 ) ; },"['Insert Invocation', 'Move Invocation', 'Insert Literal']",2211
"private static void METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { TYPE_2 . METHOD_3 ( VAR_3 , TYPE_3 . METHOD_1 ( VAR_4 . METHOD_4 ( ) ) ) ; } }","private static void METHOD_1 ( ) { for ( TYPE_1 VAR_3 : VAR_2 . METHOD_2 ( ) ) { TYPE_2 . METHOD_3 ( VAR_3 , TYPE_3 . METHOD_1 ( VAR_4 . METHOD_4 ( ) ) ) ; } }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2212
"public void METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_3 = new TYPE_2 ( VAR_4 . METHOD_3 ( ) , this ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_3 = new TYPE_2 ( VAR_4 . METHOD_3 ( ) , this ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",2213
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) return ; VAR_1 . METHOD_3 ( VAR_2 ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2215
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; METHOD_3 ( ( ! ( VAR_5 ) ) ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Invocation', 'Delete VariableRead']",2216
public java.util.Set < TYPE_1 > METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; return VAR_1 ; },public java.util.Set < TYPE_1 > METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2218
"public void METHOD_1 ( ) { VAR_1 . setText ( ( STRING_1 + ( VAR_2 ) ) ) ; if ( ( VAR_2 ) == 0 ) { android.content.Intent intent = new android.content.Intent ( METHOD_2 ( ) , VAR_3 class ) ; METHOD_3 ( intent ) ; } }",public void METHOD_1 ( ) { VAR_1 . setText ( ( STRING_1 + ( VAR_2 ) ) ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2220
"protected TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = getActivity ( ) ; if ( VAR_2 == null ) return null ; return new TYPE_4 ( VAR_1 , VAR_2 , this ) ; }","protected TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { return new TYPE_4 ( VAR_1 , getActivity ( ) , this ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2221
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2222
"private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = new TYPE_2 ( ( ( TYPE_3 ) ( TYPE_4 . METHOD_1 ( VAR_1 ) . METHOD_2 ( ) ) ) ) ; return TYPE_1 . METHOD_3 ( VAR_2 ) ; }","private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = TYPE_4 . METHOD_1 ( VAR_1 ) . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete ConstructorCall']",2223
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { METHOD_2 ( ) ; TYPE_2 VAR_3 = METHOD_3 ( VAR_1 ) ; if ( VAR_3 != null ) { VAR_4 . METHOD_4 ( VAR_3 ) ; } } },public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { METHOD_2 ( ) ; VAR_4 . METHOD_4 ( METHOD_3 ( VAR_1 ) ) ; } },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2224
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; if ( VAR_2 instanceof TYPE_3 ) { ( ( TYPE_3 ) ( VAR_2 ) ) . METHOD_4 ( VAR_1 ) ; } METHOD_5 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; ( ( TYPE_3 ) ( VAR_1 . METHOD_3 ( ) ) ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; },"['Insert Invocation', 'Update Invocation', 'Move Invocation', 'Move VariableRead', 'Move TypeReference', 'Delete VariableRead', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2226
public TYPE_1 METHOD_1 ( int id ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 . get ( id ) ; if ( VAR_1 != null ) return VAR_1 . METHOD_2 ( ) ; else return null ; },public TYPE_1 METHOD_1 ( int id ) throws TYPE_2 { return VAR_2 . get ( id ) . METHOD_2 ( ) ; },"['Insert Return', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2227
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) { java.util.Map x = VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( x ) ; }",public void METHOD_1 ( TYPE_2 response ) { },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",2228
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { java.lang.Integer temp = java.lang.Integer . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) . compareTo ( VAR_1 . METHOD_3 ( ) ) ; return temp ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_1 . METHOD_3 ( ) ) - ( VAR_2 . METHOD_3 ( ) ) ; }","['Insert BinaryOperator', 'Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2229
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_3 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",2231
private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ; TYPE_2 VAR_4 = VAR_1 . METHOD_3 ( ) ; return ( VAR_4 != null ) && ( VAR_4 . METHOD_4 ( ) ) ; },private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; TYPE_2 VAR_4 = VAR_1 . METHOD_3 ( ) ; return ( VAR_4 != null ) && ( VAR_4 . METHOD_4 ( ) ) ; },['Update TypeAccess'],2232
public long METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; long size = VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return size ; },public long METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; },"['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2233
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; return VAR_2 . METHOD_1 ( ) ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_1 . METHOD_1 ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2234
public static boolean METHOD_1 ( java.lang.Long VAR_1 ) { if ( VAR_1 != null ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; return TYPE_1 . METHOD_1 ( VAR_2 ) ; } else { return false ; } },public static boolean METHOD_1 ( java.lang.Long VAR_1 ) { if ( VAR_1 != null ) { return TYPE_1 . METHOD_1 ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ; } else { return false ; } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2235
"public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , true ) ; if ( VAR_1 == null ) return null ; java.lang.Object VAR_3 = METHOD_1 ( VAR_1 ) ; VAR_4 = true ; return VAR_3 ; }","public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { java.lang.Object VAR_3 = METHOD_1 ( METHOD_2 ( VAR_2 , true ) ) ; VAR_4 = true ; return VAR_3 ; }","['Update LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",2236
private static TYPE_1 METHOD_1 ( java.lang.String arg ) throws java.io.IOException { TYPE_2 VAR_1 = new TYPE_2 ( new java.io.File ( arg ) ) ; return VAR_1 . METHOD_2 ( ) ; },private static TYPE_1 METHOD_1 ( java.lang.String arg ) throws java.io.IOException { java.io.File file = new java.io.File ( arg ) ; TYPE_2 VAR_1 = new TYPE_2 ( file ) ; return VAR_1 . METHOD_2 ( ) ; },"['Update LocalVariable', 'Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Move TypeReference', 'Insert ConstructorCall', 'Insert VariableRead', 'Delete ConstructorCall']",2238
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . remove ( VAR_1 ) ; if ( VAR_2 != null ) VAR_2 . METHOD_2 ( ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . remove ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2239
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > results = METHOD_2 ( VAR_1 , 0 , 1 ) ; if ( ( results == null ) || ( VAR_2 . isEmpty ( ) ) ) return false ; return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( METHOD_2 ( VAR_1 , 0 , 1 ) ) == null ) return false ; return true ; }","['Update BinaryOperator', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation']",2241
public float METHOD_1 ( ) { return VAR_1 . get ( ( ( count ) - 1 ) ) . y ; },public float METHOD_1 ( ) { float height = VAR_1 . get ( ( ( count ) - 1 ) ) . y ; return height ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move FieldRead', 'Insert VariableRead']",2242
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String token = VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; return METHOD_1 ( VAR_1 , token ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 , VAR_2 . METHOD_3 ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2243
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { TYPE_3 output = new TYPE_3 ( VAR_2 , VAR_3 . METHOD_2 ( ) , rows ) ; return VAR_1 . METHOD_3 ( this , output ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { return new TYPE_3 ( VAR_2 , VAR_3 . METHOD_2 ( ) , rows ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation']",2247
"public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent i = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( i ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2248
protected void METHOD_1 ( ) { java.lang.Object [ ] args = METHOD_2 ( ) ; java.lang.String VAR_1 ; if ( args != null ) { } else { } METHOD_3 ( new TYPE_1 ( this ) ) ; },protected void METHOD_1 ( ) { METHOD_3 ( new TYPE_1 ( this ) ) ; },"['Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Block', 'Delete If']",2249
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",2251
"public java.lang.String METHOD_1 ( java.io.InputStream VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { byte [ ] data = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = new java.lang.String ( data , STRING_1 ) ; java.lang.System.out.println ( VAR_3 ) ; return VAR_4 . METHOD_3 ( VAR_3 ) ; }","public java.lang.String METHOD_1 ( java.io.InputStream VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { byte [ ] data = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = new java.lang.String ( data ) ; return VAR_4 . METHOD_3 ( VAR_3 ) ; }","['Update ConstructorCall', 'Delete FieldRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",2252
"public void start ( ) { TYPE_1 VAR_1 = new TYPE_2 ( STRING_1 , STRING_2 , INT_1 ) ; VAR_1 . METHOD_1 ( ) ; }",public void start ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2253
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_2 VAR_2 = ( ( TYPE_3 ) ( VAR_3 . METHOD_3 ( ) ) ) . METHOD_4 ( ) ; TYPE_4 . METHOD_5 ( VAR_2 ) . METHOD_6 ( VAR_4 ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2254
"public TYPE_1 METHOD_1 ( java.lang.String name ) throws java.io.IOException { try ( java.io.FileReader VAR_1 = new java.io.FileReader ( TYPE_2 . METHOD_2 ( VAR_2 , ( ( STRING_1 + name ) + STRING_2 ) ) ) ) { return VAR_3 . METHOD_3 ( VAR_1 , VAR_4 class ) ; } }","public TYPE_1 METHOD_1 ( java.lang.String name ) throws java.io.IOException { try ( java.io.FileReader VAR_1 = new java.io.FileReader ( new java.io.File ( VAR_2 , ( ( STRING_1 + name ) + STRING_2 ) ) ) ) { return VAR_3 . METHOD_3 ( VAR_1 , VAR_4 class ) ; } }","['Insert ConstructorCall', 'Update ConstructorCall', 'Move ConstructorCall', 'Insert FieldRead', 'Move BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2257
private static int METHOD_1 ( int i ) { int sum = 1 ; while ( i > 0 ) { sum *= i ; i -- ; } return sum ; },private static int METHOD_1 ( int i ) { int sum = i ; while ( i > 0 ) { sum *= i ; i -- ; } return sum ; },"['Insert VariableRead', 'Delete Literal']",2259
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { java.lang.String VAR_2 = ( ( java.lang.String ) ( VAR_3 . METHOD_2 ( STRING_1 ) ) ) ; TYPE_4 VAR_4 = ( ( TYPE_4 ) ( VAR_1 . METHOD_3 ( ) ) ) ; return null ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { return null ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",2261
public TYPE_1 METHOD_1 ( java.lang.String value ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( value ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( java.lang.String value ) throws java.lang.Exception { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2262
"public static android.content.Intent METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { android.content.Intent intent = TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; intent . METHOD_3 ( ( ( VAR_3 ) | ( VAR_4 ) ) ) ; return intent ; }","public static android.content.Intent METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead']",2263
public TYPE_1 < ? super TYPE_2 < ? extends TYPE_3 > > METHOD_1 ( final TYPE_1 < ? super TYPE_3 > VAR_1 ) { TYPE_4 < TYPE_3 > VAR_2 = new TYPE_4 < TYPE_3 > ( VAR_1 ) ; VAR_3 . add ( VAR_2 ) ; return VAR_2 ; },public TYPE_1 < ? super TYPE_2 < ? extends TYPE_3 > > METHOD_1 ( final TYPE_1 < ? super TYPE_3 > VAR_1 ) { return new TYPE_4 < TYPE_3 > ( VAR_1 ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2264
"public void METHOD_1 ( android.view.View view ) { int index = VAR_1 . METHOD_2 ( key ) ; if ( index != ( - 1 ) ) { VAR_2 . METHOD_3 ( VAR_3 . get ( index ) , index ) ; } }","public void METHOD_1 ( android.view.View view ) { VAR_2 . METHOD_3 ( VAR_3 . get ( position ) , position ) ; }","['Move Invocation', 'Insert FieldRead', 'Insert FieldRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2265
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; return ( VAR_1 != null ) && ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; },public boolean METHOD_1 ( ) { return VAR_2 . METHOD_1 ( METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",2266
"public static void index ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . type = VAR_3 ; java.util.Collection < TYPE_2 > VAR_4 = TYPE_2 . METHOD_1 ( ) ; METHOD_2 ( VAR_1 , VAR_4 ) ; }",public static void index ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . type = VAR_3 ; METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2267
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) . METHOD_3 ( ) ; java.lang.System.out.println ( VAR_2 ) ; },"['Insert LocalVariable', 'Insert Invocation', 'Insert TypeReference', 'Move Invocation', 'Insert FieldRead', 'Insert VariableRead', 'Insert TypeAccess', 'Delete FieldWrite', 'Delete Assignment']",2269
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; java.lang.String VAR_3 = new java.lang.String ( TYPE_1 . METHOD_3 ( VAR_4 . get ( STRING_1 ) ) , STRING_2 ) ; assertTrue ( METHOD_4 ( VAR_1 , VAR_3 ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; java.lang.System.out.println ( VAR_1 ) ; java.lang.String VAR_3 = new java.lang.String ( TYPE_1 . METHOD_3 ( VAR_4 . get ( STRING_1 ) ) ) ; assertEquals ( 1 , 1 ) ; }","['Insert Invocation', 'Insert Invocation', 'Insert FieldRead', 'Move VariableRead', 'Update ConstructorCall', 'Insert Literal', 'Insert Literal', 'Insert TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",2270
public void METHOD_1 ( android.view.View VAR_1 ) { java.io.File file = new java.io.File ( ( ( TYPE_1 . METHOD_2 ( ) ) + STRING_1 ) ) ; TYPE_2 . METHOD_3 ( file ) ; METHOD_4 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2272
"public void handle ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ) ; VAR_3 . add ( STRING_1 , STRING_2 ) ; METHOD_2 ( VAR_1 , INT_1 , STRING_3 , ( STRING_4 + ( VAR_4 ) ) ) ; }","public void handle ( TYPE_1 VAR_1 ) throws java.io.IOException { METHOD_2 ( VAR_1 , INT_1 , STRING_3 , VAR_4 ) ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2273
public static void main ( java.lang.String [ ] args ) { if ( ( args.length ) > 0 ) { TYPE_1 . METHOD_1 ( args [ 0 ] ) ; return ; } java.lang.String out = STRING_1 ; TYPE_1 . METHOD_2 ( ) ; },public static void main ( java.lang.String [ ] args ) { if ( ( args.length ) > 0 ) { TYPE_1 . METHOD_1 ( args [ 0 ] ) ; return ; } TYPE_1 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",2275
public void METHOD_1 ( ) { TYPE_1 VAR_1 = getActivity ( ) ; if ( VAR_1 != null ) { getActivity ( ) . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { METHOD_4 ( ) ; } } ) ; } },public void METHOD_1 ( ) { getActivity ( ) . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { METHOD_4 ( ) ; } } ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2276
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",2277
public long METHOD_1 ( ) throws TYPE_1 { java.util.Date VAR_1 = new java.util.Date ( ) ; return VAR_2 . getTime ( ) ; },public long METHOD_1 ( ) throws TYPE_1 { return 0 ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",2278
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { float VAR_4 = METHOD_2 ( VAR_2 , VAR_5 ) ; VAR_6 . setText ( java.lang.String . METHOD_3 ( VAR_4 ) ) ; VAR_7 . METHOD_4 ( VAR_5 . METHOD_5 ( ) , VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { VAR_6 . setText ( METHOD_2 ( VAR_2 , VAR_5 ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2279
public final boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; return ( VAR_1 != null ) && ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; },public final boolean METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; },"['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",2280
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = position . METHOD_1 ( VAR_1 ) ; if ( VAR_2 == null ) return null ; return VAR_2 . METHOD_2 ( ) ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return position . METHOD_1 ( VAR_1 ) . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2281
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2283
"public static void METHOD_1 ( java.lang.Object VAR_1 ) throws java.io.IOException , TYPE_1 { java.lang.Object VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_2 VAR_4 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; VAR_5 . add ( VAR_2 ) ; }",public static void METHOD_1 ( java.lang.Object VAR_1 ) throws java.io.IOException { TYPE_2 VAR_4 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2284
"private void METHOD_1 ( ) throws java.io.IOException { long VAR_1 = METHOD_2 ( VAR_2 ) ; java.lang.String message = METHOD_3 ( VAR_2 ) ; java.lang.String VAR_3 = METHOD_3 ( VAR_2 ) ; VAR_4 . put ( VAR_1 , ( ( int ) ( VAR_5 ) ) ) ; }","private void METHOD_1 ( ) throws java.io.IOException { long VAR_1 = METHOD_2 ( VAR_2 ) ; VAR_4 . put ( VAR_1 , ( ( int ) ( VAR_5 ) ) ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",2285
public java.lang.Object function ( java.lang.Object [ ] VAR_1 ) { TYPE_1 execute = ( ) - > { VAR_2 . METHOD_1 ( ) ; VAR_3 . METHOD_2 ( ) ; VAR_3 . METHOD_1 ( ) ; } ; VAR_4 . METHOD_3 ( execute ) ; return true ; },public java.lang.Object function ( java.lang.Object [ ] VAR_1 ) { return true ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2290
public TYPE_1 METHOD_1 ( java.util.Collection < TYPE_2 > value ) { java.util.Set < TYPE_2 > VAR_1 = new java.util.HashSet < > ( ) ; VAR_1 . METHOD_2 ( value ) ; this . VAR_2 = VAR_1 ; return this ; },public TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > value ) { this . VAR_2 = value ; return this ; },"['Update TypeReference', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2291
private static int METHOD_1 ( ) { boolean VAR_1 = ( ( VAR_2 ) instanceof TYPE_1 ) || ( ( VAR_2 ) instanceof TYPE_2 ) ; return TYPE_3 . METHOD_1 ( VAR_1 ) ; },private static int METHOD_1 ( ) { boolean VAR_1 = ( VAR_2 ) instanceof TYPE_1 ; return TYPE_3 . METHOD_1 ( VAR_1 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete BinaryOperator']",2294
"public void METHOD_1 ( TYPE_1 c , int state ) { VAR_1 [ VAR_2 . x ] [ VAR_2 . y ] = state ; }","public void METHOD_1 ( TYPE_1 c , int state ) { int x = VAR_2 . x ; int y = VAR_2 . y ; VAR_1 [ x ] [ y ] = state ; }","['Insert LocalVariable', 'Insert LocalVariable', 'Insert TypeReference', 'Move FieldRead', 'Insert TypeReference', 'Move FieldRead', 'Insert VariableRead', 'Insert VariableRead']",2295
private void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; VAR_3 . METHOD_2 ( VAR_2 ) ; },private void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Update VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",2296
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",2297
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_1 ( ) ; VAR_1 . METHOD_3 ( VAR_3 . getId ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_1 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2298
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = ( ( this . VAR_1 ) != null ) && ( VAR_1 == null ) ; this . VAR_1 = VAR_1 ; return VAR_2 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Update TypeReference', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",2299
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2302
public java.util.List < java.lang.Integer > METHOD_1 ( ) { java.util.List < java.lang.Integer > result = new java.util.LinkedList < java.lang.Integer > ( VAR_1 ) ; if ( VAR_2 . isEmpty ( ) ) { VAR_2 . add ( 1 ) ; } return result ; },public java.util.List < java.lang.Integer > METHOD_1 ( ) { return new java.util.LinkedList < java.lang.Integer > ( VAR_1 ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",2304
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { android.view.View view = VAR_2 . METHOD_2 ( VAR_3 , VAR_1 , false ) ; return new TYPE_1 ( view ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { android.view.View view = VAR_2 . METHOD_2 ( VAR_3 , null ) ; return new TYPE_1 ( view ) ; }","['Update Literal', 'Delete VariableRead']",2305
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) throws TYPE_2 { TYPE_1 response = METHOD_2 ( VAR_1 , false , 0 , VAR_2 ) ; if ( ( response . METHOD_3 ( ) ) == ( VAR_3 ) ) METHOD_4 ( VAR_1 ) ; return response ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) throws TYPE_2 { return METHOD_2 ( VAR_1 , false , 0 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",2306
"private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , new TYPE_2 ( VAR_2 . METHOD_4 ( STRING_1 ) ) ) ; return VAR_1 ; }",private TYPE_1 METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead']",2307
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 ) { float VAR_3 ; TYPE_1 VAR_4 = this . METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_3 ( ) ; VAR_1 . METHOD_3 ( ) ; return VAR_4 ; }","public void METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 ) { float VAR_3 ; this . METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_3 ( ) ; VAR_1 . METHOD_3 ( ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",2308
public void METHOD_1 ( ) { int x = INT_1 + INT_1 ; String = STRING_1 ; int y = x - INT_1 ; int VAR_1 = x + ( y * x ) ; int VAR_2 = ( x + y ) + VAR_1 ; },public void METHOD_1 ( ) { int x = INT_1 + INT_1 ; String = STRING_1 ; int y = x - INT_1 ; int VAR_1 = x + ( y * x ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete LocalVariable']",2309
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent i = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; java.lang.String VAR_3 = java.lang.Integer.toString ( VAR_4 ) ; i . METHOD_3 ( STRING_1 , VAR_3 ) ; METHOD_4 ( i ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent i = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; i . METHOD_3 ( STRING_1 , VAR_4 ) ; METHOD_4 ( i ) ; }","['Move TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2310
public TYPE_1 < TYPE_2 > METHOD_1 ( int VAR_1 ) { TYPE_1 < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( new java.lang.Long ( VAR_1 ) ) ; return VAR_2 ; },public TYPE_1 < TYPE_2 > METHOD_1 ( int VAR_1 ) { TYPE_1 < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; },"['Move VariableRead', 'Delete ConstructorCall']",2311
public static int METHOD_1 ( int VAR_1 ) { int VAR_2 = VAR_1 * INT_1 ; return VAR_2 ; },public static int METHOD_1 ( int VAR_1 ) { return 0 ; },"['Insert Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",2312
public void execute ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_1 ( position ) ; VAR_2 . METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; },public void execute ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_1 ( position ) ; VAR_2 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; },['Update Literal'],2313
"public java.util.List < ? extends TYPE_1 > METHOD_1 ( int VAR_1 , int VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; return VAR_3 ; }","public java.util.List < ? extends TYPE_1 > METHOD_1 ( int VAR_1 , int VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = METHOD_2 ( ) ; return VAR_3 ; }","['Delete VariableRead', 'Delete VariableRead']",2315
private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 . content ) ) ) . METHOD_3 ( 0 ) ) ) ; VAR_1 . METHOD_4 ( true ) ; },private void METHOD_1 ( ) { TYPE_1 view = ( ( TYPE_1 ) ( ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 . content ) ) ) . METHOD_3 ( 0 ) ) ) ; view . METHOD_4 ( true ) ; },"['Update LocalVariable', 'Update VariableRead']",2316
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 = VAR_4 . compareTo ( VAR_5 . sum ) ; if ( VAR_3 == 0 ) { return VAR_6 . compareTo ( VAR_5 . name ) ; } else { return VAR_3 ; } }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_4 . compareTo ( VAR_5 . sum ) ; }","['Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",2317
"public TYPE_1 [ ] METHOD_1 ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) { java.lang.Integer VAR_3 = METHOD_2 ( VAR_2 ) ; return VAR_4 . METHOD_3 ( VAR_1 , VAR_3 ) ; }",public TYPE_1 [ ] METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_4 . METHOD_3 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2318
"private void METHOD_1 ( ) { int index = VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . add ( index , VAR_2 . METHOD_3 ( ) ) ; VAR_3 . remove ( index ) ; }","private void METHOD_1 ( ) { VAR_3 . add ( VAR_1 . METHOD_2 ( VAR_2 ) , VAR_2 . METHOD_3 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2319
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 . height , VAR_4 ) ; }",public static void main ( java.lang.String [ ] args ) { TYPE_1 ( ) ; },"['Insert Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable']",2322
protected void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( 1 ) ; java.lang.System.out.println ( STRING_1 ) ; VAR_1 . METHOD_4 ( ) ; },protected void METHOD_1 ( TYPE_1 event ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2323
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2324
"public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { TYPE_2 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; VAR_3 . replace ( VAR_4 , new TYPE_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_5 ) ; VAR_3 . commit ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { }","['Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2325
"public int METHOD_1 ( ) { long result = TYPE_1 . METHOD_2 ( VAR_1 , INT_1 , INT_2 ) ; if ( result != INT_3 ) { return ( ( int ) ( result ) ) ; } return - 1 ; }","public int METHOD_1 ( ) { return ( ( int ) ( TYPE_1 . METHOD_2 ( VAR_1 , INT_1 , INT_2 ) ) ) ; }","['Move Invocation', 'Move TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete UnaryOperator']",2326
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) . replace ( VAR_4 , VAR_2 , VAR_5 ) . METHOD_4 ( null ) . commit ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) . replace ( VAR_4 , VAR_2 , VAR_5 ) . METHOD_4 ( null ) . commit ( ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",2327
public void METHOD_1 ( ) { int x = INT_1 + INT_1 ; String = STRING_1 ; int y = x - INT_1 ; },public void METHOD_1 ( ) { int x = INT_1 + INT_1 ; String = STRING_1 ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable']",2329
public TYPE_1 METHOD_1 ( java.lang.Long VAR_1 ) { java.lang.Long VAR_2 = VAR_3 . remove ( VAR_1 ) ; boolean VAR_4 = VAR_2 != null ; if ( ! VAR_4 ) return VAR_5 ; if ( VAR_3 . isEmpty ( ) ) return VAR_6 ; return VAR_7 ; },public TYPE_1 METHOD_1 ( java.lang.Long VAR_1 ) { boolean VAR_4 = VAR_3 . remove ( VAR_1 ) ; if ( ! VAR_4 ) return VAR_5 ; if ( VAR_3 . isEmpty ( ) ) return VAR_6 ; return VAR_7 ; },"['Update LocalVariable', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete LocalVariable']",2333
public static void main ( java.lang.String [ ] args ) { int n = INT_1 ; TYPE_1 . METHOD_1 ( n ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2334
"private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( new android.content.Intent ( this , getClass ( ) ) ) ; }",private void METHOD_1 ( ) { android.content.Intent intent = getIntent ( ) ; METHOD_2 ( ) ; METHOD_3 ( intent ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Update Invocation', 'Move Invocation', 'Insert VariableRead', 'Delete ThisAccess', 'Delete ConstructorCall']",2335
"public TYPE_1 put ( TYPE_2 key , TYPE_1 value ) { TYPE_3 < TYPE_2 , TYPE_1 > VAR_1 = VAR_2 . put ( key , METHOD_1 ( key , value ) ) ; if ( VAR_1 == null ) return null ; return VAR_3 . get ( ) ; }","public void put ( TYPE_2 key , TYPE_1 value ) { VAR_2 . put ( key , METHOD_1 ( key , value ) ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return']",2336
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 class ) ; TYPE_1 VAR_4 = VAR_2 . METHOD_3 ( VAR_1 ) ; return TYPE_4 . METHOD_4 ( VAR_4 ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2337
"public static int METHOD_1 ( long start , long end ) { return ( ( int ) ( ( end - start ) / INT_1 ) ) / INT_2 ; }","public static int METHOD_1 ( long start , long end ) { int diff = ( ( int ) ( ( end - start ) / INT_1 ) ) / INT_2 ; return diff ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move BinaryOperator', 'Insert VariableRead']",2340
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { java.lang.String VAR_4 = java.lang.String.format ( STRING_1 , VAR_2 ) ; java.lang.String VAR_5 = java.lang.String.format ( STRING_1 , VAR_3 ) ; VAR_6 . setText ( ( ( VAR_4 + STRING_2 ) + VAR_5 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_6 . setText ( ( ( VAR_2 + STRING_2 ) + VAR_3 ) ) ; }","['Move VariableRead', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2341
public static TYPE_1 METHOD_1 ( int id ) { TYPE_2 p = VAR_1 . METHOD_2 ( id ) ; return METHOD_3 ( VAR_2 . METHOD_4 ( p ) ) ; },public static TYPE_1 METHOD_1 ( ) { return METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2342
"private java.lang.String METHOD_1 ( java.util.Map VAR_1 , java.lang.String name , java.lang.String VAR_2 ) { java.lang.Object value = VAR_3 . get ( name ) ; if ( value == null ) { return VAR_2 ; } else { return VAR_4 . toString ( ) ; } }","private java.lang.String METHOD_1 ( java.util.Map VAR_1 , java.lang.String name , java.lang.String VAR_2 ) { java.lang.String value = VAR_3 . get ( name ) . toString ( ) ; if ( value == null ) { return VAR_2 ; } return value ; }","['Insert Return', 'Update TypeReference', 'Insert Invocation', 'Insert VariableRead', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block']",2343
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = this . VAR_2 . METHOD_1 ( ) ; return VAR_1 ; },public java.lang.String METHOD_1 ( ) { return this . VAR_2 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2344
public void METHOD_1 ( ) { VAR_1 = false ; boolean VAR_2 = true ; VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; },public void METHOD_1 ( ) { VAR_1 = false ; VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",2347
"public static void main ( java.lang.String [ ] args ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 , INT_1 , INT_2 ) ; VAR_2 . METHOD_1 ( ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2348
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String label , java.lang.String [ ] args ) { METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = java.lang.String . METHOD_3 ( STRING_1 , args ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; return execute ( VAR_3 ) ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String label , java.lang.String [ ] args ) { METHOD_2 ( VAR_1 ) ; return execute ( java.lang.String . METHOD_3 ( STRING_1 , args ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2349
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( VAR_2 . values ( ) ) ) ; VAR_3 . METHOD_2 ( ) ; METHOD_3 ( ) ; return VAR_1 ; },public void METHOD_1 ( ) { VAR_3 . METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Update TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",2350
"private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; android.content.Context context = getContext ( ) ; android.content.Intent intent = new android.content.Intent ( context , VAR_2 class ) ; context . METHOD_3 ( VAR_3 ) ; context . METHOD_4 ( intent ) ; }","private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; getContext ( ) . METHOD_3 ( VAR_3 ) ; }","['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",2351
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( ) ) ) ; return VAR_1 . METHOD_1 ( ) ; },public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getActivity ( ) . METHOD_2 ( ) ) ) ; return VAR_1 . METHOD_1 ( ) ; },"['Insert Invocation', 'Delete TypeAccess']",2352
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; final TYPE_2 VAR_3 = TYPE_3 . METHOD_3 ( this ) ; java.lang.String VAR_4 = VAR_5 . getString ( STRING_1 , STRING_2 ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; final TYPE_2 VAR_3 = TYPE_3 . METHOD_3 ( this ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",2353
public TYPE_1 get ( ) { try { TYPE_1 value = getValue ( METHOD_1 ( ) ) ; if ( value == null ) return VAR_1 ; return value ; } catch ( TYPE_2 VAR_2 ) { return VAR_1 ; } },public TYPE_1 get ( ) { try { return getValue ( METHOD_1 ( ) ) ; } catch ( TYPE_2 VAR_2 ) { return VAR_1 ; } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2354
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { java.lang.String name = VAR_3 . params ( STRING_1 ) ; return VAR_4 . METHOD_1 ( name ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return new TYPE_1 ( ) ; }","['Insert ConstructorCall', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2355
public void METHOD_1 ( ) { VAR_1 = VAR_2 ; java.io.File file = VAR_3 . METHOD_2 ( ) ; VAR_4 = METHOD_3 ( file ) ; },public void METHOD_1 ( ) { VAR_1 = VAR_2 ; VAR_4 = VAR_3 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2356
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 response = new TYPE_1 ( STRING_1 ) ; TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_1 ( response , VAR_1 ) ; }",public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",2358
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 . METHOD_2 ( VAR_4 ) ) ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; METHOD_4 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2360
"public void METHOD_1 ( java.lang.String name , long VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( name , VAR_1 ) ; java.lang.System.out.println ( VAR_2 ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; }","public void METHOD_1 ( java.lang.String name , long VAR_1 ) { VAR_3 . METHOD_1 ( new TYPE_1 ( name , VAR_1 ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2361
public TYPE_1 METHOD_1 ( java.lang.String url ) throws java.io.IOException { TYPE_2 k = METHOD_2 ( url ) ; if ( ! ( k . METHOD_3 ( ) ) ) k . METHOD_4 ( ) ; return k . METHOD_5 ( ) ; },public TYPE_1 METHOD_1 ( java.lang.String url ) throws java.io.IOException { TYPE_2 k = new TYPE_2 ( url ) ; if ( k . METHOD_3 ( ) ) return null ; return k . METHOD_5 ( ) ; },"['Insert ConstructorCall', 'Move Invocation', 'Move VariableRead', 'Insert Return', 'Insert Literal', 'Delete Invocation', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Invocation']",2362
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( getContext ( ) , VAR_1 . METHOD_3 ( ) , VAR_2 ) . show ( ) ; TYPE_3 VAR_3 = getActivity ( ) . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2364
"public static int METHOD_1 ( java.lang.String VAR_1 ) { int op = TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 ) ; TYPE_2 . METHOD_3 ( ) ; return op ; }","public static int METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2365
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2366
"public TYPE_1 < java.util.List < TYPE_2 > > METHOD_1 ( int id , TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = ( ( TYPE_4 ) ( METHOD_2 ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; return new TYPE_5 ( this , VAR_5 ) ; }","public TYPE_1 < java.util.List < TYPE_2 > > METHOD_1 ( int id , TYPE_3 VAR_1 ) { return new TYPE_5 ( this , VAR_5 ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2367
protected java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; return VAR_1 ; },protected java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { return VAR_2 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2368
"public void METHOD_1 ( android.view.View view ) { int position = VAR_1 . METHOD_2 ( ) ; VAR_2 . setText ( VAR_2 . getText ( ) . METHOD_3 ( position , getText ( VAR_3 ) ) ) ; VAR_1 . METHOD_4 ( ( position + 1 ) ) ; }",public void METHOD_1 ( android.view.View view ) { VAR_2 . append ( getText ( VAR_3 ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation']",2370
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 temp = VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( temp ) ; METHOD_4 ( temp ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move VariableRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2371
"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( 0 , 1 ) ; TYPE_1 result = TYPE_1 . METHOD_2 ( VAR_1 , null ) ; assertEquals ( STRING_1 , null , result ) ; }","public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( 0 , 1 ) ; assertTrue ( TYPE_1 . METHOD_2 ( VAR_1 , null ) . equals ( new TYPE_1 ( 0 , 1 ) ) ) ; }","['Update Invocation', 'Insert Invocation', 'Move Invocation', 'Insert ConstructorCall', 'Insert Literal', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete VariableRead']",2373
private void METHOD_1 ( ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; if ( VAR_1 != null ) { this . METHOD_2 ( ) . METHOD_4 ( ) . remove ( VAR_1 ) . commit ( ) ; } },private void METHOD_1 ( ) { this . METHOD_2 ( ) . METHOD_4 ( ) . remove ( this . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) . commit ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2374
public TYPE_1 METHOD_1 ( TYPE_2 id ) { TYPE_3 VAR_1 = VAR_2 . get ( id ) ; TYPE_1 VAR_3 = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; return VAR_3 ; },public TYPE_1 METHOD_1 ( TYPE_2 id ) { TYPE_3 VAR_1 = VAR_2 . get ( id ) ; return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2375
private void METHOD_1 ( java.lang.Integer size ) { for ( java.lang.Integer i = 1 ; i < ( size + 1 ) ; i ++ ) { VAR_1 . add ( new TYPE_1 ( i ) ) ; } },private void METHOD_1 ( java.lang.Integer size ) { for ( java.lang.Integer i = 0 ; i < size ; i ++ ) { VAR_1 . add ( new TYPE_1 ( i ) ) ; } },"['Update BinaryOperator', 'Move BinaryOperator', 'Update Literal', 'Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",2376
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; java.lang.String VAR_5 = VAR_6 . getString ( VAR_7 , STRING_1 ) ; VAR_8 = new TYPE_2 ( VAR_2 , VAR_9 , VAR_5 ) ; VAR_10 = new TYPE_3 ( ) ; }","private void METHOD_1 ( ) { VAR_8 = new TYPE_2 ( VAR_2 , VAR_9 ) ; VAR_10 = new TYPE_3 ( ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2378
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2379
"public static int METHOD_1 ( ) { java.lang.String string = TYPE_1 . METHOD_2 ( ) . getString ( VAR_1 , java.lang.Integer.toString ( VAR_2 ) ) ; return java.lang.Integer.parseInt ( string ) ; }","public static int METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( ) . getInt ( VAR_1 , VAR_2 ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2380
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( getActivity ( ) ) ; VAR_3 . show ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",2381
"private void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( intent ) ; }",private void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2382
public TYPE_1 METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } final TYPE_1 VAR_1 = this . VAR_1 ; this . VAR_1 = null ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } final TYPE_1 obj = VAR_1 ; this . VAR_1 = null ; return obj ; },"['Update LocalVariable', 'Update VariableRead', 'Delete ThisAccess']",2383
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String result = VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . toString ( TYPE_2 . METHOD_4 ( STRING_1 ) ) ; VAR_1 . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; return result ; },private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . toString ( TYPE_2 . METHOD_4 ( STRING_1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2389
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; java.lang.System.out.println ( VAR_1 . METHOD_2 ( STRING_1 ) ) ; TYPE_1 . METHOD_3 ( ) ; },public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2391
"private void init ( ) throws java.io.IOException { java.lang.String fileName = ( new java.util.Date ( ) . getTime ( ) ) + STRING_1 ; VAR_1 = new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_1 ( VAR_2 ) , fileName ) ; METHOD_2 ( VAR_3 ) ; }","private void init ( ) throws java.io.IOException { VAR_1 = new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_1 ( VAR_2 ) ) ; METHOD_2 ( VAR_3 ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",2393
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_1 , STRING_1 , INT_1 , INT_2 ) ; assertTrue ( ( VAR_1 != null ) ) ; }",public void METHOD_1 ( ) { assertTrue ( false ) ; },"['Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator']",2395
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 view = ( ( TYPE_2 ) ( METHOD_3 ( VAR_3 ) ) ) ; view . METHOD_4 ( new TYPE_3 ( METHOD_5 ( ) ) ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Invocation']",2397
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_3 ( VAR_1 , this ) ; METHOD_2 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }","private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_3 ( VAR_1 , this ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2398
protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( ) ; if ( VAR_2 != null ) { if ( ( VAR_4 . size ( ) ) > 0 ) { METHOD_2 ( VAR_1 ) ; } } },protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( ( VAR_4 . size ( ) ) > 0 ) { METHOD_2 ( VAR_1 ) ; } },"['Move If', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2399
"public static void METHOD_1 ( android.content.Context context ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( ( VAR_2 ) >= ( VAR_3 ) ) { TYPE_2 . METHOD_3 ( context , VAR_1 ) ; } TYPE_2 . METHOD_4 ( context , VAR_1 ) ; }","public static void METHOD_1 ( android.content.Context context ) { if ( ( VAR_2 ) >= ( VAR_3 ) ) { TYPE_2 . METHOD_3 ( context , TYPE_1 . METHOD_2 ( ) ) ; } TYPE_2 . METHOD_4 ( context , TYPE_1 . METHOD_2 ( ) ) ; }","['Move Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2400
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 class ) ; return METHOD_1 ( VAR_1 , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_1 ( VAR_1 , null ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2401
public void METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = new java.util.HashSet ( VAR_2 . METHOD_2 ( ) ) ; for ( TYPE_1 p : VAR_1 ) { METHOD_3 ( p ) ; } },public void METHOD_1 ( ) { for ( TYPE_1 p : VAR_2 . METHOD_2 ( ) ) { METHOD_3 ( p ) ; } },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",2402
"private static java.util.Date METHOD_1 ( ) { java.util.Calendar VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 . set ( VAR_3 , 1 ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; return VAR_2 . getTime ( ) ; }","private static java.util.Date METHOD_1 ( ) { java.util.Calendar VAR_1 = java.util.Calendar.getInstance ( ) ; VAR_2 . set ( VAR_3 , 1 ) ; return VAR_2 . getTime ( ) ; }","['Update Invocation', 'Update TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2403
public void METHOD_1 ( TYPE_1 out ) { for ( TYPE_2 msg : VAR_1 ) { out . METHOD_2 ( msg . METHOD_3 ( ) ) ; } },public void METHOD_1 ( TYPE_1 out ) { for ( java.lang.String str : VAR_1 ) { out . METHOD_2 ( str ) ; } },"['Update LocalVariable', 'Update TypeReference', 'Insert VariableRead', 'Delete VariableRead', 'Delete Invocation']",2404
"public TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_2 VAR_1 = new TYPE_2 ( name , name , name ) ; METHOD_2 ( new java.util.LinkedList < > ( VAR_2 ) , VAR_3 . METHOD_3 ( ) , VAR_1 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_2 VAR_1 = new TYPE_2 ( name , name ) ; METHOD_2 ( new java.util.LinkedList < > ( VAR_2 ) , VAR_3 . METHOD_3 ( ) , VAR_1 ) ; return VAR_1 ; }","['Update ConstructorCall', 'Delete VariableRead']",2405
TYPE_1 type ( ) { TYPE_1 VAR_1 = VAR_2 [ VAR_3 [ 0 ] ] . METHOD_1 ( VAR_4 [ 0 ] ) ; return VAR_1 ; },TYPE_1 type ( ) { return VAR_2 [ VAR_3 [ 0 ] ] . METHOD_1 ( VAR_4 [ 0 ] ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2406
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2407
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.util.ArrayList < TYPE_2 > VAR_2 = this . VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; return ! ( VAR_5 . isEmpty ( ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ! ( this . VAR_3 . METHOD_2 ( VAR_1 ) . isEmpty ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess']",2408
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( this . target ) == null ) return VAR_1 ; java.lang.String result = this . VAR_2 . getName ( ) ; if ( result == null ) return VAR_1 ; return result ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( this . target ) == null ) return VAR_1 ; return this . VAR_2 . getName ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2409
public void METHOD_1 ( android.view.View view ) throws java.io.IOException { java.lang.String url = VAR_1 . getText ( ) . toString ( ) ; new TYPE_1 ( ) . execute ( url ) ; },public void METHOD_1 ( android.view.View view ) throws java.io.IOException { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete ConstructorCall', 'Delete VariableRead', 'Delete Invocation']",2410
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( VAR_2 . isEmpty ( VAR_1 ) ) ) { java.lang.String VAR_3 = VAR_4 . getText ( ) . toString ( ) ; VAR_5 . METHOD_2 ( VAR_3 ) ; VAR_4 . setText ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.String title ) { if ( ! ( VAR_2 . isEmpty ( title ) ) ) { VAR_4 . setText ( title ) ; VAR_5 . METHOD_2 ( title ) ; } },"['Update Parameter', 'Move Invocation', 'Update VariableRead', 'Update VariableRead', 'Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",2411
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",2413
"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int VAR_2 , long id ) { VAR_3 = ( ( java.lang.String ) ( VAR_4 . METHOD_2 ( ) ) ) ; METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int VAR_2 , long id ) { java.lang.String fileName = ( ( java.lang.String ) ( VAR_4 . METHOD_2 ( ) ) ) ; METHOD_3 ( fileName ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment']",2414
private TYPE_1 METHOD_1 ( int index ) { try { TYPE_1 item = VAR_1 . METHOD_2 ( ) ; item . METHOD_3 ( index ) ; return item ; } catch ( java.lang.Exception VAR_2 ) { throw new TYPE_2 ( VAR_2 ) ; } },private TYPE_1 METHOD_1 ( ) { try { return VAR_1 . METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_2 ) { throw new TYPE_2 ( VAR_2 ) ; } },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2415
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( STRING_1 ) ; return VAR_3 ; }","public java.lang.String METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return STRING_1 ; }","['Update TypeReference', 'Insert FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2416
"public void METHOD_1 ( java.lang.String n ) { java.lang.Integer VAR_1 = VAR_2 . get ( n ) ; VAR_2 . put ( n , ( VAR_1 + 1 ) ) ; }","public void METHOD_1 ( java.lang.String n ) { VAR_2 . put ( n , ( ( ( int ) ( VAR_2 . get ( n ) ) ) + 1 ) ) ; }","['Move Invocation', 'Insert TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2417
protected void METHOD_1 ( ) { android.view.View VAR_1 = METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; },protected void METHOD_1 ( ) { METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2418
"public void execute ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws java.lang.Exception { java.lang.String VAR_3 = VAR_2 . METHOD_1 ( VAR_4 ) ; VAR_5 . info ( STRING_1 , VAR_3 , VAR_1 ) ; VAR_2 . METHOD_2 ( new TYPE_2 ( VAR_3 , true ) ) ; }","public void execute ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws java.lang.Exception { VAR_5 . info ( STRING_1 , VAR_4 , VAR_1 ) ; VAR_2 . METHOD_2 ( new TYPE_2 ( VAR_4 , true ) ) ; }","['Move TypeAccess', 'Update ConstructorCall', 'Insert FieldRead', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2420
"public TYPE_1 METHOD_1 ( double x , double y ) throws java.lang.Exception { TYPE_1 p = METHOD_1 ( VAR_1 , x , y ) ; METHOD_2 ( VAR_1 ) ; return p ; }","public TYPE_1 METHOD_1 ( double x , double y ) throws java.lang.Exception { return METHOD_1 ( VAR_1 , x , y ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2421
"public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_4 ( intent ) ; METHOD_5 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_4 ( intent ) ; METHOD_5 ( ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",2423
public java.util.List < java.lang.String > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( VAR_2 class ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 : : getName ) . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) ; },public java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > result = VAR_1 . METHOD_2 ( VAR_2 class ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 : : getName ) . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) ; return result ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert TypeReference']",2424
public void METHOD_1 ( TYPE_1 event ) { int VAR_1 = this . VAR_2 . METHOD_2 ( ) ; this . METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 event ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation']",2425
"public boolean METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { boolean result = VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_3 ( ) ; return result ; }","public boolean METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { return VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead']",2426
"public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.Double > VAR_1 = java.util.Arrays.asList ( 0.0 , 1.0 , 1.0 ) ; VAR_2 . METHOD_2 ( VAR_3 class ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.Double > VAR_1 = java.util.Arrays.asList ( 0.0 , 1.0 , 1.0 ) ; VAR_2 . METHOD_2 ( VAR_3 class ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_3 ( VAR_1 ) ; }","['Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2427
"public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { boolean VAR_1 = intent . METHOD_2 ( VAR_2 , false ) ; if ( VAR_1 ) { METHOD_3 ( ) ; } VAR_3 . METHOD_4 ( VAR_4 ) ; VAR_5 = false ; }","public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; VAR_5 = false ; }","['Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Block', 'Delete If']",2428
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_1 ( ) ; int count = VAR_1 . METHOD_2 ( VAR_2 ) ; java.lang.System.out.println ( count ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",2429
public static int METHOD_1 ( ) { int size = TYPE_1 . METHOD_2 ( ) . size ( ) ; int VAR_1 = size % INT_1 ; return ( size - VAR_1 ) / INT_1 ; },public static int METHOD_1 ( ) { return ( ( TYPE_1 . METHOD_2 ( ) . size ( ) ) / INT_1 ) - 1 ; },"['Update BinaryOperator', 'Update BinaryOperator', 'Insert Literal', 'Move Invocation', 'Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2430
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 . equals ( VAR_4 ) ) || ( VAR_3 . equals ( VAR_5 ) ) ) { return true ; } return super . METHOD_1 ( VAR_1 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return super . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2431
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String url = VAR_2 ; TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( url , TYPE_3 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( STRING_1 , VAR_3 ) ; return VAR_5 ; }",public java.lang.String METHOD_1 ( ) { return VAR_5 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2433
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( true ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",2434
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( this . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( this . METHOD_5 ( ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_2 ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",2435
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String result = TYPE_1 . METHOD_1 ( VAR_1 ) ; VAR_2 . assertTrue ( VAR_3 . contains ( VAR_1 ) ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( STRING_1 ) ; },"['Move Invocation', 'Insert TypeAccess', 'Delete VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",2437
private void METHOD_1 ( ) { VAR_1 = null ; TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_4 . commit ( ) ; VAR_5 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( ) ; METHOD_6 ( ) ; },private void METHOD_1 ( ) { VAR_1 = null ; VAR_5 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( ) ; METHOD_6 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2438
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( VAR_2 , VAR_3 class ) ; VAR_2 . METHOD_2 ( intent , VAR_4 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2439
"public void METHOD_1 ( ) { VAR_1 = this . METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; long VAR_2 = VAR_3 . delete ( VAR_4 , null , null ) ; VAR_1 . METHOD_4 ( ) ; }","public void METHOD_1 ( ) { VAR_1 = this . METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_3 . delete ( VAR_4 , null , null ) ; VAR_1 . METHOD_4 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable']",2441
"public double METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 . METHOD_1 ( ) ) ; return - ( VAR_1 . METHOD_3 ( ) ) ; }",public double METHOD_1 ( ) { return 0 ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator']",2442
public static TYPE_1 METHOD_1 ( java.io.File VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_3 . add ( VAR_2 ) ; return VAR_2 ; },public static TYPE_1 METHOD_1 ( java.io.File VAR_1 ) { return TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2444
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( this ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable']",2446
"public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { TYPE_2 VAR_2 = VAR_3 . get ( position ) ; TYPE_3 . METHOD_2 ( context ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) . METHOD_5 ( VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { TYPE_3 . METHOD_2 ( context ) . METHOD_3 ( VAR_3 . get ( position ) . METHOD_4 ( ) ) . METHOD_5 ( VAR_4 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2447
public void init ( ) { VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = VAR_3 . get ( STRING_1 ) ; java.lang.String VAR_4 = VAR_2 . METHOD_1 ( ) . toString ( ) ; java.lang.System.out.println ( ( STRING_2 + VAR_4 ) ) ; METHOD_2 ( ) ; },public void init ( ) { VAR_1 = new TYPE_1 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Invocation']",2448
"public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = ( ( TYPE_3 . METHOD_2 ( getClass ( ) ) ) + STRING_1 ) + ( VAR_3 ) ; return java.util.Arrays.asList ( TYPE_4 . METHOD_3 ( VAR_4 , VAR_1 , VAR_2 ) ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { return java.util.Arrays.asList ( TYPE_4 . METHOD_3 ( VAR_4 , VAR_1 , VAR_3 ) ) ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",2450
public boolean METHOD_1 ( ) { int count = VAR_1 . select ( ) . count ( ) ; boolean VAR_2 = count == INT_1 ; if ( ! VAR_2 ) { VAR_3 = false ; } return VAR_2 ; },public boolean METHOD_1 ( ) { int count = VAR_1 . select ( ) . count ( ) ; return count == INT_1 ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete FieldWrite', 'Delete Literal', 'Delete Assignment', 'Delete Block', 'Delete If', 'Delete VariableRead']",2452
"public TYPE_1 METHOD_1 ( int i , int VAR_1 ) throws java.io.IOException { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( i , VAR_1 ) ; VAR_2 . METHOD_2 ( true ) ; return METHOD_3 ( VAR_2 ) ; }","public TYPE_1 METHOD_1 ( int i , int VAR_1 ) throws java.io.IOException { return METHOD_3 ( VAR_3 . METHOD_1 ( i , VAR_1 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",2454
"public TYPE_1 set ( int index , TYPE_1 element ) { TYPE_2 < TYPE_1 > node = METHOD_1 ( index ) ; if ( node == null ) { return null ; } node . METHOD_2 ( element ) ; return element ; }","public TYPE_1 set ( int index , TYPE_1 element ) { return null ; }","['Move Return', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Return']",2455
"public void METHOD_1 ( short VAR_1 , short arg ) { short result = ( ( short ) ( VAR_1 - arg ) ) ; METHOD_2 ( result ) ; METHOD_3 ( VAR_2 , ( result > INT_1 ) ) ; }","public void METHOD_1 ( short VAR_1 , short arg ) { METHOD_2 ( ( ( short ) ( VAR_1 - arg ) ) ) ; }","['Insert Invocation', 'Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",2456
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 ) { METHOD_3 ( VAR_1 , VAR_1 . METHOD_4 ( ) ) ; } return VAR_2 ; }",public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",2458
"public void METHOD_1 ( ) { java.util.Collection < java.lang.Object > c = null ; TYPE_1 . METHOD_2 ( c , STRING_1 ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; }","['Move Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2459
"public void METHOD_1 ( ) { java.lang.Integer VAR_1 = INT_1 ; java.lang.Integer VAR_2 = INT_2 ; VAR_3 . info ( ( STRING_1 + ( VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_5 ) ) ) ) ; }","public void METHOD_1 ( ) { java.lang.Integer VAR_1 = null ; java.lang.Integer VAR_2 = null ; VAR_3 . info ( ( STRING_1 + ( VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_5 ) ) ) ) ; }","['Insert Literal', 'Insert Literal', 'Delete FieldRead', 'Delete FieldRead']",2460
public double METHOD_1 ( java.lang.String key ) { java.lang.Object value = get ( key ) ; java.lang.Double VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( VAR_1 == null ) { return 0.0 ; } return VAR_1 . METHOD_3 ( ) ; },public double METHOD_1 ( java.lang.String key ) { java.lang.Object value = get ( key ) ; if ( value == null ) { return 0.0 ; } return TYPE_1 . METHOD_2 ( value ) ; },"['Move Invocation', 'Update VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2462
"public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; TYPE_3 VAR_3 = TYPE_2 . METHOD_2 ( VAR_4 class ) ; VAR_5 = new TYPE_4 ( VAR_1 , VAR_3 ) ; }","public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; VAR_5 = new TYPE_4 ( VAR_1 ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2463
"public TYPE_1 index ( ) { java.util.List < TYPE_2 > VAR_1 = VAR_2 . METHOD_1 ( ) ; java.util.List < TYPE_3 > VAR_3 = VAR_4 . METHOD_1 ( ) ; return METHOD_2 ( VAR_5 . METHOD_3 ( VAR_1 , VAR_3 ) ) ; }",public TYPE_1 index ( ) { java.util.List < TYPE_2 > VAR_1 = VAR_2 . METHOD_1 ( ) ; return METHOD_2 ( VAR_5 . METHOD_3 ( VAR_1 ) ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2465
private void METHOD_1 ( TYPE_1 event ) { java.lang.String VAR_1 = ( ( TYPE_2 ) ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) . getText ( ) ; VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 ) ) ; },private void METHOD_1 ( TYPE_1 event ) { VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2466
"private TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > values ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_4 ( values , VAR_1 ) ; return new TYPE_5 ( VAR_3 , VAR_4 , VAR_2 ) ; }","private TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > values ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; return new TYPE_5 ( VAR_3 , VAR_4 , new TYPE_4 ( values , VAR_1 ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2467
public TYPE_1 METHOD_1 ( ) { float temp = ( ( ( this . getValue ( ) ) * INT_1 ) / INT_2 ) + INT_3 ; return new TYPE_2 ( temp ) ; },public TYPE_1 METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall']",2468
"void METHOD_1 ( int id ) { TYPE_1 VAR_1 = VAR_2 . remove ( id ) ; if ( ( VAR_1 != null ) && ( ( VAR_3 ) == 0 ) ) { VAR_4 . METHOD_2 ( VAR_5 , 0 , id ) ; } }",void METHOD_1 ( int id ) { VAR_2 . remove ( id ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2469
public void METHOD_1 ( ) { VAR_1 = true ; TYPE_1 VAR_2 = getActivity ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; } },public void METHOD_1 ( ) { VAR_1 = true ; getActivity ( ) . METHOD_2 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2472
"void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.util.Set < TYPE_1 > VAR_3 = this . VAR_4 . remove ( VAR_1 ) ; if ( VAR_3 != null ) { this . METHOD_2 ( VAR_2 , VAR_3 ) ; } }","void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { this . METHOD_2 ( VAR_2 , this . VAR_4 . remove ( VAR_1 ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2473
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 ) ; assertTrue ( VAR_3 . equals ( VAR_2 ) ) ; }",public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; assertTrue ( VAR_3 . equals ( VAR_2 ) ) ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead']",2474
public void METHOD_1 ( ) { METHOD_2 ( ( ( VAR_1 ) | ( VAR_2 ) ) ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_3 ( 1 ) ; TYPE_1 VAR_4 = TYPE_2 . METHOD_3 ( 1 ) ; },public void METHOD_1 ( ) { METHOD_2 ( ( ( VAR_1 ) | ( VAR_2 ) ) ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable']",2475
"protected void METHOD_1 ( java.lang.String result ) { TYPE_1 . METHOD_2 ( this , STRING_1 , VAR_1 ) . show ( ) ; android.content.Intent i = new android.content.Intent ( METHOD_3 ( ) , VAR_2 class ) ; METHOD_4 ( i ) ; METHOD_5 ( ) ; }","protected void METHOD_1 ( java.lang.String result ) { TYPE_1 . METHOD_2 ( this , STRING_1 , VAR_1 ) . show ( ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",2477
public void METHOD_1 ( ) { float VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { VAR_4 . METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2478
"public void getData ( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { try { METHOD_1 ( VAR_1 , VAR_2 ) ; } catch ( java.lang.Exception VAR_4 ) { } VAR_3 . METHOD_2 ( ) ; }","public void getData ( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_1 a = new TYPE_1 ( ) ; try { METHOD_1 ( VAR_1 , a ) ; } catch ( java.lang.Exception VAR_4 ) { } VAR_3 . METHOD_2 ( ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Insert ConstructorCall', 'Update VariableRead']",2480
"public void METHOD_1 ( TYPE_1 response ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( getName ( ) , METHOD_5 ( ) ) ; }",public void METHOD_1 ( TYPE_1 response ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",2481
"static boolean METHOD_1 ( java.util.HashMap < java.lang.String , TYPE_1 > VAR_1 , java.util.ArrayList < java.lang.Class > VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.System.out.println ( STRING_1 ) ; return false ; }","static boolean METHOD_1 ( java.util.HashMap < java.lang.String , TYPE_1 > VAR_1 , java.util.ArrayList < java.lang.Class > VAR_2 ) { java.lang.System.out.println ( STRING_1 ) ; return false ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",2483
"public TYPE_1 put ( TYPE_2 key , TYPE_1 value ) { TYPE_1 VAR_1 = METHOD_1 ( key ) ; VAR_2 . add ( new TYPE_3 ( key , value ) ) ; return VAR_1 ; }","public TYPE_1 put ( TYPE_2 key , TYPE_1 value ) { METHOD_1 ( key ) ; VAR_2 . add ( new TYPE_3 ( key , value ) ) ; return value ; }","['Move Invocation', 'Update VariableRead', 'Delete TypeReference', 'Delete LocalVariable']",2485
public boolean METHOD_1 ( ) { java.lang.Object obj = getValue ( STRING_1 ) ; return ( null != obj ) && ( ( boolean ) ( obj ) ) ; },public boolean METHOD_1 ( ) { return getValue ( STRING_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete BinaryOperator']",2486
"public void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; if ( ( VAR_3 ) != null ) { boolean VAR_4 = VAR_3 . METHOD_2 ( ) ; VAR_1 . i ( VAR_2 , ( STRING_2 + VAR_4 ) ) ; } }","public void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; VAR_3 . METHOD_2 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",2487
"protected void METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . put ( VAR_1 , null ) ; } }","protected void METHOD_1 ( long VAR_1 ) { VAR_3 . get ( VAR_1 ) . METHOD_2 ( ) ; VAR_3 . put ( VAR_1 , null ) ; }","['Insert Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2488
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; if ( VAR_1 != null ) { METHOD_2 ( ) . METHOD_4 ( ) . show ( VAR_1 ) . commit ( ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) . METHOD_4 ( ) . show ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) . commit ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2489
"private static int METHOD_1 ( int a , int b ) { int result = a - b ; return result ; }","private static int METHOD_1 ( int a , int b ) { return a - b ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2490
public TYPE_1 METHOD_1 ( ) { VAR_1 = VAR_2 ; VAR_3 = TYPE_2 . METHOD_2 ( ) ; VAR_4 = new TYPE_1 ( ) ; return VAR_4 ; },public TYPE_1 METHOD_1 ( ) { VAR_1 = VAR_2 ; VAR_3 = TYPE_2 . METHOD_2 ( ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; this . VAR_4 = VAR_4 ; return VAR_4 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead', 'Insert VariableRead', 'Insert ThisAccess', 'Delete FieldRead']",2491
"public TYPE_1 METHOD_1 ( final java.lang.String context , final java.lang.String key ) throws java.io.IOException { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( context ) ; TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_4 . get ( key ) ) ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( final java.lang.String context , final java.lang.String key ) throws java.io.IOException { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( context ) ; return ( ( TYPE_1 ) ( VAR_4 . get ( key ) ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2492
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( new java.io.BufferedReader ( new TYPE_2 ( VAR_2 ) ) ) ; TYPE_3 out = new TYPE_3 ( new TYPE_4 ( VAR_3 . out ) ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete ConstructorCall', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete ConstructorCall', 'Delete LocalVariable']",2493
public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { TYPE_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . remove ( VAR_2 ) ; } VAR_4 . remove ( VAR_1 ) ; },public static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . remove ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2494
"public void METHOD_1 ( java.lang.String text ) throws TYPE_1 { if ( VAR_1 ) { java.util.logging.Logger.getLogger ( STRING_1 ) . METHOD_2 ( VAR_2 , text ) ; TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( text ) ; METHOD_5 ( ) ; } }","public void METHOD_1 ( java.lang.String text ) throws TYPE_1 { if ( VAR_1 ) { java.util.logging.Logger.getLogger ( STRING_1 ) . METHOD_2 ( VAR_2 , text ) ; VAR_4 . METHOD_3 ( ) . METHOD_4 ( text ) ; METHOD_5 ( ) ; } }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable']",2495
public boolean METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; if ( ( VAR_1 == null ) || ( VAR_2 . METHOD_3 ( METHOD_2 ( ) ) ) ) { return false ; } return true ; },public boolean METHOD_1 ( ) { if ( VAR_2 . METHOD_3 ( METHOD_2 ( ) ) ) { return false ; } return true ; },"['Move Invocation', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2496
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_4 . build ( new TYPE_3 ( VAR_2 , VAR_1 ) ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = VAR_3 . METHOD_1 ( ) ; return VAR_4 . build ( new TYPE_3 ( VAR_2 , VAR_1 ) ) ; }","['Update Invocation', 'Delete VariableRead']",2498
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_2 == ( VAR_3 ) ) VAR_4 . METHOD_2 ( ( - INT_1 ) ) ; boolean VAR_5 = METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_3 ( ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete LocalVariable']",2499
public TYPE_1 METHOD_1 ( ) { long VAR_1 = position ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return this ; },public TYPE_1 METHOD_1 ( ) { VAR_2 . METHOD_2 ( position ( ) ) ; return this ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2503
"public java.lang.String toString ( ) { java.util.Collections.sort ( VAR_1 , VAR_2 ) ; java.lang.String VAR_3 = java.lang.String.format ( ( STRING_1 + ( VAR_4 . toString ( ) ) ) , ( ( VAR_4 . size ( ) ) + 1 ) ) ; return VAR_3 ; }","public java.lang.String toString ( ) { java.util.Collections.sort ( VAR_1 , VAR_2 ) ; return VAR_4 . toString ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2504
"public TYPE_1 set ( int index , TYPE_1 element ) { TYPE_1 VAR_1 = VAR_2 . set ( index , element ) ; METHOD_1 ( ) ; return VAR_1 ; }","public TYPE_1 set ( int index , TYPE_1 element ) { METHOD_1 ( ) ; return VAR_2 . set ( index , element ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2505
public static long METHOD_1 ( long VAR_1 ) { java.util.Calendar VAR_2 = TYPE_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; return VAR_1 - ( VAR_3 . get ( VAR_4 ) ) ; },public static long METHOD_1 ( long VAR_1 ) { return VAR_1 - ( TYPE_1 . METHOD_2 ( ) . get ( VAR_4 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess']",2506
"public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { int i = TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 ) ; VAR_3 . METHOD_3 ( i , VAR_2 ) ; }","public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2507
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return null ; } return VAR_2 . METHOD_3 ( ) ; },public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2508
"private void METHOD_1 ( TYPE_1 id ) { java.lang.String VAR_1 = STRING_1 + ( VAR_2 . toString ( ) . replace ( CHAR_1 , CHAR_2 ) ) ; VAR_3 = new TYPE_2 ( VAR_1 ) ; }",private void METHOD_1 ( TYPE_1 id ) { java.lang.String VAR_1 = VAR_2 . toString ( ) ; VAR_3 = new TYPE_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",2509
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( this ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2510
"public void METHOD_1 ( java.lang.String url ) { android.content.Intent VAR_1 = TYPE_1 . METHOD_2 ( getActivity ( ) , VAR_2 ) ; METHOD_3 ( VAR_1 ) ; android.content.Intent VAR_3 = new android.content.Intent ( VAR_4 , TYPE_2 . METHOD_4 ( url ) ) ; METHOD_3 ( VAR_3 ) ; }","public void METHOD_1 ( java.lang.String url ) { android.content.Intent VAR_3 = new android.content.Intent ( VAR_4 , TYPE_2 . METHOD_4 ( url ) ) ; METHOD_3 ( VAR_3 ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2511
"public TYPE_1 METHOD_1 ( java.lang.Long id ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( STRING_1 , VAR_3 class ) . METHOD_3 ( ""id"" , id ) . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( null ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( java.lang.Long id ) { return ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( STRING_1 , VAR_3 class ) . METHOD_3 ( ""id"" , id ) . METHOD_4 ( ) ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",2512
"public static TYPE_1 METHOD_1 ( java.util.Calendar VAR_1 ) { int VAR_2 = ( VAR_3 . get ( VAR_4 ) ) + 1 ; int a = VAR_3 . get ( VAR_5 ) ; return new TYPE_1 ( VAR_2 , a ) ; }","public static TYPE_1 METHOD_1 ( java.util.Calendar VAR_1 ) { int VAR_2 = VAR_3 . get ( VAR_4 ) ; int a = VAR_3 . get ( VAR_5 ) ; return new TYPE_1 ( VAR_2 , a ) ; }","['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",2513
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 b = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ; b . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2514
private boolean METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return ( VAR_2 == null ) || ( ( VAR_2 . METHOD_3 ( ) ) == ( VAR_4 ) ) ; },private boolean METHOD_1 ( long VAR_1 ) { return ( VAR_3 . METHOD_2 ( VAR_1 ) ) != null ; },"['Update BinaryOperator', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2515
"public java.util.Map < TYPE_1 , java.lang.Object > METHOD_1 ( boolean VAR_1 ) { TYPE_2 < TYPE_1 , java.lang.Object > VAR_2 = TYPE_3 . METHOD_2 ( ) ; return TYPE_4 . METHOD_3 ( ) ; }","public java.util.Map < TYPE_1 , java.lang.Object > METHOD_1 ( boolean VAR_1 ) { return TYPE_4 . METHOD_3 ( ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",2516
public int METHOD_1 ( ) { int n = ( ( int ) ( 1 + ( ( java.lang.Math.random ( ) ) * ( VAR_1 . count ( ) ) ) ) ) ; return n ; },public int METHOD_1 ( ) { int n = ( ( int ) ( ( java.lang.Math.random ( ) ) * ( ( VAR_1 . count ( ) ) + 1 ) ) ) ; return n ; },"['Move BinaryOperator', 'Move TypeReference', 'Move BinaryOperator', 'Move Invocation']",2517
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; },private void METHOD_1 ( ) { VAR_2 . METHOD_3 ( new TYPE_1 ( ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2519
public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 p = METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; return ( p == null ) || ( p == ( this ) ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) == null ; },"['Update BinaryOperator', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete ThisAccess', 'Delete BinaryOperator']",2520
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; },"['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",2522
public double METHOD_1 ( ) { double result = ( ( ( ( VAR_1 ) - ( VAR_2 ) ) - ( VAR_3 ) ) - ( VAR_4 ) ) - ( VAR_5 ) ; return result ; },public double METHOD_1 ( ) { return ( ( ( ( VAR_1 ) - ( VAR_2 ) ) - ( VAR_3 ) ) - ( VAR_4 ) ) - ( VAR_5 ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2523
public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = this . METHOD_2 ( VAR_1 ) ; return VAR_2 != null ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return false ; },"['Insert Literal', 'Delete TypeReference', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator']",2525
public void METHOD_1 ( TYPE_1 info ) { int i = 0 ; if ( info instanceof TYPE_2 ) { VAR_1 = ( ( TYPE_2 ) ( info ) ) ; METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 info ) { if ( info instanceof TYPE_2 ) { VAR_1 = ( ( TYPE_2 ) ( info ) ) ; METHOD_2 ( ) ; } },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",2526
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int count , java.lang.String VAR_2 , long VAR_3 ) { java.util.List < TYPE_1 > VAR_4 = VAR_5 . METHOD_2 ( VAR_1 , count , VAR_2 , VAR_3 ) ; return VAR_4 ; }","public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int count , java.lang.String VAR_2 ) { java.util.List < TYPE_1 > VAR_4 = VAR_5 . METHOD_2 ( VAR_1 , count , VAR_2 ) ; return VAR_4 ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2528
public int METHOD_1 ( ) { java.util.Random VAR_1 = new java.util.Random ( ) ; return VAR_1 . METHOD_2 ( ) ; },public int METHOD_1 ( ) { return - 1 ; },"['Insert UnaryOperator', 'Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2530
"private TYPE_1 METHOD_1 ( ) throws TYPE_2 { java.util.List < java.lang.String > VAR_1 = java.util.Arrays.asList ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; return METHOD_2 ( STRING_6 , VAR_1 ) ; }",private TYPE_1 METHOD_1 ( ) throws TYPE_2 { return METHOD_2 ( STRING_6 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2531
"public TYPE_1 METHOD_1 ( ) { java.lang.Integer id = VAR_1 . METHOD_2 ( ) ; if ( id == null ) { return new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; } else { return VAR_2 . METHOD_3 ( id ) ; } }",public TYPE_1 METHOD_1 ( ) { return VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; },"['Insert Return', 'Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",2532
"public java.lang.String toString ( ) { java.lang.String out = ( ( ( ( ( VAR_1 ) + ""\n"" ) + ( VAR_2 ) ) + ""\n"" ) + ( VAR_3 ) ) + ""\n"" ; return out ; }","public java.lang.String toString ( ) { java.lang.String out = ( ( ( ( VAR_1 ) + ""\n"" ) + ( VAR_2 ) ) + ""\n"" ) + ( VAR_3 ) ; return out ; }","['Move BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",2534
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = ( ( java.lang.String ) ( VAR_3 . getText ( ) . toString ( ) . trim ( ) ) ) ; return VAR_2 ; },private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = ( ( java.lang.String ) ( VAR_3 . getText ( ) . toString ( ) ) ) ; return VAR_2 ; },"['Move Invocation', 'Move TypeReference', 'Delete Invocation']",2535
public void METHOD_1 ( android.view.View view ) { METHOD_2 ( false ) ; METHOD_3 ( true ) ; METHOD_4 ( false ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_5 ( VAR_2 ) ) ) ; VAR_3 . setText ( getString ( VAR_4 ) ) ; },public void METHOD_1 ( android.view.View view ) { METHOD_2 ( false ) ; METHOD_3 ( true ) ; METHOD_4 ( false ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2536
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . remove ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . remove ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2539
public boolean add ( TYPE_1 VAR_1 ) { boolean result = VAR_2 . add ( VAR_1 ) ; METHOD_1 ( ) ; return result ; },public boolean add ( TYPE_1 VAR_1 ) { METHOD_1 ( ) ; return VAR_2 . add ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2540
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( intent ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2541
"public void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { java.lang.String VAR_2 = VAR_3 . replace ( STRING_1 , STRING_2 ) . replace ( STRING_3 , STRING_4 ) . replace ( STRING_5 , STRING_6 ) ; TYPE_1 . METHOD_2 ( VAR_4 , VAR_2 , STRING_7 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_1 . METHOD_2 ( VAR_4 , VAR_1 , STRING_7 ) ; }","['Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",2542
"public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( STRING_1 , ""true"" ) ; TYPE_1 VAR_2 = METHOD_3 ( STRING_2 ) ; VAR_3 . assertTrue ( VAR_2 . METHOD_4 ( ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( STRING_1 , ""true"" ) ; METHOD_3 ( STRING_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",2543
private double METHOD_1 ( ) { double time = ( VAR_1 ) + ( ( java.lang.Math.random ( ) ) * ( ( VAR_2 ) - ( VAR_1 ) ) ) ; return time ; },private double METHOD_1 ( ) { return ( VAR_1 ) + ( ( java.lang.Math.random ( ) ) * ( ( VAR_2 ) - ( VAR_1 ) ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2544
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete LocalVariable']",2546
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this , STRING_1 , STRING_2 ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_3 ( true ) ; TYPE_2 . METHOD_4 ( VAR_1 , true ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this , STRING_1 , STRING_2 ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",2548
"public void METHOD_1 ( java.lang.String text ) { TYPE_1 VAR_1 = new TYPE_1 ( p , text ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; }","public void METHOD_1 ( java.lang.String text ) { VAR_2 . METHOD_2 ( new TYPE_1 ( p , text ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2549
public java.util.ArrayList < java.lang.String > METHOD_1 ( ) { java.util.ArrayList < java.lang.String > VAR_1 = new java.util.ArrayList ( VAR_2 . METHOD_2 ( false ) ) ; java.util.Collections.sort ( VAR_1 ) ; return VAR_1 ; },public java.util.Set < java.lang.String > METHOD_1 ( ) { return VAR_2 . METHOD_2 ( false ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2550
public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( int VAR_1 ) { VAR_3 . get ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",2551
public boolean equals ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( VAR_2 == null ) return false ; return VAR_3 . equals ( VAR_4 . key ) ; },public boolean equals ( java.lang.Object VAR_1 ) { return VAR_3 . equals ( VAR_1 ) ; },"['Insert VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete FieldRead']",2553
"public int METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = new java.util.HashSet ( VAR_2 ) ; return TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_1 , VAR_5 , VAR_6 ) ; }","public int METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_2 , VAR_5 , VAR_6 ) ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",2554
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == INT_1 ) { int VAR_2 = VAR_3 . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == INT_1 ) { METHOD_4 ( ) ; } },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2555
public void execute ( TYPE_1 t ) { TYPE_2 c = ( ( TYPE_2 ) ( t ) ) ; if ( ! ( this . VAR_1 . contains ( VAR_2 . getName ( ) ) ) ) return ; METHOD_1 ( STRING_1 ) ; },public void execute ( TYPE_1 t ) { METHOD_1 ( STRING_1 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",2556
protected java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( context ) ; return VAR_1 . METHOD_2 ( ) ; },protected java.util.List < TYPE_1 > METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2557
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = this . VAR_3 . add ( VAR_1 ) ; TYPE_2 VAR_4 = this . VAR_5 . add ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_2 . METHOD_2 ( VAR_4 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",2558
private int METHOD_1 ( TYPE_1 target ) { if ( ( target . METHOD_2 ( ) ) != null ) { return VAR_1 . METHOD_1 ( target . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ; } else { return 0 ; } },private int METHOD_1 ( TYPE_1 target ) { java.lang.String className = target . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; return VAR_1 . METHOD_1 ( className ) ; },"['Insert LocalVariable', 'Insert Return', 'Insert TypeReference', 'Move Invocation', 'Insert Invocation', 'Move TypeAccess', 'Insert VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2559
"private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_1 class ) ; getActivity ( ) . METHOD_2 ( intent ) ; }",private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2560
public void METHOD_1 ( ) { java.util.Random VAR_1 = new java.util.Random ( ) ; x = ( VAR_1 . METHOD_2 ( INT_1 ) ) - INT_1 ; },public void METHOD_1 ( int x ) { this . x = x ; },"['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead', 'Insert ThisAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2561
public java.lang.String METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { java.lang.StringBuffer VAR_2 = new java.lang.StringBuffer ( ) ; for ( TYPE_2 VAR_3 : VAR_1 ) VAR_4 . append ( METHOD_2 ( VAR_3 ) ) ; return VAR_4 . toString ( ) ; },public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { for ( TYPE_2 VAR_3 : VAR_1 ) METHOD_2 ( VAR_3 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return']",2562
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_3 = VAR_4 . METHOD_3 ( VAR_2 ) ; TYPE_1 VAR_5 = new TYPE_1 ( VAR_3 ) ; VAR_6 . METHOD_4 ( VAR_5 ) ; return VAR_5 ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_3 = VAR_4 . METHOD_3 ( ) ; TYPE_1 VAR_5 = new TYPE_1 ( VAR_3 ) ; VAR_6 . METHOD_4 ( VAR_5 ) ; return VAR_5 ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2563
"public void METHOD_1 ( java.lang.String text ) { int n = TYPE_1 . METHOD_2 ( this ) ; TYPE_1 . METHOD_3 ( this , n , text ) ; METHOD_4 ( ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",2564
"public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; java.lang.String VAR_2 = null ; new TYPE_2 ( STRING_2 , VAR_3 , VAR_1 , VAR_2 , VAR_4 ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; new TYPE_2 ( STRING_2 , VAR_3 , VAR_1 , null , VAR_4 ) ; }","['Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2565
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) ; return VAR_2 ; },public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) ; return VAR_2 ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2568
public void METHOD_1 ( ) { TYPE_1 a = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) ) ) ; a . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",2570
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . toString ( ) ; VAR_4 . delete ( VAR_5 , ( ( VAR_6 ) + STRING_1 ) , new java.lang.String [ ] { VAR_2 } ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . delete ( VAR_5 , ( ( VAR_6 ) + STRING_1 ) , new java.lang.String [ ] { VAR_3 . toString ( ) } ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2571
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { int VAR_4 = ( VAR_5 . y ) - VAR_2 ; VAR_6 . set ( VAR_5 . x , VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { VAR_6 . set ( VAR_5 . x , ( ( VAR_5 . y ) - VAR_2 ) ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2573
"public void METHOD_1 ( TYPE_1 message ) { java.lang.String data = VAR_1 . build ( ) ; VAR_2 . METHOD_2 ( STRING_1 , data ) ; VAR_3 . execute ( new TYPE_2 ( data . METHOD_3 ( ) ) ) ; }",public void METHOD_1 ( TYPE_1 message ) { VAR_3 . execute ( new TYPE_2 ( VAR_1 . build ( ) . METHOD_3 ( ) ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Insert ConstructorCall', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Invocation']",2574
"public void METHOD_1 ( TYPE_1 event , float x , float y ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; java.lang.System.out.println ( STRING_1 ) ; }","public void METHOD_1 ( TYPE_1 event , float x , float y ) { java.lang.System.out.println ( STRING_1 ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2575
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( fileName , VAR_2 , VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_5 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( fileName , VAR_2 , VAR_3 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2576
public static void main ( java.lang.String [ ] args ) { TYPE_1 TYPE_2 = new TYPE_1 ( ) ; TYPE_2 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2577
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_1 { java.util.List < java.lang.String > VAR_4 = new java.util.ArrayList < > ( ) ; VAR_5 . add ( VAR_2 ) ; METHOD_2 ( VAR_1 , VAR_4 , VAR_3 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_1 { }","['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",2578
"protected void METHOD_1 ( java.lang.String result ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; if ( VAR_1 . METHOD_3 ( ) ) { VAR_1 . METHOD_4 ( ) ; } TYPE_2 VAR_2 = new TYPE_2 ( context ) ; VAR_3 . execute ( ) ; }","protected void METHOD_1 ( java.lang.String result ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; if ( VAR_1 . METHOD_3 ( ) ) { VAR_1 . METHOD_4 ( ) ; } }","['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",2579
"public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.util.Map < java.lang.String , java.util.List > data = VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( STRING_2 + data ) ) ; }",public void METHOD_1 ( ) { },"['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",2583
"void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 ) ; java.lang.String VAR_3 = VAR_4 . getString ( STRING_2 , null ) ; if ( VAR_3 != null ) data = new TYPE_2 ( ) . METHOD_3 ( VAR_3 , VAR_5 class ) ; }","void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 ) ; java.lang.String VAR_3 = null ; if ( VAR_3 != null ) data = new TYPE_2 ( ) . METHOD_3 ( VAR_3 , VAR_5 class ) ; }","['Move Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2584
"public static void main ( java.lang.String [ ] args ) { TYPE_1 TYPE_2 = new TYPE_1 ( ) ; TYPE_3 view = new TYPE_3 ( ) ; TYPE_4 TYPE_5 = new TYPE_4 ( TYPE_2 , view ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",2585
public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 < INT_1 ) VAR_3 . METHOD_1 ( VAR_2 ) ; else VAR_4 . METHOD_1 ( ( VAR_2 % INT_1 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Insert Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",2587
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 t = new TYPE_2 ( ) ; t . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_2 t = new TYPE_2 ( ) ; t . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",2588
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.exit ( 0 ) ; },"['Update Invocation', 'Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",2590
"public void METHOD_1 ( java.lang.String VAR_1 , java.util.List < TYPE_1 > params ) { VAR_2 . assertNotNull ( VAR_3 ) ; TYPE_2 function = new TYPE_2 ( VAR_1 , params ) ; VAR_3 . METHOD_2 ( function ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , java.util.List < TYPE_1 > params ) { VAR_2 . assertNotNull ( VAR_3 ) ; VAR_3 . METHOD_2 ( new TYPE_2 ( VAR_1 , params ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2591
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 VAR_2 = new TYPE_5 ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; return new TYPE_1 ( VAR_2 . METHOD_4 ( VAR_1 ) ) ; },public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 VAR_2 = new TYPE_4 ( ) ; return new TYPE_1 ( VAR_2 . METHOD_4 ( VAR_1 ) ) ; },"['Insert ConstructorCall', 'Delete ConstructorCall', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2593
"public void METHOD_1 ( java.lang.Long VAR_1 ) { java.lang.Long VAR_2 = java.util.Calendar.getInstance ( ) . METHOD_2 ( ) ; java.util.Date date = new java.util.Date ( VAR_2 ) ; VAR_3 = VAR_1 - VAR_2 ; VAR_4 . i ( STRING_1 , VAR_5 . toString ( ) ) ; }",public void METHOD_1 ( java.lang.Long VAR_1 ) { VAR_3 = VAR_1 - ( java.util.Calendar.getInstance ( ) . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2594
"protected void METHOD_1 ( TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_1 ) { TYPE_2 < java.lang.Integer > VAR_2 = new TYPE_2 ( ) ; METHOD_2 ( VAR_3 , VAR_2 ) ; METHOD_3 ( VAR_3 ) ; }","protected void METHOD_1 ( TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_1 ) { METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_3 ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",2595
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 ; VAR_3 = VAR_4 . get ( METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_3 ( ) ; VAR_3 = VAR_4 . get ( METHOD_2 ( ) ) ; VAR_3 . METHOD_4 ( ) ; },"['Move Assignment', 'Insert TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",2596
"public TYPE_1 METHOD_1 ( java.lang.Class < ? > VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . put ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; return VAR_2 ; }",public TYPE_1 METHOD_1 ( java.lang.Class < ? > VAR_1 ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2599
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2601
"public TYPE_1 METHOD_1 ( int id , int VAR_1 , java.lang.String text ) { boolean VAR_2 = java.lang.Boolean . METHOD_2 ( text ) ; VAR_3 . METHOD_1 ( id , VAR_1 , VAR_2 ) ; return TYPE_1 . METHOD_3 ( ) . build ( ) ; }","public TYPE_1 METHOD_1 ( int id , int VAR_1 ) { VAR_3 . METHOD_1 ( id , VAR_1 , true ) ; return TYPE_1 . METHOD_3 ( ) . build ( ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2602
"private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 . start ( 1 , INT_1 ) ; }","private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( 1 , INT_1 ) ; VAR_3 . start ( ) ; }","['Move Literal', 'Insert FieldRead', 'Delete TypeAccess']",2603
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( null ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( null ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2605
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( STRING_1 , STRING_2 ) ; java.lang.System.out.println ( STRING_3 ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",2606
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent i = new android.content.Intent ( this , VAR_2 class ) ; this . METHOD_2 ( ) ; METHOD_3 ( i ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( new android.content.Intent ( this , VAR_2 class ) ) ; this . METHOD_2 ( ) ; }","['Move Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2609
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . assertThat ( VAR_2 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( STRING_1 ) ) ; }",public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2610
"void METHOD_1 ( java.lang.String VAR_1 ) { android.view.View VAR_2 = METHOD_2 ( VAR_3 ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_3 ( VAR_2 , VAR_1 , VAR_5 ) . METHOD_4 ( METHOD_5 ( ) . getColor ( VAR_6 ) ) ; VAR_7 . show ( ) ; }","void METHOD_1 ( java.lang.String VAR_1 ) { android.view.View VAR_2 = METHOD_2 ( VAR_3 ) ; TYPE_1 . METHOD_3 ( VAR_2 , VAR_1 , VAR_5 ) . METHOD_4 ( METHOD_5 ( ) . getColor ( VAR_6 ) ) . show ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",2612
"public void METHOD_1 ( ) { if ( ( VAR_1 ) && ( VAR_2 ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_2 ( intent ) ; METHOD_3 ( ) ; } }",public void METHOD_1 ( ) { if ( ( VAR_1 ) && ( VAR_2 ) ) { METHOD_3 ( ) ; } },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2613
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2614
"public void METHOD_1 ( long id ) { int count = VAR_1 . delete ( VAR_2 , ( ( ( VAR_3 ) + STRING_1 ) + id ) , null ) ; TYPE_1 . METHOD_2 ( VAR_4 , ( STRING_2 + count ) ) ; }","public void METHOD_1 ( long id ) { VAR_1 . delete ( VAR_2 , ( ( ( VAR_3 ) + STRING_1 ) + id ) , null ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",2615
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 class ) ; VAR_1 . METHOD_1 ( VAR_3 ) ; VAR_1 . METHOD_2 ( args ) ; },"public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( VAR_2 class , args ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Insert TypeAccess', 'Move VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2616
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ""id"" ) ) ; VAR_2 . METHOD_4 ( STRING_1 , VAR_3 ) ; return STRING_2 ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 VAR_2 ) { return STRING_2 ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2617
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . VAR_2 . METHOD_3 ( VAR_3 ) ; if ( VAR_1 instanceof TYPE_2 ) { ( ( TYPE_2 ) ( VAR_1 ) ) . start ( ) ; } },public void METHOD_1 ( ) { if ( ( METHOD_2 ( ) . VAR_2 ) instanceof TYPE_2 ) { ( ( TYPE_2 ) ( METHOD_2 ( ) . VAR_2 ) ) . start ( ) ; } },"['Move FieldRead', 'Insert FieldRead', 'Move TypeReference', 'Insert Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2621
TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return new TYPE_3 ( ) . METHOD_3 ( VAR_1 ) . build ( ) ; },TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Insert ConstructorCall', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",2622
protected TYPE_1 METHOD_1 ( java.lang.Object item ) { java.lang.Object VAR_1 = METHOD_2 ( item ) ; if ( VAR_1 instanceof TYPE_1 ) { return ( ( TYPE_1 ) ( VAR_1 ) ) ; } else { return METHOD_3 ( VAR_1 ) . METHOD_4 ( STRING_1 ) ; } },protected java.lang.Object METHOD_1 ( java.lang.Object item ) { return METHOD_2 ( item ) ; },"['Update TypeReference', 'Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",2624
protected boolean METHOD_1 ( ) { boolean VAR_1 = false ; return VAR_1 ; },protected boolean METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",2626
private boolean METHOD_1 ( ) { android.view.View VAR_1 = ( ( TYPE_1 ) ( getActivity ( ) . METHOD_2 ( ) ) ) . METHOD_3 ( VAR_2 ) ; return ( VAR_1 . METHOD_4 ( ) ) == ( - ( VAR_1 . METHOD_5 ( ) ) ) ; },private boolean METHOD_1 ( ) { android.view.View VAR_1 = ( ( TYPE_1 ) ( getActivity ( ) ) ) . METHOD_3 ( VAR_2 ) ; return ( VAR_1 . METHOD_4 ( ) ) == ( - ( VAR_1 . METHOD_5 ( ) ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeReference', 'Delete Invocation']",2627
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2629
"public void METHOD_1 ( ) { android.content.Intent i = new android.content.Intent ( this , VAR_1 class ) ; i . METHOD_2 ( ( ( VAR_2 ) | ( VAR_3 ) ) ) ; METHOD_3 ( i ) ; }","public void METHOD_1 ( ) { METHOD_3 ( new android.content.Intent ( this , VAR_1 class ) ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2630
public TYPE_1 remove ( int index ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . remove ( index ) ) ) ; METHOD_1 ( ) ; return VAR_1 ; },public TYPE_1 remove ( int index ) { METHOD_1 ( ) ; return ( ( TYPE_1 ) ( VAR_2 . remove ( index ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2631
public void METHOD_1 ( ) { int VAR_1 = 0 ; VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete VariableRead']",2632
public void remove ( int id ) { TYPE_1 VAR_1 = this . get ( id ) ; VAR_2 . remove ( VAR_1 ) ; },public void remove ( int id ) { VAR_2 . remove ( new TYPE_1 ( id ) ) ; },"['Insert ConstructorCall', 'Move VariableRead', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2633
private int METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( VAR_2 . equals ( STRING_1 ) ) ) { int VAR_3 = 0 ; } TYPE_1 data = this . VAR_4 . get ( VAR_1 ) ; return data != null ? VAR_5 : INT_1 ; },private int METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 data = this . VAR_4 . get ( VAR_1 ) ; return data != null ? VAR_5 : INT_1 ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete Block', 'Delete If']",2636
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( ) ; TYPE_2 VAR_3 = VAR_4 ; if ( VAR_3 != null ) { VAR_3 . METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2637
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( ) ) { return ; } VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) ; METHOD_6 ( ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String value = VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; VAR_2 . METHOD_3 ( value ) ; METHOD_6 ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",2639
"public java.lang.String METHOD_1 ( int id , int VAR_1 ) { TYPE_1 p = VAR_2 . METHOD_2 ( id ) ; p . METHOD_3 ( VAR_1 ) ; this . VAR_3 . add ( p ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; return STRING_1 ; }","public java.lang.String METHOD_1 ( TYPE_1 p , int VAR_1 ) { p . METHOD_3 ( VAR_1 ) ; this . VAR_3 . add ( p ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; return STRING_1 ; }","['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",2640
public void METHOD_1 ( ) { try { java.util.ArrayList < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } },public void METHOD_1 ( ) { try { VAR_3 . METHOD_4 ( VAR_2 . METHOD_2 ( ) ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_4 . METHOD_5 ( ) ; } },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2641
public boolean METHOD_1 ( ) { int VAR_1 = java.lang.Integer . METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 ) . getValue ( ) ) ; return VAR_1 != 0 ; },public boolean METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_3 ( STRING_1 ) ; return VAR_1 != 0 ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2642
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_1 ) ; if ( VAR_1 instanceof TYPE_2 ) { TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 ) ) ; VAR_3 . METHOD_4 ( true ) ; } return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_1 ) ; return true ; }","['Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",2645
void METHOD_1 ( java.lang.String message ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ; VAR_4 . setText ( message ) ; },void METHOD_1 ( java.lang.String message ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; VAR_4 . setText ( message ) ; },['Update TypeAccess'],2646
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 , VAR_3 class ) ; VAR_1 . METHOD_3 ( VAR_2 , VAR_4 class ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2647
private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; java.util.Date VAR_2 = METHOD_4 ( ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; VAR_1 . METHOD_6 ( METHOD_7 ( ) ) ; return VAR_1 ; },private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_5 ( METHOD_4 ( ) ) ; VAR_1 . METHOD_6 ( METHOD_7 ( ) ) ; return VAR_1 ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2649
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; intent . METHOD_2 ( VAR_4 , true ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_3 ( VAR_3 class ) ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",2650
"private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . add ( STRING_1 , ( STRING_2 + ( ( STRING_3 + STRING_4 ) + STRING_5 ) ) ) ; return VAR_1 ; }",private java.lang.String METHOD_1 ( ) { return STRING_2 + ( ( STRING_3 + STRING_4 ) + STRING_5 ) ; },"['Update TypeReference', 'Move BinaryOperator', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2651
public java.lang.String METHOD_1 ( boolean VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( ) ; java.lang.String VAR_3 = METHOD_3 ( VAR_1 ) . get ( STRING_1 ) ; return ( METHOD_2 ( ) ) + ( METHOD_3 ( VAR_1 ) . get ( STRING_1 ) ) ; },public java.lang.String METHOD_1 ( boolean VAR_1 ) { return ( METHOD_2 ( ) ) + ( METHOD_3 ( VAR_1 ) . get ( STRING_1 ) ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",2652
"public TYPE_1 METHOD_1 ( java.lang.Integer id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 class , id ) ; if ( ( VAR_1 . METHOD_3 ( ) ) == null ) { return VAR_1 ; } return null ; }","public TYPE_1 METHOD_1 ( java.lang.Integer id ) { return VAR_2 . METHOD_2 ( VAR_3 class , id ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",2653
public void METHOD_1 ( java.lang.String message ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getActivity ( ) ) ) ; if ( ( METHOD_2 ( ) ) && ( VAR_1 != null ) ) { VAR_1 . METHOD_1 ( message ) ; } },public void METHOD_1 ( java.lang.String message ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2656
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; return VAR_2 ; },private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2659
"public java.lang.Object METHOD_1 ( java.lang.Object [ ] ... value ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , false ) ; if ( VAR_1 == null ) return null ; return METHOD_1 ( VAR_1 , value ) ; }","public java.lang.Object METHOD_1 ( java.lang.Object [ ] ... value ) throws java.lang.Exception { return METHOD_1 ( METHOD_2 ( VAR_2 , false ) , value ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2660
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = ( ( VAR_2 . METHOD_2 ( ) ) + 1 ) + STRING_1 ; java.lang.String VAR_3 = ( ( VAR_2 . METHOD_3 ( ) ) + 1 ) + STRING_1 ; return ( VAR_1 + STRING_2 ) + VAR_3 ; },public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = ( VAR_2 . METHOD_2 ( ) ) + STRING_1 ; java.lang.String VAR_3 = ( VAR_2 . METHOD_3 ( ) ) + STRING_1 ; return ( VAR_1 + STRING_2 ) + VAR_3 ; },"['Move BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Move FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",2661
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) . get ( 0 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; this . VAR_3 = false ; return true ; },public boolean METHOD_1 ( ) { this . VAR_3 = false ; return true ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",2662
"private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , java.util.Calendar VAR_4 ) { TYPE_1 VAR_5 = TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_5 . METHOD_2 ( VAR_6 . getTime ( ) ) ; return VAR_5 ; }","private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , java.util.Calendar VAR_4 ) { return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) . METHOD_2 ( VAR_6 . getTime ( ) ) ; }","['Insert Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2663
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; }",private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2664
"public void METHOD_1 ( android.view.View view ) { TYPE_1 . METHOD_2 ( view , STRING_1 , VAR_1 ) . METHOD_3 ( STRING_2 , null ) . show ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_4 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { TYPE_1 . METHOD_2 ( view , STRING_1 , VAR_1 ) . METHOD_3 ( STRING_2 , null ) . show ( ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2665
"public java.util.HashMap < java.lang.Long , java.lang.Float > METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { java.util.HashMap < java.lang.Long , java.lang.Float > VAR_3 = this . VAR_4 . get ( VAR_1 ) . get ( VAR_2 ) ; return VAR_3 ; }","public java.util.HashMap < java.lang.Long , java.lang.Float > METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { return this . VAR_4 . get ( VAR_1 ) . get ( VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2667
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; TYPE_3 . METHOD_1 ( this , VAR_2 ) ; }","private void METHOD_1 ( ) { TYPE_3 . METHOD_1 ( this , TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2668
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( getActivity ( ) . METHOD_2 ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( this ) ; METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation']",2670
private void METHOD_1 ( ) { java.lang.String path = this . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; TYPE_1 VAR_1 = new TYPE_1 ( path ) ; VAR_1 . METHOD_4 ( ) ; },private void METHOD_1 ( ) { new TYPE_1 ( ) . METHOD_4 ( ) ; },"['Insert ConstructorCall', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",2671
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_2 . show ( getActivity ( ) . METHOD_4 ( ) , VAR_3 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . show ( getActivity ( ) . METHOD_4 ( ) , VAR_3 ) ; }","['Insert ConstructorCall', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2672
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; return METHOD_4 ( VAR_1 , java.lang.String.format ( VAR_3 , VAR_4 . toString ( ) , VAR_2 ) , VAR_5 ) ; }","private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_4 ( VAR_1 , java.lang.String.format ( VAR_3 , VAR_4 . toString ( ) , VAR_1 . METHOD_3 ( ) ) , VAR_5 ) ; }","['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2675
public static java.lang.String METHOD_1 ( ) { java.lang.String line = TYPE_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_2 ( ) ) ; },public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_2 ( ) ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",2676
public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2677
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . iterator ( ) ; if ( VAR_1 . METHOD_2 ( ) ) { TYPE_1 VAR_3 = VAR_1 . METHOD_3 ( ) ; VAR_4 . remove ( ) ; return VAR_3 ; } else { return null ; } },public TYPE_1 METHOD_1 ( ) { return null ; },"['Move Return', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",2678
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 != null ) { VAR_4 . METHOD_4 ( VAR_2 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . METHOD_4 ( VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2679
"public int METHOD_1 ( ) { java.lang.String text = VAR_1 . getText ( ) . toString ( ) ; { int i = java.lang.Integer.parseInt ( VAR_2 . replaceAll ( STRING_1 , STRING_2 ) ) ; return i ; } }",public int METHOD_1 ( ) { java.lang.String text = VAR_1 . getText ( ) . toString ( ) ; return java.lang.Integer.parseInt ( text ) ; },"['Insert Invocation', 'Move TypeAccess', 'Insert VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2680
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_4 . getContext ( ) ) ; VAR_3 . METHOD_2 ( VAR_5 ) ; return new TYPE_1 ( VAR_3 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { return new TYPE_1 ( new TYPE_3 ( VAR_4 . getContext ( ) ) ) ; }","['Update ConstructorCall', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2681
"public static void METHOD_1 ( java.lang.String output , java.util.ArrayList < TYPE_1 > VAR_1 ) { java.io.File file = new java.io.File ( output ) ; java.util.Iterator VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_3 ; }","public static void METHOD_1 ( java.lang.String output , java.util.ArrayList < TYPE_1 > VAR_1 ) { }","['Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable']",2682
public boolean METHOD_1 ( boolean VAR_1 ) { boolean VAR_2 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_2 ) { VAR_3 = true ; } return VAR_2 ; },public boolean METHOD_1 ( boolean VAR_1 ) { VAR_3 = true ; return TYPE_1 . METHOD_2 ( ) ; },"['Move Assignment', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Block', 'Delete If', 'Delete VariableRead']",2683
"public TYPE_1 getTime ( java.lang.String VAR_1 , java.util.Calendar VAR_2 ) throws TYPE_2 { TYPE_3 date = METHOD_1 ( VAR_1 , VAR_2 ) ; return getTime ( date ) ; }","public TYPE_1 getTime ( java.lang.String VAR_1 , java.util.Calendar VAR_2 ) throws TYPE_2 { return new TYPE_1 ( METHOD_1 ( VAR_1 , VAR_2 ) . getTime ( ) ) ; }","['Insert ConstructorCall', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2686
"protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , VAR_1 , this ) ; VAR_2 . METHOD_2 ( VAR_4 ) ; return VAR_2 ; }","protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_3 , VAR_1 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete ThisAccess', 'Delete VariableRead']",2687
"public byte [ ] METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { java.lang.String VAR_4 = TYPE_2 . METHOD_2 ( VAR_3 ) ; return VAR_5 . METHOD_3 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_4 ( VAR_4 ) . METHOD_5 ( ) ) ; }","public byte [ ] METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { return VAR_5 . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",2688
private boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_2 ( ) . METHOD_2 ( VAR_1 ) . build ( ) ; return VAR_3 . METHOD_3 ( VAR_2 ) ; },private boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_2 ( ) . METHOD_2 ( VAR_1 ) . build ( ) ; boolean status = VAR_3 . METHOD_3 ( VAR_2 ) ; return status ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",2689
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_5 . setText ( VAR_6 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2690
"public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_1 ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",2692
private void METHOD_1 ( int number ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; java.lang.String VAR_3 = STRING_1 + number ; VAR_4 . setText ( VAR_3 ) ; },private void METHOD_1 ( int number ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_4 . setText ( ( STRING_1 + number ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2693
"public void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; }","public void METHOD_1 ( ) { METHOD_2 ( new android.content.Intent ( this , VAR_2 class ) ) ; METHOD_3 ( ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2695
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 item = VAR_1 . METHOD_2 ( ) ; return ( 1 == ( VAR_2 . getView ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ) && ( TYPE_3 . METHOD_5 ( item ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return false ; },"['Insert Literal', 'Delete Wra', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",2697
"public static void main ( java.lang.String [ ] args ) { TYPE_1 < java.lang.String , java.lang.String > VAR_1 = new TYPE_1 < java.lang.String , java.lang.String > ( 0 ) ; java.lang.System.out.println ( VAR_1 . METHOD_1 ( STRING_1 ) ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2698
"public void delete ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 < java.lang.Object > VAR_3 = new TYPE_2 ( new TYPE_3 ( VAR_1 , VAR_2 ) , VAR_4 ) ; VAR_5 . METHOD_1 ( ( ( VAR_6 ) + STRING_1 ) , VAR_3 , VAR_7 class ) ; }","public void delete ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { VAR_5 . METHOD_1 ( ( ( VAR_6 ) + STRING_1 ) , new TYPE_3 ( VAR_1 , VAR_2 ) , VAR_7 class ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",2699
protected void METHOD_1 ( double VAR_1 ) { double VAR_2 = ( VAR_3 ) + ( VAR_4 ) ; java.lang.System.out.println ( VAR_2 ) ; node . METHOD_2 ( ( ( VAR_3 ) + ( ( VAR_4 ) * VAR_1 ) ) ) ; },protected void METHOD_1 ( double VAR_1 ) { node . METHOD_2 ( ( ( VAR_3 ) + ( ( VAR_4 ) * VAR_1 ) ) ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",2700
"public java.lang.String update ( java.lang.String id , java.lang.String VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 ) ; TYPE_3 VAR_4 = new TYPE_3 ( id , VAR_3 ) ; VAR_5 . METHOD_1 ( VAR_4 ) ; return STRING_1 ; }","public java.lang.String update ( TYPE_3 VAR_4 , TYPE_1 VAR_2 ) { VAR_5 . METHOD_1 ( VAR_4 ) ; return STRING_1 ; }","['Insert Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",2701
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) . METHOD_7 ( ( ( VAR_1 . METHOD_8 ( ) ) + STRING_1 ) ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",2702
private void METHOD_1 ( ) { TYPE_1 state = VAR_1 ; if ( state != ( VAR_2 ) ) { throw new TYPE_2 ( ( STRING_1 + state ) ) ; } },private synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != ( VAR_2 ) ) { throw new TYPE_2 ( ( STRING_1 + ( VAR_1 ) ) ) ; } },"['Insert Wra', 'Move FieldRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2703
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String name ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_3 = VAR_1 . METHOD_3 ( ( ( VAR_4 ) + STRING_1 ) ) ; VAR_1 . METHOD_4 ( ) ; return VAR_3 ; },public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String name ) { return new java.util.LinkedList < > ( ) ; },"['Insert ConstructorCall', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2705
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 state = VAR_3 . METHOD_2 ( ) ; if ( ( state . METHOD_3 ( ) ) || ( state . METHOD_4 ( ) ) ) { VAR_4 . METHOD_5 ( VAR_1 , VAR_2 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_4 . METHOD_5 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2707
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = METHOD_3 ( ) . METHOD_4 ( ) ; VAR_3 . add ( VAR_4 , VAR_1 ) ; VAR_2 . METHOD_5 ( null ) ; VAR_3 . commit ( ) ; }",private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2709
"private void METHOD_1 ( TYPE_1 VAR_1 ) { java.awt.Color VAR_2 = TYPE_2 . METHOD_2 ( this , null , VAR_3 ) ; if ( VAR_2 != null ) { VAR_3 = VAR_2 ; this . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 = TYPE_2 . METHOD_2 ( this , null , VAR_3 ) ; this . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( ) ; }","['Insert Assignment', 'Move Invocation', 'Move Invocation', 'Move FieldWrite', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Assignment', 'Delete Block', 'Delete If']",2710
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = new TYPE_3 ( VAR_1 ) ; VAR_3 . put ( url , VAR_2 ) ; return this ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_2 ) { VAR_3 . put ( url , VAR_2 ) ; return this ; }","['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",2711
"public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; java.lang.Long VAR_2 = java.lang.Long . METHOD_3 ( METHOD_4 ( STRING_1 ) ) ; VAR_3 . METHOD_5 ( VAR_1 , VAR_2 , 0L ) ; return STRING_2 ; }",public java.lang.String METHOD_1 ( ) { return STRING_2 ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",2712
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( this ) ; VAR_2 . METHOD_3 ( false ) ; VAR_2 . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . METHOD_3 ( false ) ; },"['Update Invocation', 'Move Invocation', 'Move Literal', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2713
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_3 event = new TYPE_3 ( VAR_1 ) ; event . METHOD_4 ( ) ; },protected void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2715
"public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.util.ArrayList < java.lang.String > data = null ; int VAR_1 = 0 ; java.lang.String VAR_2 = STRING_2 ; TYPE_1 . METHOD_2 ( data , VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.util.ArrayList < java.lang.String > data = null ; int VAR_1 = 0 ; TYPE_1 . METHOD_2 ( data , VAR_1 ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",2717
public static void METHOD_1 ( ) { for ( TYPE_1 < TYPE_2 > VAR_1 : VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . get ( ) ; if ( VAR_3 != null ) VAR_3 . METHOD_2 ( ) ; } VAR_2 . METHOD_3 ( ) ; },public static void METHOD_1 ( ) { for ( TYPE_2 VAR_1 : VAR_2 ) { VAR_1 . METHOD_2 ( ) ; } VAR_2 . METHOD_3 ( ) ; },"['Insert LocalVariable', 'Insert Invocation', 'Move TypeReference', 'Insert VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2718
public static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; return VAR_1 ; },public static native TYPE_1 METHOD_1 ( ) ;,"['Insert Wra', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Return']",2719
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2721
"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_2 class ) ; METHOD_2 ( intent ) ; }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { }","['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2722
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2723
public double METHOD_1 ( ) { double VAR_1 = - ( this . METHOD_2 ( 1 ) ) ; if ( ( VAR_1 > 0 ) && ( VAR_1 <= FLOAT_1 ) ) { return 0 ; } return VAR_1 ; },public double METHOD_1 ( ) { double VAR_1 = this . METHOD_2 ( 1 ) ; if ( ( VAR_1 < 0 ) && ( VAR_1 >= ( - FLOAT_1 ) ) ) { return 0 ; } return VAR_1 ; },"['Move Invocation', 'Update BinaryOperator', 'Update BinaryOperator', 'Insert UnaryOperator', 'Move FieldRead', 'Delete UnaryOperator']",2726
public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; return VAR_2 . format ( VAR_3 ) ; },public java.util.Date METHOD_1 ( ) { return VAR_3 ; },"['Update TypeReference', 'Insert FieldRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2727
private double METHOD_1 ( TYPE_1 VAR_1 ) { double temp = VAR_2 . METHOD_2 ( VAR_3 ) ; return temp / ( VAR_4 ) ; },private double METHOD_1 ( TYPE_1 VAR_1 ) { double temp = VAR_2 . METHOD_2 ( VAR_3 ) ; double result = temp / ( VAR_4 ) ; return result ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move BinaryOperator', 'Insert VariableRead']",2728
public static TYPE_1 METHOD_1 ( TYPE_2 format ) { if ( VAR_1 . equals ( VAR_2 ) ) { TYPE_1 VAR_3 = new TYPE_3 ( ) ; return VAR_3 ; } return null ; },public static TYPE_1 METHOD_1 ( TYPE_2 format ) { return null ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",2729
public boolean start ( ) throws java.io.IOException { VAR_1 = VAR_2 . get ( VAR_3 ) ; if ( ( ( VAR_1 ) != null ) && ( ! ( VAR_4 . isEmpty ( ) ) ) ) { return true ; } return false ; },public boolean start ( ) throws java.io.IOException { java.lang.String VAR_1 = VAR_2 . get ( VAR_3 ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_4 . isEmpty ( ) ) ) ) { return true ; } return false ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",2731
"public void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getString ( VAR_3 ) ; TYPE_1 . METHOD_2 ( VAR_4 , VAR_1 , VAR_5 ) . show ( ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_4 , getString ( VAR_3 ) , VAR_5 ) . show ( ) ; }","['Move Invocation', 'Update TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2732
public void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( VAR_1 ) ; intent . METHOD_2 ( VAR_2 ) ; context . METHOD_3 ( intent ) ; },public void METHOD_1 ( ) { context . METHOD_3 ( new android.content.Intent ( VAR_1 ) ) ; },"['Insert Invocation', 'Move FieldRead', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2733
"public void METHOD_1 ( java.lang.String key , java.lang.Object value ) { java.lang.String VAR_1 = VAR_2 . replace ( STRING_1 , STRING_2 ) ; VAR_3 . put ( VAR_1 , value ) ; }","public void METHOD_1 ( java.lang.String key , java.lang.Object value ) { VAR_3 . put ( key , value ) ; }","['Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",2734
"public void METHOD_1 ( TYPE_1 view , int VAR_1 , int VAR_2 , int VAR_3 ) { java.lang.String date = ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_1 ) + VAR_3 ; VAR_4 . setText ( date ) ; METHOD_2 ( date ) ; }","public void METHOD_1 ( TYPE_1 view , int VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . setText ( ( ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_1 ) + VAR_3 ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2736
"private TYPE_1 METHOD_1 ( ) throws TYPE_2 { java.util.List < java.lang.String > VAR_1 = java.util.Arrays.asList ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 ) ; return METHOD_2 ( STRING_10 , VAR_1 ) ; }",private TYPE_1 METHOD_1 ( ) throws TYPE_2 { return METHOD_2 ( STRING_10 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2739
public java.lang.String METHOD_1 ( ) { METHOD_2 ( ) ; java.lang.String VAR_1 = VAR_2 . METHOD_3 ( STRING_1 ) ; if ( VAR_1 == null ) return STRING_2 ; return VAR_1 ; },public java.lang.String METHOD_1 ( ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( STRING_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2740
public java.lang.String toString ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( STRING_1 ) ; VAR_2 . append ( data ) ; VAR_2 . append ( STRING_2 ) ; return VAR_2 . toString ( ) ; },public java.lang.String toString ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( STRING_1 ) ; boolean first = true ; VAR_2 . append ( STRING_2 ) ; return VAR_2 . toString ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Insert Literal', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",2741
"private void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) ) ; VAR_4 = TYPE_1 . METHOD_4 ( VAR_1 ) ; VAR_5 = new TYPE_2 ( VAR_4 , this ) ; VAR_6 . METHOD_5 ( VAR_5 ) ; }","private void METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) ) ; VAR_4 = TYPE_1 . METHOD_4 ( VAR_1 ) ; VAR_5 = new TYPE_2 ( VAR_4 , this ) ; VAR_6 . METHOD_5 ( VAR_5 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",2742
"public void delete ( java.lang.String id ) { java.lang.String VAR_1 = STRING_1 ; VAR_2 . update ( VAR_1 , id ) ; }",public void delete ( java.lang.String name ) { },"['Update Parameter', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",2744
public void remove ( int id ) { java.lang.String query = ( STRING_1 + id ) + STRING_2 ; METHOD_1 ( query ) ; },public void remove ( int id ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2746
"public static android.content.Intent METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 , VAR_4 ) ; android.content.Intent VAR_5 = new android.content.Intent ( VAR_1 , VAR_6 class ) ; VAR_5 . METHOD_3 ( VAR_7 , VAR_2 ) ; return VAR_5 ; }","public static android.content.Intent METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return new android.content.Intent ( VAR_1 , VAR_6 class ) . METHOD_3 ( VAR_7 , VAR_2 ) ; }","['Move Invocation', 'Move ConstructorCall', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2747
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; android.content.Intent intent = getIntent ( ) ; if ( ! ( intent . METHOD_3 ( STRING_2 ) ) ) { TYPE_2 . METHOD_4 ( ) ; } }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_2 . METHOD_4 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2749
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; return VAR_3 . METHOD_1 ( VAR_1 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; return VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",2750
"void METHOD_1 ( ) { TYPE_1 context = METHOD_2 ( ) ; TYPE_2 VAR_1 = context . METHOD_3 ( ) ; if ( VAR_1 != null ) { android.content.Intent intent = new android.content.Intent ( context , VAR_2 class ) ; VAR_1 . METHOD_4 ( intent ) ; } }","void METHOD_1 ( ) { TYPE_1 context = METHOD_2 ( ) ; android.content.Intent intent = new android.content.Intent ( context , VAR_2 class ) ; context . METHOD_4 ( intent ) ; }","['Move LocalVariable', 'Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2752
public static TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; if ( VAR_1 == null ) { return TYPE_3 . METHOD_3 ( ) ; } return new TYPE_1 ( VAR_1 . METHOD_4 ( ) ) ; },public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( TYPE_3 . METHOD_2 ( ) . METHOD_4 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2753
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) . build ( ) ) ; },public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",2754
"private void METHOD_1 ( TYPE_1 t ) { for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) { java.lang.System.out.print ( ""\t"" ) ; } java.lang.String VAR_2 = VAR_3 . toString ( ) ; java.lang.System.out.println ( METHOD_2 ( VAR_2 ) ) ; }","private void METHOD_1 ( TYPE_1 t ) { for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) { java.lang.System.out.print ( ""\t"" ) ; } java.lang.System.out.println ( t ) ; }","['Insert VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2755
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View view = VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , false ) ; return new TYPE_1 ( view ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View view = VAR_3 . METHOD_2 ( VAR_4 , null ) ; return new TYPE_1 ( view ) ; }","['Update Literal', 'Delete VariableRead']",2756
public void METHOD_1 ( java.io.File VAR_1 ) throws TYPE_1 { VAR_2 . info ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; boolean VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 ) { METHOD_3 ( VAR_1 ) ; } METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( java.io.File VAR_1 ) throws TYPE_1 { VAR_2 . info ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; METHOD_2 ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2757
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_3 . add ( VAR_2 ) . METHOD_3 ( true ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",2758
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( ( ( ( VAR_1 . METHOD_4 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_5 ( ) ) ) ) ; TYPE_2 . METHOD_6 ( ) ; },public void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_2 ) ; TYPE_2 . METHOD_6 ( ) ; },"['Move Invocation', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",2759
public static java.util.ArrayList < java.lang.String > METHOD_1 ( ) { java.util.ArrayList < java.lang.String > VAR_1 ; java.lang.String msg = STRING_1 ; VAR_2 . METHOD_2 ( msg ) ; VAR_1 = ( ( java.util.ArrayList < java.lang.String > ) ( VAR_2 . METHOD_3 ( ) ) ) ; return VAR_1 ; },public static java.util.ArrayList < java.lang.String > METHOD_1 ( ) { java.util.ArrayList < java.lang.String > VAR_1 ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_1 = ( ( java.util.ArrayList < java.lang.String > ) ( VAR_2 . METHOD_3 ( ) ) ) ; return VAR_1 ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",2760
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . info ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_3 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . info ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2761
"public static boolean METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) return false ; return VAR_3 . METHOD_3 ( ) ; }","public static boolean METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { return VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2763
public java.util.List < TYPE_1 > METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_1 ( ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_1 ( ) ; return VAR_1 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert TypeReference', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",2764
"protected void METHOD_1 ( final java.util.List < TYPE_1 > result ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { TYPE_2 VAR_2 = new TYPE_2 ( getActivity ( ) , result ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; } }",protected void METHOD_1 ( final java.util.List < TYPE_1 > result ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { } },"['Delete TypeReference', 'Delete Invocation', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2766
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2768
"public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { java.lang.String VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 != null ) { METHOD_1 ( new java.io.File ( VAR_1 ) ) ; } }","public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { METHOD_1 ( new java.io.File ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ; }","['Insert Invocation', 'Insert ConstructorCall', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete Block', 'Delete If']",2769
"public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; return STRING_2 ; }",public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { return STRING_2 ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2774
"protected void METHOD_1 ( ) { java.lang.Double VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . getValue ( ) , VAR_3 ) ; VAR_4 . setValue ( VAR_1 ) ; METHOD_3 ( ) ; }","protected void METHOD_1 ( ) { VAR_4 . setValue ( TYPE_1 . METHOD_2 ( VAR_2 . getValue ( ) , VAR_3 ) ) ; METHOD_3 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2777
"public TYPE_1 METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = super . METHOD_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , VAR_3 ) ; return new TYPE_3 ( VAR_2 ) ; }","public TYPE_1 METHOD_1 ( ) throws java.io.IOException { return new TYPE_3 ( new TYPE_2 ( super . METHOD_1 ( ) , VAR_3 ) ) ; }","['Update ConstructorCall', 'Insert ConstructorCall', 'Move Invocation', 'Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",2779
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 ) . METHOD_3 ( TYPE_4 . METHOD_4 ( STRING_1 ) ) ; return VAR_2 . METHOD_5 ( VAR_1 ) ; },private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 ) ; return VAR_2 . METHOD_5 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2780
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , false ) ; if ( VAR_1 == null ) return ; METHOD_1 ( VAR_1 ) ; VAR_3 = false ; }","public void METHOD_1 ( ) throws java.lang.Exception { METHOD_1 ( METHOD_2 ( VAR_2 , false ) ) ; VAR_3 = false ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2781
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.List < TYPE_3 > VAR_3 = ( ( java.util.List < TYPE_3 > ) ( VAR_4 . METHOD_2 ( ) ) ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_3 ) ; return STRING_2 ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return STRING_2 ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2782
public TYPE_1 METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_1 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess', 'Delete FieldRead']",2783
"public void METHOD_1 ( java.lang.Object response ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( listener , new TYPE_4 ( VAR_1 , this ) ) ; }","public void METHOD_1 ( java.lang.Object response ) { TYPE_3 . METHOD_4 ( listener , new TYPE_4 ( new TYPE_2 ( this ) , this ) ) ; }","['Insert ConstructorCall', 'Move ThisAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2784
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 , VAR_1 ) ; return super . METHOD_1 ( VAR_1 ) ; }",public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return super . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2785
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; java.lang.String VAR_4 = VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; java.lang.String id = VAR_2 . METHOD_4 ( ) ; return STRING_1 ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; java.lang.String VAR_4 = VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; return STRING_1 ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",2786
"public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; getActivity ( ) . METHOD_2 ( VAR_2 ) ; android.content.Intent i = new android.content.Intent ( getActivity ( ) , VAR_3 class ) ; getActivity ( ) . METHOD_3 ( i ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; getActivity ( ) . METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2789
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) . add ( VAR_4 , VAR_3 ) . commit ( ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",2790
public void METHOD_1 ( ) { VAR_1 . commit ( ) ; VAR_2 . METHOD_2 ( ) ; java.io.File f = new java.io.File ( VAR_3 ) ; VAR_4 . delete ( ) ; },public void METHOD_1 ( ) { },"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",2791
public static void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; },public static void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2792
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . remove ( VAR_1 ) ; },"public void METHOD_1 ( android.content.Context context , int position ) { TYPE_1 VAR_1 = VAR_2 . get ( position ) ; VAR_2 . remove ( position ) ; }","['Insert Parameter', 'Insert Parameter', 'Insert LocalVariable', 'Insert TypeReference', 'Insert TypeReference', 'Move TypeReference', 'Insert Invocation', 'Update VariableRead', 'Insert TypeAccess', 'Insert VariableRead', 'Delete Parameter']",2793
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; },public TYPE_2 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",2794
private static java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( ) ; java.lang.String VAR_2 = TYPE_1 . METHOD_3 ( ) ; return ( STRING_1 + VAR_1 ) + VAR_2 ; },private static java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( ) ; java.lang.String VAR_2 = TYPE_1 . METHOD_3 ( ) ; java.lang.String fileName = ( STRING_1 + VAR_1 ) + VAR_2 ; return fileName ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move BinaryOperator', 'Insert VariableRead']",2795
public java.lang.String toString ( ) { java.lang.String VAR_1 = ( ( ( STRING_1 + ( METHOD_1 ( ) ) ) + STRING_2 ) + ( getName ( ) ) ) + STRING_3 ; return VAR_1 ; },public java.lang.String toString ( ) { return ( ( ( STRING_1 + ( METHOD_1 ( ) ) ) + STRING_2 ) + ( getName ( ) ) ) + STRING_3 ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2796
"public TYPE_1 METHOD_1 ( ) { TYPE_2 context = METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( METHOD_2 ( ) . METHOD_3 ( ) ) ; return TYPE_3 . METHOD_5 ( context , VAR_1 , STRING_1 ) ; }",public TYPE_1 METHOD_1 ( ) { return METHOD_4 ( METHOD_2 ( ) . METHOD_3 ( ) ) . METHOD_1 ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete TypeAccess']",2798
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_1 . METHOD_3 ( STRING_1 , VAR_2 ) ; java.lang.String VAR_4 = STRING_2 ; return STRING_3 + VAR_4 ; } return STRING_4 ; }",public java.lang.String METHOD_1 ( ) { return STRING_4 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",2799
public TYPE_1 METHOD_1 ( ) { try { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; VAR_2 = VAR_3 . METHOD_1 ( ) ; return VAR_1 ; } catch ( TYPE_2 VAR_4 ) { throw new TYPE_3 ( ) ; } },public TYPE_1 METHOD_1 ( ) { try { return ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; } catch ( TYPE_2 VAR_4 ) { throw new TYPE_3 ( ) ; } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete TypeAccess', 'Delete Invocation', 'Delete Assignment', 'Delete VariableRead']",2802
"public static TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 < java.lang.String > item ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_1 < > ( item , VAR_2 . getValue ( ) ) ; VAR_2 . setValue ( STRING_1 ) ; return VAR_1 ; }","public static TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 < java.lang.String > item ) { return new TYPE_1 < > ( item , VAR_2 . getValue ( ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2803
"protected void METHOD_1 ( TYPE_1 node ) { super . METHOD_1 ( node ) ; TYPE_1 parameters = node . METHOD_2 ( STRING_1 ) ; VAR_1 = VAR_2 . contains ( STRING_2 ) ; VAR_3 = VAR_4 . getBoolean ( STRING_3 , VAR_3 ) ; }","protected void METHOD_1 ( TYPE_1 node ) { super . METHOD_1 ( node ) ; VAR_1 = VAR_2 . contains ( STRING_2 ) ; VAR_3 = VAR_4 . getBoolean ( STRING_3 , VAR_3 ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",2804
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 , TYPE_3 { final TYPE_1 VAR_2 = this . VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) throw new TYPE_2 ( VAR_1 ) ; return VAR_2 ; }",public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { final TYPE_1 VAR_2 = this . METHOD_1 ( VAR_1 ) ; if ( VAR_2 == null ) throw new TYPE_2 ( VAR_1 ) ; return VAR_2 ; },"['Update Invocation', 'Move ThisAccess', 'Delete TypeReference', 'Delete FieldRead']",2808
public static void METHOD_1 ( java.lang.String text ) { VAR_1 . setText ( text ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 . setValue ( VAR_2 . METHOD_3 ( ) ) ; },public static void METHOD_1 ( java.lang.String text ) { VAR_1 . setText ( text ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",2809
public double METHOD_1 ( float VAR_1 ) { int VAR_2 = ( VAR_3 ) - ( VAR_4 ) ; double VAR_5 = ( VAR_6 ) - ( VAR_7 ) ; return ( ( VAR_1 - ( VAR_8 ) ) * VAR_5 ) / VAR_2 ; },public double METHOD_1 ( float VAR_1 ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Return']",2810
"private TYPE_1 METHOD_1 ( ) { java.util.Set < TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( new TYPE_2 ( STRING_1 , INT_1 ) , new TYPE_2 ( STRING_2 , INT_2 ) ) ; return new TYPE_1 ( VAR_2 , VAR_1 ) ; }","private TYPE_1 METHOD_1 ( ) { java.util.HashSet < TYPE_2 > VAR_1 = new java.util.HashSet ( java.util.Arrays.asList ( new TYPE_2 ( STRING_1 , INT_1 ) , new TYPE_2 ( STRING_2 , INT_2 ) ) ) ; return new TYPE_1 ( VAR_2 , VAR_1 ) ; }","['Update TypeReference', 'Insert ConstructorCall', 'Update Invocation', 'Move Invocation', 'Update TypeAccess']",2813
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 == null ) return ; if ( VAR_3 ) VAR_1 . METHOD_2 ( ) ; else VAR_1 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; },"['Insert Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2814
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_4 . METHOD_2 ( ) , VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_5 ) ; VAR_6 . METHOD_4 ( VAR_3 , true ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_6 . METHOD_4 ( new TYPE_3 ( VAR_4 . METHOD_2 ( ) , VAR_1 ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",2815
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String replace = STRING_1 . replace ( STRING_2 , STRING_3 ) ; java.lang.System.out.println ( replace ) ; assertEquals ( INT_1 , ( INT_2 + INT_2 ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( INT_1 , ( INT_2 + INT_2 ) ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",2816
private void METHOD_1 ( ) { android.content.Context c = METHOD_2 ( ) ; java.lang.Thread VAR_1 = new TYPE_1 ( c ) ; VAR_2 . start ( ) ; },private void METHOD_1 ( ) { java.lang.Thread VAR_1 = new TYPE_1 ( ) ; VAR_2 . start ( ) ; },"['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",2820
"public void METHOD_1 ( java.util.Set < java.lang.String > VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_4 , VAR_1 ) . METHOD_5 ( ) ; }","public void METHOD_1 ( java.util.Set < java.lang.String > VAR_1 ) { VAR_3 . METHOD_2 ( ) . METHOD_4 ( VAR_4 , VAR_1 ) . METHOD_5 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2822
void METHOD_1 ( ) { java.util.Collection < java.lang.Object > tmp = new java.util.ArrayList < java.lang.Object > ( ) ; tmp . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( tmp ) ; },void METHOD_1 ( ) { VAR_2 . METHOD_1 ( VAR_1 . METHOD_3 ( ) ) ; },"['Update Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",2824
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_3 > VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 ) ; TYPE_1 VAR_4 = VAR_3 . METHOD_3 ( VAR_1 ) ; return VAR_4 . METHOD_4 ( ) ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_3 > VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 ) ; return VAR_3 . METHOD_3 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2825
protected void METHOD_1 ( ) { boolean VAR_1 = ( METHOD_2 ( ) . getId ( ) ) == null ; METHOD_3 ( ) ; if ( VAR_1 ) { METHOD_4 ( ) ; } },protected void METHOD_1 ( ) { METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2827
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( this ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( ) ; },"['Move TypeAccess', 'Delete ThisAccess', 'Delete Invocation']",2828
"public boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.List < java.lang.String > VAR_2 ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.Collection < TYPE_4 > VAR_4 = VAR_3 . METHOD_3 ( ) ; new TYPE_5 ( VAR_4 ) ; return false ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.List < java.lang.String > VAR_2 ) { new TYPE_5 ( VAR_1 ) ; return false ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2830
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { java.lang.String VAR_2 = STRING_1 ; METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_3 ( STRING_2 , STRING_3 ) ; VAR_3 = false ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { TYPE_3 . METHOD_3 ( STRING_2 , STRING_3 ) ; VAR_3 = false ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2832
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 , TYPE_4 , TYPE_5 { java.lang.String VAR_3 = TYPE_6 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; return METHOD_4 ( VAR_2 , VAR_1 . METHOD_5 ( ) , VAR_3 ) ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 , TYPE_4 , TYPE_5 { return METHOD_4 ( VAR_2 , VAR_1 . METHOD_5 ( ) ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2833
public void METHOD_1 ( int i ) { },public void METHOD_1 ( int i ) { int j = 0 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Insert Literal']",2834
protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ; for ( TYPE_4 VAR_3 : VAR_4 ) { if ( VAR_2 == ( VAR_5 ) ) { return VAR_6 ; } } return false ; },protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { long VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 ) ; for ( TYPE_4 VAR_3 : VAR_4 ) { if ( VAR_2 == ( VAR_5 ) ) { return VAR_6 ; } } return false ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2835
public void METHOD_1 ( int VAR_1 ) { TYPE_1 < java.lang.Void > VAR_2 = METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; this . VAR_3 = VAR_2 ; },public void METHOD_1 ( int VAR_1 ) { METHOD_3 ( ) ; METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete FieldWrite', 'Delete VariableRead', 'Delete Assignment']",2838
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; return VAR_4 ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2839
private double METHOD_1 ( ) { double VAR_1 = VAR_2 . METHOD_2 ( ) ; return ( VAR_1 * FLOAT_1 ) - 1.0 ; },private double METHOD_1 ( ) { return ( ( VAR_2 . METHOD_2 ( ) ) * FLOAT_1 ) - 1.0 ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2842
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 , 0 ) ; VAR_3 . commit ( ) ; METHOD_4 ( ) ; }",public void METHOD_1 ( ) { METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2843
"public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = java.lang.String.format ( STRING_1 , VAR_2 . METHOD_2 ( ) . METHOD_1 ( ) ) ; return java.lang.String.format ( STRING_2 , VAR_1 ) ; }","public java.lang.String METHOD_1 ( ) { return java.lang.String.format ( STRING_1 , VAR_2 . METHOD_2 ( ) . METHOD_1 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2844
public boolean METHOD_1 ( java.util.Collection < ? extends TYPE_1 > c ) { boolean result = VAR_1 . METHOD_1 ( c ) ; METHOD_2 ( ) ; return result ; },public boolean METHOD_1 ( java.util.Collection < ? extends TYPE_1 > c ) { METHOD_2 ( ) ; return VAR_1 . METHOD_1 ( c ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2845
"public void METHOD_1 ( java.lang.String key , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( key ) ; if ( VAR_2 != null ) { METHOD_2 ( VAR_2 , VAR_4 , VAR_5 ) ; } }","public void METHOD_1 ( java.lang.String key , TYPE_1 VAR_1 ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2846
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.util.List < TYPE_2 > VAR_2 = VAR_1 . METHOD_2 ( METHOD_3 ( VAR_3 ) ) ; VAR_4 . assertEquals ( STRING_1 , VAR_5 . get ( 0 ) . name ) ; }","public void METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_2 = TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_3 ) ) ; VAR_4 . assertEquals ( STRING_1 , VAR_5 . get ( 0 ) . name ) ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",2847
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 f = new TYPE_2 ( VAR_2 ) ; f . METHOD_2 ( new TYPE_3 ( INT_1 , INT_2 ) ) ; VAR_3 . add ( f ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . add ( new TYPE_2 ( VAR_2 ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2848
protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return VAR_1 ; },protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2849
public static double METHOD_1 ( float value ) { java.lang.Object VAR_1 = TYPE_1 . METHOD_2 ( value ) ; return TYPE_1 . METHOD_3 ( VAR_1 ) ; },public static double METHOD_1 ( float value ) { return TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_2 ( value ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2850
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_3 VAR_1 = new TYPE_3 ( ) ; VAR_2 . setValue ( VAR_3 . getValue ( ) ) ; return VAR_1 ; },public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",2852
"public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { int VAR_1 = INT_1 ; TYPE_1 VAR_2 = new TYPE_1 ( new java.io.File ( STRING_1 ) , VAR_1 ) ; VAR_2 . METHOD_1 ( ) ; }",public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.io.File file = new java.io.File ( STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( file ) ; VAR_2 . METHOD_1 ( ) ; },"['Move LocalVariable', 'Update LocalVariable', 'Update LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Move TypeReference', 'Insert ConstructorCall', 'Insert VariableRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete TypeReference', 'Delete FieldRead']",2854
public java.util.List < java.lang.String > METHOD_1 ( ) { java.lang.String VAR_1 = this . VAR_1 ; return TYPE_1 . METHOD_2 ( java.util.Arrays.asList ( VAR_2 . split ( VAR_3 ) ) ) ; },public java.util.List < java.lang.String > METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( java.util.Arrays.asList ( VAR_2 . split ( VAR_3 ) ) ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete LocalVariable']",2855
public double METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; return VAR_1 ; },public double METHOD_1 ( ) { double VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; return VAR_1 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldWrite', 'Delete Assignment', 'Delete Block', 'Delete If', 'Delete FieldRead']",2856
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",2857
"public java.util.List < TYPE_1 > METHOD_1 ( java.util.Date VAR_1 , java.util.Date to ) { TYPE_2 VAR_2 = new TYPE_3 ( STRING_1 ) ; return VAR_3 . METHOD_1 ( VAR_4 . format ( VAR_1 ) , VAR_4 . format ( to ) ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String to ) { return VAR_3 . METHOD_1 ( VAR_1 , to ) ; }","['Update TypeReference', 'Update TypeReference', 'Move VariableRead', 'Move VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2858
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_2 . METHOD_2 ( ) ) { VAR_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; } return VAR_2 ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",2859
public int METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_2 ( ) ; int id = VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; return id ; },public int METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( ) . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2861
"public TYPE_1 METHOD_1 ( java.lang.String msg , java.util.Vector VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( this ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 , msg , VAR_1 , STRING_1 , null ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( java.lang.String msg , java.util.Vector VAR_1 , java.lang.String id ) { TYPE_2 VAR_2 = METHOD_2 ( this ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 , msg , VAR_1 , id ) ; return VAR_3 ; }","['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead', 'Delete FieldRead', 'Delete Literal']",2862
"public void METHOD_1 ( java.io.File VAR_1 ) { VAR_2 . add ( new TYPE_1 ( VAR_3 . getName ( ) . split ( STRING_1 ) [ 0 ] , STRING_2 , VAR_1 ) ) ; }","public void METHOD_1 ( java.io.File VAR_1 ) { java.lang.String [ ] name = VAR_3 . getName ( ) . split ( STRING_1 ) ; VAR_2 . add ( new TYPE_1 ( name [ 0 ] , STRING_2 , VAR_1 ) ) ; }","['Insert LocalVariable', 'Move Invocation', 'Insert VariableRead']",2863
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( true ) ; this . METHOD_2 ( false ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { this . METHOD_2 ( false ) ; TYPE_2 VAR_2 = new TYPE_2 ( this ) ; VAR_2 . METHOD_2 ( true ) ; },"['Move Invocation', 'Update ConstructorCall', 'Insert ThisAccess']",2864
public boolean remove ( java.lang.Object VAR_1 ) { boolean element = VAR_2 . remove ( VAR_1 ) ; VAR_3 . METHOD_1 ( ) ; return element ; },public boolean remove ( java.lang.Object VAR_1 ) { return VAR_2 . remove ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2865
"public void METHOD_1 ( android.view.View view ) { int a = INT_1 ; int VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , a ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_3 ( intent ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",2866
public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_5 ( ) . METHOD_4 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2867
public int METHOD_1 ( ) { int count = VAR_1 . METHOD_2 ( ) ; return count + 1 ; },public int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator']",2868
"public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 = VAR_5 . toString ( ) ; VAR_6 . METHOD_3 ( VAR_1 ) ; }",public void METHOD_1 ( android.view.View view ) { VAR_6 . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete TypeAccess', 'Delete Invocation', 'Delete Assignment', 'Delete VariableRead']",2869
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 . show ( METHOD_2 ( ) , STRING_1 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2871
"protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws java.io.IOException , TYPE_4 , TYPE_5 { TYPE_6 VAR_3 = new TYPE_6 ( VAR_1 ) ; TYPE_1 result = VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return result ; }","protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws java.io.IOException , TYPE_4 , TYPE_5 { return new TYPE_6 ( VAR_1 ) . METHOD_2 ( VAR_2 ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2872
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_2 class ) ) . METHOD_6 ( VAR_1 ) ; },private void METHOD_1 ( ) { TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_2 class ) ) . METHOD_6 ( new TYPE_1 ( ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2874
"public void METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == 0 ) { return ; } TYPE_1 VAR_3 = TYPE_1 . METHOD_3 ( VAR_4 , VAR_1 , VAR_1 , false ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_3 = TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) , false ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; }","['Move Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete VariableRead']",2875
"public boolean METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ; return VAR_3 . METHOD_4 ( VAR_2 , VAR_1 ) ; }",public boolean METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 { return false ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",2876
"private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_3 . METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; VAR_5 = true ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; VAR_5 = true ; }","['Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2878
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_4 ( this , STRING_1 ) ; VAR_4 . show ( VAR_2 , STRING_1 ) ; METHOD_5 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2879
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; java.lang.String VAR_4 = VAR_5 . METHOD_3 ( VAR_1 ) ; VAR_6 . assertEquals ( VAR_4 , VAR_7 ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2880
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 < TYPE_3 , java.lang.Boolean > VAR_2 = ( VAR_3 ) - > VAR_1 . METHOD_2 ( ) ; METHOD_1 ( VAR_2 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( VAR_3 ) - > VAR_1 . METHOD_2 ( ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2881
public void init ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( ) ; },public void init ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2882
"private void METHOD_1 ( java.lang.String url ) { VAR_1 . url = url ; android.content.Intent intent = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; intent . METHOD_3 ( VAR_3 ) ; METHOD_4 ( intent ) ; }","private void METHOD_1 ( java.lang.String url ) { VAR_1 . url = url ; METHOD_4 ( new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2885
"public static boolean METHOD_1 ( java.io.File file ) { TYPE_1 . METHOD_2 ( file , null ) ; boolean result = VAR_1 . delete ( ) ; return result ; }","public static boolean METHOD_1 ( java.io.File file ) { TYPE_1 . METHOD_2 ( file , null ) ; return VAR_1 . delete ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2886
public java.util.Map METHOD_1 ( ) { TYPE_1 obj = new TYPE_1 ( ) ; obj . METHOD_2 ( ) ; java.util.Map VAR_1 = null ; return VAR_1 ; },public java.util.Map METHOD_1 ( ) { TYPE_1 obj = new TYPE_1 ( ) ; obj . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",2887
public static TYPE_1 METHOD_1 ( int id ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { return VAR_2 . get ( id ) ; } else { return null ; } },public static TYPE_1 METHOD_1 ( int id ) { return TYPE_2 . METHOD_2 ( ) . get ( id ) ; },"['Insert Return', 'Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2890
"private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { java.lang.String id = TYPE_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_3 , id ) ; return id ; } return VAR_1 ; }","private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { VAR_2 . METHOD_3 ( STRING_1 , VAR_3 , VAR_1 ) ; return TYPE_1 . METHOD_2 ( ) ; } return VAR_1 ; }","['Update VariableRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2892
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 . info ( ( ( VAR_3 ) + STRING_1 ) ) ; TYPE_2 VAR_4 = null ; TYPE_1 VAR_5 = null ; TYPE_3 VAR_6 = null ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 . info ( ( ( VAR_3 ) + STRING_1 ) ) ; },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",2893
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( VAR_1 ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",2894
public boolean remove ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( VAR_3 . remove ( VAR_4 . METHOD_1 ( VAR_2 ) ) ) != null ; },public boolean remove ( ) { return false ; },"['Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator']",2895
public java.lang.CharSequence METHOD_1 ( int position ) { TYPE_1 VAR_1 = VAR_2 . get ( position ) ; if ( VAR_1 != null ) { return VAR_1 . METHOD_2 ( ) ; } return STRING_1 ; },public java.lang.CharSequence METHOD_1 ( int position ) { return VAR_2 . get ( position ) . METHOD_2 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete FieldRead']",2896
"public void update ( boolean VAR_1 ) { int count = VAR_2 . update ( TYPE_1 . METHOD_1 ( ) , this ) ; if ( count == 0 ) { TYPE_2 . METHOD_2 ( VAR_3 , ( STRING_1 + ( getClass ( ) ) ) ) ; } }","public void update ( boolean VAR_1 ) { VAR_2 . update ( TYPE_1 . METHOD_1 ( ) , this ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",2897
"public void METHOD_1 ( ) { long n = - INT_1 ; long VAR_1 = 0 ; long result = TYPE_1 . METHOD_2 ( n ) ; assertEquals ( VAR_1 , result ) ; }","public void METHOD_1 ( ) { int n = - INT_1 ; int VAR_1 = 0 ; int result = TYPE_1 . METHOD_2 ( n ) ; assertEquals ( VAR_1 , result ) ; }","['Update TypeReference', 'Update TypeReference', 'Update TypeReference']",2899
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2904
public java.lang.Boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . add ( VAR_1 ) ) ) return VAR_3 ; TYPE_2 VAR_4 = VAR_1 . METHOD_2 ( ) ; if ( VAR_4 == null ) return VAR_3 ; return METHOD_3 ( VAR_4 ) ; },public java.lang.Boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . add ( VAR_1 ) ) ) return VAR_3 ; return METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2906
public void METHOD_1 ( TYPE_1 VAR_1 ) { int i = 0 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",2907
"public TYPE_1 METHOD_1 ( java.lang.String query , java.lang.String VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( query , VAR_1 ) ; TYPE_1 VAR_3 = METHOD_2 ( METHOD_3 ( ) . METHOD_1 ( VAR_2 ) ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( java.lang.String query , java.lang.String VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( query , VAR_1 ) ; return METHOD_2 ( METHOD_3 ( ) . METHOD_1 ( VAR_2 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2908
"private void METHOD_1 ( TYPE_1 VAR_1 ) { java.awt.Font VAR_2 = TYPE_2 . METHOD_2 ( this , null , VAR_3 ) ; if ( VAR_2 != null ) { VAR_3 = VAR_2 ; METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 = TYPE_2 . METHOD_2 ( this , null , VAR_3 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; }","['Insert Assignment', 'Move Invocation', 'Move Invocation', 'Move Invocation', 'Move FieldWrite', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Assignment', 'Delete Block', 'Delete If']",2909
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; return METHOD_2 ( ) . METHOD_5 ( VAR_2 ) ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_2 ( ) . METHOD_5 ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2912
"protected java.lang.Boolean METHOD_1 ( java.lang.String ... VAR_1 ) { java.lang.String str = VAR_2 . getText ( ) . toString ( ) ; return VAR_3 . METHOD_2 ( VAR_4 , VAR_2 . getText ( ) . toString ( ) ) ; }","protected java.lang.Boolean METHOD_1 ( java.lang.String ... VAR_1 ) { return VAR_3 . METHOD_2 ( VAR_4 , VAR_2 . getText ( ) . toString ( ) ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",2914
public static TYPE_1 METHOD_1 ( TYPE_1 p ) { int VAR_1 = ( p . METHOD_2 ( ) ) + 1 ; if ( VAR_1 == ( VAR_2 . values ( ) . length ) ) return null ; return VAR_2 . values ( ) [ VAR_1 ] ; },public static TYPE_1 METHOD_1 ( TYPE_1 p ) { return VAR_2 . values ( ) [ ( ( p . METHOD_2 ( ) ) + 1 ) ] ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2915
"private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_3 . substring ( 0 , INT_1 ) ; java.lang.String VAR_4 = VAR_3 . substring ( INT_1 ) ; return VAR_4 + VAR_2 ; }","private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = VAR_3 . substring ( 0 , INT_1 ) ; VAR_4 = VAR_3 . substring ( INT_1 ) ; return ( VAR_4 ) + ( VAR_2 ) ; }","['Insert Assignment', 'Insert Assignment', 'Insert FieldWrite', 'Move Invocation', 'Insert FieldWrite', 'Move Invocation', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2916
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( this . VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) ) ) ; VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( this . VAR_3 . METHOD_3 ( VAR_4 ) ) ) ; VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeReference', 'Move TypeAccess', 'Delete Invocation']",2917
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 writer ) throws TYPE_4 , java.io.IOException { TYPE_5 VAR_2 = new TYPE_5 ( ) ; VAR_3 . METHOD_2 ( VAR_2 , writer ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 writer ) throws TYPE_4 , java.io.IOException { }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",2918
"public boolean execute ( TYPE_1 VAR_1 ) throws java.lang.Exception { java.lang.String VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( name ) . toUpperCase ( ) , STRING_1 ) ; java.lang.System.out.println ( ( STRING_2 + VAR_2 ) ) ; return true ; }","public boolean execute ( TYPE_1 VAR_1 ) throws java.lang.Exception { java.lang.String VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( name ) , STRING_1 ) ; java.lang.System.out.println ( ( STRING_2 + VAR_2 ) ) ; return true ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Delete Invocation']",2919
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , java.io.IOException { java.lang.String text = VAR_1 . METHOD_2 ( VAR_3 . String class ) ; if ( VAR_4 . isEmpty ( ) ) { return null ; } return TYPE_1 . METHOD_3 ( text ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , java.io.IOException { return TYPE_1 . METHOD_3 ( VAR_1 . METHOD_2 ( VAR_3 . String class ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2920
"public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; java.lang.String VAR_3 = ( STRING_2 + ( VAR_4 . size ( ) ) ) + ""\n"" ; return VAR_3 ; }","public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; java.lang.String VAR_3 = ( VAR_4 . size ( ) ) + ""\n"" ; return VAR_3 ; }","['Move BinaryOperator', 'Move Literal', 'Delete FieldRead', 'Delete BinaryOperator']",2921
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_2 class , args ) ; }","public static void main ( java.lang.String [ ] args ) { TYPE_2 . METHOD_3 ( VAR_2 class , args ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2922
"public void METHOD_1 ( android.view.View VAR_1 ) { int VAR_2 = VAR_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_4 . getContext ( ) , VAR_3 , VAR_2 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( VAR_4 . getContext ( ) , VAR_3 , position ) ; }","['Insert FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2923
"public TYPE_1 METHOD_1 ( java.io.InputStream VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 { TYPE_2 VAR_4 = this . METHOD_2 ( VAR_3 ) ; return this . METHOD_3 ( ) . METHOD_1 ( VAR_1 , VAR_2 , VAR_4 ) ; }","public TYPE_1 METHOD_1 ( java.io.InputStream VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 { return this . METHOD_3 ( ) . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2924
private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.util.regex.Matcher VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; java.util.regex.Matcher VAR_4 = VAR_5 . METHOD_2 ( VAR_6 . replaceAll ( STRING_1 ) . trim ( ) ) ; return VAR_7 . replaceAll ( STRING_2 ) ; },private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2925
"public java.io.File METHOD_1 ( ) { java.lang.String VAR_1 = new TYPE_1 ( STRING_1 ) . format ( new java.util.Date ( ) ) ; java.io.File VAR_2 = new java.io.File ( VAR_3 , ( VAR_1 + STRING_2 ) ) ; return VAR_2 ; }",public java.io.File METHOD_1 ( ) { java.lang.String VAR_1 = new TYPE_1 ( STRING_1 ) . format ( new java.util.Date ( ) ) ; java.io.File VAR_2 = new java.io.File ( ( ( ( VAR_3 ) + VAR_1 ) + STRING_2 ) ) ; return VAR_2 ; },"['Update ConstructorCall', 'Insert BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Move FieldRead']",2927
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) . METHOD_2 ( METHOD_3 ( ) . getString ( VAR_2 ) ) . METHOD_2 ( METHOD_3 ( ) . getString ( VAR_3 ) ) . build ( ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; },private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) . METHOD_2 ( METHOD_3 ( ) . getString ( VAR_2 ) ) . build ( ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2928
"public TYPE_1 METHOD_1 ( ) { int index = VAR_1 . min ( VAR_2 , ( ( VAR_3 . size ( ) ) - 1 ) ) ; return VAR_3 . get ( index ) ; }",public TYPE_1 METHOD_1 ( ) { return VAR_3 . get ( VAR_2 ) ; },"['Move TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2930
public int METHOD_1 ( ) { return java.lang.Integer.parseInt ( VAR_1 . getText ( ) ) ; },public int METHOD_1 ( ) { int rows = java.lang.Integer.parseInt ( VAR_1 . getText ( ) ) ; return rows ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",2931
public int METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { return 0 ; } TYPE_1 tmp = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( tmp ) ; int VAR_4 = tmp . METHOD_4 ( ) ; return VAR_4 ; },public void METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { return ; } TYPE_1 tmp = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( tmp ) ; },"['Update TypeReference', 'Delete Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",2932
public static void main ( java.lang.String [ ] args ) { if ( ( args.length ) != 1 ) { java.lang.System.err.println ( STRING_1 ) ; } else { TYPE_1 VAR_1 = new TYPE_1 ( args [ 0 ] ) ; VAR_1 . METHOD_1 ( INT_1 ) ; } },public static void main ( java.lang.String [ ] args ) { if ( ( args.length ) != 1 ) { java.lang.System.err.println ( STRING_1 ) ; } else { new TYPE_1 ( args [ 0 ] ) ; } },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2933
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; java.lang.System.out.println ( VAR_2 . METHOD_2 ( STRING_1 , STRING_2 , INT_1 ) ) ; }",public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2934
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) return new TYPE_1 ( VAR_1 ) ; else return VAR_2 ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . get ( VAR_1 ) ; },"['Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",2936
public void METHOD_1 ( ) { boolean value = VAR_1 . isEmpty ( ) ; if ( value ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) ; METHOD_4 ( ) ; } },public void METHOD_1 ( boolean value ) { if ( value ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) ; METHOD_4 ( ) ; } },"['Insert Parameter', 'Move TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",2938
"public void METHOD_1 ( java.lang.String VAR_1 , int status , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) ; if ( VAR_3 != null ) { METHOD_3 ( VAR_3 ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 , int status , TYPE_1 VAR_2 ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2939
"public void METHOD_1 ( android.view.View view ) { VAR_1 = false ; android.content.Intent i = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( i ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }",public void METHOD_1 ( android.view.View view ) { VAR_1 = false ; METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2941
"public static java.lang.String METHOD_1 ( java.lang.String message , java.lang.String VAR_1 ) { java.lang.String result = TYPE_1 . METHOD_2 ( new java.lang.String ( TYPE_2 . METHOD_3 ( message , 0 ) ) , VAR_1 ) ; return result ; }","public static java.lang.String METHOD_1 ( java.lang.String message , java.lang.String VAR_1 ) { return TYPE_1 . METHOD_2 ( new java.lang.String ( TYPE_2 . METHOD_3 ( message , 0 ) ) , VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2943
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 , METHOD_3 ( VAR_1 ) , TYPE_3 . METHOD_4 ( ) ) ; TYPE_1 VAR_4 = VAR_2 . METHOD_5 ( ) ; return VAR_4 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 , METHOD_3 ( VAR_1 ) , TYPE_3 . METHOD_4 ( ) ) ; return VAR_2 . METHOD_5 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2944
public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; VAR_2 = false ; TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_3 ( true ) ; VAR_3 . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; VAR_2 = false ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2945
"public void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ( ( ( fileName ) + STRING_1 ) + VAR_1 ) , true ) ; VAR_4 . delete ( VAR_5 ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ( ( ( fileName ) + STRING_1 ) + VAR_1 ) ) ; VAR_4 . delete ( VAR_5 ) ; },['Delete Literal'],2948
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( STRING_1 ) . METHOD_2 ( STRING_2 ) . METHOD_3 ( STRING_3 ) . build ( ) ; java.lang.System.out.println ( VAR_2 . toString ( ) ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( STRING_1 ) . METHOD_2 ( STRING_2 ) . build ( ) ; java.lang.System.out.println ( VAR_2 . toString ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2949
public java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; return VAR_2 ; },public java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2952
"public java.lang.Long METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( VAR_2 . METHOD_2 ( ) ) ; METHOD_3 ( VAR_3 , VAR_1 ) ; return VAR_4 . METHOD_4 ( VAR_1 ) ; }","public java.lang.Long METHOD_1 ( ) throws java.lang.Exception { METHOD_3 ( VAR_3 , VAR_1 ) ; return VAR_4 . METHOD_4 ( VAR_1 ) ; }","['Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2953
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.String VAR_3 = java.lang.String.format ( VAR_4 , VAR_2 ) ; VAR_5 . assertThat ( VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( VAR_3 ) ; }",public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_5 . assertThat ( VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( VAR_2 ) ; },"['Move TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2955
public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 { assert VAR_1 == 0 ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 { assert VAR_1 == 0 ; return new TYPE_3 ( VAR_3 ) ; },"['Insert ConstructorCall', 'Insert FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2957
private TYPE_1 METHOD_1 ( TYPE_1 context ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; context . METHOD_5 ( VAR_1 ) ; return context ; },private TYPE_1 METHOD_1 ( TYPE_1 context ) { return context ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",2958
"public void METHOD_1 ( java.lang.Object VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = TYPE_1 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_3 , VAR_2 ) ; METHOD_5 ( VAR_2 ) ; }",public void METHOD_1 ( java.lang.Object VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",2959
public void handle ( TYPE_1 event ) { TYPE_2 source = ( ( TYPE_2 ) ( event . METHOD_1 ( ) ) ) ; if ( source == ( VAR_1 ) ) { METHOD_2 ( value ) ; } },public void handle ( TYPE_1 event ) { METHOD_2 ( value ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2960
public void delete ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 . delete ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) . commit ( ) ; },public void delete ( TYPE_1 VAR_1 ) throws TYPE_2 { },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",2961
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , VAR_4 ) ; VAR_2 . METHOD_2 ( context ) ; TYPE_2 VAR_5 = VAR_2 ; VAR_6 . show ( VAR_7 . METHOD_3 ( ) , STRING_1 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_2 VAR_5 = new TYPE_1 ( VAR_3 , VAR_4 ) ; VAR_6 . show ( VAR_7 . METHOD_3 ( ) , STRING_1 ) ; }","['Update LocalVariable', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead', 'Delete LocalVariable']",2962
public TYPE_1 METHOD_1 ( ) { TYPE_1 result = new TYPE_1 ( ) ; result . METHOD_2 ( METHOD_3 ( ) ) ; return result ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",2963
"public void METHOD_1 ( TYPE_1 VAR_1 , float VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . get ( VAR_1 ) ; TYPE_3 VAR_5 = VAR_6 . get ( VAR_1 ) ; VAR_7 . METHOD_2 ( VAR_8 . x , VAR_8 . y ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , float VAR_2 ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete Invocation']",2964
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_3 ( this ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) . build ( ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_3 ( this ) . METHOD_3 ( VAR_1 ) . build ( ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2965
"public int METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = java.lang.Integer . METHOD_2 ( VAR_4 [ VAR_1 ] [ VAR_2 ] . substring ( 0 , INT_1 ) ) ; return VAR_3 ; }","public java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 ) { java.lang.String VAR_3 = VAR_4 [ VAR_1 ] [ VAR_2 ] . substring ( 0 , INT_1 ) ; return VAR_3 ; }","['Update TypeReference', 'Update TypeReference', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2968
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( this , STRING_1 , VAR_1 ) . show ( ) ; android.content.Intent VAR_2 = new android.content.Intent ( ) ; VAR_2 . METHOD_3 ( STRING_2 ) ; METHOD_4 ( VAR_2 ) ; }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( this , STRING_1 , VAR_1 ) . show ( ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",2969
"public long METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = java.lang.String.format ( STRING_1 , VAR_1 ) ; TYPE_1 query = VAR_3 . METHOD_2 ( VAR_2 ) ; return ( ( long ) ( query . METHOD_3 ( ) ) ) ; }","public long METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = java.lang.String.format ( STRING_1 , VAR_1 ) ; TYPE_1 query = VAR_3 . METHOD_2 ( VAR_2 ) ; long number = ( ( long ) ( query . METHOD_3 ( ) ) ) ; return number ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",2972
"public java.lang.String METHOD_1 ( ) { return getString ( VAR_1 , TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; }","public java.lang.String METHOD_1 ( ) { java.lang.String value = getString ( VAR_1 , TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; return value ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",2973
"public void METHOD_1 ( android.view.View view ) { METHOD_2 ( view ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_3 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_4 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { METHOD_2 ( view ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_4 ( intent ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",2974
public static void main ( java.lang.String [ ] a ) { java.util.ArrayList < TYPE_1 > VAR_1 = new TYPE_2 ( ) . METHOD_1 ( true ) ; java.lang.System.out.println ( VAR_2 . size ( ) ) ; },public static void main ( java.lang.String [ ] a ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2975
public void METHOD_1 ( TYPE_1 VAR_1 ) { int status = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 . add ( TYPE_2 . METHOD_4 ( ) ) ; if ( status == 1 ) { METHOD_5 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 . add ( TYPE_2 . METHOD_4 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",2976
public boolean METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { boolean VAR_2 = VAR_1 . METHOD_2 ( this ) ; METHOD_3 ( null ) ; return VAR_2 ; } return false ; },public boolean METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_2 ( this ) ; } return false ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",2977
public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; return VAR_2 ; },"['Update ConstructorCall', 'Move VariableRead', 'Delete VariableRead', 'Delete Invocation']",2978
"public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( this . METHOD_2 ( ) ) ; java.util.Collections.sort ( VAR_1 , new TYPE_2 ( ) ) ; return VAR_1 ; }","public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = this . METHOD_2 ( ) ; java.util.Collections.sort ( VAR_1 , new TYPE_2 ( ) ) ; return VAR_1 ; }","['Move Invocation', 'Delete ConstructorCall']",2979
public float METHOD_1 ( ) { java.util.List < TYPE_1 > p = VAR_1 . values ( ) . iterator ( ) . METHOD_2 ( ) ; return VAR_2 . get ( ( ( VAR_2 . size ( ) ) - 1 ) ) . VAR_3 ; },public float METHOD_1 ( ) { return VAR_1 . values ( ) . iterator ( ) . METHOD_2 ( ) . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) . VAR_3 ; },"['Move Invocation', 'Update TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",2980
"public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( this , 1 ) ; VAR_2 . show ( getActivity ( ) . METHOD_3 ( ) , STRING_1 ) ; }","public void METHOD_1 ( android.view.View view ) { new TYPE_2 ( ) . show ( getActivity ( ) . METHOD_3 ( ) , STRING_1 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess']",2981
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . assertNotNull ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 . assertThat ( VAR_2 , TYPE_2 . METHOD_3 ( STRING_1 ) ) ; }",public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_3 . assertNotNull ( VAR_1 . METHOD_2 ( ) ) ; },"['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2982
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( new TYPE_3 ( ) ) ; return new TYPE_2 ( ) ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation']",2983
"public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 item ) throws TYPE_4 { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 , 0 ) ; java.util.List < TYPE_1 > VAR_4 = VAR_2 . METHOD_1 ( item . METHOD_3 ( ) ) ; return VAR_4 ; }","public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 item ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_1 , 0 ) . METHOD_1 ( item . METHOD_3 ( ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",2984
"public static boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String value ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , value ) ; if ( ( VAR_3 . length ( ) ) == 0 ) return false ; return java.lang.Boolean . METHOD_3 ( VAR_2 ) ; }","public static boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String value ) { return java.lang.Boolean . METHOD_3 ( TYPE_1 . METHOD_2 ( VAR_1 , value ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",2985
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; int VAR_2 = METHOD_3 ( ) ; },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable']",2986
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( this . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) ; VAR_1 . METHOD_4 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = ( ( TYPE_1 ) ( METHOD_3 ( VAR_2 ) ) ) ; VAR_1 . METHOD_4 ( ) ; },"['Insert Assignment', 'Insert FieldWrite', 'Move Invocation', 'Insert TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2987
"private void METHOD_1 ( java.lang.Integer VAR_1 ) { java.util.List < java.lang.Integer > VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; }",private void METHOD_1 ( java.lang.Integer VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",2988
public java.lang.String METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ( - 1 ) ) ; TYPE_1 text = new TYPE_1 ( ) ; VAR_1 . append ( STRING_1 ) ; METHOD_3 ( text ) ; return ( VAR_1 . toString ( ) ) + STRING_2 ; },public java.lang.String METHOD_1 ( ) throws java.lang.Exception { return null ; },"['Insert Literal', 'Delete Literal', 'Delete UnaryOperator', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2989
public static void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; },public static void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable']",2990
public void METHOD_1 ( ) { TYPE_1 item = this . METHOD_2 ( VAR_1 ) ; item . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; },public void METHOD_1 ( ) { this . METHOD_2 ( VAR_1 ) ; this . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; },"['Move Invocation', 'Insert ThisAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",2991
private void METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( STRING_1 ) ) ) ; VAR_3 . init ( ) ; },private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( STRING_1 ) ) ) ; VAR_3 . init ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Delete FieldWrite', 'Delete Assignment']",2993
"public int METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . query ( VAR_3 , VAR_4 , null , null , null , null , null ) ; int count = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; return count ; }","public int METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . query ( VAR_3 , VAR_4 , null , null , null , null , null ) ; return VAR_1 . METHOD_2 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",2995
public void METHOD_1 ( ) { TYPE_1 node = VAR_1 ; while ( node != null ) { METHOD_2 ( ( ( java.lang.String ) ( VAR_2 . getValue ( ) ) ) ) ; node = node . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { TYPE_1 node = VAR_1 . METHOD_3 ( ) ; while ( node != null ) { METHOD_2 ( ( ( java.lang.String ) ( VAR_2 . getValue ( ) ) ) ) ; node = node . METHOD_3 ( ) ; } },"['Insert Invocation', 'Insert TypeAccess', 'Delete FieldRead']",2996
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; if ( VAR_1 != null ) { METHOD_2 ( ) . METHOD_4 ( ) . remove ( VAR_1 ) . commit ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { METHOD_2 ( ) . METHOD_4 ( ) . remove ( VAR_1 ) . commit ( ) ; } },"['Insert Parameter', 'Move TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",3000
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_1 ; VAR_3 . METHOD_2 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3001
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_3 . METHOD_5 ( ) ; VAR_4 . commit ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_4 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",3002
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this ) ; VAR_1 . METHOD_2 ( INT_1 , INT_2 , INT_1 , 0 , INT_3 , INT_4 ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( this ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3003
"public void METHOD_1 ( int a , int b ) { int VAR_1 = a - b ; int VAR_2 = a - b ; double c = FLOAT_1 ; double VAR_3 = c - a ; }","public void METHOD_1 ( int a , int b ) { int VAR_1 = a - b ; int VAR_2 = a - b ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete LocalVariable']",3004
"public int METHOD_1 ( int [ ] [ ] VAR_1 ) { java.util.Map < java.lang.String , java.lang.Integer > VAR_2 = new java.util.HashMap < > ( ) ; return METHOD_1 ( VAR_1 , 0 , 0 , VAR_2 ) ; }",public int METHOD_1 ( int [ ] [ ] VAR_1 ) { return 0 ; },"['Move Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete VariableRead', 'Delete Invocation']",3005
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; intent . METHOD_2 ( STRING_1 , VAR_4 . getId ( ) ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3006
protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = this . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_3 class ) . to ( VAR_4 class ) . METHOD_4 ( VAR_2 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_3 ( VAR_3 class ) . to ( VAR_4 class ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3007
private static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 method = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_2 ( ) ; if ( ! ( TYPE_3 . METHOD_4 ( method ) ) ) { VAR_1 . METHOD_5 ( VAR_2 ) ; } },private static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_5 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",3008
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , boolean VAR_3 ) { TYPE_1 VAR_4 = super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; METHOD_2 ( new TYPE_4 ( VAR_1 , VAR_2 ) ) ; return VAR_4 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , boolean VAR_3 ) { METHOD_2 ( new TYPE_4 ( VAR_1 , VAR_2 ) ) ; return super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3009
"public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; TYPE_1 VAR_2 = METHOD_2 ( ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_3 , VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_2 ) ; }",public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; METHOD_3 ( ) ; METHOD_4 ( VAR_3 ) ; METHOD_4 ( VAR_4 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",3010
public int getTime ( ) { TYPE_1 VAR_1 = get ( ) ; java.lang.Integer result = VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ; if ( result == null ) { return - 1 ; } return result ; },public int getTime ( ) { TYPE_1 VAR_1 = get ( ) ; return VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3011
"public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; VAR_3 . assertEquals ( VAR_2 , METHOD_2 ( VAR_1 ) ) ; }","public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_2 ; java.lang.String VAR_2 = STRING_1 ; VAR_3 . assertEquals ( VAR_2 , METHOD_2 ( VAR_1 ) ) ; }","['Move LocalVariable', 'Update LocalVariable', 'Update LocalVariable']",3013
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , VAR_2 ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { METHOD_3 ( new android.content.Intent ( this , VAR_1 class ) ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3014
"public void add ( TYPE_1 VAR_1 ) { TYPE_2 < TYPE_1 > node = new TYPE_2 < TYPE_1 > ( null , null , VAR_1 ) ; }",public void add ( int value ) { },"['Update Parameter', 'Update TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Literal', 'Delete Literal', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",3015
"public int getInt ( java.lang.String key , int VAR_1 ) { return METHOD_1 ( ) . getInt ( key , VAR_1 ) ; }","public int getInt ( java.lang.String key , int VAR_1 ) { int value = METHOD_1 ( ) . getInt ( key , VAR_1 ) ; return value ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",3016
public void METHOD_1 ( ) { int id = ( ( TYPE_1 ) ( java.lang.Thread . METHOD_2 ( ) ) ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( id ) ; ( count ) ++ ; VAR_1 . METHOD_5 ( id ) ; },public void METHOD_1 ( ) { ( count ) ++ ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3017
public void METHOD_1 ( java.lang.String VAR_1 ) { android.content.Intent intent = new android.content.Intent ( VAR_2 ) ; METHOD_2 ( intent ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3018
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; return VAR_1 ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = VAR_2 ; VAR_1 . METHOD_2 ( VAR_3 ) ; return VAR_1 ; },"['Insert FieldRead', 'Delete ConstructorCall', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",3020
"public java.lang.String METHOD_1 ( char VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = METHOD_2 ( ) ; if ( ! ( VAR_3 . isEmpty ( ) ) ) { return TYPE_2 . METHOD_3 ( METHOD_2 ( ) , VAR_1 ) ; } else { return STRING_1 ; } }","public java.lang.String METHOD_1 ( char VAR_1 ) { return TYPE_2 . METHOD_3 ( METHOD_2 ( ) , VAR_1 ) ; }","['Move Return', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",3021
"public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; int size = VAR_3 . size ( ) ; VAR_4 . assertEquals ( STRING_1 , INT_1 , size ) ; }","public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; int size = VAR_3 . size ( ) ; VAR_4 . assertEquals ( STRING_1 , INT_1 , size ) ; }","['Move Invocation', 'Delete Invocation']",3023
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( STRING_1 , VAR_3 ) ; METHOD_3 ( intent ) ; METHOD_4 ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( new android.content.Intent ( this , VAR_2 class ) ) ; METHOD_4 ( ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3025
public double METHOD_1 ( ) { double VAR_1 = METHOD_2 ( ) ; double VAR_2 = METHOD_3 ( ) ; double result = METHOD_4 ( ( VAR_2 - VAR_1 ) ) ; if ( result == 0.0 ) return FLOAT_1 * ( VAR_3 ) ; else return result ; },public double METHOD_1 ( ) { double VAR_1 = METHOD_2 ( ) ; double VAR_2 = METHOD_3 ( ) ; return METHOD_4 ( ( VAR_2 - VAR_1 ) ) ; },"['Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",3026
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.io.File VAR_2 = new java.io.File ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_4 . delete ( ) ; VAR_5 . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_5 . METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3027
"private static TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) . METHOD_2 ( VAR_2 class , new TYPE_4 ( ) ) . METHOD_2 ( VAR_3 class , new TYPE_5 ( ) ) . METHOD_3 ( ) ; return new TYPE_1 ( VAR_1 ) ; }","private static TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) . METHOD_2 ( VAR_2 class , new TYPE_4 ( ) ) . METHOD_3 ( ) ; return new TYPE_1 ( VAR_1 ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete ConstructorCall', 'Delete Invocation']",3029
"public static void main ( java.lang.String [ ] args ) { TYPE_1 TYPE_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 = TYPE_2 . METHOD_1 ( VAR_3 , VAR_1 ) ; java.lang.System.out.println ( VAR_3 ) ; }",public static void main ( java.lang.String [ ] args ) { TYPE_1 TYPE_2 = new TYPE_1 ( ) ; java.lang.System.out.println ( TYPE_2 . METHOD_1 ( VAR_3 ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess', 'Delete TypeAccess']",3031
public static int METHOD_1 ( java.util.Scanner VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; int VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; return VAR_2 ; },public static int METHOD_1 ( java.util.Scanner VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; return VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3032
"public boolean METHOD_1 ( java.lang.String query ) { METHOD_2 ( query ) ; METHOD_3 ( query ) ; android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_1 class ) ; METHOD_4 ( intent ) ; return false ; }",public boolean METHOD_1 ( java.lang.String query ) { METHOD_2 ( query ) ; METHOD_3 ( query ) ; return false ; },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3033
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( args ) ; VAR_2 . METHOD_2 ( true ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( true ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } },['Delete FieldRead'],3034
void METHOD_1 ( ) { if ( ( getActivity ( ) ) != null ) { TYPE_1 VAR_1 = ( ( TYPE_2 ) ( getActivity ( ) ) ) . VAR_1 ; if ( VAR_1 != null ) VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } },void METHOD_1 ( ) { ( ( TYPE_2 ) ( getActivity ( ) ) ) . VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Insert Invocation', 'Insert Invocation', 'Move FieldRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If']",3035
public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_3 . length ( ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { METHOD_2 ( VAR_1 . METHOD_3 ( i ) ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 ; i < ( VAR_3 . length ( ) ) ; i ++ ) { METHOD_2 ( VAR_1 . METHOD_3 ( i ) ) ; } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3036
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( this . METHOD_4 ( ) ) ; return VAR_1 . METHOD_5 ( VAR_2 ) ; },public TYPE_1 METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( this . METHOD_4 ( ) ) . METHOD_5 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",3037
"private void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; }","private void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; }","['Insert ThisAccess', 'Delete Invocation']",3039
"public void METHOD_1 ( int id ) throws TYPE_1 { int VAR_1 = METHOD_2 ( id ) ; METHOD_3 ( VAR_2 , VAR_1 ) ; VAR_3 . remove ( VAR_1 ) ; }","public void METHOD_1 ( int id ) throws TYPE_1 { METHOD_3 ( VAR_2 , id ) ; VAR_3 . remove ( id ) ; }","['Move VariableRead', 'Update VariableRead', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3040
"private java.lang.String METHOD_1 ( boolean VAR_1 ) throws TYPE_1 , java.io.IOException { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_3 . METHOD_2 ( ) ) ) ; java.lang.String VAR_4 = VAR_2 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_4 ) ; return VAR_4 ; }","private java.lang.String METHOD_1 ( boolean VAR_1 ) throws TYPE_1 , java.io.IOException { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_3 . METHOD_2 ( ) ) ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3041
"void METHOD_1 ( ) throws java.io.IOException , java.lang.ClassNotFoundException { METHOD_2 ( ( ( VAR_1 ) + STRING_1 ) ) ; java.lang.String pattern = STRING_2 ; }","void METHOD_1 ( ) throws java.io.IOException , java.lang.ClassNotFoundException { METHOD_2 ( ( ( VAR_1 ) + STRING_1 ) ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",3042
"public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String content ) { java.util.Random VAR_2 = new java.util.Random ( ) ; int a = VAR_2 . METHOD_2 ( ) ; if ( a > INT_1 ) { return true ; } else { return false ; } }","public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String content ) { }","['Update TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",3043
public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_1 ( ) ; },public void METHOD_1 ( android.view.View view ) { VAR_2 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3045
public TYPE_1 METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; boolean VAR_3 = ( VAR_2 ) && ( ( VAR_4 . size ( ) ) > 0 ) ; view . METHOD_2 ( VAR_3 ) ; return this ; },public TYPE_1 METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; view . METHOD_2 ( VAR_2 ) ; return this ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",3046
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( context , VAR_1 class ) ; intent . METHOD_2 ( VAR_2 ) ; context . METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { context . METHOD_3 ( new android.content.Intent ( context , VAR_1 class ) ) ; }","['Insert Invocation', 'Move FieldRead', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3049
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_3 . put ( VAR_1 , VAR_2 ) ; VAR_4 . start ( ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . put ( VAR_1 , new TYPE_1 ( VAR_1 ) ) ; VAR_4 . start ( ) ; return VAR_2 ; }","['Move Invocation', 'Move ConstructorCall', 'Delete VariableRead']",3051
private static int METHOD_1 ( int a ) { int b = a > > INT_1 ; return ( a ^ b ) - b ; },private static int METHOD_1 ( int a ) { return ( a ^ ( a > > INT_1 ) ) + ( ( a > > INT_1 ) & 1 ) ; },"['Update BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Move VariableRead', 'Insert BinaryOperator', 'Move BinaryOperator', 'Insert Literal', 'Insert VariableRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead']",3053
"public TYPE_1 < java.util.List < TYPE_2 > > get ( ) { VAR_1 . METHOD_1 ( STRING_1 ) ; java.util.List < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( ) ; return new TYPE_3 ( VAR_3 . METHOD_2 ( ) , VAR_4 ) ; }","public TYPE_1 < java.util.List < TYPE_2 > > get ( ) { VAR_1 . METHOD_1 ( STRING_1 ) ; return new TYPE_3 ( VAR_3 . METHOD_2 ( ) , VAR_4 ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",3054
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 . getId ( ) ) ; TYPE_2 . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_3 . getId ( ) ) ; },public void METHOD_1 ( ) { java.lang.Long id = null ; VAR_2 . METHOD_2 ( id ) ; TYPE_2 . METHOD_3 ( VAR_4 ) . METHOD_4 ( id ) ; },"['Update LocalVariable', 'Update TypeReference', 'Insert Literal', 'Insert VariableRead', 'Insert VariableRead', 'Delete ConstructorCall', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",3057
public int METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; return VAR_1 >= 0 ? VAR_1 : 0 ; },public int METHOD_1 ( ) { return ( METHOD_2 ( ) ) == null ? 0 : METHOD_2 ( ) ; },"['Update BinaryOperator', 'Move Invocation', 'Insert Invocation', 'Update Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead']",3058
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < TYPE_1 > list = VAR_2 . METHOD_1 ( VAR_1 ) ; return list ; },public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3059
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_3 . assertNotNull ( VAR_1 ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3061
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { double VAR_2 = java.lang.Math.pow ( INT_1 , VAR_1 . METHOD_2 ( ) ) ; java.lang.String VAR_3 = ( STRING_1 + VAR_2 ) + ""\n"" ; return null ; }",public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return null ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete BinaryOperator', 'Delete LocalVariable']",3062
public int METHOD_1 ( ) { int count = super . METHOD_1 ( ) ; if ( count == 0 ) return count ; return count + 1 ; },public int METHOD_1 ( ) { return ( super . METHOD_1 ( ) ) + 1 ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3063
public void delete ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_4 . delete ( VAR_2 ) ; },public void delete ( java.lang.String VAR_1 ) { VAR_4 . delete ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3064
"public java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) { TYPE_2 query = VAR_2 . METHOD_2 ( STRING_1 ) ; query . METHOD_3 ( STRING_2 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = query . METHOD_4 ( ) ; return VAR_3 ; }","public java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) { TYPE_2 query = VAR_2 . METHOD_2 ( STRING_1 ) ; query . METHOD_3 ( STRING_2 , VAR_1 ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",3065
public TYPE_1 get ( final java.lang.Object key ) { TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( VAR_3 . toString ( ) ) ; if ( VAR_1 . METHOD_2 ( ) ) return null ; return ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( VAR_4 ) ) ) ; },public TYPE_1 get ( final java.lang.Object key ) { return ( ( TYPE_1 ) ( VAR_2 . METHOD_1 ( VAR_3 . toString ( ) ) . METHOD_3 ( VAR_4 ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3068
"public void METHOD_1 ( ) throws java.lang.Exception { java.io.File file = null ; new TYPE_1 ( file , VAR_1 ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { new TYPE_1 ( null , VAR_1 ) ; }","['Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3070
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; android.view.View VAR_1 = METHOD_3 ( ) . METHOD_4 ( ) ; int VAR_2 = VAR_3 ; VAR_1 . METHOD_5 ( VAR_2 ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",3073
public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String message = VAR_2 . getText ( ) . toString ( ) ; if ( ( message != null ) && ( ! ( VAR_3 . equals ( STRING_1 ) ) ) ) METHOD_2 ( message ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3074
public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { return false ; } return VAR_2 . METHOD_2 ( VAR_1 ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . get ( VAR_1 ) . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3077
"public void METHOD_1 ( TYPE_1 values ) { VAR_1 . i ( STRING_1 , STRING_2 ) ; android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; METHOD_2 ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 values ) { VAR_1 . i ( STRING_1 , STRING_2 ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3078
private boolean METHOD_1 ( short VAR_1 ) { if ( VAR_2 . contains ( VAR_1 ) ) { TYPE_1 VAR_3 = this . VAR_4 . METHOD_2 ( VAR_1 ) ; return VAR_3 . METHOD_3 ( ) ; } return false ; },private boolean METHOD_1 ( short VAR_3 ) { return VAR_2 . contains ( VAR_3 ) ; },"['Update Parameter', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete Literal']",3080
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { return VAR_3 . get ( VAR_1 ) ; } TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; return VAR_4 ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { return VAR_3 . get ( VAR_1 ) ; } return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3081
"public void METHOD_1 ( ) { java.lang.String position = STRING_1 ; TYPE_1 VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , position ) ; assertEquals ( STRING_2 , position , VAR_1 . METHOD_3 ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , STRING_1 ) ; assertEquals ( STRING_2 , STRING_1 , VAR_1 . METHOD_3 ( ) ) ; }","['Insert TypeAccess', 'Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",3082
"public java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 , int VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; return VAR_3 ; }","public java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 , int VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; return VAR_3 ; }","['Move Invocation', 'Insert ConstructorCall', 'Insert VariableRead']",3084
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = ( VAR_3 . remove ( VAR_1 ) ) != null ; if ( VAR_3 . isEmpty ( ) ) { METHOD_2 ( ) ; } return VAR_2 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . remove ( VAR_1 ) ; if ( VAR_3 . isEmpty ( ) ) { METHOD_2 ( ) ; } },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete Literal', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",3085
public TYPE_1 METHOD_1 ( ) { float VAR_1 = ( ( float ) ( ( ( this . getValue ( ) ) - INT_1 ) / FLOAT_1 ) ) ; return new TYPE_2 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall']",3086
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; VAR_4 . setText ( STRING_1 ) ; java.lang.System.out.println ( STRING_1 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",3087
public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) ; java.lang.Object token = METHOD_3 ( ) ; return token ; },public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) ; return METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3088
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { TYPE_3 . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_1 . METHOD_3 ( STRING_1 ) . toLowerCase ( ) ; TYPE_4 . METHOD_4 ( VAR_3 ) ; VAR_2 . METHOD_5 ( STRING_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { TYPE_3 . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_1 . METHOD_3 ( STRING_1 ) ; TYPE_4 . METHOD_4 ( VAR_3 ) ; VAR_2 . METHOD_5 ( STRING_2 ) ; }","['Move Invocation', 'Delete Invocation']",3089
"public void METHOD_1 ( float VAR_1 ) { if ( ( target ) != null ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( position , VAR_3 . position ) ; VAR_4 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; } }","public void METHOD_1 ( float VAR_1 ) { if ( ( target ) != null ) VAR_4 = TYPE_1 . METHOD_2 ( position , VAR_3 . position ) ; }","['Insert Assignment', 'Insert FieldWrite', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",3090
public void METHOD_1 ( ) throws TYPE_1 { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_2 . size ( ) ) > 0 ) ) { METHOD_3 ( METHOD_2 ( ) ) ; } },public void METHOD_1 ( ) throws TYPE_1 { METHOD_3 ( METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",3091
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( STRING_1 ) ; long VAR_2 = VAR_3 . METHOD_3 ( STRING_2 , INT_1 , STRING_3 ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_4 class ) ; METHOD_4 ( intent ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( STRING_1 ) ; long VAR_2 = VAR_3 . METHOD_3 ( STRING_2 , INT_1 , STRING_3 ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3094
public static java.io.File [ ] METHOD_1 ( java.io.File VAR_1 ) { java.io.File [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_2 ) ; return VAR_2 ; },public static java.io.File [ ] METHOD_1 ( java.io.File VAR_1 ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3095
"public TYPE_1 METHOD_1 ( java.lang.String start , java.lang.String end ) { java.util.ArrayList < TYPE_1 > VAR_1 = METHOD_2 ( start , end , 1 ) ; return VAR_2 . get ( 0 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String start , java.lang.String end ) { return METHOD_2 ( start , end , 1 ) . get ( 0 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",3096
public java.lang.String METHOD_1 ( java.lang.Integer VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_3 . remove ( VAR_2 ) ; } return STRING_1 ; },public java.lang.String METHOD_1 ( java.lang.Integer VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( new java.lang.Long ( VAR_1 ) ) ; if ( VAR_2 != null ) { VAR_3 . remove ( VAR_2 ) ; } return STRING_1 ; },"['Insert ConstructorCall', 'Move VariableRead']",3099
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 ; VAR_2 = VAR_2 . METHOD_2 ( ) ; ( VAR_3 ) -- ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { VAR_2 = VAR_2 . METHOD_2 ( ) ; ( VAR_3 ) -- ; return VAR_2 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3100
"private TYPE_1 METHOD_1 ( java.lang.String name ) { java.util.HashMap < java.lang.String , TYPE_1 > VAR_1 = this . VAR_2 . get ( this . VAR_3 . METHOD_2 ( ) ) ; if ( VAR_1 != null ) return VAR_4 . get ( name ) ; else return null ; }",private TYPE_1 METHOD_1 ( java.lang.String name ) { return this . VAR_2 . get ( this . VAR_3 . METHOD_2 ( ) ) . get ( name ) ; },"['Insert Return', 'Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",3101
"public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 ) ; return VAR_3 . getString ( ( STRING_2 + ( VAR_4 ) ) , null ) ; }",public java.lang.String METHOD_1 ( ) { return null ; },"['Move Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",3102
"public void METHOD_1 ( ) { VAR_1 . setText ( STRING_1 ) ; TYPE_1 . METHOD_2 ( context ) ; android.content.Intent i = new android.content.Intent ( context , VAR_2 class ) ; context . METHOD_3 ( i ) ; }",public void METHOD_1 ( ) { VAR_1 . setText ( STRING_1 ) ; },"['Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",3103
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , false , true ) ; VAR_2 . METHOD_3 ( null ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( VAR_4 , false , true ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",3105
"private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; boolean VAR_3 = VAR_4 . METHOD_3 ( ) ; java.lang.String VAR_5 = VAR_6 . toString ( VAR_1 , VAR_3 ) ; VAR_7 . setText ( VAR_5 ) ; }",private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; java.lang.String VAR_5 = VAR_6 . toString ( VAR_1 ) ; VAR_7 . setText ( VAR_5 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3106
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.Object VAR_1 = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_1 , this . VAR_2 . METHOD_3 ( ) . get ( VAR_1 ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { java.lang.Object VAR_1 = new java.lang.String ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , this . VAR_2 . METHOD_3 ( ) . get ( VAR_1 ) ) ; }","['Insert ConstructorCall', 'Delete FieldRead']",3107
public void METHOD_1 ( TYPE_1 data ) { VAR_1 . METHOD_1 ( data ) ; int VAR_2 = METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_2 ) ; TYPE_2 . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 data ) { VAR_1 . METHOD_1 ( data ) ; TYPE_2 . METHOD_3 ( METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",3108
"public byte [ ] METHOD_1 ( java.lang.String id ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; METHOD_1 ( id , VAR_1 ) ; return VAR_1 . METHOD_2 ( ) ; }","public byte [ ] METHOD_1 ( java.lang.String id ) throws java.io.IOException { return METHOD_1 ( id , null ) ; }","['Move Invocation', 'Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",3109
"protected static int METHOD_1 ( double VAR_1 , double num ) { int VAR_2 = ( ( int ) ( TYPE_1 . METHOD_2 ( ( num / VAR_1 ) ) ) ) ; return VAR_2 ; }","protected static int METHOD_1 ( double VAR_1 , double num ) { int VAR_2 = ( ( int ) ( num / VAR_1 ) ) ; return VAR_2 ; }","['Move BinaryOperator', 'Move TypeReference', 'Delete TypeAccess', 'Delete Invocation']",3111
public byte [ ] METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( null != VAR_1 ) return VAR_1 . METHOD_4 ( ) ; else return null ; },public byte [ ] METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; },"['Insert Return', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",3112
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( this ) ; java.util.List < TYPE_1 > list = java.util.Arrays.asList ( VAR_2 ) ; VAR_1 . METHOD_3 ( list ) ; VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3113
"public java.lang.String index ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_1 ( STRING_1 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_2 , STRING_3 ) ; return STRING_4 ; }","public java.lang.String index ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( STRING_2 , STRING_3 ) ; return STRING_4 ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3114
"private void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 context = getContext ( ) ; if ( context == null ) return ; if ( ! ( TYPE_2 . METHOD_1 ( context , VAR_1 ) ) ) { METHOD_2 ( VAR_2 ) ; } }","private void METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( TYPE_2 . METHOD_1 ( getContext ( ) , VAR_1 ) ) ) { METHOD_2 ( VAR_2 ) ; } }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3116
public int METHOD_1 ( ) throws java.io.IOException { int VAR_1 = VAR_2 . METHOD_1 ( ) ; if ( VAR_1 != ( - 1 ) ) { METHOD_2 ( 1 ) ; } return VAR_1 ; },public int METHOD_1 ( ) throws java.io.IOException { return METHOD_2 ( VAR_2 . METHOD_1 ( ) ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",3117
"private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 ) ; if ( VAR_2 == null ) { return null ; } return new TYPE_1 ( VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; }","private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( TYPE_3 . METHOD_2 ( VAR_3 ) , VAR_4 , VAR_5 , VAR_6 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3120
public boolean METHOD_1 ( ) { boolean result = VAR_1 . METHOD_1 ( ) ; if ( ! result ) { METHOD_2 ( ) ; } return result ; },public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",3121
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ; if ( VAR_3 ) { METHOD_5 ( VAR_1 ) ; } return VAR_2 ; },private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_3 ) { METHOD_5 ( VAR_1 ) ; } return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3123
"public TYPE_1 METHOD_1 ( java.lang.String error ) { TYPE_2 content = VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) , error ) ; return METHOD_5 ( VAR_2 . METHOD_2 ( content ) ) ; }",public TYPE_1 METHOD_1 ( java.lang.String error ) { TYPE_2 content = VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 . METHOD_2 ( content ) ) ; },['Delete VariableRead'],3124
public void METHOD_1 ( ) throws java.io.IOException { java.lang.String filename = STRING_1 ; TYPE_1 . METHOD_2 ( filename ) ; },public void METHOD_1 ( ) throws java.io.IOException { java.lang.String filename = STRING_1 ; java.io.File f = TYPE_1 . METHOD_2 ( filename ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation']",3125
void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; },void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { },"['Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3126
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) throws TYPE_3 { TYPE_4 VAR_3 = VAR_1 . METHOD_2 ( VAR_2 ) ; if ( null == VAR_3 ) return null ; return VAR_3 . METHOD_3 ( ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) throws TYPE_3 { return VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3127
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( TYPE_3 . METHOD_3 ( this ) ) ) ; VAR_3 . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3128
public static void main ( java.lang.String [ ] args ) { if ( ( args.length ) == 0 ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; } else { TYPE_1 VAR_1 = new TYPE_1 ( args ) ; } },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; },"['Move LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete Block', 'Delete If']",3129
public boolean METHOD_1 ( ) { boolean result = ( ( ( VAR_1 ) != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) && ( ! ( METHOD_2 ( ) ) ) ; return result ; },public boolean METHOD_1 ( ) { return ( ( ( VAR_1 ) != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) && ( ! ( METHOD_2 ( ) ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3130
"public TYPE_1 METHOD_1 ( java.lang.String event ) { TYPE_2 < TYPE_1 > query = VAR_1 . METHOD_2 ( STRING_1 , VAR_2 class ) . METHOD_3 ( STRING_2 , java.lang.Long.parseLong ( event ) ) ; return query . METHOD_4 ( ) ; }","public TYPE_1 METHOD_1 ( java.lang.String event ) { TYPE_2 < TYPE_1 > query = VAR_1 . METHOD_2 ( STRING_1 , VAR_2 class ) . METHOD_3 ( STRING_2 , event ) ; return query . METHOD_4 ( ) ; }","['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",3132
"public void METHOD_1 ( ) { java.util.Date VAR_1 = new java.util.Date ( INT_1 , INT_2 , INT_3 , INT_4 , INT_5 , INT_6 ) ; assertEquals ( VAR_2 . METHOD_2 ( STRING_1 ) , VAR_1 ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3133
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = new TYPE_3 ( ) ; return VAR_1 ; },public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",3134
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( this . view ) ; VAR_1 . METHOD_3 ( this . VAR_2 ) ; this . VAR_3 . add ( VAR_1 , VAR_4 ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",3136
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = new TYPE_2 ( VAR_1 ) . getString ( VAR_3 ) ; return ( VAR_4 . isEmpty ( ) ) && ( ( VAR_4 . length ( ) ) > 0 ) ; },public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return new TYPE_2 ( VAR_1 ) . getString ( VAR_3 ) . isEmpty ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",3138
"private void METHOD_1 ( java.lang.String VAR_1 ) { java.util.HashMap < java.lang.String , java.lang.String > VAR_2 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; VAR_3 . put ( VAR_4 , VAR_1 ) ; VAR_5 . METHOD_2 ( VAR_1 , VAR_6 , VAR_2 ) ; }","private void METHOD_1 ( java.lang.String VAR_1 ) { VAR_5 . METHOD_2 ( VAR_1 , VAR_6 , null , VAR_1 ) ; }","['Insert Literal', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3139
"public boolean METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = null ; VAR_1 = new TYPE_1 ( VAR_2 . METHOD_3 ( ) , VAR_3 . getName ( ) ) ; boolean VAR_4 = METHOD_4 ( ) ; METHOD_5 ( ) ; return VAR_4 ; }","public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = null ; VAR_1 = new TYPE_1 ( VAR_2 . METHOD_3 ( ) , VAR_3 . getName ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",3140
"public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 . METHOD_2 ( null , STRING_1 , STRING_2 , VAR_3 , VAR_4 ) ; if ( VAR_2 == ( VAR_5 ) ) { METHOD_3 ( ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",3143
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) . METHOD_2 ( ) ; view . METHOD_3 ( VAR_2 ) ; },"public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { view . METHOD_3 ( VAR_2 ) ; }","['Insert Parameter', 'Move TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",3145
public boolean METHOD_1 ( ) { boolean VAR_1 = ! ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) ) ; VAR_4 . info ( ( STRING_1 + VAR_1 ) ) ; return VAR_1 ; },public boolean METHOD_1 ( ) { VAR_4 . info ( ( STRING_1 + ( ! ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) ) ) ) ) ; return ! ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) ) ; },"['Move UnaryOperator', 'Insert UnaryOperator', 'Insert Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",3146
private void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( ) ; },private void METHOD_1 ( TYPE_1 event ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3150
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { boolean VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 ) return ; VAR_5 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_5 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",3152
void METHOD_1 ( ) { double target = ( VAR_1 ) / INT_1 ; if ( ( VAR_2 ) != target ) { if ( ( VAR_3 ) || ( TYPE_1 . METHOD_2 ( STRING_1 ) ) ) { VAR_2 = target ; VAR_3 = true ; } } },void METHOD_1 ( ) { if ( ( VAR_2 ) != ( VAR_1 ) ) { if ( ( VAR_3 ) || ( TYPE_1 . METHOD_2 ( STRING_1 ) ) ) { VAR_2 = VAR_1 ; VAR_3 = true ; } } },"['Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead']",3153
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 , this ) ; } VAR_4 . i ( STRING_1 , STRING_2 ) ; }",public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",3154
public TYPE_1 execute ( ) throws TYPE_2 { java.lang.String query = METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) . execute ( query ) ; return null ; },public TYPE_1 execute ( ) throws TYPE_2 { return null ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3155
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; METHOD_2 ( intent ) ; METHOD_3 ( ) ; }",public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3156
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Exception VAR_2 ) { TYPE_1 info = TYPE_1 . METHOD_2 ( VAR_1 ) ; java.util.Set < TYPE_2 > VAR_3 = METHOD_3 ( ) ; for ( TYPE_2 listener : VAR_3 ) { listener . METHOD_1 ( info , VAR_2 ) ; } }","public void METHOD_1 ( TYPE_1 info , java.lang.Exception VAR_2 ) { java.util.Set < TYPE_2 > VAR_3 = METHOD_3 ( ) ; for ( TYPE_2 listener : VAR_3 ) { listener . METHOD_1 ( info , VAR_2 ) ; } }","['Update Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",3157
public TYPE_1 METHOD_1 ( java.lang.Class type ) { TYPE_1 n = METHOD_2 ( ) ; while ( ( ! ( type . METHOD_3 ( n ) ) ) && ( n != null ) ) { n = n . METHOD_2 ( ) ; } return n ; },public TYPE_1 METHOD_1 ( java.lang.Class type ) { TYPE_1 n = this ; while ( ( ! ( type . METHOD_3 ( n ) ) ) && ( n != null ) ) { n = n . METHOD_2 ( ) ; } return n ; },"['Insert ThisAccess', 'Delete Invocation']",3159
public TYPE_1 METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = new java.util.ArrayList < TYPE_2 > ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_1 response = new TYPE_1 ( ) ; response . METHOD_3 ( VAR_1 ) ; return response ; },public java.util.Collection < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = new java.util.ArrayList < TYPE_2 > ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_1 ) ; return VAR_1 ; },"['Update TypeReference', 'Insert TypeReference', 'Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3160
"void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { TYPE_2 . METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) ) ; TYPE_1 VAR_3 = VAR_4 . append ( STRING_2 ) . append ( VAR_1 ) ; METHOD_4 ( VAR_3 , VAR_2 ) ; }","void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { TYPE_2 . METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) ) ; TYPE_1 VAR_3 = VAR_4 . append ( VAR_1 ) ; METHOD_4 ( VAR_3 , VAR_2 ) ; }","['Move Invocation', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",3161
"public java.lang.CharSequence METHOD_1 ( ) { java.lang.String VAR_1 = result . METHOD_2 ( ) ; return VAR_2 . replace ( STRING_1 , STRING_2 ) ; }",public java.lang.CharSequence METHOD_1 ( ) { return STRING_2 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",3162
public int METHOD_1 ( java.lang.Object VAR_1 ) { int index = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( index >= 0 ) return index ; return VAR_3 ; },public int METHOD_1 ( java.lang.Object VAR_1 ) { return VAR_3 ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",3163
public boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( STRING_1 ) ) || ( TYPE_2 . METHOD_2 ( STRING_1 ) ) ; },public boolean METHOD_1 ( ) { boolean result = true ; if ( ( TYPE_1 . METHOD_2 ( STRING_1 ) ) || ( TYPE_2 . METHOD_2 ( STRING_1 ) ) ) return false ; else return true ; },"['Insert LocalVariable', 'Insert If', 'Insert TypeReference', 'Insert Literal', 'Move BinaryOperator', 'Insert Block', 'Insert Block', 'Insert Return', 'Insert Return', 'Insert Literal', 'Insert Literal', 'Delete Return']",3164
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_5 . setText ( STRING_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",3165
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { long type = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 . getId ( ) ) ) ; return type == ( VAR_3 ) ; },public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { long type = TYPE_2 . METHOD_2 ( VAR_2 . getId ( ) ) ; return type == ( VAR_3 ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",3166
"public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 . METHOD_1 ( ) , VAR_3 ) ; VAR_4 . append ( STRING_1 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( VAR_2 . METHOD_1 ( ) , VAR_3 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3167
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_3 . add ( METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3168
public int compareTo ( TYPE_1 VAR_1 ) { int VAR_2 = ( VAR_3 . length ( ) ) - ( VAR_4 . length ( ) ) ; if ( VAR_2 != 0 ) return VAR_2 ; return VAR_3 . compareTo ( VAR_5 . value ) ; },public int compareTo ( TYPE_1 VAR_1 ) { return VAR_3 . compareTo ( VAR_5 . value ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",3169
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; METHOD_4 ( VAR_3 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3170
public java.lang.String METHOD_1 ( ) { java.lang.String str = STRING_1 ; return STRING_2 ; },public java.lang.String METHOD_1 ( ) { return STRING_2 ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",3171
protected void METHOD_1 ( TYPE_1 event ) throws java.io.IOException { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; VAR_3 . start ( VAR_1 ) ; },protected void METHOD_1 ( TYPE_1 event ) throws java.io.IOException { VAR_3 . start ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3172
"public java.util.Properties METHOD_1 ( ) { java.util.Properties VAR_1 = new java.util.Properties ( ) ; VAR_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; return VAR_1 ; }",public java.util.Properties METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3173
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String type ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( type ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String type ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",3175
public static void METHOD_1 ( double VAR_1 ) { final double VAR_2 = FLOAT_1 ; double VAR_3 = VAR_1 + VAR_2 ; java.lang.System.out.println ( ( STRING_1 + VAR_3 ) ) ; },public static int METHOD_1 ( int VAR_1 ) { final double VAR_2 = FLOAT_1 ; VAR_3 = VAR_1 + VAR_2 ; java.lang.System.out.println ( ( STRING_1 + ( VAR_3 ) ) ) ; },"['Update TypeReference', 'Insert Assignment', 'Update TypeReference', 'Insert FieldWrite', 'Move BinaryOperator', 'Insert FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3176
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; TYPE_4 . METHOD_2 ( getActivity ( ) , VAR_4 , VAR_5 ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 . METHOD_2 ( getActivity ( ) , VAR_4 , VAR_5 ) ; return super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3177
"protected java.lang.Long METHOD_1 ( TYPE_1 ... VAR_1 ) { java.lang.Long result = VAR_2 . METHOD_2 ( VAR_1 [ 0 ] ) ; TYPE_2 . METHOD_3 ( STRING_1 , ( STRING_2 + result ) ) ; return result ; }",protected java.lang.Long METHOD_1 ( TYPE_1 ... VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 [ 0 ] ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead']",3178
"public void METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , null ) ; if ( VAR_1 != null ) { getView ( ) . METHOD_4 ( false ) ; } }",public void METHOD_1 ( ) { getView ( ) . METHOD_4 ( false ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",3179
"public java.lang.Integer METHOD_1 ( java.lang.Long id ) { java.lang.Integer VAR_1 = this . VAR_2 . delete ( STRING_1 , id ) ; VAR_3 . METHOD_2 ( ) ; return VAR_1 ; }","public java.lang.Integer METHOD_1 ( java.lang.Long id ) { return this . VAR_2 . delete ( STRING_1 , id ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3180
public double METHOD_1 ( ) { java.lang.Object VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; return ( ( double ) ( TYPE_1 . METHOD_2 ( STRING_1 ) ) ) ; },public double METHOD_1 ( ) { return ( ( double ) ( TYPE_1 . METHOD_2 ( STRING_1 ) ) ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",3182
"public TYPE_1 METHOD_1 ( ) { VAR_1 = new TYPE_1 ( getName ( ) , METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( this ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( getName ( ) , METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( this ) ; return VAR_1 ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess', 'Delete FieldRead']",3184
public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( ( VAR_1 ? VAR_4 : VAR_5 ) ) ; },public void METHOD_1 ( boolean VAR_1 ) { android.view.View view = getView ( ) ; if ( view != null ) { view . METHOD_2 ( VAR_3 ) . METHOD_3 ( ( VAR_1 ? VAR_4 : VAR_5 ) ) ; } },"['Insert LocalVariable', 'Insert If', 'Insert TypeReference', 'Insert Invocation', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Move Invocation', 'Insert VariableRead', 'Delete TypeAccess']",3185
public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; android.content.Intent intent = new android.content.Intent ( STRING_1 ) ; METHOD_3 ( intent ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3186
public byte METHOD_1 ( int x ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { byte VAR_3 = super . METHOD_1 ( x ) ; return VAR_3 ; } else { return 0 ; } },public byte METHOD_1 ( int x ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { return super . METHOD_1 ( x ) ; } else { return 0 ; } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3187
"public void METHOD_1 ( TYPE_1 VAR_1 , android.view.View view , int i ) { java.lang.String msg = STRING_1 + i ; TYPE_2 . METHOD_2 ( VAR_2 , msg ) ; METHOD_3 ( msg ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , android.view.View view , int i ) { }","['Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3188
public int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = this . VAR_3 . METHOD_2 ( VAR_4 . toLowerCase ( VAR_1 ) ) ; if ( VAR_2 == ( - 1 ) ) { return 0 ; } else { return VAR_2 + 1 ; } },public int METHOD_1 ( char VAR_1 ) { return ( this . VAR_3 . METHOD_2 ( VAR_1 ) ) + 1 ; },"['Insert Return', 'Update TypeReference', 'Insert BinaryOperator', 'Move Invocation', 'Move Literal', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",3189
"public void METHOD_1 ( java.lang.String path , java.util.List < TYPE_1 > type ) { java.util.List < java.lang.String > VAR_1 = VAR_2 . METHOD_2 ( type ) ; VAR_3 . getConfig ( ) . set ( path , VAR_1 ) ; p . METHOD_3 ( ) ; }","public void METHOD_1 ( java.lang.String path , java.util.List < TYPE_1 > type ) { java.util.List < java.lang.String > VAR_1 = VAR_2 . METHOD_2 ( type ) ; getConfig ( ) . set ( path , VAR_1 ) ; METHOD_3 ( ) ; }","['Update TypeAccess', 'Delete FieldRead']",3190
public synchronized java.lang.String METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; this . VAR_2 = this . VAR_1 . METHOD_1 ( ) ; return VAR_2 ; },public java.lang.String METHOD_1 ( ) { java.lang.String tmp = VAR_2 ; VAR_2 = VAR_1 . METHOD_1 ( ) ; return tmp ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move FieldRead', 'Move Invocation', 'Insert VariableRead', 'Delete Wra', 'Delete ThisAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation']",3191
"private int METHOD_1 ( int x , int y , int VAR_1 ) { int VAR_2 = 0 ; return VAR_2 ; }","private int METHOD_1 ( int x , int y , int VAR_1 ) { }","['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",3192
public void METHOD_1 ( ) { source . METHOD_1 ( ) ; TYPE_1 handle = this . handle ; if ( handle != null ) { VAR_1 . remove ( ) ; this . handle = null ; } },public void METHOD_1 ( ) { source . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete ThisAccess', 'Delete FieldWrite', 'Delete Literal', 'Delete Assignment', 'Delete Block', 'Delete If']",3193
public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 != null ) return VAR_2 . METHOD_1 ( VAR_1 ) ; return VAR_1 < ( METHOD_3 ( ) ) ? VAR_3 [ VAR_1 ] : null ; },public TYPE_1 METHOD_1 ( int VAR_1 ) { return VAR_1 < ( METHOD_3 ( ) ) ? VAR_3 [ VAR_1 ] : null ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",3194
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; view . METHOD_3 ( VAR_1 ) ; VAR_1 . METHOD_4 ( true ) ; },public void METHOD_1 ( ) { view . METHOD_3 ( METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move FieldRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",3195
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_2 ) ) ) ; int VAR_3 = TYPE_2 . METHOD_2 ( null , STRING_2 , STRING_3 , VAR_4 ) ; if ( VAR_3 == ( VAR_5 ) ) { METHOD_3 ( ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_2 ) ) ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",3196
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = super . METHOD_1 ( VAR_1 ) ; if ( VAR_2 == null ) { return null ; } return new TYPE_3 ( VAR_2 , true ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_3 ( super . METHOD_1 ( VAR_1 ) , true ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3197
public static void main ( java.lang.String [ ] args ) { try { TYPE_1 VAR_1 = new TYPE_1 ( args ) ; } catch ( java.lang.Exception VAR_1 ) { VAR_1 . METHOD_1 ( ) ; } },public static void main ( java.lang.String [ ] args ) { try { new TYPE_1 ( args ) ; } catch ( java.lang.Exception VAR_1 ) { VAR_1 . METHOD_1 ( ) ; } },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable']",3198
"protected void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = VAR_2 . add ( VAR_3 ) ; VAR_3 = VAR_3 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_4 , VAR_2 . add ( VAR_1 ) , null ) ; }","protected void METHOD_1 ( TYPE_1 event ) { VAR_3 = VAR_3 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_4 , new TYPE_2 ( 0 ) . add ( VAR_3 ) , null ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Insert ConstructorCall', 'Update TypeAccess', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3199
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; TYPE_1 result = VAR_1 . METHOD_1 ( INT_1 ) ; java.lang.System.out.println ( TYPE_2 . METHOD_2 ( result ) ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",3200
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . start ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( new TYPE_3 ( ) , VAR_1 ) ; VAR_3 . METHOD_1 ( ) ; }","public static void main ( java.lang.String [ ] args ) { TYPE_2 VAR_3 = new TYPE_2 ( new TYPE_3 ( ) , new TYPE_1 ( ) ) ; VAR_3 . METHOD_1 ( ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3201
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 < java.lang.Integer > VAR_2 = VAR_1 . METHOD_2 ( ) ; int sum = VAR_1 . METHOD_3 ( VAR_2 ) ; assertEquals ( INT_1 , sum ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3203
public TYPE_1 METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; return VAR_2 . remove ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( ) { return VAR_2 . remove ( METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3204
"public void METHOD_1 ( android.view.View view ) { if ( view == ( VAR_1 ) ) { METHOD_2 ( ) ; } if ( view == ( VAR_2 ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_3 ( intent ) ; } }",public void METHOD_1 ( android.view.View view ) { if ( view == ( VAR_1 ) ) { METHOD_2 ( ) ; } },"['Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3205
"public static java.lang.Throwable METHOD_1 ( java.lang.Throwable error ) { TYPE_1 < java.lang.Throwable , java.lang.Throwable > f = VAR_1 ; if ( f != null ) { return f . METHOD_2 ( error ) ; } return error ; }",public static java.lang.Throwable METHOD_1 ( java.lang.Throwable error ) { return error ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",3206
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ; if ( VAR_1 != null ) { ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) . METHOD_1 ( ) ; } },public void METHOD_1 ( ) { ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",3207
"public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 < TYPE_3 > VAR_1 = VAR_2 . METHOD_2 ( VAR_3 . get ( VAR_4 , STRING_1 ) ) ; }","public void METHOD_1 ( ) throws TYPE_1 { VAR_2 . METHOD_2 ( VAR_3 . get ( VAR_4 , STRING_1 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable']",3208
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },"['Insert ConstructorCall', 'Delete TypeAccess', 'Delete Invocation']",3209
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; if ( ( VAR_3 . METHOD_4 ( ) ) == VAR_2 ) { VAR_3 . METHOD_5 ( null ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",3211
private TYPE_1 METHOD_1 ( int type ) { java.io.File VAR_1 = METHOD_2 ( type ) ; if ( VAR_1 == null ) return null ; else return TYPE_1 . METHOD_3 ( VAR_1 ) ; },private TYPE_1 METHOD_1 ( int type ) { return TYPE_1 . METHOD_3 ( METHOD_2 ( type ) ) ; },"['Insert Return', 'Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",3212
"private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = ( TYPE_2 . METHOD_2 ( VAR_3 ) ) + STRING_1 ; java.lang.String VAR_4 = ( TYPE_2 . METHOD_2 ( VAR_3 ) ) + STRING_2 ; METHOD_3 ( VAR_2 , VAR_4 ) ; }",private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = ( TYPE_2 . METHOD_2 ( VAR_3 ) ) + STRING_1 ; METHOD_3 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",3213
"protected void METHOD_1 ( TYPE_1 op , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws java.lang.Exception { op . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = op . METHOD_3 ( ) ; TYPE_4 . METHOD_4 ( VAR_3 , VAR_3 ) ; }","protected void METHOD_1 ( TYPE_1 op , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws java.lang.Exception { op . METHOD_2 ( VAR_1 ) ; op . METHOD_3 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",3214
"protected TYPE_1 METHOD_1 ( java.lang.Void ... params ) { java.lang.String data = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 . isEmpty ( data ) ) { return null ; } return TYPE_1 . METHOD_3 ( VAR_1 , data ) ; }",protected java.lang.String METHOD_1 ( java.lang.Void ... params ) { return TYPE_2 . METHOD_2 ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3219
"public static java.lang.String METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) ) ; return VAR_1 ; }","public static java.lang.String METHOD_1 ( ) throws TYPE_1 { return ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead']",3221
"private void METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) . getBoolean ( VAR_3 , false ) ; if ( ! VAR_1 ) { VAR_4 . METHOD_3 ( false ) ; } }",private void METHOD_1 ( ) { VAR_4 . METHOD_3 ( false ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",3222
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 . show ( getActivity ( ) . METHOD_3 ( ) . METHOD_4 ( ) , VAR_3 ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",3223
public java.lang.String METHOD_1 ( TYPE_1 value ) { if ( TYPE_2 . METHOD_2 ( value ) ) return null ; TYPE_3 VAR_1 = TYPE_3 . METHOD_3 ( STRING_1 ) ; return VAR_2 . format ( VAR_1 ) ; },public java.lang.String METHOD_1 ( TYPE_1 value ) { if ( TYPE_2 . METHOD_2 ( value ) ) return null ; return VAR_2 . toString ( ) ; },"['Update Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3225
"protected void METHOD_1 ( TYPE_1 result ) { java.util.List < TYPE_2 > VAR_1 = result . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( context , VAR_2 . get ( 0 ) . METHOD_4 ( ) , VAR_3 ) . show ( ) ; }","protected void METHOD_1 ( java.lang.String result ) { TYPE_3 . METHOD_3 ( context , result , VAR_3 ) . show ( ) ; }","['Update TypeReference', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Invocation']",3226
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 number = METHOD_2 ( ) ; android.content.Intent VAR_2 = new android.content.Intent ( VAR_3 , number ) ; TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; METHOD_4 ( VAR_2 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; METHOD_4 ( VAR_2 ) ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",3228
public int METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; return VAR_1 ; },public int METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( ) ; return VAR_1 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",3229
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } },public void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } },"['Insert FieldRead', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",3230
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 tmp = new TYPE_1 ( ) ; tmp . METHOD_2 ( java.lang.Long.parseLong ( STRING_1 ) ) ; tmp . METHOD_3 ( STRING_2 ) ; return tmp ; } return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return VAR_1 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",3231
public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( ( k ) - > { TYPE_2 VAR_1 = VAR_2 . METHOD_3 ( key ) ; if ( VAR_1 != null ) { return VAR_1 . METHOD_4 ( ) ; } return null ; } ) ; },public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( ( k ) - > VAR_2 . METHOD_3 ( key ) . METHOD_4 ( ) ) ; },"['Update BinaryOperator', 'Insert UnaryOperator', 'Insert Invocation', 'Insert FieldWrite', 'Move Invocation', 'Delete FieldRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",3232
"public boolean remove ( TYPE_1 VAR_1 ) { boolean VAR_2 = VAR_3 . remove ( VAR_1 ) ; METHOD_1 ( VAR_4 , VAR_1 , null ) ; return VAR_2 ; }","public boolean remove ( TYPE_1 VAR_1 ) { METHOD_1 ( VAR_4 , VAR_1 , null ) ; return VAR_3 . remove ( VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3233
"public void METHOD_1 ( TYPE_1 item ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; android.content.Intent i = new android.content.Intent ( this , VAR_2 class ) ; i . METHOD_2 ( STRING_1 , VAR_1 ) ; this . METHOD_3 ( i ) ; }","public void METHOD_1 ( TYPE_1 item ) { android.content.Intent i = new android.content.Intent ( this , VAR_2 class ) ; this . METHOD_3 ( i ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3234
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.util.ArrayList < TYPE_3 > VAR_2 , java.util.ArrayList < TYPE_3 > VAR_3 , java.util.Map < TYPE_4 , java.lang.String > VAR_4 ) { TYPE_5 VAR_5 = new TYPE_5 ( true ) ; return VAR_5 . METHOD_2 ( ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.util.ArrayList < TYPE_3 > VAR_2 , java.util.ArrayList < TYPE_3 > VAR_3 , java.util.Map < TYPE_4 , java.lang.String > VAR_4 ) { return null ; }","['Insert Literal', 'Delete TypeReference', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3235
"private TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 t ) { int value = VAR_1 ; if ( ( t != null ) && ( t . METHOD_2 ( ) ) ) { value = VAR_2 ; } return METHOD_1 ( name , value ) ; }","private TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 t ) { int value = 0 ; if ( ( t != null ) && ( t . METHOD_2 ( ) ) ) { value = 1 ; } return METHOD_1 ( name , value ) ; }","['Insert Literal', 'Insert Literal', 'Delete FieldRead', 'Delete FieldRead']",3236
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable']",3241
"public boolean METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_3 . replaceAll ( STRING_1 , STRING_2 ) . toLowerCase ( ) ; METHOD_2 ( VAR_2 ) ; return VAR_4 . METHOD_3 ( VAR_2 ) ; }",public boolean METHOD_1 ( java.lang.String VAR_1 ) { METHOD_2 ( VAR_1 ) ; return VAR_4 . METHOD_3 ( VAR_1 ) ; },"['Update VariableRead', 'Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",3242
"public int METHOD_1 ( int [ ] VAR_1 ) { int VAR_2 = METHOD_2 ( VAR_1 , 0 , ( ( VAR_3 . length ) - 1 ) ) ; return ( VAR_3 . length ) - VAR_2 ; }",public int METHOD_1 ( int [ ] VAR_1 ) { return 0 ; },"['Move Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator']",3244
"public int METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , TYPE_2 state ) { int VAR_3 ; return VAR_1 ; }","public int METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , TYPE_2 state ) { return VAR_1 ; }","['Delete TypeReference', 'Delete LocalVariable']",3247
public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent intent = getActivity ( ) . getIntent ( ) ; super . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",3248
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; return TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; },public TYPE_2 METHOD_1 ( TYPE_3 VAR_1 ) { return new TYPE_2 ( VAR_1 ) ; },"['Update TypeReference', 'Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3250
public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { VAR_2 . add ( new TYPE_2 ( ) ) ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( new TYPE_2 ( ) ) ; return VAR_1 ; },"['Update TypeReference', 'Insert LocalVariable', 'Insert Return', 'Insert TypeReference', 'Move TypeReference', 'Insert ConstructorCall', 'Insert VariableRead', 'Delete Parameter']",3251
public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_1 start = new TYPE_1 ( ) ; TYPE_2 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_2 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",3252
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3253
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String title ) { java.lang.String VAR_2 = METHOD_2 ( VAR_1 , title ) ; return METHOD_1 ( VAR_1 , title , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String title ) { java.lang.String VAR_2 = METHOD_2 ( title ) ; return METHOD_1 ( VAR_1 , title , VAR_2 ) ; }",['Delete VariableRead'],3254
public void execute ( TYPE_1 context ) throws TYPE_2 { TYPE_3 VAR_1 = ( ( TYPE_3 ) ( context . METHOD_1 ( ) . METHOD_2 ( ) . get ( this . getClass ( ) . getName ( ) ) ) ) ; VAR_2 . getData ( ) ; },public void execute ( TYPE_1 context ) throws TYPE_2 { getData ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete ThisAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3255
public java.util.List < java.lang.String > METHOD_1 ( ) { java.lang.Throwable t = METHOD_2 ( ) ; if ( ( t instanceof TYPE_1 ) || ( t instanceof TYPE_2 ) ) { return VAR_1 . list ( ) ; } return super . METHOD_1 ( ) ; },public java.util.List < java.lang.String > METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) instanceof TYPE_1 ) { return VAR_1 . list ( ) ; } return super . METHOD_1 ( ) ; },"['Update BinaryOperator', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator']",3257
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_3 ) ; VAR_4 . put ( VAR_5 , VAR_1 ) ; VAR_6 . put ( VAR_5 , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_6 . put ( VAR_5 , VAR_1 ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3259
"public static void main ( java.lang.String [ ] args ) { TYPE_1 b = new TYPE_1 ( true ) ; b . METHOD_1 ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( INT_1 , 1 ) ; java.lang.System.out.println ( b . METHOD_2 ( VAR_1 ) ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",3260
private TYPE_1 METHOD_1 ( java.lang.String url ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( url ) . METHOD_3 ( true ) . get ( ) ; return VAR_1 ; },private TYPE_1 METHOD_1 ( java.lang.String url ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( url ) . get ( ) ; return VAR_1 ; },"['Update Invocation', 'Move Invocation', 'Delete Literal', 'Delete Invocation']",3261
"public static TYPE_1 index ( ) { TYPE_2 result = TYPE_3 . METHOD_1 ( ) ; VAR_1 . put ( STRING_1 , STRING_2 ) ; VAR_1 . put ( STRING_3 , STRING_4 ) ; VAR_1 . put ( STRING_5 , STRING_6 ) ; return null ; }",public static TYPE_1 index ( ) { return null ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",3262
public static void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.System.out.println ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ; },public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",3264
"public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { return false ; } return VAR_2 . METHOD_2 ( VAR_1 , false ) ; }","public boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . get ( VAR_1 ) . METHOD_2 ( VAR_1 , false ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3266
public int METHOD_1 ( ) { TYPE_1 VAR_1 = get ( ) ; java.lang.Integer result = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( result == null ) { return - 1 ; } return result ; },public int METHOD_1 ( ) { TYPE_1 VAR_1 = get ( ) ; return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3268
"public boolean METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_2 , VAR_1 ) ) ; METHOD_1 ( VAR_1 , VAR_2 ) ; return true ; }","public boolean METHOD_1 ( java.lang.String VAR_1 ) { METHOD_1 ( VAR_1 , TYPE_1 . METHOD_2 ( VAR_1 ) ) ; return true ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",3271
public java.lang.String toString ( ) { java.lang.String VAR_1 ; if ( ( VAR_2 . length ( ) ) < 1 ) { VAR_3 = ( ( VAR_4 ) + STRING_1 ) + ( VAR_5 ) ; } return VAR_3 ; },public java.lang.String toString ( ) { java.lang.String VAR_1 = ( ( VAR_4 ) + STRING_1 ) + ( VAR_5 ) ; return VAR_1 ; },"['Move BinaryOperator', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldWrite', 'Delete Assignment', 'Delete Block', 'Delete If', 'Delete FieldRead']",3272
void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 ; if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; } },void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3273
"public java.lang.String query ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , TYPE_2 VAR_5 ) { boolean result = VAR_6 . query ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; if ( result ) { return STRING_1 ; } return STRING_2 ; }","public java.lang.String query ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , TYPE_2 VAR_5 ) { VAR_6 . query ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; return STRING_1 ; }","['Move Invocation', 'Move Return', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",3274
"private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_2 msg = new TYPE_2 ( ) ; msg . METHOD_3 ( ) ; msg . METHOD_4 ( ) ; METHOD_5 ( msg ) ; }",private void METHOD_1 ( ) { },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3275
"public void METHOD_1 ( android.view.View view ) { VAR_1 . METHOD_2 ( true ) ; android.content.Intent i = new android.content.Intent ( METHOD_3 ( ) , VAR_2 class ) ; METHOD_4 ( i ) ; }","public void METHOD_1 ( android.view.View view ) { VAR_1 . METHOD_2 ( false ) ; android.content.Intent i = new android.content.Intent ( METHOD_3 ( ) , VAR_2 class ) ; METHOD_4 ( i ) ; }",['Update Literal'],3277
"public void METHOD_1 ( TYPE_1 type , int VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( type ) ; java.lang.String VAR_3 = VAR_4 . getString ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 type , int VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( type ) ; VAR_2 . METHOD_3 ( VAR_4 . getString ( VAR_1 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3278
"protected TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_2 VAR_1 = METHOD_3 ( VAR_2 ) . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( null , VAR_3 , VAR_4 ) ; return new TYPE_1 ( VAR_1 ) ; }","protected TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_2 VAR_1 = METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_5 ( null , VAR_3 , VAR_4 ) ; return new TYPE_1 ( VAR_1 ) ; }","['Move Invocation', 'Delete Invocation']",3279
"public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( intent ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { METHOD_2 ( new android.content.Intent ( this , VAR_2 class ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3280
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( false ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",3281
"private TYPE_1 METHOD_1 ( java.lang.String value ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( value , VAR_3 ) ; TYPE_2 VAR_4 = VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_5 . add ( VAR_4 ) ; return VAR_1 ; }","private TYPE_1 METHOD_1 ( java.lang.String value ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( value , VAR_3 ) ; return VAR_1 ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3282
"public TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( id ) ; VAR_2 . put ( VAR_3 . id , VAR_1 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( int id ) { TYPE_1 VAR_1 = TYPE_1 ( id ) ; VAR_2 . put ( VAR_3 . id , VAR_1 ) ; return VAR_1 ; }","['Update TypeReference', 'Insert Invocation', 'Move VariableRead', 'Delete ConstructorCall']",3283
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { java.lang.String VAR_2 = context . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_1 = context . METHOD_2 ( ) . METHOD_5 ( VAR_2 ) ; } return VAR_1 ; },public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { context . METHOD_2 ( ) . METHOD_5 ( context . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; } return VAR_1 ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete Assignment']",3285
"private void METHOD_1 ( ) { METHOD_2 ( ) ; java.lang.String VAR_1 = VAR_2 . getText ( ) . toString ( ) ; new TYPE_1 ( VAR_3 , VAR_4 , VAR_1 , VAR_5 , VAR_4 ) . execute ( ) ; }",private void METHOD_1 ( ) { METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation']",3286
public void setText ( ) { VAR_1 = ( ( TYPE_1 ) ( this . METHOD_1 ( ) ) ) . METHOD_2 ( ) ; VAR_2 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_3 ) ) ) ; VAR_4 . setText ( java.lang.Integer.toString ( VAR_1 ) ) ; },public void setText ( ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_3 ) ) ) ; VAR_4 . setText ( java.lang.Integer.toString ( VAR_1 ) ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Delete FieldWrite', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Assignment', 'Delete FieldWrite', 'Delete Assignment']",3287
public short METHOD_1 ( java.lang.String key ) { java.lang.Object value = get ( key ) ; TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( value ) ; if ( VAR_1 == null ) { return 0 ; } return VAR_1 . METHOD_3 ( ) ; },public short METHOD_1 ( java.lang.String key ) { java.lang.Object value = get ( key ) ; if ( value == null ) { return 0 ; } return TYPE_2 . METHOD_2 ( value ) . METHOD_3 ( ) ; },"['Update VariableRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3288
"public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ""id"" ) ; return VAR_2 . METHOD_1 ( VAR_1 ) ; }",public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_2 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",3289
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = METHOD_2 ( VAR_5 , VAR_1 , VAR_2 ) ; VAR_6 . METHOD_3 ( VAR_7 ) ; VAR_6 . METHOD_4 ( ( ( VAR_8 ) - 1 ) ) ; return VAR_4 ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return METHOD_2 ( VAR_5 , VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead']",3290
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String name = METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; return ( VAR_2 . METHOD_4 ( ) . get ( ( STRING_1 + name ) ) ) != null ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_2 . METHOD_4 ( ) . get ( ( STRING_1 + VAR_1 ) ) ) != null ; },"['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3292
"private void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 , VAR_3 ) ; VAR_2 . METHOD_2 ( new java.awt.Font ( null , VAR_4 , INT_1 ) ) ; add ( VAR_2 ) ; add ( new TYPE_1 ( STRING_1 ) ) ; }","private void METHOD_1 ( java.lang.String VAR_1 ) { add ( new TYPE_1 ( VAR_1 , VAR_3 ) ) ; add ( new TYPE_1 ( STRING_1 ) ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3293
"public java.util.List < java.util.List < java.lang.Integer > > METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { boolean VAR_3 = VAR_2 . METHOD_2 ( VAR_1 ) ; java.util.List < java.util.List < java.lang.Integer > > VAR_4 = VAR_2 . METHOD_1 ( ) ; return VAR_4 ; }","public java.util.List < java.util.List < java.lang.Integer > > METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { java.util.List < java.util.List < java.lang.Integer > > VAR_4 = VAR_2 . METHOD_1 ( ) ; return VAR_4 ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",3294
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . getText ( ) . trim ( ) ; java.lang.String VAR_4 = VAR_5 . getText ( ) ; TYPE_2 VAR_6 = new TYPE_2 ( VAR_2 , VAR_4 ) ; VAR_7 . execute ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . getText ( ) ; java.lang.String VAR_4 = VAR_5 . getText ( ) ; TYPE_2 VAR_6 = new TYPE_2 ( VAR_2 , VAR_4 ) ; VAR_7 . execute ( ) ; }","['Move Invocation', 'Delete Invocation']",3295
public boolean METHOD_1 ( TYPE_1 state ) { METHOD_2 ( state ) ; java.lang.Boolean result = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; return result ; },public boolean METHOD_1 ( TYPE_1 state ) { METHOD_2 ( state ) ; return METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3296
public byte METHOD_1 ( java.lang.String key ) { java.lang.Object value = get ( key ) ; TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( value ) ; if ( VAR_1 == null ) { return 0 ; } return VAR_1 . METHOD_3 ( ) ; },public byte METHOD_1 ( java.lang.String key ) { java.lang.Object value = get ( key ) ; if ( value == null ) { return 0 ; } return TYPE_2 . METHOD_2 ( value ) . METHOD_3 ( ) ; },"['Update VariableRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3299
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { android.view.View VAR_2 = METHOD_2 ( VAR_3 . getContext ( ) ) . METHOD_3 ( VAR_4 , VAR_1 , false ) ; return new TYPE_3 ( VAR_2 ) ; }",public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall']",3300
public void METHOD_1 ( android.view.View view ) { METHOD_2 ( true ) ; METHOD_3 ( false ) ; METHOD_4 ( false ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_5 ( VAR_2 ) ) ) ; VAR_3 . setText ( getString ( VAR_4 ) ) ; },public void METHOD_1 ( android.view.View view ) { METHOD_2 ( true ) ; METHOD_3 ( false ) ; METHOD_4 ( false ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",3302
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; VAR_5 = ( ( TYPE_4 ) ( view . METHOD_3 ( VAR_6 ) ) ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Assignment', 'Delete VariableRead']",3303
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 a = TYPE_1 . METHOD_2 ( ) ; a . METHOD_3 ( a . METHOD_4 ( STRING_1 ) ) ; assertTrue ( ( ( a . METHOD_5 ( ) . size ( ) ) == 0 ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation']",3304
public synchronized TYPE_1 METHOD_1 ( int type ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . open ( ) ; VAR_1 . METHOD_3 ( ) ; return VAR_1 ; },public synchronized TYPE_1 METHOD_1 ( int type ) { return TYPE_2 . METHOD_2 ( ) . open ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3305
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 ) ; VAR_2 . METHOD_2 ( VAR_5 ) ; VAR_2 . METHOD_3 ( true ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",3306
"public void METHOD_1 ( ) { VAR_1 . assertEquals ( 0 , VAR_2 . METHOD_2 ( INT_1 , INT_1 ) ) ; VAR_1 . assertEquals ( 1 , VAR_2 . METHOD_2 ( INT_1 , 1 ) ) ; }","public void METHOD_1 ( ) { int result = VAR_2 . METHOD_2 ( INT_1 , INT_1 ) ; VAR_1 . assertEquals ( 0 , result ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Invocation']",3307
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_2 VAR_2 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 != null ) { METHOD_5 ( VAR_2 ) ; } } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ; } },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3308
private void METHOD_1 ( ) { boolean VAR_1 = ( ( ! ( VAR_2 . METHOD_2 ( ) ) ) && ( VAR_3 ) ) || ( VAR_4 ) ; METHOD_3 ( ( ! VAR_1 ) ) ; },private void METHOD_1 ( ) { if ( VAR_2 . METHOD_2 ( ) ) { METHOD_3 ( ( ! ( VAR_4 ) ) ) ; } else { METHOD_3 ( ( ( ! ( VAR_3 ) ) && ( ! ( VAR_4 ) ) ) ) ; } },"['Insert If', 'Move Invocation', 'Insert Block', 'Insert Block', 'Insert Invocation', 'Insert Invocation', 'Insert UnaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert FieldRead', 'Insert UnaryOperator', 'Insert UnaryOperator', 'Move FieldRead', 'Move FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete Invocation']",3309
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . getValue ( VAR_5 class ) ; TYPE_3 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3310
public TYPE_1 METHOD_1 ( ) { TYPE_1 node = new TYPE_1 ( ) ; node . METHOD_2 ( VAR_1 ) ; return node ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3311
public void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { TYPE_2 VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( VAR_1 ) ; } },public void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { TYPE_1 . METHOD_4 ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3312
"private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_3 = new TYPE_4 ( output , STRING_2 , true ) ; java.lang.String VAR_4 = VAR_5 ; return new TYPE_5 ( VAR_1 , VAR_3 , VAR_4 ) ; }","private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_3 = new TYPE_4 ( output , STRING_2 , true ) ; return new TYPE_5 ( VAR_1 , VAR_3 ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",3313
public void METHOD_1 ( TYPE_1 event ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . getText ( ) ; VAR_3 . remove ( VAR_1 ) ; java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; },public void METHOD_1 ( TYPE_1 event ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_3 . remove ( VAR_1 ) ; java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; },"['Move Invocation', 'Delete Invocation']",3314
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 . toLowerCase ( VAR_5 . getName ( ) , VAR_6 ) ) ; return VAR_2 == null ? null : VAR_7 ; }",public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_2 == null ? null : VAR_7 ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",3315
"public boolean METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 , TYPE_4 { VAR_1 = false ; boolean result = ! ( VAR_2 . METHOD_2 ( VAR_3 , 1L ) ) ; return result ; }","public boolean METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 , TYPE_4 { VAR_1 = false ; return ! ( VAR_2 . METHOD_2 ( VAR_3 , 1L ) ) ; }","['Move UnaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3316
"public void METHOD_1 ( android.view.View view ) { if ( ( VAR_1 . getId ( ) ) == ( VAR_2 ) ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_3 class ) ; METHOD_2 ( intent , VAR_4 ) ; } }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",3317
public void METHOD_1 ( ) { int VAR_1 = VAR_2 . size ( ) ; if ( ( VAR_1 == 1 ) || ( ( VAR_1 > 1 ) && ( ( VAR_3 ) != ( VAR_4 ) ) ) ) { VAR_3 = VAR_5 ; } },public void METHOD_1 ( ) { VAR_3 = VAR_5 ; },"['Move Assignment', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",3319
public static void remove ( ) { java.io.File VAR_1 = new java.io.File ( VAR_2 ) ; VAR_3 . delete ( ) ; java.io.File VAR_4 = new java.io.File ( STRING_1 ) ; VAR_5 . delete ( ) ; },public static void remove ( ) { java.io.File VAR_1 = new java.io.File ( VAR_2 ) ; VAR_3 . delete ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3320
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( new android.content.Intent ( VAR_2 , VAR_3 class ) ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( VAR_2 , VAR_3 class ) ; METHOD_2 ( intent ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead']",3322
public TYPE_1 METHOD_1 ( java.util.Collection < TYPE_2 > VAR_1 ) { TYPE_3 answer = new TYPE_3 ( ) ; METHOD_2 ( answer ) ; VAR_2 . to ( VAR_1 ) ; return ( ( TYPE_1 ) ( this ) ) ; },public TYPE_1 METHOD_1 ( java.util.Collection < TYPE_2 > VAR_1 ) { return to ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete ThisAccess']",3324
"public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = this . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_2 , this . METHOD_4 ( ) ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { this . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation']",3326
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_1 != null ) return ( ( TYPE_1 ) ( VAR_1 . METHOD_1 ( getClass ( ) ) ) ) ; else return null ; },public TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( ) . METHOD_1 ( getClass ( ) ) ) ) ; },"['Move Return', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",3328
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( METHOD_2 ( ) , VAR_1 class ) ; intent . METHOD_3 ( VAR_2 ) ; METHOD_4 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; METHOD_4 ( intent ) ; }","['Insert ThisAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",3330
"public int METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; int i = VAR_5 . METHOD_3 ( VAR_1 , VAR_3 ) ; java.lang.System.out.println ( i ) ; return i ; }","public int METHOD_1 ( int VAR_1 , java.lang.String VAR_3 ) { int i = VAR_5 . METHOD_3 ( VAR_1 , VAR_3 ) ; return i ; }","['Update Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",3331
public java.lang.String METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_1 ( ) ; java.lang.String VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; return VAR_3 ; },public java.lang.String METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_1 ( ) ; return VAR_4 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3333
public java.util.Set < TYPE_1 > METHOD_1 ( TYPE_2 id ) { TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( id ) . get ( ) ; return VAR_3 . METHOD_3 ( ( ( TYPE_4 ) ( VAR_1 ) ) ) ; },public java.util.Set < TYPE_1 > METHOD_1 ( TYPE_2 id ) { return VAR_3 . METHOD_3 ( id ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation']",3334
"public void init ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( VAR_2 class ) ; TYPE_3 VAR_3 = TYPE_2 . METHOD_1 ( VAR_4 class ) ; VAR_5 = METHOD_2 ( new TYPE_4 ( VAR_6 , VAR_1 , VAR_3 ) ) ; }","public void init ( ) { TYPE_1 VAR_1 = METHOD_1 ( VAR_2 class ) ; TYPE_3 VAR_3 = METHOD_1 ( VAR_4 class ) ; VAR_5 = METHOD_2 ( new TYPE_4 ( VAR_6 , VAR_1 , VAR_3 ) ) ; }","['Update TypeAccess', 'Update TypeAccess']",3336
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_1 VAR_4 = TYPE_4 . METHOD_3 ( VAR_2 ) ; VAR_5 . add ( VAR_4 ) ; return VAR_4 ; },private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_4 = TYPE_4 . METHOD_3 ( ) ; VAR_5 . add ( VAR_4 ) ; return VAR_4 ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3337
"public static android.content.Intent METHOD_1 ( android.content.Context context ) { return new android.content.Intent ( context , VAR_1 class ) ; }","public static android.content.Intent METHOD_1 ( android.content.Context context ) { android.content.Intent intent = new android.content.Intent ( context , VAR_1 class ) ; return intent ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead']",3339
public void METHOD_1 ( java.lang.Long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; if ( VAR_4 . isEmpty ( ) ) { VAR_3 . remove ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.Long VAR_1 ) { VAR_3 . remove ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",3341
public void METHOD_1 ( ) { TYPE_1 buffer = METHOD_2 ( INT_1 ) ; METHOD_3 ( buffer . METHOD_4 ( ) ) ; VAR_1 . assertTrue ( buffer . METHOD_5 ( ) ) ; },public void METHOD_1 ( ) { METHOD_3 ( METHOD_2 ( INT_1 ) . METHOD_4 ( ) ) ; },"['Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",3342
"public android.view.View METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { android.view.View view = VAR_2 . METHOD_2 ( VAR_4 , VAR_3 , false ) ; TYPE_3 VAR_5 = TYPE_4 . METHOD_3 ( view ) ; return VAR_5 . METHOD_4 ( ) ; }","public android.view.View METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { android.view.View view = VAR_2 . METHOD_2 ( VAR_4 , VAR_3 , false ) ; return view ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3344
public void METHOD_1 ( android.view.View view ) { java.lang.String number = VAR_1 . METHOD_2 ( ) ; VAR_2 . setText ( number ) ; VAR_3 . METHOD_3 ( number ) ; },public void METHOD_1 ( android.view.View view ) { VAR_2 . setText ( VAR_1 . METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3348
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = new TYPE_2 ( this ) ; METHOD_3 ( ) ; TYPE_3 TYPE_4 = TYPE_3 . METHOD_4 ( ) ; TYPE_4 . METHOD_5 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = new TYPE_2 ( this ) ; METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3349
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 t = new TYPE_2 ( VAR_1 ) ; VAR_2 . assertNotNull ( STRING_1 , t ) ; }","public void METHOD_1 ( ) { TYPE_2 t = new TYPE_2 ( VAR_1 ) ; VAR_2 . assertNotNull ( STRING_1 , t ) ; }","['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Insert FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",3350
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; VAR_5 = TYPE_4 . METHOD_3 ( this , view ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Assignment', 'Delete VariableRead']",3351
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; },public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_2 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3352
"public static java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , true ) . METHOD_4 ( STRING_2 ) . METHOD_5 ( ) ; return VAR_1 ; }","public static java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , true ) . METHOD_5 ( ) ; return VAR_1 ; }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",3353
"public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_3 class , VAR_1 ) ; VAR_2 . METHOD_4 ( STRING_1 ) ; METHOD_2 ( ) . update ( VAR_2 ) ; }",public void METHOD_1 ( int VAR_1 ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3354
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = TYPE_4 . METHOD_2 ( VAR_1 , VAR_4 , VAR_2 , false ) . METHOD_3 ( ) ; view . METHOD_4 ( 0 ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return TYPE_4 . METHOD_2 ( VAR_1 , VAR_4 , VAR_2 , false ) . METHOD_3 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",3355
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( getActivity ( ) ) ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_3 . METHOD_3 ( VAR_2 ) ; },"public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_3 . METHOD_2 ( this , VAR_3 ) ; TYPE_3 . METHOD_3 ( this ) ; }","['Insert Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Insert ThisAccess', 'Move TypeAccess', 'Move TypeAccess', 'Insert ThisAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3357
protected TYPE_1 METHOD_1 ( ) { VAR_1 = ( ( TYPE_2 ) ( getIntent ( ) . METHOD_2 ( VAR_2 ) ) ) ; if ( ( VAR_1 ) != null ) { return TYPE_3 . METHOD_3 ( VAR_1 ) ; } return TYPE_3 . METHOD_3 ( ) ; },protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( getIntent ( ) . METHOD_2 ( VAR_2 ) ) ) ; if ( VAR_1 != null ) { return TYPE_3 . METHOD_3 ( VAR_1 ) ; } return TYPE_3 . METHOD_3 ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead', 'Delete TypeAccess']",3358
"public TYPE_1 index ( java.lang.String name ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ""name"" , STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; return VAR_1 ; }",public java.lang.String index ( ) { return STRING_2 ; },"['Update TypeReference', 'Insert FieldRead', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3360
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; VAR_2 . getName ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; },"['Delete TypeAccess', 'Delete Invocation']",3361
"protected java.lang.String METHOD_1 ( TYPE_1 token , java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { java.lang.String VAR_2 = token . METHOD_2 ( VAR_3 ) ; return ( ( METHOD_3 ( ) ) + VAR_2 ) + ( VAR_4 ) ; }","protected java.lang.String METHOD_1 ( TYPE_1 token , java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { java.lang.String VAR_2 = token . METHOD_2 ( VAR_3 ) ; java.lang.String url = ( ( METHOD_3 ( ) ) + VAR_2 ) + ( VAR_4 ) ; return url ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move BinaryOperator', 'Insert VariableRead']",3362
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; TYPE_3 VAR_5 = METHOD_3 ( ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; return view ; }","['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable']",3363
"private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( VAR_1 ) ; intent . METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( intent ) ; }",private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3364
"public boolean METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 , TYPE_2 source ) { int VAR_2 = VAR_3 . METHOD_2 ( ) ; return VAR_2 < ( VAR_4 ) ; }","public boolean METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 , TYPE_2 source ) { return true ; }","['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",3365
"private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String message = VAR_2 . getText ( ) . trim ( ) ; VAR_3 . METHOD_2 ( VAR_4 , message ) ; VAR_5 . setText ( message ) ; VAR_2 . setText ( STRING_1 ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_2 . getText ( ) . trim ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",3366
"public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { setState ( function . METHOD_2 ( VAR_3 ) ) ; METHOD_3 ( VAR_4 . getName ( ) , this . state , VAR_5 ) ; }","public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { TYPE_2 VAR_5 = this . state ; setState ( function . METHOD_2 ( VAR_3 ) ) ; METHOD_3 ( VAR_4 . getName ( ) , this . state , VAR_5 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Insert FieldRead', 'Insert VariableRead', 'Insert ThisAccess', 'Delete TypeAccess']",3367
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; java.lang.String token = STRING_1 ; java.lang.String VAR_2 = STRING_1 ; VAR_3 . METHOD_2 ( STRING_2 , 0 ) ; assertEquals ( STRING_3 , token ) ; }",public void METHOD_1 ( ) throws java.lang.Exception { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3369
public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( STRING_2 ) ; int sum = 1 ; java.lang.System.out.println ( ( STRING_3 + sum ) ) ; },public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( STRING_2 ) ; },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",3370
"public void METHOD_1 ( ) { METHOD_2 ( response ) ; TYPE_1 VAR_1 = METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ; METHOD_5 ( STRING_2 , VAR_1 ) ; METHOD_3 ( ) . METHOD_6 ( ) ; }",public void METHOD_1 ( ) { METHOD_2 ( response ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",3372
"public synchronized java.lang.String METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.String > VAR_1 = VAR_2 . METHOD_1 ( ) ; java.lang.String VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; return VAR_3 ; }",public synchronized java.lang.String METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3373
"public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_4 ( VAR_4 ) . METHOD_5 ( ) ; }","public void METHOD_1 ( ) { VAR_3 . METHOD_3 ( STRING_1 , STRING_2 ) ; TYPE_1 . METHOD_4 ( VAR_4 ) . METHOD_5 ( ) ; }","['Insert Invocation', 'Move TypeAccess', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",3374
"public void METHOD_1 ( TYPE_1 status , TYPE_2 response ) { boolean temp = VAR_1 ; TYPE_3 . METHOD_2 ( VAR_2 , ( STRING_1 + ( status . METHOD_3 ( ) ) ) ) ; }","public void METHOD_1 ( TYPE_1 status , TYPE_2 response ) { TYPE_3 . METHOD_2 ( VAR_2 , ( STRING_1 + ( status . METHOD_3 ( ) ) ) ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",3375
"protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( INT_1 ) ; if ( VAR_1 != null ) { METHOD_3 ( VAR_1 , 0.0F ) ; } }","protected void METHOD_1 ( ) { METHOD_3 ( METHOD_2 ( INT_1 ) , 0.0F ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",3378
public java.lang.String METHOD_1 ( ) { java.lang.String str = java.lang.Integer.toString ( VAR_1 ) ; return str ; },public java.lang.String METHOD_1 ( ) { return java.lang.Integer.toString ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3380
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; if ( ( VAR_5 ) == null ) { METHOD_3 ( ) ; } return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",3381
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 , VAR_1 ) ; TYPE_3 VAR_4 = VAR_1 . METHOD_4 ( VAR_5 ) ; VAR_4 . METHOD_5 ( VAR_6 ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 , VAR_1 ) ; return true ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",3382
public TYPE_1 METHOD_1 ( long id ) { TYPE_1 VAR_1 = this . VAR_2 . METHOD_2 ( id ) ; TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( long id ) { return this . VAR_2 . METHOD_2 ( id ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",3385
"public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > result = new java.util.ArrayList ( this . VAR_1 ) ; VAR_2 . add ( 0 , this . VAR_3 ) ; return result ; }",public java.util.List < TYPE_1 > METHOD_1 ( ) { return this . VAR_1 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead']",3388
"protected void METHOD_1 ( ) { final java.lang.String name = TYPE_1 . METHOD_2 ( getName ( ) , VAR_1 ) ; final java.lang.String value = VAR_2 ; METHOD_3 ( ) . METHOD_4 ( name , value , this , METHOD_5 ( ) , METHOD_6 ( ) ) ; }","protected void METHOD_1 ( ) { final java.lang.String name = TYPE_1 . METHOD_2 ( getName ( ) , VAR_1 ) ; final java.lang.String value = ""false"" ; METHOD_3 ( ) . METHOD_4 ( name , value , this , METHOD_5 ( ) , METHOD_6 ( ) ) ; }","['Insert Literal', 'Delete FieldRead']",3389
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_3 = VAR_2 . METHOD_4 ( VAR_4 . id ) ; VAR_5 . assertThat ( VAR_3 , TYPE_3 . METHOD_5 ( ) ) ; }","public void METHOD_1 ( ) { long id = VAR_2 . METHOD_3 ( TYPE_2 . METHOD_2 ( ) ) ; TYPE_1 VAR_3 = VAR_2 . METHOD_4 ( id ) ; VAR_5 . assertThat ( VAR_3 , TYPE_3 . METHOD_5 ( ) ) ; }","['Update LocalVariable', 'Update TypeReference', 'Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Insert VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead']",3392
"protected void METHOD_1 ( long size , TYPE_1 VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_2 , size ) ; }","protected void METHOD_1 ( long size , TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( VAR_3 , size ) ; }","['Move TypeAccess', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3394
"public TYPE_1 METHOD_1 ( TYPE_2 file , java.lang.String name ) { TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) . METHOD_2 ( STRING_2 ) . METHOD_2 ( name ) ; return VAR_1 . METHOD_3 ( file ) ; }",public TYPE_1 METHOD_1 ( TYPE_2 file ) { TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) . METHOD_2 ( STRING_2 ) ; return VAR_1 . METHOD_3 ( file ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Invocation']",3395
"public int METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; return java.lang.Integer.parseInt ( VAR_2 . METHOD_3 ( STRING_2 , VAR_1 ) ) ; }","public int METHOD_1 ( ) { return java.lang.Integer.parseInt ( VAR_2 . METHOD_3 ( STRING_2 , null ) ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3396
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . assertTrue ( VAR_2 . METHOD_3 ( new TYPE_3 ( INT_1 , INT_2 ) , INT_3 ) ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",3397
public void handle ( TYPE_1 t ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_1 ( STRING_1 ) ; java.io.File file = VAR_1 . METHOD_2 ( VAR_2 ) ; },public void handle ( TYPE_1 t ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",3398
"public TYPE_1 METHOD_1 ( java.lang.String name , int VAR_1 ) { TYPE_1 temp = new TYPE_1 ( name , id , VAR_1 ) ; VAR_2 . add ( temp ) ; ( id ) ++ ; return temp ; }",public TYPE_1 METHOD_1 ( ) { java.lang.String name ; },"['Update LocalVariable', 'Move TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldWrite', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Return']",3399
public void METHOD_1 ( java.lang.Boolean VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 == null ) { TYPE_2 . METHOD_3 ( STRING_1 ) ; return ; } VAR_2 . METHOD_4 ( VAR_3 ) ; },public void METHOD_1 ( java.lang.Boolean VAR_1 ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",3401
"public static int METHOD_1 ( TYPE_1 VAR_1 , java.lang.String id , int VAR_2 ) { int VAR_3 = VAR_1 . METHOD_1 ( id , VAR_2 ) ; return VAR_3 ; }","public static int METHOD_1 ( TYPE_1 VAR_1 , java.lang.String id , int VAR_2 ) { return VAR_1 . METHOD_1 ( id , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3402
"public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( VAR_1 ) ; }",public void METHOD_1 ( ) throws java.io.IOException { METHOD_3 ( new TYPE_1 ( ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",3403
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( STRING_1 ) ) ) ; return ( VAR_1 . METHOD_3 ( ) ) > INT_1 ; },public boolean METHOD_1 ( ) { return false ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",3404
"public void METHOD_1 ( TYPE_1 event , float x , float y ) { VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 , STRING_2 ) ; VAR_3 . show ( VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 event , float x , float y ) { VAR_1 . METHOD_2 ( ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",3405
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; java.lang.String VAR_2 = STRING_1 ; intent . METHOD_2 ( STRING_2 , VAR_2 ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; METHOD_3 ( intent ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3406
"public java.lang.String METHOD_1 ( ) { int VAR_1 = java.lang.Integer.parseInt ( VAR_2 ) ; if ( VAR_1 < INT_1 ) { return ""0"" + ( VAR_2 ) ; } else { return VAR_2 ; } }",public java.lang.String METHOD_1 ( ) { return VAR_2 ; },"['Move Return', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",3407
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_2 > VAR_3 = METHOD_3 ( java.util.Arrays.asList ( VAR_1 ) ) ; METHOD_4 ( VAR_3 ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return VAR_1 ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3410
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 id = new TYPE_2 ( VAR_1 . METHOD_2 ( STRING_1 ) , VAR_1 . METHOD_2 ( STRING_2 ) ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable']",3412
private boolean METHOD_1 ( ) { TYPE_1 type = METHOD_2 ( ) ; return ( ( VAR_1 ) == type ) || ( TYPE_2 . METHOD_3 ( type ) ) ; },private boolean METHOD_1 ( int index ) { TYPE_1 type = METHOD_2 ( index ) ; return ( ( VAR_1 ) == type ) || ( TYPE_2 . METHOD_3 ( type ) ) ; },"['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead']",3413
"public static void main ( java.lang.String [ ] args ) { java.util.ArrayList < TYPE_1 > VAR_1 = TYPE_1 . METHOD_1 ( ) ; java.util.ArrayList < TYPE_2 > VAR_2 = TYPE_2 . METHOD_1 ( ) ; TYPE_3 VAR_3 = new TYPE_4 ( VAR_1 , INT_1 , VAR_2 ) ; }",public static void main ( java.lang.String [ ] args ) { java.util.ArrayList < TYPE_1 > VAR_1 = TYPE_1 . METHOD_1 ( ) ; java.util.ArrayList < TYPE_2 > VAR_2 = TYPE_2 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",3414
private boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { boolean result = super . add ( VAR_1 ) ; if ( result ) { VAR_1 . METHOD_2 ( this ) ; METHOD_3 ( VAR_1 ) ; } return result ; },private void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { if ( super . add ( VAR_1 ) ) { VAR_1 . METHOD_2 ( this ) ; METHOD_3 ( VAR_1 ) ; } },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",3415
"private final java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String className = VAR_1 . METHOD_2 ( ) ; return VAR_2 . replace ( CHAR_1 , CHAR_2 ) . replace ( CHAR_3 , CHAR_4 ) ; }","private final java.lang.String METHOD_1 ( java.lang.String className ) { return VAR_2 . replace ( CHAR_1 , CHAR_2 ) . replace ( CHAR_3 , CHAR_4 ) ; }","['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",3416
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( ) ; VAR_2 . start ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . start ( ) ; },"['Insert ConstructorCall', 'Delete TypeAccess', 'Delete Invocation']",3418
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { int index = VAR_1 . METHOD_2 ( this ) ; if ( index != ( - 1 ) ) { VAR_1 . METHOD_3 ( index ) ; } } },public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; } },"['Insert Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3420
public final void METHOD_1 ( java.lang.String filename ) { java.io.InputStream VAR_1 = VAR_2 . METHOD_2 ( filename ) ; if ( VAR_1 == null ) return ; METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ; },public final void METHOD_1 ( java.lang.String filename ) { METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 . METHOD_2 ( filename ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3421
"private void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }",private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",3423
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 ; int VAR_4 ; return java.lang.Integer . METHOD_1 ( VAR_2 . METHOD_2 ( ) . size ( ) , VAR_1 . METHOD_2 ( ) . size ( ) ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return java.lang.Integer . METHOD_1 ( VAR_2 . METHOD_2 ( ) . size ( ) , VAR_1 . METHOD_2 ( ) . size ( ) ) ; }","['Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable']",3425
"protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { boolean VAR_2 = TYPE_4 . METHOD_2 ( ) ; return TYPE_5 . METHOD_3 ( VAR_1 , VAR_2 ) ; }",protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { return TYPE_5 . METHOD_3 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3427
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_1 != null ) { return TYPE_1 . METHOD_5 ( VAR_1 ) ; } return null ; },public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_5 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",3428
private boolean METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( ) . METHOD_2 ( VAR_1 ) ; },private boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 n = new TYPE_1 ( ) ; return n . METHOD_2 ( VAR_1 ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead']",3430
"public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( VAR_2 ) ; if ( ""false"" . equals ( VAR_1 ) ) { return null ; } return VAR_1 ; }",public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Literal', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3431
protected TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = getIntent ( ) . METHOD_2 ( VAR_2 ) ; return TYPE_2 . METHOD_3 ( VAR_1 ) ; },protected TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3433
private java.lang.Integer METHOD_1 ( java.lang.Integer VAR_1 ) { java.lang.Integer VAR_2 = VAR_3 . getValue ( ) ; if ( VAR_1 > VAR_2 ) { TYPE_1 temp = VAR_4 ; VAR_4 = VAR_5 ; VAR_5 = temp ; return VAR_2 ; } return VAR_1 ; },private java.lang.Integer METHOD_1 ( java.lang.Integer VAR_1 ) { if ( VAR_1 > ( VAR_3 . getValue ( ) ) ) { TYPE_1 temp = VAR_4 ; VAR_4 = VAR_5 ; VAR_5 = temp ; } return VAR_1 ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",3434
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( STRING_1 ) ; TYPE_2 . METHOD_4 ( STRING_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( this , STRING_2 ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( STRING_1 ) ; TYPE_2 . METHOD_4 ( STRING_1 ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable']",3435
"public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 results = VAR_2 . METHOD_2 ( VAR_3 , new java.lang.Object [ ] { VAR_1 } , new TYPE_2 ( VAR_4 class ) ) ; VAR_5 . info ( ( STRING_1 + results ) ) ; return results ; }","public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 results = VAR_2 . METHOD_2 ( VAR_3 , new java.lang.Object [ ] { VAR_1 } , VAR_4 class ) ; VAR_5 . info ( ( STRING_1 + results ) ) ; return results ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete ConstructorCall']",3437
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ( STRING_1 + ( VAR_1 ) ) ) ; METHOD_3 ( STRING_2 ) ; TYPE_1 VAR_2 = getActivity ( ) ; if ( VAR_2 != null ) { METHOD_4 ( false ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ( STRING_1 + ( VAR_1 ) ) ) ; METHOD_3 ( STRING_2 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",3439
"private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < TYPE_1 > list = new java.util.ArrayList < TYPE_1 > ( ) ; return METHOD_1 ( VAR_1 , list ) ; }","private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 , new java.util.ArrayList < > ( ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3440
"public void add ( int index , TYPE_1 element ) { int i = 0 ; }","public void add ( int index , TYPE_1 element ) { }","['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",3441
"public java.lang.Object METHOD_1 ( java.lang.String VAR_1 , java.lang.Long VAR_2 ) { if ( VAR_3 . equals ( INT_1 ) ) { java.lang.Long VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; return METHOD_3 ( VAR_2 , VAR_4 ) ; } return STRING_1 ; }",public java.lang.String METHOD_1 ( java.lang.Long VAR_2 ) { return STRING_1 ; },"['Update TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",3442
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; VAR_5 . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; VAR_5 . METHOD_1 ( VAR_1 ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",3445
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { java.lang.System.out.println ( STRING_1 ) ; java.lang.String filePath = this . VAR_2 . METHOD_2 ( VAR_1 ) ; java.lang.String result = this . VAR_2 . METHOD_3 ( VAR_1 , filePath ) ; return result ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { java.lang.System.out.println ( STRING_1 ) ; java.lang.String filePath = this . VAR_2 . METHOD_2 ( VAR_1 ) ; java.lang.String result = this . VAR_2 . METHOD_3 ( filePath ) ; return result ; }",['Delete VariableRead'],3446
public void handle ( TYPE_1 VAR_1 ) { boolean VAR_2 = VAR_3 ; VAR_4 . METHOD_1 ( ) ; METHOD_2 ( ) ; },public void handle ( TYPE_1 VAR_1 ) { VAR_4 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete Invocation']",3447
public static void METHOD_1 ( double VAR_1 ) { java.lang.System.out.println ( VAR_1 ) ; VAR_2 = VAR_1 ; TYPE_1 TYPE_2 = new TYPE_1 ( ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; },public static void METHOD_1 ( double VAR_1 ) { VAR_2 = VAR_1 ; },"['Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",3448
public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; java.util.List < TYPE_1 > VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; VAR_3 . get ( 0 ) . METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3449
"public TYPE_1 [ ] METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( getClass ( ) ) ; VAR_2 . info ( STRING_1 ) ; return new TYPE_1 [ ] { new TYPE_1 ( ""0"" , STRING_2 , 0 , STRING_3 ) } ; }","public TYPE_1 [ ] METHOD_1 ( ) { return new TYPE_1 [ ] { new TYPE_1 ( ""0"" , STRING_2 , 0 , STRING_3 ) } ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",3450
"public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.util.Date date , TYPE_3 type ) throws TYPE_4 { java.util.Date VAR_2 = METHOD_2 ( date ) ; java.util.Date to = METHOD_3 ( date ) ; return METHOD_1 ( VAR_1 , VAR_2 , to , type ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.util.Date date , TYPE_3 type ) throws TYPE_4 { java.util.Date VAR_2 = date ; java.util.Date to = date ; return METHOD_1 ( VAR_1 , VAR_2 , to ) ; }","['Move VariableRead', 'Move VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",3451
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 , position ) ; if ( VAR_2 != null ) VAR_3 . show ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_1 , position ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",3452
public byte [ ] METHOD_1 ( int VAR_1 ) { TYPE_1 buf = METHOD_2 ( VAR_1 ) ; if ( buf != null ) return VAR_2 . array ( ) ; return null ; },public byte [ ] METHOD_1 ( int VAR_1 ) { return METHOD_2 ( VAR_1 ) . array ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",3454
public byte [ ] METHOD_1 ( java.lang.String key ) { TYPE_1 VAR_1 = this . METHOD_2 ( key ) ; if ( VAR_1 == null ) return null ; return VAR_2 . array ( ) ; },public byte [ ] METHOD_1 ( java.lang.String key ) { return this . METHOD_2 ( key ) . array ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",3455
public TYPE_1 get ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( null ) ; VAR_2 . METHOD_3 ( null ) ; return VAR_2 ; },public TYPE_1 get ( java.lang.String VAR_1 ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",3456
"public void METHOD_1 ( int VAR_1 ) throws java.io.IOException { int VAR_2 = VAR_1 + ( VAR_3 ) ; VAR_4 . add ( new TYPE_1 ( this . VAR_5 , null , VAR_2 , this . VAR_5 . METHOD_2 ( VAR_2 ) ) ) ; }","public void METHOD_1 ( int VAR_1 ) throws java.io.IOException { int VAR_2 = VAR_1 ; VAR_4 . add ( new TYPE_1 ( this . VAR_5 , null , VAR_2 , this . VAR_5 . METHOD_2 ( VAR_1 ) ) ) ; }","['Move VariableRead', 'Update VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",3457
"public void METHOD_1 ( ) { java.lang.Long VAR_1 = 0L ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 . String class ) ; }","public void METHOD_1 ( ) { java.lang.Long VAR_1 = 0L ; java.lang.String string = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 . String class ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation']",3458
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_2 . start ( ) ; }",protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3459
"public void METHOD_1 ( android.view.View view ) { METHOD_2 ( VAR_1 ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( intent ) ; }",public void METHOD_1 ( android.view.View view ) { METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3461
"private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; return VAR_4 ; }","private static TYPE_1 METHOD_1 ( java.lang.String VAR_4 , int VAR_2 , int VAR_3 ) { return new TYPE_1 ( ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_3 ) . METHOD_4 ( VAR_4 ) ; }","['Update Parameter', 'Insert Invocation', 'Insert Invocation', 'Move VariableRead', 'Move Invocation', 'Move VariableRead', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3463
"public static TYPE_1 METHOD_1 ( TYPE_1 [ ] [ ] VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_1 t = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_1 [ VAR_2 ] [ VAR_3 ] = t ; return t ; }","public static TYPE_1 METHOD_1 ( TYPE_1 [ ] [ ] VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_1 t = new TYPE_1 ( ) ; VAR_1 [ VAR_2 ] [ VAR_3 ] = t ; return t ; }","['Update ConstructorCall', 'Delete VariableRead', 'Delete VariableRead']",3464
"private float METHOD_1 ( java.util.List < java.lang.Float > list ) { java.util.Map < java.lang.String , java.lang.Integer > VAR_1 = new TYPE_1 < java.lang.String , java.lang.Integer > ( ) ; return 0 ; }",private float METHOD_1 ( java.util.List < java.lang.Float > list ) { return 0 ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",3465
public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 ; if ( VAR_2 != null ) { VAR_2 . METHOD_1 ( ) ; } },public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3466
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 t = this . VAR_3 . put ( VAR_1 , VAR_2 ) ; if ( t != null ) { t . METHOD_2 ( ) ; } return VAR_2 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 ) { this . VAR_3 . put ( VAR_1 , VAR_2 ) ; return VAR_2 ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3469
"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; this . METHOD_2 ( VAR_1 , 1 ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",3470
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_2 ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_3 . get ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3471
private void METHOD_1 ( boolean state ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . update ( state ) ; },private void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) . update ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead']",3472
public TYPE_1 METHOD_1 ( ) { TYPE_1 obj = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( obj != null ) { return obj ; } return new TYPE_1 ( ) ; },public TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete ConstructorCall']",3473
public static java.lang.String METHOD_1 ( ) { TYPE_1 TYPE_2 = TYPE_1 . METHOD_2 ( ) ; if ( TYPE_2 == null ) { return null ; } return TYPE_2 . METHOD_3 ( ) ; },public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3474
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( new TYPE_3 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_4 ( ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead']",3475
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_3 ( VAR_2 ) ) ) ; java.lang.String VAR_3 = METHOD_4 ( VAR_4 . toString ( ) ) ; VAR_5 . setText ( VAR_3 ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_3 ( VAR_2 ) ) ) ; java.lang.String VAR_3 = METHOD_4 ( output ) ; VAR_5 . setText ( VAR_3 ) ; },"['Insert FieldRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",3476
public java.lang.String METHOD_1 ( java.net.URL url ) { java.lang.String fileName = url . METHOD_2 ( ) ; return VAR_1 . substring ( ( ( fileName . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ; },public java.lang.String METHOD_1 ( ) { java.lang.String fileName = url . METHOD_2 ( ) ; return VAR_1 . substring ( fileName . METHOD_3 ( CHAR_1 ) ) ; },"['Insert FieldRead', 'Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator']",3477
"public java.lang.String METHOD_1 ( ) throws java.io.IOException , TYPE_1 , TYPE_2 { java.lang.String VAR_1 = METHOD_2 ( STRING_1 ) ; java.lang.String response = METHOD_3 ( VAR_1 ) ; return response ; }","public java.lang.String METHOD_1 ( ) throws java.io.IOException , TYPE_1 , TYPE_2 { java.lang.String response = METHOD_3 ( STRING_1 ) ; return response ; }","['Update LocalVariable', 'Update Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",3478
"public void METHOD_1 ( ) { this . METHOD_2 ( ) . info ( STRING_1 ) ; double VAR_1 = METHOD_3 ( ) ; TYPE_1 VAR_2 = TYPE_1 . METHOD_4 ( METHOD_5 ( ) , METHOD_3 ( ) ) ; METHOD_6 ( VAR_2 ) ; }","public void METHOD_1 ( ) { this . METHOD_2 ( ) . info ( STRING_1 ) ; TYPE_1 VAR_2 = TYPE_1 . METHOD_4 ( METHOD_5 ( ) , METHOD_3 ( ) ) ; METHOD_6 ( VAR_2 ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable']",3479
public void METHOD_1 ( ) { VAR_1 = this ; METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { VAR_1 = this ; METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3480
public static void main ( java.lang.String [ ] args ) { TYPE_1 c = new TYPE_1 ( ) ; c . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",3482
"public void METHOD_1 ( ) { TYPE_1 f = ( ( TYPE_1 ) ( new TYPE_1 ( VAR_1 ) . METHOD_2 ( VAR_2 , ( ( VAR_3 ) + ( VAR_4 . METHOD_3 ( ) ) ) ) ) ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable']",3483
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_2 ( this ) ) ; },protected void METHOD_1 ( ) { TYPE_2 event = new TYPE_2 ( this ) ; TYPE_1 . METHOD_2 ( event ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead']",3484
"protected void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = METHOD_2 ( VAR_4 ) ; VAR_2 . METHOD_3 ( VAR_3 , VAR_1 ) ; }","protected void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { VAR_2 . METHOD_3 ( VAR_4 , VAR_1 ) ; }","['Move TypeAccess', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3485
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( context , ( ( TYPE_3 ) ( METHOD_3 ( position ) ) ) ) ; VAR_3 . show ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( context , VAR_1 , position ) ; VAR_3 . show ( ) ; }","['Update Invocation', 'Move Invocation', 'Move FieldRead', 'Insert VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation']",3486
public boolean METHOD_1 ( ) { double VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; return ( VAR_3 ) && ( ( VAR_4 ) >= VAR_1 ) ; },public boolean METHOD_1 ( ) { return VAR_3 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",3488
"void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_2 > VAR_2 ) throws java.lang.Exception { for ( TYPE_3 p : VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( p ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; } }","void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_2 > VAR_2 ) throws java.lang.Exception { for ( TYPE_2 p : VAR_2 ) { VAR_1 . METHOD_2 ( p ) ; } }","['Insert LocalVariable', 'Move TypeReference', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",3489
"public TYPE_1 METHOD_1 ( ) { TYPE_1 state = VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( state . METHOD_3 ( ) , false ) ; return state ; }",public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",3491
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 < java.lang.Integer > VAR_2 = new TYPE_2 ( ) ; METHOD_2 ( VAR_3 , VAR_2 ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_3 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",3492
"private java.lang.Integer METHOD_1 ( ) { TYPE_1 < TYPE_2 > . TYPE_3 VAR_1 = new TYPE_3 ( ) ; java.lang.Object [ ] params = null ; java.lang.Integer VAR_2 = METHOD_2 ( STRING_1 , params , VAR_1 ) ; return VAR_2 ; }","private java.lang.Integer METHOD_1 ( ) { TYPE_1 < TYPE_2 > . TYPE_3 VAR_1 = new TYPE_3 ( ) ; java.lang.Object [ ] params = null ; return METHOD_2 ( STRING_1 , params , VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3495
"public void METHOD_1 ( ) { int response = TYPE_1 . METHOD_2 ( null , STRING_1 , STRING_2 , VAR_1 ) ; if ( response == ( VAR_2 ) ) { TYPE_2 . METHOD_3 ( ) ; this . METHOD_4 ( ) ; } }",public void METHOD_1 ( ) { TYPE_2 . METHOD_3 ( ) ; this . METHOD_4 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",3496
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , INT_1 , INT_1 , false ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( ) { return VAR_2 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3498
"public void METHOD_1 ( java.lang.Integer response ) { TYPE_1 VAR_1 = METHOD_2 ( getString ( VAR_2 ) , VAR_3 ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( STRING_1 , false ) . METHOD_5 ( ) ; METHOD_6 ( ) ; }",public void METHOD_1 ( java.lang.Integer response ) { METHOD_6 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Invocation']",3499
"public void update ( TYPE_1 VAR_1 , java.lang.Object arg ) { if ( arg instanceof TYPE_2 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( arg ) ) ; VAR_3 . add ( VAR_2 ) ; } }","public void update ( TYPE_1 VAR_1 , java.lang.Object arg ) { }","['Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3500
"public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; if ( ""true"" . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 , STRING_1 ) ) ) { VAR_1 . METHOD_4 ( VAR_3 ) ; } return VAR_1 ; }",public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",3501
"public TYPE_1 get ( java.lang.String VAR_1 , java.io.File VAR_2 ) throws java.io.IOException { TYPE_1 response = get ( VAR_3 , VAR_1 ) ; METHOD_1 ( response , VAR_2 ) ; return response ; }","public TYPE_1 get ( java.lang.String VAR_1 , java.io.File VAR_2 ) throws java.io.IOException { return get ( VAR_3 , VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3502
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_4 ( ) ; },"['Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",3504
"public static void main ( java.lang.String [ ] args ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; java.lang.System.out.println ( TYPE_1 . METHOD_1 ( STRING_3 , STRING_4 ) ) ; java.lang.System.out.println ( VAR_3 . size ( ) ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",3506
"private long METHOD_1 ( java.io.File path ) { long size = path . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , ( STRING_1 + size ) ) ; return size ; }",private long METHOD_1 ( java.io.File path ) { return path . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead']",3507
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_3 . METHOD_4 ( VAR_5 , this ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation']",3508
"public void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( VAR_1 ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3510
"public void METHOD_1 ( java.lang.String VAR_1 ) { boolean VAR_2 = METHOD_2 ( VAR_3 , VAR_1 , 0 ) ; if ( VAR_2 ) { java.lang.System.out.println ( ( VAR_1 + STRING_1 ) ) ; } else { java.lang.System.out.println ( ( VAR_1 + STRING_2 ) ) ; } }","public boolean METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( VAR_3 , VAR_1 , 0 ) ; }","['Update TypeReference', 'Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",3513
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3516
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( TYPE_2 ) . METHOD_3 ( ) . METHOD_4 ( ) ; },public void METHOD_1 ( ) { TYPE_2 . METHOD_3 ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete Invocation', 'Delete Invocation']",3517
"public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 . put ( VAR_1 , VAR_2 ) ; ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; }",public static void METHOD_1 ( TYPE_1 VAR_1 ) { ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_2 ( ) . METHOD_3 ( new TYPE_2 ( ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3518
"private static TYPE_1 METHOD_1 ( boolean VAR_1 ) { TYPE_2 args = new TYPE_2 ( ) ; args . METHOD_2 ( VAR_2 , VAR_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_3 ( args ) ; return VAR_3 ; }",private static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3519
"TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( this , new TYPE_2 ( ) ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; return VAR_1 ; }","TYPE_1 METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( this , new TYPE_2 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3521
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( new TYPE_4 ( VAR_3 ) ) . build ( ) ; return VAR_2 ; },TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) . build ( ) ; return VAR_2 ; },"['Update Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation']",3522
public long METHOD_1 ( ) { long VAR_1 = java.lang.Math.round ( ( ( ( METHOD_2 ( ) ) * INT_1 ) / ( METHOD_3 ( ) ) ) ) ; return VAR_1 ; },public long METHOD_1 ( ) { return java.lang.Math.round ( ( ( ( METHOD_2 ( ) ) * INT_1 ) / ( METHOD_3 ( ) ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3523
public static java.lang.String getValue ( java.lang.String key ) { java.lang.String value = VAR_1 . get ( key ) ; if ( value == null ) { return STRING_1 ; } return value ; },public static java.lang.String getValue ( java.lang.String key ) { return VAR_1 . get ( key ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3524
public boolean METHOD_1 ( java.lang.String fileName ) { boolean VAR_1 = VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( fileName ) ) ; if ( ! VAR_1 ) { } return VAR_1 ; },public boolean METHOD_1 ( java.lang.String fileName ) { return VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( fileName ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If', 'Delete VariableRead']",3525
public boolean METHOD_1 ( ) { boolean isEmpty = ! ( this . METHOD_2 ( ) . isEmpty ( ) ) ; return isEmpty ; },public boolean METHOD_1 ( ) { boolean isEmpty = this . METHOD_2 ( ) . isEmpty ( ) ; return isEmpty ; },"['Move Invocation', 'Delete UnaryOperator']",3527
public int METHOD_1 ( ) { int VAR_1 = java.lang.Integer . METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 ) . getValue ( ) ) ; if ( ( VAR_1 >= 0 ) && ( VAR_1 <= INT_1 ) ) { VAR_1 = - 1 ; } return VAR_1 ; },public int METHOD_1 ( ) { int VAR_1 = ( ( int ) ( VAR_2 . METHOD_3 ( STRING_1 ) ) ) ; if ( ( VAR_1 >= 0 ) && ( VAR_1 <= INT_1 ) ) { VAR_1 = - 1 ; } return VAR_1 ; },"['Move Invocation', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",3528
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . assertEquals ( true , ( VAR_1 != null ) ) ; }",public void METHOD_1 ( ) { new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation']",3529
"public TYPE_1 METHOD_1 ( int id ) throws TYPE_2 , TYPE_3 { final TYPE_1 VAR_1 = this . VAR_2 . METHOD_2 ( id ) ; if ( VAR_1 == null ) throw new TYPE_2 ( id ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( int id ) throws TYPE_2 { final TYPE_1 VAR_1 = this . METHOD_1 ( id ) ; if ( VAR_1 == null ) throw new TYPE_2 ( id ) ; return VAR_1 ; },"['Update Invocation', 'Move ThisAccess', 'Delete TypeReference', 'Delete FieldRead']",3530
"public boolean isEmpty ( ) { TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 = METHOD_1 ( VAR_2 ) ; if ( VAR_1 == null ) return true ; return VAR_3 . isEmpty ( ) ; }",public boolean isEmpty ( ) { return METHOD_1 ( VAR_2 ) . isEmpty ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",3531
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; return VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_3 ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3532
"public static void list ( boolean VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_1 ( ) ; java.lang.String VAR_3 = TYPE_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 ) ; }","public static void list ( ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_1 ( ) ; boolean VAR_1 = false ; java.lang.String VAR_3 = TYPE_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 ) ; }","['Insert LocalVariable', 'Move TypeReference', 'Insert Literal', 'Delete Parameter']",3533
"public void METHOD_1 ( java.lang.Integer id ) { java.lang.Integer VAR_1 = this . id ; this . id = id ; VAR_2 . METHOD_2 ( ""id"" , VAR_1 , id ) ; }",public void METHOD_1 ( java.lang.Integer id ) { this . id = id ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",3534
"private void METHOD_1 ( java.lang.String VAR_1 ) { java.util.Map < java.lang.String , TYPE_1 > VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; }","private void METHOD_1 ( java.lang.String VAR_1 ) { java.util.Map < java.lang.String , TYPE_1 > VAR_2 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) , VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; }",['Update TypeAccess'],3535
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; VAR_4 . add ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . add ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3536
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 type , TYPE_4 VAR_2 ) throws TYPE_5 { TYPE_6 VAR_3 = TYPE_7 . METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_4 ) ; return VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 type , TYPE_4 VAR_2 ) throws TYPE_5 { TYPE_6 VAR_3 = TYPE_7 . METHOD_2 ( STRING_1 ) ; return VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",3537
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . METHOD_2 ( this . VAR_1 ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead']",3538
public static void main ( java.lang.String [ ] args ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 ) ; VAR_1 . METHOD_1 ( VAR_2 ) ; },public static void main ( java.lang.String [ ] args ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( STRING_1 ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",3539
public java.lang.String METHOD_1 ( ) { TYPE_1 temp = VAR_1 . getText ( ) ; if ( temp != null ) { return VAR_2 . toString ( ) ; } else { return STRING_1 ; } },public java.lang.String METHOD_1 ( ) { return VAR_1 . getText ( ) . toString ( ) ; },"['Insert Return', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",3540
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = this . METHOD_2 ( ) ; if ( VAR_1 instanceof TYPE_1 ) return ( ( TYPE_1 ) ( VAR_1 ) ) ; else return null ; },public TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( this . METHOD_2 ( ) ) ) ; },"['Insert Return', 'Move Invocation', 'Move TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",3542
"public java.lang.String get ( TYPE_1 url ) { java.lang.String query = VAR_1 . query ( ) ; return VAR_2 . substring ( 1 , ( ( VAR_2 . length ( ) ) - 1 ) ) ; }",public java.lang.String get ( TYPE_1 url ) { return VAR_1 . query ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation']",3544
"protected java.lang.String METHOD_1 ( java.lang.Object key ) { java.lang.String VAR_1 = java.lang.String.format ( STRING_1 , java.lang.String . METHOD_2 ( key ) , java.lang.String . METHOD_2 ( key . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( STRING_2 , key , VAR_1 ) ; return VAR_1 ; }",protected java.lang.String METHOD_1 ( java.lang.Object key ) { return java.lang.String . METHOD_2 ( key ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3546
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; java.util.List list = METHOD_3 ( STRING_2 , VAR_1 ) ; return ( ( TYPE_1 ) ( VAR_3 . get ( 0 ) ) ) ; }",public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; java.util.List list = METHOD_3 ( ( STRING_2 + VAR_1 ) ) ; return ( ( TYPE_1 ) ( VAR_3 . get ( 0 ) ) ) ; },"['Insert BinaryOperator', 'Insert FieldRead', 'Move VariableRead', 'Delete TypeAccess']",3548
"public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ; if ( true ) { return METHOD_2 ( ) ; } else { } return METHOD_2 ( ) ; }","public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete Literal', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",3549
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( ) ; METHOD_4 ( ) . METHOD_5 ( ) . replace ( VAR_4 , VAR_3 ) . commit ( ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",3552
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 ) ; VAR_5 = view . METHOD_3 ( VAR_6 ) ; VAR_5 . METHOD_4 ( this ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_4 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Assignment', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete VariableRead']",3554
"private void METHOD_1 ( ) { METHOD_2 ( ) ; android.content.Intent data = new android.content.Intent ( ) ; data . METHOD_3 ( VAR_1 , filePath ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; }",private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",3556
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_4 . execute ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3558
"public TYPE_1 getTime ( int VAR_1 , java.util.Calendar VAR_2 ) throws TYPE_2 { TYPE_3 date = METHOD_1 ( VAR_1 , VAR_2 ) ; return getTime ( date ) ; }","public TYPE_1 getTime ( int VAR_1 , java.util.Calendar VAR_2 ) throws TYPE_2 { return new TYPE_1 ( METHOD_1 ( VAR_1 , VAR_2 ) . getTime ( ) ) ; }","['Insert ConstructorCall', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3559
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 VAR_3 = this . VAR_4 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3560
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_1 error = new TYPE_1 ( ) . METHOD_3 ( VAR_2 , STRING_2 ) ; TYPE_3 . METHOD_4 ( error ) ; VAR_3 . METHOD_1 ( error ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_3 . METHOD_1 ( new TYPE_1 ( ) . METHOD_3 ( VAR_2 , STRING_2 ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3561
public static void main ( java.lang.String [ ] args ) { java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_1 ( ) ; int k = INT_1 ; int i = INT_2 ; int j = INT_3 ; },public static void main ( java.lang.String [ ] args ) { java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; int VAR_3 = int . class ; i = INT_2 ; int j = INT_3 ; },"['Insert LocalVariable', 'Insert Assignment', 'Move TypeReference', 'Insert FieldRead', 'Insert FieldWrite', 'Move FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable']",3562
public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_3 ) ) . add ( VAR_4 ) . add ( VAR_5 ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; return VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_3 ) ) . add ( VAR_4 ) . add ( VAR_5 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3564
private static java.lang.String get ( TYPE_1 t ) { java.lang.String out = TYPE_2 . METHOD_1 ( t . METHOD_2 ( ) ) ; java.lang.System.out.println ( ( STRING_1 + out ) ) ; return out ; },private static java.lang.String get ( TYPE_1 t ) { return TYPE_2 . METHOD_1 ( t . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead']",3567
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; android.content.Intent i = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( i ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete Invocation', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3569
public static void main ( java.lang.String [ ] args ) { java.lang.String str = TYPE_1 . METHOD_1 ( ) ; java.lang.System.out.println ( str ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",3570
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { boolean VAR_3 = TYPE_3 . METHOD_2 ( VAR_2 , VAR_4 , VAR_1 ) ; if ( VAR_3 ) { this . METHOD_3 ( ) ; } return VAR_3 ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return TYPE_3 . METHOD_2 ( VAR_2 , VAR_4 , VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",3571
"public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , VAR_1 ) ; METHOD_5 ( VAR_3 ) ; }","public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ) ; METHOD_5 ( TYPE_2 . METHOD_3 ( METHOD_4 ( ) , VAR_1 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3572
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( INT_1 ) ; VAR_1 . METHOD_2 ( ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3573
public void METHOD_1 ( int VAR_1 ) { int VAR_2 = this . size ( ) ; for ( int i = VAR_1 ; i < VAR_2 ; i ++ ) { this . remove ( VAR_1 ) ; } },public void METHOD_1 ( int VAR_1 ) { for ( int i = VAR_1 ; i < ( this . size ( ) ) ; i ++ ) { this . remove ( VAR_1 ) ; } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3574
void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 ) ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; update ( ) ; } },void METHOD_1 ( ) { ( ( TYPE_1 ) ( VAR_2 ) ) . METHOD_3 ( ) ; update ( ) ; },"['Insert Invocation', 'Move Invocation', 'Insert TypeAccess', 'Move TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3575
"public void METHOD_1 ( boolean VAR_1 ) { int start = METHOD_2 ( ) ; int end = METHOD_3 ( ) ; if ( start < end ) METHOD_4 ( VAR_1 , start , end ) ; state . METHOD_1 ( VAR_1 ) ; }",public void METHOD_1 ( boolean VAR_1 ) { state . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3577
"public void init ( ) { java.net.URL VAR_1 = getClass ( ) . METHOD_1 ( STRING_1 ) ; VAR_2 . METHOD_2 ( STRING_2 , VAR_1 , VAR_3 , VAR_4 class ) ; }","public void init ( ) { VAR_2 . METHOD_2 ( STRING_2 , VAR_3 , VAR_4 class ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3578
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String msg = VAR_2 . getString ( VAR_3 ) ; return VAR_4 . equals ( STRING_1 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return false ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",3580
private TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 VAR_1 = this . VAR_2 . METHOD_1 ( ) ; if ( ! ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) { VAR_4 . error ( STRING_1 ) ; } return VAR_1 ; },private TYPE_1 METHOD_1 ( ) throws TYPE_2 { return this . VAR_2 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",3581
public boolean METHOD_1 ( ) throws java.io.IOException { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; return ( VAR_1 != null ) && ( VAR_3 . equals ( STRING_1 ) ) ; },public boolean METHOD_1 ( ) throws java.io.IOException { return VAR_2 . METHOD_2 ( ) . equals ( STRING_1 ) ; },"['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",3582
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 = METHOD_5 ( VAR_1 ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( this ) ; VAR_1 = METHOD_5 ( VAR_1 ) ; return VAR_1 ; },"['Insert ThisAccess', 'Delete Invocation']",3584
public boolean equals ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( ( VAR_3 . getId ( ) ) == ( this . id ) ) { return true ; } else { return false ; } },public boolean equals ( java.lang.Object VAR_1 ) { return false ; },"['Move Return', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",3587
public static void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.Integer VAR_2 = java.lang.Integer.parseInt ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; },public static void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3589
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; long VAR_1 = TYPE_1 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( this , VAR_1 ) ; TYPE_2 . METHOD_5 ( this , VAR_1 ) ; }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; VAR_2 . METHOD_4 ( this ) ; TYPE_2 . METHOD_5 ( this , VAR_2 ) ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",3591
public java.util.List < java.lang.Object > METHOD_1 ( ) { java.lang.Object [ ] VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; java.util.ArrayList < java.lang.Object > VAR_3 = new java.util.ArrayList < java.lang.Object > ( java.util.Arrays.asList ( VAR_1 ) ) ; return VAR_3 ; },public java.util.List < java.lang.Object > METHOD_1 ( ) { return new java.util.ArrayList < > ( ) ; },"['Insert ConstructorCall', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",3592
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) . METHOD_4 ( VAR_1 ) ; java.util.Set < TYPE_1 > VAR_3 = VAR_4 . METHOD_1 ( ) ; },public void METHOD_1 ( ) throws java.lang.Exception { java.util.Set < TYPE_1 > VAR_3 = VAR_4 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3594
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = VAR_2 ; if ( ( TYPE_3 . METHOD_2 ( VAR_1 ) ) < INT_1 ) { event . METHOD_3 ( true ) ; } },public void METHOD_1 ( TYPE_1 event ) { if ( ( TYPE_3 . METHOD_2 ( VAR_2 ) ) < INT_1 ) { event . METHOD_3 ( true ) ; } },"['Insert TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",3595
"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) . METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ( ( VAR_3 ) | ( VAR_4 ) ) ) ; METHOD_5 ( VAR_1 ) ; }","public void METHOD_1 ( android.view.View view ) { METHOD_5 ( new android.content.Intent ( this , VAR_2 class ) . METHOD_2 ( METHOD_3 ( ) ) ) ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3597
public TYPE_1 < java.util.List < TYPE_2 > > METHOD_1 ( TYPE_3 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( VAR_4 . getId ( ) ) ; return METHOD_3 ( VAR_2 ) ; },public TYPE_1 < java.util.List < TYPE_2 > > METHOD_1 ( TYPE_3 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return METHOD_3 ( VAR_2 ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",3598
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = METHOD_3 ( ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_4 ( true ) ; } },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( true ) ; },"['Insert Invocation', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3599
"public static boolean METHOD_1 ( byte [ ] data , int VAR_1 ) { int VAR_2 = TYPE_1 . METHOD_2 ( data ) ; return ( VAR_2 != VAR_1 ) && ( VAR_2 != 0 ) ; }","public static boolean METHOD_1 ( byte [ ] data , int VAR_1 ) { return ( TYPE_1 . METHOD_2 ( data ) ) != VAR_1 ; }","['Update BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator']",3600
"public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 , this ) ; int a = 1 ; }","public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 , this ) ; }","['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",3601
public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 context = VAR_1 ; while ( context != null ) { context . METHOD_1 ( ) ; context = context . METHOD_2 ( ) ; } },public static void METHOD_1 ( TYPE_1 context ) { while ( context != null ) { context . METHOD_1 ( ) ; context = context . METHOD_2 ( ) ; } },"['Update Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable']",3602
public synchronized boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 ) { METHOD_3 ( ) ; } return VAR_2 ; },public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { METHOD_3 ( ) ; } },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",3603
public java.util.ArrayList < TYPE_1 > METHOD_1 ( int VAR_1 ) { int index = VAR_1 - 1 ; TYPE_1 VAR_2 = VAR_3 . get ( index ) ; VAR_4 . add ( VAR_2 ) ; METHOD_2 ( VAR_1 ) ; return VAR_5 ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; VAR_4 . add ( VAR_2 ) ; METHOD_2 ( VAR_1 ) ; return VAR_5 ; },"['Move VariableRead', 'Delete TypeReference', 'Delete Literal', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",3604
"public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = java.lang.Integer.parseInt ( VAR_1 ) ; int VAR_3 = INT_1 ; return TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }",public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = java.lang.Integer.parseInt ( VAR_1 ) ; return TYPE_1 . METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",3605
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_5 . getName ( ) ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_2 VAR_4 = VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_5 . getName ( ) ) ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; },"['Insert Invocation', 'Move VariableRead', 'Move ConstructorCall', 'Delete VariableRead', 'Delete Invocation']",3608
private long METHOD_1 ( ) { METHOD_2 ( ) ; long VAR_1 = METHOD_3 ( VAR_2 ) ; return ( VAR_3 ) == 0 ? VAR_1 : ( ( ( VAR_3 ) & INT_1 ) < < INT_2 ) | VAR_1 ; },private long METHOD_1 ( ) { METHOD_2 ( ) ; return ( VAR_3 ) == 0 ? VAR_2 : ( ( ( VAR_3 ) & INT_1 ) < < INT_2 ) | ( VAR_2 ) ; },"['Insert FieldRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",3610
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; if ( VAR_4 . METHOD_4 ( false , true ) ) METHOD_5 ( VAR_1 ) ; VAR_2 . METHOD_6 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_4 . METHOD_4 ( false , true ) ) METHOD_5 ( VAR_1 ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3612
public void handle ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_1 ( ) . METHOD_2 ( ) ; TYPE_4 . METHOD_3 ( ( ( TYPE_5 ) ( VAR_2 ) ) ) ; java.lang.System.out.println ( ( ( TYPE_5 ) ( VAR_2 ) ) ) ; },public void handle ( TYPE_1 VAR_1 ) { TYPE_4 . METHOD_3 ( ) ; },"['Insert Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation']",3613
public java.util.List < TYPE_1 > METHOD_1 ( ) { try { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; return this . METHOD_3 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_3 ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } },public java.util.List < TYPE_1 > METHOD_1 ( ) { try { return VAR_2 . METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_3 ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation']",3614
public TYPE_1 METHOD_1 ( java.lang.String title ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( title ) ; return VAR_3 . METHOD_3 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( java.lang.String title ) { return VAR_2 . METHOD_2 ( title ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3615
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; } },public void METHOD_1 ( ) { VAR_2 . METHOD_3 ( METHOD_2 ( ) . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",3617
public static boolean METHOD_1 ( ) { boolean a = VAR_1 . get ( ) ; boolean b = ! ( VAR_2 . isEmpty ( ) ) ; return a || b ; },public static boolean METHOD_1 ( ) { boolean a = VAR_1 . get ( ) ; boolean b = VAR_2 . isEmpty ( ) ; return ( ! a ) && ( ! b ) ; },"['Move Invocation', 'Update BinaryOperator', 'Insert UnaryOperator', 'Insert UnaryOperator', 'Move VariableRead', 'Move VariableRead', 'Delete UnaryOperator']",3618
public int compareTo ( TYPE_1 a ) { double VAR_1 = ( this . METHOD_1 ( ) ) - ( a . METHOD_1 ( ) ) ; if ( VAR_1 <= 0 ) { return - 1 ; } else { return 1 ; } },public int compareTo ( TYPE_1 a ) { return 0 ; },"['Insert Return', 'Move Literal', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",3619
"public void METHOD_1 ( android.view.View view ) { METHOD_2 ( STRING_1 ) ; TYPE_1 VAR_1 = TYPE_1 . METHOD_3 ( this , VAR_2 ) ; VAR_3 . start ( ) ; }",public void METHOD_1 ( android.view.View view ) { METHOD_2 ( STRING_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3620
"public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( ) ; java.lang.Thread tmp = new java.lang.Thread ( new TYPE_2 ( ) ) ; VAR_1 . start ( ) ; TYPE_3 . METHOD_2 ( VAR_2 class , args ) ; }","public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( ) ; TYPE_3 . METHOD_2 ( VAR_2 class , args ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3622
"private boolean METHOD_1 ( long VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { return true ; } else { long VAR_3 = TYPE_1 . METHOD_3 ( VAR_1 , VAR_4 ) ; return VAR_3 < INT_1 ; } }",private boolean METHOD_1 ( long VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { return true ; } else { long VAR_3 = VAR_1 - ( VAR_4 ) ; return VAR_3 < INT_1 ; } },"['Insert BinaryOperator', 'Move VariableRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",3623
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . setValue ( VAR_2 . METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( this ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) . setValue ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; },"['Insert Invocation', 'Move Invocation', 'Insert Invocation', 'Insert Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation']",3624
public TYPE_1 METHOD_1 ( int id ) { if ( results . METHOD_2 ( id ) ) { TYPE_1 VAR_1 = VAR_2 . remove ( id ) ; VAR_3 = VAR_1 ; return VAR_1 ; } return null ; },public TYPE_1 METHOD_1 ( int id ) { if ( results . METHOD_2 ( id ) ) { TYPE_1 VAR_1 = VAR_2 . get ( id ) ; VAR_2 . remove ( id ) ; return VAR_1 ; } return null ; },"['Move Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Insert VariableRead', 'Delete FieldWrite', 'Delete VariableRead', 'Delete Assignment']",3625
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; VAR_1 . METHOD_4 ( INT_1 ) ; VAR_2 . METHOD_5 ( ) . add ( VAR_1 ) ; },private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; VAR_1 . METHOD_4 ( INT_1 ) ; VAR_2 . METHOD_5 ( ) . add ( VAR_1 ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead', 'Insert VariableRead', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess']",3628
"public void METHOD_1 ( ) { METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 , false ) ) ; METHOD_4 ( VAR_1 . METHOD_3 ( VAR_4 , VAR_3 , false ) ) ; }","public void METHOD_1 ( ) { android.content.Context context = getContext ( ) ; METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 , false ) ) ; METHOD_4 ( VAR_1 . METHOD_3 ( VAR_4 , VAR_3 , false ) ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Insert Invocation']",3630
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ) ; java.lang.System.out.println ( VAR_2 ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",3631
protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 result = VAR_2 . get ( VAR_1 ) ; if ( result == null ) result = METHOD_2 ( VAR_1 ) ; return result ; },protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 result = METHOD_2 ( VAR_1 ) ; if ( result == null ) result = VAR_2 . get ( VAR_1 ) ; return result ; },"['Move Invocation', 'Move Invocation']",3632
"private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 class . METHOD_3 ( ) , STRING_1 ) ; android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; METHOD_4 ( VAR_2 ) ; }","private void METHOD_1 ( ) { android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; METHOD_4 ( VAR_2 ) ; }","['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",3633
public void event ( ) { float VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 == VAR_1 ) { VAR_3 = VAR_1 ; } },public void event ( ) { VAR_3 = VAR_2 . get ( ) ; },"['Insert Assignment', 'Move FieldWrite', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Assignment', 'Delete Block', 'Delete If']",3634
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( ) ) { return ; } VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) ; METHOD_6 ( false ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String value = VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; VAR_2 . METHOD_3 ( value ) ; METHOD_6 ( false ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",3637
"protected java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , boolean VAR_3 ) { java.lang.Object result = TYPE_2 . METHOD_2 ( ) . execute ( VAR_1 , VAR_4 . trim ( ) , VAR_3 ) ; VAR_5 . execute ( VAR_1 , VAR_3 ) ; return result ; }","protected java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , boolean VAR_3 ) { return TYPE_2 . METHOD_2 ( ) . execute ( VAR_1 , VAR_4 . trim ( ) , VAR_3 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3639
"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_3 ) ; VAR_1 . METHOD_2 ( STRING_2 , VAR_4 ) ; METHOD_3 ( VAR_1 ) ; }","public void METHOD_1 ( android.view.View view ) { METHOD_3 ( new android.content.Intent ( this , VAR_2 class ) ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3640
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3641
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , false ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { METHOD_3 ( new android.content.Intent ( this , VAR_1 class ) ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3642
"public void METHOD_1 ( android.view.View view ) { if ( ( getData ( ) ) != 0 ) return ; METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_3 ( VAR_3 ) ) ) ; VAR_2 . METHOD_4 ( 0 , VAR_4 ) ; }",public void METHOD_1 ( android.view.View view ) { if ( ( getData ( ) ) != 0 ) return ; METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation']",3643
public synchronized long METHOD_1 ( java.lang.String key ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; return METHOD_3 ( VAR_2 . get ( key ) ) ; },public synchronized long METHOD_1 ( ) { return METHOD_3 ( TYPE_1 . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3645
"public boolean METHOD_1 ( float x , float y ) { boolean VAR_1 = VAR_2 . METHOD_2 ( this ) ; boolean VAR_3 = TYPE_1 . METHOD_3 ( y , VAR_4 ) ; return ( ! VAR_1 ) && ( ! VAR_3 ) ; }","public boolean METHOD_1 ( float x , float y ) { return ( VAR_2 . METHOD_2 ( this ) ) && ( ! ( TYPE_1 . METHOD_3 ( y , VAR_4 ) ) ) ; }","['Move Invocation', 'Insert UnaryOperator', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete UnaryOperator']",3648
public java.lang.StringBuilder content ( ) { TYPE_1 VAR_1 = new TYPE_2 ( getText ( ) ) ; VAR_1 . METHOD_1 ( ) ; return new java.lang.StringBuilder ( VAR_2 . toString ( ) ) ; },public java.lang.StringBuilder content ( ) { return new java.lang.StringBuilder ( getText ( ) . toString ( ) ) ; },"['Update ConstructorCall', 'Move ConstructorCall', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall']",3649
public static void main ( java.lang.String [ ] args ) throws java.io.IOException { TYPE_1 c = new TYPE_1 ( ) ; java.lang.System.out.println ( VAR_1 . get ( 0 ) . name ) ; int i = 1 ; },public static void main ( java.lang.String [ ] args ) throws java.io.IOException { TYPE_1 c = new TYPE_1 ( ) ; },"['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete FieldRead', 'Delete Invocation', 'Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",3650
"public static void index ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( STRING_1 , TYPE_2 . METHOD_2 ( ) ) . first ( ) ; java.util.List < TYPE_1 > VAR_2 = VAR_3 ; METHOD_3 ( VAR_2 ) ; }","public static void index ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( STRING_1 , TYPE_2 . METHOD_2 ( ) ) ; java.util.List < TYPE_1 > VAR_2 = VAR_3 ; METHOD_3 ( VAR_2 ) ; }","['Move Invocation', 'Delete Invocation']",3652
"private static java.lang.String METHOD_1 ( TYPE_1 p ) throws TYPE_2 , TYPE_3 { byte [ ] VAR_1 = TYPE_4 . METHOD_2 ( p ) . get ( ) . METHOD_3 ( ) ; java.lang.String VAR_2 = new java.lang.String ( VAR_1 , VAR_3 ) ; return VAR_2 ; }","private static java.lang.String METHOD_1 ( TYPE_1 p ) throws TYPE_2 , TYPE_3 { byte [ ] VAR_1 = TYPE_4 . METHOD_2 ( p ) . get ( ) . METHOD_3 ( ) ; return new java.lang.String ( VAR_1 , VAR_3 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3653
"public static TYPE_1 [ ] METHOD_1 ( ) { TYPE_1 [ ] VAR_1 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) , METHOD_5 ( STRING_1 , STRING_2 ) ) ; return VAR_1 ; }","public static TYPE_1 [ ] METHOD_1 ( ) { TYPE_1 [ ] VAR_1 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) , METHOD_5 ( STRING_1 , STRING_2 ) ) ; return VAR_1 ; }","['Delete TypeAccess', 'Delete Invocation']",3655
private void METHOD_1 ( ) { VAR_1 = false ; for ( TYPE_1 VAR_2 : METHOD_2 ( ) ) { TYPE_2 target = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 ) target . METHOD_1 ( ) ; } },private void METHOD_1 ( ) { VAR_1 = false ; for ( TYPE_1 VAR_2 : METHOD_2 ( ) ) { if ( VAR_1 ) VAR_2 . METHOD_3 ( ) . METHOD_1 ( ) ; } },"['Update FieldRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3660
public void METHOD_1 ( ) { VAR_1 . setText ( VAR_2 ) ; VAR_3 . setEnabled ( true ) ; VAR_4 . setEnabled ( false ) ; VAR_5 . setEnabled ( true ) ; VAR_6 . setEnabled ( true ) ; VAR_7 . setEnabled ( true ) ; },public void METHOD_1 ( ) { VAR_1 . setText ( VAR_2 ) ; },"['Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",3661
"public void METHOD_1 ( TYPE_1 item ) { TYPE_2 values = TYPE_3 . METHOD_2 ( item ) ; if ( values != null ) { VAR_1 . METHOD_1 ( VAR_2 , values ) ; } }","public void METHOD_1 ( TYPE_1 item ) { VAR_1 . METHOD_1 ( VAR_2 , TYPE_3 . METHOD_2 ( item ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",3662
public static void METHOD_1 ( ) { java.io.File file = new java.io.File ( VAR_1 ) ; VAR_2 . delete ( ) ; },public static void METHOD_1 ( ) { new java.io.File ( VAR_1 ) . delete ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",3663
"public void METHOD_1 ( TYPE_1 node ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 . toString ( ) ) ; boolean result = METHOD_3 ( node , VAR_2 ) ; if ( ! result ) { VAR_3 . error ( STRING_2 ) ; } }","public void METHOD_1 ( TYPE_1 node ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 . toString ( ) ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",3664
"public boolean METHOD_1 ( android.view.View VAR_1 , TYPE_1 event ) { int VAR_2 = VAR_3 . METHOD_2 ( ) ; return false ; }","public boolean METHOD_1 ( android.view.View VAR_1 , TYPE_1 event ) { return false ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",3666
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 c = new TYPE_1 ( ) ; TYPE_2 VAR_2 = c . METHOD_2 ( VAR_1 , VAR_3 , STRING_1 ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",3667
public static void main ( java.lang.String [ ] args ) { VAR_1 = new java.util.HashSet < > ( ) ; VAR_2 = new TYPE_1 ( ) ; java.lang.Thread t = new java.lang.Thread ( STRING_1 ) ; VAR_3 . start ( ) ; },public static void main ( java.lang.String [ ] args ) { VAR_1 = new java.util.HashSet < > ( ) ; VAR_2 = new TYPE_1 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3668
private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { VAR_2 . setState ( VAR_3 ) ; } if ( ( VAR_1 ) == 1 ) { TYPE_1 VAR_4 = TYPE_2 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( false ) ; } },private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { VAR_2 . setState ( VAR_3 ) ; } if ( ( VAR_1 ) == 1 ) { java.lang.System.exit ( 0 ) ; } },"['Update Invocation', 'Insert TypeAccess', 'Update Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3670
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( getContext ( ) ) ; TYPE_2 VAR_2 = getActivity ( ) ; if ( VAR_2 instanceof TYPE_3 ) { METHOD_3 ( ( ( TYPE_3 ) ( VAR_2 ) ) ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( getContext ( ) ) ; METHOD_3 ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3672
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; boolean VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; if ( VAR_2 ) { return VAR_1 ; } else { return null ; } },public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; return VAR_1 ; },"['Move Invocation', 'Move Return', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",3674
"public java.util.Map < java.lang.String , java.lang.Double > METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.Double > VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; return VAR_1 ; }","public java.util.Map < java.lang.String , java.lang.Double > METHOD_1 ( ) { return null ; }","['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3675
"public static void main ( java.lang.String [ ] VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 . start ( VAR_1 [ 0 ] , java.lang.Integer.parseInt ( VAR_1 [ 1 ] ) ) ; }","public static void main ( java.lang.String [ ] VAR_1 ) throws java.lang.Exception { new TYPE_1 ( ) . start ( VAR_1 [ 0 ] , java.lang.Integer.parseInt ( VAR_1 [ 1 ] ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",3676
"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_3 = TYPE_1 . METHOD_3 ( this , STRING_1 , VAR_4 ) ; VAR_5 . show ( ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( VAR_1 ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3677
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead']",3678
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( true ) ; VAR_2 . METHOD_2 ( new java.lang.Thread ( new TYPE_3 ( VAR_2 ) ) ) ; VAR_2 . METHOD_3 ( ) . start ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; },"['Update ConstructorCall', 'Delete Literal', 'Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",3680
public TYPE_1 METHOD_1 ( ) { java.lang.String output = STRING_1 ; return VAR_1 . status ( INT_1 ) . METHOD_2 ( output ) . build ( ) ; },public TYPE_1 METHOD_1 ( java.lang.String msg ) { java.lang.String output = STRING_1 + msg ; return VAR_1 . status ( INT_1 ) . METHOD_2 ( output ) . build ( ) ; },"['Insert Parameter', 'Insert TypeReference', 'Insert BinaryOperator', 'Move FieldRead', 'Insert VariableRead']",3683
"protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , new TYPE_2 ( VAR_2 ) ) ; VAR_1 . METHOD_2 ( true ) ; return VAR_1 ; }","protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( STRING_1 , new TYPE_2 ( VAR_2 ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",3684
public static TYPE_1 METHOD_1 ( java.lang.Class < ? > VAR_1 ) { if ( ! ( TYPE_2 . METHOD_2 ( ) ) ) { TYPE_3 . METHOD_3 ( ) ; } TYPE_1 VAR_2 = TYPE_1 . METHOD_1 ( VAR_1 ) ; return VAR_2 ; },public static TYPE_1 METHOD_1 ( java.lang.Class < ? > VAR_1 ) { TYPE_3 . METHOD_3 ( ) ; return TYPE_1 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3685
"public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = java.lang.String.format ( STRING_1 , ( INT_1 & ( VAR_2 ) ) ) ; return VAR_1 ; }",public int METHOD_1 ( ) { return VAR_2 ; },"['Update TypeReference', 'Move FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3686
"public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( VAR_1 class , args ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( ) ; }","public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( VAR_1 class , args ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3687
"public byte METHOD_1 ( byte VAR_1 ) { boolean VAR_2 = ( VAR_1 & INT_1 ) != 0 ; byte result = METHOD_2 ( VAR_1 , 1 , TYPE_1 . METHOD_3 ( ) ) ; TYPE_1 . METHOD_4 ( VAR_2 ) ; return result ; }","public byte METHOD_1 ( byte VAR_1 ) { boolean VAR_2 = ( VAR_1 & INT_1 ) != 0 ; TYPE_1 . METHOD_4 ( VAR_2 ) ; return METHOD_2 ( VAR_1 , 1 , VAR_2 ) ; }","['Move Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3690
"private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; final TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; TYPE_2 . METHOD_6 ( VAR_2 , VAR_4 ) ; VAR_1 . METHOD_7 ( VAR_2 ) ; }","private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; final TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_5 ( VAR_3 ) ; TYPE_2 . METHOD_6 ( VAR_2 , VAR_4 ) ; VAR_1 . METHOD_7 ( VAR_2 ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",3691
private boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return true ; } java.lang.String VAR_2 = VAR_3 . trim ( ) ; return ( VAR_4 . isEmpty ( ) ) || ( VAR_4 . equals ( STRING_1 ) ) ; },private boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_1 == null ) || ( VAR_3 . trim ( ) . isEmpty ( ) ) ; },"['Move BinaryOperator', 'Insert Invocation', 'Move Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",3692
"protected java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.String > VAR_1 = new java.util.HashMap ( super . METHOD_1 ( ) ) ; VAR_2 . put ( STRING_1 , TYPE_1 . METHOD_2 ( VAR_3 ) ) ; return VAR_1 ; }","protected java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.String > VAR_1 = super . METHOD_1 ( ) ; VAR_2 . put ( STRING_1 , TYPE_1 . METHOD_2 ( VAR_3 ) ) ; return VAR_1 ; }","['Move Invocation', 'Delete ConstructorCall']",3693
"public void METHOD_1 ( int count ) { int VAR_1 = VAR_2 ; VAR_2 = count ; VAR_3 . METHOD_2 ( STRING_1 , VAR_1 , count ) ; }","public void METHOD_1 ( int count ) { VAR_2 = count ; VAR_3 . METHOD_2 ( STRING_1 , ( - 1 ) , count ) ; }","['Insert UnaryOperator', 'Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",3694
"public TYPE_1 METHOD_1 ( int i , int VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { TYPE_1 VAR_3 = VAR_4 . METHOD_1 ( i , VAR_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( true ) ; return METHOD_3 ( VAR_3 ) ; }","public TYPE_1 METHOD_1 ( int i , int VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { return METHOD_3 ( VAR_4 . METHOD_1 ( i , VAR_1 , VAR_2 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",3695
public void METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; java.io.File file = new java.io.File ( VAR_1 ) ; if ( ! ( file . METHOD_3 ( ) ) ) { return ; } METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; },public void METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",3696
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3697
public boolean METHOD_1 ( ) { java.util.Random VAR_1 = METHOD_2 ( ) ; return ( ! ( VAR_1 instanceof TYPE_1 ) ) || ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_1 ( ) ) ; },public boolean METHOD_1 ( ) { return true ; },"['Insert Literal', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete UnaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",3698
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_1 ( true ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_1 ( true ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",3699
public void METHOD_1 ( ) throws TYPE_1 { long VAR_1 = 0 ; TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; },public void METHOD_1 ( ) throws TYPE_1 { long VAR_1 = - 1L ; TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; },"['Insert UnaryOperator', 'Insert Literal', 'Delete Literal']",3700
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_1 ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { return VAR_2 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3702
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Date VAR_2 = java.util.Calendar.getInstance ( ) . getTime ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; return this . VAR_3 . METHOD_4 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return this . VAR_3 . METHOD_4 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",3704
"public TYPE_1 < java.util.List < TYPE_2 > > index ( ) { java.util.List < TYPE_2 > VAR_1 = ( ( java.util.List < TYPE_2 > ) ( VAR_2 . METHOD_1 ( ) ) ) ; return new TYPE_1 ( VAR_1 , STRING_1 ) ; }","public TYPE_1 < java.util.List < TYPE_2 > > index ( ) { java.util.List < TYPE_2 > VAR_1 = new java.util.ArrayList < > ( ) ; return new TYPE_1 ( VAR_1 , STRING_1 ) ; }","['Insert ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation']",3705
"private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String name = VAR_1 . METHOD_2 ( ) . replaceAll ( STRING_1 , STRING_2 ) . replaceAll ( STRING_3 , STRING_4 ) ; TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 class , name ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String name = VAR_1 . METHOD_2 ( ) . replaceAll ( STRING_1 , STRING_2 ) ; TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 class , name ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",3706
"public TYPE_1 METHOD_1 ( int position ) { TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( position ) ; TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) ; VAR_4 . put ( position , VAR_3 ) ; return VAR_3 ; }",public TYPE_1 METHOD_1 ( int position ) { return METHOD_2 ( VAR_2 . METHOD_1 ( position ) ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3708
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( INT_1 ) ; METHOD_3 ( VAR_2 ) ; if ( ( VAR_4 ) != null ) VAR_4 . METHOD_4 ( VAR_2 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( VAR_3 . METHOD_2 ( INT_1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3709
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( this , STRING_1 , VAR_3 ) ; VAR_4 . show ( ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3710
public void METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( id ) ; TYPE_2 . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.String id ) { TYPE_2 . METHOD_1 ( id ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3713
public TYPE_1 METHOD_1 ( java.lang.String ... VAR_1 ) { TYPE_2 answer = new TYPE_2 ( ) ; METHOD_2 ( answer ) ; VAR_2 . to ( VAR_1 ) ; return ( ( TYPE_1 ) ( this ) ) ; },public TYPE_1 METHOD_1 ( java.lang.String ... VAR_1 ) { return to ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete ThisAccess']",3714
public static void main ( final java.lang.String [ ] args ) { final TYPE_1 p = new TYPE_2 ( ) . METHOD_1 ( false ) . METHOD_2 ( true ) . build ( ) ; },public static void main ( final java.lang.String [ ] args ) { final TYPE_1 p = new TYPE_2 ( ) . METHOD_1 ( false ) . METHOD_2 ( true ) . METHOD_2 ( false ) . build ( ) ; },"['Insert Invocation', 'Update Invocation', 'Move Invocation', 'Insert Literal']",3715
public void METHOD_1 ( ) { METHOD_2 ( ) ; int VAR_1 = METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; },public void METHOD_1 ( int n ) { TYPE_1 . METHOD_4 ( ( ( STRING_1 + n ) + STRING_2 ) ) ; },"['Insert Parameter', 'Move TypeReference', 'Update VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",3719
"public TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_2 ) . METHOD_4 ( ) , false ) ; return TYPE_1 . METHOD_5 ( VAR_1 , super . METHOD_1 ( ) ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_1 . METHOD_5 ( VAR_2 . METHOD_2 ( ) , super . METHOD_1 ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3721
"public static void main ( java.lang.String [ ] args ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . METHOD_1 ( VAR_1 , STRING_2 ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",3723
protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( super . METHOD_1 ( ) ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; return VAR_1 ; },protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = super . METHOD_1 ( ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; return VAR_1 ; },"['Move Invocation', 'Delete ConstructorCall']",3726
"public java.lang.String METHOD_1 ( ) { java.util.Date date = METHOD_2 ( VAR_1 ) ; if ( date != null ) return TYPE_1 . METHOD_3 ( date , VAR_2 ) ; else return STRING_1 ; }","public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ; }","['Move Return', 'Move TypeAccess', 'Delete VariableRead', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",3727
"public void METHOD_1 ( ) { TYPE_1 t = new TYPE_1 ( 0 , INT_1 , 1 ) ; TYPE_2 . METHOD_2 ( t ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Literal', 'Delete FieldRead', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3728
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { try { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; } catch ( TYPE_3 VAR_4 ) { throw new TYPE_2 ( VAR_4 ) ; } },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { try { return VAR_3 . METHOD_2 ( VAR_1 ) ; } catch ( TYPE_3 VAR_4 ) { throw new TYPE_2 ( VAR_4 ) ; } },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3729
"public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_3 = VAR_2 . METHOD_3 ( null ) ; org.testng.Assert.assertEquals ( VAR_1 , VAR_3 ) ; }","public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_3 = VAR_2 . METHOD_3 ( null ) ; assertEquals ( VAR_1 , VAR_3 ) ; }",['Delete FieldRead'],3730
"public void METHOD_1 ( TYPE_1 TYPE_2 , TYPE_3 VAR_1 ) { if ( VAR_1 != null ) { TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( ) ; this . METHOD_3 ( VAR_2 ) ; this . METHOD_4 ( VAR_2 ) ; } }","public void METHOD_1 ( TYPE_1 TYPE_2 , TYPE_3 VAR_1 ) { if ( VAR_1 != null ) { this . METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ; } }","['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation']",3731
"public void METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int VAR_2 , int count ) { TYPE_1 VAR_3 = getActivity ( ) ; if ( VAR_3 != null ) VAR_3 . METHOD_2 ( ) ; }","public void METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int VAR_2 , int count ) { getActivity ( ) . METHOD_2 ( ) ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3732
"public static int METHOD_1 ( int value , int VAR_1 ) { int VAR_2 = ( 1 < < VAR_1 ) - 1 ; return value & VAR_2 ; }","public static int METHOD_1 ( int value , int VAR_1 ) { return value & ( ( 1 < < ( VAR_1 + 1 ) ) - 1 ) ; }","['Insert BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Move BinaryOperator', 'Insert Literal', 'Update BinaryOperator', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3733
public static void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 c = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . METHOD_1 ( ) ; } catch ( java.lang.Exception VAR_1 ) { VAR_1 . METHOD_3 ( ) ; } },public static void METHOD_1 ( ) { try { TYPE_3 . METHOD_1 ( ) ; } catch ( java.lang.Exception VAR_1 ) { VAR_1 . METHOD_3 ( ) ; } },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",3734
"public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent i = new android.content.Intent ( this , VAR_2 class ) ; i . METHOD_2 ( VAR_3 , VAR_1 ) ; METHOD_3 ( i ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3735
"public void METHOD_1 ( TYPE_1 response ) { if ( response != null ) { java.lang.String VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { response . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) , VAR_1 ) ; } } }","public void METHOD_1 ( TYPE_1 response ) { if ( response != null ) { response . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) , METHOD_2 ( ) ) ; } }","['Move If', 'Move BinaryOperator', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Block', 'Delete If']",3738
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; METHOD_3 ( view ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3746
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; VAR_2 . execute ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; java.lang.System.out.println ( STRING_1 ) ; METHOD_3 ( intent ) ; METHOD_4 ( ) ; }","public void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; java.lang.System.out.println ( STRING_1 ) ; METHOD_3 ( intent ) ; METHOD_4 ( ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3747
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 , STRING_1 , VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_1 , STRING_2 , VAR_4 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) . METHOD_3 ( VAR_1 , STRING_1 , VAR_3 ) ; METHOD_2 ( ) . METHOD_3 ( VAR_1 , STRING_2 , VAR_4 ) ; }","['Move Invocation', 'Insert Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",3749
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_1 ( VAR_1 , TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 ) ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 , TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3750
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_3 ( ) ; VAR_4 . replace ( VAR_5 , new TYPE_3 ( ) ) ; VAR_4 . commit ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete ConstructorCall', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",3751
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3752
public java.util.Iterator < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_1 == null ) { return this . iterator ( ) ; } return VAR_1 . METHOD_3 ( ) . iterator ( ) ; },public java.util.Iterator < TYPE_1 > METHOD_1 ( ) { return this . iterator ( ) ; },"['Move Return', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Return']",3755
public final TYPE_1 METHOD_1 ( java.lang.String key ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( key ) ; if ( VAR_1 instanceof TYPE_2 ) { return ( ( TYPE_2 ) ( VAR_1 ) ) . array ; } return VAR_1 ; },public final TYPE_1 METHOD_1 ( java.lang.String key ) { return VAR_2 . METHOD_1 ( key ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3757
"private void METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 , boolean VAR_2 ) { for ( java.lang.Integer VAR_3 : VAR_1 ) { TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( VAR_3 ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_1 ( VAR_2 ) ; } } }","private void METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 , boolean VAR_2 ) { for ( java.lang.Integer VAR_3 : VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_3 ) . METHOD_1 ( VAR_2 ) ; } }","['Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3759
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 < java.lang.String > VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . info ( ( ( ( ( VAR_4 ) + STRING_1 ) + VAR_1 ) + STRING_2 ) ) ; TYPE_3 . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 event ) { VAR_3 . info ( ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_2 . METHOD_2 ( ) ) ) + STRING_2 ) ) ; TYPE_3 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3761
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ; java.lang.String VAR_2 = TYPE_2 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . getName ( ) ) ; VAR_1 . METHOD_6 ( VAR_2 ) ; },protected void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",3762
"public void METHOD_1 ( ) { android.content.Intent i = new android.content.Intent ( ) ; i . METHOD_2 ( STRING_1 , VAR_1 ) ; i . METHOD_2 ( STRING_2 , VAR_2 ) ; METHOD_3 ( VAR_3 , i ) ; METHOD_4 ( ) ; }",public void METHOD_1 ( ) { METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3763
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 , INT_1 ) ; VAR_2 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ; return VAR_3 . METHOD_4 ( VAR_1 ) ; }",public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_3 . METHOD_4 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",3764
private boolean METHOD_1 ( TYPE_1 response ) { boolean VAR_1 = ( response . METHOD_2 ( ) ) == ( VAR_2 ) ; response . METHOD_3 ( ) ; return VAR_1 ; },private boolean METHOD_1 ( TYPE_1 response ) { return ( response . METHOD_2 ( ) ) == ( VAR_2 ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3770
public int METHOD_1 ( ) { int VAR_1 = java.lang.Integer.parseInt ( ( ( java.lang.String ) ( this . VAR_2 . METHOD_2 ( ) ) ) ) ; return VAR_1 ; },public int METHOD_1 ( ) { int VAR_1 = ( ( java.lang.Integer ) ( this . VAR_2 . METHOD_2 ( ) ) ) ; return VAR_1 ; },"['Move Invocation', 'Update TypeReference', 'Delete TypeAccess', 'Delete Invocation']",3772
"private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( INT_1 ) ; return VAR_1 ; }","private TYPE_1 METHOD_1 ( java.lang.String VAR_2 , TYPE_2 VAR_3 ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( INT_1 ) ; return VAR_1 ; }","['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Delete Parameter']",3774
"public void METHOD_1 ( java.util.Map VAR_1 , TYPE_1 context ) { int VAR_2 = context . METHOD_2 ( ) ; int VAR_3 = INT_1 ; int VAR_4 = VAR_3 ; VAR_5 = new TYPE_2 ( STRING_1 , VAR_4 ) ; }","public void METHOD_1 ( java.util.Map VAR_1 , TYPE_1 context ) { int VAR_2 = context . METHOD_2 ( ) ; int VAR_3 = INT_1 ; int VAR_4 = ( VAR_3 % VAR_2 ) + VAR_2 ; VAR_5 = new TYPE_2 ( STRING_1 , VAR_4 ) ; }","['Insert BinaryOperator', 'Insert BinaryOperator', 'Insert VariableRead', 'Move VariableRead', 'Insert VariableRead']",3777
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . start ( ) ; android.content.Intent VAR_3 = new android.content.Intent ( STRING_1 ) ; TYPE_2 . METHOD_2 ( this ) . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . start ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3779
"private void METHOD_1 ( ) { android.content.Intent i = new android.content.Intent ( this , VAR_1 class ) ; METHOD_2 ( i ) ; }",private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3780
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; VAR_3 = new TYPE_2 ( this ) . METHOD_4 ( VAR_4 ) . build ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; android.content.Intent intent = getIntent ( ) ; METHOD_3 ( ) ; VAR_3 = new TYPE_2 ( this ) . METHOD_4 ( VAR_4 ) . build ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Insert Invocation']",3781
"public java.util.Map < java.lang.Object , java.lang.Object > METHOD_1 ( ) { java.util.Map < java.lang.Object , java.lang.Object > VAR_1 = new java.util.HashMap < > ( ) ; if ( ( VAR_2 ) != null ) VAR_1 . METHOD_2 ( this . VAR_2 ) ; return VAR_1 ; }","public java.util.Map < java.lang.Object , java.lang.Object > METHOD_1 ( ) { return null ; }","['Move Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",3786
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_5 ( intent ) ; }",private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3787
public static void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; },public static void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",3788
public void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) > 0 ) { METHOD_3 ( new TYPE_1 ( VAR_1 [ METHOD_4 ( ) ] . METHOD_5 ( ) ) ) ; } },public void METHOD_1 ( ) { int num = METHOD_2 ( ) ; if ( num > 0 ) { METHOD_3 ( new TYPE_1 ( VAR_1 [ ( num - 1 ) ] . METHOD_5 ( ) ) ) ; } },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert BinaryOperator', 'Insert VariableRead', 'Insert Literal', 'Delete Invocation']",3790
public long count ( ) { TYPE_1 VAR_1 = METHOD_1 ( ) ; return VAR_2 . count ( ) ; },public long count ( ) { TYPE_1 VAR_1 = METHOD_1 ( ) ; long x = VAR_2 . count ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Delete Return']",3791
public int METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; return VAR_3 . getId ( ) ; },public int METHOD_1 ( TYPE_1 VAR_1 ) { int id = VAR_2 . METHOD_1 ( VAR_1 ) ; return id ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",3792
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_4 = INT_1 ; TYPE_3 VAR_5 = TYPE_4 . METHOD_3 ( VAR_1 . METHOD_2 ( ) , VAR_3 ) ; METHOD_4 ( VAR_5 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; METHOD_4 ( TYPE_4 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete FieldRead', 'Delete Assignment', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",3793
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 < java.lang.Integer > VAR_2 = new TYPE_2 < java.lang.Integer > ( VAR_3 , VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . METHOD_3 ( new TYPE_2 < java.lang.Integer > ( VAR_3 , VAR_1 ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3794
public int [ ] METHOD_1 ( TYPE_1 VAR_1 ) { int type = ( VAR_2 . getType ( ) ) + 1 ; return ( type >= 0 ) && ( type < ( VAR_3 . length ) ) ? VAR_4 [ type ] : null ; },public int [ ] METHOD_1 ( TYPE_1 VAR_1 ) { int type = VAR_2 . getType ( ) ; return ( type >= 0 ) && ( type < ( VAR_3 . length ) ) ? VAR_4 [ type ] : null ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",3795
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) return VAR_2 . METHOD_2 ( ) ; else return VAR_4 ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . get ( VAR_1 ) . METHOD_2 ( ) ; },"['Insert Return', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",3796
public int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( METHOD_3 ( ) ) . getValue ( ) ; },public int METHOD_1 ( ) { int height = VAR_1 . METHOD_2 ( METHOD_3 ( ) ) . getValue ( ) ; return height ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",3799
public static void main ( java.lang.String [ ] VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; },public static void main ( java.lang.String [ ] VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",3800
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; open ( STRING_2 , VAR_2 ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_3 ) ) . METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { open ( STRING_2 , VAR_2 ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_3 ) ) . METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",3801
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . execute ( ( ( java.lang.Void ) ( null ) ) ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeReference', 'Delete Literal', 'Delete Invocation']",3806
"public void execute ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.String string = VAR_1 . METHOD_1 ( VAR_3 ) ; VAR_4 . info ( string ) ; }","public void execute ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_4 . info ( VAR_1 . METHOD_1 ( VAR_3 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3807
private TYPE_1 METHOD_1 ( ) { VAR_1 = new TYPE_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_3 . add ( VAR_1 ) ; return VAR_2 ; },private TYPE_1 METHOD_1 ( ) { VAR_1 = new TYPE_2 ( ) ; return VAR_1 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3808
public TYPE_1 METHOD_1 ( int position ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( ( position + 1 ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( int position ) { return TYPE_2 . METHOD_2 ( ( position + 1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3809
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; TYPE_2 node = VAR_2 . METHOD_2 ( ) . METHOD_3 ( true ) ; return VAR_2 . METHOD_4 ( node ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . get ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",3810
public void init ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 TYPE_4 = new TYPE_3 ( ) ; TYPE_4 . METHOD_1 ( ) ; java.lang.System.out.println ( STRING_1 ) ; },public void init ( TYPE_1 VAR_1 ) throws TYPE_2 { java.lang.System.out.println ( STRING_1 ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3813
public TYPE_1 METHOD_1 ( java.lang.String str ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( java.lang.String str ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; return VAR_1 ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",3814
public java.lang.String METHOD_1 ( byte [ ] VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_1 ) ; },public java.lang.String METHOD_1 ( byte [ ] VAR_1 ) { java.lang.String output = null ; return output ; },"['Insert LocalVariable', 'Insert TypeReference', 'Insert Literal', 'Insert VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3816
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = super . METHOD_2 ( ) ; if ( VAR_1 != null ) { java.io.InputStream VAR_2 = VAR_1 . METHOD_3 ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_1 ( ) ; } } },public void METHOD_1 ( ) throws java.io.IOException { super . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_1 ( ) ; },"['Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If']",3818
"public void METHOD_1 ( TYPE_1 VAR_1 , byte [ ] VAR_2 , int length ) throws java.io.IOException { TYPE_2 VAR_3 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( VAR_2 , length ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , byte [ ] VAR_2 , int length ) throws java.io.IOException { TYPE_2 VAR_3 = METHOD_2 ( ) ; VAR_3 . METHOD_4 ( VAR_2 , length ) ; }","['Delete VariableRead', 'Delete Invocation']",3819
"public final void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { java.lang.String VAR_3 = VAR_4 . name ( ) ; java.lang.String VAR_5 = java.lang.String . METHOD_2 ( VAR_2 ) ; VAR_6 . METHOD_3 ( ( STRING_1 + VAR_3 ) , VAR_5 ) ; }","public final void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { java.lang.String VAR_5 = VAR_4 . name ( ) ; java.lang.String VAR_3 = java.lang.String . METHOD_2 ( VAR_2 ) ; VAR_6 . METHOD_3 ( VAR_5 , VAR_3 ) ; }","['Update LocalVariable', 'Update LocalVariable', 'Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",3820
"protected void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 . length ) > 0 ) { TYPE_1 VAR_2 = new TYPE_1 ( buffer , false , position , false ) ; VAR_2 . METHOD_2 ( ) ; } }","protected void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 . length ) > 0 ) { TYPE_1 VAR_2 = new TYPE_1 ( buffer , false , position ) ; VAR_2 . METHOD_2 ( ) ; } }",['Delete Literal'],3821
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) , STRING_3 ) ; ( ( TYPE_3 ) ( getActivity ( ) ) ) . METHOD_5 ( VAR_2 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) , null ) ; ( ( TYPE_3 ) ( getActivity ( ) ) ) . METHOD_5 ( VAR_2 ) ; }","['Insert Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess']",3822
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( ) ; TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) ; return VAR_3 ; },public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( ) ; return METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3823
public static TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ; return VAR_2 ; },public static TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { return new TYPE_2 ( ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ; },"['Move Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",3824
"public double METHOD_1 ( java.util.Random VAR_1 , double VAR_2 ) { double VAR_3 = ( INT_1 * ( VAR_4 ) ) * ( TYPE_1 . METHOD_2 ( VAR_1 , 0 , 1 ) ) ; return ( ( VAR_5 ) * VAR_2 ) + VAR_3 ; }","public double METHOD_1 ( java.util.Random VAR_1 , double VAR_2 ) { return 0 ; }","['Move Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator']",3826
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = get ( VAR_2 ) ; ( VAR_2 ) ++ ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return get ( ( ( VAR_2 ) ++ ) ) ; },"['Insert Invocation', 'Move UnaryOperator', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3827
"public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( INT_1 , STRING_1 , INT_2 , INT_3 , INT_4 , STRING_2 ) ; java.lang.System.out.println ( VAR_1 . METHOD_1 ( VAR_2 ) ) ; VAR_1 . METHOD_2 ( ) ; }",public void METHOD_1 ( ) throws java.lang.Exception { },"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",3828
"public int METHOD_1 ( android.content.Intent intent , int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( STRING_1 , VAR_4 ) ; VAR_5 . start ( ) ; return VAR_6 ; }","public int METHOD_1 ( android.content.Intent intent , int VAR_1 , int VAR_2 ) { VAR_5 . start ( ) ; return VAR_6 ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",3829
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; VAR_3 . show ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3830
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 error = new TYPE_1 ( ) . METHOD_3 ( VAR_2 , STRING_1 ) ; TYPE_2 . METHOD_4 ( error ) ; VAR_3 . METHOD_1 ( error ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_1 ( new TYPE_1 ( ) . METHOD_3 ( VAR_2 , STRING_1 ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3832
private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 ) ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; },private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getContext ( ) ) ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; },"['Insert Invocation', 'Move TypeReference', 'Delete FieldRead']",3834
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.StringBuffer buffer = new java.lang.StringBuffer ( ) ; VAR_2 . append ( STRING_1 ) ; return VAR_2 . toString ( ) ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return STRING_1 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",3836
public boolean METHOD_1 ( TYPE_1 item ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( item . METHOD_3 ( ) ) ; VAR_3 . select ( ) ; VAR_4 . METHOD_4 ( item . METHOD_3 ( ) ) ; return true ; },public boolean METHOD_1 ( TYPE_1 item ) { VAR_4 . METHOD_4 ( item . METHOD_3 ( ) ) ; return true ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3837
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.io.InputStream VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; if ( VAR_2 == null ) return null ; return TYPE_1 . METHOD_4 ( VAR_2 ) ; },public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_4 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3841
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_2 ( VAR_4 ) ; return TYPE_1 . METHOD_3 ( VAR_2 ) ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3842
"public TYPE_1 METHOD_1 ( ) throws java.io.IOException { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = METHOD_2 ( ) ; java.lang.String VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 , false ) ; return new TYPE_3 ( VAR_2 , VAR_3 ) ; }","public TYPE_1 METHOD_1 ( ) throws java.io.IOException { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = METHOD_2 ( ) ; return new TYPE_3 ( TYPE_2 . METHOD_3 ( VAR_1 , false ) , VAR_3 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3844
"public void update ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_1 ( get ( VAR_3 . getId ( ) ) , VAR_1 ) ; VAR_4 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; }",public void update ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",3845
"public java.lang.String METHOD_1 ( ) throws TYPE_1 { boolean VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; if ( VAR_1 ) { return STRING_1 ; } return STRING_2 ; }","public java.lang.String METHOD_1 ( ) throws TYPE_1 { VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; return STRING_1 ; }","['Move Invocation', 'Move Return', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",3846
"public TYPE_1 METHOD_1 ( android.view.View target , boolean VAR_1 ) { int VAR_2 = TYPE_2 . METHOD_2 ( context , VAR_3 ) ; return METHOD_3 ( target , new TYPE_3 ( ) , VAR_2 , VAR_1 ) ; }","public TYPE_1 METHOD_1 ( android.view.View target , boolean VAR_1 ) { return METHOD_1 ( target , new TYPE_3 ( ) , VAR_1 ) ; }","['Update Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3847
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = ( ( ( VAR_3 ) + VAR_1 ) + STRING_1 ) + ( TYPE_1 . METHOD_2 ( INT_1 ) ) ; return VAR_4 . toLowerCase ( ) ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return ( ( ( VAR_3 ) + VAR_1 ) + STRING_1 ) + ( TYPE_1 . METHOD_2 ( INT_1 ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3849
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_4 = VAR_5 . step ( ) ; VAR_6 . update ( VAR_4 ) ; },public void METHOD_1 ( ) { VAR_3 . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = VAR_5 . step ( ) ; VAR_6 . update ( VAR_4 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3850
"protected int METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( ( VAR_3 . key = VAR_1 . METHOD_2 ( ) ) , VAR_1 ) ; return VAR_3 . key ; }","protected int METHOD_1 ( TYPE_1 VAR_1 ) { int key = VAR_1 . METHOD_2 ( ) ; VAR_2 . put ( key , VAR_1 ) ; return key ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",3851
"public void METHOD_1 ( ) { boolean VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 , n ) ; } }",public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3852
public java.lang.String METHOD_1 ( TYPE_1 name ) { java.lang.String result = VAR_1 . words ( ) . METHOD_2 ( words : : METHOD_3 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; return METHOD_6 ( result ) ; },public java.lang.String METHOD_1 ( TYPE_1 name ) { return VAR_1 . words ( ) . METHOD_2 ( words : : METHOD_3 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3854
"private java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( this . VAR_2 , STRING_1 , STRING_2 , STRING_3 ) ; return VAR_3 . replaceAll ( STRING_4 , STRING_5 ) . trim ( ) ; }","private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( this . VAR_2 , STRING_1 , STRING_2 , STRING_3 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",3856
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( INT_1 ) ; VAR_1 . METHOD_2 ( INT_1 ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( ) ; },"['Insert Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",3859
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; return view ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",3861
"private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( METHOD_2 ( ) , METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( null , VAR_1 ) ; TYPE_2 VAR_3 = TYPE_4 . METHOD_5 ( VAR_1 , null ) ; return METHOD_6 ( VAR_3 ) ; }","private TYPE_3 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( METHOD_2 ( ) , METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( null , VAR_1 ) ; return VAR_1 ; }","['Update TypeReference', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3862
"public static void METHOD_1 ( float VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( VAR_4 class ) ; VAR_5 = VAR_2 ; VAR_6 = VAR_1 ; VAR_7 . add ( VAR_3 ) ; }","public static void METHOD_1 ( float VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_5 = VAR_2 ; VAR_6 = VAR_1 ; VAR_7 . add ( VAR_3 ) ; }","['Insert ConstructorCall', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",3864
void METHOD_1 ( int VAR_1 ) { int result = 1 + VAR_1 ; METHOD_2 ( STRING_1 ) ; int VAR_2 = 1 + VAR_1 ; },void METHOD_1 ( int VAR_1 ) { int result = 1 + VAR_1 ; METHOD_2 ( STRING_1 ) ; int f = result ; },"['Update LocalVariable', 'Insert VariableRead', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator']",3865
"public java.util.List < java.lang.Integer > METHOD_1 ( TYPE_1 data ) { java.util.List < java.lang.Integer > VAR_1 = new java.util.ArrayList < > ( ) ; METHOD_2 ( VAR_1 , 0 , this , data ) ; return VAR_1 ; }","public void METHOD_1 ( ) { METHOD_2 ( 0 , this ) ; }","['Update TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",3866
"public static boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_2 ) ; return TYPE_3 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ; }","public static boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 pattern = TYPE_3 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; return pattern . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",3867
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; TYPE_4 . METHOD_3 ( this , VAR_4 ) ; return VAR_4 ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; TYPE_4 . METHOD_3 ( this , view ) ; return view ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess', 'Delete FieldRead']",3868
public void METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 ) { VAR_4 . METHOD_1 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Block', 'Delete If']",3871
"public void METHOD_1 ( ) { TYPE_1 var = new TYPE_1 ( new TYPE_2 ( 1 , 1 ) ) ; assertEquals ( VAR_1 . toString ( ) , STRING_1 ) ; }","public void METHOD_1 ( ) { TYPE_1 var = new TYPE_1 ( 1 , 1 ) ; assertEquals ( VAR_1 . toString ( ) , STRING_1 ) ; }","['Update ConstructorCall', 'Move ConstructorCall', 'Delete ConstructorCall']",3872
"public static void METHOD_1 ( float VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { TYPE_2 VAR_4 = TYPE_3 . METHOD_2 ( VAR_5 class ) ; VAR_6 = VAR_2 ; VAR_7 = VAR_1 ; VAR_8 = VAR_3 ; VAR_9 . add ( VAR_4 ) ; }","public static void METHOD_1 ( float VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_6 = VAR_2 ; VAR_7 = VAR_1 ; VAR_8 = VAR_3 ; VAR_9 . add ( VAR_4 ) ; }","['Insert ConstructorCall', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",3873
"protected void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 . values ( ) ) { TYPE_2 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { METHOD_3 ( VAR_1 , new TYPE_2 ( this , VAR_1 ) ) ; } } }","private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 . values ( ) ) { METHOD_3 ( VAR_1 , new TYPE_2 ( this , VAR_1 ) ) ; } }","['Update Wra', 'Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",3875
public int METHOD_1 ( ) { if ( ( this . VAR_1 ) == ( - 1 ) ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; METHOD_3 ( VAR_2 ) ; } return this . VAR_1 ; },public int METHOD_1 ( ) { return this . VAR_1 ; },"['Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3876
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 ; VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( new java.util.Scanner ( TYPE_1 . METHOD_2 ( args ) ) ) ; VAR_1 . METHOD_3 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = null ; VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( new java.util.Scanner ( TYPE_1 . METHOD_2 ( args ) ) ) ; },"['Insert Literal', 'Delete VariableRead', 'Delete Invocation']",3877
public void METHOD_1 ( TYPE_1 result ) { TYPE_2 VAR_1 = context . METHOD_2 ( ) ; TYPE_3 VAR_2 = context . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ( ) - > VAR_1 . METHOD_5 ( ) . METHOD_6 ( result ) ) ; },public void METHOD_1 ( TYPE_1 result ) { TYPE_2 VAR_1 = context . METHOD_2 ( ) ; VAR_1 . METHOD_5 ( ) . METHOD_6 ( result ) ; },"['Insert Invocation', 'Insert Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable']",3878
"private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { int end = ( ( VAR_2 . length ( ) ) - ( VAR_3 . length ( ) ) ) - 1 ; return VAR_2 . substring ( 0 , end ) ; }","private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { int end = ( VAR_2 . length ( ) ) - ( VAR_3 . length ( ) ) ; return VAR_2 . substring ( 0 , end ) ; }","['Move BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",3879
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . toLowerCase ( ) ) ; return this . VAR_3 . equals ( VAR_2 ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return this . VAR_3 . equals ( VAR_1 . METHOD_3 ( ) . toLowerCase ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3880
private boolean METHOD_1 ( ) { long VAR_1 = METHOD_2 ( ) ; long VAR_2 = TYPE_1 . METHOD_3 ( ) ; if ( VAR_1 < VAR_2 ) { return false ; } return true ; },private boolean METHOD_1 ( ) { long VAR_1 = METHOD_2 ( ) ; long VAR_2 = METHOD_3 ( ) ; if ( VAR_1 < VAR_2 ) { return false ; } return true ; },['Update TypeAccess'],3881
public boolean METHOD_1 ( java.lang.Throwable VAR_1 ) { java.lang.Integer key = TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 . contains ( key ) ) return true ; VAR_2 . add ( key ) ; return false ; },public boolean METHOD_1 ( java.lang.Throwable VAR_1 ) { if ( VAR_2 . contains ( VAR_1 ) ) return true ; VAR_2 . add ( VAR_1 ) ; return false ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Update VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3883
public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",3885
"public void show ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( data ) ; VAR_2 . show ( VAR_3 . METHOD_2 ( ) , STRING_1 ) ; }","public void show ( ) { TYPE_1 VAR_1 = new TYPE_1 ( data ) ; VAR_2 . show ( VAR_3 . METHOD_2 ( ) , STRING_1 ) ; }","['Insert ConstructorCall', 'Move FieldRead', 'Delete TypeAccess', 'Delete Invocation']",3886
"static java.lang.String METHOD_1 ( int k ) { java.lang.String VAR_1 = java.lang.String.format ( STRING_1 , k ) ; return VAR_2 . substring ( ( ( VAR_2 . length ( ) ) - INT_1 ) ) ; }","static java.lang.String METHOD_1 ( int k ) { return java.lang.String.format ( STRING_1 , k ) . substring ( 0 , INT_1 ) ; }","['Move Invocation', 'Insert Literal', 'Update TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",3887
"public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( this , VAR_3 class ) ; if ( VAR_1 != null ) return VAR_1 . METHOD_3 ( ) ; return null ; }","public TYPE_1 METHOD_1 ( ) { return VAR_2 . METHOD_2 ( this , VAR_3 class ) . METHOD_3 ( ) ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",3888
"public TYPE_1 getConfig ( ) { TYPE_2 < TYPE_1 > VAR_1 = VAR_2 . METHOD_1 ( VAR_3 , VAR_4 class ) ; return VAR_1 . METHOD_2 ( ) ; }","public TYPE_1 getConfig ( ) { TYPE_2 < TYPE_1 > VAR_1 = VAR_2 . METHOD_1 ( VAR_3 , VAR_4 class ) ; TYPE_1 result = VAR_1 . METHOD_2 ( ) ; return result ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",3890
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . toString ( ) ; VAR_3 . setText ( ( STRING_1 + ( VAR_4 . substring ( INT_1 ) ) ) ) ; } },private void METHOD_1 ( java.lang.String VAR_2 ) { VAR_3 . setText ( ( STRING_1 + ( VAR_4 . substring ( INT_1 ) ) ) ) ; },"['Update Parameter', 'Move Invocation', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete Block', 'Delete If']",3891
public void METHOD_1 ( ) { TYPE_1 temp = VAR_1 ; VAR_1 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( temp ) ; },public void METHOD_1 ( ) { VAR_1 = VAR_1 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3892
public void METHOD_1 ( ) { int size = VAR_1 . size ( ) ; for ( int i = size + 1 ; i < ( size + INT_1 ) ; i ++ ) { VAR_1 . add ( i ) ; } },public void METHOD_1 ( ) { int size = VAR_1 . size ( ) ; for ( int i = size ; i < ( size + INT_1 ) ; i ++ ) { VAR_1 . add ( i ) ; } },"['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",3895
public static TYPE_1 METHOD_1 ( java.io.InputStream VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; return TYPE_1 . METHOD_4 ( VAR_2 ) ; },public static TYPE_1 METHOD_1 ( java.io.InputStream VAR_1 ) throws java.io.IOException { return TYPE_1 . METHOD_4 ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3896
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_2 ) { return VAR_1 ; } else { return null ; } },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Update TypeReference', 'Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",3897
public TYPE_1 METHOD_1 ( java.lang.String key ) { java.lang.String value = getValue ( key ) ; if ( value == null ) return null ; else { TYPE_1 data = new TYPE_2 ( ) . METHOD_2 ( value ) . METHOD_3 ( ) ; return data ; } },public TYPE_1 METHOD_1 ( java.lang.String key ) { TYPE_1 data = new TYPE_2 ( ) . METHOD_2 ( getValue ( key ) ) . METHOD_3 ( ) ; return data ; },"['Update LocalVariable', 'Move Return', 'Move TypeReference', 'Insert Invocation', 'Insert Invocation', 'Move ConstructorCall', 'Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete Block', 'Delete If']",3898
public boolean METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = METHOD_2 ( ) ; return ( VAR_2 . startsWith ( STRING_1 ) ) || ( ( VAR_1 . METHOD_3 ( STRING_2 ) ) >= 0 ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { return ( VAR_2 . startsWith ( STRING_1 ) ) || ( ( VAR_1 . METHOD_3 ( STRING_2 ) ) >= 0 ) ; },"['Insert Parameter', 'Move TypeReference', 'Delete Invocation', 'Delete LocalVariable']",3899
"public static void main ( java.lang.String [ ] args ) throws java.lang.Exception , TYPE_1 { while ( true ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; java.lang.System.out.println ( TYPE_3 . METHOD_1 ( ) ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; } }","public static void main ( java.lang.String [ ] args ) throws java.lang.Exception , TYPE_1 { while ( true ) { java.lang.System.out.println ( TYPE_3 . METHOD_1 ( ) ) ; } }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",3900
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_2 . add ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; TYPE_2 VAR_5 = new TYPE_2 ( STRING_2 ) ; VAR_2 . add ( VAR_5 ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_2 . add ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3902
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; java.lang.String VAR_1 = new TYPE_1 ( VAR_2 ) . toString ( ) ; TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_5 , VAR_1 ) ; VAR_6 . commit ( ) ; }",public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",3903
"private void METHOD_1 ( TYPE_1 VAR_1 ) { boolean result = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( result ) METHOD_4 ( false ) ; else TYPE_3 . METHOD_5 ( this , STRING_1 ) ; }",private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; METHOD_4 ( false ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Block', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",3904
public static void init ( TYPE_1 VAR_1 ) { java.lang.String path = VAR_1 . METHOD_1 ( VAR_2 ) . trim ( ) ; if ( path != null ) { VAR_3 = path ; } },public static void init ( TYPE_1 VAR_1 ) { java.lang.String path = VAR_1 . METHOD_1 ( VAR_2 ) ; if ( path != null ) { VAR_3 = path ; } },"['Move Invocation', 'Delete Invocation']",3907
public void METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; if ( ( ( VAR_2 ) != null ) && VAR_1 ) { VAR_3 . show ( ) ; } },public void METHOD_1 ( ) { if ( ( VAR_2 ) != null ) { VAR_3 . show ( ) ; } },"['Move BinaryOperator', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator']",3908
public void METHOD_1 ( java.lang.Long VAR_1 ) { if ( ( VAR_2 ) == null ) { TYPE_1 context = new TYPE_2 ( VAR_3 class ) ; TYPE_3 VAR_4 = context . METHOD_2 ( VAR_5 class ) ; this . VAR_2 = VAR_4 . METHOD_3 ( ) ; } },public void METHOD_1 ( java.lang.Long VAR_1 ) { },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete FieldWrite', 'Delete VariableRead', 'Delete Invocation', 'Delete Assignment', 'Delete Block', 'Delete If']",3909
"public void METHOD_1 ( TYPE_1 event ) { java.lang.String x = STRING_1 ; new TYPE_2 ( ) ; TYPE_2 . METHOD_2 ( null , x , STRING_2 , VAR_1 , new TYPE_3 ( STRING_3 ) ) ; }","public void METHOD_1 ( TYPE_1 event ) { java.lang.String x = STRING_1 ; TYPE_2 j = new TYPE_2 ( ) ; j . METHOD_2 ( null , x , STRING_2 , VAR_1 , new TYPE_3 ( STRING_3 ) ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead', 'Delete TypeAccess']",3911
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; return VAR_1 + ( VAR_2 ) ; },public synchronized java.lang.String METHOD_1 ( ) { return VAR_2 ; },"['Insert Wra', 'Move FieldRead', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator']",3913
"public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = this . METHOD_2 ( VAR_3 ) ; TYPE_3 . METHOD_3 ( this , VAR_2 ) ; this . METHOD_4 ( this . getString ( VAR_4 ) ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; this . METHOD_2 ( VAR_3 ) ; this . METHOD_4 ( this . getString ( VAR_4 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation']",3914
"public static synchronized boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > VAR_2 = TYPE_4 . METHOD_2 ( ) ; if ( VAR_2 . METHOD_3 ( VAR_3 ) ) { return true ; } return VAR_2 . METHOD_3 ( VAR_1 ) ; }",public static synchronized boolean METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3915
"public void METHOD_1 ( TYPE_1 VAR_1 , int i , java.lang.Object VAR_2 ) { TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_2 ) ) ; VAR_4 . setText ( ( ( TYPE_2 ) ( VAR_2 ) ) . getText ( ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int i , java.lang.Object VAR_2 ) { }","['Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",3916
public TYPE_1 < TYPE_2 > get ( java.lang.String name ) { TYPE_2 type = VAR_1 . METHOD_1 ( name ) ; if ( type == null ) { return new TYPE_1 ( VAR_2 ) ; } return TYPE_1 . METHOD_2 ( type ) ; },public TYPE_2 get ( java.lang.String name ) { return VAR_1 . METHOD_1 ( name ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3920
public void METHOD_1 ( ) { java.util.Collection < TYPE_1 > VAR_1 = METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_2 . METHOD_5 ( false ) ; VAR_3 . setEnabled ( true ) ; METHOD_6 ( VAR_1 ) ; },public void METHOD_1 ( ) { METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_2 . METHOD_5 ( false ) ; VAR_3 . setEnabled ( true ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3921
"public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.io.IOException VAR_5 ) { java.util.logging.Logger.getLogger ( VAR_6 class . getName ( ) ) . METHOD_2 ( VAR_7 , null , VAR_5 ) ; } }","public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_4 ) ; } catch ( java.io.IOException VAR_5 ) { java.util.logging.Logger.getLogger ( VAR_6 class . getName ( ) ) . METHOD_2 ( VAR_7 , null , VAR_5 ) ; } }",['Delete FieldRead'],3923
"private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; TYPE_1 VAR_4 = TYPE_2 . METHOD_3 ( getActivity ( ) , VAR_5 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; }",private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3925
public TYPE_1 METHOD_1 ( java.io.InputStream source ) { java.io.BufferedReader VAR_1 = new java.io.BufferedReader ( new TYPE_2 ( source ) ) ; return METHOD_2 ( METHOD_3 ( VAR_1 ) ) ; },public TYPE_1 METHOD_1 ( java.io.InputStream source ) { return METHOD_2 ( METHOD_3 ( source ) ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",3926
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , true ) ; VAR_1 . METHOD_1 ( - INT_1 ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_2 ( ) ; }","public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_1 ( - INT_1 ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_2 ( ) ; }","['Move Invocation', 'Insert FieldRead', 'Delete Literal', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3927
"public void METHOD_1 ( android.content.Intent intent ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( this ) ; boolean VAR_2 = VAR_3 . getBoolean ( STRING_1 , true ) ; if ( VAR_2 ) { METHOD_3 ( STRING_2 ) ; } }",public void METHOD_1 ( android.content.Intent intent ) { METHOD_3 ( STRING_2 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Block', 'Delete If']",3928
"public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return false ; } java.lang.String token = VAR_2 . getString ( STRING_1 , ""0"" ) ; if ( VAR_3 . equals ( ""0"" ) ) { return false ; } return true ; }",public void METHOD_1 ( ) { },"['Update TypeReference', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",3931
public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; return ( VAR_2 != null ) && ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) <= ( VAR_3 ) ) ; },"public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( METHOD_2 ( VAR_1 , VAR_3 ) ) != null ; }","['Update BinaryOperator', 'Move Invocation', 'Move Literal', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",3932
"public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { boolean VAR_4 = VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; java.lang.String k = METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_6 . METHOD_3 ( k ) ; return VAR_4 ; }","public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { boolean VAR_4 = VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; return VAR_4 ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3933
"public void METHOD_1 ( int position , float VAR_1 , int VAR_2 ) { int VAR_3 = position % ( VAR_4 . size ( ) ) ; if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_1 ( VAR_3 , VAR_1 , VAR_2 ) ; } }","public void METHOD_1 ( int position , float VAR_1 , int VAR_2 ) { }","['Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",3934
public static void index ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_1 . METHOD_1 ( ) . METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; },public static void index ( ) { METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",3935
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; return METHOD_3 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( ) throws java.io.IOException { return METHOD_3 ( VAR_2 . METHOD_1 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",3936
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_2 ) ; VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable']",3937
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; VAR_3 . assertEquals ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 class ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; }","['Update TypeAccess', 'Update TypeAccess']",3938
"public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( 0 , VAR_2 ) ; return VAR_1 ; }","public java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( 0 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3939
"private boolean METHOD_1 ( ) { METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( VAR_1 , ( - 1 ) ) ; }","private boolean METHOD_1 ( ) { METHOD_2 ( ) ; boolean result = TYPE_1 . METHOD_3 ( VAR_1 , ( - 1 ) ) ; return result ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",3940
public static void main ( java.lang.String [ ] args ) { java.lang.Thread VAR_1 = new java.lang.Thread ( new TYPE_1 ( ) ) ; VAR_1 . METHOD_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( ) ; },public static void main ( java.lang.String [ ] args ) { new java.lang.Thread ( new TYPE_1 ( ) ) . METHOD_2 ( ) ; },"['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3942
public TYPE_1 METHOD_1 ( ) { TYPE_2 p = this . VAR_1 . METHOD_1 ( ) ; return METHOD_2 ( p ) ; },public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( this . VAR_1 . METHOD_1 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3944
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; android.content.Intent VAR_3 = new android.content.Intent ( ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; METHOD_4 ( VAR_3 , 0 ) ; METHOD_5 ( ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",3946
"public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( STRING_1 , METHOD_2 ( ) ) ; VAR_2 = new TYPE_1 ( VAR_3 , VAR_1 ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( STRING_1 , METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , VAR_1 ) ; return VAR_2 ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",3947
protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 response = VAR_2 . delete ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; return response ; },protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . delete ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3950
public void METHOD_1 ( TYPE_1 VAR_1 ) { url = VAR_2 . getText ( ) ; VAR_3 . setEnabled ( false ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_5 . start ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.exit ( 0 ) ; },"['Update Invocation', 'Update TypeAccess', 'Update Literal', 'Delete FieldWrite', 'Delete TypeAccess', 'Delete Invocation', 'Delete Assignment', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",3951
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( INT_1 ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( INT_1 ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",3952
public void METHOD_1 ( ) { boolean VAR_1 = METHOD_2 ( ) ; if ( ! VAR_1 ) return ; VAR_2 . METHOD_3 ( this ) ; VAR_3 = true ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( this ) ; },public void METHOD_1 ( ) { VAR_2 . METHOD_3 ( this ) ; VAR_3 = true ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( this ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",3954
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class , VAR_3 ) . METHOD_3 ( ) ; return TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; }","public TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( VAR_2 class , VAR_3 ) . METHOD_3 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3955
"private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( intent ) ; }",private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this ) ; },"['Update ConstructorCall', 'Delete FieldRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3956
"public void METHOD_1 ( android.view.View view , int position ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( view . METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( ( ! ( VAR_1 . METHOD_4 ( ) ) ) ) ; }","public void METHOD_1 ( android.view.View view , int position ) { }","['Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Invocation']",3957
public static void main ( java.lang.String [ ] args ) { java.util.ArrayList VAR_1 = TYPE_1 . METHOD_1 ( STRING_1 ) ; if ( VAR_1 == null ) { java.lang.System.out.println ( STRING_2 ) ; return ; } java.lang.System.out.println ( VAR_2 . toString ( ) ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",3958
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . info ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ) ; VAR_3 . METHOD_4 ( ) ; }",public void METHOD_1 ( ) throws java.lang.Exception { VAR_3 . METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",3959
"public int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; return VAR_2 == 1 ? VAR_3 . METHOD_4 ( ) : - 1 ; }","public int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = ( ( TYPE_3 ) ( VAR_1 . METHOD_3 ( ) ) ) . VAR_3 ; return VAR_2 == 1 ? VAR_3 . METHOD_4 ( ) : - 1 ; }","['Insert FieldRead', 'Move Invocation', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation']",3960
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = ( ( ( ( + ( VAR_3 ) ) + ( + ( VAR_4 ) ) ) + STRING_1 ) + ( VAR_5 ) ) + ( VAR_6 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 ; },"['Delete FieldRead', 'Delete UnaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",3961
"public java.lang.String METHOD_1 ( java.lang.String name ) { java.lang.System.out.println ( name ) ; boolean VAR_1 = VAR_2 . add ( STRING_1 , name ) ; if ( VAR_1 ) { java.lang.System.out.println ( ( ( STRING_2 + name ) + STRING_3 ) ) ; } return STRING_4 + name ; }",public java.lang.String METHOD_1 ( java.lang.String name ) { java.lang.System.out.println ( name ) ; return STRING_4 + name ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",3962
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( 0 , 0 , METHOD_4 ( ) , METHOD_5 ( ) ) ; METHOD_6 ( ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Literal', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",3963
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 . getId ( ) ) ; VAR_5 . setState ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",3964
public static TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > list ) { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( list ) ; if ( VAR_1 == null ) { return null ; } return TYPE_4 . METHOD_2 ( list ) . METHOD_3 ( ) ; },public static TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > list ) { return TYPE_4 . METHOD_2 ( list ) . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",3967
public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( STRING_1 ) ; return VAR_2 . format ( this . VAR_3 ) ; },public java.util.Date METHOD_1 ( ) { return VAR_3 ; },"['Update TypeReference', 'Insert FieldRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation']",3968
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , new TYPE_2 ( INT_1 , INT_2 , INT_3 ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_2 ) ; java.lang.System.out.println ( VAR_1 ) ; java.lang.System.out.println ( VAR_2 ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",3970
"public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { int VAR_2 = VAR_3 . METHOD_2 ( position ) ; METHOD_3 ( VAR_4 . get ( VAR_2 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { METHOD_3 ( VAR_4 . get ( position ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3972
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; if ( VAR_2 . METHOD_3 ( STRING_2 ) ) { return true ; } return false ; },public boolean METHOD_1 ( ) { return false ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",3974
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.Long id = new java.lang.Long ( 1 ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( id ) ; assertEquals ( id , VAR_3 . getId ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; long id = 1 ; TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( id ) ; assertEquals ( 1L , VAR_3 . getId ( ) ) ; }","['Update TypeReference', 'Move Literal', 'Insert Literal', 'Delete ConstructorCall', 'Delete VariableRead']",3975
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 p = new TYPE_2 ( ) ; if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { select = ( ( java.lang.String ) ( VAR_2 . METHOD_3 ( ) ) ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { select = ( ( java.lang.String ) ( VAR_2 . METHOD_3 ( ) ) ) ; } },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",3976
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this . VAR_2 , this . name ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",3978
"public static TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 . METHOD_2 ( VAR_4 , STRING_1 ) ) ; if ( VAR_5 . toLowerCase ( ) . equals ( STRING_2 ) ) return VAR_6 ; else return VAR_7 ; }","public static java.lang.String METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 . METHOD_2 ( VAR_4 , STRING_1 ) ) ; }","['Update TypeReference', 'Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",3980
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; if ( VAR_3 . METHOD_2 ( VAR_1 ) ) { return TYPE_4 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_1 ) ) ; } return null ; },public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; if ( VAR_3 . METHOD_2 ( VAR_1 ) ) { return TYPE_4 . METHOD_3 ( VAR_1 ) ; } return null ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",3982
"protected boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { boolean temp = VAR_1 . METHOD_2 ( ( ( VAR_3 ) + VAR_2 ) ) ; return temp ; }","protected boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { return VAR_1 . METHOD_2 ( ( ( VAR_3 ) + VAR_2 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3983
public void handle ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; },public void handle ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3985
"public void METHOD_1 ( TYPE_1 VAR_1 , byte [ ] data ) throws java.io.IOException { TYPE_2 VAR_2 = METHOD_2 ( ) . METHOD_3 ( data ) ; if ( VAR_2 != null ) { METHOD_4 ( VAR_1 , VAR_2 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , byte [ ] data ) throws java.io.IOException { METHOD_4 ( VAR_1 , METHOD_2 ( ) . METHOD_3 ( data ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",3986
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , STRING_1 ) ; android.content.Intent intent = new android.content.Intent ( VAR_2 , VAR_3 class ) ; intent . METHOD_4 ( VAR_4 ) ; VAR_2 . METHOD_5 ( intent ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , STRING_1 ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",3988
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; context = this ; android.content.Context VAR_3 ; METHOD_3 ( ) ; METHOD_4 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; context = this ; METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete LocalVariable']",3989
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String text = VAR_2 . getText ( ) ; if ( ( text != null ) && ( VAR_3 . equals ( STRING_1 ) ) ) VAR_2 . setText ( STRING_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . getText ( ) . equals ( STRING_1 ) ) VAR_2 . setText ( STRING_2 ) ; },"['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",3991
public TYPE_1 METHOD_1 ( ) { TYPE_2 < TYPE_3 > VAR_1 = get ( VAR_2 ) ; if ( VAR_1 == null ) { return null ; } return VAR_1 . METHOD_2 ( ) ; },public TYPE_1 METHOD_1 ( ) { return get ( VAR_2 ) . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3992
"public android.view.View METHOD_1 ( java.lang.Integer VAR_1 , TYPE_1 VAR_2 ) { android.view.View VAR_3 = VAR_2 . METHOD_2 ( VAR_1 , null , false ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; return VAR_3 ; }","public android.view.View METHOD_1 ( java.lang.Integer VAR_1 , TYPE_1 VAR_2 ) { return null ; }","['Move Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",3993
"public static java.io.File METHOD_1 ( ) { java.io.File VAR_1 = new java.io.File ( TYPE_1 . METHOD_2 ( ) . VAR_2 , STRING_1 ) ; VAR_1 . METHOD_3 ( ) ; return VAR_1 ; }","public static java.io.File METHOD_1 ( ) { return new java.io.File ( TYPE_1 . METHOD_2 ( ) . VAR_2 , STRING_1 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",3994
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , java.lang.String [ ] args ) { boolean VAR_4 = VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , args ) ; return VAR_4 ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , java.lang.String [ ] args ) { return VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , args ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",3995
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 ) ; android.content.Intent intent = getIntent ( ) ; METHOD_3 ( ) ; METHOD_4 ( intent ) ; return true ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 ) ; return true ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",3996
"public static long METHOD_1 ( java.lang.String VAR_1 , java.lang.String value ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , value ) ; if ( ( VAR_3 . length ( ) ) == 0 ) return 0 ; return java.lang.Long.parseLong ( VAR_2 ) ; }","public static long METHOD_1 ( java.lang.String VAR_1 , java.lang.String value ) { return java.lang.Long.parseLong ( TYPE_1 . METHOD_2 ( VAR_1 , value ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",3997
"public void METHOD_1 ( android.view.View view ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . remove ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 , VAR_3 . size ( ) ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",3998
"public static TYPE_1 METHOD_1 ( TYPE_1 value , TYPE_2 VAR_1 ) { TYPE_1 result = new TYPE_1 ( ) ; TYPE_1 . METHOD_1 ( value , VAR_1 , result ) ; return result ; }","public static TYPE_1 METHOD_1 ( TYPE_1 value , TYPE_2 VAR_1 ) { TYPE_1 . METHOD_1 ( value , VAR_1 , value ) ; return value ; }","['Update VariableRead', 'Update VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",4000
public TYPE_1 METHOD_1 ( ) { try { METHOD_2 ( ) ; TYPE_1 b = new TYPE_1 ( ) ; b . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ; return b ; } catch ( java.io.IOException VAR_2 ) { return null ; } },public TYPE_1 METHOD_1 ( ) { try { METHOD_2 ( ) ; return new TYPE_1 ( VAR_1 . METHOD_3 ( ) ) ; } catch ( java.io.IOException VAR_2 ) { return null ; } },"['Insert ConstructorCall', 'Move Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",4001
"public TYPE_1 METHOD_1 ( java.lang.Integer id ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 , new TYPE_2 ( ) . METHOD_3 ( id ) ) ; VAR_1 . METHOD_2 ( STRING_3 , new TYPE_3 ( ) ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( java.lang.Integer id ) { return new TYPE_1 ( STRING_1 , STRING_2 , new TYPE_2 ( ) . METHOD_3 ( id ) ) ; }","['Insert ConstructorCall', 'Move FieldRead', 'Insert FieldRead', 'Move Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead']",4003
"public void METHOD_1 ( TYPE_1 response ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . put ( STRING_2 , STRING_3 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 response ) { java.lang.System.out.println ( STRING_1 ) ; VAR_3 . METHOD_2 ( new TYPE_1 ( ) . put ( STRING_2 , STRING_3 ) . toString ( ) ) ; }","['Insert Invocation', 'Move Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead']",4004
"private void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) != null ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; throw TYPE_1 . METHOD_4 ( VAR_3 , ( STRING_1 + STRING_2 ) , VAR_2 ) ; } }","private void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) != null ) { METHOD_3 ( ) ; throw TYPE_1 . METHOD_4 ( VAR_3 , ( STRING_1 + STRING_2 ) , VAR_1 . METHOD_2 ( ) ) ; } }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4006
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) { VAR_1 . METHOD_4 ( VAR_4 ) ; } else { VAR_1 . METHOD_4 ( VAR_5 ) ; } },public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) { VAR_1 . METHOD_4 ( VAR_4 ) ; } else { VAR_1 . METHOD_4 ( VAR_5 ) ; } },['Delete TypeAccess'],4007
public java.util.Properties METHOD_1 ( ) { java.util.Properties VAR_1 = new java.util.Properties ( ) ; VAR_1 . METHOD_2 ( this . VAR_1 ) ; return VAR_1 ; },public java.util.Properties METHOD_1 ( ) { return new java.util.Properties ( VAR_1 ) ; },"['Insert ConstructorCall', 'Insert FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead']",4008
protected static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; return VAR_3 . build ( ) ; },protected static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; return VAR_3 . build ( ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation']",4009
public TYPE_1 update ( TYPE_2 node ) { TYPE_1 VAR_1 = node . METHOD_1 ( ) . METHOD_2 ( this ) ; if ( VAR_1 instanceof TYPE_3 ) return VAR_1 ; return new TYPE_2 ( VAR_1 ) ; },public TYPE_1 update ( TYPE_2 node ) { return new TYPE_2 ( node . METHOD_1 ( ) . METHOD_2 ( this ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4011
private int METHOD_1 ( ) { int size = VAR_1 . size ( ) ; if ( 1 == size ) { return 0 ; } return ( java.lang.Math.abs ( ( ( count ) ++ ) ) ) % size ; },private int METHOD_1 ( ) { if ( 1 == ( VAR_1 . size ( ) ) ) { return 0 ; } return ( java.lang.Math.abs ( ( ( count ) ++ ) ) ) % ( VAR_1 . size ( ) ) ; },"['Move Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4012
"public static int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = java.lang.Math.round ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_3 ) ) ; if ( VAR_2 == ( VAR_4 ) ) { return - 1 ; } return VAR_2 ; }","public static int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_3 ) ; if ( VAR_2 == ( VAR_4 ) ) { return - 1 ; } return VAR_2 ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",4013
protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ; METHOD_1 ( VAR_2 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4014
"public void METHOD_1 ( java.lang.Throwable VAR_1 ) { java.lang.System.out.println ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_2 ( ) . METHOD_3 ( VAR_3 ) . METHOD_4 ( STRING_1 , STRING_2 ) . build ( ) ; VAR_4 . METHOD_5 ( VAR_2 ) ; }",public void METHOD_1 ( java.lang.Throwable VAR_1 ) { },"['Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4015
"public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 , VAR_4 . getId ( ) ) ; METHOD_3 ( intent ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { return ; },"['Insert Return', 'Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4016
protected int METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) == ( VAR_3 ) ) return VAR_1 ; return ( ( METHOD_2 ( ) ) - VAR_1 ) - 1 ; },protected int METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) == ( VAR_3 ) ) return VAR_1 ; int position = VAR_1 ; return ( ( METHOD_2 ( ) ) - position ) - 1 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move VariableRead', 'Insert VariableRead']",4018
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 . main , VAR_1 ) ; return super . METHOD_1 ( VAR_1 ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_3 . main , VAR_1 ) ; return super . METHOD_1 ( VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4019
public static boolean METHOD_1 ( TYPE_1 message ) { int out = message . METHOD_2 ( ) ; return out > 0 ; },public static boolean METHOD_1 ( TYPE_1 message ) { return ( message . METHOD_2 ( ) ) == 1 ; },"['Update BinaryOperator', 'Move Invocation', 'Update Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4020
"private void METHOD_1 ( ) { boolean VAR_1 = ( VAR_2 . getText ( ) . toString ( ) . length ( ) ) > 0 ; METHOD_2 ( VAR_3 , VAR_1 ) ; }","private void METHOD_1 ( ) { METHOD_2 ( VAR_3 , ( ( VAR_2 . getText ( ) . toString ( ) . length ( ) ) > 0 ) ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4021
"public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_1 . METHOD_2 ( ) , VAR_2 . getId ( ) ) ; VAR_3 . METHOD_3 ( true ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_5 . info ( VAR_4 ) ; } }",public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_3 . METHOD_3 ( true ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_5 . info ( VAR_4 ) ; } },"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",4023
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 ; if ( VAR_1 != null ) { java.util.Collection < TYPE_2 > VAR_3 = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ( ( java.util.List < TYPE_2 > ) ( VAR_3 ) ) ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 ; if ( VAR_1 != null ) { METHOD_3 ( ( ( java.util.List < TYPE_2 > ) ( VAR_1 . METHOD_2 ( ) ) ) ) ; } },"['Insert Invocation', 'Move TypeReference', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4024
public java.lang.Integer METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = this . VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; return VAR_1 ; },public java.lang.Integer METHOD_1 ( ) throws java.lang.Exception { return this . VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead']",4025
"public void METHOD_1 ( TYPE_1 className , TYPE_2 VAR_1 ) { VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) ; VAR_3 = VAR_2 . METHOD_2 ( ) ; VAR_4 = true ; }","public void METHOD_1 ( TYPE_1 className , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) ; VAR_3 = VAR_2 . METHOD_2 ( ) ; VAR_4 = true ; }","['Insert LocalVariable', 'Insert Assignment', 'Insert TypeReference', 'Move VariableRead', 'Move FieldWrite', 'Insert Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess', 'Delete Invocation', 'Delete Assignment']",4027
public void METHOD_1 ( long id ) { TYPE_1 VAR_1 = METHOD_2 ( id ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; },public void METHOD_1 ( long id ) { },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4029
"public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . put ( VAR_2 , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . put ( VAR_1 . METHOD_2 ( ) , VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4031
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_3 ( STRING_1 , STRING_2 ) ; METHOD_4 ( VAR_2 , intent ) ; METHOD_5 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4032
public TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_3 . text ( ) ; if ( VAR_4 . contains ( VAR_1 ) ) { METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; } return this ; },public TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { if ( VAR_3 . text ( ) . contains ( VAR_1 ) ) { METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; } return this ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",4033
"public int METHOD_1 ( int i , int VAR_1 ) { TYPE_1 VAR_2 = this . METHOD_2 ( i , VAR_1 ) ; return VAR_2 . METHOD_3 ( ( i & INT_1 ) , ( VAR_1 & INT_1 ) ) ; }","public int METHOD_1 ( int i , int VAR_1 ) { return 0 ; }","['Insert Literal', 'Delete TypeReference', 'Delete ThisAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",4034
"public void METHOD_1 ( java.io.IOException error ) { java.lang.System.out.println ( ( STRING_1 + error ) ) ; TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_2 ) , STRING_2 , VAR_3 ) ; VAR_4 . show ( ) ; }",public void METHOD_1 ( java.io.IOException error ) { java.lang.System.out.println ( ( STRING_1 + error ) ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",4035
"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View VAR_2 , int position , long VAR_3 ) { java.lang.String VAR_4 = ( ( java.lang.String ) ( VAR_5 . get ( position ) ) ) ; }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View VAR_2 , int position , long VAR_3 ) { }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4036
public void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 ; TYPE_1 VAR_3 = ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) ) ; VAR_3 . METHOD_4 ( ) ; METHOD_5 ( ) ; },public void METHOD_1 ( ) { METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4037
"protected void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( ( ( VAR_2 ) | ( VAR_3 ) ) ) ; METHOD_3 ( intent ) ; METHOD_4 ( ) ; }","protected void METHOD_1 ( ) { METHOD_3 ( new android.content.Intent ( this , VAR_1 class ) ) ; METHOD_4 ( ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4038
public TYPE_1 METHOD_1 ( ) { try { TYPE_2 VAR_1 = new TYPE_2 ( ) ; return VAR_1 ; } catch ( TYPE_3 VAR_2 ) { VAR_2 . METHOD_2 ( ) ; } return null ; },public TYPE_1 METHOD_1 ( ) { try { return new TYPE_2 ( ) ; } catch ( TYPE_3 VAR_2 ) { VAR_2 . METHOD_2 ( ) ; } return null ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4039
public java.lang.Long METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) return 1L ; return VAR_3 . get ( ) . METHOD_4 ( ) ; },public java.lang.Long METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) return 1L ; return VAR_3 . get ( ) . METHOD_4 ( ) ; },"['Insert Invocation', 'Update Invocation', 'Move Invocation']",4040
public java.lang.Object [ ] METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return VAR_2 . METHOD_1 ( ) . METHOD_2 ( new TYPE_2 [ 0 ] ) ; } return null ; },public java.lang.Object [ ] METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_1 ) { return new java.util.ArrayList < > ( ) . METHOD_2 ( new TYPE_2 [ 0 ] ) ; } return null ; },"['Insert ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4041
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; for ( int VAR_2 = INT_1 ; VAR_2 <= INT_2 ; VAR_2 += INT_1 ) { TYPE_2 c = new TYPE_2 ( VAR_1 ) ; c . METHOD_2 ( VAR_2 ) ; } },public void METHOD_1 ( ) { for ( int VAR_2 = INT_1 ; VAR_2 <= INT_2 ; VAR_2 += INT_1 ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; } },"['Move LocalVariable', 'Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4043
"public void METHOD_1 ( android.view.View VAR_1 ) { int VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( VAR_2 != ( VAR_4 ) ) { VAR_5 . METHOD_3 ( VAR_2 , VAR_6 , VAR_3 ) ; } }","public void METHOD_1 ( android.view.View VAR_1 ) { VAR_5 . METHOD_3 ( VAR_3 . METHOD_2 ( ) , VAR_6 , VAR_3 ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4046
"public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > data ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( VAR_2 . get ( STRING_1 ) ) ) ; TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; }","public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > data ) { TYPE_1 . METHOD_2 ( ( ( java.lang.Boolean ) ( VAR_2 . get ( STRING_1 ) ) ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4047
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_2 ( VAR_4 ) ) ) ; VAR_3 . METHOD_3 ( VAR_5 . METHOD_4 ( ) , 0 ) ; VAR_1 . METHOD_5 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4048
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object item , android.view.View view , int position ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( position ) ; METHOD_3 ( VAR_2 , position ) ; VAR_2 . METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object item , android.view.View view , int position ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4050
"private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( VAR_2 ) ; intent . METHOD_2 ( VAR_3 ) ; METHOD_3 ( intent ) ; }","private void METHOD_1 ( ) { METHOD_3 ( new android.content.Intent ( this , VAR_1 class ) ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4054
public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) ; java.lang.Object VAR_1 = VAR_2 . data ; VAR_3 = VAR_4 ; ( size ) -- ; return VAR_1 ; },public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) ; VAR_3 = VAR_4 ; ( size ) -- ; return VAR_3 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",4056
"public void METHOD_1 ( TYPE_1 file , java.lang.String name , java.lang.String VAR_1 ) { int id = VAR_2 . getId ( ) ; VAR_3 . put ( ) ; }","public void METHOD_1 ( TYPE_1 file , java.lang.String name , java.lang.String VAR_1 ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",4057
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = ( ( java.lang.String ) ( VAR_3 . getValue ( ) ) ) ; TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( STRING_1 ) ; VAR_6 . setValue ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = ( ( java.lang.String ) ( VAR_3 . getValue ( ) ) ) ; VAR_5 . METHOD_2 ( STRING_1 ) . setValue ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",4060
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; android.content.Intent i = new android.content.Intent ( VAR_2 , VAR_3 class ) ; METHOD_3 ( i ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4063
"public final void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( new TYPE_4 ( this , VAR_1 ) ) ; }",public final void METHOD_1 ( TYPE_1 VAR_1 ) { new TYPE_4 ( VAR_1 ) . execute ( this ) ; },"['Update Invocation', 'Move ThisAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4064
"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( this . METHOD_2 ( VAR_1 ) ) != null ) { TYPE_2 p = this . METHOD_2 ( VAR_1 ) ; p . METHOD_1 ( VAR_2 ) ; p . METHOD_3 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { TYPE_2 p = new TYPE_2 ( VAR_1 ) ; p . METHOD_1 ( VAR_2 ) ; p . METHOD_3 ( ) ; }","['Move LocalVariable', 'Move Invocation', 'Move Invocation', 'Insert ConstructorCall', 'Move VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4066
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) . build ( ) ; return new TYPE_3 ( VAR_2 ) . METHOD_6 ( VAR_1 ) . build ( ) ; },private TYPE_1 METHOD_1 ( ) { return new TYPE_3 ( VAR_2 ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) . build ( ) ; },"['Move Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",4067
public void METHOD_1 ( android.view.View VAR_1 ) { int VAR_2 = ( METHOD_2 ( ) ) + 1 ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( ( ( METHOD_2 ( ) ) + 1 ) ) ; METHOD_4 ( ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4068
protected void METHOD_1 ( int index ) { boolean VAR_1 = index != ( - 1 ) ; VAR_2 = index ; VAR_3 . setEnabled ( VAR_1 ) ; VAR_4 . setEnabled ( VAR_1 ) ; },protected void METHOD_1 ( int index ) { VAR_2 = index ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4069
public void METHOD_1 ( TYPE_1 listener ) { TYPE_2 p = TYPE_3 . METHOD_2 ( ) ; if ( listener == null ) { p . METHOD_1 ( null ) ; } else { p . METHOD_1 ( new TYPE_4 ( listener ) ) ; } },public void METHOD_1 ( TYPE_1 listener ) { TYPE_3 . METHOD_2 ( ) . METHOD_1 ( new TYPE_4 ( listener ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",4070
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; this . name = STRING_1 ; this . METHOD_2 ( name ) ; this . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ; TYPE_1 . METHOD_5 ( VAR_1 , name , VAR_2 ) ; }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; java.lang.String name = STRING_1 ; this . METHOD_2 ( name ) ; this . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ; TYPE_1 . METHOD_5 ( VAR_1 , name , VAR_2 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move FieldRead', 'Insert VariableRead', 'Insert VariableRead', 'Delete ThisAccess', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead', 'Delete FieldRead']",4072
public static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; return VAR_1 ; },public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",4073
public int METHOD_1 ( ) { int VAR_1 = super . METHOD_1 ( ) ; return VAR_1 ; },public int METHOD_1 ( ) { return super . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4074
"public static void METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( ! VAR_1 ) return ; VAR_2 . METHOD_3 ( VAR_3 , 1 , 1 , 1 , 0 , 1 ) ; }",public static void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Literal', 'Delete Literal', 'Delete Literal', 'Delete Literal', 'Delete Invocation']",4076
"private static void METHOD_1 ( TYPE_1 result , java.lang.Object ... VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( result , VAR_1 ) ; TYPE_3 . METHOD_1 ( VAR_2 ) ; TYPE_4 . METHOD_2 ( VAR_2 ) ; }","private static void METHOD_1 ( TYPE_1 result , java.lang.Object ... VAR_1 ) { TYPE_3 . METHOD_1 ( new TYPE_2 ( result , VAR_1 ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4078
TYPE_1 METHOD_1 ( ) { VAR_1 . init ( VAR_2 ) ; final TYPE_2 VAR_3 = new TYPE_3 ( ) . METHOD_2 ( ) . build ( ) ; TYPE_1 . METHOD_3 ( VAR_3 ) ; return TYPE_1 . METHOD_4 ( VAR_3 ) ; },TYPE_1 METHOD_1 ( ) { VAR_1 . init ( VAR_2 ) ; final TYPE_2 VAR_3 = new TYPE_3 ( ) . build ( ) ; TYPE_1 . METHOD_3 ( VAR_3 ) ; return TYPE_1 . METHOD_4 ( VAR_3 ) ; },"['Update Invocation', 'Move Invocation', 'Delete Invocation']",4079
"private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_4 , VAR_5 ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; }",private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4080
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 . i ( VAR_4 , STRING_1 ) ; }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( VAR_2 ) ; VAR_3 . i ( VAR_4 , STRING_1 ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4081
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_1 VAR_2 = new TYPE_1 ( ) ; METHOD_2 ( VAR_2 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { return METHOD_2 ( null ) ; },"['Move Invocation', 'Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4082
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 file ) throws java.lang.Exception { TYPE_1 result = new TYPE_1 ( VAR_1 , file ) ; VAR_2 . put ( file , result ) ; return result ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 file ) throws java.lang.Exception { return new TYPE_1 ( VAR_1 , file ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4084
"public void METHOD_1 ( long id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 class , id ) ; TYPE_1 VAR_4 = VAR_1 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; update ( VAR_4 ) ; delete ( VAR_1 ) ; }","public void METHOD_1 ( long id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 class , id ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; update ( VAR_1 . METHOD_3 ( ) ) ; delete ( VAR_1 ) ; }","['Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Insert Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4085
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.awt.Font VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( content , x , y ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_4 ( content , x , y ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4086
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { METHOD_3 ( VAR_2 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4087
public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_4 ( VAR_4 ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4088
"public java.lang.Object METHOD_1 ( java.lang.String key ) { java.lang.String VAR_1 = VAR_2 . replace ( STRING_1 , STRING_2 ) ; if ( VAR_3 . METHOD_2 ( VAR_1 ) ) { return VAR_4 . get ( VAR_1 ) ; } return VAR_4 . get ( key ) ; }",public java.lang.Object METHOD_1 ( java.lang.String key ) { return VAR_4 . get ( key ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",4089
"public TYPE_1 METHOD_1 ( java.lang.String id , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( id , VAR_3 class ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_4 . update ( VAR_1 ) ; return VAR_5 . METHOD_4 ( VAR_2 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String id , TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( id ) ; VAR_4 . update ( VAR_1 ) ; return VAR_5 . METHOD_4 ( id ) ; }","['Move VariableRead', 'Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4090
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; android.widget.Button VAR_3 = ( ( android.widget.Button ) ( METHOD_3 ( VAR_4 ) ) ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",4091
"public TYPE_1 add ( TYPE_2 VAR_1 ) { int VAR_2 = METHOD_1 ( ) ; VAR_3 . add ( VAR_1 ) ; return new TYPE_1 ( this , VAR_2 , VAR_4 ) ; }","public TYPE_1 add ( TYPE_2 VAR_1 ) { VAR_3 . add ( VAR_1 ) ; return new TYPE_1 ( this , 0 , VAR_4 ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4092
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_2 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",4093
public void METHOD_1 ( TYPE_1 VAR_1 ) { int k = VAR_1 . METHOD_2 ( ) ; if ( ! ( METHOD_3 ( k ) ) ) VAR_2 . add ( k ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 . METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4094
public TYPE_1 METHOD_1 ( java.lang.String name ) { for ( TYPE_1 c : VAR_1 ) { java.lang.String VAR_2 = c . METHOD_2 ( ) ; if ( VAR_3 . equals ( name ) ) { return c ; } } return null ; },public TYPE_1 METHOD_1 ( java.lang.String name ) { for ( TYPE_1 c : VAR_1 ) { if ( ( c . METHOD_2 ( ) ) == name ) { return c ; } } return null ; },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",4095
"public java.util.HashMap < TYPE_1 , TYPE_2 > METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) throw new TYPE_3 ( STRING_1 ) ; java.util.HashMap < TYPE_1 , TYPE_2 > result = VAR_1 . remove ( 0 ) ; return result ; }",public void METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) throw new TYPE_3 ( STRING_1 ) ; VAR_1 . remove ( 0 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",4096
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_4 ( ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4097
public TYPE_1 METHOD_1 ( ) { java.lang.String path = ( ( this . METHOD_2 ( ) ) + ( VAR_1 ) ) + STRING_1 ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 . init ( path ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4098
"protected java.lang.Class < ? > METHOD_1 ( java.lang.String name ) { java.lang.String path = METHOD_2 ( name , true ) ; TYPE_1 VAR_1 = VAR_2 . get ( path ) ; if ( VAR_1 != null ) { return VAR_3 ; } return null ; }",protected java.lang.Class < ? > METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = VAR_2 . get ( name ) ; if ( VAR_1 != null ) { return VAR_3 ; } return null ; },"['Move VariableRead', 'Delete TypeReference', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4099
"public void METHOD_1 ( int VAR_1 , TYPE_1 [ ] VAR_2 , byte [ ] VAR_3 , java.lang.Throwable error ) { java.lang.String a = STRING_1 ; }","public void METHOD_1 ( int VAR_1 , TYPE_1 [ ] VAR_2 , byte [ ] VAR_3 , java.lang.Throwable error ) { }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",4101
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; return VAR_2 . METHOD_2 ( VAR_1 ) ; },public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; java.lang.String response = VAR_2 . METHOD_2 ( VAR_1 ) ; return response ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",4102
"public boolean remove ( int id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( ) ; boolean b = ( VAR_3 . delete ( VAR_4 , ( ( ( VAR_5 ) + STRING_1 ) + id ) , null ) ) > 0 ; return b ; }","public boolean remove ( int id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( ) ; return ( VAR_3 . delete ( VAR_4 , ( ( ( VAR_5 ) + STRING_1 ) + id ) , null ) ) > 0 ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4103
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 = TYPE_2 . METHOD_3 ( VAR_3 ) . build ( ) ; TYPE_3 VAR_4 = new TYPE_4 ( STRING_1 , null ) ; VAR_5 . getContext ( ) . METHOD_4 ( VAR_4 ) ; }",public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 = TYPE_2 . METHOD_3 ( VAR_3 ) . build ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4104
"protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) , VAR_2 ) ; VAR_1 . METHOD_3 ( new TYPE_2 ( INT_1 , INT_2 ) ) ; return VAR_1 ; }","protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( METHOD_2 ( ) , VAR_2 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead']",4105
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getActivity ( ) . METHOD_2 ( VAR_2 ) ) ) ; if ( null != VAR_1 ) VAR_1 . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",4106
"private void METHOD_1 ( ) { java.lang.String VAR_1 = getString ( VAR_2 , METHOD_2 ( ) . METHOD_3 ( VAR_3 , VAR_4 , VAR_4 ) ) ; VAR_5 . setText ( VAR_1 ) ; }","private void METHOD_1 ( ) { java.lang.String VAR_1 = getString ( VAR_2 , VAR_4 , METHOD_2 ( ) . METHOD_3 ( VAR_3 , VAR_4 ) ) ; VAR_5 . setText ( VAR_1 ) ; }",['Move TypeAccess'],4107
"public TYPE_1 METHOD_1 ( ) { TYPE_2 < TYPE_3 > VAR_1 = VAR_2 . METHOD_2 ( VAR_3 class ) ; return METHOD_3 ( VAR_4 . METHOD_4 ( VAR_1 , METHOD_5 ( ) ) ) ; }",public TYPE_1 METHOD_1 ( ) { return METHOD_3 ( VAR_4 . METHOD_4 ( METHOD_5 ( ) ) ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4108
"public TYPE_1 METHOD_1 ( int index ) { TYPE_2 < TYPE_3 , TYPE_1 > VAR_1 = VAR_2 . get ( index ) ; return VAR_3 ; }",public TYPE_1 METHOD_1 ( int index ) { return VAR_2 . get ( index ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead']",4109
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 ) ) ; VAR_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_2 . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) ; }",public void METHOD_1 ( ) { VAR_2 . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",4110
"public void METHOD_1 ( boolean VAR_1 ) { boolean VAR_2 = METHOD_2 ( ) ; TYPE_1 params = TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; METHOD_4 ( STRING_1 , params ) ; }","public void METHOD_1 ( boolean VAR_1 ) { TYPE_1 params = TYPE_2 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( STRING_1 , params ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4114
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = METHOD_2 ( ) ; return list ; },public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return list ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable']",4115
"public boolean METHOD_1 ( java.lang.String id , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( id ) ; return ( VAR_2 != null ) && ( VAR_4 . equals ( VAR_2 . METHOD_3 ( ) ) ) ; }","public boolean METHOD_1 ( java.lang.String id , java.lang.String VAR_1 ) { return VAR_4 . equals ( VAR_3 . METHOD_2 ( id ) . METHOD_3 ( ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator']",4116
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_4 ( ) . METHOD_3 ( STRING_1 ) ; assertEquals ( 1 , VAR_3 . getValue ( VAR_1 ) ) ; }","public void METHOD_1 ( ) { TYPE_3 VAR_2 = new TYPE_4 ( ) . METHOD_3 ( STRING_1 ) ; assertEquals ( 1 , VAR_3 . getValue ( ) ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead']",4117
"public void METHOD_1 ( TYPE_1 VAR_1 ) { -- ( VAR_2 ) ; VAR_3 . setText ( java.lang.String . METHOD_2 ( VAR_2 ) ) ; VAR_4 . METHOD_3 ( VAR_5 , VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { int n = ( java.lang.Integer.parseInt ( VAR_3 . getText ( ) ) ) - 1 ; VAR_3 . setText ( java.lang.String . METHOD_2 ( n ) ) ; VAR_4 . METHOD_3 ( VAR_5 , VAR_2 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Insert BinaryOperator', 'Insert Invocation', 'Insert Literal', 'Insert VariableRead', 'Insert TypeAccess', 'Insert Invocation', 'Insert TypeAccess', 'Delete FieldWrite', 'Delete UnaryOperator', 'Delete TypeAccess']",4118
private void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getText ( ) ; METHOD_1 ( VAR_1 ) ; },private void METHOD_1 ( ) { java.lang.String name = VAR_2 . getText ( ) ; METHOD_1 ( name ) ; },"['Update LocalVariable', 'Update VariableRead']",4119
public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 c = METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; return ( c == null ) || ( c == ( this ) ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) == null ; },"['Update BinaryOperator', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete ThisAccess', 'Delete BinaryOperator']",4121
public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_4 . setState ( VAR_5 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_3 . METHOD_2 ( VAR_1 ) . setState ( VAR_5 ) ; },"['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",4122
"private boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_1 , 0 ) ; return ( VAR_2 != null ) && ( VAR_3 . contains ( VAR_4 . getClass ( ) ) ) ; }","private boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . contains ( METHOD_2 ( ) . METHOD_3 ( VAR_1 , 0 ) . getClass ( ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator']",4123
public boolean METHOD_1 ( ) throws java.io.IOException { long length = VAR_1 . length ( ) ; return ( length >= 0 ) && ( ( position ) >= length ) ; },public boolean METHOD_1 ( ) throws java.io.IOException { return ( ( this . length ) >= 0 ) && ( ( position ) >= ( this . length ) ) ; },"['Insert BinaryOperator', 'Insert BinaryOperator', 'Insert FieldRead', 'Move Literal', 'Move FieldRead', 'Insert FieldRead', 'Insert ThisAccess', 'Insert ThisAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator']",4124
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; android.content.Intent intent = new android.content.Intent ( getActivity ( ) . METHOD_2 ( ) , VAR_1 class ) ; METHOD_3 ( intent ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_4 ( getContext ( ) ) ; }",public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_4 ( getContext ( ) ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4125
"public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_4 ( intent ) ; VAR_3 . start ( ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_4 ( intent ) ; VAR_3 . start ( ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4126
"public void start ( ) { long VAR_1 = ( INT_1 * INT_2 ) * INT_3 ; TYPE_1 VAR_2 = new TYPE_1 ( true ) ; VAR_2 . METHOD_1 ( this , VAR_1 , VAR_1 ) ; }","public void start ( ) { TYPE_1 VAR_2 = new TYPE_1 ( true ) ; VAR_2 . METHOD_1 ( this , ( INT_1 * INT_2 ) , ( INT_1 * INT_2 ) ) ; }","['Move BinaryOperator', 'Insert BinaryOperator', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4127
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; },public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4128
public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; if ( VAR_2 instanceof TYPE_3 ) { TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_2 ) ) ; TYPE_4 . METHOD_4 ( VAR_3 ) ; } },public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4129
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = new java.util.ArrayList ( VAR_3 ) ; java.util.Collections.sort ( VAR_2 , new TYPE_3 ( VAR_1 ) ) ; VAR_2 . METHOD_2 ( 0 , VAR_4 ) ; METHOD_3 ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Collections.sort ( VAR_3 , new TYPE_3 ( VAR_1 ) ) ; METHOD_3 ( VAR_3 ) ; }","['Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",4130
public boolean METHOD_1 ( int VAR_1 ) { int VAR_2 = METHOD_2 ( ) ; return ( VAR_2 & VAR_1 ) == VAR_1 ; },public boolean METHOD_1 ( int VAR_1 ) { return ( ( METHOD_2 ( ) ) & VAR_1 ) == VAR_1 ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4131
"public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( getContext ( ) ) ) ; android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_2 class ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_2 class ) ; METHOD_5 ( intent ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4132
"public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_2 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 ) ; assertEquals ( VAR_3 . METHOD_6 ( ) , VAR_1 ) ; }",public void METHOD_1 ( ) throws java.lang.Exception { },"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4133
"public void METHOD_1 ( TYPE_1 VAR_1 , int num ) { int VAR_2 = ( VAR_3 . get ( VAR_1 ) ) - num ; if ( VAR_2 > 0 ) { return ; } METHOD_2 ( VAR_1 , VAR_2 ) ; }",public void METHOD_1 ( ) { TYPE_1 VAR_1 ; },"['Update LocalVariable', 'Move TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4137
"private void METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) . delete ( VAR_2 , null , null ) ; TYPE_1 . METHOD_3 ( STRING_1 , ( VAR_1 + STRING_2 ) ) ; }","private void METHOD_1 ( ) { METHOD_2 ( ) . delete ( VAR_2 , null , null ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",4138
public static void main ( java.lang.String [ ] args ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_1 < java.lang.String > ( ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",4139
public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Date date = new java.util.Date ( ) ; VAR_1 . METHOD_2 ( date ) ; VAR_1 . METHOD_3 ( date ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; return METHOD_4 ( ) ; },public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; return METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4141
public void METHOD_1 ( ) { TYPE_1 VAR_1 = this . buf ; if ( VAR_1 == null ) return ; TYPE_2 . METHOD_1 ( VAR_1 ) ; buf = null ; },public void METHOD_1 ( ) { TYPE_2 . METHOD_1 ( buf ) ; buf = null ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4144
"public void METHOD_1 ( ) { float x = VAR_1 . METHOD_2 ( ) ; float y = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( x , y ) ; METHOD_6 ( x , y ) ; }","public void METHOD_1 ( ) { METHOD_5 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ; METHOD_6 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; }","['Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4145
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { java.lang.Integer VAR_2 = VAR_3 . get ( VAR_1 ) ; return new TYPE_1 ( VAR_1 , VAR_2 ) ; }",public int METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { return VAR_3 . get ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall']",4147
public static int METHOD_1 ( java.lang.String p ) { int n = java.lang.Integer.parseInt ( p ) ; if ( n >= INT_1 ) { return INT_1 ; } else { return n ; } },public static int METHOD_1 ( java.lang.String p ) { return java.lang.Integer.parseInt ( p ) ; },"['Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",4148
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 param = METHOD_2 ( VAR_2 , VAR_3 class ) ; if ( ( VAR_4 ) == null ) VAR_5 . METHOD_3 ( VAR_6 ) ; else VAR_5 . METHOD_3 ( VAR_6 , METHOD_4 ( VAR_4 ) ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_5 . METHOD_3 ( VAR_1 ) ; },"['Move Invocation', 'Insert VariableRead', 'Delete TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",4149
public void METHOD_1 ( java.lang.String p ) { TYPE_1 VAR_1 = VAR_2 . get ( p ) ; if ( VAR_1 != null ) { METHOD_1 ( VAR_1 ) ; } },protected abstract void METHOD_1 ( int id ) ;,"['Update Parameter', 'Update Wra', 'Insert Wra', 'Update TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4150
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 . METHOD_3 ( args ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_2 . METHOD_3 ( args ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4151
"public void add ( java.lang.String VAR_1 , TYPE_1 value ) { if ( value == null ) { value = VAR_2 ; } VAR_3 . put ( VAR_1 , value ) ; }","public void add ( java.lang.String VAR_1 , TYPE_1 value ) { if ( value == null ) { value = VAR_2 ; } int a = 0 ; }","['Insert LocalVariable', 'Insert TypeReference', 'Insert Literal', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4152
public boolean METHOD_1 ( boolean VAR_1 ) { boolean VAR_2 = VAR_3 ; this . VAR_3 = VAR_1 ; return VAR_2 ; },public boolean METHOD_1 ( boolean VAR_1 ) { boolean VAR_2 = VAR_1 ; this . VAR_3 = VAR_1 ; return VAR_2 ; },"['Insert VariableRead', 'Delete FieldRead']",4155
public byte METHOD_1 ( TYPE_1 VAR_1 ) { byte VAR_2 = this . METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; return VAR_2 ; },public byte METHOD_1 ( TYPE_1 VAR_1 ) { return this . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead']",4159
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_3 VAR_1 = new TYPE_3 ( ) ; VAR_2 . setValue ( VAR_3 . getValue ( ) ) ; VAR_4 . setValue ( VAR_5 . getValue ( ) ) ; return VAR_1 ; },public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",4163
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . toString ( ) ) ; if ( TYPE_2 . METHOD_3 ( VAR_2 ) ) { return STRING_1 ; } else { return STRING_2 + VAR_2 ; } },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return STRING_2 + ( TYPE_2 . METHOD_2 ( VAR_3 . toString ( ) ) ) ; },"['Insert Return', 'Insert BinaryOperator', 'Move FieldRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",4165
"TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( TYPE_2 key , TYPE_3 value ) { TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 = new TYPE_1 < > ( key , value ) ; VAR_2 . add ( VAR_1 ) ; return VAR_1 ; }","void METHOD_1 ( TYPE_2 key , TYPE_3 value ) { VAR_2 . add ( new TYPE_1 < > ( key , value ) ) ; }","['Update TypeReference', 'Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",4166
public void METHOD_1 ( java.lang.Void result ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( new TYPE_3 ( STRING_2 ) . METHOD_4 ( ) ) ; METHOD_5 ( ) ; },public void METHOD_1 ( java.lang.Void result ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",4167
"private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_2 = - 1 ; TYPE_1 VAR_3 = METHOD_3 ( VAR_4 , VAR_5 ) ; TYPE_2 . METHOD_4 ( VAR_1 , VAR_3 ) ; VAR_6 . METHOD_5 ( ) ; }",private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_2 = - 1 ; VAR_6 . METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4168
public void METHOD_1 ( ) { VAR_1 = 0 ; TYPE_1 VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; if ( ( VAR_2 instanceof TYPE_2 ) || ( VAR_2 instanceof TYPE_3 ) ) { METHOD_4 ( ) ; } },public void METHOD_1 ( ) { VAR_1 = 0 ; if ( ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) instanceof TYPE_2 ) { METHOD_4 ( ) ; } },"['Update BinaryOperator', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator']",4169
"public void METHOD_1 ( ) { int VAR_1 = ( METHOD_2 ( ) ) + 1 ; if ( VAR_1 <= ( VAR_2 . METHOD_3 ( ) . length ( ) ) ) { METHOD_4 ( VAR_1 , true ) ; } }","public void METHOD_1 ( ) { METHOD_4 ( ( ( METHOD_2 ( ) ) + 1 ) , true ) ; }","['Move Invocation', 'Move BinaryOperator', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4170
public void METHOD_1 ( java.util.Collection < TYPE_1 < TYPE_2 > > VAR_1 ) throws java.lang.Exception { if ( ! ( VAR_2 . isEmpty ( ) ) ) { int VAR_3 = METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_3 ) ; } },public void METHOD_1 ( java.util.List < TYPE_1 < TYPE_2 > > VAR_1 ) throws java.lang.Exception { set ( VAR_1 ) ; METHOD_3 ( VAR_2 . get ( ( ( VAR_2 . size ( ) ) - 1 ) ) . id ) ; },"['Update Invocation', 'Move Invocation', 'Insert Invocation', 'Update TypeReference', 'Insert FieldRead', 'Insert Invocation', 'Move TypeAccess', 'Insert BinaryOperator', 'Insert Invocation', 'Insert Literal', 'Insert TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4172
"public java.lang.Boolean METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; return ( TYPE_1 . METHOD_2 ( this , INT_1 , VAR_1 , VAR_3 ) ) != null ; }","public java.lang.Boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( this , 0 , new android.content.Intent ( this , VAR_2 class ) , VAR_3 ) ) != null ; }","['Insert Literal', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead']",4174
public static java.lang.String METHOD_1 ( android.content.Context context ) { java.lang.String VAR_1 = context . METHOD_2 ( null ) . METHOD_3 ( ) ; return VAR_1 ; },public static java.io.File METHOD_1 ( android.content.Context context ) { return context . METHOD_2 ( null ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4178
"protected void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { java.util.Calendar VAR_2 = java.util.Calendar.getInstance ( ) ; VAR_3 . add ( VAR_4 , ( - 1 ) ) ; if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) throw new TYPE_2 ( ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( java.util.Calendar.getInstance ( ) ) ) throw new TYPE_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete UnaryOperator', 'Delete Invocation', 'Delete VariableRead']",4179
public void METHOD_1 ( ) { switch ( VAR_1 ) { case VAR_2 : TYPE_1 VAR_3 = METHOD_2 ( VAR_4 ) ; VAR_5 . show ( ) ; break ; default : super . METHOD_1 ( ) ; break ; } },public void METHOD_1 ( ) { switch ( VAR_1 ) { case VAR_2 : break ; default : super . METHOD_1 ( ) ; break ; } },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",4180
public java.lang.String [ ] METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) . toLowerCase ( ) ; if ( VAR_2 == null ) return new java.lang.String [ 0 ] ; return VAR_3 . split ( STRING_1 ) ; },public java.lang.String [ ] METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) return new java.lang.String [ 0 ] ; return VAR_3 . split ( STRING_1 ) ; },"['Move Invocation', 'Delete Invocation']",4181
public java.util.ArrayList < TYPE_1 > METHOD_1 ( java.lang.String str ) { TYPE_2 VAR_1 = METHOD_2 ( str ) ; return VAR_2 . get ( VAR_1 ) ; },public java.util.ArrayList METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; },"['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4182
public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 info = VAR_1 . METHOD_2 ( ) ; if ( null != info ) { info . METHOD_3 ( ( VAR_1 . METHOD_4 ( ) ? VAR_2 : VAR_3 ) ) ; } },public static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ( VAR_1 . METHOD_4 ( ) ? VAR_2 : VAR_3 ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4183
"public void handle ( TYPE_1 VAR_1 , java.lang.Object data ) { TYPE_2 VAR_2 = ( ( TYPE_3 ) ( data ) ) . METHOD_1 ( ) ; METHOD_2 ( VAR_2 ) ; }","public void handle ( TYPE_1 VAR_1 , java.lang.Object data ) { METHOD_2 ( data ) ; }","['Update VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4184
public static TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = new TYPE_2 ( ) . METHOD_2 ( VAR_2 class . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ) ; TYPE_1 VAR_3 = TYPE_1 . METHOD_5 ( VAR_1 ) ; return VAR_3 ; },public static TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = new TYPE_2 ( ) . METHOD_2 ( VAR_2 class . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ) ; return TYPE_1 . METHOD_5 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4185
"public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; main = ( ( TYPE_2 ) ( getActivity ( ) ) ) ; main . METHOD_2 ( ) ; }","public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; TYPE_2 main = ( ( TYPE_2 ) ( getActivity ( ) ) ) ; main . METHOD_2 ( ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",4186
public java.lang.String METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; return STRING_2 ; },public java.lang.String METHOD_1 ( ) throws java.lang.Exception { return STRING_2 ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4188
"public void update ( long VAR_1 ) { VAR_2 = TYPE_1 . METHOD_1 ( ) ; if ( ( VAR_2 ) < VAR_1 ) return ; else { METHOD_2 ( VAR_3 , VAR_1 , VAR_2 ) ; } }","public void update ( long VAR_1 ) { long VAR_2 = TYPE_1 . METHOD_1 ( ) ; if ( VAR_2 < VAR_1 ) return ; else { METHOD_2 ( VAR_3 , VAR_1 , VAR_2 ) ; } }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead', 'Delete TypeAccess']",4189
private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; VAR_1 . METHOD_6 ( ) ; },private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4190
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) ; this . METHOD_3 ( VAR_2 . toString ( ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return this . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",4191
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_3 . getString ( ""name"" ) ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . getString ( ""name"" ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",4196
"public static double METHOD_1 ( double VAR_1 , double VAR_2 , int VAR_3 ) { double sum = VAR_1 ; for ( int i = 0 ; i < VAR_3 ; i ++ ) { sum *= 1 + VAR_2 ; } return sum ; }","public static double METHOD_1 ( double VAR_1 , double VAR_2 , int VAR_3 ) { double sum = 1.0 ; for ( int i = 0 ; i < VAR_3 ; i ++ ) { sum *= 1 + VAR_2 ; } return VAR_1 * sum ; }","['Insert Literal', 'Insert BinaryOperator', 'Move VariableRead', 'Move VariableRead']",4199
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( new TYPE_2 ( VAR_1 ) ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation']",4200
public TYPE_1 METHOD_1 ( TYPE_2 < ? > ... VAR_1 ) { for ( TYPE_3 VAR_2 : VAR_1 ) METHOD_1 ( VAR_2 ) ; return this ; },public TYPE_1 METHOD_1 ( TYPE_2 < ? > ... VAR_1 ) { for ( TYPE_3 value : VAR_1 ) METHOD_1 ( value ) ; return this ; },"['Update LocalVariable', 'Update VariableRead']",4201
"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ! VAR_2 ) { TYPE_2 VAR_3 = main . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( INT_1 ) ; TYPE_3 VAR_4 = main . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { } }","['Move VariableRead', 'Delete UnaryOperator', 'Delete TypeReference', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4202
"public void METHOD_1 ( ) { TYPE_1 t = new TYPE_1 ( VAR_1 , new TYPE_2 ( INT_1 , true ) ) ; VAR_2 . assertNotNull ( STRING_1 , t ) ; }","public void METHOD_1 ( ) { TYPE_1 t = new TYPE_1 ( ) ; VAR_2 . assertNotNull ( STRING_1 , t ) ; }","['Delete FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete ConstructorCall']",4204
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_4 ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; java.lang.System.out.println ( VAR_2 . METHOD_2 ( ) ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",4205
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; for ( int i = ( VAR_3 . length ( ) ) - 1 ; i >= 0 ; i -- ) { VAR_2 += VAR_1 . METHOD_2 ( i ) ; } return VAR_2 ; },private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; for ( int i = VAR_3 . length ( ) ; i >= 0 ; i -- ) { VAR_2 += VAR_1 . METHOD_2 ( i ) ; } return VAR_2 ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",4206
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , this ) ; int VAR_2 = VAR_1 . METHOD_3 ( ) ; if ( VAR_2 > 0 ) { VAR_3 = VAR_2 ; VAR_1 . METHOD_4 ( ) . height = VAR_3 ; } }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , this ) ; VAR_3 = VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) . height = VAR_3 ; }","['Insert Assignment', 'Move Assignment', 'Move FieldWrite', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Assignment', 'Delete Block', 'Delete If']",4207
"public void execute ( ) throws TYPE_1 , TYPE_2 { TYPE_3 VAR_1 = new TYPE_3 ( VAR_2 , VAR_3 ) ; METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; }","public void execute ( ) throws TYPE_1 , TYPE_2 { METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }","['Move Invocation', 'Move Invocation', 'Update Invocation', 'Update Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4209
"protected void METHOD_1 ( java.lang.String result ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , STRING_1 , VAR_1 ) . show ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( result ) ; VAR_3 . setText ( VAR_4 . toString ( 1 ) ) ; }","protected void METHOD_1 ( java.lang.String result ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , STRING_1 , VAR_1 ) . show ( ) ; VAR_3 . setText ( result ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",4210
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 = VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_4 = VAR_1 . METHOD_3 ( VAR_3 ) ; METHOD_1 ( VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 , VAR_2 , false , false , false ) ; METHOD_1 ( VAR_4 ) ; }","['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Move VariableRead', 'Move VariableRead', 'Insert Literal', 'Insert Literal', 'Insert Literal', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4213
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( VAR_2 . METHOD_2 ( ) ) ) ; return METHOD_3 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( ) { return METHOD_3 ( new TYPE_2 ( VAR_2 . METHOD_2 ( ) ) ) ; },"['Insert ConstructorCall', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead']",4215
public void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { VAR_2 . METHOD_2 ( true ) ; } else { VAR_2 . METHOD_3 ( true ) ; } TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_4 . execute ( ) ; },public void METHOD_1 ( ) { },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",4216
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; TYPE_4 . METHOD_3 ( this , view ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; TYPE_4 . METHOD_3 ( this , view ) ; return view ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead', 'Delete FieldRead']",4217
public double METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) instanceof java.lang.Float ) { float f = ( ( float ) ( VAR_2 ) ) ; return f ; } return ( ( double ) ( VAR_2 ) ) ; },public double METHOD_1 ( int VAR_1 ) { return ( ( double ) ( VAR_2 ) ) ; },"['Delete FieldRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",4219
java.util.Set < TYPE_1 > METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = VAR_2 . get ( VAR_3 ) ; return VAR_1 ; },java.util.Set < TYPE_1 > METHOD_1 ( ) { return VAR_2 . get ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4221
public void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = STRING_1 + VAR_2 ; VAR_4 . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_3 = STRING_1 + VAR_1 ; VAR_4 . METHOD_3 ( VAR_3 ) ; },"['Update LocalVariable', 'Move BinaryOperator', 'Move VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable']",4222
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . getText ( ) . toString ( ) , VAR_3 . getText ( ) . toString ( ) ) ; }",private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable']",4224
public long METHOD_1 ( java.lang.String key ) { java.lang.Object value = get ( key ) ; java.lang.Long VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( VAR_1 == null ) { return 0L ; } return VAR_1 . METHOD_3 ( ) ; },public long METHOD_1 ( java.lang.String key ) { java.lang.Object value = get ( key ) ; if ( value == null ) { return 0L ; } return TYPE_1 . METHOD_2 ( value ) . METHOD_3 ( ) ; },"['Update VariableRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4225
public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 type = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( this ) ) ) ; VAR_1 . METHOD_4 ( type ) ; return type ; },public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( this ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete VariableRead']",4226
public TYPE_1 METHOD_1 ( ) { this . VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_1 VAR_2 = this . VAR_3 . METHOD_3 ( ) ; this . VAR_4 . add ( VAR_2 ) ; return this . VAR_3 . METHOD_4 ( ) ; },public TYPE_1 METHOD_1 ( ) { this . VAR_1 = TYPE_2 . METHOD_2 ( ) ; return this . VAR_3 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation']",4227
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = METHOD_3 ( ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_4 ( ) ; } },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4228
"protected static TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getString ( VAR_3 , null ) ; if ( VAR_1 == null ) { return null ; } return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_4 class ) ; }","protected static TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . getString ( VAR_3 , null ) , VAR_4 class ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4229
"void METHOD_1 ( android.view.View VAR_1 ) { java.lang.Integer VAR_2 = java.lang.Integer.parseInt ( VAR_3 . getText ( ) . toString ( ) ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_4 class ) ; intent . METHOD_2 ( STRING_1 , 1 ) ; METHOD_3 ( intent ) ; }","void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_4 class ) ; intent . METHOD_2 ( STRING_1 , 1 ) ; METHOD_3 ( intent ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable']",4230
"public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { VAR_1 . METHOD_2 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( intent ) ; this . METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { VAR_1 . METHOD_2 ( ) ; this . METHOD_4 ( ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4232
private static java.lang.String METHOD_1 ( ) throws TYPE_1 { VAR_1 = VAR_2 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_4 . getString ( STRING_1 ) ; METHOD_3 ( ) ; return VAR_3 ; },private static java.lang.String METHOD_1 ( ) throws TYPE_1 { VAR_1 = VAR_2 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; return VAR_4 . getString ( STRING_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead']",4234
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( TYPE_3 . METHOD_1 ( VAR_1 . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; return VAR_2 ; },"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( TYPE_3 . METHOD_1 ( VAR_1 . METHOD_3 ( ) ) , VAR_1 . METHOD_5 ( ) ) ; return VAR_2 ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4236
public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( this ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_4 ( STRING_1 ) ; METHOD_5 ( VAR_2 ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( this ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4237
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( new TYPE_2 ( INT_1 , INT_2 ) ) ; }","public static void main ( java.lang.String [ ] args ) { new TYPE_1 ( ) . METHOD_1 ( new TYPE_2 ( INT_1 , INT_2 ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4238
"public java.lang.String METHOD_1 ( java.lang.String path ) { java.lang.String VAR_1 = METHOD_2 ( path , true ) ; return context . METHOD_1 ( VAR_1 ) ; }",public java.lang.String METHOD_1 ( java.lang.String path ) { return context . METHOD_1 ( path ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4243
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) ; METHOD_4 ( intent ) ; METHOD_5 ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_4 ( new android.content.Intent ( this , VAR_2 class ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) ) ; METHOD_5 ( ) ; }","['Insert Invocation', 'Insert Invocation', 'Insert Invocation', 'Move TypeAccess', 'Move ConstructorCall', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4244
"protected void METHOD_1 ( ) { TYPE_1 p = METHOD_2 ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( this , VAR_2 class ) ; p . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; TYPE_3 . METHOD_4 ( VAR_5 ) ; super . METHOD_1 ( ) ; }",protected void METHOD_1 ( ) { TYPE_3 . METHOD_4 ( VAR_5 ) ; super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",4245
private boolean METHOD_1 ( int VAR_1 ) { boolean result = ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ; if ( result ) { VAR_2 . METHOD_2 ( null ) ; } return result ; },private boolean METHOD_1 ( int VAR_1 ) { return ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",4246
"public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_3 ( ) ; android.view.View VAR_3 = getView ( ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_4 ( ) ; } }","public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_3 ( ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4247
"public static int METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { java.lang.Object VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; if ( VAR_3 == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( VAR_3 ) ) ; }","public static int METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { return ( ( java.lang.Integer ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) ; }","['Move Invocation', 'Move TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4248
"public synchronized void METHOD_1 ( int VAR_1 , TYPE_1 target ) throws TYPE_2 { int VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_2 , target ) ; METHOD_3 ( ) ; }","public synchronized void METHOD_1 ( int index , TYPE_1 target ) throws TYPE_2 { VAR_4 . METHOD_1 ( index , target ) ; METHOD_3 ( ) ; }","['Update Parameter', 'Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4251
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; android.content.Intent VAR_1 = new android.content.Intent ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; this . METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; this . METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4252
public void METHOD_1 ( TYPE_1 item ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; item . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_3 . setValue ( item ) ; },public void METHOD_1 ( TYPE_1 item ) { VAR_2 . METHOD_2 ( ) . setValue ( item ) ; },"['Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4255
public boolean METHOD_1 ( ) { final boolean VAR_1 = VAR_2 ; VAR_2 = false ; return VAR_1 ; },public boolean METHOD_1 ( ) { final boolean out = VAR_2 ; VAR_2 = false ; return out ; },"['Update LocalVariable', 'Update VariableRead']",4256
protected java.lang.String [ ] METHOD_1 ( java.lang.String ... params ) { android.content.Context context = getContext ( ) ; if ( context == null ) { return null ; } return TYPE_1 . METHOD_2 ( context ) ; },protected java.lang.String [ ] METHOD_1 ( java.lang.String ... params ) { return TYPE_1 . METHOD_2 ( getContext ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4259
public TYPE_1 METHOD_1 ( TYPE_2 message ) { TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( message ) ; return VAR_3 . status ( VAR_4 ) . METHOD_2 ( VAR_1 ) . build ( ) ; },public TYPE_2 METHOD_1 ( TYPE_2 message ) { return VAR_2 . METHOD_1 ( message ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",4261
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , ( ( VAR_4 ) | ( VAR_5 ) ) ) ; VAR_6 . setText ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_6 . open ( ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",4262
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 item = VAR_2 . get ( ) . METHOD_2 ( VAR_3 . id ) ; if ( item != null ) { item . METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . get ( ) . METHOD_2 ( VAR_3 . id ) . METHOD_3 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4263
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( this . VAR_2 . METHOD_2 ( VAR_3 . getName ( ) ) ) { TYPE_2 VAR_4 = this . VAR_5 . remove ( VAR_3 . getName ( ) ) ; return VAR_4 != null ; } return false ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( this . VAR_2 . METHOD_2 ( VAR_1 ) ) { this . VAR_5 . remove ( VAR_1 ) ; return true ; } return false ; },"['Insert VariableRead', 'Move Invocation', 'Insert VariableRead', 'Insert Literal', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator']",4264
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = STRING_1 + STRING_2 ; VAR_1 . METHOD_2 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4267
public static TYPE_1 METHOD_1 ( ) { TYPE_1 context = new TYPE_2 ( ) ; TYPE_3 . METHOD_2 ( context ) ; TYPE_4 . METHOD_3 ( context ) ; TYPE_4 . METHOD_4 ( context ) ; TYPE_4 . METHOD_5 ( context ) ; return context ; },public static void METHOD_1 ( ) { TYPE_4 . METHOD_3 ( ) ; TYPE_4 . METHOD_4 ( ) ; TYPE_4 . METHOD_5 ( ) ; },"['Move Invocation', 'Move Invocation', 'Update TypeReference', 'Update Invocation', 'Update Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",4269
"public java.lang.String getString ( java.lang.String key , java.lang.String VAR_1 ) { return METHOD_1 ( ) . getString ( key , VAR_1 ) ; }","public java.lang.String getString ( java.lang.String key , java.lang.String VAR_1 ) { java.lang.String value = METHOD_1 ( ) . getString ( key , VAR_1 ) ; return value ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",4271
public double METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( ( ( ( METHOD_3 ( ) ) * ( METHOD_3 ( ) ) ) + ( ( METHOD_4 ( ) ) * ( METHOD_4 ( ) ) ) ) ) ; },public double METHOD_1 ( ) { double a = METHOD_3 ( ) ; double b = METHOD_4 ( ) ; return TYPE_1 . METHOD_2 ( ( ( a * a ) + ( b * b ) ) ) ; },"['Insert LocalVariable', 'Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert TypeReference', 'Move Invocation', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert VariableRead', 'Insert VariableRead', 'Insert VariableRead', 'Insert VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation', 'Delete BinaryOperator']",4273
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; int VAR_3 = ( VAR_2 . size ( ) ) - 1 ; TYPE_2 . METHOD_2 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_3 , 1 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; TYPE_2 . METHOD_2 ( ( ( VAR_2 . size ( ) ) - 1 ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",4274
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; VAR_3 . METHOD_2 ( VAR_2 . METHOD_1 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_1 ( ) ) ; },"['Update VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable']",4275
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList ( ) ; VAR_1 . METHOD_1 ( STRING_1 , STRING_2 , VAR_2 ) ; VAR_1 . METHOD_2 ( ) ; }",public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4277
public int METHOD_1 ( ) { int VAR_1 = ( value . METHOD_2 ( INT_1 ) ) + 1 ; return VAR_1 ; },public int METHOD_1 ( ) { int VAR_1 = value . METHOD_2 ( INT_1 ) ; return VAR_1 ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",4278
public TYPE_1 METHOD_1 ( ) { java.util.Random VAR_1 = new java.util.Random ( ) ; if ( ( VAR_2 ) == ( VAR_3 ) ) { VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; } return VAR_2 ; },public TYPE_1 METHOD_1 ( ) { return VAR_2 ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldWrite', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Assignment', 'Delete Block', 'Delete If']",4279
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4280
public TYPE_1 METHOD_1 ( char VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { return VAR_4 ; } return VAR_2 ; },public TYPE_1 METHOD_1 ( char VAR_1 ) { return VAR_3 . get ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4284
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ; TYPE_3 VAR_2 = METHOD_5 ( ) ; }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ; METHOD_5 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable']",4285
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_3 < TYPE_2 > response ) { TYPE_2 VAR_2 = response . METHOD_2 ( ) ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_3 < TYPE_2 > response ) { }","['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4286
"public void METHOD_1 ( ) { java.lang.String msg = TYPE_1 . METHOD_2 ( STRING_1 , INT_1 ) ; VAR_1 . i ( STRING_2 , msg ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , INT_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4287
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( this . VAR_3 , this . VAR_4 , this . VAR_5 , this . METHOD_2 ( ) , VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_3 ( this . VAR_3 , this . VAR_4 , this . VAR_5 , this . METHOD_2 ( ) , VAR_1 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4288
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( intent ) ; return false ; }",public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return false ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4290
public boolean METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { boolean result = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( result ) VAR_1 . METHOD_3 ( ) ; return result ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { return VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",4291
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { super . METHOD_2 ( VAR_3 ) ; android.view.View VAR_4 = VAR_1 . METHOD_3 ( VAR_5 , VAR_2 , false ) ; return METHOD_4 ( VAR_4 ) ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { super . METHOD_2 ( VAR_3 ) ; android.view.View view = VAR_1 . METHOD_3 ( VAR_5 , VAR_2 , false ) ; return view ; }","['Update LocalVariable', 'Insert VariableRead', 'Delete VariableRead', 'Delete Invocation']",4292
public final java.util.List < TYPE_1 > get ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = VAR_4 . get ( VAR_2 ) ; return VAR_3 ; },public final java.util.List < TYPE_1 > get ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; return VAR_4 . get ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4293
public boolean equals ( final java.lang.Object VAR_1 ) { TYPE_1 length = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( ( VAR_2 . value ) == ( value ) ) && ( ( VAR_3 ) == ( VAR_4 ) ) ; },public boolean equals ( final TYPE_1 length ) { return ( ( VAR_2 . value ) == ( value ) ) && ( ( VAR_3 ) == ( VAR_4 ) ) ; },"['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable']",4295
public void METHOD_1 ( ) { int VAR_1 = ( this . VAR_2 ) & INT_1 ; VAR_1 ++ ; VAR_1 &= INT_1 ; this . VAR_2 = ( ( short ) ( INT_2 | VAR_1 ) ) ; },public void METHOD_1 ( ) { short VAR_1 = this . VAR_2 ; VAR_1 &= INT_1 ; VAR_1 ++ ; this . VAR_2 = ( ( short ) ( INT_2 | VAR_1 ) ) ; },"['Move UnaryOperator', 'Update TypeReference', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",4298
private static java.lang.String METHOD_1 ( java.lang.String name ) { java.lang.String VAR_1 = VAR_2 . trim ( name ) ; if ( VAR_3 . contains ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { VAR_1 = ( STRING_1 + VAR_1 ) + STRING_1 ; } return VAR_1 ; },private static java.lang.String METHOD_1 ( java.lang.String name ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . trim ( name ) ) ; if ( VAR_3 . contains ( VAR_1 ) ) { VAR_1 = ( STRING_1 + VAR_1 ) + STRING_1 ; } return VAR_1 ; },"['Insert Invocation', 'Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",4299
public void METHOD_1 ( ) { TYPE_1 result = VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",4300
public static int METHOD_1 ( ) { int VAR_1 = INT_1 ; return VAR_1 ; },public static int METHOD_1 ( ) { return INT_1 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4301
"public static boolean METHOD_1 ( TYPE_1 first , TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = first . METHOD_2 ( ) ; TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( ) ; return first . METHOD_2 ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }","public static boolean METHOD_1 ( TYPE_1 first , TYPE_1 VAR_1 ) { return first . METHOD_2 ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4302
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 ; if ( ( VAR_2 ) != null ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_4 . setState ( VAR_5 ) ; return VAR_3 ; } return null ; },public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 ; if ( ( VAR_2 ) != null ) return new TYPE_2 ( VAR_2 ) ; return null ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",4304
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( 0 ) ; TYPE_2 . METHOD_5 ( STRING_1 ) ; context . METHOD_6 ( ) ; },public void METHOD_1 ( ) { METHOD_3 ( true ) ; TYPE_2 . METHOD_5 ( STRING_1 ) ; context . METHOD_6 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",4305
"TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_1 VAR_2 = METHOD_3 ( VAR_1 , new TYPE_1 ( VAR_3 ) ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; return VAR_2 ; }",TYPE_1 METHOD_1 ( ) { return METHOD_3 ( new TYPE_1 ( VAR_3 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead']",4308
"public TYPE_1 METHOD_1 ( ) { TYPE_1 value = new TYPE_1 ( getName ( ) , getValue ( ) , METHOD_2 ( ) ) ; value . METHOD_3 ( METHOD_4 ( ) ) ; return value ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( getName ( ) , getValue ( ) , METHOD_2 ( ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",4309
"private void METHOD_1 ( android.content.Context context ) { METHOD_2 ( context , VAR_1 , this ) ; TYPE_1 VAR_2 = METHOD_3 ( ) ; }","private void METHOD_1 ( android.content.Context context ) { METHOD_2 ( context , VAR_1 , this ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable']",4311
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; java.lang.String message = STRING_1 + VAR_1 ; return message ; },public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; java.lang.String message = ( STRING_1 + VAR_1 ) + ( value ) ; return message ; },"['Insert BinaryOperator', 'Move BinaryOperator', 'Insert FieldRead']",4316
"public void METHOD_1 ( android.view.View VAR_1 ) { int VAR_2 = INT_1 ; int VAR_3 = INT_1 ; int VAR_4 = INT_2 ; int VAR_5 = INT_2 ; start ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { int VAR_2 = INT_1 ; int VAR_3 = INT_1 ; int VAR_4 = INT_2 ; start ( VAR_2 , VAR_3 , VAR_4 ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",4317
"void METHOD_1 ( int x ) { if ( METHOD_2 ( x ) ) { TYPE_1 VAR_1 = split ( VAR_2 , x ) ; TYPE_1 VAR_3 = split ( VAR_4 , ( x + 1 ) ) ; VAR_2 = METHOD_3 ( VAR_5 , VAR_6 ) ; } }",void METHOD_1 ( int x ) { },"['Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Assignment', 'Delete Block', 'Delete If']",4319
public java.lang.String METHOD_1 ( java.lang.String key ) { TYPE_1 VAR_1 = this . METHOD_2 ( key ) ; if ( VAR_1 == null ) return null ; return VAR_2 . toString ( ) ; },public java.lang.String METHOD_1 ( java.lang.String key ) { return this . METHOD_2 ( key ) . toString ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",4320
"public void METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , java.lang.String id ) { TYPE_1 VAR_2 = new TYPE_1 ( name , VAR_1 , id ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_3 . put ( id , VAR_2 ) ; }","public void METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , java.lang.String id ) { VAR_3 . put ( id , new TYPE_1 ( name , VAR_1 , id ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",4322
public void METHOD_1 ( ) { java.util.Collection < java.lang.Object > c = null ; TYPE_1 . METHOD_2 ( c ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; },"['Move Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4323
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) . METHOD_2 ( STRING_1 , VAR_3 ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( intent ) ; }","['Move ConstructorCall', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",4326
public java.lang.String METHOD_1 ( ) { int VAR_1 = ( this . METHOD_2 ( ) ) + ( this . METHOD_3 ( ) ) ; int VAR_2 = this . METHOD_4 ( ) ; return TYPE_1 . METHOD_5 ( ( VAR_2 - VAR_1 ) ) ; },public double METHOD_1 ( ) { return 1 ; },"['Update TypeReference', 'Insert Literal', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete ThisAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",4327
public TYPE_1 METHOD_1 ( ) { int index = VAR_1 . METHOD_2 ( ) ; if ( index < 0 ) return null ; return VAR_2 . get ( index ) . element ; },public TYPE_1 METHOD_1 ( ) { return VAR_2 . get ( VAR_1 . METHOD_2 ( ) ) . element ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4328
public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 ) ; return ; } TYPE_1 VAR_3 = VAR_4 ; if ( VAR_3 != null ) { TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ; } },public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 ) ; return ; } if ( ( VAR_4 ) != null ) { TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_4 ) ; } },"['Move FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4329
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , TYPE_1 > VAR_2 = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ; VAR_3 . put ( STRING_1 , VAR_1 ) ; this . VAR_4 . add ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_4 . put ( STRING_1 , VAR_1 ) ; }","['Move FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4331
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) . toLowerCase ( ) ; java.lang.String VAR_4 = VAR_2 . METHOD_2 ( ) . toLowerCase ( ) ; return VAR_5 . compareTo ( VAR_4 ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_1 . METHOD_2 ( ) . toLowerCase ( ) . compareTo ( VAR_2 . METHOD_2 ( ) . toLowerCase ( ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead']",4334
"public void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( this ) ; if ( VAR_2 instanceof TYPE_2 ) { VAR_2 . METHOD_3 ( VAR_1 ) ; } VAR_3 . METHOD_4 ( STRING_1 , null ) ; }","public void METHOD_1 ( boolean VAR_1 ) { VAR_3 . METHOD_4 ( STRING_1 , null ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4335
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( this ) ; METHOD_3 ( ) . METHOD_4 ( ) . replace ( VAR_2 , VAR_1 ) . commit ( ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this ) ; METHOD_3 ( ) . METHOD_4 ( ) . replace ( VAR_2 , VAR_1 ) . commit ( ) ; }","['Update ConstructorCall', 'Move ThisAccess', 'Delete VariableRead', 'Delete Invocation']",4338
"public void METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_2 , ( STRING_1 + VAR_1 ) ) ; METHOD_4 ( ) ; }",public void METHOD_1 ( ) { METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",4339
public void METHOD_1 ( ) { TYPE_1 info = VAR_1 . METHOD_2 ( ) ; if ( info != null ) { VAR_2 . METHOD_3 ( VAR_3 . toString ( ) ) ; } },public void METHOD_1 ( ) { VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) . toString ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",4340
"public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 , STRING_1 ) ; TYPE_3 VAR_4 = new TYPE_4 ( ) ; VAR_5 . show ( VAR_1 . METHOD_3 ( ) , VAR_6 ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_3 VAR_4 = new TYPE_4 ( null ) ; VAR_5 . show ( VAR_1 . METHOD_3 ( ) , VAR_6 ) ; }","['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable']",4342
private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; },private void METHOD_1 ( ) { METHOD_3 ( ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",4344
"public void METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 VAR_2 ) { java.lang.String VAR_3 = METHOD_2 ( VAR_1 ) ; VAR_4 . remove ( VAR_3 ) ; VAR_5 . remove ( VAR_6 . getId ( ) ) ; }","public void METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 VAR_2 ) { VAR_4 . remove ( VAR_1 ) ; VAR_5 . remove ( VAR_6 . getId ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4347
public static void main ( java.lang.String [ ] args ) { TYPE_1 n = new TYPE_1 ( STRING_1 ) ; TYPE_2 . METHOD_1 ( n ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4349
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.ClassNotFoundException , TYPE_1 { java.lang.String VAR_3 = STRING_1 ; TYPE_2 VAR_4 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_4 VAR_5 = VAR_4 . METHOD_4 ( ) ; VAR_6 . execute ( VAR_3 ) ; }","public void METHOD_1 ( ) throws java.lang.ClassNotFoundException , TYPE_1 { TYPE_2 VAR_4 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4350
"public void METHOD_1 ( boolean VAR_1 ) { boolean VAR_2 = this . VAR_3 ; this . VAR_3 = VAR_1 ; METHOD_2 ( STRING_1 , VAR_2 , VAR_1 ) ; }","public void METHOD_1 ( boolean VAR_1 ) { this . VAR_3 = VAR_1 ; METHOD_2 ( STRING_1 , ( ! VAR_1 ) , VAR_1 ) ; }","['Insert UnaryOperator', 'Insert VariableRead', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",4351
public static void main ( java.lang.String [ ] args ) { boolean end = true ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.util.Scanner VAR_2 = new java.util.Scanner ( VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable']",4352
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_2 = 0 ; TYPE_1 VAR_3 = METHOD_2 ( VAR_4 , VAR_1 , true , VAR_5 , VAR_6 ) . VAR_7 ; java.lang.System.out.println ( VAR_2 ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_2 = 0 ; return METHOD_2 ( VAR_4 , VAR_1 , true , VAR_5 , VAR_6 ) . VAR_7 ; }","['Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",4353
"public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( METHOD_3 ( VAR_2 class , STRING_1 , long . class ) , METHOD_4 ( ) ) ; VAR_3 . execute ( ) ; METHOD_5 ( STRING_2 ) ; }","public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( METHOD_3 ( STRING_1 , long . class ) , METHOD_4 ( ) ) ; VAR_3 . execute ( ) ; METHOD_5 ( STRING_2 ) ; }",['Delete TypeAccess'],4357
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_1 ( ) ; if ( ( VAR_3 ) != null ) { VAR_1 . METHOD_2 ( VAR_3 . METHOD_1 ( ) ) ; } return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_2 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",4358
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( ) . METHOD_2 ( VAR_1 , STRING_1 ) ; return METHOD_3 ( VAR_2 ) ; }",public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { return METHOD_3 ( null ) ; },"['Update TypeReference', 'Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4360
public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( VAR_4 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_4 ) ; },"['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4361
public static void main ( java.lang.String [ ] args ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_2 . METHOD_1 ( STRING_1 ) ; java.lang.System.out.println ( VAR_1 ) ; },public static void main ( java.lang.String [ ] args ) throws TYPE_1 { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",4362
public int METHOD_1 ( ) { int i = METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . METHOD_4 ( ) ; return i ; },public int METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . METHOD_4 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4365
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { VAR_3 . view = TYPE_3 . METHOD_2 ( VAR_4 . getContext ( ) ) . METHOD_3 ( VAR_5 , VAR_1 , false ) ; return new TYPE_1 ( VAR_3 . view ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View view = TYPE_3 . METHOD_2 ( VAR_4 . getContext ( ) ) . METHOD_3 ( VAR_5 , VAR_1 , false ) ; return new TYPE_1 ( view ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",4368
public TYPE_1 METHOD_1 ( java.lang.String file ) { java.io.File f = METHOD_2 ( file ) ; TYPE_1 b = VAR_1 . METHOD_3 ( f ) ; if ( b != null ) return b ; return null ; },public TYPE_1 METHOD_1 ( java.io.File file ) { TYPE_1 b = VAR_1 . METHOD_3 ( file ) ; if ( b != null ) return b ; else { return null ; } },"['Update LocalVariable', 'Move TypeReference', 'Move TypeReference', 'Update Invocation', 'Insert Block', 'Move TypeAccess', 'Move Return', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4369
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) && ( ! ( VAR_2 ) ) ) { TYPE_1 VAR_3 = new TYPE_1 ( this ) ; VAR_3 . METHOD_2 ( VAR_4 , VAR_5 ) ; } }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) && ( ! ( VAR_2 ) ) ) { TYPE_1 VAR_3 = new TYPE_1 ( this , VAR_4 , VAR_5 ) ; VAR_3 . METHOD_2 ( ) ; } }","['Update ConstructorCall', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess']",4370
public TYPE_1 METHOD_1 ( ) { float VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == 0 ) { return METHOD_3 ( ( 1.0F / FLOAT_1 ) ) ; } else { return METHOD_3 ( ( 1.0F / ( METHOD_2 ( ) ) ) ) ; } },public TYPE_1 METHOD_1 ( ) { return METHOD_3 ( ( 1.0F / ( METHOD_2 ( ) ) ) ) ; },"['Move Return', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",4374
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( null ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",4376
public int METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( VAR_3 . size ( ) ) ; TYPE_1 value = VAR_3 . get ( VAR_1 ) ; return VAR_4 ; },public int METHOD_1 ( ) { return 0 ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead']",4377
public java.lang.Double METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { java.lang.Double VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ! ( java.lang.Double . METHOD_4 ( VAR_2 ) ) ) { return VAR_2 ; } } return 0.0 ; },public java.lang.Double METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } return 0.0 ; },"['Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",4378
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 expr = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; VAR_3 . trim ( ) ; return expr ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",4380
"public void METHOD_1 ( android.view.View VAR_1 ) { android.widget.LinearLayout VAR_2 = ( ( android.widget.LinearLayout ) ( METHOD_2 ( VAR_3 ) ) ) ; METHOD_3 ( VAR_2 , true ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",4382
public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList ( VAR_3 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; return VAR_2 ; },public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; },"['Update Invocation', 'Move TypeAccess', 'Update VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4383
public TYPE_1 METHOD_1 ( ) { java.lang.String key = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . iterator ( ) . METHOD_4 ( ) ; return VAR_1 . METHOD_2 ( ) . get ( key ) ; },public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . get ( 0 ) ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4384
protected TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_2 VAR_1 = METHOD_2 ( name ) ; if ( VAR_1 != null ) { return VAR_1 . METHOD_3 ( ) ; } return null ; },protected abstract TYPE_1 METHOD_1 ( java.lang.String name ) ;,"['Insert Wra', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",4385
private boolean METHOD_1 ( ) { TYPE_1 state = state ( ) ; return ( state == ( VAR_1 ) ) || ( state == ( VAR_2 ) ) ; },private boolean METHOD_1 ( ) { return ( ( state ( ) ) == ( VAR_1 ) ) || ( ( state ( ) ) == ( VAR_2 ) ) ; },"['Insert BinaryOperator', 'Insert BinaryOperator', 'Insert Invocation', 'Move FieldRead', 'Move Invocation', 'Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator']",4386
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . getType ( ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_5 ) ; int VAR_6 = VAR_4 . METHOD_2 ( VAR_2 ) ; return METHOD_3 ( VAR_1 , VAR_6 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . getType ( ) ; int VAR_6 = this . VAR_4 . METHOD_2 ( VAR_2 ) ; return METHOD_3 ( VAR_1 , VAR_6 ) ; }","['Insert FieldRead', 'Insert ThisAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4387
public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( length ( ) ) ; },"public TYPE_1 METHOD_1 ( ) { float length = length ( ) ; return new TYPE_1 ( ( ( x ) / length ) , ( ( y ) / length ) ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert ConstructorCall', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert FieldRead', 'Insert VariableRead', 'Insert FieldRead', 'Insert VariableRead', 'Delete Invocation']",4388
"public TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 . METHOD_3 ( ) ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; return new TYPE_3 ( VAR_1 . METHOD_3 ( ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4389
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_3 . remove ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_2 . METHOD_2 ( ) . METHOD_4 ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4390
public static void main ( java.lang.String [ ] args ) { TYPE_1 obj = new TYPE_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",4391
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( ) . METHOD_4 ( VAR_4 ) ) ) ; VAR_3 . METHOD_5 ( INT_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4392
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_1 { java.lang.String VAR_4 = VAR_5 . METHOD_2 ( VAR_6 . get ( VAR_1 ) . METHOD_3 ( VAR_2 , VAR_3 ) ) ; return VAR_4 ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_1 { return VAR_5 . METHOD_2 ( VAR_6 . get ( VAR_1 ) . METHOD_3 ( VAR_2 , VAR_3 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4394
"private synchronized void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.Object VAR_3 = VAR_4 . remove ( VAR_1 ) ; if ( VAR_3 != null ) { VAR_5 . METHOD_2 ( VAR_3 ) ; } VAR_6 . put ( VAR_7 , false ) ; }","private synchronized void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { VAR_5 . METHOD_2 ( VAR_4 . remove ( VAR_1 ) ) ; VAR_6 . put ( VAR_7 , false ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4395
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( INT_1 ) ; java.lang.String VAR_3 = VAR_2 . METHOD_2 ( VAR_1 ) ; this . VAR_1 = VAR_3 ; },public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4396
"private java.lang.String METHOD_1 ( java.lang.String filePath , java.lang.String VAR_1 ) { VAR_2 . info ( STRING_1 , filePath , VAR_1 ) ; java.lang.String VAR_3 = TYPE_1 . METHOD_2 ( filePath , VAR_1 ) ; return TYPE_1 . METHOD_3 ( VAR_3 , STRING_2 ) ; }","private static java.lang.String METHOD_1 ( java.lang.String filePath , java.lang.String VAR_1 ) { VAR_2 . info ( STRING_1 , filePath , VAR_1 ) ; return TYPE_1 . METHOD_2 ( filePath , VAR_1 ) ; }","['Insert Wra', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4398
private TYPE_1 < java.lang.Integer > METHOD_1 ( ) { TYPE_1 < java.lang.Integer > VAR_1 = new TYPE_1 < java.lang.Integer > ( ) ; VAR_2 . add ( 0 ) ; return VAR_1 ; },private TYPE_1 < java.lang.Integer > METHOD_1 ( ) { return new TYPE_1 < java.lang.Integer > ( 0 ) ; },"['Insert ConstructorCall', 'Move Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",4400
"public void METHOD_1 ( TYPE_1 name , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_2 , STRING_1 ) ; TYPE_4 VAR_3 = ( ( TYPE_4 ) ( VAR_1 ) ) ; VAR_4 = VAR_3 . METHOD_3 ( ) ; TYPE_5 . METHOD_4 ( VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 name , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_2 , STRING_1 ) ; VAR_4 = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_3 ( ) ; TYPE_5 . METHOD_4 ( VAR_4 ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4401
"private void METHOD_1 ( java.lang.String method , java.lang.String format , java.lang.Object ... args ) { java.lang.String message = TYPE_1 . METHOD_2 ( format , args ) ; this . VAR_1 . METHOD_3 ( VAR_2 , STRING_1 , method , message ) ; }","private void METHOD_1 ( java.lang.String method , java.lang.String format , java.lang.Object ... args ) { java.lang.String message = java.lang.String.format ( format , args ) ; this . VAR_1 . METHOD_3 ( VAR_2 , STRING_1 , method , message ) ; }","['Update Invocation', 'Update TypeAccess']",4403
"public static void main ( java.lang.String [ ] args ) throws java.lang.ClassNotFoundException , TYPE_1 , TYPE_2 , TYPE_3 { TYPE_4 VAR_1 = new TYPE_5 ( ) ; VAR_1 . METHOD_1 ( ) ; }","public static void main ( java.lang.String [ ] args ) throws java.lang.ClassNotFoundException , TYPE_1 , TYPE_2 , TYPE_3 { }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4407
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 TYPE_3 = TYPE_4 . METHOD_3 ( ) ; TYPE_5 VAR_1 = new TYPE_5 ( ) ; TYPE_3 . METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( STRING_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4408
private int METHOD_1 ( ) throws TYPE_1 { int b = METHOD_1 ( 1 ) ; METHOD_2 ( b ) ; return b ; },private void METHOD_1 ( ) throws TYPE_1 { METHOD_1 ( 1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Return']",4409
"public java.awt.Color METHOD_1 ( java.awt.Color VAR_1 ) { java.awt.Color VAR_2 = new java.awt.Color ( 0 , 0 , 0 ) ; return VAR_2 ; }","public java.awt.Color METHOD_1 ( java.awt.Color VAR_1 ) { java.awt.Color VAR_2 = new java.awt.Color ( ) ; return new java.awt.Color ( 0 , 0 , 0 ) ; }","['Insert ConstructorCall', 'Move ConstructorCall', 'Delete VariableRead']",4410
public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = TYPE_1 . METHOD_1 ( ) . size ( ) ; int VAR_2 = new TYPE_2 ( ) . METHOD_2 ( ) . size ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_2 ) ; },public void METHOD_1 ( ) throws java.lang.Exception { TYPE_3 . METHOD_3 ( TYPE_1 . METHOD_1 ( ) ) . METHOD_4 ( new TYPE_2 ( ) . METHOD_2 ( ) . size ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4411
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_4 , VAR_2 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4413
"public java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_5 . delete ( VAR_1 ) ; VAR_6 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) . remove ( VAR_3 ) ; return STRING_1 + VAR_2 ; }","public java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_5 . delete ( VAR_1 ) ; return STRING_1 + VAR_2 ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4414
"public java.util.List < java.lang.String > METHOD_1 ( java.lang.String fileName , int VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; java.io.File file = new java.io.File ( fileName ) ; return null ; }","public java.util.List < java.lang.String > METHOD_1 ( java.lang.String fileName , int VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; java.io.File file = new java.io.File ( fileName ) ; int count ; }","['Insert LocalVariable', 'Insert TypeReference', 'Delete Literal', 'Delete Return']",4415
private void METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( getIntent ( ) . METHOD_2 ( VAR_2 ) ) ) ; METHOD_3 ( VAR_3 . getName ( ) ) ; },private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getIntent ( ) . METHOD_2 ( VAR_2 ) ) ) ; METHOD_3 ( VAR_3 . getName ( ) ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Delete FieldWrite', 'Delete Assignment']",4416
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.System.out.println ( VAR_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; return VAR_3 . toString ( VAR_2 . METHOD_2 ( ) ) ; },public java.lang.String METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; return VAR_3 . toString ( VAR_2 . METHOD_2 ( ) ) ; },"['Update TypeReference', 'Update ConstructorCall', 'Insert TypeReference', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",4418
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < java.lang.Object > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; return VAR_3 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_3 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4421
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; TYPE_2 VAR_2 = new TYPE_2 ( new TYPE_3 ( ) ) ; TYPE_4 VAR_3 = new TYPE_4 ( new TYPE_5 ( ) ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete ConstructorCall', 'Delete LocalVariable']",4422
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 . METHOD_3 ( time ) ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4423
public boolean METHOD_1 ( java.lang.String query ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( ) ) ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( ( ( query + STRING_1 ) + ( VAR_3 ) ) ) ; return true ; },public boolean METHOD_1 ( java.lang.String query ) { return false ; },"['Update Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",4424
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; android.content.Intent VAR_2 = new android.content.Intent ( METHOD_3 ( ) , VAR_3 class ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_2 . METHOD_5 ( STRING_1 , true ) ; METHOD_6 ( VAR_2 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; java.lang.System.exit ( 0 ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Insert Literal', 'Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4426
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_2 ( STRING_1 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_3 ) . METHOD_1 ( ) ; VAR_4 . METHOD_4 ( new TYPE_3 ( VAR_1 . METHOD_5 ( ) ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_2 ( STRING_1 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_3 ) . METHOD_1 ( ) ; VAR_4 . METHOD_4 ( new TYPE_3 ( VAR_1 . METHOD_5 ( ) ) ) ; return VAR_1 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess', 'Delete FieldRead']",4428
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.Object value = VAR_2 . get ( VAR_1 ) ; return value != null ? VAR_3 . toString ( ) : VAR_4 ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String value = VAR_2 . get ( VAR_1 ) . toString ( ) ; return value != null ? value : VAR_4 ; },"['Update TypeReference', 'Insert Invocation', 'Move Invocation', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4429
public static synchronized void METHOD_1 ( ) { boolean VAR_1 = VAR_2 ; VAR_3 = null ; VAR_2 = false ; if ( VAR_1 ) { TYPE_1 . METHOD_2 ( ) ; } },public static void METHOD_1 ( ) { if ( VAR_2 ) { TYPE_1 . METHOD_2 ( ) ; } VAR_3 = null ; VAR_2 = false ; },"['Move If', 'Move FieldRead', 'Delete Wra', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable']",4430
public void METHOD_1 ( ) { int x = INT_1 + INT_1 ; String = STRING_1 ; int y = x - INT_1 ; int VAR_1 = x + ( y * x ) ; },public void METHOD_1 ( ) { int x = INT_1 + INT_1 ; String = STRING_1 ; int y = x - INT_1 ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete LocalVariable']",4431
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_2 ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; intent . METHOD_3 ( STRING_1 , VAR_4 ) ; METHOD_4 ( intent ) ; METHOD_5 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",4432
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4433
public TYPE_1 < ? extends TYPE_2 > METHOD_1 ( ) { TYPE_3 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { return java.util.Arrays.asList ( VAR_1 ) ; } return TYPE_4 . METHOD_3 ( ) ; },public TYPE_1 < ? extends TYPE_2 > METHOD_1 ( ) { return java.util.Arrays.asList ( METHOD_2 ( ) ) ; },"['Move Return', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return']",4434
"public int METHOD_1 ( ) { int VAR_1 = VAR_2 . size ( ) ; TYPE_1 . METHOD_2 ( VAR_3 , ( STRING_1 + VAR_1 ) ) ; return VAR_1 ; }",public int METHOD_1 ( ) { return VAR_2 . size ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead']",4435
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_4 class ) ; }","public void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4436
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_2 ) ; return TYPE_1 . METHOD_3 ( ) . build ( ) ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; return TYPE_1 . METHOD_3 ( ) . build ( ) ; },"['Move Invocation', 'Update VariableRead', 'Delete TypeReference', 'Delete LocalVariable']",4438
"public void METHOD_1 ( java.lang.String id , java.lang.String file , boolean VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( id , file ) ; VAR_2 . METHOD_3 ( file ) ; METHOD_4 ( VAR_1 ) ; }","public void METHOD_1 ( java.lang.String id , java.lang.String file ) { }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4439
float METHOD_1 ( ) { float VAR_1 = ( this . VAR_2 ) * ( this . VAR_3 ) ; float VAR_4 = ( INT_1 * ( this . VAR_5 ) ) * ( this . VAR_3 ) ; VAR_1 = VAR_1 + VAR_4 ; return VAR_1 ; },float METHOD_1 ( ) { float VAR_1 = 0 ; float VAR_4 = ( INT_1 * ( this . VAR_5 ) ) * ( this . VAR_3 ) ; VAR_1 = ( this . VAR_2 ) + VAR_4 ; return VAR_1 ; },"['Insert Literal', 'Update BinaryOperator', 'Move BinaryOperator', 'Move VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator']",4440
public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; int a = 1 + 1 ; int b = a ; int n = b - INT_1 ; java.lang.System.out.println ( ( ( n - a ) + 1 ) ) ; java.lang.String str = STRING_2 ; },public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; int a = 1 + 1 ; int b = a ; int n = b - INT_1 ; java.lang.System.out.println ( ( n - a ) ) ; },"['Move BinaryOperator', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",4441
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( this ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( ) { TYPE_2 VAR_2 = new TYPE_2 ( this ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4444
public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_1 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( STRING_2 ) ; this . view . METHOD_3 ( ) . update ( ) ; },public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Invocation']",4445
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; new TYPE_2 ( ) . execute ( VAR_2 ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) new TYPE_2 ( ) . execute ( VAR_2 ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4446
"public void append ( int VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( getContext ( ) , VAR_1 ) ; VAR_4 . add ( new TYPE_3 ( STRING_1 , VAR_3 , VAR_2 ) ) ; VAR_5 += STRING_1 ; }","public void append ( TYPE_1 VAR_2 ) { VAR_4 . add ( new TYPE_3 ( STRING_1 , VAR_2 ) ) ; VAR_5 += STRING_1 ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Invocation', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4447
"public java.util.ArrayList < TYPE_1 > METHOD_1 ( int VAR_1 ) throws TYPE_2 , TYPE_3 { TYPE_4 result = this . VAR_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_1 ) ; java.util.ArrayList < TYPE_1 > VAR_3 = this . METHOD_4 ( result ) ; return VAR_3 ; }","public java.util.ArrayList < TYPE_1 > METHOD_1 ( int VAR_1 ) throws TYPE_2 , TYPE_3 { TYPE_4 result = this . VAR_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; java.util.ArrayList < TYPE_1 > VAR_3 = this . METHOD_4 ( result ) ; return VAR_3 ; }",['Delete VariableRead'],4448
"public final void METHOD_1 ( long VAR_1 , double VAR_2 ) { final TYPE_1 < java.lang.Boolean , java.lang.Integer > VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 . METHOD_3 ( ) ) { METHOD_4 ( ) ; } }","public final void METHOD_1 ( long VAR_1 , double VAR_2 ) { final int index = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( index > 0 ) { METHOD_4 ( ) ; } }","['Update LocalVariable', 'Update TypeReference', 'Insert BinaryOperator', 'Insert VariableRead', 'Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation']",4449
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_6 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_6 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4450
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 tmp = this . VAR_2 . get ( this . VAR_3 . METHOD_2 ( VAR_1 ) ) ; if ( VAR_4 ) tmp . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . get ( this . VAR_3 . METHOD_2 ( VAR_1 ) ) . METHOD_3 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4451
public java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > temp = new java.util.ArrayList < java.lang.String > ( this . VAR_1 ) ; return temp ; },public java.util.List < java.lang.String > METHOD_1 ( ) { return VAR_1 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4453
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { VAR_1 . METHOD_3 ( VAR_2 ) ; TYPE_1 VAR_3 = METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( VAR_2 , VAR_3 ) ; } }",public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { VAR_1 . METHOD_3 ( VAR_2 ) ; } },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4455
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { TYPE_2 t = VAR_2 . METHOD_3 ( ) ; VAR_4 . add ( t ) ; t . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { VAR_4 . add ( VAR_2 . METHOD_3 ( ) ) ; } },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4456
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; java.lang.String response = VAR_3 . METHOD_4 ( ) ; return response ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( ) ; return VAR_3 . METHOD_4 ( ) ; },"['Move Invocation', 'Insert Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4457
public void start ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_4 . start ( VAR_1 ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; },public void start ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_4 . start ( VAR_1 ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",4459
"public static java.lang.String METHOD_1 ( java.util.Date date ) { int VAR_1 = ( date . METHOD_2 ( ) ) + 1 ; int VAR_2 = date . METHOD_3 ( ) ; return TYPE_1 . METHOD_4 ( VAR_2 , VAR_1 ) ; }","public static java.lang.String METHOD_1 ( java.util.Date date ) { int VAR_1 = date . METHOD_2 ( ) ; int VAR_2 = date . METHOD_3 ( ) ; return TYPE_1 . METHOD_4 ( VAR_2 , VAR_1 ) ; }","['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",4460
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = METHOD_3 ( ) ; if ( VAR_3 != null ) VAR_3 . METHOD_4 ( true ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",4461
public boolean remove ( java.lang.Object VAR_1 ) { boolean result = VAR_2 . remove ( VAR_1 ) ; METHOD_1 ( ) ; return result ; },public boolean remove ( java.lang.Object VAR_1 ) { METHOD_1 ( ) ; return VAR_2 . remove ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4463
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; },public void METHOD_1 ( ) { new TYPE_1 ( new TYPE_2 ( ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable']",4464
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_2 . info ( STRING_1 ) ; TYPE_1 < TYPE_2 > response = METHOD_2 ( VAR_3 . update ( VAR_1 ) ) ; return response ; },public java.lang.Long METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_2 . info ( STRING_1 ) ; return VAR_3 . update ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4465
"public double METHOD_1 ( double VAR_1 , double VAR_2 ) { double VAR_3 = ( VAR_4 ) - ( VAR_2 * ( VAR_4 ) ) ; return VAR_1 * ( VAR_3 / ( VAR_3 + ( VAR_5 ) ) ) ; }","public double METHOD_1 ( double VAR_1 , double VAR_2 ) { double VAR_3 = VAR_2 * ( VAR_4 ) ; return VAR_1 * ( ( VAR_3 + ( VAR_5 ) ) / VAR_3 ) ; }","['Move BinaryOperator', 'Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",4467
"public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { int index = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( index ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { VAR_3 . METHOD_3 ( id ) ; }","['Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",4472
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; return VAR_2 ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4473
private boolean METHOD_1 ( java.lang.String pattern ) { java.lang.String VAR_1 = METHOD_2 ( ) ; if ( null == VAR_1 ) { return false ; } return pattern . METHOD_3 ( METHOD_2 ( ) ) ; },private boolean METHOD_1 ( java.lang.String pattern ) { return pattern . METHOD_3 ( METHOD_2 ( ) ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",4476
public TYPE_1 METHOD_1 ( int id ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == id ) { TYPE_1 temp = VAR_1 ; VAR_1 = null ; return temp ; } } return null ; },public void METHOD_1 ( TYPE_1 p ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 == p ) { VAR_1 = null ; } } },"['Update TypeReference', 'Update Parameter', 'Move TypeReference', 'Move VariableRead', 'Update VariableRead', 'Delete TypeReference', 'Delete Invocation', 'Delete VariableRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return', 'Delete Literal', 'Delete Return']",4477
"private static double f ( double VAR_1 , long VAR_2 , double VAR_3 ) { double VAR_4 = java.lang.Math.pow ( ( 1.0 + VAR_3 ) , ( VAR_2 / FLOAT_1 ) ) ; return VAR_1 / VAR_4 ; }","private static double f ( double VAR_1 , long VAR_2 , double VAR_3 ) { return VAR_1 * ( java.lang.Math.pow ( ( 1.0 + VAR_3 ) , ( VAR_2 / FLOAT_1 ) ) ) ; }","['Update BinaryOperator', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4478
private void METHOD_1 ( ) { long VAR_1 = VAR_2 ; if ( ( VAR_2 ) != ( VAR_3 ) ) METHOD_2 ( ( ( VAR_2 ) + 1 ) ) ; },private void METHOD_1 ( ) { if ( ( VAR_2 ) != ( VAR_3 ) ) ( VAR_2 ) ++ ; },"['Insert UnaryOperator', 'Insert FieldWrite', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation']",4479
public synchronized void METHOD_1 ( TYPE_1 id ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . remove ( this ) ; this . id = id ; VAR_3 . add ( this ) ; VAR_2 . METHOD_3 ( true ) ; },"public synchronized void METHOD_1 ( TYPE_1 id ) { VAR_2 . METHOD_2 ( ) . remove ( this . id ) ; VAR_2 . METHOD_2 ( ) . put ( id , this ) ; this . id = id ; VAR_2 . METHOD_3 ( true ) ; }","['Move Invocation', 'Update Invocation', 'Update Invocation', 'Move Invocation', 'Insert FieldRead', 'Insert Invocation', 'Insert VariableRead', 'Move ThisAccess', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",4480
private void METHOD_1 ( ) { TYPE_1 context = getContext ( ) ; if ( context == null ) return ; TYPE_2 . METHOD_2 ( context ) ; METHOD_3 ( VAR_1 ) ; },private void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( getContext ( ) ) ; METHOD_3 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4481
"private static java.lang.String METHOD_1 ( java.lang.Class < ? > VAR_1 ) { java.lang.String VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_2 ; } TYPE_1 . METHOD_2 ( VAR_4 , ( STRING_1 + VAR_1 ) ) ; return null ; }",private static java.lang.String METHOD_1 ( java.lang.Class < ? > VAR_1 ) { return VAR_3 . get ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Literal']",4485
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = this . VAR_2 . METHOD_2 ( ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return this . VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4488
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( this , VAR_1 . METHOD_3 ( ) , VAR_2 ) . show ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_4 ( intent ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( this , VAR_1 . METHOD_3 ( ) , VAR_2 ) . show ( ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4489
"private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 position ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( position ) . METHOD_3 ( ) ; return ( VAR_2 instanceof TYPE_4 ) || ( VAR_2 instanceof TYPE_5 ) ; }","private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 position ) { return ( VAR_1 . METHOD_2 ( position ) . METHOD_3 ( ) ) instanceof TYPE_4 ; }","['Update BinaryOperator', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator']",4490
public static void main ( java.lang.String [ ] args ) { long startTime = TYPE_1 . METHOD_1 ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",4494
public static void main ( java.lang.String [ ] args ) { if ( true ) { int x = INT_1 ; } int VAR_1 = INT_1 ; java.lang.System.out.println ( STRING_1 ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",4495
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( STRING_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 class ) ; }",public static void main ( java.lang.String [ ] args ) { TYPE_2 . METHOD_2 ( VAR_2 class ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",4496
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( VAR_1 , TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) ; intent . METHOD_5 ( VAR_3 , VAR_4 ) ; METHOD_6 ( intent ) ; }","public void METHOD_1 ( android.view.View view ) { METHOD_6 ( new android.content.Intent ( VAR_1 , TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4501
"public boolean METHOD_1 ( ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , STRING_1 , VAR_1 ) . show ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_4 ( intent ) ; this . METHOD_5 ( ) ; return false ; }","public boolean METHOD_1 ( ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , STRING_1 , VAR_1 ) . show ( ) ; METHOD_5 ( ) ; return false ; }","['Update Invocation', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation']",4502
"public static java.lang.String format ( java.util.Date date , java.lang.String format ) { if ( date == null ) { return STRING_1 ; } TYPE_1 VAR_1 = new TYPE_1 ( format , VAR_2 ) ; return VAR_3 . format ( date ) ; }","public static java.lang.String format ( java.util.Date date , java.lang.String format ) { if ( date == null ) { return STRING_1 ; } TYPE_1 VAR_1 = new TYPE_1 ( format ) ; return VAR_3 . format ( new java.util.Date ( ) ) ; }","['Update ConstructorCall', 'Insert ConstructorCall', 'Delete FieldRead', 'Delete VariableRead']",4503
public boolean METHOD_1 ( java.lang.String VAR_1 ) { boolean VAR_2 = super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( true ) ; return VAR_2 ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return super . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",4504
public TYPE_1 METHOD_1 ( ) { TYPE_2 node = this . VAR_1 . METHOD_1 ( ) ; return METHOD_2 ( node ) ; },public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( this . VAR_1 . METHOD_1 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4505
"public java.lang.Integer METHOD_1 ( java.lang.Integer id ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) ; java.lang.Integer VAR_2 = VAR_3 . delete ( VAR_4 , STRING_1 , new java.lang.String [ ] { java.lang.Integer.toString ( id ) } ) ; VAR_1 . METHOD_3 ( ) ; return VAR_2 ; }","public java.lang.Integer METHOD_1 ( java.lang.Integer id ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) ; return VAR_3 . delete ( VAR_4 , STRING_1 , new java.lang.String [ ] { java.lang.Integer.toString ( id ) } ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4506
"public static void main ( java.lang.String [ ] args ) throws java.io.IOException , TYPE_1 , TYPE_2 { TYPE_3 VAR_1 = TYPE_3 . METHOD_1 ( ) ; TYPE_4 TYPE_5 = TYPE_4 . METHOD_1 ( ) ; TYPE_5 . METHOD_2 ( VAR_1 ) ; TYPE_5 . METHOD_3 ( ) ; }","public static void main ( java.lang.String [ ] args ) throws java.io.IOException , TYPE_1 , TYPE_2 { TYPE_3 VAR_1 = TYPE_3 . METHOD_1 ( ) ; TYPE_4 . METHOD_1 ( VAR_1 ) ; }","['Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4507
"public static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 args = new TYPE_2 ( ) ; args . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_3 ( args ) ; return VAR_1 ; }",public static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; return VAR_1 ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4508
"public void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; METHOD_2 ( intent ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4514
"public float min ( ) { float min = VAR_1 ; for ( TYPE_1 VAR_2 : VAR_3 ) { min = VAR_4 . min ( VAR_5 . y , min ) ; } return min ; }",public float min ( ) { float min = 0 ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( ( java.lang.Math.abs ( VAR_5 . y ) ) > min ) { min = VAR_5 . y ; } } return min ; },"['Insert Literal', 'Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Invocation', 'Move VariableRead', 'Move Assignment', 'Insert TypeAccess', 'Insert FieldRead', 'Move FieldRead', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",4515
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 response ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) . replaceAll ( STRING_2 , STRING_3 ) ; TYPE_1 VAR_3 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 response ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 VAR_3 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; return VAR_3 ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",4516
"private void METHOD_1 ( TYPE_1 VAR_1 ) { java.awt.Color VAR_2 = TYPE_2 . METHOD_2 ( this , null , VAR_3 ) ; if ( VAR_2 != null ) { VAR_3 = VAR_2 ; METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 = TYPE_2 . METHOD_2 ( this , null , VAR_3 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; }","['Insert Assignment', 'Move Invocation', 'Move Invocation', 'Move Invocation', 'Move FieldWrite', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Assignment', 'Delete Block', 'Delete If']",4517
public void METHOD_1 ( double VAR_1 ) { double VAR_2 = VAR_3 ; super . METHOD_1 ( VAR_1 ) ; if ( VAR_2 != VAR_1 ) METHOD_2 ( ) ; },public void METHOD_1 ( double VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4518
"public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 ; android.content.Intent i = new android.content.Intent ( context , VAR_2 class ) ; i . METHOD_2 ( STRING_1 , item . METHOD_3 ( ) ) ; context . METHOD_4 ( i ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent i = new android.content.Intent ( context , VAR_2 class ) ; i . METHOD_2 ( STRING_1 , item . METHOD_3 ( ) ) ; context . METHOD_4 ( i ) ; }","['Delete TypeReference', 'Delete LocalVariable']",4520
"public static void METHOD_1 ( ) throws TYPE_1 { java.util.Properties VAR_1 = new java.util.Properties ( ) ; VAR_1 . METHOD_2 ( STRING_1 , ""true"" ) ; VAR_2 = new TYPE_2 ( ) . METHOD_3 ( STRING_2 , VAR_1 ) ; }","public static void METHOD_1 ( ) throws TYPE_1 { VAR_2 = new TYPE_2 ( ) . METHOD_3 ( STRING_2 , null ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",4521
"public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { return new TYPE_3 ( VAR_1 ) ; } return new TYPE_4 ( TYPE_5 . METHOD_3 ( ) , this ) ; }","public TYPE_1 METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return new TYPE_3 ( METHOD_2 ( ) ) ; } return new TYPE_4 ( TYPE_5 . METHOD_3 ( ) , this ) ; }","['Move Invocation', 'Insert Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4522
"public void setValue ( int VAR_1 , long VAR_2 , TYPE_1 value ) { TYPE_2 VAR_3 = METHOD_1 ( VAR_1 , value ) ; if ( VAR_3 != null ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , value ) ; } }","public void setValue ( int VAR_1 , long VAR_2 , TYPE_1 value ) { METHOD_2 ( VAR_1 , VAR_2 , METHOD_1 ( VAR_1 , value ) , value ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4523
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_3 ( VAR_3 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; },public static TYPE_1 METHOD_1 ( ) { return new TYPE_3 ( VAR_3 ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4525
public java.util.Collection < ? extends TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_2 . add ( new TYPE_2 ( STRING_1 ) ) ; return VAR_1 ; },public java.util.Collection < ? extends TYPE_1 > METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead']",4526
"public int METHOD_1 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 ) { int result = VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; if ( result > 0 ) { METHOD_2 ( VAR_1 ) ; } return result ; }","public int METHOD_1 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 ) { return VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",4527
private void METHOD_1 ( ) { boolean VAR_1 = ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == 1 ) && ( ! ( VAR_2 ) ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; },private void METHOD_1 ( ) { boolean VAR_1 = ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == 1 ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",4528
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = TYPE_5 . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_3 VAR_4 = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 , VAR_5 , VAR_1 ) ; METHOD_4 ( VAR_4 , VAR_2 ) ; return VAR_4 ; }","private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = TYPE_5 . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_3 VAR_4 = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 , VAR_5 ) ; METHOD_4 ( VAR_4 , VAR_2 ) ; return VAR_4 ; }",['Delete VariableRead'],4532
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , java.io.IOException { VAR_2 = 0 ; VAR_3 = this . VAR_4 ; TYPE_1 VAR_5 = this . METHOD_2 ( VAR_1 ) ; this . METHOD_3 ( VAR_5 , VAR_1 ) ; return VAR_5 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , java.io.IOException { VAR_2 = 0 ; VAR_3 = this . VAR_4 ; return this . METHOD_2 ( VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4533
"public void METHOD_1 ( java.lang.String field , TYPE_1 data ) { java.util.regex.Matcher VAR_1 = TYPE_2 . METHOD_2 ( field ) ; if ( VAR_1 . METHOD_3 ( ) ) { VAR_2 = append ( VAR_2 , ""\n"" , VAR_1 . METHOD_4 ( 1 ) ) ; } }","public void METHOD_1 ( java.lang.String field , TYPE_1 data ) { if ( TYPE_2 . METHOD_2 ( field ) . METHOD_3 ( ) ) { VAR_2 = append ( VAR_2 , ""\n"" , field ) ; } }","['Move Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",4536
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_4 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ; return VAR_3 . METHOD_7 ( VAR_2 ) ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_4 ( VAR_4 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ; return VAR_3 . METHOD_7 ( VAR_1 ) ; },"['Move VariableRead', 'Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4538
"public void METHOD_1 ( java.lang.String message ) { java.lang.String output = ( ( ( VAR_1 ) + STRING_1 ) + ( VAR_2 ) ) + message ; METHOD_1 ( new TYPE_1 ( VAR_3 . replaceAll ( STRING_2 , STRING_3 ) ) ) ; }",public void METHOD_1 ( java.lang.String message ) { METHOD_1 ( new TYPE_1 ( ( ( ( ( VAR_1 ) + STRING_1 ) + ( VAR_2 ) ) + message ) ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",4540
public void add ( TYPE_1 data ) { VAR_1 . add ( data ) ; int VAR_2 = ( METHOD_1 ( ) ) + ( VAR_3 . METHOD_2 ( ) ) ; TYPE_2 . METHOD_3 ( VAR_2 ) ; TYPE_2 . METHOD_4 ( VAR_2 ) ; },public void add ( TYPE_1 data ) { VAR_1 . add ( data ) ; METHOD_3 ( ( ( METHOD_1 ( ) ) + ( VAR_3 . METHOD_2 ( ) ) ) ) ; },"['Insert Invocation', 'Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4541
"private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) . replaceAll ( STRING_2 , STRING_3 ) ; return java.lang.String.format ( STRING_4 , VAR_2 ) ; }","private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return java.lang.String.format ( STRING_4 , TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) . replaceAll ( STRING_2 , STRING_3 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4544
"public void METHOD_1 ( java.io.File key , java.util.Collection < ? extends java.io.File > VAR_1 ) { java.util.Set < java.io.File > VAR_2 = new java.util.HashSet < > ( get ( key ) ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; set ( key , VAR_2 ) ; }","public void METHOD_1 ( java.io.File key , java.util.Collection < ? extends java.io.File > VAR_1 ) { java.util.Collection < java.io.File > VAR_2 = get ( key ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; set ( key , VAR_2 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete ConstructorCall']",4545
"public void METHOD_1 ( int VAR_1 ) { long result = VAR_2 . delete ( VAR_3 , ( ( ( VAR_4 ) + STRING_1 ) + VAR_1 ) , null ) ; TYPE_1 . METHOD_2 ( VAR_5 , java.lang.String . METHOD_3 ( result ) ) ; }","public void METHOD_1 ( int VAR_1 ) { VAR_2 . delete ( VAR_3 , ( ( ( VAR_4 ) + STRING_1 ) + VAR_1 ) , null ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",4546
"public java.lang.String METHOD_1 ( java.lang.Long id , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( id ) ; if ( VAR_2 == null ) { return STRING_1 ; } VAR_1 . METHOD_3 ( STRING_2 , VAR_2 ) ; return STRING_3 ; }","public java.lang.String METHOD_1 ( java.lang.Long id , TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( STRING_2 , VAR_3 . METHOD_2 ( id ) ) ; return STRING_3 ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4547
"public long METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; long VAR_3 = VAR_2 . METHOD_4 ( STRING_1 , 0 , VAR_1 , VAR_4 . METHOD_5 ( ) ) ; return VAR_3 ; }","public void METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( STRING_1 , 0 , VAR_1 , VAR_4 . METHOD_5 ( ) ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",4549
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; boolean VAR_3 = VAR_2 == ( VAR_4 ) ; setEnabled ( ( ! VAR_3 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; setEnabled ( ( VAR_2 != ( VAR_4 ) ) ) ; }","['Update BinaryOperator', 'Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator']",4551
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) ; VAR_2 . add ( VAR_1 ) ; VAR_2 . remove ( 1 ) ; assertEquals ( 0 , VAR_3 . METHOD_2 ( ) . size ( ) ) ; }","public void METHOD_1 ( ) { VAR_2 . remove ( 1 ) ; assertEquals ( 0 , VAR_3 . METHOD_2 ( ) . size ( ) ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4552
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . getString ( STRING_1 ) ; if ( ! ( VAR_4 . isEmpty ( VAR_2 ) ) ) { METHOD_2 ( VAR_2 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4553
"public void METHOD_1 ( ) { TYPE_1 args = new TYPE_1 ( ) ; args . METHOD_2 ( STRING_1 , getIntent ( ) . getData ( ) ) ; METHOD_3 ( VAR_1 , args ) ; }","public void METHOD_1 ( ) { METHOD_3 ( VAR_1 , null ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",4554
public java.util.Set < java.lang.String > METHOD_1 ( java.lang.String pattern ) { java.util.Set < java.lang.String > VAR_1 = VAR_2 . METHOD_1 ( pattern ) ; return VAR_1 ; },public java.util.Set < java.lang.String > METHOD_1 ( ) { return VAR_2 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4557
public java.lang.String toString ( ) { TYPE_1 VAR_1 = METHOD_1 ( ) ; if ( VAR_1 != ( this ) ) { return VAR_2 . toString ( ) ; } return ( STRING_1 + ( getName ( ) ) ) + ( VAR_3 ) ; },public java.lang.String toString ( ) { METHOD_1 ( ) ; if ( ( VAR_1 ) != ( this ) ) { return VAR_2 . toString ( ) ; } return ( STRING_1 + ( getName ( ) ) ) + ( VAR_3 ) ; },"['Move Invocation', 'Insert FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4558
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_1 < TYPE_2 > VAR_2 = new java.util.LinkedList < > ( ) ; return VAR_2 ; },public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4560
public static TYPE_1 < TYPE_2 > METHOD_1 ( ) throws java.io.IOException { TYPE_3 url = TYPE_4 . METHOD_2 ( ( ( VAR_1 ) + STRING_1 ) ) ; return new TYPE_5 ( url ) . METHOD_1 ( ) ; },public static TYPE_1 < TYPE_2 > METHOD_1 ( ) throws java.io.IOException { return new TYPE_5 ( ) . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4561
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 ) . getClass ( ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 ) . getClass ( ) ; return ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4562
"public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 = TYPE_2 . METHOD_2 ( VAR_4 , VAR_5 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 , VAR_2 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { METHOD_4 ( VAR_1 , VAR_5 . METHOD_3 ( ) , VAR_2 ) ; }","['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Move VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4564
"public void METHOD_1 ( int VAR_1 ) { float VAR_2 = ( ( ( float ) ( VAR_1 ) ) / INT_1 ) * FLOAT_1 ; for ( int VAR_3 : VAR_4 ) { VAR_5 . METHOD_2 ( VAR_3 , VAR_2 , VAR_2 ) ; } }","public void METHOD_1 ( int VAR_1 ) { float VAR_2 = ( ( float ) ( VAR_1 ) ) / INT_1 ; for ( int VAR_3 : VAR_4 ) { VAR_5 . METHOD_2 ( VAR_3 , VAR_2 , VAR_2 ) ; } }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",4565
final java.lang.String METHOD_1 ( boolean [ ] b ) { java.lang.String key = ( TYPE_1 . METHOD_2 ( b ) ) + STRING_1 ; java.lang.String VAR_1 = VAR_2 . get ( key ) ; return VAR_1 ; },final java.lang.String METHOD_1 ( boolean [ ] b ) { java.lang.String key = ( TYPE_1 . METHOD_2 ( b ) ) + STRING_1 ; return VAR_2 . get ( key ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4568
"protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_4 ( VAR_3 ) ; return new TYPE_4 ( name , VAR_4 , VAR_5 , VAR_6 , VAR_2 ) ; }","protected TYPE_1 METHOD_1 ( ) { return new TYPE_4 ( name , VAR_4 , VAR_5 , VAR_6 , null ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4569
private void METHOD_1 ( java.lang.String file ) { java.lang.String path = this . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; TYPE_1 VAR_1 = new TYPE_1 ( path ) ; VAR_1 . METHOD_1 ( file ) ; },private void METHOD_1 ( java.lang.String file ) { new TYPE_1 ( ) . METHOD_1 ( file ) ; },"['Insert ConstructorCall', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4570
"public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_2 ( intent ) ; } }","public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { METHOD_2 ( new android.content.Intent ( this , VAR_3 class ) ) ; } }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4571
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; android.content.Intent intent = getIntent ( ) ; METHOD_3 ( ) ; VAR_3 = new TYPE_2 ( this ) . METHOD_4 ( VAR_4 ) . build ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; VAR_3 = new TYPE_2 ( this ) . METHOD_4 ( VAR_4 ) . build ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable']",4573
"public TYPE_1 METHOD_1 ( java.lang.String key , TYPE_2 data ) { TYPE_2 VAR_1 = VAR_2 . put ( key , data ) ; if ( VAR_1 == null ) { VAR_3 . add ( key ) ; } return this ; }","public TYPE_1 METHOD_1 ( java.lang.String key , TYPE_2 data ) { VAR_2 . put ( key , data ) ; VAR_3 . add ( key ) ; return this ; }","['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4575
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_2 ( VAR_4 , 0 , 0 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable']",4576
"public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { java.util.List < TYPE_2 > result = TYPE_4 . METHOD_2 ( TYPE_5 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_2 class ) ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ; return result ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_5 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_2 class ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",4577
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ; if ( VAR_1 == null ) { return STRING_1 ; } return VAR_1 ; },public java.lang.String METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4578
"public void METHOD_1 ( java.lang.String name ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( name , METHOD_2 ( ( name + STRING_1 ) ) ) ; VAR_1 . METHOD_3 ( this ) ; }",public void METHOD_1 ( java.lang.String name ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( name ) ; VAR_1 . METHOD_3 ( this ) ; },"['Update ConstructorCall', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",4579
public int METHOD_1 ( java.lang.String name ) { int VAR_1 = VAR_2 . METHOD_2 ( name ) ; java.lang.Integer VAR_3 = VAR_2 . METHOD_3 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } else return VAR_3 ; },public int METHOD_1 ( java.lang.String name ) { int VAR_1 = VAR_2 . METHOD_2 ( name ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",4582
"public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object [ ] args = VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; java.lang.Object value = VAR_3 . METHOD_3 ( VAR_1 , args , VAR_4 ) ; return value ; }","public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object value = VAR_3 . METHOD_3 ( VAR_1 , VAR_2 , VAR_4 ) ; VAR_2 = null ; return value ; }","['Move Assignment', 'Move TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4583
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( VAR_3 ) ; } },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; },"['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4584
"private void METHOD_1 ( int VAR_1 ) { VAR_2 . i ( VAR_3 , STRING_1 ) ; VAR_4 = TYPE_1 . METHOD_2 ( this , VAR_1 ) ; VAR_5 . start ( ) ; }","private void METHOD_1 ( int VAR_1 ) { VAR_2 . i ( VAR_3 , STRING_1 ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( this , VAR_1 ) ; VAR_5 . start ( ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Delete FieldWrite', 'Delete Assignment']",4586
public java.lang.String METHOD_1 ( byte [ ] key ) { TYPE_1 VAR_1 = this . METHOD_2 ( key ) ; if ( VAR_1 == null ) return null ; return VAR_2 . toString ( ) ; },public java.lang.String METHOD_1 ( byte [ ] key ) { return this . METHOD_2 ( key ) . toString ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",4587
public static TYPE_1 METHOD_1 ( TYPE_2 element ) { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( element ) ; if ( VAR_1 == null ) { return null ; } return TYPE_4 . METHOD_2 ( element ) . METHOD_3 ( ) ; },public static TYPE_1 METHOD_1 ( TYPE_2 element ) { return TYPE_4 . METHOD_2 ( element ) . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",4589
"public TYPE_1 METHOD_1 ( java.lang.Object VAR_1 , TYPE_2 VAR_2 , long VAR_3 ) { TYPE_3 VAR_4 = METHOD_2 ( VAR_2 ) ; return VAR_5 . METHOD_1 ( VAR_1 , VAR_4 , VAR_3 ) ; }","public TYPE_1 METHOD_1 ( java.lang.Object VAR_1 , TYPE_2 VAR_2 , long VAR_3 ) { return VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4590
"public boolean METHOD_1 ( ) { TYPE_1 < java.lang.String , java.util.List < java.lang.String > > VAR_1 = METHOD_2 ( ) ; return ! ( VAR_2 . equals ( VAR_1 ) ) ; }",public boolean METHOD_1 ( ) { return ! ( VAR_2 . equals ( METHOD_2 ( ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4592
public boolean remove ( TYPE_1 VAR_1 ) { TYPE_2 < TYPE_1 > node = METHOD_1 ( VAR_1 ) ; if ( node == null ) { return false ; } VAR_2 . remove ( ) ; ( length ) -- ; return true ; },public boolean remove ( TYPE_1 VAR_1 ) { return false ; },"['Move Return', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldWrite', 'Delete UnaryOperator', 'Delete Literal', 'Delete Return']",4593
public void METHOD_1 ( TYPE_1 state ) { super . METHOD_1 ( state ) ; java.util.List < TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( this . VAR_2 ) ; TYPE_4 . METHOD_3 ( VAR_1 ) ; this . METHOD_4 ( VAR_3 . get ( 0 ) ) ; },public void METHOD_1 ( TYPE_1 state ) { super . METHOD_1 ( state ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Invocation']",4594
public void METHOD_1 ( TYPE_1 VAR_1 ) { int x = VAR_1 . METHOD_2 ( ) ; int y = VAR_1 . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4595
protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( ( ( TYPE_3 ) ( METHOD_2 ( ) ) ) . METHOD_3 ( ) ) ) ; java.lang.Boolean VAR_2 = VAR_1 . METHOD_4 ( ) ; return VAR_3 = new TYPE_4 ( VAR_2 ) ; },protected TYPE_1 METHOD_1 ( ) { return VAR_3 = new TYPE_4 ( ) ; },"['Update ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4596
public static void METHOD_1 ( ) { java.lang.String fileName = STRING_1 ; java.lang.System.out.println ( TYPE_1 . METHOD_2 ( fileName ) ) ; },public static void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",4597
private TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_1 index = TYPE_4 . METHOD_3 ( VAR_2 ) ; return index ; },private TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { TYPE_1 index = TYPE_4 . METHOD_3 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; return index ; },"['Update LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4598
public void handle ( TYPE_1 event ) { TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) ; if ( VAR_1 != null ) { METHOD_3 ( VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) ) ; } },public void handle ( TYPE_1 event ) { METHOD_3 ( VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4600
public void METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = VAR_3 . remove ( VAR_1 ) ; if ( ! VAR_2 ) throw new TYPE_2 ( STRING_1 ) ; else VAR_4 . add ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_3 . remove ( VAR_1 ) ) ) throw new TYPE_2 ( STRING_1 ) ; else VAR_4 . add ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4603
private boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { boolean result = this . remove ( VAR_1 ) ; if ( result ) { VAR_1 . METHOD_2 ( this ) ; METHOD_3 ( VAR_1 ) ; } return result ; },private void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { if ( this . remove ( VAR_1 ) ) { VAR_1 . METHOD_2 ( this ) ; METHOD_3 ( VAR_1 ) ; } },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",4605
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_3 . METHOD_3 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_3 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4606
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( new TYPE_3 ( ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead']",4608
public void METHOD_1 ( ) { TYPE_1 VAR_1 = getActivity ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { getActivity ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",4609
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = ( VAR_3 ) - ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 = 0.0 ; int VAR_4 = ( VAR_1 . METHOD_3 ( ) ) - 1 ; VAR_1 . METHOD_4 ( VAR_4 ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = ( VAR_3 ) - ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 = 0.0 ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4610
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 c = new TYPE_1 ( ) ; c . METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4611
"public java.lang.Void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { if ( VAR_2 . METHOD_2 ( false , true ) ) { VAR_3 . METHOD_3 ( VAR_1 ) ; } else { java.lang.Throwable VAR_4 = VAR_1 . METHOD_4 ( ) ; } return null ; }","public java.lang.Void METHOD_1 ( TYPE_1 < java.lang.Object > VAR_1 ) { if ( VAR_2 . METHOD_2 ( false , true ) ) { VAR_3 . METHOD_3 ( VAR_1 ) ; } return null ; }","['Update TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete Block']",4612
"public void METHOD_1 ( TYPE_1 error ) { java.lang.String VAR_1 = STRING_1 ; METHOD_2 ( false ) ; TYPE_2 . METHOD_3 ( METHOD_4 ( ) , STRING_2 , VAR_2 ) . show ( ) ; TYPE_3 . METHOD_5 ( STRING_3 , VAR_3 . toString ( ) ) ; }","public void METHOD_1 ( TYPE_1 error ) { METHOD_2 ( false ) ; TYPE_2 . METHOD_3 ( METHOD_4 ( ) , STRING_2 , VAR_2 ) . show ( ) ; TYPE_3 . METHOD_5 ( STRING_3 , VAR_3 . toString ( ) ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",4614
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; VAR_1 . METHOD_4 ( true ) ; }","public void METHOD_1 ( ) { new TYPE_2 ( VAR_2 , VAR_3 ) . METHOD_4 ( true ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4615
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { METHOD_2 ( ) ; java.util.ArrayList < java.lang.String > VAR_1 = new java.util.ArrayList ( this . VAR_2 ) ; this . VAR_2 . METHOD_3 ( ) ; return TYPE_2 . METHOD_4 ( VAR_1 ) ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { METHOD_2 ( ) ; java.util.Set < java.lang.String > VAR_1 = this . VAR_2 ; this . VAR_2 . METHOD_3 ( ) ; return TYPE_2 . METHOD_4 ( VAR_1 ) ; },"['Update TypeReference', 'Move FieldRead', 'Delete ConstructorCall']",4617
public java.lang.Object METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) { return VAR_1 ; } else { TYPE_1 response = new TYPE_1 ( METHOD_2 ( ) ) ; return response ; } },public java.lang.Object METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) ; } return VAR_1 ; },"['Move Return', 'Update BinaryOperator', 'Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return', 'Delete Block']",4618
"public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String output = query ( VAR_1 ) . toString ( ) ; VAR_2 . replace ( ""name"" , STRING_2 ) ; return output ; }",public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; return VAR_1 ; },"['Move VariableRead', 'Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",4621
"private int METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , int VAR_2 ) { if ( VAR_2 != ( - 1 ) ) { return VAR_2 ; } else { return METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; } }","private int METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , int VAR_2 ) { if ( VAR_2 != ( - 1 ) ) { int temp = VAR_2 ; return temp ; } else { return METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; } }","['Insert LocalVariable', 'Insert TypeReference', 'Move VariableRead', 'Insert VariableRead']",4625
public long METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) instanceof java.lang.Integer ) { int i = ( ( int ) ( VAR_2 ) ) ; return i ; } return ( ( long ) ( VAR_2 ) ) ; },public long METHOD_1 ( int VAR_1 ) { return ( ( long ) ( VAR_2 ) ) ; },"['Delete FieldRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",4626
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , INT_1 , STRING_2 , INT_2 ) ; VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4627
"public void METHOD_1 ( TYPE_1 VAR_1 , int position , android.view.View VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( position ) ; boolean VAR_5 = VAR_4 . METHOD_3 ( position ) ; VAR_6 . METHOD_4 ( VAR_3 , VAR_5 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int position , android.view.View VAR_2 ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4628
"public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { android.content.Intent intent = new android.content.Intent ( VAR_2 , VAR_3 class ) ; intent . METHOD_2 ( VAR_4 ) ; METHOD_3 ( intent ) ; METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { java.lang.System.exit ( 0 ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",4629
"public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( METHOD_3 ( VAR_2 class , STRING_1 ) , METHOD_4 ( ) ) ; VAR_3 . execute ( ) ; METHOD_5 ( STRING_2 ) ; }","public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( METHOD_3 ( STRING_1 ) , METHOD_4 ( ) ) ; VAR_3 . execute ( ) ; METHOD_5 ( STRING_2 ) ; }",['Delete TypeAccess'],4631
public static java.lang.Object METHOD_1 ( TYPE_1 type ) { java.lang.Class < ? > VAR_1 = TYPE_2 . METHOD_2 ( type ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; },public static java.lang.Object METHOD_1 ( java.lang.Class < ? > VAR_1 ) { return TYPE_3 . METHOD_3 ( VAR_1 ) ; },"['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4632
"void METHOD_1 ( int [ ] a , int i , int x ) { int [ ] VAR_1 = a ; int VAR_2 = i ; }","void METHOD_1 ( int [ ] a , int i , int x ) { int [ ] c = a ; int VAR_2 = i ; }",['Update LocalVariable'],4635
"public final < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.Class < TYPE_1 > VAR_2 ) { java.lang.Integer VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return null ; } return METHOD_1 ( VAR_3 , VAR_2 ) ; }","public final < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.Class < TYPE_1 > VAR_2 ) { return METHOD_1 ( METHOD_2 ( VAR_1 ) , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4636
public int METHOD_1 ( ) { int VAR_1 = VAR_2 . data ; if ( ( size ) != 0 ) { VAR_3 = VAR_4 ; ( size ) -- ; } return VAR_1 ; },public void METHOD_1 ( ) { if ( ( size ) != 0 ) { VAR_3 = VAR_4 ; ( size ) -- ; } },"['Update TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",4638
public void delete ( TYPE_1 VAR_1 ) { METHOD_1 ( ) . delete ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( new TYPE_3 < TYPE_1 > ( VAR_1 ) ) ; },public void delete ( TYPE_1 VAR_1 ) { METHOD_1 ( ) . delete ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( new TYPE_3 < TYPE_1 > ( VAR_1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4640
"public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( getView ( ) . METHOD_2 ( VAR_3 ) ) ) ; }","public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",4641
private int METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 n = VAR_1 . METHOD_2 ( ) ; return n . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; },private int METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4642
public java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_1 ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ; },public java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < java.lang.String > list = VAR_2 . METHOD_1 ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ; return list ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert TypeReference']",4643
public boolean METHOD_1 ( TYPE_1 t ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( t ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { if ( VAR_2 . METHOD_3 ( ) ) { return true ; } } return false ; },public boolean METHOD_1 ( TYPE_1 t ) { boolean result = false ; java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( t ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { if ( VAR_2 . METHOD_3 ( ) ) { return true ; } } return result ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Literal', 'Insert VariableRead']",4645
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . i ( STRING_1 , STRING_2 ) ; super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_3 ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_3 ) ; android.content.Intent intent = getIntent ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Insert Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",4646
public java.util.Properties METHOD_1 ( ) { java.util.Properties VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; return VAR_1 ; },public java.util.Properties METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4647
"public java.lang.String add ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_1 ( VAR_2 ) ; TYPE_3 VAR_5 = METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_5 ) ; return STRING_2 ; }",public java.lang.String add ( java.lang.Long VAR_2 ) { return STRING_2 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4649
public java.util.Set < java.lang.String > METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 != null ) { return VAR_1 . METHOD_1 ( ) ; } else { return TYPE_2 . METHOD_3 ( ) ; } },public java.util.Set < java.lang.String > METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) . METHOD_1 ( ) ; },"['Insert Return', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",4650
"protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = new TYPE_5 ( VAR_4 , VAR_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( ) ; return VAR_3 ; }","protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return new TYPE_5 ( VAR_4 , VAR_1 , VAR_2 ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4651
public static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = null ; try { TYPE_2 VAR_2 = VAR_3 ; VAR_1 = VAR_2 . METHOD_1 ( ) ; } catch ( TYPE_3 VAR_4 ) { VAR_4 . METHOD_2 ( ) ; } return VAR_1 ; },private static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = null ; try { VAR_1 = VAR_3 . METHOD_1 ( ) ; } catch ( TYPE_3 VAR_4 ) { VAR_4 . METHOD_2 ( ) ; } return VAR_1 ; },"['Update Wra', 'Insert TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",4653
public void METHOD_1 ( java.lang.String VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = new java.util.HashSet < java.lang.String > ( METHOD_2 ( ) ) ; VAR_3 . add ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = METHOD_2 ( ) ; VAR_3 . add ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; },"['Move Invocation', 'Delete ConstructorCall']",4654
"public void METHOD_1 ( android.view.View VAR_1 ) { boolean VAR_2 = METHOD_2 ( item , VAR_3 , VAR_4 ) ; VAR_5 . METHOD_3 ( VAR_2 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( item , VAR_3 , VAR_4 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4655
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) ; java.util.List < TYPE_3 > VAR_2 = new java.util.ArrayList ( VAR_3 ) ; for ( TYPE_3 VAR_4 : VAR_2 ) { VAR_4 . METHOD_3 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) ; for ( TYPE_3 VAR_4 : VAR_3 ) { VAR_4 . METHOD_3 ( VAR_1 ) ; } },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4656
"public TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String > error , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 , STRING_2 , error ) ; VAR_2 . METHOD_2 ( STRING_3 , VAR_1 ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String > error ) { return new TYPE_1 ( STRING_1 , STRING_2 , error ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4657
TYPE_1 METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ) . size ( ) ; TYPE_1 VAR_3 = VAR_2 . METHOD_3 ( ) ; return VAR_3 . METHOD_4 ( new TYPE_1 ( VAR_1 ) ) ; },TYPE_1 METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) . size ( ) ; TYPE_1 VAR_3 = METHOD_3 ( ) ; return VAR_3 . METHOD_4 ( new TYPE_1 ( VAR_1 ) ) ; },"['Insert LocalVariable', 'Insert LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move TypeReference', 'Insert Invocation', 'Insert Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",4658
public java.io.InputStream METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) return null ; return new TYPE_2 ( getData ( VAR_2 ) ) ; },public java.io.InputStream METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { return new TYPE_2 ( getData ( VAR_1 ) ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete Invocation']",4661
"public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( VAR_4 , VAR_5 , VAR_6 ) ; }",public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",4663
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int i ) { android.view.View VAR_2 = TYPE_3 . METHOD_2 ( context ) . METHOD_3 ( VAR_3 , VAR_1 , false ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 , i ) ; return VAR_4 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int i ) { android.view.View VAR_2 = TYPE_3 . METHOD_2 ( context ) . METHOD_3 ( VAR_3 , VAR_1 , false ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; }",['Delete VariableRead'],4664
public java.lang.Integer METHOD_1 ( ) { long i = index ; if ( i == ( end ) ) { return null ; } index = i + 1 ; return ( ( int ) ( i ) ) ; },public java.lang.Integer METHOD_1 ( ) { long i = ( index ) ++ ; if ( i == ( end ) ) { return null ; } return ( ( int ) ( i ) ) ; },"['Insert UnaryOperator', 'Move FieldWrite', 'Delete FieldRead', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Assignment']",4666
public boolean METHOD_1 ( java.lang.String key ) { java.lang.Object value = get ( key ) ; java.lang.Boolean VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( VAR_1 == null ) { return false ; } return VAR_1 . METHOD_3 ( ) ; },public boolean METHOD_1 ( java.lang.String key ) { java.lang.Object value = get ( key ) ; if ( value == null ) { return false ; } return TYPE_1 . METHOD_2 ( value ) . METHOD_3 ( ) ; },"['Update VariableRead', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4668
"public void METHOD_1 ( ) throws java.lang.Exception { int result = METHOD_2 ( ) ; VAR_1 . assertEquals ( 0 , result ) ; }",public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete VariableRead', 'Delete Invocation']",4669
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) { TYPE_1 result = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ( STRING_1 + VAR_1 ) ) ; VAR_4 . add ( TYPE_3 . METHOD_4 ( result , VAR_2 ) ) ; return result ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) { TYPE_1 result = VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; VAR_4 . add ( TYPE_3 . METHOD_4 ( result , VAR_2 ) ) ; return result ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",4670
"private void build ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( ) ; VAR_3 . build ( this , VAR_4 , VAR_5 ) ; }","private void build ( ) { VAR_2 . METHOD_1 ( ) . build ( this , VAR_4 , VAR_5 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",4671
private int METHOD_1 ( java.lang.String url ) { try { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( url ) ; return java.lang.Integer.parseInt ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; } catch ( TYPE_2 VAR_2 ) { return 1 ; } },private int METHOD_1 ( TYPE_1 VAR_1 ) { try { return java.lang.Integer.parseInt ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; } catch ( TYPE_2 VAR_2 ) { return 1 ; } },"['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4672
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 . getContext ( ) . METHOD_3 ( VAR_4 ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_5 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",4674
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_4 . METHOD_3 ( ) . replace ( VAR_5 , VAR_3 , VAR_6 ) . METHOD_4 ( null ) . commit ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_4 . METHOD_3 ( ) . replace ( VAR_5 , VAR_3 , VAR_6 ) . METHOD_4 ( null ) . commit ( ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",4676
"public void METHOD_1 ( java.lang.Integer id , java.util.Set < java.lang.Integer > VAR_1 ) { java.util.Set < java.lang.Integer > VAR_2 = new java.util.HashSet < > ( VAR_1 ) ; VAR_3 . put ( id , VAR_2 ) ; }","public void METHOD_1 ( java.lang.Integer id , java.util.Set < java.lang.Integer > VAR_1 ) { VAR_3 . put ( id , VAR_1 ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4677
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_2 = new TYPE_3 ( VAR_1 ) ; },public void METHOD_1 ( ) { VAR_2 = new TYPE_3 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4678
public java.lang.Integer METHOD_1 ( final java.lang.String VAR_1 ) { int VAR_2 = VAR_3 . length ( ) ; return java.lang.Integer . METHOD_2 ( ( - VAR_2 ) ) ; },public java.lang.Integer METHOD_1 ( final java.lang.String VAR_1 ) { return java.lang.Integer . METHOD_2 ( VAR_3 . length ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator']",4679
"private TYPE_1 < TYPE_2 > METHOD_1 ( byte VAR_1 ) { byte VAR_2 = METHOD_2 ( ) ; TYPE_1 < TYPE_2 > VAR_3 = new TYPE_1 < TYPE_2 > ( ) ; VAR_4 . add ( VAR_1 ) ; return TYPE_3 . METHOD_1 ( VAR_3 , VAR_2 ) ; }","private TYPE_1 < TYPE_2 > METHOD_1 ( byte VAR_1 ) { byte VAR_2 = METHOD_2 ( ) ; return TYPE_3 . METHOD_1 ( new TYPE_1 < TYPE_2 > ( VAR_1 ) , VAR_2 ) ; }","['Insert ConstructorCall', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",4681
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( ) ; java.util.List < TYPE_1 > list = VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; return list ; },public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",4682
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . getText ( ) ; VAR_4 . append ( VAR_5 . METHOD_2 ( VAR_2 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",4683
"public boolean METHOD_1 ( double x , double y , double VAR_1 ) { boolean result = this . METHOD_2 ( x , y , VAR_1 ) ; if ( result ) { java.lang.String VAR_2 = STRING_1 ; } return result ; }","public boolean METHOD_1 ( double x , double y , double VAR_1 ) { boolean result = this . METHOD_2 ( x , y , VAR_1 ) ; return result ; }","['Delete VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete Block', 'Delete If']",4684
private java.lang.Boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this ) ; VAR_2 . open ( ) ; java.lang.Boolean VAR_3 = ( VAR_1 . METHOD_2 ( ) ) > 0 ; VAR_1 . METHOD_3 ( ) ; return VAR_3 ; },private java.lang.Boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( this ) ; VAR_2 . open ( ) ; return ( VAR_1 . METHOD_2 ( ) ) > 0 ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4685
private void METHOD_1 ( ) { int VAR_1 = ( VAR_2 ) + 1 ; VAR_3 . setText ( ( ( ( ( VAR_1 + STRING_1 ) + ( VAR_4 ) ) + STRING_1 ) + ( VAR_5 ) ) ) ; },private void METHOD_1 ( ) { VAR_3 . setText ( ( ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_4 ) ) + STRING_1 ) + ( VAR_5 ) ) ) ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator']",4686
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( ) ; if ( ! ( VAR_2 . METHOD_2 ( ) ) ) VAR_2 . METHOD_3 ( VAR_1 ) ; else TYPE_3 . METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_3 . METHOD_4 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",4689
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_3 . setText ( VAR_1 ) ; java.util.Calendar VAR_4 = java.util.Calendar.getInstance ( ) ; VAR_5 . setText ( VAR_6 . format ( VAR_7 . getTime ( ) ) ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_3 . setText ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",4690
public java.lang.String METHOD_1 ( ) { return VAR_1 . getText ( ) ; },public java.lang.String METHOD_1 ( ) { java.lang.String text = VAR_1 . getText ( ) ; return text ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",4691
"public boolean equals ( java.lang.Object obj ) { if ( ! ( obj instanceof TYPE_1 ) ) { return false ; } TYPE_1 node = ( ( TYPE_1 ) ( obj ) ) ; return TYPE_2 . METHOD_1 ( this , node , VAR_1 ) ; }","public boolean equals ( TYPE_1 node ) { return TYPE_2 . METHOD_1 ( this , node , VAR_1 ) ; }","['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete UnaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable']",4692
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String output = VAR_1 . METHOD_2 ( ) ; VAR_2 . put ( VAR_3 . getName ( ) , output ) ; return output ; }",public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4693
private int METHOD_1 ( ) { TYPE_1 c = VAR_1 . get ( ) ; return c . METHOD_2 ( ) ; },public static int METHOD_1 ( ) { return 0 ; },"['Update Wra', 'Insert Wra', 'Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4694
protected void METHOD_1 ( java.lang.Integer id ) throws TYPE_1 { boolean VAR_1 = ( id != null ) && ( id > 0 ) ; if ( VAR_1 ) { this . id = id ; } else { throw new TYPE_1 ( VAR_2 ) ; } },protected void METHOD_1 ( java.lang.Integer id ) throws TYPE_1 { boolean VAR_1 = id > 0 ; if ( VAR_1 ) { this . id = id ; } else { throw new TYPE_1 ( VAR_2 ) ; } },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",4695
"public java.lang.String METHOD_1 ( int id , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_2 ( id ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_3 ) ; return STRING_2 ; }",public java.lang.String METHOD_1 ( ) { return STRING_2 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4696
"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { } else { android.content.Intent VAR_3 = new android.content.Intent ( this , VAR_4 class ) ; this . METHOD_2 ( VAR_3 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { } else { } }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation']",4697
public TYPE_1 METHOD_1 ( ) { float VAR_1 = ( ( float ) ( ( ( this . getValue ( ) ) * FLOAT_1 ) + INT_1 ) ) ; return new TYPE_2 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall']",4699
"public void METHOD_1 ( ) { java.lang.String url = STRING_1 + ( ( VAR_1 ) - INT_1 ) ; java.lang.String VAR_2 = METHOD_2 ( url , ( ( STRING_2 + ( token ) ) + STRING_3 ) ) ; java.lang.System.out.println ( VAR_2 ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",4701
public double METHOD_1 ( ) { double VAR_1 = METHOD_2 ( ) ; double VAR_2 = METHOD_3 ( ) ; return VAR_1 - ( ( FLOAT_1 * VAR_2 ) / ( TYPE_1 . METHOD_4 ( VAR_3 . length ) ) ) ; },public double METHOD_1 ( ) { return 0 ; },"['Insert Literal', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete BinaryOperator']",4702
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = new java.util.HashSet ( VAR_1 . METHOD_2 ( ) ) ; for ( java.lang.String VAR_3 : VAR_2 ) { remove ( VAR_3 ) ; } } },public void METHOD_1 ( ) { synchronized ( VAR_1 ) { for ( java.lang.String VAR_3 : VAR_1 . METHOD_2 ( ) ) { remove ( VAR_3 ) ; } } },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4703
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_4 . commit ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_4 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",4705
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( this , STRING_1 , VAR_2 ) . show ( ) ; TYPE_2 VAR_3 = VAR_4 . getView ( VAR_5 ) ; VAR_3 . METHOD_3 ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( this , STRING_1 , VAR_2 ) . show ( ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4706
"public java.lang.String index ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 , VAR_2 ) ; return STRING_3 ; }",public java.lang.String index ( TYPE_1 VAR_1 ) throws java.lang.Exception { return STRING_3 ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4707
public boolean METHOD_1 ( java.lang.Long VAR_1 ) { boolean result = ( ( VAR_2 ) == VAR_1 ) || ( ( VAR_1 >= ( VAR_2 ) ) && ( VAR_1 < ( VAR_3 ) ) ) ; return result ; },public boolean METHOD_1 ( java.lang.Long VAR_1 ) { boolean result = ( VAR_1 >= ( VAR_2 ) ) && ( VAR_1 < ( VAR_3 ) ) ; return result ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",4708
public TYPE_1 error ( java.lang.String value ) { TYPE_2 VAR_1 = new TYPE_2 ( value ) ; synchronized ( VAR_2 ) { VAR_3 . add ( VAR_1 ) ; error = value ; } METHOD_1 ( ) . set ( value ) ; return this ; },public TYPE_1 error ( java.lang.String value ) { synchronized ( VAR_2 ) { VAR_3 . add ( new TYPE_2 ( value ) ) ; } METHOD_1 ( ) . set ( ( error = value ) ) ; return this ; },"['Move Assignment', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4709
public static void main ( java.lang.String [ ] args ) { int sum = 0 ; int counter = 1 ; while ( counter <= INT_1 ) { sum = sum + counter ; counter ++ ; } java.lang.System.out.println ( ( STRING_1 + sum ) ) ; },public static void main ( java.lang.String [ ] args ) { int sum = INT_1 ; int counter = 1 ; while ( sum <= INT_1 ) { sum = sum + counter ; counter ++ ; java.lang.System.out.println ( ( STRING_1 + sum ) ) ; } },"['Insert FieldRead', 'Move Invocation', 'Update VariableRead', 'Delete Literal']",4712
public java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > names = new java.util.ArrayList ( VAR_1 . METHOD_2 ( ) ) ; VAR_2 . add ( VAR_3 ) ; return names ; },public java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > names = VAR_1 . METHOD_2 ( ) ; VAR_2 . add ( VAR_3 ) ; return names ; },"['Move Invocation', 'Delete ConstructorCall']",4713
"public synchronized void METHOD_1 ( int index , TYPE_1 target ) throws TYPE_2 { int VAR_1 = VAR_2 . METHOD_2 ( index ) ; VAR_3 . METHOD_3 ( VAR_1 , target ) ; METHOD_4 ( ) ; }","public void METHOD_1 ( int index , TYPE_1 target ) throws TYPE_2 { VAR_3 . METHOD_3 ( index , target ) ; METHOD_4 ( ) ; }","['Move VariableRead', 'Delete Wra', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4714
public boolean METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) != null ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 != null ) { return true ; } } return false ; },public boolean METHOD_1 ( TYPE_1 event ) { return true ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",4715
"protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_3 < TYPE_1 > out = new TYPE_3 < TYPE_1 > ( ) ; METHOD_3 ( VAR_2 , STRING_1 , out ) ; return VAR_3 . get ( ) ; }","protected synchronized void METHOD_1 ( java.lang.String VAR_1 , TYPE_3 < TYPE_1 > out ) throws TYPE_2 { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 , STRING_1 , out ) ; }","['Update TypeReference', 'Insert Parameter', 'Insert Wra', 'Move TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return']",4716
"public static TYPE_1 METHOD_1 ( byte [ ] content , java.lang.String fileName , java.lang.String VAR_1 , java.lang.String filePath ) { TYPE_1 file = new TYPE_1 ( new TYPE_2 ( content ) , fileName , VAR_1 , filePath ) ; return file ; }","public static TYPE_1 METHOD_1 ( byte [ ] content , java.lang.String fileName , java.lang.String VAR_1 , java.lang.String filePath ) { TYPE_1 file = new TYPE_1 ( content , fileName , VAR_1 , filePath ) ; return file ; }","['Update ConstructorCall', 'Move VariableRead', 'Delete ConstructorCall']",4718
private void METHOD_1 ( ) { android.view.View VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) ; } },private void METHOD_1 ( ) { VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4720
public int METHOD_1 ( int a ) { int result = ( a * INT_1 ) + 0 ; return result ; },public int METHOD_1 ( int a ) { int result = a * a ; return result ; },"['Move BinaryOperator', 'Insert VariableRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator']",4721
public void METHOD_1 ( ) { boolean VAR_1 = VAR_2 ; METHOD_2 ( ) ; VAR_3 = false ; if ( ! VAR_1 ) { VAR_4 . METHOD_3 ( this ) ; } },public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_3 = false ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",4722
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( this . source ) == null ) return VAR_1 ; java.lang.String result = this . VAR_2 . getName ( ) ; if ( result == null ) return VAR_1 ; return result ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( this . source ) == null ) return VAR_1 ; return this . VAR_2 . getName ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4724
public TYPE_1 METHOD_1 ( ) { TYPE_1 result = VAR_1 . item ; node = VAR_2 ; return result ; },public TYPE_1 METHOD_1 ( ) { node = VAR_2 ; return VAR_1 . item ; },"['Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4725
"public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( getActivity ( ) ) ) ; VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; }","public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { METHOD_3 ( ( ( TYPE_2 ) ( getActivity ( ) ) ) . METHOD_4 ( ) ) ; }","['Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",4727
"private void METHOD_1 ( TYPE_1 result ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; VAR_1 . METHOD_2 ( STRING_1 , result ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; }","private void METHOD_1 ( TYPE_1 result ) { android.content.Intent VAR_1 = new android.content.Intent ( ) ; VAR_1 . METHOD_2 ( STRING_1 , result ) ; METHOD_3 ( new android.content.Intent ( this , VAR_2 class ) ) ; METHOD_4 ( ) ; }","['Insert ConstructorCall', 'Move ConstructorCall', 'Delete VariableRead']",4728
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_4 ( ) . url ( VAR_3 . toString ( ) ) . build ( ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; return VAR_4 ; },public void METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_4 ( ) . url ( VAR_3 . toString ( ) ) . build ( ) ; VAR_5 . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",4729
public TYPE_1 put ( double value ) throws TYPE_2 { java.lang.Double VAR_1 = value ; TYPE_3 . METHOD_1 ( VAR_1 ) ; put ( VAR_1 ) ; return this ; },public TYPE_1 put ( double value ) throws TYPE_2 { java.lang.Double VAR_1 = new java.lang.Double ( value ) ; TYPE_3 . METHOD_1 ( VAR_1 ) ; put ( VAR_1 ) ; return this ; },"['Insert ConstructorCall', 'Move VariableRead']",4730
"private void METHOD_1 ( ) { TYPE_1 info = VAR_1 . METHOD_2 ( ) ; java.util.ArrayList < java.lang.String > temp = info . METHOD_3 ( ) ; java.util.Collections.sort ( temp ) ; VAR_2 . METHOD_4 ( new TYPE_1 ( temp , info . METHOD_5 ( ) ) ) ; }","private void METHOD_1 ( ) { TYPE_1 info = VAR_1 . METHOD_2 ( ) ; java.util.Collections.sort ( info . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( new TYPE_1 ( info . METHOD_3 ( ) , info . METHOD_5 ( ) ) ) ; }","['Move Invocation', 'Insert Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4731
"public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . setText ( STRING_1 ) ; VAR_4 . setText ( STRING_2 ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_5 class ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . setText ( STRING_1 ) ; VAR_4 . setText ( STRING_2 ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4732
public static void METHOD_1 ( android.content.Context VAR_1 ) { VAR_2 = null ; VAR_3 = null ; TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_4 = TYPE_3 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; },public static void METHOD_1 ( android.content.Context VAR_1 ) { VAR_2 = null ; VAR_3 = null ; TYPE_1 . METHOD_2 ( VAR_1 ) ; },"['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4734
public static void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String filePath = ( VAR_1 + STRING_1 ) + ( VAR_2 ) ; VAR_3 = new java.io.File ( filePath ) ; if ( VAR_3 . METHOD_2 ( ) ) { VAR_4 . delete ( ) ; } },public static void METHOD_1 ( ) { if ( ( ( VAR_3 ) != null ) && ( VAR_3 . METHOD_2 ( ) ) ) { VAR_4 . delete ( ) ; } },"['Insert BinaryOperator', 'Insert BinaryOperator', 'Move Invocation', 'Insert FieldRead', 'Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Assignment']",4737
"private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String result ) { VAR_1 . METHOD_2 ( new TYPE_2 ( VAR_3 . METHOD_3 ( ( STRING_1 + result ) , VAR_2 ) ) ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String result ) { VAR_1 . METHOD_2 ( new TYPE_2 ( java.lang.String.format ( VAR_3 . METHOD_3 ( ( STRING_1 + result ) ) , VAR_2 ) ) ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Move Invocation', 'Move VariableRead']",4741
"private int METHOD_1 ( int x , int y , int VAR_1 ) { TYPE_1 state = VAR_2 . METHOD_2 ( new TYPE_2 ( x , y , VAR_1 ) ) ; return state . METHOD_3 ( ) . METHOD_4 ( state ) ; }","private int METHOD_1 ( int x , int y , int VAR_1 ) { return VAR_2 . METHOD_1 ( x , y , VAR_1 ) ; }","['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Move VariableRead', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete ConstructorCall', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4742
"public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_2 . add ( VAR_3 ) ; TYPE_2 . METHOD_2 ( this , VAR_1 ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation']",4744
public void METHOD_1 ( int id ) { this . VAR_1 . METHOD_2 ( id ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_3 ( id ) ; this . VAR_3 . delete ( VAR_2 ) ; },public void METHOD_1 ( long id ) { this . VAR_3 . delete ( id ) ; },"['Update TypeReference', 'Move VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4745
"public void METHOD_1 ( ) { android.content.Context context = getActivity ( ) ; if ( context != null ) VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( context , VAR_2 ) ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( getActivity ( ) , VAR_2 ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4746
"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 , id ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4747
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_1 VAR_4 = this . METHOD_1 ( VAR_1 , new TYPE_5 ( VAR_2 , VAR_3 ) ) ; METHOD_2 ( VAR_4 ) ; return VAR_4 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { return this . METHOD_1 ( VAR_1 , new TYPE_5 ( VAR_2 , VAR_3 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4748
"protected java.lang.Void METHOD_1 ( java.io.File ... params ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( java.io.File file : params ) { TYPE_2 . METHOD_2 ( file , VAR_1 ) ; } return null ; }","protected java.lang.Void METHOD_1 ( java.io.File ... params ) { for ( java.io.File file : params ) { TYPE_2 . METHOD_2 ( file , new TYPE_1 ( ) ) ; } return null ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4749
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( VAR_1 . METHOD_2 ( ) ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_3 ( getActivity ( ) , STRING_1 , VAR_3 ) ; VAR_4 . show ( ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( VAR_1 . METHOD_2 ( ) ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",4750
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View VAR_3 = TYPE_3 . METHOD_2 ( VAR_4 . getContext ( ) ) . METHOD_3 ( VAR_5 , VAR_1 , false ) ; return new TYPE_1 ( VAR_3 , this ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View VAR_3 = android.view.View . METHOD_3 ( VAR_4 . getContext ( ) , VAR_5 , VAR_1 ) ; return new TYPE_1 ( VAR_3 , this ) ; }","['Update Invocation', 'Move Invocation', 'Insert FieldRead', 'Move TypeAccess', 'Move VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",4752
public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( args ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( args ) ; java.util.Date date = new java.util.Date ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Insert ConstructorCall']",4753
public int METHOD_1 ( ) { int index = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( index == ( - 1 ) ) { return index ; } return index + ( offset ) ; },public int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",4754
public TYPE_1 METHOD_1 ( java.lang.String id ) throws java.io.IOException { TYPE_1 VAR_1 = this . VAR_2 . get ( id ) ; if ( VAR_1 == null ) return null ; return TYPE_2 . METHOD_2 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( java.lang.String id ) throws java.io.IOException { return this . VAR_2 . get ( id ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4755
public void start ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 ) ; if ( ! ( VAR_3 . METHOD_1 ( ) ) ) { METHOD_2 ( ) ; } },public void start ( ) { METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",4756
"public java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return VAR_3 . METHOD_1 ( VAR_1 , TYPE_1 . METHOD_2 ( VAR_2 ) ) ; }","public java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.util.List < java.lang.String > list = VAR_3 . METHOD_1 ( VAR_1 , TYPE_1 . METHOD_2 ( VAR_2 ) ) ; java.lang.System.out.println ( list ) ; return list ; }","['Insert LocalVariable', 'Insert Invocation', 'Insert TypeReference', 'Move Invocation', 'Insert FieldRead', 'Insert VariableRead', 'Insert VariableRead', 'Insert TypeReference', 'Insert TypeAccess']",4757
"public void METHOD_1 ( int index , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( index ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( VAR_1 ) ; } }","public void METHOD_1 ( int index , java.lang.String VAR_1 ) { METHOD_2 ( index ) . METHOD_3 ( VAR_1 ) ; }","['Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4761
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 ) ; VAR_5 . put ( VAR_6 , VAR_7 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( text , x , y ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( text , x , y ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4764
"public static void METHOD_1 ( android.content.Context context ) { int VAR_1 = ( TYPE_1 . METHOD_2 ( context ) ) + 1 ; TYPE_1 . METHOD_3 ( context ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 , VAR_1 ) . commit ( ) ; }","public static void METHOD_1 ( android.content.Context context ) { int VAR_1 = TYPE_1 . METHOD_2 ( context ) ; TYPE_1 . METHOD_3 ( context ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 , ( VAR_1 + 1 ) ) . commit ( ) ; }","['Move Invocation', 'Insert BinaryOperator', 'Move VariableRead', 'Move Literal', 'Delete BinaryOperator']",4766
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_3 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",4767
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , INT_2 ) ; java.lang.String VAR_2 = STRING_1 ; VAR_3 . assertEquals ( VAR_2 , VAR_4 . toString ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , INT_2 ) ; java.lang.String VAR_2 = new java.lang.String ( STRING_1 ) ; VAR_3 . assertEquals ( VAR_2 , VAR_4 . toString ( ) ) ; }","['Insert ConstructorCall', 'Move FieldRead']",4769
public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; TYPE_1 . METHOD_2 ( STRING_2 ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",4770
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; java.lang.String VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 , VAR_3 ) ; return VAR_4 . get ( VAR_2 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; return VAR_4 . get ( VAR_1 ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4771
protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 response = VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; return response ; },protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",4774
"private void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { java.io.File VAR_2 = new java.io.File ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_3 ( VAR_2 , INT_1 ) ; }",private void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_1 . METHOD_2 ( new java.io.File ( VAR_1 ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4775
private static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = null ; int VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 ) ; return VAR_1 ; },private static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = null ; return VAR_1 ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",4776
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View view = TYPE_3 . METHOD_2 ( VAR_3 . getContext ( ) ) . METHOD_3 ( VAR_4 , VAR_1 , false ) ; return new TYPE_1 ( view ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { return null ; }","['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ConstructorCall']",4778
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; METHOD_2 ( VAR_2 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4779
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4780
"java.lang.String METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 != null ) { VAR_2 . METHOD_3 ( STRING_1 , VAR_3 ) ; } return STRING_2 ; }","java.lang.String METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_2 ) { return STRING_2 ; }","['Insert Parameter', 'Insert TypeReference', 'Insert TypeReference', 'Insert TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4781
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) . METHOD_3 ( ) , getContext ( ) , getValue ( ) ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4782
"public java.lang.String METHOD_1 ( ) { int VAR_1 = name . METHOD_2 ( CHAR_1 ) ; return VAR_1 > ( - 1 ) ? VAR_2 . substring ( 0 , VAR_1 ) : STRING_1 ; }","public java.lang.String METHOD_1 ( ) { int VAR_1 = name ( ) . METHOD_2 ( CHAR_1 ) ; return VAR_1 > ( - 1 ) ? name ( ) . substring ( 0 , VAR_1 ) : STRING_1 ; }","['Insert Invocation', 'Insert Invocation', 'Delete FieldRead', 'Delete TypeAccess']",4783
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; METHOD_2 ( VAR_2 , 1 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",4784
"static boolean METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String value = VAR_2 . replaceAll ( STRING_1 , STRING_2 ) . replaceAll ( STRING_3 , STRING_2 ) ; return ( TYPE_1 . METHOD_2 ( value ) ) && ( ! ( VAR_3 . isEmpty ( ) ) ) ; }","static boolean METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_2 . replaceAll ( STRING_1 , STRING_2 ) . replaceAll ( STRING_3 , STRING_2 ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",4785
"private static java.lang.String METHOD_1 ( java.lang.String a , java.lang.String b ) { TYPE_1 VAR_1 = new TYPE_1 ( a ) ; TYPE_1 VAR_2 = new TYPE_1 ( b ) ; return VAR_3 . add ( VAR_2 ) . toString ( ) ; }","private static java.lang.String METHOD_1 ( java.lang.String a , java.lang.String b ) { return new TYPE_1 ( a ) . add ( new TYPE_1 ( b ) ) . toString ( ) ; }","['Move ConstructorCall', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead']",4786
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( 1 ) ; TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( VAR_5 ) ; assertEquals ( VAR_2 . METHOD_4 ( VAR_1 , VAR_3 ) , INT_1 ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",4789
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 = VAR_4 . compareTo ( VAR_5 . sum ) ; if ( VAR_3 == 0 ) { return VAR_6 . compareTo ( VAR_7 . name ) ; } else { return VAR_3 ; } }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_4 . compareTo ( VAR_5 . sum ) ; }","['Insert Return', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",4790
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) ; java.lang.String result = VAR_1 . METHOD_1 ( STRING_3 , INT_1 ) ; VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( result ) ; }","public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_1 ( STRING_3 , INT_1 ) ; VAR_1 . METHOD_2 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",4792
public void METHOD_1 ( ) { java.util.HashSet < TYPE_1 > VAR_1 = new java.util.HashSet < TYPE_1 > ( VAR_2 ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { METHOD_2 ( VAR_3 ) ; } },public void METHOD_1 ( ) { for ( TYPE_1 VAR_3 : VAR_2 ) { METHOD_2 ( VAR_3 ) ; } },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4794
"public java.lang.String METHOD_1 ( ) { return ( ( java.lang.String ) ( METHOD_2 ( ) . METHOD_3 ( VAR_1 , STRING_1 ) ) ) ; }","public java.lang.String METHOD_1 ( ) { java.lang.String value = ( ( java.lang.String ) ( METHOD_2 ( ) . METHOD_3 ( VAR_1 , STRING_1 ) ) ) ; return value ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",4795
"public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String VAR_2 = VAR_3 . getText ( ) . toString ( ) . toLowerCase ( ) ; new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 , this ) , METHOD_3 ( ) ) . execute ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String VAR_2 = VAR_3 . getText ( ) . toString ( ) ; new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 , this ) , METHOD_3 ( ) ) . execute ( ) ; }","['Move Invocation', 'Delete Invocation']",4797
"public void show ( java.net.URL VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.Throwable VAR_4 ) { java.lang.String VAR_5 = null ; show ( VAR_5 , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","public void show ( java.net.URL VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.Throwable VAR_4 ) { }","['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4798
"protected static java.io.File METHOD_1 ( java.io.File VAR_1 ) { java.io.File VAR_2 = new java.io.File ( VAR_1 , VAR_3 ) ; boolean VAR_4 = VAR_2 . METHOD_2 ( ) ; VAR_5 . METHOD_3 ( STRING_1 , VAR_2 , VAR_4 ) ; return VAR_2 ; }","protected static java.io.File METHOD_1 ( java.io.File VAR_1 ) { java.io.File VAR_2 = new java.io.File ( VAR_1 , VAR_3 ) ; VAR_2 . METHOD_2 ( ) ; return VAR_2 ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4799
"public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 ) . METHOD_2 ( VAR_3 . getId ( ) ) . METHOD_3 ( ) ; android.content.Intent VAR_4 = new android.content.Intent ( this , VAR_5 class ) ; METHOD_4 ( VAR_4 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 ) . METHOD_2 ( VAR_3 . getId ( ) ) . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4802
"public void start ( ) { VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 , STRING_2 , INT_1 ) ; VAR_2 . METHOD_3 ( ) ; }",public void start ( ) { },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4803
public boolean METHOD_1 ( TYPE_1 item ) { int VAR_1 = item . METHOD_2 ( ) ; if ( VAR_1 == ( VAR_2 ) ) { METHOD_3 ( ) ; return true ; } return super . METHOD_1 ( item ) ; },public boolean METHOD_1 ( TYPE_1 item ) { return super . METHOD_1 ( item ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",4804
public static void main ( java.lang.String [ ] args ) { float answer = ( ( FLOAT_1 * FLOAT_2 ) - ( FLOAT_3 * FLOAT_4 ) ) / ( FLOAT_5 - FLOAT_6 ) ; java.lang.System.out.print ( answer ) ; },public static void main ( java.lang.String [ ] args ) { float answer = ( FLOAT_1 * FLOAT_2 ) - ( ( FLOAT_3 * FLOAT_4 ) / ( FLOAT_5 - FLOAT_6 ) ) ; java.lang.System.out.print ( answer ) ; },"['Move BinaryOperator', 'Move BinaryOperator', 'Move BinaryOperator']",4809
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , float offset ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 , VAR_2 , offset ) ; VAR_4 . add ( VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , float offset ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 , offset ) ; VAR_4 . put ( VAR_2 , VAR_3 ) ; }","['Update Invocation', 'Move VariableRead']",4810
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 args = new TYPE_3 ( ) ; args . METHOD_2 ( VAR_3 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4811
public void METHOD_1 ( ) { int x = INT_1 ; },public void METHOD_1 ( ) { return ; },"['Insert Return', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable']",4812
"public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; } VAR_2 = TYPE_1 . METHOD_4 ( this , VAR_1 ) ; VAR_3 . start ( ) ; }","public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_4 ( this , VAR_1 ) ; VAR_3 . start ( ) ; VAR_2 . METHOD_3 ( ) ; }","['Insert LocalVariable', 'Insert Invocation', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete FieldWrite', 'Delete Assignment']",4813
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 t = VAR_2 . get ( VAR_1 ) ; return t ; },public static TYPE_1 METHOD_1 ( java.lang.String key ) { return VAR_2 . get ( key ) ; },"['Update Parameter', 'Move Invocation', 'Update VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4814
"public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_1 ( VAR_2 ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_1 ( VAR_2 ) ; } return ; }","['Insert Return', 'Delete VariableRead', 'Delete Invocation']",4815
"private void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( VAR_2 , VAR_3 class ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; }","private static void METHOD_1 ( ) { VAR_2 . METHOD_2 ( new android.content.Intent ( VAR_2 , VAR_3 class ) ) ; }","['Insert Wra', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4817
"public TYPE_1 METHOD_1 ( android.content.Intent intent ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_3 ( STRING_2 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; return VAR_4 . METHOD_5 ( ) ; }","public TYPE_1 METHOD_1 ( android.content.Intent intent ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; return VAR_4 . METHOD_5 ( ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4821
"private void METHOD_1 ( int VAR_1 ) { int VAR_2 = METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 , ( - 1 ) ) ; }","private void METHOD_1 ( int VAR_1 ) { int VAR_2 = METHOD_2 ( VAR_1 ) ; int value = - 1 ; METHOD_3 ( VAR_2 , value ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move UnaryOperator', 'Insert VariableRead']",4822
"public static void main ( java.lang.String [ ] args ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.String text = TYPE_2 . METHOD_1 ( new java.io.File ( STRING_1 ) , STRING_2 ) ; java.lang.System.out.println ( VAR_1 . METHOD_2 ( text ) ) ; }",public static void main ( java.lang.String [ ] args ) throws java.io.IOException { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",4824
public void put ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; this . VAR_3 . METHOD_1 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( VAR_4 ) ) ) ; },public void put ( TYPE_1 VAR_1 ) { this . VAR_3 . METHOD_1 ( new TYPE_2 ( VAR_1 ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",4825
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) ; return VAR_3 . METHOD_4 ( VAR_2 ) ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_3 . METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4826
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ; return VAR_3 . METHOD_4 ( VAR_2 ) ; }",public TYPE_1 METHOD_1 ( TYPE_1 VAR_2 ) { return VAR_3 . METHOD_4 ( VAR_2 ) ; },"['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable']",4827
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; view . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Invocation']",4828
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( 0 , 0 , INT_1 , INT_2 ) ; VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Literal', 'Delete Literal', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4829
private void METHOD_1 ( java.lang.String [ ] VAR_1 ) throws java.io.IOException { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_2 ( STRING_2 ) ; java.lang.String response = VAR_3 . METHOD_3 ( ) ; java.lang.System.out.println ( response ) ; },private void METHOD_1 ( java.lang.String [ ] VAR_1 ) throws java.io.IOException { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_2 ( STRING_2 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",4833
public boolean METHOD_1 ( ) { try { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; return VAR_1 != null ; } catch ( TYPE_2 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; return false ; } },public boolean METHOD_1 ( ) { try { VAR_2 . METHOD_2 ( ) ; return true ; } catch ( TYPE_2 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; return false ; } },"['Move Invocation', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator']",4834
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String name ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( name ) ; return VAR_2 ; }","public static TYPE_2 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String name ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( name ) ; return VAR_1 ; }","['Update TypeReference', 'Move Invocation', 'Update VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4835
public void METHOD_1 ( int VAR_1 ) { this . VAR_2 [ VAR_1 ] = false ; },public void METHOD_1 ( int VAR_1 ) { int index = VAR_1 - 1 ; this . VAR_2 [ index ] = false ; },"['Insert LocalVariable', 'Insert TypeReference', 'Insert BinaryOperator', 'Move VariableRead', 'Insert Literal', 'Insert VariableRead']",4836
"public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . remove ( event . METHOD_2 ( ) ) ; if ( VAR_2 != null ) { METHOD_3 ( VAR_2 ) ; } METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { VAR_3 . remove ( event . METHOD_2 ( ) ) ; METHOD_4 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4838
public java.util.Collection < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) return new java.util.ArrayList < TYPE_1 > ( ) ; return VAR_1 . METHOD_1 ( ) ; },public java.util.Collection < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4839
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.io.File VAR_2 = METHOD_2 ( ) ; if ( METHOD_3 ( VAR_2 ) ) return ; else { METHOD_4 ( VAR_1 , VAR_2 ) ; } return ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; if ( METHOD_3 ( VAR_2 ) ) return ; else { METHOD_4 ( VAR_1 , VAR_2 ) ; } return ; }","['Move Invocation', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4840
public java.lang.String METHOD_1 ( ) { return ( ( ( ( STRING_1 + ( this . name ) ) + STRING_2 ) + ( this . VAR_1 ) ) + STRING_3 ) + ( this . METHOD_2 ( ) ) ; },public java.lang.String METHOD_1 ( ) { java.lang.String end = ( ( ( ( STRING_1 + ( this . name ) ) + STRING_2 ) + ( this . VAR_1 ) ) + STRING_3 ) + ( this . METHOD_2 ( ) ) ; return end ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move BinaryOperator', 'Insert VariableRead']",4841
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 path = VAR_2 . get ( VAR_1 ) ; java.lang.System.out.println ( path ) ; return VAR_2 . get ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { return VAR_2 . get ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",4842
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . remove ( VAR_1 ) ; java.util.ArrayList < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_4 . add ( VAR_1 ) ; METHOD_2 ( VAR_3 ) ; return METHOD_3 ( ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . remove ( VAR_1 ) ; return METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4844
public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return null ; } TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { return null ; } return VAR_2 . METHOD_3 ( VAR_3 ) ; },public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4845
"public < TYPE_1 extends TYPE_2 > void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.Class < TYPE_1 > VAR_3 ) { java.lang.String key = ( VAR_1 + STRING_1 ) + VAR_2 ; VAR_4 . put ( key , VAR_3 ) ; }","public < TYPE_1 extends TYPE_2 > void METHOD_1 ( java.lang.String name , java.lang.Class < TYPE_1 > VAR_3 ) { VAR_4 . put ( name , VAR_3 ) ; }","['Update Parameter', 'Update VariableRead', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete LocalVariable']",4846
"public static byte [ ] METHOD_1 ( byte [ ] source ) throws java.io.IOException { java.lang.Object VAR_1 = null ; byte [ ] VAR_2 = TYPE_1 . METHOD_1 ( source , 0 , VAR_3 . length , 0 ) ; return VAR_2 ; }","public static byte [ ] METHOD_1 ( byte [ ] source ) throws java.io.IOException { byte [ ] VAR_2 = TYPE_1 . METHOD_1 ( source , 0 , VAR_3 . length , 0 ) ; return VAR_2 ; }","['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",4848
public void METHOD_1 ( ) throws java.io.IOException { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; assert VAR_3 . equals ( VAR_4 ) ; },public void METHOD_1 ( ) throws java.io.IOException { assert TYPE_1 . METHOD_2 ( VAR_2 ) . equals ( VAR_4 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",4849
"public android.view.View getView ( int position , android.view.View VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 t = new TYPE_2 ( c ) ; VAR_3 . setText ( VAR_4 . get ( position ) ) ; VAR_2 . METHOD_1 ( t ) ; return null ; }","public android.view.View getView ( int position , android.view.View VAR_1 , TYPE_1 VAR_2 ) { return null ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4851
private static TYPE_1 METHOD_1 ( ) { int VAR_1 = ( ( int ) ( java.lang.Math.round ( ( ( java.lang.Math.random ( ) ) * ( ( VAR_2 . length ) - 1 ) ) ) ) ) ; return new TYPE_1 ( VAR_3 [ VAR_1 ] ) ; },private static TYPE_1 METHOD_1 ( ) { int VAR_1 = ( ( int ) ( ( java.lang.Math.random ( ) ) * ( ( VAR_2 . length ) - 1 ) ) ) ; return new TYPE_1 ( VAR_3 [ VAR_1 ] ) ; },"['Move BinaryOperator', 'Move TypeReference', 'Delete TypeAccess', 'Delete Invocation']",4852
public void METHOD_1 ( int VAR_1 ) { int VAR_2 = VAR_3 ; VAR_3 = VAR_1 ; METHOD_2 ( ( VAR_1 - VAR_2 ) ) ; },public void METHOD_1 ( int VAR_1 ) { VAR_3 = VAR_1 ; METHOD_2 ( VAR_1 ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator']",4853
"public void delete ( int id ) { TYPE_1 VAR_1 = METHOD_1 ( ) ; TYPE_2 item = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( VAR_2 , new java.lang.Integer ( id ) ) ) ) ; delete ( item ) ; }","public void delete ( int id ) { TYPE_2 item = ( ( TYPE_2 ) ( METHOD_1 ( ) . METHOD_2 ( VAR_2 , new java.lang.Integer ( id ) ) ) ) ; delete ( item ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4854
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 view = VAR_2 . METHOD_2 ( VAR_3 ) ; view . METHOD_3 ( VAR_4 , TYPE_2 . METHOD_4 ( ) . toString ( ) ) ; VAR_5 . METHOD_5 ( view ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4855
"public void METHOD_1 ( java.lang.String VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( STRING_1 , VAR_1 ) ; METHOD_3 ( intent ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",4856
private java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( VAR_1 == null ) { VAR_1 = TYPE_1 . METHOD_3 ( STRING_2 ) ; } return VAR_1 ; },private java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_3 ( STRING_2 ) ; if ( VAR_1 == null ) { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; } return VAR_1 ; },"['Move Invocation', 'Move Invocation']",4857
"private static double METHOD_1 ( double a , double b ) { double VAR_1 = java.lang.Math.abs ( ( a - b ) ) ; return java.lang.Math.pow ( VAR_1 , INT_1 ) ; }","private static double METHOD_1 ( double a , double b ) { return ( a - b ) * ( a - b ) ; }","['Insert BinaryOperator', 'Insert BinaryOperator', 'Move BinaryOperator', 'Insert VariableRead', 'Insert VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4858
public int METHOD_1 ( ) { int value = 0 ; return value ; },public int METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",4859
public double METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { double VAR_2 = ( VAR_3 ) + ( ( VAR_4 ) / INT_1 ) ; return VAR_2 ; } else { return VAR_3 ; } },public double METHOD_1 ( ) { return VAR_3 ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",4861
"public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; try { VAR_3 . METHOD_1 ( VAR_2 ) ; } catch ( TYPE_4 VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } }","public static void METHOD_1 ( TYPE_2 VAR_3 , java.lang.String VAR_2 ) { try { VAR_3 . METHOD_1 ( VAR_2 ) ; } catch ( TYPE_4 VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } }","['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4862
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( false ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_4 . METHOD_2 ( true ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( false ) ; VAR_4 . METHOD_2 ( true ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",4863
public java.lang.String getName ( ) { java.lang.String VAR_1 = METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 == null ) { VAR_1 = METHOD_4 ( ) . METHOD_3 ( ) ; } return VAR_1 ; },public java.lang.String getName ( ) { java.lang.String VAR_1 = METHOD_1 ( ) . METHOD_3 ( ) ; if ( VAR_1 == null ) { VAR_1 = METHOD_4 ( ) . METHOD_3 ( ) ; } return VAR_1 ; },"['Update Invocation', 'Move Invocation', 'Delete Invocation']",4865
"private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; return new TYPE_5 ( VAR_3 . METHOD_4 ( ) , VAR_2 ) ; }","private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_5 ( VAR_3 . METHOD_4 ( ) , VAR_1 . METHOD_3 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4866
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . assertTrue ( VAR_4 . get ( 0 ) . equals ( VAR_5 ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",4867
"public int METHOD_1 ( int VAR_1 , int VAR_2 ) { int b = java.lang.Integer . METHOD_2 ( VAR_3 [ VAR_1 ] [ VAR_2 ] . substring ( INT_1 , INT_2 ) ) ; return b ; }","public java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 ) { java.lang.String b = VAR_3 [ VAR_1 ] [ VAR_2 ] . substring ( INT_1 , INT_2 ) ; return b ; }","['Update TypeReference', 'Update TypeReference', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",4868
public boolean execute ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_1 ( ) ) ) ; VAR_1 . METHOD_2 ( true ) ; return VAR_2 . execute ( ) ; },public boolean execute ( ) { METHOD_1 ( ) . execute ( ) ; return false ; },"['Update Invocation', 'Move Invocation', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation']",4869
"private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { boolean VAR_3 = true ; boolean VAR_4 = true ; VAR_5 . METHOD_2 ( VAR_1 , null , VAR_3 , VAR_4 , VAR_2 ) ; VAR_5 . METHOD_3 ( VAR_1 , VAR_2 ) ; }","private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { boolean VAR_3 = true ; VAR_5 . METHOD_2 ( VAR_1 , null , VAR_3 , VAR_2 ) ; }","['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4870
private void METHOD_1 ( java.lang.String name ) { METHOD_2 ( ) . METHOD_3 ( name ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_4 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( name ) ; },private void METHOD_1 ( java.lang.String name ) { METHOD_2 ( ) . METHOD_3 ( name ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4873
"private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 < java.lang.Void > VAR_3 = VAR_4 . METHOD_2 ( null , VAR_1 , VAR_2 , METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_4 . METHOD_2 ( null , VAR_1 , VAR_2 , METHOD_3 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4875
"public int METHOD_1 ( char c ) { java.lang.Integer VAR_1 = VAR_2 . get ( c ) ; if ( VAR_1 == null ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( java.lang.String.format ( STRING_1 , c ) ) ; return 0 ; } return VAR_1 ; }",public int METHOD_1 ( char c ) { return VAR_2 . get ( c ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4876
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 writer ) throws TYPE_4 , java.io.IOException { TYPE_5 VAR_2 = new TYPE_5 ( ) ; VAR_3 . put ( STRING_1 , STRING_2 ) ; VAR_4 . METHOD_2 ( VAR_2 , writer ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 writer ) throws TYPE_4 , java.io.IOException { }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4879
public static void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_2 != null ) VAR_2 . METHOD_3 ( ) ; java.lang.System.exit ( VAR_1 ) ; },public static void METHOD_1 ( int VAR_1 ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.System.exit ( VAR_1 ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4880
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = ( VAR_1 . METHOD_2 ( ) ) && ( ( VAR_1 . METHOD_3 ( ) ) > 0.0F ) ; boolean VAR_3 = VAR_1 . METHOD_4 ( ) ; return VAR_3 || VAR_2 ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_4 ( ) ) || ( VAR_1 . METHOD_2 ( ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator']",4882
protected int METHOD_1 ( final long number ) { long value = number ; int VAR_1 = - 1 ; while ( ( value / 1 ) != 0 ) { value /= INT_1 ; VAR_1 ++ ; } return VAR_1 ; },protected int METHOD_1 ( final long number ) { long value = java.lang.Math.abs ( number ) ; int VAR_1 = - 1 ; while ( value > 0 ) { value /= INT_1 ; VAR_1 ++ ; } return VAR_1 ; },"['Insert Invocation', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert TypeAccess', 'Move VariableRead', 'Move Literal', 'Delete Literal', 'Delete BinaryOperator']",4887
"public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { android.content.Intent VAR_2 = new android.content.Intent ( ) ; VAR_2 . METHOD_2 ( this , VAR_3 class ) ; METHOD_3 ( VAR_2 ) ; this . METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete ThisAccess', 'Delete Invocation']",4888
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { TYPE_2 . METHOD_4 ( ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_2 . METHOD_4 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",4889
public void METHOD_1 ( ) { int i = 0 ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",4890
"public boolean METHOD_1 ( android.view.View VAR_1 ) { int p = METHOD_2 ( ) ; return ( ( ( VAR_2 ) != null ) && ( p >= 0 ) ) && ( VAR_2 . METHOD_1 ( VAR_1 , p ) ) ; }","public boolean METHOD_1 ( android.view.View VAR_1 ) { return ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_1 ( VAR_1 , METHOD_2 ( ) ) ) ; }","['Move BinaryOperator', 'Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",4891
"public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.Integer > VAR_1 = VAR_2 . METHOD_1 ( STRING_1 ) ; VAR_3 . assertTrue ( ( ( VAR_4 . size ( ) ) > 0 ) ) ; }",public void METHOD_1 ( ) throws java.lang.Exception { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation']",4893
"public void METHOD_1 ( final java.util.List < java.lang.Long > VAR_1 ) { if ( ( VAR_2 . size ( ) ) > 0 ) { super . METHOD_1 ( VAR_3 . METHOD_2 ( VAR_1 , VAR_4 ) ) ; } }","public void METHOD_1 ( final java.util.List < java.lang.Long > VAR_1 ) { java.lang.Long size = VAR_3 . METHOD_2 ( VAR_1 , VAR_4 ) ; super . METHOD_1 ( VAR_3 . METHOD_2 ( VAR_1 , VAR_4 ) ) ; }","['Insert LocalVariable', 'Move Invocation', 'Insert TypeReference', 'Insert Invocation', 'Insert TypeAccess', 'Insert VariableRead', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4894
"public void METHOD_1 ( TYPE_1 VAR_1 ) { int index = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( index != ( - 1 ) ) { VAR_3 . remove ( VAR_1 ) ; METHOD_3 ( index , index ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . remove ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4895
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( STRING_1 ) ; new TYPE_2 ( new TYPE_3 ( new TYPE_1 ( ) ) ) . METHOD_2 ( ) ; },public static void main ( java.lang.String [ ] args ) { new TYPE_2 ( new TYPE_3 ( new TYPE_1 ( ) ) ) . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4896
"public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( METHOD_2 ( ) , METHOD_3 ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; return VAR_1 ; },"['Delete Invocation', 'Delete Invocation']",4897
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.util.ArrayList < java.lang.String > VAR_2 ) { TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; return VAR_3 ; }","public static TYPE_2 METHOD_1 ( TYPE_2 VAR_1 , java.util.ArrayList < java.lang.String > VAR_2 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; return VAR_1 ; }","['Update TypeReference', 'Move Invocation', 'Update VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4898
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; TYPE_4 . METHOD_2 ( VAR_2 , VAR_3 class ) ; TYPE_5 t = new TYPE_5 ( ) ; VAR_4 . assertNotNull ( STRING_1 , t ) ; }","public void METHOD_1 ( ) { TYPE_5 t = new TYPE_5 ( ) ; VAR_4 . assertNotNull ( STRING_1 , t ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4899
"public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 . METHOD_2 ( null , STRING_1 , STRING_2 , VAR_3 ) ; if ( VAR_2 == ( VAR_4 ) ) { METHOD_3 ( ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4901
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; if ( VAR_2 != null ) { java.lang.String a = VAR_2 . METHOD_4 ( ) ; return a ; } return STRING_1 ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete FieldRead']",4902
"private void handle ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = VAR_4 . METHOD_1 ( ) ; if ( VAR_3 != null ) { VAR_5 . handle ( VAR_4 , VAR_6 , VAR_1 , VAR_2 ) ; } }","private void handle ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_4 . METHOD_1 ( ) . handle ( VAR_4 , VAR_6 , VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",4903
private boolean METHOD_1 ( java.lang.String VAR_1 ) { boolean VAR_2 = false ; },private boolean METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",4904
public java.lang.String METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_1 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; return VAR_2 ; },public java.lang.String METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_1 ( ) ; return VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",4905
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( null == VAR_1 ) { return false ; } TYPE_2 nodes = VAR_1 . METHOD_2 ( STRING_1 ) ; return ( null != nodes ) && ( ( nodes . METHOD_3 ( ) ) > 0 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return false ; },"['Move Return', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Return']",4906
"public static int METHOD_1 ( int [ ] VAR_1 ) { int VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , 0 , ( ( VAR_3 . length ) - 1 ) ) ; return VAR_2 ; }",public static int METHOD_1 ( int [ ] VAR_1 ) { return - 1 ; },"['Insert UnaryOperator', 'Move Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4907
public final boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; return ( VAR_1 != null ) && ( VAR_1 . METHOD_1 ( ) ) ; },public final boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_1 ( ) ) ; },"['Insert FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4908
"public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String state = VAR_2 . replaceAll ( STRING_1 , STRING_2 ) . trim ( ) ; return state ; }","public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String state = VAR_2 . replaceAll ( STRING_1 , STRING_2 ) ; return state ; }","['Move Invocation', 'Delete Invocation']",4911
"private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 , new TYPE_2 ( VAR_1 , VAR_2 ) ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_3 ( METHOD_2 ( ) , new TYPE_2 ( VAR_1 , METHOD_2 ( ) ) ) ; }","['Move Invocation', 'Insert Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4912
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 . METHOD_2 ( this ) ) ) ; TYPE_1 result = new TYPE_1 ( VAR_2 , VAR_3 ) ; return result ; }",private TYPE_3 METHOD_1 ( TYPE_2 VAR_1 ) { return ( ( TYPE_3 ) ( VAR_1 . METHOD_2 ( this ) ) ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4914
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( t ) != null ) { TYPE_2 VAR_2 = t ; t = null ; VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; } else if ( VAR_3 ) { java.lang.System.out.println ( STRING_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { t . METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Move FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete Literal', 'Delete Assignment', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete FieldRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If']",4915
public void METHOD_1 ( java.lang.Throwable VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_3 = new TYPE_2 ( this ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) ; VAR_4 . show ( ) ; },public void METHOD_1 ( java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_2 ( this ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) ; VAR_4 . show ( ) ; },"['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",4918
protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( getIntent ( ) . METHOD_2 ( VAR_2 ) ) ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; },protected TYPE_1 METHOD_1 ( ) { return new TYPE_3 ( ) ; },"['Insert ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4919
"public void METHOD_1 ( ) { METHOD_2 ( false ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; METHOD_3 ( intent ) ; }",public void METHOD_1 ( ) { METHOD_2 ( false ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4922
"public void setText ( java.lang.String text ) { java.lang.String VAR_1 = VAR_2 . replaceAll ( STRING_1 , STRING_2 ) ; this . VAR_3 = TYPE_1 . METHOD_1 ( VAR_1 ) ; }",public void setText ( java.lang.String text ) { this . VAR_3 = TYPE_1 . METHOD_1 ( text ) ; },"['Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",4923
public java.lang.Object METHOD_1 ( ) { java.lang.Object obj = VAR_1 . METHOD_1 ( ) ; return obj == null ? null : ( ( TYPE_1 ) ( obj ) ) . get ( ) ; },public java.lang.Object METHOD_1 ( ) { return ( VAR_1 . METHOD_1 ( ) ) == null ? null : ( ( TYPE_1 ) ( VAR_1 . METHOD_1 ( ) ) ) . get ( ) ; },"['Insert Invocation', 'Move Invocation', 'Update Invocation', 'Move Invocation', 'Move TypeReference', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4924
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ; TYPE_3 VAR_3 = METHOD_4 ( ) ; if ( VAR_3 != null ) { VAR_4 . add ( VAR_3 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ; VAR_4 . add ( METHOD_4 ( ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4925
"public void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_2 ( STRING_1 , VAR_1 ) ; METHOD_3 ( ( - INT_1 ) , intent ) ; java.lang.System.out.println ( STRING_2 ) ; super . METHOD_1 ( ) ; METHOD_4 ( ) ; }",public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",4927
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { int VAR_4 = ( VAR_5 . y ) + ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; VAR_5 . set ( VAR_5 . x , VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { VAR_5 . set ( VAR_5 . x , ( ( VAR_5 . y ) + ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4929
"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; METHOD_3 ( VAR_1 ) ; this . METHOD_4 ( ) ; }",public void METHOD_1 ( android.view.View view ) { this . METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4930
"public int METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getString ( VAR_3 ) ; java.lang.String VAR_4 = VAR_5 ; java.lang.String VAR_6 = VAR_7 . getString ( VAR_1 , VAR_4 ) ; return java.lang.Integer . METHOD_2 ( VAR_6 ) ; }","public int METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getString ( VAR_3 ) ; int VAR_4 = VAR_5 ; return VAR_7 . getInt ( VAR_1 , VAR_4 ) ; }","['Update TypeReference', 'Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4931
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 , null , null , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_1 = VAR_3 . METHOD_5 ( VAR_1 ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 = VAR_3 . METHOD_5 ( VAR_1 ) ; return VAR_1 ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Literal', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",4933
private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 = VAR_4 ; },private void METHOD_1 ( ) { VAR_3 = VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead']",4934
"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 . put ( VAR_3 , VAR_1 ) ; VAR_4 = new TYPE_2 ( VAR_5 ) ; }","public void METHOD_1 ( ) { VAR_2 . put ( VAR_3 , VAR_1 ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_5 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Delete FieldWrite', 'Delete ConstructorCall', 'Delete Assignment', 'Delete FieldWrite', 'Delete Assignment']",4935
"public void METHOD_1 ( ) { java.io.File file = TYPE_1 . METHOD_2 ( STRING_1 , null ) ; if ( file != null ) VAR_1 . setText ( file . METHOD_3 ( ) ) ; }","public void METHOD_1 ( ) { VAR_1 . setText ( TYPE_1 . METHOD_2 ( STRING_1 , null ) . METHOD_3 ( ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",4936
public byte [ ] METHOD_1 ( byte [ ] key ) { TYPE_1 VAR_1 = this . METHOD_2 ( key ) ; if ( VAR_1 == null ) return null ; return VAR_2 . array ( ) ; },public byte [ ] METHOD_1 ( byte [ ] key ) { return this . METHOD_2 ( key ) . array ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",4937
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String str = getData ( VAR_1 ) . getString ( STRING_1 ) ; if ( str != null ) { return str ; } return STRING_2 ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return getData ( VAR_1 ) . getString ( STRING_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete FieldRead']",4938
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { java.lang.String VAR_3 = ( ( java.lang.String ) ( VAR_1 . METHOD_3 ( ) ) ) ; VAR_4 . put ( VAR_5 , VAR_3 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . put ( VAR_5 , ( ( java.lang.String ) ( VAR_1 . METHOD_3 ( ) ) ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Block', 'Delete If']",4939
"public void METHOD_1 ( android.view.View VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_3 ( VAR_5 ) ; } } }","public void METHOD_1 ( android.view.View VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { VAR_4 . METHOD_2 ( ) . METHOD_3 ( VAR_5 ) ; } }","['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4940
public java.util.HashSet < TYPE_1 > METHOD_1 ( ) { java.util.HashSet < TYPE_1 > result = new java.util.HashSet < TYPE_1 > ( ) ; result . METHOD_2 ( VAR_1 ) ; result . METHOD_2 ( VAR_2 . values ( ) ) ; return result ; },public java.util.HashSet < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",4942
"public void update ( ) throws java.io.IOException , java.lang.ClassNotFoundException , TYPE_1 , TYPE_2 { boolean data = this . METHOD_1 ( ) ; if ( data ) { this . METHOD_2 ( ) ; this . METHOD_3 ( ) ; } }","public void update ( ) throws java.io.IOException , java.lang.ClassNotFoundException , TYPE_1 , TYPE_2 { if ( this . METHOD_1 ( ) ) { this . METHOD_2 ( ) ; this . METHOD_3 ( ) ; } }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4943
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String result = TYPE_2 . METHOD_2 ( STRING_1 ) ; if ( result . METHOD_3 ( STRING_2 ) ) { VAR_2 . METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_4 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",4944
public void METHOD_1 ( int id ) { if ( VAR_1 . contains ( id ) ) { int index = VAR_2 . METHOD_2 ( id ) ; VAR_1 . remove ( index ) ; } },public void METHOD_1 ( int id ) { if ( VAR_1 . contains ( id ) ) VAR_1 . remove ( id ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4945
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . assertThat ( VAR_3 . result ( ) , TYPE_2 . METHOD_2 ( INT_1 ) ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",4947
public static TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_2 min = new TYPE_2 ( ) ; min . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ; return min ; },public static TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { return new TYPE_2 ( ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ; },"['Move Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4948
"public void delete ( java.lang.String VAR_1 , java.lang.Long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; VAR_5 . delete ( VAR_3 ) ; }","public void delete ( java.lang.String VAR_1 , java.lang.Long VAR_2 ) { VAR_5 . delete ( VAR_1 , VAR_2 ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4949
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_4 ) ; VAR_4 . METHOD_2 ( ) . METHOD_3 ( VAR_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { VAR_4 . METHOD_2 ( ) . METHOD_3 ( VAR_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",4951
"public void METHOD_1 ( int VAR_1 ) { float VAR_2 = ( ( ( float ) ( VAR_1 ) ) / INT_1 ) * ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_2 , VAR_2 ) ; }","public void METHOD_1 ( int VAR_1 ) { float VAR_2 = ( ( float ) ( VAR_1 ) ) / INT_1 ; VAR_4 . METHOD_2 ( VAR_2 , VAR_2 ) ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",4952
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ; METHOD_5 ( ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String value = VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; VAR_2 . METHOD_2 ( value ) ; METHOD_5 ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",4953
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( true ) ; },public void METHOD_1 ( ) { new TYPE_1 ( VAR_2 ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",4954
"private TYPE_1 getType ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = getType ( VAR_1 . METHOD_1 ( ) ) ; VAR_2 . METHOD_2 ( this , VAR_1 ) ; return VAR_2 ; }",private TYPE_1 getType ( TYPE_2 VAR_1 ) { return getType ( VAR_1 . METHOD_1 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4955
public java.util.List < TYPE_1 > METHOD_1 ( long VAR_1 ) { int count = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( count == 0 ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } else { return VAR_2 . METHOD_3 ( VAR_1 ) ; } },public java.util.List < TYPE_1 > METHOD_1 ( long VAR_1 ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Move Return', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",4958
"public static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < TYPE_2 > VAR_1 , java.lang.Class < ? > target ) { TYPE_1 < TYPE_2 > VAR_2 = new TYPE_1 < TYPE_2 > ( ) ; TYPE_4 . METHOD_1 ( VAR_1 , target , VAR_2 ) ; return VAR_2 ; }","public static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < TYPE_2 > VAR_1 , java.lang.Class < ? > target ) { return TYPE_4 . METHOD_1 ( VAR_1 , target , new TYPE_1 < TYPE_2 > ( ) ) ; }","['Move Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4959
protected void METHOD_1 ( java.lang.Void VAR_1 ) { VAR_2 . METHOD_2 ( ) ; final TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_4 . METHOD_3 ( VAR_5 ) ) ) ; VAR_3 . METHOD_4 ( VAR_6 ) ; VAR_7 . setEnabled ( true ) ; },protected void METHOD_1 ( java.lang.Void VAR_1 ) { VAR_2 . METHOD_2 ( ) ; final android.widget.Button VAR_3 = ( ( android.widget.Button ) ( METHOD_3 ( VAR_5 ) ) ) ; VAR_3 . METHOD_4 ( VAR_6 ) ; VAR_7 . setEnabled ( true ) ; },"['Update TypeReference', 'Update TypeReference', 'Update TypeAccess']",4960
"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { java.util.ArrayList < java.lang.String > VAR_2 = METHOD_2 ( null ) ; VAR_3 . METHOD_3 ( VAR_4 . get ( position ) ) ; }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { VAR_3 . METHOD_3 ( VAR_4 . get ( position ) ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete Literal', 'Delete Invocation', 'Delete LocalVariable']",4961
"private java.lang.String date ( java.lang.String x , java.util.Calendar VAR_1 ) throws TYPE_1 { java.util.Calendar VAR_2 = METHOD_1 ( VAR_1 ) ; java.util.Date date = VAR_3 . date ( x , VAR_2 ) ; return VAR_4 . format ( date ) ; }","private java.lang.String date ( java.lang.String x , java.util.Calendar VAR_1 ) throws TYPE_1 { return VAR_4 . format ( VAR_3 . date ( x , METHOD_1 ( VAR_1 ) ) . getTime ( ) ) ; }","['Insert Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",4962
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( ) ; new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { new TYPE_2 ( ) ; },"['Update ConstructorCall', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",4963
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { int VAR_4 = ( VAR_5 . x ) + ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; VAR_5 . set ( VAR_4 , VAR_5 . y ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { VAR_5 . set ( ( ( VAR_5 . x ) + ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) , VAR_5 . y ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4964
"public boolean METHOD_1 ( ) { return ( ( boolean ) ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_1 , true ) ) ) ) ; }","public boolean METHOD_1 ( ) { java.lang.Boolean value = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_1 , true ) ) ) ; return ( ( boolean ) ( value ) ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Move TypeReference']",4965
"private void METHOD_1 ( ) { java.lang.String VAR_1 = java.lang.String.format ( STRING_1 , toString ( ) ) ; new java.lang.Thread ( new TYPE_1 ( ) { public void METHOD_2 ( ) { METHOD_3 ( ) ; } } , VAR_1 ) . start ( ) ; }",private void METHOD_1 ( ) { new java.lang.Thread ( new TYPE_1 ( ) { public void METHOD_2 ( ) { METHOD_3 ( ) ; } } ) . start ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",4966
public java.lang.String get ( ) { return METHOD_1 ( METHOD_2 ( context ) . get ( 0 ) ) ; },public java.lang.String get ( ) { java.lang.String result = METHOD_2 ( context ) . get ( 0 ) ; METHOD_1 ( result ) ; return result ; },"['Insert LocalVariable', 'Insert Invocation', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete Invocation']",4968
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) . add ( STRING_1 ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; },"['Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",4969
public synchronized boolean METHOD_1 ( ) { boolean VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 ) { VAR_2 . METHOD_1 ( ) ; } return VAR_1 ; },public synchronized void METHOD_1 ( ) { if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_2 . METHOD_1 ( ) ; } },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",4970
"public static void METHOD_1 ( TYPE_1 item , java.lang.String VAR_1 , java.lang.String name ) { java.lang.String VAR_2 = ( ( VAR_3 . toLowerCase ( ) ) + CHAR_1 ) + name ; item . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_1 ( item , VAR_2 ) ; }","public static void METHOD_1 ( TYPE_1 item , java.lang.String VAR_1 , java.lang.String name ) { item . METHOD_2 ( ( ( ( VAR_3 . toLowerCase ( ) ) + CHAR_1 ) + name ) ) ; TYPE_2 . METHOD_1 ( item , name ) ; }","['Move BinaryOperator', 'Update VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4971
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 ; METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) , new TYPE_3 ( ) , true ) ; }","public void METHOD_1 ( ) { METHOD_2 ( TYPE_2 . METHOD_3 ( false ) , new TYPE_3 ( ) , true ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",4972
"public static void METHOD_1 ( ) { VAR_1 = STRING_1 ; java.util.HashMap < java.lang.String , java.lang.String > VAR_2 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; }",public static void METHOD_1 ( ) { VAR_1 = STRING_1 ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4976
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String query = ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ; return VAR_4 . query ( query , new java.lang.Object [ ] { VAR_1 } , new TYPE_2 ( ) ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String query = ( VAR_2 ) + STRING_1 ; return VAR_4 . query ( query , new java.lang.Object [ ] { VAR_1 } , new TYPE_2 ( ) ) ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",4979
private int METHOD_1 ( int [ ] VAR_1 ) { int VAR_2 = 0 ; for ( int VAR_3 : VAR_1 ) { VAR_2 += VAR_3 ; } return VAR_2 ; },"private int METHOD_1 ( int [ ] VAR_1 , int start ) { int VAR_2 = start ; for ( int VAR_3 : VAR_1 ) { VAR_2 += VAR_3 ; } return VAR_2 ; }","['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead', 'Delete Literal']",4981
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 value = new TYPE_3 ( VAR_1 . METHOD_1 ( ) ) ; return METHOD_2 ( value ) ; },public TYPE_3 METHOD_1 ( ) throws TYPE_2 { return new TYPE_3 ( VAR_1 . METHOD_1 ( ) ) ; },"['Update TypeReference', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",4983
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; new java.lang.Thread ( VAR_2 ) . METHOD_3 ( ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation']",4984
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { return null ; } return VAR_2 . METHOD_1 ( ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . get ( VAR_1 ) . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",4985
"public void METHOD_1 ( android.view.View view ) { VAR_1 = false ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( intent , VAR_3 , VAR_4 ) ; METHOD_3 ( ) ; }",public void METHOD_1 ( android.view.View view ) { VAR_1 = false ; METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",4986
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; java.lang.String VAR_3 = VAR_4 . getName ( VAR_5 ) ; assertEquals ( STRING_2 , VAR_3 ) ; }",public void METHOD_1 ( ) throws java.lang.Exception { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",4987
public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; if ( index > 0 ) VAR_2 . remove ( index ) ; },public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { VAR_2 . remove ( METHOD_2 ( VAR_1 ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",4988
private java.lang.String id ( java.lang.String data ) { java.lang.String VAR_1 = data ; return VAR_1 ; },private java.lang.String id ( java.lang.String data ) { return data ; },"['Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4991
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = getContext ( ) ; if ( VAR_2 == null ) return ; TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_4 . METHOD_3 ( VAR_2 , VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_3 . METHOD_2 ( getContext ( ) , VAR_3 ) ; TYPE_4 . METHOD_3 ( getContext ( ) , VAR_4 ) ; }","['Move Invocation', 'Insert Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete VariableRead']",4992
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_2 ( STRING_1 ) ; java.util.Date VAR_3 = java.util.Calendar.getInstance ( ) . getTime ( ) ; this . VAR_1 = VAR_4 . format ( VAR_3 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_2 ( STRING_1 ) ; java.util.Date VAR_3 = java.util.Calendar.getInstance ( ) . getTime ( ) ; java.lang.String VAR_1 = VAR_4 . format ( VAR_3 ) ; this . VAR_1 = VAR_1 ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",4993
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . query ( VAR_2 , null , ( ( VAR_3 ) + STRING_1 ) , new java.lang.String [ ] { VAR_1 } , null , null , null ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 c = METHOD_2 ( ) . query ( VAR_2 , null , ( ( VAR_3 ) + STRING_1 ) , new java.lang.String [ ] { VAR_1 } , null , null , null ) ; return c ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",4994
public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",4995
"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; this . METHOD_2 ( VAR_1 ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation']",4997
private void METHOD_1 ( TYPE_1 event ) { TYPE_2 c = new TYPE_2 ( ) ; java.lang.String VAR_1 = VAR_2 . getText ( ) ; java.lang.System.out.println ( STRING_1 ) ; },private void METHOD_1 ( TYPE_1 event ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",4998
"public void METHOD_1 ( float VAR_1 , boolean VAR_2 ) { float VAR_3 = ( VAR_4 ) * VAR_1 ; METHOD_2 ( VAR_3 , VAR_2 ) ; }","public void METHOD_1 ( float VAR_1 , boolean VAR_2 ) { METHOD_2 ( ( ( VAR_4 ) * VAR_1 ) , VAR_2 ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",4999
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 . add ( VAR_4 ) ; VAR_3 . add ( VAR_5 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",5000
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( STRING_1 , temp ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( intent ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",5001
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) ) ; TYPE_4 VAR_3 = new TYPE_4 ( this , VAR_2 ) ; METHOD_3 ( VAR_3 ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_4 VAR_3 = new TYPE_4 ( this ) ; METHOD_3 ( VAR_3 ) ; },"['Update ConstructorCall', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",5002
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( ""id"" , java.lang.String . METHOD_3 ( id ) ) ; METHOD_4 ( intent ) ; METHOD_5 ( ) ; }",public void METHOD_1 ( android.view.View view ) { METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5003
"public void METHOD_1 ( ) { TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_1 = ( i ) - > i + 1 ; VAR_2 . assertEquals ( java.lang.Integer . METHOD_2 ( INT_1 ) , VAR_1 . METHOD_3 ( INT_2 ) ) ; }","public void METHOD_1 ( ) { TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_1 = 1 ; VAR_2 . assertEquals ( java.lang.Integer . METHOD_2 ( INT_1 ) , VAR_1 . METHOD_3 ( INT_2 ) ) ; }","['Move Literal', 'Delete FieldWrite', 'Delete UnaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",5004
"private android.view.View METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( getContext ( ) . METHOD_2 ( VAR_3 ) ) ) ; return VAR_2 . METHOD_3 ( VAR_4 , VAR_1 , false ) ; }","private android.view.View METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( getContext ( ) . METHOD_2 ( VAR_3 ) ) ) ; android.view.View view = VAR_2 . METHOD_3 ( VAR_4 , VAR_1 , false ) ; return view ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",5007
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; VAR_3 . info ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { },"['Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation']",5008
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 class ) ; VAR_1 . METHOD_1 ( args ) ; },"public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( VAR_2 class , args ) ; }","['Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",5010
public boolean METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 tmp = new TYPE_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( tmp ) ; return VAR_2 . equals ( VAR_1 ) ; },public boolean METHOD_1 ( ) { return VAR_2 . equals ( VAR_1 ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5012
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( true ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( this ) ; VAR_2 . METHOD_3 ( true ) ; },"['Insert ConstructorCall', 'Insert ThisAccess', 'Delete TypeAccess', 'Delete Invocation']",5014
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View VAR_3 = TYPE_3 . METHOD_2 ( VAR_4 ) . METHOD_3 ( VAR_5 , null ) ; TYPE_1 VAR_6 = new TYPE_1 ( VAR_3 , this , this ) ; return VAR_6 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View VAR_3 = TYPE_3 . METHOD_2 ( VAR_4 ) . METHOD_3 ( VAR_5 , VAR_1 , false ) ; return new TYPE_1 ( VAR_3 , this , this ) ; }","['Move ConstructorCall', 'Insert VariableRead', 'Update Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5015
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_3 ( VAR_3 . replace ( STRING_1 , this . getId ( ) ) , null , TYPE_4 . METHOD_2 ( VAR_1 ) ) ; TYPE_5 response = VAR_2 . METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_3 ( VAR_3 . replace ( STRING_1 , this . getId ( ) ) , null , TYPE_4 . METHOD_2 ( VAR_1 ) ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",5018
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . getName ( ) ; return VAR_2 ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_3 . getName ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5020
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = getContext ( VAR_1 ) ; if ( VAR_2 == null ) return null ; return VAR_2 . METHOD_2 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return getContext ( VAR_1 ) . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",5021
"private static float METHOD_1 ( int a , int b ) { int result = a / b ; return result ; }","private static float METHOD_1 ( int a , int b ) { return a / b ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5022
public TYPE_1 METHOD_1 ( int id ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; TYPE_4 event = VAR_1 . METHOD_2 ( id ) ; return event . METHOD_3 ( ) ; },public TYPE_1 METHOD_1 ( int id ) { TYPE_4 event = METHOD_2 ( id ) ; return event . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",5023
public void METHOD_1 ( float VAR_1 ) { this . VAR_1 = VAR_1 ; TYPE_1 VAR_2 = METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; },public void METHOD_1 ( float VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_3 . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5024
"private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_4 ) ; boolean result = VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_5 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; return result ; }","private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_4 ) ; VAR_5 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; return VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5025
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_1 > list = VAR_2 . get ( VAR_3 ) ; if ( list != null ) { VAR_4 . remove ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_1 > list = VAR_2 . get ( VAR_1 ) ; if ( list != null ) { VAR_4 . remove ( VAR_1 ) ; } },"['Insert VariableRead', 'Delete TypeAccess']",5028
public void METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; int VAR_3 = VAR_2 . METHOD_2 ( ) ; boolean a = true ; },public void METHOD_1 ( ) { METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",5029
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > list = new java.util.ArrayList < TYPE_1 > ( this . VAR_1 . values ( ) ) ; return list ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > list = ( ( java.util.List < TYPE_1 > ) ( this . VAR_1 . values ( ) ) ) ; return list ; },"['Move Invocation', 'Insert TypeReference', 'Insert TypeReference', 'Delete ConstructorCall']",5030
public static TYPE_1 METHOD_1 ( ) { TYPE_2 < TYPE_3 > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; return METHOD_3 ( VAR_3 . METHOD_4 ( TYPE_2 . METHOD_2 ( VAR_2 class ) ) ) ; },public static TYPE_1 METHOD_1 ( ) { return METHOD_3 ( VAR_3 . METHOD_4 ( TYPE_2 . METHOD_2 ( VAR_2 class ) ) ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",5031
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( METHOD_2 ( ) , VAR_3 class ) ; METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { VAR_4 . METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5032
"public void METHOD_1 ( int VAR_1 ) { int VAR_2 = this . VAR_1 ; this . VAR_1 = VAR_1 ; VAR_3 . METHOD_2 ( VAR_4 , VAR_2 , VAR_1 ) ; }",public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5033
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; int i = 0 ; },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",5034
public boolean METHOD_1 ( ) { boolean VAR_1 = VAR_2 . METHOD_1 ( ) ; if ( ( VAR_3 ) != VAR_1 ) METHOD_2 ( VAR_3 ) ; VAR_3 = VAR_1 ; return VAR_3 ; },public boolean METHOD_1 ( ) { VAR_3 = VAR_2 . METHOD_1 ( ) ; METHOD_2 ( VAR_3 ) ; return VAR_3 ; },"['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete VariableRead']",5037
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.String data = STRING_1 ; boolean VAR_2 = VAR_1 . METHOD_1 ( data ) ; if ( VAR_2 ) java.lang.System.out.println ( STRING_2 ) ; else java.lang.System.out.println ( STRING_3 ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",5038
"double METHOD_1 ( double number ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( CHAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 , VAR_1 ) ; return java.lang.Double . METHOD_4 ( VAR_3 . format ( number ) ) ; }",double METHOD_1 ( double number ) { TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 ) ; return java.lang.Double . METHOD_4 ( VAR_3 . format ( number ) ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",5039
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 . main ) ; android.widget.Button VAR_3 = ( ( android.widget.Button ) ( METHOD_3 ( VAR_4 ) ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 . main ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",5040
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 < TYPE_3 > VAR_2 = new TYPE_2 ( VAR_1 , VAR_3 class ) ; VAR_2 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( VAR_3 class , VAR_2 ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; return VAR_1 ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5041
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; VAR_2 = VAR_3 . getId ( ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( null ) ; },"['Move Invocation', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete TypeAccess', 'Delete Invocation', 'Delete Assignment', 'Delete TypeAccess', 'Delete VariableRead']",5042
"public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = java.lang.String.format ( STRING_1 , VAR_2 . METHOD_2 ( ) . METHOD_1 ( ) ) ; return java.lang.String.format ( STRING_2 , VAR_1 ) . replace ( STRING_3 , ""0"" ) ; }","public java.lang.String METHOD_1 ( ) { return java.lang.String.format ( STRING_1 , VAR_2 . METHOD_2 ( ) . METHOD_1 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",5043
"public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 obj = VAR_2 . METHOD_2 ( VAR_1 , VAR_3 class ) ; return VAR_2 . METHOD_2 ( VAR_4 . get ( STRING_1 ) , VAR_5 class ) ; }","public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; return VAR_2 . METHOD_2 ( VAR_1 , VAR_5 class ) ; }","['Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",5046
public double METHOD_1 ( ) { double VAR_1 = ( VAR_2 ) * INT_1 ; int value = ( ( int ) ( java.lang.Math.round ( VAR_1 ) ) ) ; java.lang.System.out.println ( ( STRING_1 + value ) ) ; return value ; },public double METHOD_1 ( ) { double VAR_1 = ( VAR_2 ) * INT_1 ; return ( ( int ) ( java.lang.Math.round ( VAR_1 ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead']",5047
"public java.util.Collection < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 , java.lang.String arg ) { TYPE_2 event = new TYPE_2 ( arg , VAR_1 ) ; event . METHOD_2 ( ) ; return event . METHOD_3 ( ) ; }","public java.util.Collection < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 , java.lang.String arg ) { return null ; }","['Insert Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5050
public static void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; },public static void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",5051
final java.lang.String METHOD_1 ( boolean [ ] b ) { java.lang.String key = TYPE_1 . METHOD_2 ( b ) ; java.lang.String VAR_1 = VAR_2 . get ( key ) ; return VAR_1 ; },final java.lang.String METHOD_1 ( boolean [ ] b ) { java.lang.String key = TYPE_1 . METHOD_2 ( b ) ; return VAR_2 . get ( key ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5053
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 TYPE_3 = new TYPE_2 ( null ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_2 TYPE_3 = new TYPE_2 ( null ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable']",5056
"public void METHOD_1 ( TYPE_1 msg ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_2 ( msg ) ; VAR_3 . METHOD_3 ( STRING_1 , VAR_2 ) ; }","public void METHOD_1 ( java.lang.String msg ) { VAR_3 . METHOD_3 ( STRING_1 , msg ) ; }","['Move TypeReference', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5057
"public TYPE_1 METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = VAR_2 . METHOD_1 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( STRING_1 ) ; VAR_3 . METHOD_2 ( STRING_2 , VAR_1 ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_3 = new TYPE_1 ( STRING_1 ) ; VAR_3 . METHOD_2 ( STRING_2 , VAR_2 . METHOD_1 ( ) ) ; return VAR_3 ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5059
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.String VAR_3 = java.lang.String . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_3 , VAR_2 ) ; VAR_4 . METHOD_5 ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_4 . METHOD_5 ( VAR_2 ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5061
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; this . VAR_7 = new TYPE_2 ( VAR_1 ) ; }","public void METHOD_1 ( ) { this . VAR_7 = new TYPE_2 ( new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) ; }","['Update ConstructorCall', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5062
"public TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_2 VAR_1 = get ( VAR_2 class ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( VAR_4 . getId ( name ) , VAR_5 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; return response ( VAR_1 , VAR_3 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_2 VAR_1 = get ( VAR_2 class ) ; TYPE_3 VAR_3 = VAR_4 . getId ( name ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; return response ( VAR_1 , VAR_3 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",5063
"public static java.lang.String METHOD_1 ( java.lang.CharSequence VAR_1 , int VAR_2 , java.lang.String VAR_3 ) { java.lang.String VAR_4 = java.lang.String.format ( TYPE_1 . METHOD_2 ( ) , VAR_5 , VAR_6 , VAR_7 , VAR_2 , VAR_3 ) ; return ( VAR_4 + VAR_1 ) + ( VAR_8 ) ; }","public static java.lang.String METHOD_1 ( java.lang.CharSequence VAR_1 , int VAR_2 , java.lang.String VAR_3 ) { java.lang.String VAR_4 = java.lang.String.format ( VAR_5 , VAR_6 , VAR_2 , VAR_3 ) ; java.lang.String result = ( VAR_4 + VAR_1 ) + ( VAR_8 ) ; return result ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move BinaryOperator', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess']",5064
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = METHOD_2 ( ) ; METHOD_1 ( VAR_3 , VAR_1 , VAR_2 ) ; return VAR_3 ; }","public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( METHOD_2 ( ) , VAR_1 , VAR_2 ) ; }","['Update TypeReference', 'Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",5065
"public java.util.List < TYPE_1 > METHOD_1 ( ) { java.net.URL url = TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; return TYPE_2 . METHOD_3 ( url ) ; }",public java.util.List < TYPE_1 > METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5066
public void METHOD_1 ( ) { int a = 1 ; int b = INT_1 ; int a = 0 ; },public void METHOD_1 ( ) { int a = 1 ; int b = INT_1 ; },"['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",5067
"public int [ ] METHOD_1 ( ) throws TYPE_1 , TYPE_2 { int i = getInt ( ) ; return new int [ ] { i , i , i } ; }","public int [ ] METHOD_1 ( ) throws TYPE_1 , TYPE_2 { return new int [ ] { getInt ( ) , getInt ( ) , getInt ( ) } ; }","['Insert Invocation', 'Move Invocation', 'Insert Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",5068
public static void main ( java.lang.String [ ] args ) { TYPE_1 main = new TYPE_1 ( ) ; VAR_1 . init ( ) ; java.lang.System.out.println ( STRING_1 ) ; },public static void main ( java.lang.String [ ] args ) { init ( ) ; },"['Update TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",5069
"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( VAR_1 ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_2 ( intent ) ; }","['Update LocalVariable', 'Update VariableRead']",5070
"public void METHOD_1 ( final TYPE_1 VAR_1 , int position ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . get ( position ) . getName ( ) ) ; VAR_4 . setText ( VAR_2 ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 , int position ) { VAR_4 . setText ( VAR_3 . get ( position ) . getName ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5071
public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) ; VAR_1 . METHOD_4 ( true ) ; VAR_3 . METHOD_5 ( VAR_4 ) . METHOD_6 ( VAR_5 ) ; },public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_3 ( VAR_2 ) ) ) ; VAR_1 . METHOD_4 ( true ) ; VAR_3 . METHOD_5 ( VAR_4 ) . METHOD_6 ( VAR_5 ) ; },['Delete Invocation'],5072
private int METHOD_1 ( ) { int VAR_1 = ( METHOD_2 ( ) ) * INT_1 ; return VAR_1 ; },private int METHOD_1 ( ) { return ( METHOD_2 ( ) ) * INT_1 ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5073
"public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . setEnabled ( false ) ; VAR_3 . setEnabled ( false ) ; VAR_4 . METHOD_2 ( new TYPE_1 ( VAR_5 . METHOD_3 ( INT_1 ) , VAR_1 ) ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . setEnabled ( false ) ; java.util.Random VAR_5 = new java.util.Random ( ) ; VAR_3 . setEnabled ( false ) ; VAR_4 . METHOD_2 ( new TYPE_1 ( VAR_5 . METHOD_3 ( INT_1 ) , VAR_1 ) ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Insert ConstructorCall', 'Insert VariableRead', 'Delete TypeAccess']",5074
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { VAR_3 = TYPE_3 . METHOD_2 ( VAR_4 . getContext ( ) ) . METHOD_3 ( VAR_5 , VAR_1 , false ) ; return new TYPE_1 ( VAR_3 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View VAR_3 = TYPE_3 . METHOD_2 ( VAR_4 . getContext ( ) ) . METHOD_3 ( VAR_5 , VAR_1 , false ) ; return new TYPE_1 ( VAR_3 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",5075
"public void METHOD_1 ( java.net.URL url , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( STRING_1 , INT_1 ) ; METHOD_3 ( ) ; }","public void METHOD_1 ( java.net.URL url , TYPE_1 VAR_1 ) { }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",5076
public static void main ( java.lang.String [ ] args ) { int VAR_1 ; int VAR_2 ; },public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( ) ; },"['Insert Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable']",5077
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; android.content.Intent i = new android.content.Intent ( this , VAR_3 class ) ; METHOD_3 ( i ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5079
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < TYPE_2 > list = VAR_2 . METHOD_2 ( VAR_1 ) ; return TYPE_1 . METHOD_3 ( list ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5082
public java.lang.Double METHOD_1 ( ) { java.lang.Object value = VAR_1 . get ( VAR_2 ) ; return TYPE_1 . METHOD_2 ( value ) ; },public java.lang.Float METHOD_1 ( ) { return ( ( java.lang.Float ) ( VAR_1 . get ( VAR_2 ) ) ) ; },"['Update TypeReference', 'Move Invocation', 'Insert TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5085
private void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; },private void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Insert Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess']",5087
public boolean METHOD_1 ( java.lang.String string ) { java.lang.String VAR_1 = METHOD_2 ( ) ; return ( ! ( VAR_2 . isEmpty ( VAR_1 ) ) ) && ( VAR_3 . contains ( VAR_1 ) ) ; },public boolean METHOD_1 ( java.lang.String string ) { return VAR_3 . contains ( METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",5089
"public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_3 . add ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_5 . METHOD_3 ( ) , VAR_2 ) ; update ( 0 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . add ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_5 . METHOD_3 ( ) ) ; update ( 0 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5090
"public java.lang.String METHOD_1 ( ) { java.lang.String filePath = ( ( METHOD_2 ( ) ) + STRING_1 ) + ( METHOD_3 ( ) ) ; return VAR_1 . replaceAll ( VAR_2 , STRING_2 ) ; }",public java.lang.String METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) + STRING_1 ) + ( METHOD_3 ( ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",5091
public void METHOD_1 ( ) { java.lang.Double a = METHOD_2 ( ) ; java.lang.Integer i = java.lang.Integer . METHOD_3 ( VAR_1 . intValue ( ) ) ; VAR_2 . setText ( ( i + STRING_1 ) ) ; },public void METHOD_1 ( ) { VAR_2 . setText ( ( ( METHOD_2 ( ) ) + STRING_1 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5092
public void METHOD_1 ( android.view.View view ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_4 ( VAR_3 ) ) ) ; VAR_2 . METHOD_5 ( METHOD_6 ( ) . METHOD_7 ( ) ) ; },public void METHOD_1 ( android.view.View view ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",5093
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 target , TYPE_3 parameters ) { TYPE_4 VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 ) ; return VAR_2 == null ? null : new TYPE_6 ( VAR_2 , target , parameters ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 target , TYPE_3 parameters ) { return ( TYPE_5 . METHOD_2 ( VAR_1 ) ) == null ? null : new TYPE_6 ( TYPE_5 . METHOD_2 ( VAR_1 ) , VAR_1 , target , parameters ) ; }","['Insert Invocation', 'Move Invocation', 'Update VariableRead', 'Insert TypeAccess', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5094
public boolean METHOD_1 ( TYPE_1 label ) { java.util.List < TYPE_2 < TYPE_3 > > VAR_1 = VAR_2 . get ( label ) ; return ( VAR_1 != null ) && ( ! ( VAR_3 . isEmpty ( ) ) ) ; },public boolean METHOD_1 ( TYPE_1 label ) { if ( ( ( VAR_2 . get ( label ) ) != null ) && ( VAR_2 . get ( label ) . isEmpty ( ) ) ) return false ; return true ; },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert BinaryOperator', 'Insert Invocation', 'Insert Return', 'Insert Invocation', 'Move Literal', 'Move Invocation', 'Insert Literal', 'Insert TypeAccess', 'Insert VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",5095
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = METHOD_3 ( ) ; java.lang.String event = STRING_1 ; TYPE_1 . METHOD_4 ( ( ( VAR_3 + STRING_2 ) + event ) ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",5096
"private static void METHOD_1 ( TYPE_1 [ ] VAR_1 , java.lang.String VAR_2 , int id ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; boolean VAR_4 = VAR_3 . METHOD_2 ( id , VAR_2 ) ; java.lang.System.out.println ( STRING_1 ) ; }","private static void METHOD_1 ( TYPE_1 [ ] VAR_1 , java.lang.String VAR_2 ) { }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",5097
"public boolean remove ( TYPE_1 item ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 . getData ( ) , VAR_3 , null ) ; return VAR_2 . remove ( item , VAR_1 ) ; }",public boolean remove ( TYPE_1 item ) { return VAR_2 . remove ( item ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",5099
"private void METHOD_1 ( java.lang.Long VAR_1 ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_4 = ( VAR_2 + CHAR_1 ) + ( VAR_5 ) ; VAR_6 . METHOD_3 ( new TYPE_1 ( VAR_5 , VAR_2 , VAR_4 ) ) ; }","private void METHOD_1 ( java.lang.Long VAR_1 ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_6 . METHOD_3 ( new TYPE_1 ( VAR_5 , VAR_2 ) ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",5101
public void remove ( java.lang.String id ) { TYPE_1 VAR_1 = VAR_2 . remove ( id ) ; if ( VAR_1 != null ) VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; },public void remove ( java.lang.String id ) { VAR_2 . remove ( id ) ; METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",5102
"public void METHOD_1 ( ) throws TYPE_1 { METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_1 = METHOD_3 ( METHOD_4 ( VAR_2 class , STRING_2 , VAR_3 . String class ) , METHOD_5 ( ) ) ; VAR_4 . execute ( ) ; METHOD_6 ( STRING_1 ) ; }","public void METHOD_1 ( ) throws TYPE_1 { METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_1 = METHOD_3 ( METHOD_4 ( STRING_2 , VAR_3 . String class ) , METHOD_5 ( ) ) ; VAR_4 . execute ( ) ; METHOD_6 ( STRING_1 ) ; }",['Delete TypeAccess'],5103
"public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_4 . METHOD_4 ( VAR_2 , VAR_1 ) ) { VAR_4 . METHOD_1 ( VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_4 . METHOD_4 ( VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) , VAR_1 ) ) { VAR_4 . METHOD_1 ( VAR_1 ) ; } }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5104
"protected java.lang.Void METHOD_1 ( java.lang.Void ... params ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 class ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; VAR_5 . METHOD_4 ( STRING_1 ) ; return null ; }",protected java.lang.Void METHOD_1 ( java.lang.Void ... params ) { VAR_4 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( STRING_1 ) ; return null ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5105
"public TYPE_1 build ( ) { boolean VAR_1 = ( VAR_2 ) != null ; return new TYPE_1 ( VAR_3 , VAR_2 , VAR_1 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 ) ; }","public TYPE_1 build ( ) { return new TYPE_1 ( VAR_3 , VAR_2 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",5106
public java.lang.CharSequence METHOD_1 ( java.lang.Object VAR_1 ) { return ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) ; },public java.lang.CharSequence METHOD_1 ( java.lang.Object VAR_1 ) { java.lang.String str = ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) ; return str ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",5108
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_3 VAR_3 = VAR_4 . getValue ( VAR_5 class ) ; VAR_6 . add ( VAR_3 ) ; VAR_7 . METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { VAR_6 . add ( VAR_4 . getValue ( VAR_5 class ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",5109
public java.lang.String toString ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( STRING_1 ) ; VAR_2 . append ( METHOD_1 ( ) ) . append ( STRING_2 ) . append ( METHOD_2 ( ) ) . append ( STRING_1 ) ; return VAR_2 . toString ( ) ; },public java.lang.String toString ( ) { java.lang.StringBuffer VAR_1 = new java.lang.StringBuffer ( STRING_1 ) ; VAR_2 . append ( ( ( ( ( METHOD_1 ( ) ) + STRING_2 ) + ( METHOD_2 ( ) ) ) + STRING_1 ) ) ; return VAR_2 . toString ( ) ; },"['Move Invocation', 'Update TypeReference', 'Update ConstructorCall', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert FieldRead', 'Insert BinaryOperator', 'Move Invocation', 'Move Invocation', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",5111
public boolean METHOD_1 ( int id ) { boolean VAR_1 = VAR_2 . METHOD_1 ( id ) ; return VAR_1 ; },public boolean METHOD_1 ( int id ) { return VAR_2 . METHOD_1 ( id ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5113
public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_2 = VAR_1 ; java.io.File VAR_3 = new java.io.File ( VAR_2 ) ; if ( ! ( VAR_3 . METHOD_2 ( ) ) ) VAR_3 . METHOD_3 ( ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_2 = VAR_1 ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",5115
public TYPE_1 METHOD_1 ( ) { TYPE_1 result = this . VAR_1 . METHOD_1 ( this . VAR_2 ) ; TYPE_2 . METHOD_2 ( ) . METHOD_3 ( this . VAR_2 ) ; return result ; },public TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( this . VAR_2 ) ; return this . VAR_1 . METHOD_1 ( this . VAR_2 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5116
public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; java.util.List < TYPE_1 > VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; VAR_3 . get ( 1 ) . METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5117
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; return ( VAR_2 != null ) && ( VAR_2 . METHOD_1 ( ) ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 ) . METHOD_1 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",5119
"protected java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( java.lang.String . METHOD_4 ( this ) , ( STRING_1 + VAR_1 ) ) ; METHOD_5 ( ) . METHOD_1 ( ) ; return VAR_1 ; }",protected void METHOD_1 ( ) { METHOD_5 ( ) . METHOD_1 ( ) ; },"['Update TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead', 'Delete Return']",5122
public void METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = VAR_3 . remove ( VAR_1 ) ; VAR_4 . info ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . remove ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",5126
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 . getId ( ) ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",5127
public void METHOD_1 ( android.view.View view ) { VAR_1 . METHOD_2 ( ) ; android.content.Intent VAR_2 = new android.content.Intent ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_2 . METHOD_4 ( VAR_5 ) ; METHOD_5 ( VAR_2 ) ; },public void METHOD_1 ( android.view.View view ) { VAR_1 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5129
"public boolean METHOD_1 ( java.lang.String VAR_1 ) { boolean VAR_2 = this . METHOD_2 ( this . VAR_3 , VAR_1 ) ; if ( VAR_2 ) { this . METHOD_3 ( ) ; } return VAR_2 ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } },"['Update TypeReference', 'Insert BinaryOperator', 'Insert FieldRead', 'Insert Literal', 'Update Invocation', 'Insert TypeAccess', 'Move VariableRead', 'Delete TypeReference', 'Delete ThisAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Return']",5130
"public synchronized TYPE_1 put ( TYPE_2 key , TYPE_1 value ) { TYPE_3 VAR_1 = METHOD_1 ( key ) ; VAR_1 . METHOD_2 ( ) ; return VAR_2 . put ( key , value ) ; }","public synchronized TYPE_1 put ( TYPE_2 key , TYPE_1 value ) { METHOD_1 ( key ) ; return VAR_2 . put ( key , value ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5132
private java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return null ; } return VAR_1 . METHOD_1 ( ) ; },private java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) { return null ; } return METHOD_2 ( ) . METHOD_1 ( ) ; },"['Move Invocation', 'Insert Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",5133
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5134
"public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) ; android.content.Intent intent = new android.content.Intent ( VAR_3 ) ; intent . METHOD_4 ( STRING_3 ) ; METHOD_5 ( intent , VAR_4 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) ; }","['Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",5135
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; TYPE_3 message = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( message ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5136
protected void METHOD_1 ( java.util.List < TYPE_1 < ? > > VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( TYPE_3 . METHOD_2 ( STRING_1 ) ) ; VAR_3 . add ( new TYPE_4 ( ) ) ; },protected void METHOD_1 ( java.util.List < TYPE_1 < ? > > VAR_1 ) { VAR_3 . add ( new TYPE_4 ( ) ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable']",5138
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_2 TYPE_3 = new TYPE_2 ( ) ; TYPE_3 . METHOD_3 ( true ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",5139
"public void METHOD_1 ( android.view.View VAR_1 ) { int i = VAR_2 . getId ( ) ; if ( i == ( VAR_3 ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_4 class ) ; METHOD_2 ( intent ) ; } }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_4 class ) ; METHOD_2 ( intent ) ; }","['Move LocalVariable', 'Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",5142
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; c . METHOD_2 ( VAR_2 ) ; c . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; c . METHOD_5 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { c . METHOD_2 ( new TYPE_2 ( ) ) ; c . METHOD_3 ( ) ; c . METHOD_5 ( ) ; },"['Move Invocation', 'Update Invocation', 'Update Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",5143
public TYPE_1 METHOD_1 ( int id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( id ) ; VAR_1 . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( int id ) { return VAR_2 . METHOD_1 ( id ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",5145
public static TYPE_1 get ( byte VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; },public static TYPE_1 get ( byte VAR_1 ) { TYPE_1 type = VAR_2 . get ( VAR_1 ) ; return type ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",5146
"public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_3 . setText ( null ) ; TYPE_2 VAR_4 = new TYPE_3 ( ) ; VAR_5 . show ( METHOD_3 ( ) , STRING_1 ) ; }","public void METHOD_1 ( android.view.View view ) { TYPE_2 VAR_4 = new TYPE_3 ( ) ; VAR_5 . show ( METHOD_3 ( ) , STRING_1 ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",5147
private boolean METHOD_1 ( long VAR_1 ) { boolean VAR_2 = VAR_1 > INT_1 ; boolean VAR_3 = ( ( VAR_4 ) == null ) || ( ! ( VAR_4 . METHOD_2 ( ) ) ) ; return ( ( VAR_5 ) && VAR_2 ) && VAR_3 ; },private void METHOD_1 ( ) { },"['Update TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Return']",5148
"public void METHOD_1 ( TYPE_1 msg ) { super . METHOD_1 ( msg ) ; java.lang.String string = VAR_1 . METHOD_2 ( ) ; VAR_2 . i ( STRING_1 , string ) ; METHOD_3 ( string ) ; }",public void METHOD_1 ( TYPE_1 msg ) { super . METHOD_1 ( msg ) ; METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5149
"public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 , VAR_2 ) ; VAR_4 . METHOD_2 ( false ) ; VAR_5 . METHOD_3 ( VAR_4 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; VAR_5 . METHOD_3 ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5150
"public TYPE_1 METHOD_1 ( TYPE_2 item , TYPE_1 VAR_1 ) { TYPE_3 VAR_2 = METHOD_2 ( item ) ; TYPE_1 TYPE_4 = ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( ) ) ) ; VAR_3 . add ( VAR_1 ) ; return TYPE_4 ; }","public TYPE_1 METHOD_1 ( TYPE_2 item , TYPE_1 VAR_1 ) { return null ; }","['Insert Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",5154
"public void METHOD_1 ( java.lang.Long id ) { TYPE_1 query = VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; query . METHOD_4 ( STRING_2 , id ) ; query . METHOD_5 ( ) ; VAR_1 . METHOD_2 ( ) . METHOD_6 ( ) ; }","public void METHOD_1 ( java.lang.Long id ) { TYPE_1 query = VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; query . METHOD_4 ( STRING_2 , id ) ; int result = query . METHOD_5 ( ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",5156
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 node = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_3 . select ( ) ; METHOD_4 ( node ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5157
"public static TYPE_1 METHOD_1 ( int VAR_1 , short VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , TYPE_2 . METHOD_3 ( VAR_3 ) . METHOD_4 ( VAR_2 ) . array ( ) , VAR_4 , true ) ; }","public static TYPE_1 METHOD_1 ( int VAR_1 , short VAR_2 ) { return new TYPE_1 ( VAR_1 , TYPE_2 . METHOD_3 ( VAR_3 ) . METHOD_4 ( VAR_2 ) . array ( ) ) ; }","['Insert ConstructorCall', 'Move VariableRead', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",5160
public void METHOD_1 ( ) { new TYPE_1 ( STRING_1 ) ; },public void METHOD_1 ( ) { java.lang.String name = STRING_1 ; new TYPE_1 ( name ) ; },"['Insert LocalVariable', 'Update ConstructorCall', 'Insert TypeReference', 'Move FieldRead', 'Insert VariableRead']",5161
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_2 ( VAR_3 ) ; METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { android.content.Intent intent = new android.content.Intent ( ) ; METHOD_2 ( VAR_3 , intent ) ; METHOD_3 ( ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Insert ConstructorCall', 'Insert VariableRead']",5162
private static TYPE_1 < TYPE_2 > METHOD_1 ( short VAR_1 ) { TYPE_1 < TYPE_2 > VAR_2 = new TYPE_1 < TYPE_2 > ( ) ; VAR_3 . add ( VAR_1 ) ; return VAR_2 ; },private static TYPE_1 < TYPE_2 > METHOD_1 ( ) { },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Return']",5165
"public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; android.content.Context a = getActivity ( ) ; METHOD_2 ( new TYPE_2 ( getActivity ( ) , VAR_2 ) ) ; METHOD_3 ( ) . METHOD_4 ( null ) ; }","public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; METHOD_2 ( new TYPE_2 ( getActivity ( ) , VAR_2 ) ) ; METHOD_3 ( ) . METHOD_4 ( null ) ; }","['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable']",5166
"public float METHOD_1 ( ) { float VAR_1 = 1.0F - ( ( float ) ( java.lang.Math.pow ( ( 1.0F - ( this . VAR_2 . METHOD_1 ( ) ) ) , this . count ) ) ) ; return VAR_1 ; }","public float METHOD_1 ( ) { return 1.0F - ( ( float ) ( java.lang.Math.pow ( ( 1.0F - ( this . VAR_2 . METHOD_1 ( ) ) ) , this . count ) ) ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5168
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 item , int position ) { java.lang.String c = item . METHOD_2 ( ) ; VAR_2 . setText ( VAR_3 , c ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 item , int position ) { VAR_2 . setText ( VAR_3 , item . METHOD_2 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5169
"private java.lang.String [ ] METHOD_1 ( java.lang.String message ) { java.lang.String VAR_1 = VAR_2 . replace ( METHOD_2 ( message ) , STRING_1 ) ; return VAR_3 . replace ( VAR_4 , STRING_1 ) . split ( STRING_2 ) ; }","private java.lang.String [ ] METHOD_1 ( java.lang.String message ) { return VAR_2 . replace ( METHOD_2 ( message ) , STRING_1 ) . split ( STRING_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",5170
"public static java.lang.String METHOD_1 ( java.lang.String url ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( url ) ; java.lang.String VAR_2 = VAR_3 . toString ( ) . replaceAll ( STRING_1 , STRING_2 ) ; return VAR_2 ; }",public static java.lang.String METHOD_1 ( java.lang.String url ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( url ) ; java.lang.String VAR_2 = VAR_3 . text ( ) ; return VAR_2 ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",5171
"public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { java.lang.String VAR_2 = intent . METHOD_2 ( STRING_1 ) ; java.lang.String VAR_3 = intent . METHOD_2 ( STRING_2 ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { VAR_1 . METHOD_4 ( ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5173
public void delete ( ) { java.util.Vector < TYPE_1 > VAR_1 = new java.util.Vector < TYPE_1 > ( VAR_2 ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_4 . delete ( ) ; } super . delete ( ) ; VAR_2 . METHOD_1 ( ) ; },public void delete ( ) { for ( TYPE_1 VAR_3 : VAR_2 ) { VAR_4 . delete ( ) ; } super . delete ( ) ; VAR_2 . METHOD_1 ( ) ; },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",5175
"public void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; this . METHOD_2 ( VAR_1 ) ; }",public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete VariableRead', 'Delete Invocation']",5176
public void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) . get ( STRING_1 ) . toString ( ) ; VAR_3 . assertNotNull ( VAR_1 ) ; },public void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) . get ( STRING_1 ) ; VAR_3 . assertNotNull ( VAR_1 ) ; },"['Move Invocation', 'Delete Invocation']",5178
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; java.lang.System.out.print ( VAR_3 . toString ( ) ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",5179
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; return VAR_3 . substring ( ( VAR_2 + 1 ) , VAR_3 . length ( ) ) ; }","public java.lang.String METHOD_1 ( ) { return VAR_3 . substring ( VAR_1 . METHOD_2 ( ( STRING_1 + 1 ) ) , VAR_3 . length ( ) ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Move BinaryOperator', 'Insert FieldRead', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5181
private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 path = VAR_2 . get ( VAR_1 . METHOD_2 ( ) ) ; java.io.File f = path . METHOD_3 ( ) ; if ( f . METHOD_4 ( ) ) VAR_3 . delete ( path ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 path = VAR_2 . get ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 . delete ( path ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",5184
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; long VAR_4 = VAR_1 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_2 , VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) { long VAR_4 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_2 , VAR_4 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Invocation']",5185
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_1 . METHOD_4 ( VAR_3 . toString ( ) ) ; VAR_1 . METHOD_5 ( ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_1 . METHOD_4 ( VAR_3 . toString ( ) ) ; },"['Delete VariableRead', 'Delete Invocation']",5186
public boolean METHOD_1 ( TYPE_1 info ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_1 != null ) { return true ; } return false ; },public boolean METHOD_1 ( ) { return true ; },"['Move Return', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",5188
public java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return VAR_2 ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_3 . get ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",5189
public void start ( ) { VAR_1 . start ( ) ; try { TYPE_1 < TYPE_2 > VAR_2 = VAR_3 . METHOD_1 ( ) ; } catch ( java.lang.Exception VAR_4 ) { java.lang.System.err.println ( VAR_4 ) ; } },public void start ( ) { VAR_1 . start ( ) ; try { } catch ( java.lang.Exception VAR_4 ) { java.lang.System.err.println ( VAR_4 ) ; } },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",5190
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 . count = VAR_5 . getInt ( VAR_6 , 0 ) ; VAR_7 . setText ( java.lang.Integer.toString ( VAR_4 . count ) ) ; }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; int count = VAR_5 . getInt ( VAR_6 , 0 ) ; VAR_7 . setText ( java.lang.Integer.toString ( count ) ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead']",5192
public int METHOD_1 ( ) { try { java.lang.Thread . METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 VAR_1 ) { } int count = VAR_2 ; VAR_3 . METHOD_3 ( ) ; return count ; },public int METHOD_1 ( ) { try { java.lang.Thread . METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 VAR_1 ) { } return VAR_2 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",5193
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , null ) ; METHOD_3 ( VAR_4 ) ; return VAR_4 ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_5 , null ) ; METHOD_3 ( view ) ; return view ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess', 'Delete FieldRead']",5194
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( null ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; VAR_1 . METHOD_5 ( ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5195
"public void METHOD_1 ( ) { VAR_1 . info ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ; java.lang.Thread VAR_3 = VAR_4 ; if ( VAR_3 != null ) { VAR_3 . METHOD_3 ( ) ; } }","public void METHOD_1 ( ) { VAR_1 . info ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_3 ( ) ; } }","['Move FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",5196
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( ) ; } VAR_1 . METHOD_3 ( null ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = METHOD_5 ( ) ; super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( ) ; } VAR_1 . METHOD_3 ( null ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; super . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable']",5197
void METHOD_1 ( ) { VAR_1 = METHOD_2 ( INT_1 ) ; double time = INT_2 * ( VAR_2 ) ; double VAR_3 = INT_3 / time ; },void METHOD_1 ( ) { VAR_1 = METHOD_2 ( INT_1 ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete LocalVariable']",5199
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 args = new TYPE_3 ( ) ; args . METHOD_2 ( VAR_2 , VAR_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_3 ( args ) ; return VAR_3 ; }",public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",5201
"public static int [ ] METHOD_1 ( int VAR_1 ) { int VAR_2 = TYPE_1 . METHOD_2 ( TYPE_2 , VAR_1 ) ; return VAR_3 . get ( VAR_2 ) ; }",public static int [ ] METHOD_1 ( int VAR_1 ) { return VAR_3 . get ( VAR_1 ) ; },"['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5202
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( position ) ; METHOD_2 ( VAR_2 , VAR_4 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_3 . get ( position ) , VAR_4 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5203
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String id ) { TYPE_1 context = METHOD_2 ( id ) ; java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; return METHOD_3 ( VAR_1 , context ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String id ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; return METHOD_3 ( VAR_1 , id ) ; }","['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5204
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 . METHOD_2 ( ) ) ; return VAR_3 . status ( VAR_4 ) . METHOD_3 ( VAR_5 . toString ( ) ) . type ( VAR_6 ) . build ( ) ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_3 . status ( VAR_4 ) . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) . type ( VAR_6 ) . build ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",5205
protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; METHOD_2 ( ) ; java.io.InputStream VAR_1 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ; new TYPE_1 ( VAR_2 ) . METHOD_5 ( VAR_1 ) ; },protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; },"['Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete VariableRead', 'Delete Invocation']",5206
"public void METHOD_1 ( ) { TYPE_1 result = METHOD_2 ( STRING_1 ) ; org.testng.Assert.assertEquals ( result . METHOD_3 ( ) , INT_1 ) ; }",public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",5210
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 = ( VAR_4 . METHOD_2 ( ) ) + ( VAR_5 ) ; int VAR_6 = ( VAR_7 . METHOD_2 ( ) ) + ( VAR_8 ) ; return VAR_3 - VAR_6 ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( ( ( VAR_4 . METHOD_2 ( ) ) + ( VAR_5 ) ) - ( VAR_7 . METHOD_2 ( ) ) ) - ( VAR_8 ) ; }","['Update BinaryOperator', 'Move BinaryOperator', 'Insert BinaryOperator', 'Move BinaryOperator', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator']",5212
"public void METHOD_1 ( java.lang.String key , java.lang.String VAR_1 , TYPE_1 VAR_2 ) { java.lang.Object VAR_3 = TYPE_2 . METHOD_2 ( key , VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( null , java.lang.String . METHOD_4 ( VAR_3 ) ) ; } }","public java.lang.Object METHOD_1 ( java.lang.String key , java.lang.Object VAR_1 , TYPE_1 VAR_2 ) { java.lang.Object VAR_3 = TYPE_2 . METHOD_2 ( key , VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( null , VAR_3 ) ; } return VAR_3 ; }","['Update TypeReference', 'Insert Return', 'Update TypeReference', 'Insert VariableRead', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",5215
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { java.util.List < TYPE_4 > list = VAR_3 . METHOD_2 ( ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_3 ( STRING_1 ) ; VAR_4 . METHOD_4 ( list ) ; return VAR_4 ; }","public java.lang.String METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return STRING_1 ; }","['Update TypeReference', 'Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",5216
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < TYPE_1 > list = VAR_2 . METHOD_1 ( VAR_1 ) ; java.lang.System.out.println ( list ) ; return list ; },"['Insert LocalVariable', 'Insert Invocation', 'Insert TypeReference', 'Move Invocation', 'Insert FieldRead', 'Insert VariableRead', 'Insert VariableRead', 'Insert TypeReference', 'Insert TypeAccess']",5218
private java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_4 . METHOD_3 ( ) . toLowerCase ( ) ; return ( VAR_1 + STRING_1 ) + VAR_3 ; },private java.lang.String METHOD_1 ( ) { return ( ( VAR_2 . METHOD_2 ( ) ) + STRING_1 ) + ( VAR_4 . METHOD_3 ( ) . toLowerCase ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",5219
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_4 , VAR_1 ) ; if ( VAR_2 != null ) { VAR_5 = VAR_2 ; METHOD_1 ( VAR_5 ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_5 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_4 , VAR_1 ) ; METHOD_1 ( VAR_5 ) ; }","['Insert Assignment', 'Move Invocation', 'Move FieldWrite', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Assignment', 'Delete Block', 'Delete If']",5223
public TYPE_1 get ( ) { METHOD_1 ( ) ; final TYPE_1 value = this . VAR_1 . get ( ) ; return value ; },public TYPE_1 get ( ) { METHOD_1 ( ) ; final TYPE_1 value = this . VAR_1 . get ( ) . get ( ) ; return value ; },"['Insert Invocation', 'Move Invocation']",5224
"public void METHOD_1 ( ) { TYPE_1 response = TYPE_2 . METHOD_2 ( ( ( VAR_1 ) + ( VAR_2 ) ) , VAR_3 , VAR_4 . String class ) ; VAR_5 . assertEquals ( TYPE_3 . METHOD_3 ( ) , response . METHOD_4 ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 response = TYPE_2 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 . String class ) ; VAR_5 . assertEquals ( TYPE_3 . METHOD_3 ( ) , response . METHOD_4 ( ) ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",5225
"public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.String VAR_1 = STRING_2 ; boolean VAR_2 = true ; boolean result = TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_3 . assertEquals ( VAR_2 , result ) ; }","public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.String VAR_1 = STRING_2 ; boolean VAR_2 = false ; boolean result = TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_3 . assertEquals ( VAR_2 , result ) ; }",['Update Literal'],5226
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( INT_2 , VAR_2 , FLOAT_1 ) ; }","public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( INT_2 , FLOAT_1 ) ; }","['Delete FieldRead', 'Delete FieldRead']",5227
"public TYPE_1 METHOD_1 ( ) { VAR_1 = this . METHOD_2 ( ) ; TYPE_2 < TYPE_1 > data = new TYPE_2 ( VAR_1 . METHOD_3 ( ( STRING_1 + ( VAR_2 ) ) , null ) ) ; return VAR_3 . get ( ) ; }","public TYPE_1 METHOD_1 ( ) { VAR_1 = this . METHOD_2 ( ) ; TYPE_1 data = VAR_1 . METHOD_3 ( ( STRING_1 + ( VAR_2 ) ) , null ) ; return data ; }","['Update TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete TypeAccess', 'Delete Invocation']",5228
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( ( VAR_3 ) == null ) VAR_3 = VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldWrite', 'Delete VariableRead', 'Delete Invocation', 'Delete Assignment', 'Delete Block', 'Delete If']",5229
private synchronized void METHOD_1 ( ) { long VAR_1 = ( ( VAR_2 . METHOD_2 ( ) ) - ( VAR_2 . METHOD_3 ( ) ) ) - 1 ; value = ( VAR_1 * ( VAR_3 ) ) + ( VAR_4 ) ; },private synchronized void METHOD_1 ( ) { value = ( ( VAR_2 . METHOD_2 ( ) ) * ( VAR_3 ) ) + ( VAR_4 ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Update BinaryOperator', 'Move FieldRead', 'Move FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",5230
"public static void main ( java.lang.String [ ] args ) { TYPE_1 t = new TYPE_1 ( ) ; java.lang.String VAR_1 = STRING_1 ; java.util.List < java.lang.String > VAR_2 = t . METHOD_1 ( VAR_1 , STRING_2 ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",5231
public void METHOD_1 ( TYPE_1 response ) { TYPE_2 VAR_1 = METHOD_2 ( response ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; VAR_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) ; },public void METHOD_1 ( TYPE_1 response ) { VAR_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( METHOD_2 ( response ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",5232
"public TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_3 VAR_1 = new TYPE_3 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; return TYPE_1 . METHOD_3 ( VAR_1 ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_1 . METHOD_3 ( new TYPE_3 ( STRING_1 , STRING_4 , STRING_5 ) ) ; }","['Insert ConstructorCall', 'Move FieldRead', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",5233
"public TYPE_1 METHOD_1 ( java.lang.String name ) { return METHOD_2 ( name , VAR_1 . METHOD_1 ( name ) ) ; }","public TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 t = VAR_1 . METHOD_1 ( name ) ; return METHOD_2 ( name , t ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",5234
public java.lang.Boolean METHOD_1 ( final TYPE_1 a ) { TYPE_2 VAR_1 = VAR_2 . getValue ( ) ; return java.lang.Boolean . METHOD_2 ( ( VAR_1 instanceof TYPE_3 ) ) ; },public java.lang.Boolean METHOD_1 ( final TYPE_1 a ) { return java.lang.Boolean . METHOD_2 ( ( a instanceof TYPE_3 ) ) ; },"['Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",5235
protected void METHOD_1 ( android.content.Intent intent ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . execute ( ) ; super . METHOD_1 ( intent ) ; METHOD_2 ( intent ) ; METHOD_3 ( intent ) ; },protected void METHOD_1 ( android.content.Intent intent ) { super . METHOD_1 ( intent ) ; METHOD_2 ( intent ) ; METHOD_3 ( intent ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",5237
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent TYPE_1 = new android.content.Intent ( this , VAR_2 class ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( STRING_1 , VAR_4 ) ; TYPE_1 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( TYPE_1 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent TYPE_1 = new android.content.Intent ( this , VAR_2 class ) ; METHOD_4 ( TYPE_1 ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5240
private void METHOD_1 ( TYPE_1 event ) { boolean VAR_1 = METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; } },private void METHOD_1 ( TYPE_1 event ) { VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Block', 'Delete If']",5241
"public void METHOD_1 ( java.lang.Integer VAR_1 ) { java.lang.Integer VAR_2 = this . VAR_1 ; this . VAR_1 = VAR_1 ; VAR_3 . METHOD_2 ( STRING_1 , VAR_2 , VAR_1 ) ; }",public void METHOD_1 ( java.lang.Integer VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5243
"private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { int VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.String VAR_3 = getString ( VAR_4 ) ; VAR_1 . METHOD_4 ( java.lang.String.format ( VAR_3 , VAR_2 ) ) ; } }","private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { int VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( getString ( VAR_4 , VAR_2 ) ) ; } }","['Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5247
"public java.lang.String METHOD_1 ( TYPE_1 TYPE_2 ) { java.util.List < TYPE_3 > VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 ) ; return STRING_2 ; }",public java.lang.String METHOD_1 ( TYPE_1 TYPE_2 ) { return STRING_2 ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5250
"public TYPE_1 METHOD_1 ( int VAR_1 ) { if ( VAR_2 ) TYPE_2 . METHOD_2 ( VAR_3 , STRING_1 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; return VAR_4 ; }","public TYPE_1 METHOD_1 ( int VAR_1 ) { if ( VAR_2 ) TYPE_2 . METHOD_2 ( VAR_3 , STRING_1 ) ; VAR_4 = new TYPE_1 ( ) ; return VAR_4 ; }","['Insert Assignment', 'Insert FieldWrite', 'Move ConstructorCall', 'Insert FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5251
"public void METHOD_1 ( byte [ ] data ) { java.lang.String VAR_1 = java.lang.String.format ( STRING_1 , VAR_2 . length , new java.lang.String ( data ) ) ; METHOD_2 ( STRING_2 , VAR_1 ) ; METHOD_3 ( new java.lang.String ( data ) ) ; }",public void METHOD_1 ( byte [ ] data ) { METHOD_3 ( new java.lang.String ( data ) ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5252
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; android.widget.Button VAR_3 = ( ( android.widget.Button ) ( METHOD_4 ( VAR_4 ) ) ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",5253
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 b = VAR_2 . get ( VAR_1 ) ; return b ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return ( ( TYPE_1 ) ( VAR_2 . get ( VAR_1 ) ) ) ; },"['Move Invocation', 'Insert TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5254
"public void show ( ) { TYPE_1 out = new TYPE_1 ( ) ; TYPE_2 . METHOD_1 ( VAR_1 , out ) ; java.lang.String VAR_2 = VAR_3 . toString ( ) ; java.lang.System.out.print ( VAR_2 ) ; }",public void show ( ) { java.lang.System.out.println ( VAR_1 ) ; },"['Update Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5255
public void METHOD_1 ( int VAR_1 ) { java.lang.String content = METHOD_2 ( ) . getString ( VAR_1 ) ; if ( ( VAR_2 ) != null ) { VAR_3 . setText ( content ) ; } },public void METHOD_1 ( java.lang.String content ) { if ( ( VAR_2 ) != null ) { VAR_3 . setText ( content ) ; } },"['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",5256
public synchronized void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) < INT_1 ) { TYPE_1 VAR_2 = new TYPE_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; } },public synchronized void METHOD_1 ( ) { },"['Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",5257
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { int VAR_3 = TYPE_3 . METHOD_2 ( ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { TYPE_3 . METHOD_2 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable']",5258
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) VAR_1 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ) ; },"['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",5261
"private java.lang.String METHOD_1 ( TYPE_1 element , java.lang.String name ) { TYPE_2 node = element . METHOD_2 ( name ) . item ( 0 ) ; if ( node != null ) { return node . METHOD_3 ( ) ; } return null ; }","private java.lang.String METHOD_1 ( TYPE_1 element , java.lang.String name ) { return element . METHOD_2 ( name ) . item ( 0 ) . METHOD_3 ( ) ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",5263
"private TYPE_1 METHOD_1 ( boolean VAR_1 ) { java.util.Set < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( new TYPE_2 ( STRING_1 , 0 ) ) ; return new TYPE_4 ( 0 , 1 , VAR_1 , VAR_2 ) . build ( ) ; }","private TYPE_1 METHOD_1 ( boolean VAR_1 ) { java.util.Set < TYPE_2 > VAR_2 = new java.util.HashSet ( java.util.Arrays.asList ( new TYPE_2 ( STRING_1 , 0 ) ) ) ; return new TYPE_4 ( 0 , 1 , VAR_1 , VAR_2 ) . build ( ) ; }","['Insert ConstructorCall', 'Update Invocation', 'Move Invocation', 'Update TypeAccess']",5265
public java.util.Collection < TYPE_1 > METHOD_1 ( java.lang.Long id ) throws java.lang.NullPointerException { java.util.Collection < TYPE_1 > VAR_1 = new java.util.HashSet ( METHOD_2 ( id ) ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; },public java.util.Collection < TYPE_1 > METHOD_1 ( java.lang.Long id ) throws java.lang.NullPointerException { java.util.Collection < TYPE_1 > VAR_1 = METHOD_2 ( id ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; },"['Move Invocation', 'Delete ConstructorCall']",5266
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 . message ) ; TYPE_2 a = VAR_3 . METHOD_4 ( ) ; METHOD_5 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 . message ) ; METHOD_5 ( ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",5267
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { boolean VAR_2 = VAR_3 . equals ( VAR_1 . METHOD_2 ( ) ) ; METHOD_3 ( VAR_1 , response , VAR_2 , VAR_4 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { METHOD_3 ( VAR_1 , response , false , VAR_4 ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5268
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws java.lang.Exception { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; java.util.Set < TYPE_3 > VAR_5 = VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_5 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws java.lang.Exception { java.util.Set < TYPE_3 > VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_5 ) ; return VAR_1 ; }","['Update LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",5269
"public void METHOD_1 ( boolean VAR_1 ) { boolean VAR_2 = VAR_3 ; VAR_3 = VAR_1 ; if ( VAR_2 != VAR_1 ) { if ( ! VAR_1 ) { VAR_4 . METHOD_2 ( ) ; } METHOD_3 ( 0 , METHOD_4 ( ) ) ; } }",public void METHOD_1 ( boolean VAR_1 ) { VAR_3 = VAR_1 ; if ( ! VAR_1 ) { VAR_4 . METHOD_2 ( ) ; } },"['Move If', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",5272
"public void METHOD_1 ( TYPE_1 view ) { if ( view != null ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( view . METHOD_4 ( ) , 0 ) ; } METHOD_5 ( ) ; }",public void METHOD_1 ( TYPE_1 view ) { METHOD_5 ( ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",5273
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; android.content.Intent VAR_1 = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( VAR_1 ) ; }",public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5275
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = TYPE_3 . METHOD_3 ( METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( this ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation']",5276
public static TYPE_1 METHOD_1 ( android.content.Context context ) { TYPE_2 VAR_1 = new TYPE_2 ( context ) ; VAR_1 . METHOD_2 ( ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; },public static TYPE_1 METHOD_1 ( android.content.Context context ) { return TYPE_3 . METHOD_3 ( new TYPE_2 ( context ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",5278
public static void main ( java.lang.String [ ] args ) { java.lang.String x = STRING_1 ; java.lang.System.out.println ( x ) ; },public static void main ( java.lang.String [ ] args ) { x = STRING_1 ; java.lang.System.out.println ( x ) ; },"['Insert Assignment', 'Insert FieldWrite', 'Move FieldRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5279
"private void METHOD_1 ( java.lang.String VAR_1 , int status , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( VAR_1 , METHOD_5 ( status ) , VAR_3 ) ; }","private void METHOD_1 ( java.lang.String VAR_1 , int status ) { VAR_4 . METHOD_4 ( VAR_1 , METHOD_5 ( status ) ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5281
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 t = VAR_1 . METHOD_2 ( ) ; if ( t == ( VAR_2 ) ) { METHOD_3 ( VAR_1 ) ; } else if ( t == ( VAR_3 ) ) { } return false ; },private boolean METHOD_1 ( TYPE_2 t ) { if ( t == ( VAR_2 ) ) { METHOD_3 ( ) ; } else if ( t == ( VAR_3 ) ) { } return false ; },"['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5282
"public void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_1 < 0 ) throw new TYPE_1 ( STRING_1 ) ; int VAR_3 = VAR_1 + VAR_2 ; VAR_4 = ( VAR_4 ) + VAR_3 ; }",public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 ) throw new TYPE_1 ( STRING_1 ) ; VAR_4 = ( VAR_4 ) + VAR_1 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator']",5283
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_1 ( ) ; METHOD_3 ( ) ; position . METHOD_4 ( this ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; },public void METHOD_1 ( ) { VAR_3 . METHOD_1 ( ) ; METHOD_3 ( ) ; position . METHOD_4 ( this ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5284
"public boolean METHOD_1 ( boolean VAR_1 ) { boolean result = METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_3 , VAR_1 ) ; METHOD_4 ( METHOD_5 ( ) ) ; return result ; }","public boolean METHOD_1 ( boolean VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_3 , VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",5285
public TYPE_1 index ( ) { java.util.List < TYPE_2 > VAR_1 = VAR_2 . METHOD_1 ( ) ; return METHOD_2 ( VAR_3 . METHOD_3 ( VAR_1 ) ) ; },public TYPE_1 index ( ) { return METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5286
public static boolean METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( ) . getName ( ) . toLowerCase ( ) ; return ( VAR_2 . contains ( STRING_1 ) ) || ( VAR_2 . contains ( STRING_2 ) ) ; },public static boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( ) . getName ( ) . toLowerCase ( ) . contains ( STRING_1 ) ; },"['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",5287
"public TYPE_1 METHOD_1 ( java.lang.CharSequence source ) { TYPE_2 text = new TYPE_2 ( source ) ; TYPE_3 . METHOD_2 ( text , 0 ) ; return text ; }",public TYPE_1 METHOD_1 ( java.lang.CharSequence source ) { return new TYPE_2 ( source ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",5288
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( STRING_3 ) ; VAR_1 . METHOD_5 ( ) ; },private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5289
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 result = new TYPE_1 ( ) ; VAR_1 = METHOD_3 ( ) ; VAR_2 = METHOD_4 ( ) ; VAR_3 = METHOD_5 ( ) ; VAR_4 = result ; },public double METHOD_1 ( ) { double result = METHOD_4 ( ) ; return result ; },"['Update TypeReference', 'Insert Return', 'Update TypeReference', 'Move Invocation', 'Move VariableRead', 'Delete Invocation', 'Delete ConstructorCall', 'Delete FieldWrite', 'Delete Invocation', 'Delete Assignment', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldWrite', 'Delete Invocation', 'Delete Assignment', 'Delete FieldWrite', 'Delete Assignment']",5292
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( null == VAR_2 ) { return false ; } java.lang.Integer VAR_4 = VAR_2 . METHOD_2 ( ) ; return VAR_4 > 0 ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Integer VAR_4 = VAR_3 . get ( VAR_1 ) . METHOD_2 ( ) ; return VAR_4 > 0 ; },"['Update LocalVariable', 'Move TypeReference', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",5294
public double METHOD_1 ( ) { double VAR_1 = this . METHOD_2 ( INT_1 ) ; if ( ( VAR_1 < 0 ) && ( VAR_1 >= FLOAT_1 ) ) { return 0 ; } return VAR_1 ; },public double METHOD_1 ( ) { return this . METHOD_2 ( INT_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",5295
"public static TYPE_1 METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ; VAR_3 . METHOD_4 ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; return VAR_3 ; }","public static TYPE_1 METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { return new TYPE_2 ( ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; }","['Move Invocation', 'Move Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",5296
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_1 , new TYPE_5 ( ) ) ; VAR_2 . METHOD_3 ( STRING_2 , VAR_3 ) ; return new TYPE_1 ( STRING_3 , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_3 ( STRING_1 , new TYPE_5 ( ) ) ; VAR_2 . METHOD_3 ( STRING_2 , VAR_3 ) ; return new TYPE_1 ( STRING_3 , VAR_2 ) ; }","['Insert ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5299
private boolean METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; return VAR_1 . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( ) { VAR_2 . METHOD_6 ( ) ; METHOD_7 ( ) ; } } ) ; },private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; return VAR_1 . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( ) { VAR_2 . METHOD_6 ( ) ; METHOD_7 ( ) ; } } ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",5300
"private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this , STRING_1 , VAR_1 ) . show ( ) ; TYPE_2 p = new TYPE_2 ( ) ; VAR_2 . start ( ) ; }","private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this , STRING_1 , VAR_1 ) . show ( ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",5301
public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( INT_1 ) ) ; java.lang.System.out.println ( VAR_1 ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",5302
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; },public static void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Update TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",5303
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_1 class ) ; getActivity ( ) . METHOD_2 ( intent ) ; }",public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5304
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( ( ( ( VAR_3 ) | ( VAR_4 ) ) | ( VAR_5 ) ) ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( new android.content.Intent ( this , VAR_2 class ) ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5305
"public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; return VAR_1 . METHOD_4 ( VAR_2 , STRING_1 ) . trim ( ) ; }","public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_1 . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_1 ) , STRING_1 ) . trim ( ) ; }","['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move Invocation', 'Move VariableRead', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5306
private void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_3 . start ( ) ; },private void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",5307
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_2 != null ) { TYPE_4 VAR_4 = new TYPE_4 ( VAR_2 , VAR_1 ) ; } return null ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_2 != null ) { new TYPE_4 ( VAR_2 , VAR_1 ) ; } return null ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable']",5308
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { }","['Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5312
public synchronized boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) * INT_1 ) ) ; return true ; },public synchronized boolean METHOD_1 ( TYPE_1 VAR_1 ) { return false ; },"['Update Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",5313
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; double VAR_1 = VAR_2 . METHOD_4 ( ) ; double VAR_3 = VAR_4 . METHOD_4 ( ) ; new TYPE_2 ( VAR_3 , VAR_1 ) ; }",public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall']",5314
"public static int METHOD_1 ( int min , int VAR_1 ) { java.util.Random VAR_2 = new java.util.Random ( ) ; int VAR_3 = ( VAR_2 . METHOD_2 ( ( VAR_1 - min ) ) ) + min ; return VAR_3 ; }","public static int METHOD_1 ( int min , int VAR_1 ) { java.util.Random VAR_2 = new java.util.Random ( ) ; int VAR_3 = ( VAR_2 . METHOD_2 ( ( ( VAR_1 - min ) + 1 ) ) ) + min ; return VAR_3 ; }","['Insert BinaryOperator', 'Move BinaryOperator', 'Insert Literal']",5315
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; int id = VAR_1 . METHOD_3 ( ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Insert Invocation', 'Insert VariableRead']",5316
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Date date = new java.util.Date ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( VAR_2 . getTime ( ) ) ) ; return this . VAR_3 . METHOD_3 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return this . VAR_3 . METHOD_3 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Invocation']",5317
protected long METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; java.lang.Object result = VAR_1 . METHOD_4 ( ) ; if ( result == null ) { return 0 ; } return ( ( java.lang.Long ) ( result ) ) ; },protected long METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; return ( ( java.lang.Long ) ( VAR_1 . METHOD_4 ( ) ) ) ; },"['Move Invocation', 'Move TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",5318
public int METHOD_1 ( ) { TYPE_1 < TYPE_2 > results = VAR_1 . METHOD_2 ( ) ; results . METHOD_3 ( ) ; return VAR_2 . size ( ) ; },public int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . size ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess']",5321
void METHOD_1 ( ) { TYPE_1 msg = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( msg ) ; },void METHOD_1 ( ) { TYPE_1 msg = new TYPE_1 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( msg ) ; },"['Insert ConstructorCall', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",5322
public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 element = new TYPE_1 ( ) ; return element ; },public TYPE_1 METHOD_1 ( int VAR_1 ) { return null ; },"['Insert Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",5323
public synchronized boolean METHOD_1 ( TYPE_1 listener ) { boolean VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 ) { VAR_2 . METHOD_4 ( listener ) ; } return VAR_1 ; },public synchronized void METHOD_1 ( TYPE_1 listener ) { if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( listener ) ; } },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Return']",5324
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = new TYPE_1 ( null ) . METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_3 . substring ( 0 , VAR_2 . METHOD_3 ( CHAR_1 ) ) , STRING_2 ) ; }",public void METHOD_1 ( ) throws java.lang.Exception { },"['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete Literal', 'Delete ConstructorCall', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",5325
"public TYPE_1 < TYPE_2 > METHOD_1 ( ) { final TYPE_3 < java.lang.String , java.lang.String > VAR_1 = ( VAR_2 ) - > java.lang.String.format ( VAR_3 , METHOD_2 ( VAR_2 ) ) ; return METHOD_3 ( VAR_1 , STRING_1 , STRING_2 , VAR_4 class ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( ) { final java.lang.String VAR_1 = java.lang.String.format ( VAR_3 , METHOD_2 ( ) ) ; return METHOD_3 ( VAR_1 , STRING_1 , STRING_2 , VAR_4 class ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete FieldWrite', 'Delete UnaryOperator', 'Delete BinaryOperator']",5328
public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( STRING_1 ) ; int a = INT_1 ; int b ; int c ; int VAR_1 ; int VAR_2 ; java.lang.System.out.println ( STRING_2 ) ; },public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( STRING_1 ) ; int a = INT_1 ; },"['Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",5330
public java.lang.String execute ( TYPE_1 token ) throws TYPE_2 { super . execute ( token ) ; TYPE_3 < java.lang.String > VAR_1 = this . METHOD_1 ( ) . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( STRING_1 ) ; return STRING_2 ; },public java.lang.String execute ( TYPE_1 token ) throws TYPE_2 { super . execute ( token ) ; return STRING_2 ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",5331
private static void METHOD_1 ( java.lang.Throwable error ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; error . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_3 ( VAR_3 . toString ( ) ) ; },private static void METHOD_1 ( java.lang.Throwable error ) { error . METHOD_2 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_3 . METHOD_3 ( VAR_3 . toString ( ) ) ; },"['Move LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",5332
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , INT_1 , INT_2 ) ; VAR_1 . METHOD_1 ( ) ; }",public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5333
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String text = VAR_2 . getText ( ) ; java.lang.String VAR_3 = VAR_4 . substring ( 1 , ( ( VAR_4 . length ( ) ) - 1 ) ) ; return METHOD_2 ( VAR_3 ) ; }",public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_2 ( VAR_2 . getText ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5334
private static void METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . getText ( ) . toString ( ) ) ; if ( VAR_1 ) VAR_3 . start ( ) ; else VAR_4 . start ( ) ; TYPE_1 . METHOD_3 ( VAR_5 ) ; },private static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_2 . getText ( ) . toString ( ) ) ; TYPE_1 . METHOD_3 ( VAR_5 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",5335
private double METHOD_1 ( java.lang.Integer VAR_1 ) { double VAR_2 = 1 - ( ( ( VAR_3 . METHOD_2 ( ) ) / ( VAR_1 . METHOD_2 ( ) ) ) * INT_1 ) ; return VAR_2 ; },private double METHOD_1 ( java.lang.Integer VAR_1 ) { double VAR_2 = 1 - ( ( VAR_3 . METHOD_2 ( ) ) / ( VAR_1 . METHOD_2 ( ) ) ) ; return VAR_2 ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Literal', 'Delete FieldRead', 'Delete BinaryOperator']",5336
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = this . VAR_2 . get ( 0 ) ; this . VAR_2 . remove ( 0 ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return this . VAR_2 . get ( 0 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",5337
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ( step ) - > step . METHOD_4 ( VAR_1 ) ) ; },public void METHOD_1 ( ) { VAR_2 . METHOD_3 ( ( step ) - > step . METHOD_4 ( METHOD_2 ( ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5338
public java.awt.Color getColor ( ) { TYPE_1 VAR_1 = METHOD_1 ( query ) ; float VAR_2 = java.lang.Math.abs ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_2 < FLOAT_1 ) return VAR_3 ; else if ( VAR_2 < FLOAT_2 ) return VAR_4 ; return VAR_5 ; },public java.awt.Color getColor ( ) { return VAR_3 ; },"['Move Return', 'Delete TypeReference', 'Delete FieldRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",5339
"public void METHOD_1 ( java.lang.String key , java.lang.String value ) { TYPE_1 VAR_1 = this . METHOD_2 ( STRING_1 , VAR_2 ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( key , value ) ; VAR_4 . commit ( ) ; }","public void METHOD_1 ( java.lang.String key , java.lang.String value ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( key , value ) ; VAR_1 . METHOD_3 ( ) . commit ( ) ; }","['Move Invocation', 'Insert Invocation', 'Insert VariableRead', 'Delete ThisAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess']",5340
"private static java.lang.String METHOD_1 ( byte [ ] key ) throws java.lang.Exception { java.lang.String VAR_1 = new TYPE_1 ( ) . METHOD_2 ( key ) ; return VAR_2 . replace ( CHAR_1 , CHAR_2 ) ; }",private static java.lang.String METHOD_1 ( byte [ ] key ) throws java.lang.Exception { return new TYPE_1 ( ) . METHOD_2 ( key ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",5341
"protected void METHOD_1 ( java.lang.Class < ? extends java.lang.Throwable > type , java.lang.String message ) { VAR_1 . METHOD_2 ( type ) ; java.lang.String msg = java.lang.String.format ( message ) ; VAR_1 . METHOD_3 ( msg ) ; }","protected void METHOD_1 ( java.lang.Class < ? extends java.lang.Throwable > type , java.lang.String message ) { VAR_1 . METHOD_2 ( type ) ; VAR_1 . METHOD_3 ( java.lang.String.format ( message ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5343
static void METHOD_1 ( TYPE_1 event ) { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( ) . add ( VAR_1 ) ; TYPE_4 . METHOD_4 ( VAR_1 ) ; },static void METHOD_1 ( TYPE_1 event ) { TYPE_3 . METHOD_3 ( ) . add ( TYPE_2 . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5344
public TYPE_1 METHOD_1 ( int id ) { java.lang.Integer VAR_1 = java.lang.Integer . METHOD_2 ( id ) ; return VAR_2 . get ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( int id ) { java.lang.Integer VAR_1 = new java.lang.Integer ( id ) ; return VAR_2 . get ( VAR_1 ) ; },"['Insert ConstructorCall', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",5345
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5346
"public static java.lang.String METHOD_1 ( ) { java.io.File VAR_1 = new java.io.File ( TYPE_1 . METHOD_2 ( ) , STRING_1 ) ; if ( ( VAR_1 . METHOD_3 ( ) ) == false ) VAR_1 . METHOD_4 ( ) ; return VAR_1 . METHOD_5 ( ) ; }","public static java.lang.String METHOD_1 ( ) { return new java.io.File ( TYPE_1 . METHOD_2 ( ) , STRING_1 ) . METHOD_5 ( ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",5347
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; long VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_4 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5348
"public int METHOD_1 ( ) { return ( ( int ) ( ( java.lang.Integer ) ( METHOD_2 ( ) . METHOD_3 ( VAR_1 , 0 ) ) ) ) ; }","public int METHOD_1 ( ) { java.lang.Integer value = ( ( java.lang.Integer ) ( METHOD_2 ( ) . METHOD_3 ( VAR_1 , 0 ) ) ) ; return ( ( int ) ( value ) ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Move TypeReference']",5349
"protected java.lang.String METHOD_1 ( ) { java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ; java.util.Random VAR_2 = new java.util.Random ( ) ; return VAR_1 [ VAR_2 . METHOD_2 ( INT_1 ) ] ; }","protected java.lang.String METHOD_1 ( ) { java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ; return VAR_1 [ ( ( int ) ( ( java.lang.Math.random ( ) ) * INT_1 ) ) ] ; }","['Insert BinaryOperator', 'Insert TypeReference', 'Insert Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",5350
public void METHOD_1 ( TYPE_1 ... VAR_1 ) { TYPE_2 TYPE_3 = TYPE_2 . METHOD_2 ( ) ; if ( TYPE_3 != null ) { TYPE_3 . METHOD_3 ( VAR_2 class ) . METHOD_1 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 ... VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 class ) . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",5353
"public TYPE_1 get ( int VAR_1 , int VAR_2 ) throws TYPE_2 { java.util.List < TYPE_1 > VAR_3 = VAR_4 . get ( VAR_1 ) ; return VAR_5 . get ( VAR_2 ) ; }","public TYPE_1 get ( int VAR_1 , int VAR_2 ) throws TYPE_2 { return VAR_4 . get ( VAR_1 ) . get ( VAR_2 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",5354
"public void METHOD_1 ( ) { VAR_1 = false ; VAR_2 . METHOD_2 ( false ) ; TYPE_1 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 != null ) VAR_3 . METHOD_4 ( VAR_4 , null ) ; }",public void METHOD_1 ( ) { VAR_1 = false ; VAR_2 . METHOD_2 ( false ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",5355
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 < java.lang.Integer > VAR_2 = new TYPE_2 ( ) ; METHOD_2 ( VAR_3 , VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",5356
"public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent intent = new android.content.Intent ( context , VAR_2 class ) ; VAR_3 = TYPE_2 . METHOD_2 ( context , 0 , intent , VAR_4 ) ; TYPE_3 . METHOD_3 ( VAR_5 , 0 , VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent intent = new android.content.Intent ( context , VAR_2 class ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_2 ( context , 0 , intent , VAR_4 ) ; TYPE_3 . METHOD_3 ( VAR_5 , 0 , VAR_3 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",5357
"public TYPE_1 < TYPE_2 > update ( TYPE_2 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . update ( VAR_1 ) ; return new TYPE_1 < TYPE_2 > ( VAR_2 , VAR_4 ) ; }",public TYPE_2 update ( TYPE_2 VAR_1 ) { return VAR_3 . update ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete ConstructorCall']",5358
"protected TYPE_1 execute ( ) { TYPE_2 VAR_1 = METHOD_1 ( ) ; long VAR_2 = ( TYPE_3 . METHOD_2 ( ) ) + ( VAR_3 ) ; return VAR_1 . METHOD_3 ( key , VAR_4 , VAR_2 ) ; }","protected TYPE_1 execute ( ) { TYPE_2 VAR_1 = METHOD_1 ( ) ; return VAR_1 . METHOD_3 ( key , VAR_4 ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",5359
private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String text = VAR_2 . getText ( ) ; if ( ! ( text . METHOD_2 ( STRING_1 ) ) ) { METHOD_3 ( ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",5364
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( true ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",5366
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 param = METHOD_2 ( VAR_2 , VAR_3 class ) ; if ( ( VAR_4 ) == null ) VAR_5 . METHOD_1 ( VAR_6 ) ; else VAR_5 . METHOD_1 ( VAR_6 , METHOD_3 ( VAR_4 ) ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_5 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Insert VariableRead', 'Delete TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",5367
"public void METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( STRING_1 , VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( this ) ; }",public void METHOD_1 ( ) { byte [ ] VAR_1 = METHOD_2 ( ) ; },"['Update TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable']",5368
"public java.io.File METHOD_1 ( java.lang.String VAR_1 ) { java.io.File file = new java.io.File ( VAR_2 , VAR_1 ) ; METHOD_2 ( file ) ; return file ; }","public java.io.File METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( new java.io.File ( VAR_2 , VAR_1 ) ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",5369
"public float METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return VAR_2 ; } return TYPE_2 . METHOD_3 ( VAR_3 , VAR_1 ) ; }",public float METHOD_1 ( ) { return VAR_2 ; },"['Move Return', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Return']",5370
public boolean METHOD_1 ( java.lang.String VAR_1 ) { try { java.lang.Integer.parseInt ( VAR_1 ) ; return true ; } catch ( TYPE_1 VAR_2 ) { return false ; } },public boolean METHOD_1 ( java.lang.String VAR_1 ) { try { int n = java.lang.Integer.parseInt ( VAR_1 ) ; return true ; } catch ( TYPE_1 VAR_2 ) { return false ; } },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation']",5372
"public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_2 ( STRING_1 , VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; METHOD_4 ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; METHOD_4 ( VAR_2 ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5373
"public static void METHOD_1 ( android.widget.Button VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( new TYPE_2 ( VAR_2 , VAR_4 ) ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; }","public static void METHOD_1 ( android.widget.Button VAR_1 , int VAR_2 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_4 ) ; }","['Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5375
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_2 = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; }","['Insert Assignment', 'Insert FieldWrite', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable']",5376
"public synchronized void METHOD_1 ( TYPE_1 VAR_1 , int x , int y , TYPE_2 VAR_2 ) { assert VAR_1 != null ; TYPE_3 VAR_3 = new TYPE_3 ( new TYPE_4 ( x , y ) , VAR_2 ) ; METHOD_1 ( VAR_1 , VAR_3 ) ; }","public synchronized void METHOD_1 ( TYPE_1 VAR_1 , int x , int y ) { assert VAR_1 != null ; TYPE_4 VAR_3 = new TYPE_4 ( x , y ) ; METHOD_1 ( VAR_1 , VAR_3 ) ; }","['Update TypeReference', 'Move ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete ConstructorCall']",5378
"public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_2 class ) ; METHOD_2 ( intent ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { }","['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5379
public java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . remove ( VAR_2 . METHOD_3 ( ) ) ; return VAR_3 . METHOD_1 ( VAR_1 ) ; },public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",5381
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5383
public TYPE_1 METHOD_1 ( int VAR_1 ) { long VAR_2 = ( VAR_3 ) + ( VAR_1 * ( ( VAR_4 ) < < ( VAR_5 ) ) ) ; return new TYPE_2 ( VAR_2 ) ; },public TYPE_1 METHOD_1 ( int VAR_1 ) { return new TYPE_2 ( ) ; },"['Update ConstructorCall', 'Delete TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete VariableRead']",5385
"public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( ) ; VAR_3 . i ( VAR_4 , ( STRING_1 + VAR_2 ) ) ; android.content.Intent intent = new android.content.Intent ( VAR_5 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ; METHOD_4 ( intent ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( VAR_5 , TYPE_1 . METHOD_3 ( METHOD_2 ( ) ) ) ; METHOD_4 ( intent ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead']",5386
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; },protected void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5387
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 ) ; TYPE_2 VAR_3 = new TYPE_2 ( STRING_2 ) ; VAR_4 . add ( VAR_2 ) ; VAR_4 . add ( VAR_3 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5388
public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) return ; TYPE_2 listener = VAR_3 . get ( ) ; if ( listener != null ) listener . METHOD_2 ( VAR_1 ) ; },public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( ( VAR_3 . get ( ) ) == null ) ) return ; VAR_3 . get ( ) . METHOD_2 ( VAR_1 ) ; },"['Insert Invocation', 'Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Move BinaryOperator', 'Insert BinaryOperator', 'Insert Invocation', 'Move Literal', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",5391
"protected TYPE_1 METHOD_1 ( java.lang.Void ... params ) { java.lang.String filename = ( METHOD_2 ( ) ) + STRING_1 ; TYPE_2 . METHOD_3 ( VAR_1 , filename , true ) ; return TYPE_2 . METHOD_4 ( VAR_1 , filename ) ; }","protected TYPE_1 METHOD_1 ( java.lang.Void ... params ) { return TYPE_2 . METHOD_4 ( VAR_1 , ( ( METHOD_2 ( ) ) + STRING_1 ) ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",5393
public static java.lang.String METHOD_1 ( java.lang.String key ) { java.lang.Object value = VAR_1 . get ( key ) ; if ( value == null ) { return null ; } else { return VAR_2 . toString ( ) ; } },public static java.lang.String METHOD_1 ( java.lang.String key ) { return VAR_1 . get ( key ) . toString ( ) ; },"['Insert Return', 'Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",5394
public TYPE_1 METHOD_1 ( ) { TYPE_1 state = VAR_1 . METHOD_2 ( ) ; state . METHOD_3 ( VAR_2 ) ; return state ; },public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",5398
public static void main ( java.lang.String [ ] args ) { TYPE_1 a = new TYPE_1 ( ) ; boolean VAR_1 = a . METHOD_1 ( STRING_1 ) ; java.lang.System.out.println ( VAR_1 ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 a = new TYPE_1 ( ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",5399
public static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 class ) ; if ( VAR_1 . METHOD_4 ( ) ) { VAR_1 . METHOD_5 ( ) ; } return VAR_1 ; },public static TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 class ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",5401
"private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; METHOD_2 ( intent ) ; METHOD_3 ( ) ; }",private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",5402
public void update ( TYPE_1 event ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_1 ( event ) ; },public void update ( TYPE_1 event ) { VAR_1 . METHOD_1 ( event ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",5403
public char METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = TYPE_1 . METHOD_2 ( INT_1 ) ; char VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) ; return VAR_2 ; },public char METHOD_1 ( ) throws java.lang.Exception { return TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_2 ( INT_1 ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5404
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; TYPE_4 VAR_6 = VAR_7 ; METHOD_3 ( VAR_4 , VAR_6 ) ; return VAR_4 ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; return VAR_4 ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5405
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_3 = ( ( TYPE_3 ) ( VAR_3 . METHOD_1 ( ) ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete FieldWrite', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Assignment', 'Delete VariableRead']",5406
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( ( view ) == null ) { view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; METHOD_3 ( view ) ; return view ; } return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; METHOD_3 ( view ) ; return view ; }","['Insert LocalVariable', 'Move Invocation', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldWrite', 'Delete Assignment', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete FieldRead']",5407
public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 result = METHOD_3 ( ) ; return result ; },public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; return METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5409
"public void METHOD_1 ( ) { METHOD_2 ( new android.content.Intent ( this , VAR_1 class ) ) ; this . METHOD_3 ( ) ; }","public void METHOD_1 ( ) { android.content.Intent i = new android.content.Intent ( this , VAR_1 class ) ; METHOD_2 ( i ) ; METHOD_3 ( ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead', 'Delete ThisAccess']",5410
"public java.lang.String METHOD_1 ( long VAR_1 , TYPE_1 response ) { TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 , java.lang.String . METHOD_2 ( VAR_1 ) ) ; VAR_2 . METHOD_3 ( INT_1 ) ; response . METHOD_4 ( VAR_2 ) ; return STRING_2 ; }","public java.lang.String METHOD_1 ( long VAR_1 , TYPE_1 response ) { response . METHOD_4 ( new TYPE_2 ( STRING_1 , java.lang.String . METHOD_2 ( VAR_1 ) ) ) ; return STRING_2 ; }","['Insert Invocation', 'Move VariableRead', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5411
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; VAR_2 . METHOD_2 ( ""name"" , name ) ; METHOD_3 ( VAR_2 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( new android.content.Intent ( this , VAR_3 class ) ) ; }","['Insert Invocation', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete FieldRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5412
"public void setValue ( TYPE_1 VAR_1 , java.lang.String value ) { java.lang.String VAR_2 = VAR_3 . replaceAll ( ""\n"" , STRING_1 ) ; VAR_4 += ( ( ( VAR_5 . toString ( ) ) + STRING_2 ) + VAR_2 ) + ""\n"" ; }","public void setValue ( TYPE_1 VAR_1 , java.lang.String value ) { VAR_4 += ( ( ( VAR_5 . toString ( ) ) + STRING_2 ) + value ) + ""\n"" ; }","['Update VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable']",5413
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.Double > VAR_1 = java.util.Arrays.asList ( ) ; VAR_2 . METHOD_2 ( VAR_3 class ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.Double > VAR_1 = java.util.Arrays.asList ( ) ; VAR_2 . METHOD_2 ( VAR_3 class ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_3 ( VAR_1 ) ; },"['Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",5414
protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String value = java.lang.String . METHOD_2 ( VAR_2 . getValue ( ) ) ; if ( TYPE_2 . METHOD_3 ( value ) ) { return false ; } return TYPE_3 . METHOD_4 ( value ) ; },protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_3 ( java.lang.String . METHOD_2 ( VAR_2 . getValue ( ) ) ) ) { return false ; } return true ; },"['Insert Literal', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5415
"public static void main ( java.lang.String [ ] args ) { java.lang.String VAR_1 = STRING_1 ; java.util.Map < TYPE_1 , java.lang.Integer > VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 ) ; java.lang.System.out.println ( VAR_2 ) ; }",public static void main ( java.lang.String [ ] args ) { java.lang.String VAR_1 = STRING_1 ; TYPE_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",5416
private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( true ) ; },private void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( true ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5417
"private TYPE_1 METHOD_1 ( android.content.Context context ) { TYPE_1 VAR_1 = new TYPE_1 ( context ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( VAR_2 , VAR_2 ) ) ; return VAR_1 ; }","private TYPE_1 METHOD_1 ( android.content.Context context ) { TYPE_1 VAR_1 = new TYPE_1 ( context ) ; TYPE_2 params = new TYPE_2 ( VAR_2 , VAR_2 ) ; VAR_1 . METHOD_2 ( params ) ; return VAR_1 ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert VariableRead']",5419
"public void METHOD_1 ( TYPE_1 VAR_1 ) { int i = TYPE_2 . METHOD_2 ( null , STRING_1 , STRING_2 , VAR_2 ) ; if ( i == 0 ) VAR_3 . METHOD_3 ( ( ( TYPE_3 ) ( VAR_4 . METHOD_4 ( ) ) ) ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_3 ( ( ( TYPE_3 ) ( VAR_4 . METHOD_4 ( ) ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",5420
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = this ; TYPE_1 node = VAR_3 . put ( VAR_4 . name , VAR_1 ) ; return node ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = this ; return VAR_3 . put ( VAR_4 . name , VAR_1 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5421
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 . setText ( STRING_1 ) ; TYPE_2 VAR_3 = METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 ) ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5422
"public static void METHOD_1 ( java.lang.String filename , TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = TYPE_4 . METHOD_2 ( filename , VAR_1 , VAR_2 ) ; TYPE_4 . METHOD_3 ( VAR_4 , VAR_3 ) ; }","public static void METHOD_1 ( java.lang.String filename , TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5423
private java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { java.lang.String index = ( ( ( METHOD_2 ( ) ) + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ; return VAR_2 . toLowerCase ( ) ; },private java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { return ( ( ( METHOD_2 ( ) ) + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",5424
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ) ; if ( VAR_2 != ( VAR_3 ) ) { return VAR_2 ; } } return VAR_4 ; },public TYPE_1 METHOD_1 ( ) { return VAR_4 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If']",5428
"public void METHOD_1 ( java.lang.String name , java.lang.Double value ) { this . VAR_1 . put ( name , value ) ; TYPE_1 temp = this . VAR_2 . METHOD_2 ( name ) ; VAR_3 . setValue ( value ) ; }","public void METHOD_1 ( java.lang.String name , java.lang.Double value ) { this . VAR_1 . put ( name , value ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5429
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( new android.content.Intent ( this , VAR_2 class ) ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; this . METHOD_2 ( intent ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move ConstructorCall', 'Insert ThisAccess', 'Insert VariableRead']",5430
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . remove ( position ) ; VAR_5 . METHOD_2 ( VAR_6 ) . setValue ( null ) ; VAR_7 . METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_4 . remove ( position ) ; VAR_7 . METHOD_3 ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",5431
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_1 ( VAR_1 ) ; TYPE_4 array = new TYPE_4 ( VAR_2 ) ; return VAR_3 . toString ( ) ; },public java.util.List < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { return null ; },"['Update TypeReference', 'Move TypeReference', 'Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",5432
public TYPE_1 METHOD_1 ( java.lang.Long number ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( number ) ; java.lang.System.out.println ( VAR_1 ) ; if ( VAR_1 == null ) { java.lang.System.out.println ( STRING_1 ) ; return null ; } return VAR_1 ; },public TYPE_1 METHOD_1 ( java.lang.String number ) { if ( ( VAR_2 . METHOD_2 ( number ) ) == null ) java.lang.System.out.println ( STRING_1 ) ; return VAR_2 . METHOD_2 ( number ) ; },"['Update TypeReference', 'Move Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Insert VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Return', 'Delete VariableRead']",5433
public void METHOD_1 ( ) { this . METHOD_2 ( ) ; int tmp = METHOD_3 ( 0 ) ; if ( tmp != INT_1 ) this . VAR_1 = tmp ; else this . VAR_1 = 0 ; },public void METHOD_1 ( ) { this . METHOD_2 ( ) ; if ( ( METHOD_3 ( 1 ) ) != INT_1 ) this . VAR_1 = METHOD_3 ( 0 ) ; else this . VAR_1 = 0 ; },"['Insert Invocation', 'Insert Literal', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",5434
public void METHOD_1 ( TYPE_1 event ) { int VAR_1 = event . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 > 0 ) this . METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 event ) { this . METHOD_4 ( event . METHOD_2 ( ) . METHOD_3 ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",5435
public long getId ( ) { long VAR_1 = METHOD_1 ( VAR_2 ) ; return ( VAR_3 ) == 0 ? VAR_1 : ( ( ( VAR_3 ) & INT_1 ) < < INT_2 ) | VAR_1 ; },public long getId ( ) { return ( VAR_3 ) == 0 ? VAR_2 : ( ( ( VAR_3 ) & INT_1 ) < < INT_2 ) | ( VAR_2 ) ; },"['Insert FieldRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",5436
"public void METHOD_1 ( int VAR_1 ) { int VAR_2 = this . VAR_1 ; this . VAR_1 = VAR_1 ; METHOD_2 ( STRING_1 , VAR_2 , VAR_1 ) ; }",public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5439
"public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = VAR_2 . show ( this , STRING_1 , STRING_2 , true ) ; VAR_1 . METHOD_2 ( true ) ; VAR_3 . show ( ) ; }","public void METHOD_1 ( android.view.View view ) { VAR_2 . show ( this , STRING_1 , STRING_2 , true ) . METHOD_2 ( true ) ; }","['Insert Invocation', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",5440
public void METHOD_1 ( ) { try { TYPE_1 TYPE_2 = new TYPE_1 ( ) ; VAR_1 . start ( ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_2 . METHOD_2 ( ) ; } },public void METHOD_1 ( ) { try { new TYPE_1 ( ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_2 . METHOD_2 ( ) ; } },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",5441
"public void delete ( TYPE_1 VAR_1 ) { TYPE_2 < java.lang.Object > VAR_2 = new TYPE_2 ( VAR_1 , VAR_3 ) ; VAR_4 . METHOD_1 ( ( ( VAR_5 ) + STRING_1 ) , VAR_2 , VAR_6 class ) ; }","public void delete ( TYPE_1 VAR_1 ) { VAR_4 . METHOD_1 ( ( ( VAR_5 ) + STRING_1 ) , VAR_1 , VAR_6 class ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",5442
"static TYPE_1 METHOD_1 ( TYPE_1 b ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_1 ( VAR_2 ) ; return new TYPE_1 ( VAR_1 , VAR_3 . id , VAR_3 . height , VAR_4 , VAR_5 , VAR_6 ) ; }","static TYPE_1 METHOD_1 ( TYPE_1 b ) { return new TYPE_1 ( TYPE_2 . METHOD_1 ( VAR_2 ) , VAR_3 . id , VAR_3 . height , VAR_4 , VAR_5 , VAR_6 ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5444
"public java.lang.Object METHOD_1 ( java.lang.String id , java.lang.Class < ? > type ) { java.lang.Object VAR_1 = VAR_2 . get ( id ) ; if ( VAR_1 == null ) { VAR_3 . METHOD_2 ( STRING_1 , type , id ) ; } return VAR_1 ; }","public java.lang.Object METHOD_1 ( java.lang.String id , java.lang.Class < ? > type ) { return VAR_2 . get ( id ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete VariableRead']",5446
"protected int METHOD_1 ( final int x , final int y ) { TYPE_1 VAR_1 = new TYPE_1 ( x , y ) ; this . VAR_2 . add ( VAR_1 ) ; int VAR_3 = ( METHOD_2 ( ) ) - 1 ; return VAR_3 ; }","protected int METHOD_1 ( final int x , final int y ) { TYPE_1 p = new TYPE_1 ( x , y ) ; this . VAR_2 . add ( p ) ; return ( METHOD_2 ( ) ) - 1 ; }","['Update LocalVariable', 'Update VariableRead', 'Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5447
public java.util.List < java.lang.Integer > METHOD_1 ( ) { if ( ( VAR_1 ) >= ( VAR_2 . size ( ) ) ) { init ( ) ; } return VAR_2 . get ( ( ( VAR_1 ) ++ ) ) ; },public java.util.List < java.lang.Integer > METHOD_1 ( ) { int index = ( VAR_1 ) ++ ; if ( index >= ( VAR_2 . size ( ) ) ) { init ( ) ; } return VAR_2 . get ( index ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move UnaryOperator', 'Insert VariableRead', 'Insert VariableRead', 'Delete FieldRead']",5448
"public void METHOD_1 ( java.lang.String name , java.io.InputStream source ) throws java.io.IOException , TYPE_1 { java.lang.String VAR_1 = VAR_2 . toString ( source ) ; this . VAR_3 . put ( name , VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; }","public void METHOD_1 ( java.lang.String name , java.io.InputStream source ) throws java.io.IOException { this . VAR_3 . put ( name , VAR_2 . toString ( source ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",5449
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( STRING_1 ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( STRING_1 ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",5450
protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( ) ; if ( ( VAR_1 == null ) || ( VAR_2 == null ) ) { return ; } VAR_2 . METHOD_2 ( VAR_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return ; } METHOD_2 ( VAR_1 ) ; },"['Move BinaryOperator', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete VariableRead']",5451
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) . METHOD_6 ( true ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",5452
"public void METHOD_1 ( TYPE_1 VAR_1 ) { ++ ( VAR_2 ) ; VAR_3 . setText ( java.lang.String . METHOD_2 ( VAR_2 ) ) ; VAR_4 . METHOD_3 ( VAR_5 , VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { int n = ( java.lang.Integer.parseInt ( VAR_3 . getText ( ) ) ) + 1 ; VAR_3 . setText ( java.lang.String . METHOD_2 ( n ) ) ; VAR_4 . METHOD_3 ( VAR_5 , VAR_2 ) ; }","['Insert LocalVariable', 'Insert TypeReference', 'Insert BinaryOperator', 'Insert Invocation', 'Insert Literal', 'Insert VariableRead', 'Insert TypeAccess', 'Insert Invocation', 'Insert TypeAccess', 'Delete FieldWrite', 'Delete UnaryOperator', 'Delete TypeAccess']",5454
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.util.Scanner VAR_2 = new java.util.Scanner ( VAR_3 ) ; VAR_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5455
"public java.lang.Thread METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Thread VAR_2 = new java.lang.Thread ( VAR_1 , java.lang.String.format ( VAR_3 , VAR_4 . METHOD_2 ( ) ) ) ; VAR_2 . METHOD_3 ( true ) ; return VAR_2 ; }","public java.lang.Thread METHOD_1 ( TYPE_1 VAR_1 ) { return new java.lang.Thread ( VAR_1 , java.lang.String.format ( VAR_3 , VAR_4 . METHOD_2 ( ) ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",5456
"private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , VAR_2 ) ; METHOD_3 ( intent ) ; }",private void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5457
public int METHOD_1 ( ) { double VAR_1 = ( VAR_2 ) * INT_1 ; return ( ( int ) ( java.lang.Math.round ( VAR_1 ) ) ) ; },public int METHOD_1 ( ) { return VAR_2 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5459
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . assertEquals ( 0 , VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_2 . assertEquals ( 1 , VAR_3 . METHOD_2 ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . assertEquals ( 0 , VAR_1 . METHOD_2 ( ) ) ; }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",5460
"public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( this . VAR_2 , this . VAR_3 , this . VAR_4 , this . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( this . VAR_2 , this . VAR_3 , this . VAR_4 , this . METHOD_2 ( ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",5461
"public void METHOD_1 ( final TYPE_1 VAR_1 , final int position ) { final java.lang.String VAR_2 = VAR_3 . get ( position ) ; TYPE_2 p = VAR_4 . get ( VAR_2 ) ; VAR_5 . setText ( VAR_6 . getName ( ) ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 , final int position ) { final java.lang.String VAR_2 = VAR_3 . get ( position ) ; VAR_5 . setText ( VAR_4 . get ( VAR_2 ) . getName ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",5462
public static boolean METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( ( VAR_1 == 1 ) || ( VAR_1 == INT_1 ) ) { return true ; } return false ; },public static boolean METHOD_1 ( ) { if ( ( ( TYPE_1 . METHOD_2 ( ) ) == 1 ) || ( ( TYPE_1 . METHOD_2 ( ) ) == INT_1 ) ) { return true ; } return false ; },"['Insert BinaryOperator', 'Insert BinaryOperator', 'Insert Invocation', 'Move Literal', 'Move Invocation', 'Move FieldRead', 'Insert TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator']",5466
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; android.content.Intent intent = getIntent ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable']",5467
"public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 value = new TYPE_3 ( VAR_1 . min ( VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_3 ( ) ) ) ; return METHOD_4 ( value ) ; }","public TYPE_3 METHOD_1 ( ) throws TYPE_2 { return new TYPE_3 ( VAR_1 . min ( VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_3 ( ) ) ) ; }","['Update TypeReference', 'Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5469
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_1 = TYPE_2 . METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_6 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5471
"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int i , long VAR_2 ) { if ( i == 0 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_3 class ) ; METHOD_2 ( intent ) ; } }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int i , long VAR_2 ) { }","['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",5472
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( STRING_1 ) ; java.lang.System.out.println ( ( STRING_2 + VAR_3 ) ) ; VAR_2 . METHOD_3 ( STRING_3 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { java.lang.System.out.println ( STRING_2 ) ; VAR_2 . METHOD_3 ( STRING_3 ) ; }","['Insert TypeAccess', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator']",5473
public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( java.lang.String . METHOD_4 ( VAR_2 . getId ( ) ) ) ; },public void METHOD_1 ( android.view.View view ) { },"['Delete TypeReference', 'Delete Invocation', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",5474
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ; return new TYPE_1 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( this ) ; },"['Update ConstructorCall', 'Insert ThisAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5475
"public TYPE_1 < java.lang.String , java.lang.String > METHOD_1 ( ) { TYPE_2 < java.lang.String , java.lang.String > VAR_1 = new TYPE_2 ( context . METHOD_2 ( STRING_1 , VAR_2 class ) ) ; return VAR_1 ; }","public TYPE_1 < java.lang.Integer , java.lang.String > METHOD_1 ( ) { return new TYPE_2 ( context . METHOD_2 ( STRING_1 , VAR_2 class ) ) ; }","['Update TypeReference', 'Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5476
"public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( context ) ; if ( VAR_2 . getBoolean ( STRING_1 , true ) ) { METHOD_3 ( context ) ; } }","public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { METHOD_3 ( context ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",5477
private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; if ( VAR_1 . METHOD_6 ( ) ) { new TYPE_2 ( ) . execute ( ) ; } },private void METHOD_1 ( ) { if ( VAR_1 . METHOD_6 ( ) ) { new TYPE_2 ( ) . execute ( ) ; } },"['Insert TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",5478
"public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 response = VAR_3 . get ( VAR_4 class , VAR_5 , VAR_1 , VAR_2 ) ; return TYPE_4 . METHOD_2 ( response . METHOD_3 ( ) ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 response = VAR_3 . get ( VAR_4 class , VAR_5 , VAR_1 ) ; return TYPE_4 . METHOD_2 ( response . METHOD_3 ( ) ) ; }",['Delete VariableRead'],5480
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , VAR_2 class ) ; METHOD_2 ( intent ) ; METHOD_3 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation']",5481
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = METHOD_2 ( METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ; TYPE_2 VAR_3 = TYPE_3 . METHOD_5 ( ) . get ( VAR_2 ) ; return VAR_3 . METHOD_6 ( ) ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_2 VAR_3 = TYPE_3 . METHOD_5 ( ) . get ( VAR_2 ) ; return VAR_3 . METHOD_6 ( ) ; },"['Move Invocation', 'Delete Invocation']",5483
public void METHOD_1 ( ) { METHOD_2 ( ) ; int VAR_1 = TYPE_1 . METHOD_3 ( ) ; VAR_2 . get ( ( VAR_1 - 1 ) ) . METHOD_4 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Invocation']",5484
public void update ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_3 . update ( VAR_1 ) ; },public void update ( TYPE_1 VAR_1 ) { VAR_3 . update ( VAR_1 ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5490
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( new TYPE_4 ( VAR_2 , VAR_1 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_3 VAR_3 ) { TYPE_4 VAR_2 = new TYPE_4 ( VAR_4 , VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; }","['Insert LocalVariable', 'Update Invocation', 'Insert TypeReference', 'Move ConstructorCall', 'Move VariableRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",5491
public static java.util.Calendar METHOD_1 ( java.util.Date date ) { java.util.Calendar VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( date ) ; return VAR_1 ; },public static java.util.Calendar METHOD_1 ( java.util.Date date ) { java.util.Calendar VAR_1 = java.util.Calendar.getInstance ( ) ; VAR_1 . METHOD_2 ( date ) ; return VAR_1 ; },"['Insert Invocation', 'Insert TypeAccess', 'Delete ConstructorCall']",5492
"public java.io.File METHOD_1 ( java.lang.String id ) { java.lang.String filename = id ; java.io.File file = new java.io.File ( VAR_1 . METHOD_2 ( ) , filename ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( STRING_1 , id , file ) ; return file ; }","public java.io.File METHOD_1 ( java.lang.String id ) { java.io.File file = null ; TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( STRING_1 , id , file ) ; return file ; }","['Insert LocalVariable', 'Move TypeReference', 'Insert Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",5493
"public void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( VAR_2 ) ; VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( intent . METHOD_4 ( STRING_1 ) ) , STRING_2 ) ; METHOD_5 ( VAR_1 ) ; }","public void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( VAR_2 ) ; intent . METHOD_2 ( TYPE_1 . METHOD_3 ( intent . METHOD_4 ( STRING_1 ) ) , STRING_2 ) ; METHOD_5 ( intent ) ; }","['Update LocalVariable', 'Update VariableRead', 'Update VariableRead', 'Insert VariableRead', 'Delete FieldRead']",5495
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_1 VAR_4 = new TYPE_1 ( true , 0 , VAR_2 , 0 , 0 ) ; return VAR_4 ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { return ; }","['Delete TypeReference', 'Delete Literal', 'Delete Literal', 'Delete VariableRead', 'Delete Literal', 'Delete Literal', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead']",5499
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 response ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 == null ) { return null ; } return VAR_2 . METHOD_1 ( VAR_1 , response ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 response ) throws java.io.IOException , TYPE_4 { return METHOD_2 ( ) . METHOD_1 ( VAR_1 , response ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete VariableRead']",5500
public double METHOD_1 ( java.lang.String query ) { double VAR_1 = VAR_2 . get ( query ) . size ( ) ; return TYPE_1 . METHOD_2 ( ( ( VAR_3 ) / VAR_1 ) ) ; },public double METHOD_1 ( java.lang.String query ) { VAR_2 . get ( query ) . size ( ) ; double a = 1 ; return a ; },"['Move Invocation', 'Update LocalVariable', 'Insert Literal', 'Insert VariableRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",5501
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; boolean VAR_4 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_2 , ( STRING_3 + VAR_4 ) ) ; VAR_3 = STRING_4 ; return VAR_3 ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; VAR_2 . METHOD_3 ( STRING_2 , VAR_1 ) ; VAR_3 = STRING_4 ; return VAR_3 ; }","['Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator']",5502
public boolean METHOD_1 ( ) { java.lang.String status = METHOD_2 ( ) ; return ( status != null ) && ( VAR_1 . equals ( VAR_2 . name ( ) ) ) ; },public boolean METHOD_1 ( ) { return METHOD_2 ( ) . equals ( VAR_2 . name ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",5505
public void METHOD_1 ( ) { java.lang.Long VAR_1 = 0L ; java.lang.String result = TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 . fail ( result ) ; },public void METHOD_1 ( ) { java.lang.Long VAR_1 = 0L ; java.lang.String string = TYPE_1 . METHOD_2 ( VAR_1 ) ; },"['Update LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5506
public TYPE_1 METHOD_1 ( ) { TYPE_1 node = new TYPE_1 ( id ) ; node . METHOD_2 ( false ) ; return node ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( id ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead']",5507
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( true ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",5510
public int METHOD_1 ( ) { long VAR_1 = TYPE_1 . METHOD_2 ( ) ; int VAR_2 = METHOD_3 ( VAR_3 ) ; long VAR_4 = TYPE_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( STRING_1 + ( VAR_4 - VAR_1 ) ) ) ; return VAR_2 ; },public int METHOD_1 ( ) { return METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Invocation', 'Delete VariableRead']",5511
public void delete ( java.io.File file ) throws java.lang.Exception { boolean VAR_1 = VAR_2 . delete ( file ) ; if ( VAR_1 ) { METHOD_1 ( ) ; } },public void delete ( java.io.File file ) throws java.lang.Exception { VAR_2 . delete ( file ) ; METHOD_1 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Block', 'Delete If']",5512
"protected void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ) ; }",protected void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; },"['Insert Invocation', 'Insert FieldRead', 'Move TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5513
"protected int METHOD_1 ( java.lang.String key , TYPE_1 VAR_1 ) { int size = ( VAR_1 . METHOD_2 ( ) ) / INT_1 ; VAR_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , size , key ) ) ; return size ; }","protected int METHOD_1 ( java.lang.String key , TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) ) / INT_1 ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",5514
public boolean equals ( java.lang.Object obj ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; return ( ( this . x ) == ( VAR_2 . x ) ) && ( ( this . y ) == ( VAR_2 . y ) ) ; },public boolean equals ( TYPE_1 VAR_1 ) { return ( ( this . x ) == ( VAR_2 . x ) ) && ( ( this . y ) == ( VAR_2 . y ) ) ; },"['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete LocalVariable']",5515
public TYPE_1 METHOD_1 ( java.lang.String node ) { int size = VAR_1 . get ( node ) . size ( ) ; return VAR_1 . get ( node ) . get ( ( size - 1 ) ) ; },public TYPE_1 METHOD_1 ( java.lang.String node ) { return VAR_1 . get ( node ) . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5516
"public int METHOD_1 ( int id , java.lang.String name , java.util.List < java.lang.String > VAR_1 ) { long VAR_2 = METHOD_2 ( name , VAR_1 ) ; METHOD_3 ( id ) ; return ( ( int ) ( VAR_2 ) ) ; }","public void METHOD_1 ( int id , java.lang.String name , java.util.List < java.lang.String > VAR_1 ) { METHOD_2 ( name , VAR_1 ) ; METHOD_3 ( id ) ; }","['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Return']",5519
"protected void METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 = new TYPE_2 ( METHOD_4 ( ) , METHOD_5 ( ) , METHOD_6 ( ) , VAR_1 , VAR_3 ) ; }","protected void METHOD_1 ( ) { VAR_2 = new TYPE_2 ( METHOD_4 ( ) , METHOD_5 ( ) , METHOD_6 ( ) ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete FieldRead']",5521
"public TYPE_1 METHOD_1 ( java.io.InputStream VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 = VAR_4 ; TYPE_1 VAR_5 = TYPE_3 . METHOD_2 ( VAR_1 , null , VAR_2 ) ; TYPE_4 . METHOD_3 ( VAR_1 ) ; return VAR_5 ; }",public TYPE_1 METHOD_1 ( java.io.InputStream VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_5 = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( VAR_1 ) ; return VAR_5 ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete FieldWrite', 'Delete FieldRead', 'Delete Assignment', 'Delete Literal', 'Delete VariableRead']",5522
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; VAR_2 . start ( ) ; },public static void main ( java.lang.String [ ] args ) { new TYPE_1 ( new TYPE_2 ( ) ) . start ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess']",5523
"public java.lang.String METHOD_1 ( java.util.Map VAR_1 ) throws java.lang.Exception { java.util.Date VAR_2 = new java.util.Date ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( STRING_1 ) ; java.lang.String date = VAR_4 . format ( VAR_2 ) ; VAR_5 . put ( STRING_2 , date ) ; return STRING_3 ; }",public java.lang.String METHOD_1 ( ) throws java.lang.Exception { return STRING_3 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5524
public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",5525
protected boolean METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; return ( VAR_1 == null ) || ( VAR_2 . equals ( VAR_3 ) ) ; },protected boolean METHOD_1 ( ) { return METHOD_2 ( ) . equals ( VAR_3 ) ; },"['Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",5527
private void METHOD_1 ( int VAR_1 ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; METHOD_4 ( true ) ; java.lang.String VAR_2 = java.lang.Integer.toString ( VAR_3 ) ; VAR_4 . setText ( VAR_2 ) ; },private void METHOD_1 ( int VAR_1 ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; METHOD_4 ( true ) ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5528
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { java.lang.System.out.println ( STRING_1 ) ; } else { VAR_3 . add ( VAR_1 ) ; } },public void METHOD_1 ( ) { VAR_3 . add ( VAR_2 . METHOD_2 ( ) ) ; },"['Insert Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",5531
"public static boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { return true ; } return ! ( VAR_2 . getBoolean ( VAR_3 , STRING_1 , false , null ) ) ; }","public static boolean METHOD_1 ( ) { return ! ( TYPE_2 . METHOD_2 ( ) . getBoolean ( VAR_3 , STRING_1 , false , null ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess']",5532
public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; return VAR_2 . format ( date ) ; },public java.util.Date METHOD_1 ( ) { return date ; },"['Update TypeReference', 'Move FieldRead', 'Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",5533
"private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { int VAR_3 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_4 . add ( TYPE_3 . METHOD_3 ( VAR_3 ) ) ; }","private static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_3 ) { VAR_4 . add ( TYPE_3 . METHOD_3 ( VAR_3 ) ) ; }","['Update Parameter', 'Move TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable']",5534
private void METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; METHOD_3 ( VAR_1 ) ; },private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; METHOD_3 ( VAR_1 ) ; },"['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",5535
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_2 , VAR_3 . METHOD_4 ( ) ) ; return STRING_3 ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { VAR_2 . METHOD_3 ( STRING_1 , VAR_1 ) ; return STRING_3 ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",5536
"public boolean METHOD_1 ( ) { VAR_1 . METHOD_2 ( true , STRING_1 ) ; boolean VAR_2 = VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( false , STRING_1 ) ; return VAR_2 ; }",public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",5537
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { boolean VAR_2 = false ; return METHOD_1 ( VAR_1 , true , VAR_2 ) ; }","private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_1 ( VAR_1 , true ) ; }","['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable', 'Delete VariableRead']",5538
private void METHOD_1 ( int position ) { TYPE_1 item = VAR_1 . get ( position ) ; TYPE_2 VAR_2 = new TYPE_2 ( this ) ; VAR_2 . METHOD_2 ( item ) ; VAR_1 . remove ( position ) ; VAR_3 . METHOD_3 ( ) ; },private void METHOD_1 ( int position ) { TYPE_2 VAR_2 = new TYPE_2 ( this ) ; VAR_2 . METHOD_1 ( position ) ; },"['Update Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",5539
"public static long METHOD_1 ( long VAR_1 ) { TYPE_1 time = new TYPE_1 ( ) ; VAR_2 . set ( VAR_1 ) ; int VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 ) ; return time . METHOD_3 ( VAR_3 ) ; }",public static long METHOD_1 ( long VAR_1 ) { return VAR_1 ; },"['Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5540
"public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { java.lang.String key = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . remove ( key , false ) ; VAR_1 . METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { VAR_1 . METHOD_3 ( ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",5541
"public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { }","['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5542
public static void main ( java.lang.String [ ] args ) { TYPE_1 main = new TYPE_1 ( ) ; VAR_1 . start ( ) ; return ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 start = new TYPE_1 ( ) ; },"['Update LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return']",5543
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; if ( ( VAR_1 . METHOD_2 ( ) ) == null ) { return VAR_2 ; } return null ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",5545
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( ) { return VAR_2 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead']",5546
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; },public void METHOD_1 ( ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; },"['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",5549
"public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 name , TYPE_3 VAR_1 , TYPE_2 VAR_2 ) { java.lang.Integer VAR_3 = INT_1 + ( VAR_4 . getValue ( ) . METHOD_2 ( ) ) ; return VAR_5 . METHOD_3 ( name , VAR_3 , VAR_2 ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 name , TYPE_3 VAR_1 , TYPE_2 VAR_2 ) { java.lang.Integer VAR_3 = VAR_4 . getValue ( ) . METHOD_2 ( ) ; return VAR_5 . METHOD_3 ( name , VAR_3 , VAR_2 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",5550
"private void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { TYPE_2 < TYPE_3 , TYPE_4 , TYPE_1 > . VAR_3 VAR_4 = METHOD_2 ( VAR_1 ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_1 ( VAR_2 ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { METHOD_2 ( VAR_1 ) . METHOD_1 ( VAR_2 ) ; }","['Insert Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",5551
"public static java.io.InputStream METHOD_1 ( java.lang.Object VAR_1 , java.lang.String url ) throws java.io.IOException { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 , null ) ; return VAR_2 . METHOD_1 ( url ) ; }","public static java.io.InputStream METHOD_1 ( java.lang.Object VAR_1 , java.lang.String url ) throws java.io.IOException { return TYPE_1 . METHOD_1 ( VAR_1 , null ) ; }","['Insert TypeAccess', 'Move VariableRead', 'Move Literal', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",5552
"public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( this ) ; METHOD_4 ( VAR_3 . build ( ) , 0 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",5553
private java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; java.lang.String fileName = VAR_1 + STRING_2 ; return fileName + STRING_3 ; },private java.lang.String METHOD_1 ( ) { java.lang.String fileName = STRING_2 ; return fileName + STRING_3 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator']",5555
"public static < TYPE_1 > java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( new TYPE_3 ( ) ) ; VAR_3 . METHOD_2 ( STRING_1 , VAR_2 ) ; return VAR_3 . METHOD_3 ( VAR_1 ) ; }","public static < TYPE_1 > java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( STRING_1 , VAR_2 ) ; return VAR_3 . METHOD_3 ( VAR_1 ) ; }",['Delete ConstructorCall'],5556
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String key = VAR_1 . METHOD_2 ( ) ; int index = VAR_2 . METHOD_3 ( key ) ; VAR_3 . remove ( index ) ; VAR_4 . remove ( index ) ; METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String key = VAR_1 . METHOD_2 ( ) ; VAR_3 . remove ( key ) ; METHOD_4 ( ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5558
public static java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; return VAR_1 ; },public static java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Return']",5559
"public TYPE_1 METHOD_1 ( boolean VAR_1 , final TYPE_2 VAR_2 ) { final TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 , VAR_1 ) ; return super . METHOD_3 ( VAR_3 ) ; }","public TYPE_1 METHOD_1 ( final TYPE_2 VAR_2 ) { final TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 , true ) ; return super . METHOD_3 ( VAR_3 ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",5560
public static void main ( java.lang.String [ ] args ) { java.util.Date VAR_1 = new java.util.Date ( ) ; java.lang.System.out.println ( VAR_2 . getTime ( ) ) ; },public static void main ( java.lang.String [ ] args ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",5561
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_3 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . execute ( VAR_1 ) ; },public void METHOD_1 ( ) throws TYPE_1 { VAR_2 . execute ( new TYPE_3 ( ) ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",5562
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; this . VAR_2 = VAR_1 ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { this . VAR_2 = new TYPE_1 ( ) ; return this . VAR_2 ; },"['Move ConstructorCall', 'Insert FieldRead', 'Insert ThisAccess', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",5564
public void METHOD_1 ( long VAR_1 ) { long VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( ( ( VAR_3 ) + ( VAR_2 * ( METHOD_4 ( ) ) ) ) ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; },public void METHOD_1 ( long VAR_1 ) { VAR_4 . METHOD_5 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Invocation']",5567
"private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 = new TYPE_2 < TYPE_1 > ( this , VAR_4 , VAR_1 ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; }","private void METHOD_1 ( ) { TYPE_2 < TYPE_1 > VAR_3 = new TYPE_2 < TYPE_1 > ( this , VAR_4 , VAR_2 . METHOD_2 ( ) ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; }","['Update LocalVariable', 'Update TypeReference', 'Move ConstructorCall', 'Insert VariableRead', 'Move Invocation', 'Delete VariableRead', 'Delete FieldWrite', 'Delete Assignment', 'Delete TypeAccess']",5568
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . add ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( ) { VAR_3 . add ( VAR_2 . METHOD_2 ( ) ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",5569
public static void main ( java.lang.String [ ] args ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; },public static void main ( java.lang.String [ ] args ) throws TYPE_1 { new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete TypeReference', 'Delete LocalVariable']",5570
"public void METHOD_1 ( android.view.View view ) { java.lang.String name = getName ( context ) ; METHOD_2 ( context ) ; int VAR_1 = INT_1 ; int VAR_2 = INT_1 ; int VAR_3 = INT_2 ; METHOD_3 ( context , VAR_1 , VAR_2 , VAR_3 , name ) ; }","public void METHOD_1 ( android.view.View view ) { METHOD_2 ( context ) ; int VAR_1 = INT_1 ; int VAR_2 = INT_1 ; METHOD_3 ( context , VAR_1 , VAR_2 , getName ( context ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",5571
public TYPE_1 METHOD_1 ( TYPE_2 ... VAR_1 ) { TYPE_3 answer = new TYPE_3 ( ) ; METHOD_2 ( answer ) ; VAR_2 . to ( VAR_1 ) ; return ( ( TYPE_1 ) ( this ) ) ; },public TYPE_1 METHOD_1 ( TYPE_2 ... VAR_1 ) { return to ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeReference', 'Delete ThisAccess']",5572
public java.lang.String METHOD_1 ( java.lang.String string ) { java.lang.String result = VAR_1 . trim ( ) ; return VAR_2 . substring ( METHOD_2 ( ) . length ( ) ) ; },public java.lang.String METHOD_1 ( java.lang.String string ) { return VAR_1 . substring ( METHOD_2 ( ) . length ( ) ) ; },"['Move TypeAccess', 'Delete TypeReference', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess']",5573
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . get ( VAR_4 . get ( VAR_2 ) ) . get ( VAR_2 ) . METHOD_1 ( VAR_1 , false ) ; }","public void METHOD_1 ( java.lang.String VAR_2 , TYPE_1 VAR_1 ) { VAR_3 . get ( VAR_4 . get ( VAR_2 ) ) . get ( VAR_2 ) . METHOD_1 ( VAR_1 ) ; }","['Insert Parameter', 'Move TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete Literal']",5574
"public void METHOD_1 ( TYPE_1 node ) { long VAR_1 = VAR_2 ; java.lang.String VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_4 . put ( ( ( node . METHOD_3 ( ) ) + VAR_3 ) , node ) ; }","public void METHOD_1 ( TYPE_1 node ) { VAR_4 . put ( node . METHOD_3 ( ) , node ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete BinaryOperator']",5575
"public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_4 . show ( this , VAR_5 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { METHOD_4 ( ) ; VAR_4 . show ( this , VAR_5 ) ; }","['Delete TypeReference', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",5576
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5581
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return VAR_1 ; } java.util.Date date = TYPE_1 . METHOD_2 ( VAR_1 ) ; return TYPE_1 . METHOD_3 ( date ) ; },public java.lang.String METHOD_1 ( ) { return VAR_1 ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Return']",5582
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; TYPE_2 VAR_2 = new TYPE_3 ( ) . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; assertTrue ( VAR_2 . METHOD_4 ( STRING_1 ) ) ; },public void METHOD_1 ( ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",5583
public java.lang.Integer METHOD_1 ( ) { java.util.List < java.lang.Integer > VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_3 . isEmpty ( ) ) return null ; else return VAR_3 . get ( 0 ) ; },public java.lang.Integer METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) . get ( 0 ) ; },"['Insert Return', 'Insert Invocation', 'Move Invocation', 'Move Literal', 'Delete TypeReference', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",5584
"private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ; VAR_4 . METHOD_4 ( VAR_3 , VAR_2 ) ; }",private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",5585
"public static TYPE_1 METHOD_1 ( android.view.View view , TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( view ) ; new TYPE_3 ( view , VAR_1 , VAR_2 ) ; return VAR_2 ; }","public static TYPE_3 METHOD_1 ( android.view.View view , TYPE_2 VAR_1 ) { return new TYPE_3 ( view , VAR_1 , new TYPE_1 ( view , 0 ) ) ; }","['Update TypeReference', 'Move ConstructorCall', 'Move ConstructorCall', 'Insert Literal', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead']",5586
"public static TYPE_1 METHOD_1 ( java.lang.String title , java.lang.String message ) { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( title ) , TYPE_3 . METHOD_3 ( message ) ) ; VAR_2 . show ( ) ; return VAR_1 ; }","public static TYPE_1 METHOD_1 ( java.lang.String title , java.lang.String message ) { TYPE_1 VAR_1 = new TYPE_1 ( title , message ) ; VAR_2 . show ( ) ; return VAR_1 ; }","['Update ConstructorCall', 'Move VariableRead', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",5587
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( false ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; VAR_2 . METHOD_3 ( new TYPE_4 ( ) ) ; return new TYPE_1 ( VAR_2 ) ; },public TYPE_1 METHOD_1 ( ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_3 ( new TYPE_4 ( ) ) ; return new TYPE_1 ( VAR_2 ) ; },"['Insert LocalVariable', 'Move TypeReference', 'Insert ConstructorCall', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete LocalVariable']",5588
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = ( ( ( ( VAR_2 ) + STRING_1 ) + ( getClass ( ) . METHOD_2 ( ) . toLowerCase ( ) ) ) + ( this . METHOD_3 ( ) ) ) + STRING_2 ; return VAR_1 ; },public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = ( getClass ( ) . METHOD_2 ( ) . toLowerCase ( ) ) + ( this . METHOD_3 ( ) ) ; return VAR_1 ; },"['Move BinaryOperator', 'Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",5591
public TYPE_1 METHOD_1 ( int position ) { VAR_1 . METHOD_2 ( position ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_3 ) ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( int position ) { VAR_1 . METHOD_2 ( position ) ; return TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_3 ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5592
protected void METHOD_1 ( ) { VAR_1 = false ; android.view.View VAR_2 = VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; },protected void METHOD_1 ( ) { VAR_1 = false ; },"['Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",5594
public static void main ( java.lang.String [ ] args ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_2 . start ( ) ; java.lang.System.out.println ( TYPE_3 . METHOD_1 ( ) . METHOD_2 ( ) ) ; },public static void main ( java.lang.String [ ] args ) throws TYPE_1 { java.lang.System.out.println ( TYPE_3 . METHOD_1 ( ) . METHOD_2 ( ) ) ; },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete Invocation']",5595
public TYPE_1 METHOD_1 ( java.lang.Integer VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( java.lang.Integer VAR_1 ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5598
"public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( VAR_4 , 0 ) ; VAR_1 . METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { VAR_1 . METHOD_4 ( ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",5599
public java.lang.String METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; return METHOD_1 ( VAR_1 ) ; },public java.lang.String METHOD_1 ( ) { return METHOD_1 ( METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5600
public int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = ( ( java.lang.Integer ) ( METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ) ) ; METHOD_2 ( ) . METHOD_3 ( ) ; return VAR_2 ; },public int METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( java.lang.Integer ) ( METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ) ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead']",5601
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String status ) { java.lang.String VAR_1 = ( VAR_2 ) + STRING_1 ; java.lang.String [ ] VAR_3 = new java.lang.String [ ] { status } ; java.lang.String VAR_4 = VAR_5 ; return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String status ) { java.lang.String VAR_1 = ( VAR_2 ) + STRING_1 ; java.lang.String [ ] VAR_3 = new java.lang.String [ ] { status } ; return METHOD_2 ( VAR_1 , VAR_3 ) ; }","['Delete TypeReference', 'Delete FieldRead', 'Delete LocalVariable', 'Delete VariableRead']",5603
"private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return VAR_3 . substring ( VAR_4 . length ( ) ) . trim ( ) ; }","private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String temp = VAR_3 . substring ( VAR_4 . length ( ) ) . trim ( ) ; return temp ; }","['Insert LocalVariable', 'Insert TypeReference', 'Move Invocation', 'Insert VariableRead']",5604
"public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = new TYPE_3 ( STRING_1 , VAR_2 ) ; VAR_3 . get ( STRING_2 ) . METHOD_2 ( ) ; VAR_3 . get ( STRING_2 ) . add ( VAR_1 ) ; }",public void METHOD_1 ( TYPE_1 event ) { },"['Delete TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",5605
"public static TYPE_1 METHOD_1 ( java.lang.String title , java.lang.String message ) { TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( title ) , TYPE_4 . METHOD_3 ( message ) ) ; VAR_2 . show ( ) ; return VAR_1 ; }","public static TYPE_1 METHOD_1 ( java.lang.String title , java.lang.String message ) { TYPE_2 VAR_1 = new TYPE_2 ( title , message ) ; VAR_2 . show ( ) ; return VAR_1 ; }","['Update ConstructorCall', 'Move VariableRead', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",5606
public TYPE_1 METHOD_1 ( java.lang.Class < ? extends TYPE_2 > ... VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_3 = VAR_2 ; return this ; },public TYPE_1 METHOD_1 ( java.lang.Class < ? extends TYPE_2 > ... VAR_1 ) { VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; return this ; },"['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",5607
"public VAR_1 ( ) { { TYPE_1 . METHOD_1 ( STRING_1 , STRING_2 ) ; int i = 0 ; int b = 1 ; } }","public VAR_1 ( ) { { TYPE_1 . METHOD_1 ( STRING_1 , STRING_2 ) ; int i = 0 ; } }","['Delete TypeReference', 'Delete Literal', 'Delete LocalVariable']",5608
"private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( null ) ; TYPE_3 . METHOD_4 ( null , STRING_1 ) ; }",private void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete ConstructorCall', 'Delete LocalVariable', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation']",5609
"public int METHOD_1 ( float [ ] VAR_1 , float [ ] VAR_2 ) { int answer = ( ( int ) ( TYPE_1 . METHOD_2 ( ( ( VAR_1 [ 0 ] ) - ( VAR_2 [ 0 ] ) ) ) ) ) ; return answer ; }","public int METHOD_1 ( float [ ] VAR_1 , float [ ] VAR_2 ) { return ( ( int ) ( TYPE_1 . METHOD_2 ( ( ( VAR_1 [ 0 ] ) - ( VAR_2 [ 0 ] ) ) ) ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete LocalVariable', 'Delete VariableRead']",5610
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , java.lang.Integer id , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_5 . METHOD_1 ( id , VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , java.lang.Integer id , TYPE_3 VAR_2 ) { VAR_5 . METHOD_1 ( id , VAR_2 ) ; }","['Delete TypeReference', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete VariableRead']",5612
"public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { java.lang.String VAR_1 = intent . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( STRING_1 , VAR_1 ) ; android.content.Intent VAR_2 = new android.content.Intent ( context , VAR_3 class ) ; context . METHOD_4 ( VAR_2 ) ; }","public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { android.content.Intent VAR_2 = new android.content.Intent ( context , VAR_3 class ) ; context . METHOD_4 ( VAR_2 ) ; }","['Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete LocalVariable', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",5613
