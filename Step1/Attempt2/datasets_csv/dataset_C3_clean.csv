fixed,buggy,baseline_ast_gumtree,line_id_tp_dataset
"private static void METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 ) { }","private static native void METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 ) ;",['Insert Wra'],1
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_3 message = TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 ) ; if ( message != null ) { TYPE_4 . METHOD_3 ( message ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_3 message = TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 ) ; if ( message != null ) { TYPE_4 . METHOD_3 ( TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 ) ) ; } }","['Insert Invocation', 'Insert TypeAccess', 'Insert VariableRead', 'Insert VariableRead', 'Delete VariableRead']",2
"static boolean equals ( java.lang.Object a , java.lang.Object b ) { if ( a == null ) return b == null ; return VAR_1 . equals ( b ) ; }","private boolean equals ( java.lang.Object a , java.lang.Object b ) { if ( a == null ) return b == null ; return VAR_1 . equals ( b ) ; }",['Update Wra'],3
private int METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return 0 ; } if ( TYPE_1 . METHOD_3 ( ) ) { return INT_1 ; } else { return INT_2 ; } },private int METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return 0 ; } if ( TYPE_1 . METHOD_3 ( getActivity ( ) ) ) { return INT_1 ; } else { return INT_2 ; } },['Insert Invocation'],4
protected java.util.Date METHOD_1 ( ) { return VAR_1 ; },public java.util.Date METHOD_1 ( ) { return VAR_1 ; },['Update Wra'],5
"public TYPE_1 < java.lang.Integer > METHOD_1 ( int VAR_1 , int VAR_2 ) { return new TYPE_1 ( ( VAR_1 / VAR_2 ) , METHOD_2 ( VAR_1 , VAR_2 ) ) ; }","public TYPE_1 < java.lang.Integer > METHOD_1 ( int VAR_1 , int VAR_2 ) { return new TYPE_1 ( ( VAR_1 / VAR_2 ) , ( VAR_1 % VAR_2 ) ) ; }","['Update ConstructorCall', 'Insert BinaryOperator', 'Move VariableRead', 'Move VariableRead', 'Delete Invocation']",6
"public TYPE_1 METHOD_1 ( java.lang.String event , long VAR_1 , boolean VAR_2 ) { return METHOD_2 ( event , STRING_1 , STRING_1 , VAR_1 , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String event , long VAR_1 , boolean VAR_2 ) { return METHOD_2 ( event , STRING_1 , VAR_1 , VAR_2 ) ; }",['Delete TypeAccess'],7
"protected void METHOD_1 ( TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_1 ) { METHOD_2 ( VAR_1 , 1 ) ; METHOD_3 ( VAR_1 , 1 ) ; }","private void METHOD_1 ( TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_1 ) { METHOD_2 ( VAR_1 , 1 ) ; METHOD_3 ( VAR_1 , 1 ) ; }",['Update Wra'],8
"public TYPE_1 build ( ) { if ( ( VAR_1 ) == null ) { throw new TYPE_2 ( STRING_1 ) ; } return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 . build ( ) , VAR_4 , VAR_5 ) ; }","public TYPE_1 build ( ) { if ( ( VAR_1 ) == null ) { throw new TYPE_2 ( STRING_1 ) ; } return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 . build ( ) , VAR_4 ) ; }",['Delete FieldRead'],9
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . init ( ) ; VAR_1 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . init ( ) ; VAR_2 . start ( ) ; },"['Update Invocation', 'Insert TypeAccess', 'Delete VariableRead']",10
public int METHOD_1 ( ) { return this . VAR_1 = VAR_1 ; },public METHOD_1 ( int VAR_1 ) { return this . VAR_1 = VAR_1 ; },"['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead', 'Delete TypeReference', 'Delete FieldRead']",12
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return false ; }",['Update Literal'],13
protected java.util.Set < TYPE_1 > METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 . METHOD_3 ( METHOD_5 ( ) ) ; return VAR_1 ; },private java.util.Set < TYPE_1 > METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 . METHOD_3 ( METHOD_5 ( ) ) ; return VAR_1 ; },['Update Wra'],15
"java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.List < TYPE_2 > VAR_3 , java.lang.String VAR_4 ) ;","java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.List < TYPE_2 > VAR_3 ) ;","['Delete TypeReference', 'Delete Parameter']",16
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) . METHOD_4 ( false ) ; TYPE_1 . METHOD_5 ( VAR_1 ) ; boolean result = VAR_3 . METHOD_3 ( VAR_2 ) ; TYPE_2 . METHOD_6 ( result ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) . METHOD_4 ( false ) ; TYPE_1 . METHOD_5 ( VAR_1 ) ; boolean result = VAR_3 . METHOD_3 ( VAR_2 ) ; METHOD_6 ( result ) ; },['Update TypeAccess'],17
"private void METHOD_1 ( ) { new TYPE_1 ( this ) . execute ( VAR_1 . toString ( ) , VAR_2 . getText ( ) . toString ( ) , VAR_3 , ""true"" , STRING_1 ) ; }","private void METHOD_1 ( ) { new TYPE_1 ( this ) . execute ( VAR_1 . toString ( ) , VAR_2 . getText ( ) . toString ( ) , VAR_3 , ""true"" ) ; }",['Delete TypeAccess'],19
private int METHOD_1 ( int VAR_1 ) { return ( ( ( VAR_2 . getId ( ) ) < < INT_1 ) | ( ( ( VAR_3 ) & INT_2 ) < < INT_3 ) ) | ( VAR_1 & INT_4 ) ; },private int METHOD_1 ( int VAR_1 ) { return ( ( ( this . VAR_2 . getId ( ) ) < < INT_1 ) | ( ( ( this . VAR_3 ) & INT_2 ) < < INT_3 ) ) | ( VAR_1 & INT_4 ) ; },"['Insert FieldRead', 'Insert ThisAccess', 'Insert ThisAccess', 'Delete TypeAccess']",20
"public void METHOD_1 ( TYPE_1 writer ) throws java.io.IOException { if ( ( this . VAR_1 ) != null ) { writer . METHOD_2 ( VAR_2 , INT_1 , TYPE_2 . METHOD_3 ( this . VAR_1 . METHOD_4 ( ) ) ) ; } }","public void METHOD_1 ( TYPE_1 writer ) throws java.io.IOException { if ( ( this . VAR_1 ) == null ) { } else { writer . METHOD_2 ( VAR_2 , INT_1 , TYPE_2 . METHOD_3 ( this . VAR_1 . METHOD_4 ( ) ) ) ; } }","['Update BinaryOperator', 'Insert Block', 'Move Invocation']",21
"public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( new TYPE_2 ( STRING_1 ) ) . execute ( STRING_2 , true ) ; org.testng.Assert.assertEquals ( VAR_3 . size ( ) , 1 ) ; }","public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( new TYPE_2 ( STRING_1 ) ) . execute ( STRING_2 , true ) ; assertEquals ( VAR_3 . size ( ) , 1 ) ; }",['Delete FieldRead'],23
"public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( getInt ( STRING_1 ) ) < VAR_2 ) { METHOD_3 ( VAR_1 . METHOD_4 ( ) , getInt ( STRING_1 ) ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( getInt ( STRING_1 ) ) < VAR_2 ) { METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_2 ) ; } }","['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",24
public java.lang.Object getData ( ) { return data ; },private java.lang.Object getData ( ) { return data ; },['Update Wra'],25
public boolean METHOD_1 ( int VAR_1 ) { int VAR_2 = ( this . VAR_3 ) - VAR_1 ; return ( VAR_2 >= ( this . VAR_4 ) ) && ( VAR_2 <= ( this . VAR_5 ) ) ; },public boolean METHOD_1 ( int VAR_1 ) { int VAR_2 = ( VAR_3 ) - VAR_1 ; return ( VAR_2 >= ( VAR_4 ) ) && ( VAR_2 <= ( VAR_5 ) ) ; },"['Insert BinaryOperator', 'Insert BinaryOperator', 'Move VariableRead', 'Insert FieldRead', 'Move VariableRead', 'Insert FieldRead', 'Delete ThisAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete BinaryOperator']",26
"void METHOD_1 ( java.util.List < TYPE_1 > data , int position , java.lang.String VAR_1 , java.lang.String VAR_2 , double VAR_3 ) ;","void METHOD_1 ( java.util.List < TYPE_1 > data , int position , java.lang.String VAR_1 ) ;","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",27
public java.lang.String METHOD_1 ( ) { return message ; },private java.lang.String METHOD_1 ( ) { return message ; },['Update Wra'],28
"public java.lang.String METHOD_1 ( ) { return METHOD_2 ( METHOD_3 ( ) , true ) ; }",public java.lang.String METHOD_1 ( ) { return METHOD_2 ( METHOD_3 ( ) ) ; },['Delete Literal'],29
"public final void METHOD_1 ( java.lang.String name , java.lang.String value ) { if ( VAR_1 . METHOD_2 ( name ) ) { VAR_1 . METHOD_1 ( name , value ) ; } else { METHOD_3 ( name , value ) ; } }","protected final void METHOD_1 ( java.lang.String name , java.lang.String value ) { if ( VAR_1 . METHOD_2 ( name ) ) { VAR_1 . METHOD_1 ( name , value ) ; } else { METHOD_3 ( name , value ) ; } }",['Update Wra'],30
public boolean METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { return true ; } return false ; },public boolean METHOD_1 ( ) { if ( ! ( this . VAR_1 . isEmpty ( ) ) ) { return true ; } return false ; },"['Insert FieldRead', 'Insert ThisAccess', 'Delete TypeAccess']",31
"public void METHOD_1 ( ) { VAR_1 . put ( 0 , ""0"" ) ; assertThat ( VAR_1 . size ( ) , TYPE_1 . METHOD_2 ( 1 ) ) ; }","public void METHOD_1 ( ) { VAR_1 . put ( 1 , ""0"" ) ; assertThat ( VAR_1 . size ( ) , TYPE_1 . METHOD_2 ( 1 ) ) ; }",['Update Literal'],32
"public void METHOD_1 ( TYPE_1 view , int VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . setText ( ( ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_1 ) + VAR_3 ) ) ; }","public void METHOD_1 ( TYPE_1 view , int VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . setText ( ( ( ( ( VAR_2 + STRING_1 ) + VAR_3 ) + STRING_1 ) + VAR_1 ) ) ; }","['Move BinaryOperator', 'Move VariableRead', 'Move BinaryOperator', 'Move VariableRead']",33
"public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) { VAR_2 . METHOD_2 ( true ) ; return new TYPE_4 ( VAR_3 , VAR_2 , VAR_4 , VAR_5 ) . METHOD_1 ( VAR_1 ) ; }","public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) { VAR_2 . METHOD_2 ( ) ; return new TYPE_4 ( VAR_3 , VAR_2 , VAR_4 , VAR_5 ) . METHOD_1 ( VAR_1 ) ; }",['Delete Literal'],34
"int METHOD_1 ( TYPE_1 obj , short [ ] data , int VAR_1 , double VAR_2 , int VAR_3 ) ;","int METHOD_1 ( TYPE_1 obj , short [ ] data , long VAR_1 , double VAR_2 , int VAR_3 ) ;",['Update TypeReference'],35
public TYPE_1 iterator ( ) { return new TYPE_2 ( ) ; },public TYPE_1 iterator ( ) { return null ; },"['Insert Literal', 'Delete ConstructorCall']",36
private static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( ) . METHOD_1 ( ) . toString ( ) . toLowerCase ( VAR_1 ) ; },private static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( ) . METHOD_1 ( ) . toString ( ) . toLowerCase ( ) ; },['Delete TypeAccess'],37
"private TYPE_1 METHOD_1 ( ) { return METHOD_2 ( STRING_1 , new TYPE_2 ( this . VAR_1 ) ) ; }","private TYPE_1 METHOD_1 ( ) { return METHOD_2 ( STRING_1 , new TYPE_2 ( ) ) ; }","['Delete ThisAccess', 'Delete FieldRead']",38
"public void METHOD_1 ( int i , java.lang.String VAR_1 , boolean b ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( new TYPE_1 ( VAR_1 ) , true ) ; METHOD_4 ( ( STRING_1 + VAR_1 ) , VAR_4 ) ; }","public void METHOD_1 ( int i , java.lang.String VAR_1 , boolean b ) { VAR_2 . METHOD_2 ( ) ; }","['Delete TypeAccess', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Literal', 'Delete Invocation', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation']",39
public int METHOD_1 ( ) { return VAR_1 ; },public int METHOD_1 ( ) { java.lang.System.out.println ( VAR_1 ) ; return VAR_1 ; },"['Insert Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Insert TypeAccess']",40
private static void add ( int value ) { if ( ( VAR_1 . length ) <= ( VAR_2 . size ) ) { TYPE_1 . METHOD_1 ( ) ; } VAR_3 [ ( ( VAR_2 . size ) ++ ) ] = value ; },private static void add ( int value ) { if ( ( VAR_1 . length ) >= ( VAR_2 . size ) ) { TYPE_1 . METHOD_1 ( ) ; } VAR_3 [ ( ( VAR_2 . size ) ++ ) ] = value ; },['Update BinaryOperator'],41
"public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , INT_1 ) ; }","public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 ) ; }",['Delete TypeAccess'],43
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ""true"" ) ; boolean VAR_2 = VAR_1 . METHOD_3 ( VAR_3 , new java.util.HashMap < > ( ) ) ; VAR_4 . assertTrue ( VAR_2 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ""true"" , true ) ; boolean VAR_2 = VAR_1 . METHOD_3 ( VAR_3 , new java.util.HashMap < > ( ) ) ; VAR_4 . assertTrue ( VAR_2 ) ; }",['Insert Literal'],44
"public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { VAR_3 . remove ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; path [ VAR_4 ] = VAR_1 ; VAR_5 [ VAR_4 ] = VAR_2 ; ( VAR_4 ) ++ ; }","public static void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { VAR_3 . remove ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; path [ VAR_4 ] = VAR_1 ; VAR_5 [ VAR_4 ] = VAR_2 ; ( VAR_4 ) ++ ; }",['Insert Wra'],46
public double METHOD_1 ( ) { return ( ( VAR_1 ) / ( VAR_2 . getValue ( ) ) ) * INT_1 ; },private double METHOD_1 ( ) { return ( ( VAR_1 ) / ( VAR_2 . getValue ( ) ) ) * INT_1 ; },['Update Wra'],47
"protected void METHOD_1 ( TYPE_1 VAR_1 , int length ) throws TYPE_2 { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_1 , length ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , int length ) throws TYPE_2 { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_4 ( VAR_1 , length ) ; }","['Delete VariableRead', 'Delete Invocation']",48
"public boolean METHOD_1 ( int index , long VAR_1 ) { return ( VAR_2 . get ( index ) . getValue ( ) ) == VAR_1 ; }","public boolean METHOD_1 ( int index , int VAR_1 ) { return ( VAR_2 . get ( index ) . intValue ( ) ) == VAR_1 ; }","['Update TypeReference', 'Update Invocation']",49
"private < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 , java.lang.Class < ? extends TYPE_2 > VAR_2 , int VAR_3 , TYPE_3 VAR_4 ) { return VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","private < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 , java.lang.Class < ? extends TYPE_2 > VAR_2 ) { return VAR_5 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead']",50
public void METHOD_1 ( java.lang.Class < ? extends TYPE_1 > VAR_1 ) { VAR_2 = VAR_1 ; },public void METHOD_1 ( java.lang.Class < ? extends TYPE_1 > VAR_1 ) { this . VAR_2 = VAR_1 ; },['Insert ThisAccess'],52
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) && ( VAR_1 . METHOD_4 ( ) . METHOD_3 ( VAR_2 ) ) ; },public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) && ( VAR_1 . METHOD_4 ( ) . METHOD_3 ( VAR_2 ) ) ; },"['Update Wra', 'Insert Wra']",53
private long METHOD_1 ( long VAR_1 ) { return ( ( long ) ( VAR_1 > > > INT_1 ) ) ; },private long METHOD_1 ( long VAR_1 ) { return ( ( int ) ( VAR_1 > > INT_1 ) ) ; },"['Update BinaryOperator', 'Update TypeReference']",54
"private void METHOD_1 ( java.lang.String src , java.lang.String VAR_1 ) throws java.io.IOException { }","public void METHOD_1 ( java.lang.String src , java.lang.String VAR_1 ) throws java.io.IOException { }",['Update Wra'],55
private boolean METHOD_1 ( int VAR_1 ) { return ( VAR_1 <= INT_1 ) && ( VAR_1 >= 0 ) ; },private boolean METHOD_1 ( int VAR_1 ) { return ( VAR_1 <= INT_1 ) && ( VAR_1 >= 1 ) ; },['Update Literal'],57
public TYPE_1 METHOD_1 ( ) { TYPE_1 state ; switch ( VAR_1 . METHOD_2 ( ) ) { case VAR_2 : state = VAR_3 ; break ; case VAR_4 : state = VAR_5 ; break ; default : state = VAR_6 ; } return state ; },public TYPE_1 METHOD_1 ( ) { TYPE_1 state ; switch ( VAR_1 . METHOD_2 ( ) ) { case VAR_2 : state = VAR_3 ; break ; case VAR_4 : state = VAR_3 ; break ; default : state = VAR_6 ; } return state ; },['Update FieldRead'],58
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String error , TYPE_1 VAR_2 ) { if ( VAR_3 . equals ( true ) ) { return STRING_1 ; } else { VAR_2 . METHOD_2 ( STRING_1 , new TYPE_2 ( ) ) ; return STRING_1 ; } }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_3 . equals ( true ) ) { return STRING_1 ; } else { VAR_2 . METHOD_2 ( STRING_1 , new TYPE_2 ( ) ) ; return STRING_1 ; } }","['Delete TypeReference', 'Delete Parameter']",60
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( VAR_2 = new TYPE_1 ( this ) ) ) ; },"private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( VAR_2 = new TYPE_1 ( context , name ) ) ) ; }","['Update ConstructorCall', 'Insert FieldRead', 'Insert FieldRead', 'Delete ThisAccess']",61
public void METHOD_1 ( ) { if ( ( VAR_1 ) <= 0 ) { VAR_1 = 0 ; } else { VAR_1 += step ; } METHOD_2 ( ) ; },public void METHOD_1 ( ) { if ( ( VAR_1 ) < 0 ) { VAR_1 = 0 ; } else { VAR_1 += step ; } METHOD_2 ( ) ; },['Update BinaryOperator'],63
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , new TYPE_3 ( VAR_1 ) , VAR_4 , VAR_5 , VAR_6 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , new TYPE_3 ( VAR_1 ) , VAR_4 , VAR_6 ) ; }",['Delete FieldRead'],64
"public java.lang.String METHOD_1 ( java.util.ArrayList < java.lang.String > list ) { java.lang.String token = STRING_1 ; int position = METHOD_2 ( list , token , INT_1 ) ; java.lang.String VAR_1 = VAR_2 . get ( position ) ; return METHOD_3 ( VAR_1 ) ; }","public java.lang.String METHOD_1 ( java.util.ArrayList < java.lang.String > list ) { java.lang.String token = STRING_1 ; int position = METHOD_2 ( list , token ) ; java.lang.String VAR_1 = VAR_2 . get ( position ) ; return METHOD_3 ( VAR_1 ) ; }",['Delete TypeAccess'],65
protected void METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 { METHOD_2 ( VAR_1 ) ; },protected void METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 { METHOD_1 ( VAR_1 ) ; },['Update Invocation'],68
"private void METHOD_1 ( int i ) { VAR_1 . METHOD_2 ( 0 , i ) ; }",private void METHOD_1 ( int i ) { VAR_1 . METHOD_2 ( i ) ; },['Delete Literal'],69
public TYPE_1 METHOD_1 ( ) { this . VAR_1 = this . VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_1 ( ) ; return this ; },public TYPE_1 METHOD_1 ( ) { this . VAR_1 = this . VAR_2 . METHOD_2 ( ) . METHOD_1 ( ) ; return this ; },"['Update Invocation', 'Move Invocation', 'Delete Invocation']",70
public int METHOD_1 ( int VAR_1 ) { int result = METHOD_2 ( ) ; return result ; },public int METHOD_1 ( ) { int result = METHOD_2 ( ) ; return result ; },"['Delete TypeReference', 'Delete Parameter']",72
protected synchronized void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ( VAR_1 / FLOAT_1 ) ) ; },public synchronized void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ( VAR_1 / FLOAT_1 ) ) ; },['Update Wra'],73
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return false ; } return TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 class ) ) . METHOD_4 ( ) ; },public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 class ) ) . METHOD_4 ( ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",74
"public abstract TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) throws TYPE_3 ;","public abstract TYPE_1 METHOD_1 ( TYPE_2 VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) throws TYPE_3 ;","['Delete TypeReference', 'Delete Parameter']",75
"void METHOD_1 ( TYPE_1 method , TYPE_2 VAR_1 , java.util.Map VAR_2 , java.util.Map output , java.lang.Object VAR_3 , java.lang.Throwable t ) ;","void METHOD_1 ( TYPE_1 method , TYPE_2 VAR_1 , java.util.Map VAR_2 , java.util.Map output , java.lang.Object VAR_3 ) ;","['Delete TypeReference', 'Delete Parameter']",76
public static java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return null ; } final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; return VAR_3 . isEmpty ( VAR_2 ) ? null : VAR_2 ; },public static java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; return VAR_3 . isEmpty ( VAR_2 ) ? null : VAR_2 ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",77
public final void METHOD_1 ( ) { -- ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_1 ) <= 0 ) { VAR_2 . METHOD_3 ( ) ; } },public final void METHOD_1 ( ) { -- ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_1 ) == 0 ) { VAR_2 . METHOD_3 ( ) ; } },['Update BinaryOperator'],78
"public static TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String data ) throws java.lang.Exception { return new TYPE_1 ( 1 , VAR_1 , data ) ; }","public static TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String data ) throws java.lang.Exception { return new TYPE_1 ( 1 , VAR_1 , 0 , data ) ; }","['Update ConstructorCall', 'Insert Literal']",80
public TYPE_1 METHOD_1 ( int id ) { return VAR_1 . get ( id ) ; },public TYPE_1 METHOD_1 ( long id ) { return VAR_1 . get ( id ) ; },['Update TypeReference'],81
public void METHOD_1 ( ) { float VAR_1 = this . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ( ( int ) ( VAR_1 ) ) ) ; },private void METHOD_1 ( ) { float VAR_1 = this . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ( ( int ) ( VAR_1 ) ) ) ; },['Update Wra'],82
"public TYPE_1 METHOD_1 ( java.lang.String response ) throws java.io.IOException { return new TYPE_1 ( true , response ) ; }",public TYPE_1 METHOD_1 ( java.lang.String response ) throws java.io.IOException { return null ; },"['Insert Literal', 'Delete Literal', 'Delete VariableRead', 'Delete ConstructorCall']",83
"public void METHOD_1 ( TYPE_1 c , java.lang.Throwable VAR_1 ) { if ( ( this . file ) != null ) { this . file . METHOD_2 ( ) ; } this . VAR_2 . METHOD_1 ( c , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 c , java.lang.Throwable VAR_1 ) { if ( ( this . file ) == null ) { this . file . METHOD_2 ( ) ; } this . VAR_2 . METHOD_1 ( c , VAR_1 ) ; }",['Update BinaryOperator'],84
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 ) { VAR_4 . put ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 ) ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_3 ) { VAR_4 . put ( VAR_1 , VAR_3 ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete ConstructorCall']",85
"public double diff ( ) { return VAR_1 . diff ( VAR_2 , VAR_3 ) ; }","public int diff ( ) { return VAR_1 . diff ( VAR_2 , VAR_3 ) ; }",['Update TypeReference'],86
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_1 . METHOD_2 ( this ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation']",87
public TYPE_1 METHOD_1 ( ) { if ( INT_1 <= ( VAR_1 ) ) { VAR_1 = 1 ; } return new TYPE_1 ( ( ( VAR_1 ) ++ ) ) ; },public TYPE_1 METHOD_1 ( ) { if ( INT_1 <= ( VAR_1 ) ) { VAR_1 = 0 ; } return new TYPE_1 ( ( ( VAR_1 ) ++ ) ) ; },['Update Literal'],88
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 1 , VAR_2 , false ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 0 , VAR_2 , false ) ; }",['Update Literal'],89
"public java.lang.String format ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { return VAR_1 + STRING_1 ; }","public java.lang.String format ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { return VAR_1 ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",90
public void select ( boolean VAR_1 ) { VAR_2 = STRING_1 ; VAR_3 . METHOD_1 ( VAR_2 ) ; if ( VAR_1 ) { } else { } },public void select ( ) { VAR_2 = STRING_1 ; VAR_3 . METHOD_1 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Block', 'Delete Block', 'Delete If']",91
"public static void main ( java.lang.String [ ] args ) { java.util.LinkedList < TYPE_1 > VAR_1 = new java.util.LinkedList < > ( ) ; VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_3 main = new TYPE_3 ( VAR_1 , true ) ; }","public static void main ( java.lang.String [ ] args ) { java.util.LinkedList < TYPE_1 > VAR_1 = new java.util.LinkedList < > ( ) ; TYPE_3 main = new TYPE_3 ( VAR_1 , true ) ; }","['Delete TypeAccess', 'Delete ConstructorCall', 'Delete Invocation']",92
public void METHOD_1 ( long VAR_1 ) { this . VAR_1 = ( TYPE_1 . METHOD_2 ( ) ) + VAR_1 ; },public void METHOD_1 ( long VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",93
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; return new TYPE_1 ( STRING_2 , STRING_3 , STRING_4 ) ; }",public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; return new TYPE_1 ( ) ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead']",94
public boolean METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) & ( METHOD_3 ( ) ) ) & ( METHOD_4 ( ) ) ; },public boolean METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) ) ) && ( METHOD_2 ( ) ) ; },"['Update BinaryOperator', 'Update BinaryOperator', 'Update Invocation']",95
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; METHOD_3 ( VAR_2 ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_2 ) ; },"['Update TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",96
"public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , 0 ) ; return new TYPE_1 ( VAR_3 , VAR_2 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }","public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , 0 ) ; return new TYPE_1 ( VAR_3 , VAR_2 , VAR_4 , VAR_5 ) ; }","['Delete FieldRead', 'Delete FieldRead']",97
public void METHOD_1 ( java.util.List < java.lang.String > list ) { this . METHOD_2 ( new TYPE_1 ( this . context ) ) ; ( ( TYPE_1 ) ( this . METHOD_3 ( ) ) ) . METHOD_4 ( list ) ; },"public void METHOD_1 ( java.util.List < java.lang.String > list ) { this . METHOD_2 ( new TYPE_1 ( list , this . context ) ) ; }","['Move VariableRead', 'Delete TypeReference', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation']",98
"public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.String name , java.lang.Object value ) throws TYPE_1 , TYPE_2 { if ( value == null ) return ; if ( VAR_2 . equals ( ""id"" ) ) return ; super . METHOD_1 ( VAR_1 , name , value ) ; }","public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.String name , java.lang.Object value ) throws TYPE_1 , TYPE_2 { if ( value == null ) return ; super . METHOD_1 ( VAR_1 , name , value ) ; }","['Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",99
protected int size ( char c ) { return INT_1 ; },protected int size ( char c ) { return 1 ; },"['Insert Literal', 'Delete FieldRead']",100
"void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.lang.String VAR_2 ) ;",void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",101
"private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 ) { java.lang.String error = ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ; VAR_4 . add ( error ) ; }","private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 ) { java.lang.String error = ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ; this . VAR_4 . add ( error ) ; }","['Insert FieldRead', 'Insert ThisAccess', 'Delete TypeAccess']",102
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return new TYPE_1 ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_2 ) ) ; },private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return new TYPE_1 ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_2 ) ) ; },['Update Wra'],103
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( METHOD_2 ( VAR_1 , null ) ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( METHOD_2 ( VAR_1 ) ) ; },['Delete Literal'],104
"void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) ;","void METHOD_1 ( int VAR_1 , int VAR_2 ) ;","['Delete TypeReference', 'Delete Parameter']",105
"public static int sum ( int a , int b ) { return a + b ; }","public static int sum ( int a , int b ) { return a * b ; }",['Update BinaryOperator'],106
public java.io.File METHOD_1 ( ) { return VAR_1 ; },private java.io.File METHOD_1 ( ) { return VAR_1 ; },['Update Wra'],107
public java.lang.String toString ( ) { java.lang.StringBuilder result = new java.lang.StringBuilder ( INT_1 ) ; METHOD_1 ( result ) ; METHOD_2 ( result ) ; METHOD_3 ( result ) ; return VAR_1 . toString ( ) ; },public java.lang.String toString ( ) { java.lang.StringBuilder result = new java.lang.StringBuilder ( ) ; METHOD_1 ( result ) ; METHOD_2 ( result ) ; METHOD_3 ( result ) ; return VAR_1 . toString ( ) ; },"['Update ConstructorCall', 'Delete FieldRead']",108
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_4 ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_4 ) { return null ; }","['Insert Literal', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall']",109
"private boolean METHOD_1 ( float VAR_1 , android.view.View VAR_2 ) { return ( VAR_1 >= ( VAR_2 . METHOD_2 ( ) ) ) && ( VAR_1 <= ( VAR_2 . METHOD_3 ( ) ) ) ; }","private boolean METHOD_1 ( float VAR_1 , android.view.View VAR_2 ) { return ( VAR_1 > ( VAR_2 . METHOD_2 ( ) ) ) && ( VAR_1 < ( VAR_2 . METHOD_3 ( ) ) ) ; }","['Update BinaryOperator', 'Update BinaryOperator']",110
"public void METHOD_1 ( java.lang.String event , java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.Map < java.lang.String , java.lang.Object > VAR_3 , java.lang.String VAR_4 ) throws TYPE_1 ;","public void METHOD_1 ( java.lang.String event , java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.Map < java.lang.String , java.lang.Object > VAR_3 ) throws TYPE_1 ;","['Delete TypeReference', 'Delete Parameter']",111
"private static java.lang.Object METHOD_1 ( java.lang.Object VAR_1 ) { java.lang.Object VAR_2 = TYPE_1 . METHOD_2 ( int . class , TYPE_2 . METHOD_3 ( VAR_1 ) ) ; TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; return VAR_2 ; }","private static java.lang.Object METHOD_1 ( java.lang.Object VAR_1 ) { java.lang.Object VAR_2 = TYPE_1 . METHOD_2 ( int . class , TYPE_2 . METHOD_3 ( VAR_1 ) ) ; TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 ) ; return VAR_2 ; }",['Update Invocation'],112
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 context ) { final java.lang.String VAR_2 = context . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( STRING_1 , VAR_2 ) ; context . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 context ) { final java.lang.String VAR_2 = context . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( STRING_1 , VAR_2 ) ; context . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; }","['Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",113
"public TYPE_1 METHOD_1 ( java.lang.Long VAR_1 , java.lang.String VAR_2 , java.lang.Long VAR_3 ) { return VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public TYPE_1 METHOD_1 ( java.lang.Long VAR_1 , java.lang.String VAR_2 ) { return VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",114
public void METHOD_1 ( android.view.View view ) { java.lang.String VAR_1 = ( ( android.widget.Button ) ( view ) ) . getText ( ) . toString ( ) ; TYPE_1 . METHOD_2 ( ) . update ( VAR_1 ) ; },public void METHOD_1 ( android.view.View view ) { java.lang.String VAR_1 = ( ( android.widget.Button ) ( view ) ) . getText ( ) . toString ( ) ; TYPE_1 . METHOD_2 ( this ) . update ( VAR_1 ) ; },['Insert ThisAccess'],115
"private void METHOD_1 ( TYPE_1 context , int VAR_1 , int VAR_2 , int VAR_3 , java.lang.String name ) { TYPE_2 field = new TYPE_2 ( context , name ) ; field . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; }","private void METHOD_1 ( TYPE_1 context , int VAR_1 , int VAR_2 , java.lang.String name ) { TYPE_2 field = new TYPE_2 ( context , name ) ; field . METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",116
"public static void init ( ) { TYPE_1 . METHOD_1 ( VAR_1 class , STRING_1 , INT_1 , INT_2 , true ) ; TYPE_1 . METHOD_1 ( VAR_2 class , STRING_2 , INT_1 , INT_2 , true ) ; }","public static void init ( ) { TYPE_1 . METHOD_1 ( VAR_1 class , STRING_1 , INT_1 , INT_2 , false ) ; TYPE_1 . METHOD_1 ( VAR_2 class , STRING_2 , INT_1 , INT_2 , false ) ; }","['Update Literal', 'Update Literal']",117
public void METHOD_1 ( ) { new TYPE_1 ( VAR_1 ) ; new TYPE_1 ( VAR_2 ) ; new TYPE_1 ( VAR_3 ) ; new TYPE_1 ( VAR_4 ) ; new TYPE_1 ( VAR_5 ) ; new TYPE_1 ( VAR_6 ) ; VAR_7 . assertTrue ( true ) ; },public void METHOD_1 ( ) { new TYPE_1 ( VAR_1 ) ; new TYPE_1 ( VAR_2 ) ; new TYPE_1 ( VAR_3 ) ; new TYPE_1 ( VAR_4 ) ; new TYPE_1 ( VAR_5 ) ; new TYPE_1 ( VAR_6 ) ; assertTrue ( true ) ; },['Update TypeAccess'],118
protected java.lang.Object METHOD_1 ( ) { VAR_1 = new java.util.LinkedList < > ( ) ; return this ; },private java.lang.Object METHOD_1 ( ) { VAR_1 = new java.util.LinkedList < > ( ) ; return this ; },['Update Wra'],119
private void METHOD_1 ( char [ ] [ ] field ) { for ( char [ ] x : field ) { for ( char y : x ) { java.lang.System.out.print ( ( y + STRING_1 ) ) ; } java.lang.System.out.println ( ) ; } },private void METHOD_1 ( char [ ] [ ] f ) { for ( char [ ] x : f ) { for ( char y : x ) { java.lang.System.out.print ( ( y + STRING_1 ) ) ; } java.lang.System.out.println ( ) ; } },"['Update Parameter', 'Update VariableRead']",120
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_1 result = null ; try { result = VAR_1 . query ( ) ; METHOD_2 ( result ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_2 . METHOD_3 ( ) ; METHOD_4 ( ) ; } return result ; },public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_1 result = null ; try { result = VAR_1 . execute ( ) ; METHOD_2 ( result ) ; } catch ( java.lang.Exception VAR_2 ) { METHOD_4 ( ) ; } return result ; },"['Update Invocation', 'Delete VariableRead', 'Delete Invocation']",121
"public static boolean METHOD_1 ( int x , int y , TYPE_1 [ ] [ ] VAR_1 ) { return ( VAR_1 [ x ] [ y ] ) == null ; }","public static boolean METHOD_1 ( int x , int y , TYPE_1 [ ] [ ] VAR_1 ) { return ( VAR_1 [ ( x - 1 ) ] [ ( y - 1 ) ] ) == null ; }","['Insert BinaryOperator', 'Insert BinaryOperator', 'Move VariableRead', 'Insert Literal', 'Move VariableRead', 'Insert Literal']",122
public java.lang.Long METHOD_1 ( ) { return VAR_1 ; },public long METHOD_1 ( ) { return VAR_1 ; },['Update TypeReference'],124
"public void METHOD_1 ( long VAR_1 ) throws java.io.IOException { if ( VAR_1 > 1 ) { throw new TYPE_1 ( VAR_2 . getString ( STRING_1 , VAR_3 . toString ( VAR_1 ) ) , 0 , VAR_4 ) ; } this . VAR_1 = VAR_1 == 1 ; }","public void METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( VAR_1 > 1 ) { throw new TYPE_1 ( VAR_2 . getString ( STRING_1 , VAR_3 . toString ( VAR_1 ) ) , 0 , VAR_4 ) ; } this . VAR_1 = VAR_1 ; }","['Update TypeReference', 'Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",125
"public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = new TYPE_2 ( ) . METHOD_2 ( ) . build ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; METHOD_4 ( VAR_2 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) . METHOD_2 ( ) . build ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; android.content.Intent VAR_2 = new android.content.Intent ( this , VAR_3 class ) ; METHOD_4 ( VAR_2 ) ; }","['Delete TypeReference', 'Delete Parameter']",126
"public TYPE_1 METHOD_1 ( java.lang.Object to ) { return to ( to , false ) ; }","public TYPE_1 METHOD_1 ( java.lang.String to ) { return to ( to , true , false ) ; }","['Update TypeReference', 'Insert Literal']",127
"public static TYPE_1 METHOD_1 ( android.content.Context context ) { return TYPE_1 . METHOD_1 ( context , STRING_1 ) ; }",public static TYPE_1 METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( STRING_1 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",128
private void METHOD_1 ( java.lang.String [ ] list ) { for ( java.lang.String VAR_1 : list ) { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 . fail ( VAR_1 ) ; } catch ( TYPE_2 VAR_3 ) { } } },private void METHOD_1 ( java.lang.String [ ] list ) { for ( java.lang.String VAR_1 : list ) { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 . fail ( ) ; } catch ( TYPE_2 VAR_3 ) { } } },['Delete VariableRead'],129
"public void METHOD_1 ( java.lang.String VAR_1 , double VAR_2 , java.util.ArrayList < TYPE_1 > VAR_3 ) { VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , double VAR_2 , java.util.ArrayList < TYPE_1 > VAR_3 ) { java.lang.System.out.println ( VAR_4 ) ; }","['Update Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",130
public TYPE_1 METHOD_1 ( ) { if ( VAR_1 . index ( ) . equals ( VAR_2 . index ( ) ) ) { return VAR_3 . METHOD_1 ( ) ; } else { return buffer . METHOD_2 ( ) ; } },public TYPE_1 METHOD_1 ( ) { return buffer . METHOD_1 ( ) ; },"['Move Return', 'Update Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",131
private void METHOD_1 ( TYPE_1 event ) { VAR_1 . info ( TYPE_2 . METHOD_2 ( event ) ) ; this . VAR_2 . METHOD_3 ( ) ; },private void METHOD_1 ( TYPE_1 event ) { VAR_1 . info ( TYPE_2 . METHOD_2 ( event ) ) ; VAR_2 . METHOD_3 ( ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",132
"public void METHOD_1 ( final int id ) { TYPE_1 . METHOD_2 ( this , id , VAR_1 ) ; }","public void METHOD_1 ( final int id ) { METHOD_2 ( id , VAR_1 ) ; }","['Delete TypeAccess', 'Delete ThisAccess']",135
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( getActivity ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) . METHOD_6 ( ) ; },private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( getActivity ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) . METHOD_1 ( ) ; },"['Update Invocation', 'Update Wra']",136
public java.lang.String toString ( ) { return VAR_1 . toString ( STRING_1 ) ; },public java.lang.String toString ( ) { return VAR_1 . toString ( ) ; },['Delete TypeAccess'],137
"public static void METHOD_1 ( java.lang.String message , java.lang.Throwable t ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { VAR_1 . get ( i ) . METHOD_2 ( message , t ) ; } }","public static void METHOD_1 ( java.lang.String message , java.lang.Throwable t ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { VAR_1 . get ( 0 ) . METHOD_2 ( message , t ) ; } }","['Insert Literal', 'Delete VariableRead']",139
public java.lang.String METHOD_1 ( ) { return ( this . VAR_1 ) == null ? null : this . VAR_1 . METHOD_2 ( ) ; },public java.lang.String METHOD_1 ( ) { return ( this . VAR_1 ) == null ? VAR_1 . METHOD_2 ( ) : null ; },"['Move Literal', 'Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",140
"public boolean METHOD_1 ( android.view.View VAR_1 ) { return VAR_2 . METHOD_2 ( context , data , VAR_3 . METHOD_3 ( ) ) ; }","public boolean METHOD_1 ( android.view.View VAR_1 ) { return VAR_2 . METHOD_2 ( context , data , position ) ; }","['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",141
"public void METHOD_1 ( long VAR_1 , long VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; METHOD_2 ( ( ( int ) ( VAR_1 ) ) , ( ( int ) ( VAR_2 ) ) ) ; }","public void METHOD_1 ( int VAR_1 , int VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Update TypeReference', 'Update TypeReference', 'Insert VariableRead', 'Insert VariableRead', 'Delete TypeReference', 'Delete VariableRead', 'Delete TypeReference', 'Delete VariableRead']",143
public static void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 ) java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; },public static void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 ) java.lang.System.out.println ( VAR_1 ) ; },"['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",144
"TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String token , long id ) ;",TYPE_1 < TYPE_2 > METHOD_1 ( long id ) ;,"['Delete TypeReference', 'Delete Parameter']",146
"private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , long VAR_4 , TYPE_3 state ) { TYPE_1 message = TYPE_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , state ) ; message . METHOD_2 ( VAR_4 ) ; return message ; }","private static TYPE_1 METHOD_1 ( long VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , long VAR_4 , TYPE_3 state ) { TYPE_1 message = TYPE_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , state ) ; message . METHOD_2 ( VAR_4 ) ; return message ; }",['Update TypeReference'],147
"public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 context , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , context , VAR_2 ) ; VAR_4 . init ( ) ; return VAR_3 ; }","public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 context ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , context ) ; VAR_4 . init ( ) ; return VAR_3 ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",148
public static TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) ; },protected static TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) ; },['Update Wra'],149
"public TYPE_1 METHOD_1 ( double VAR_1 , double VAR_2 ) { return METHOD_1 ( VAR_1 , VAR_2 , INT_1 ) ; }","public TYPE_1 METHOD_1 ( float VAR_1 , float VAR_2 ) { return METHOD_1 ( VAR_1 , VAR_2 , INT_1 ) ; }","['Update TypeReference', 'Update TypeReference']",152
"public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( name ) ; VAR_4 . setValue ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; return VAR_3 ; }","public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( name ) ; VAR_4 . setValue ( VAR_1 ) ; return VAR_3 ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",153
"public void METHOD_1 ( int VAR_1 , java.lang.String type ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 , METHOD_2 ( VAR_1 ) , type , VAR_3 ) ; java.lang.System.out.println ( ( STRING_2 + ( VAR_4 . toString ( ) ) ) ) ; METHOD_3 ( VAR_2 ) ; }","public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 , METHOD_2 ( VAR_1 ) , VAR_3 ) ; java.lang.System.out.println ( ( STRING_2 + ( VAR_4 . toString ( ) ) ) ) ; METHOD_3 ( VAR_2 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",154
"public void METHOD_1 ( ) { VAR_1 . assertEquals ( STRING_1 , VAR_2 . METHOD_2 ( STRING_2 ) ) ; }","public void METHOD_1 ( ) { assertEquals ( STRING_1 , VAR_2 . METHOD_2 ( STRING_2 ) ) ; }",['Update TypeAccess'],156
"protected long METHOD_1 ( TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; return VAR_2 . METHOD_1 ( ) ; }","private long METHOD_1 ( TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; return VAR_2 . METHOD_1 ( ) ; }",['Update Wra'],157
"public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new java.io.File ( VAR_1 ) , VAR_2 ) ; } catch ( java.io.IOException VAR_3 ) { VAR_4 . add ( VAR_1 ) ; } }","public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new java.io.File ( VAR_1 ) , VAR_2 ) ; } catch ( java.io.IOException VAR_3 ) { } }","['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",158
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { TYPE_2 . METHOD_2 ( new TYPE_3 ( STRING_1 ) ) ; return METHOD_3 ( VAR_1 , VAR_3 , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_3 ) throws java.lang.Exception { TYPE_2 . METHOD_2 ( new TYPE_3 ( STRING_1 ) ) ; return METHOD_3 ( VAR_1 , VAR_3 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",159
public void METHOD_1 ( boolean VAR_1 ) { this . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( ) { this . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",161
"public java.util.List < TYPE_1 > METHOD_1 ( final java.util.List < TYPE_2 > VAR_1 , final java.util.List < java.lang.String > VAR_2 ) { return VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( final java.util.List < TYPE_2 > VAR_1 , final java.util.List < java.lang.String > VAR_2 ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; }",['Delete VariableRead'],162
"private static void METHOD_1 ( TYPE_1 p , java.lang.Integer VAR_1 ) { VAR_2 . put ( p , VAR_1 ) ; }","private static void METHOD_1 ( TYPE_1 p , java.lang.Double VAR_1 ) { VAR_2 . put ( p , VAR_1 ) ; }",['Update TypeReference'],163
"public void METHOD_1 ( TYPE_1 item ) throws TYPE_2 { if ( VAR_1 ) throw new TYPE_2 ( VAR_1 , false ) ; VAR_2 . add ( item ) ; VAR_1 = true ; }",public void METHOD_1 ( TYPE_1 item ) throws TYPE_2 { if ( VAR_1 ) throw new TYPE_2 ( VAR_1 ) ; VAR_2 . add ( item ) ; VAR_1 = true ; },['Delete Literal'],164
protected boolean METHOD_1 ( TYPE_1 status ) { return VAR_1 . contains ( status . METHOD_2 ( ) ) ; },protected boolean METHOD_1 ( TYPE_1 status ) { return VAR_1 . contains ( status ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",165
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_1 ( ) ; },public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( ) ; this . VAR_1 . METHOD_1 ( ) ; },"['Insert FieldRead', 'Insert ThisAccess', 'Delete TypeAccess']",166
"private void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = ( VAR_3 ) / INT_1 ; VAR_1 . METHOD_2 ( VAR_4 , ( ( ( VAR_3 ) - ( VAR_4 . METHOD_3 ( ) ) ) - VAR_2 ) , VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = ( VAR_3 ) / INT_1 ; VAR_1 . METHOD_2 ( VAR_4 , ( ( ( VAR_3 ) - ( VAR_4 . METHOD_3 ( ) ) ) - VAR_2 ) , VAR_2 ) ; }",['Update Wra'],168
"public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , false , false ) ; }","public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , false ) ; }",['Delete Literal'],171
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; },['Insert Literal'],172
"public boolean METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; return true ; }",public boolean METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; return true ; },"['Delete TypeReference', 'Delete Parameter']",173
public void METHOD_1 ( ) { VAR_1 . getActivity ( ) . METHOD_2 ( ) ; },public void METHOD_1 ( ) { },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",174
private void setValue ( java.lang.String value ) { value = VAR_1 . trim ( ) . toUpperCase ( VAR_2 ) ; if ( ! ( TYPE_1 . METHOD_1 ( value ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } this . value = value ; },private void setValue ( java.lang.String value ) { value = VAR_1 . trim ( ) . toUpperCase ( ) ; if ( ! ( TYPE_1 . METHOD_1 ( value ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } this . value = value ; },['Delete TypeAccess'],175
"private void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( this ) ; VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 . METHOD_4 ( ) , this ) ) ; }","private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( this ) ; VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 . METHOD_4 ( ) , this ) ) ; }","['Insert ConstructorCall', 'Move ThisAccess', 'Delete TypeAccess', 'Delete Invocation']",176
"TYPE_1 < TYPE_2 > METHOD_1 ( int index , int count ) ;",TYPE_1 < TYPE_2 > METHOD_1 ( int index ) ;,"['Delete TypeReference', 'Delete Parameter']",177
java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_1 . METHOD_2 ( ) ; return STRING_1 ; } catch ( java.lang.Exception VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } return STRING_2 ; },java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_1 . METHOD_2 ( ) ; return STRING_1 ; } catch ( java.lang.Exception VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } return STRING_1 ; },['Update FieldRead'],178
"public static void main ( java.lang.String [ ] args ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; new TYPE_2 ( VAR_1 , args ) ; VAR_1 . METHOD_1 ( ) ; }",public static void main ( java.lang.String [ ] args ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; },"['Delete VariableRead', 'Delete VariableRead', 'Delete ConstructorCall']",179
public TYPE_1 METHOD_1 ( TYPE_2 context ) { if ( ( message ) instanceof TYPE_3 ) { return ( ( TYPE_3 ) ( message ) ) . VAR_1 ; } throw VAR_2 . METHOD_2 ( STRING_1 ) ; },public TYPE_1 METHOD_1 ( TYPE_2 context ) { if ( ( name ) instanceof TYPE_3 ) { return ( ( TYPE_3 ) ( name ) ) . VAR_1 ; } throw VAR_2 . METHOD_2 ( STRING_1 ) ; },"['Update FieldRead', 'Update FieldRead']",181
public TYPE_1 METHOD_1 ( java.lang.String query ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( query ) ; return VAR_1 . METHOD_3 ( ) ; },public TYPE_1 METHOD_1 ( java.lang.String query ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( query ) ; return VAR_1 . METHOD_3 ( query ) ; },['Insert VariableRead'],182
public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( VAR_2 ) ; },public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( id ) ; },"['Insert FieldRead', 'Delete TypeAccess']",183
"public boolean METHOD_1 ( int x , int y , TYPE_1 VAR_1 ) { return ( METHOD_2 ( x , y , VAR_1 , new java.util.HashSet < > ( ) , new java.util.HashSet < > ( ) ) . size ( ) ) > 0 ; }","public boolean METHOD_1 ( int x , int y , TYPE_1 VAR_1 ) { return ( METHOD_2 ( x , y , VAR_1 ) . size ( ) ) > 0 ; }","['Delete ConstructorCall', 'Delete ConstructorCall']",185
public boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( VAR_1 ) ) && ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; },private boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( VAR_1 ) ) && ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; },['Update Wra'],186
public boolean METHOD_1 ( ) { return ( VAR_1 ) == null ? true : VAR_1 ; },public boolean METHOD_1 ( ) { return ( VAR_1 ) == null ? false : VAR_1 ; },['Update Literal'],187
public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ( ( METHOD_3 ( ) ) + 1 ) ) ; METHOD_4 ( METHOD_3 ( ) ) ; },public void METHOD_1 ( ) { METHOD_2 ( ( ( METHOD_3 ( ) ) + 1 ) ) ; METHOD_4 ( METHOD_3 ( ) ) ; },"['Delete TypeReference', 'Delete Parameter']",188
public int METHOD_1 ( ) { return ( VAR_1 . size ( ) ) < ( VAR_2 . size ( ) ) ? VAR_1 . size ( ) : VAR_2 . size ( ) ; },public int METHOD_1 ( ) { return ( VAR_1 . size ( ) ) > ( VAR_2 . size ( ) ) ? VAR_1 . size ( ) : VAR_2 . size ( ) ; },['Update BinaryOperator'],189
"public void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 = VAR_1 ; }",public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; },"['Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",190
"public static boolean METHOD_1 ( java.lang.String path , java.util.Collection < ? > VAR_1 ) { return TYPE_1 . METHOD_1 ( new java.io.File ( path ) , VAR_1 , STRING_1 , true ) ; }","public static boolean METHOD_1 ( java.lang.String path , java.util.Collection < ? > VAR_1 ) { return TYPE_1 . METHOD_1 ( new java.io.File ( path ) , VAR_1 , STRING_1 , false ) ; }",['Update Literal'],191
public TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) == ( - 1 ) ) || ( ( VAR_1 ) >= ( VAR_2 . size ( ) ) ) ) { return null ; } return VAR_2 . get ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) == ( - 1 ) ) || ( ( VAR_1 ) == ( VAR_2 . size ( ) ) ) ) { return null ; } return VAR_2 . get ( VAR_1 ) ; },['Update BinaryOperator'],192
"public void METHOD_1 ( ) { int id = METHOD_2 ( 0 ) ; TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( id ) ; METHOD_4 ( STRING_1 , VAR_1 ) ; METHOD_5 ( STRING_2 ) ; }","public void METHOD_1 ( ) { int id = METHOD_2 ( ""id"" ) ; TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( id ) ; METHOD_4 ( STRING_1 , VAR_1 ) ; METHOD_5 ( STRING_2 ) ; }",['Update Literal'],193
public static TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) . METHOD_2 ( INT_1 ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( true ) . METHOD_6 ( false ) . build ( ) ; },public static TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( ) . METHOD_2 ( 1 ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( true ) . METHOD_6 ( false ) . build ( ) ; },"['Insert Literal', 'Delete TypeAccess']",194
"public TYPE_1 METHOD_1 ( final int VAR_1 , final java.awt.Color VAR_2 ) { this . VAR_3 = new TYPE_2 ( ) ; return this ; }","public TYPE_1 METHOD_1 ( final int VAR_1 , final java.awt.Color VAR_2 ) { this . VAR_3 = new TYPE_2 ( VAR_1 , VAR_2 ) ; return this ; }","['Update ConstructorCall', 'Insert VariableRead', 'Insert VariableRead']",196
public java.lang.String METHOD_1 ( ) { return getClass ( ) . METHOD_2 ( ) . toLowerCase ( ) ; },public java.lang.String METHOD_1 ( ) { return getClass ( ) . getName ( ) . toLowerCase ( ) ; },['Update Invocation'],197
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; },public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( null ) ; },"['Update ConstructorCall', 'Insert Literal']",198
"private boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return false ; }","private boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { }","['Delete Literal', 'Delete Return']",200
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( STRING_1 , id ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( ""id"" , id ) ; }","['Insert Literal', 'Delete TypeAccess']",203
"public java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { return ( ( ( ( METHOD_2 ( VAR_1 ) ) + STRING_1 ) + VAR_2 ) + STRING_2 ) + VAR_3 ; }","public java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { return ( ( ( ( METHOD_2 ( ( VAR_1 + 1 ) ) ) + STRING_1 ) + VAR_2 ) + STRING_2 ) + VAR_3 ; }","['Insert BinaryOperator', 'Move VariableRead', 'Insert Literal']",204
"public TYPE_1 build ( ) { return new TYPE_1 ( this . VAR_1 , this . VAR_2 , this . VAR_3 ) ; }","public TYPE_1 build ( ) { return new TYPE_1 ( this . VAR_2 , this . VAR_3 ) ; }","['Delete ThisAccess', 'Delete FieldRead']",206
public TYPE_1 remove ( TYPE_2 key ) { return null ; },public TYPE_1 remove ( TYPE_2 key ) { },"['Delete Literal', 'Delete Return']",207
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_3 ( file , new TYPE_4 ( file ) ) ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_3 ( file , new TYPE_4 ( file ) ) ; }","['Delete TypeReference', 'Delete Parameter']",208
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 . main , VAR_1 ) ; METHOD_4 ( ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 . main , VAR_1 ) ; return true ; }",['Delete Invocation'],209
"public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , METHOD_6 ( ) ) ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , VAR_2 ) ; }","['Insert FieldRead', 'Delete Invocation']",210
"private void METHOD_1 ( int VAR_1 , TYPE_1 state , TYPE_2 VAR_2 ) { VAR_3 = METHOD_2 ( state . METHOD_3 ( ) ) ; }",private void METHOD_1 ( TYPE_1 state ) { VAR_3 = METHOD_2 ( state . METHOD_3 ( ) ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",211
private boolean METHOD_1 ( java.lang.Class < ? > VAR_1 ) { return VAR_2 class . METHOD_2 ( VAR_1 ) ; },private static boolean METHOD_1 ( java.lang.Class < ? > VAR_1 ) { return VAR_2 class . METHOD_2 ( VAR_1 ) ; },['Insert Wra'],212
public java.lang.String METHOD_1 ( ) { return this . number ; },public java.lang.String METHOD_1 ( ) { return number ; },['Delete ThisAccess'],213
public TYPE_1 METHOD_1 ( java.lang.String id ) { VAR_1 . info ( ( STRING_1 + id ) ) ; TYPE_1 VAR_2 ; VAR_2 = VAR_3 . METHOD_2 ( id ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( java.lang.String id ) { VAR_1 . info ( ( STRING_1 + id ) ) ; TYPE_1 VAR_2 ; VAR_2 = VAR_3 . METHOD_1 ( id ) ; return VAR_2 ; },['Update Invocation'],214
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return this . VAR_2 . METHOD_2 ( new TYPE_1 ( VAR_1 , 0 , null , null , null ) ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return this . VAR_2 . METHOD_2 ( new TYPE_1 ( VAR_1 , 0 , null , null ) ) ; }","['Update ConstructorCall', 'Delete Literal']",215
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 . get ( VAR_4 . METHOD_3 ( ) ) , VAR_5 ) . show ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 . get ( position ) , VAR_5 ) . show ( ) ; }","['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",216
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , null ) ; }","public void METHOD_1 ( ) { METHOD_2 ( STRING_1 , null ) ; }",['Update TypeAccess'],217
"public void METHOD_1 ( java.lang.String title , java.lang.String content ) { VAR_1 . show ( title , content , STRING_1 ) ; }","public void METHOD_1 ( java.lang.String title , java.lang.String content ) { VAR_1 . show ( title , content ) ; }",['Delete TypeAccess'],218
"protected TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( VAR_2 , this , METHOD_2 ( ) , true ) ; } return VAR_1 ; }","protected TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( VAR_2 , this , METHOD_2 ( ) ) ; } return VAR_1 ; }",['Delete Literal'],219
"protected void end ( ) { VAR_1 . METHOD_1 ( 0 , 0 , true , false ) ; }","protected void end ( ) { VAR_1 . METHOD_1 ( 0 , 0 , true ) ; }",['Delete Literal'],220
"public void METHOD_1 ( TYPE_1 response ) { VAR_1 . assertEquals ( VAR_2 . getId ( ) , STRING_1 ) ; }","public void METHOD_1 ( java.lang.String response ) { VAR_1 . assertEquals ( response , STRING_1 ) ; }","['Update TypeReference', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",221
"TYPE_1 METHOD_1 ( android.content.Context context , int VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 , int VAR_5 , int VAR_6 ) { return new TYPE_1 ( context . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; }","TYPE_1 METHOD_1 ( android.content.Context context , int VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 , int VAR_5 ) { return new TYPE_1 ( context . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",222
"public void METHOD_1 ( TYPE_1 VAR_1 ) { query . METHOD_2 ( this ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; }",public void METHOD_1 ( TYPE_1 VAR_2 ) { query . METHOD_2 ( this ) ; },"['Update Parameter', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",223
public double METHOD_1 ( ) { return 0.0 ; },public double METHOD_1 ( ) { },"['Delete Literal', 'Delete Return']",224
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; return view ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; }","['Delete VariableRead', 'Delete Return']",225
public TYPE_1 METHOD_1 ( int VAR_1 ) { this . VAR_2 = VAR_1 ; return this ; },public TYPE_1 METHOD_1 ( int y ) { this . VAR_2 = y ; return this ; },"['Update Parameter', 'Update VariableRead']",226
public void METHOD_1 ( android.view.View view ) { VAR_1 = INT_1 ; METHOD_2 ( ) ; },protected void METHOD_1 ( android.view.View view ) { VAR_1 = INT_1 ; METHOD_2 ( ) ; },['Update Wra'],228
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( CHAR_1 ) ; VAR_2 . assertEquals ( CHAR_1 , VAR_1 . METHOD_3 ( ) ) ; TYPE_1 . METHOD_4 ( CHAR_1 , VAR_1 . METHOD_5 ( ) ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( CHAR_1 ) ; TYPE_1 . METHOD_4 ( CHAR_1 , VAR_1 . METHOD_3 ( ) ) ; VAR_2 . assertEquals ( CHAR_1 , VAR_1 . METHOD_5 ( ) ) ; }","['Update Invocation', 'Update Invocation', 'Move TypeAccess', 'Move TypeAccess']",230
private void METHOD_1 ( final TYPE_1 VAR_1 ) { java.lang.Thread VAR_2 = new java.lang.Thread ( ) { public void METHOD_2 ( ) { VAR_3 . METHOD_3 ( VAR_1 ) ; } } ; VAR_4 . start ( ) ; },private void METHOD_1 ( final TYPE_1 VAR_1 ) { java.lang.Thread VAR_2 = new java.lang.Thread ( ) { public void METHOD_2 ( ) { VAR_3 . METHOD_3 ( VAR_1 ) ; } } ; VAR_2 . METHOD_2 ( ) ; },"['Update Invocation', 'Insert VariableRead', 'Delete TypeAccess']",231
"private static java.lang.String METHOD_1 ( ) { return ( ( TYPE_1 . METHOD_2 ( ) ) + ""\n"" ) + ( TYPE_1 . METHOD_3 ( ) ) ; }","public java.lang.String METHOD_1 ( ) { return ( ( this . METHOD_2 ( ) ) + ""\n"" ) + ( this . METHOD_3 ( ) ) ; }","['Update Wra', 'Insert ThisAccess', 'Insert ThisAccess', 'Delete Wra', 'Delete TypeAccess', 'Delete TypeAccess']",232
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , java.lang.String VAR_3 , java.lang.String type ) ;",public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",233
"private boolean METHOD_1 ( TYPE_1 item , TYPE_2 file ) { return ( VAR_1 . getName ( ) . equals ( VAR_2 . getText ( 0 ) ) ) && ( file . METHOD_2 ( ) . equals ( VAR_2 . getText ( INT_1 ) ) ) ; }","private boolean METHOD_1 ( TYPE_1 item , TYPE_2 file ) { return ( VAR_1 . getName ( ) . equals ( VAR_2 . getText ( 0 ) ) ) && ( file . METHOD_2 ( ) . equals ( VAR_2 . getText ( 1 ) ) ) ; }","['Insert Literal', 'Delete TypeAccess']",234
void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 1 ) ; },void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; },"['Update Invocation', 'Delete Literal']",235
public void METHOD_1 ( ) { java.lang.System.out.print ( TYPE_1 . METHOD_2 ( java.util.Calendar.getInstance ( ) ) ) ; },public void METHOD_1 ( ) { java.lang.System.out.println ( TYPE_1 . METHOD_2 ( java.util.Calendar.getInstance ( ) ) ) ; },['Update Invocation'],236
public java.lang.String execute ( ) throws TYPE_1 { if ( ! ( METHOD_1 ( ) ) ) throw new TYPE_1 ( STRING_1 ) ; return VAR_1 ; },public java.lang.String execute ( ) throws java.lang.Exception { if ( ! ( METHOD_1 ( ) ) ) throw new java.lang.Exception ( STRING_1 ) ; return VAR_1 ; },"['Update TypeReference', 'Update ConstructorCall']",237
public TYPE_1 METHOD_1 ( TYPE_2 path ) throws java.io.IOException { if ( path == null ) { return null ; } TYPE_2 VAR_1 = METHOD_2 ( path ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( TYPE_2 path ) throws java.io.IOException { TYPE_2 VAR_1 = METHOD_2 ( path ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",239
"public TYPE_1 METHOD_1 ( int size ) { TYPE_2 . METHOD_2 ( ( size > 0 ) , STRING_1 ) ; VAR_1 . set ( new TYPE_3 ( size ) ) ; this . VAR_2 = size ; return this ; }","public TYPE_1 METHOD_1 ( int size ) { TYPE_2 . METHOD_2 ( ( size > 0 ) , STRING_1 ) ; VAR_1 . set ( new TYPE_3 ( VAR_2 ) ) ; this . VAR_2 = size ; return this ; }","['Update ConstructorCall', 'Insert FieldRead', 'Delete VariableRead']",240
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Integer type ) throws TYPE_2 { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( type ) ; if ( VAR_3 . isEmpty ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_3 . isEmpty ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } return VAR_1 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",241
"public TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 { java.lang.String VAR_1 = new java.util.Scanner ( new java.io.File ( VAR_2 ) , VAR_3 ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( ) . execute ( VAR_1 ) ; return this ; }","public TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 { java.lang.String VAR_1 = new java.util.Scanner ( new java.io.File ( VAR_2 ) ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( ) . execute ( VAR_1 ) ; return this ; }","['Update ConstructorCall', 'Delete FieldRead']",242
public int METHOD_1 ( int index ) { if ( index <= ( VAR_1 . size ( ) ) ) return VAR_2 . get ( VAR_1 . get ( ( index - 1 ) ) ) ; else return - 1 ; },public int METHOD_1 ( int index ) { if ( index <= ( VAR_1 . size ( ) ) ) return VAR_2 . get ( VAR_1 . get ( index ) ) ; else return - 1 ; },"['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",244
"public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( 0 ) ; METHOD_3 ( VAR_2 , true ) ; VAR_3 . put ( STRING_1 , STRING_2 ) ; METHOD_4 ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( 0 ) ; METHOD_3 ( VAR_2 , true ) ; VAR_3 . put ( ""type"" , STRING_2 ) ; METHOD_4 ( VAR_2 ) ; }","['Insert Literal', 'Delete TypeAccess']",245
public TYPE_1 METHOD_1 ( TYPE_1 t ) { this . VAR_1 . METHOD_2 ( t ) ; return t ; },public void METHOD_1 ( TYPE_1 t ) { VAR_1 . METHOD_2 ( t ) ; },"['Update TypeReference', 'Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Return']",246
"long METHOD_1 ( TYPE_1 obj , byte [ ] VAR_1 , double [ ] VAR_2 , int VAR_3 , int VAR_4 , double VAR_5 , int [ ] VAR_6 ) ;","long METHOD_1 ( TYPE_1 obj , byte [ ] VAR_1 , double [ ] VAR_2 , long VAR_3 , long VAR_4 , double VAR_5 , int [ ] VAR_6 ) ;","['Update TypeReference', 'Update TypeReference']",247
protected void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 = 0 ; ( VAR_3 ) ++ ; if ( ( VAR_3 ) >= ( VAR_4 . length ) ) { METHOD_2 ( ) ; } else { VAR_5 . METHOD_3 ( VAR_6 ) ; } },private void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 = 0 ; ( VAR_3 ) ++ ; if ( ( VAR_3 ) >= ( VAR_4 . length ) ) { METHOD_2 ( ) ; } else { VAR_5 . METHOD_3 ( VAR_6 ) ; } },['Update Wra'],249
"public void METHOD_1 ( long VAR_1 , long length , byte [ ] VAR_2 , java.lang.String VAR_3 , int VAR_4 ) { }","protected abstract void METHOD_1 ( long VAR_1 , long length , byte [ ] VAR_2 , java.lang.String VAR_3 , int VAR_4 ) ;","['Update Wra', 'Insert Wra']",250
"private static long METHOD_1 ( long VAR_1 , int VAR_2 , long VAR_3 , int VAR_4 , long VAR_5 ) { return 0 ; }","private static native long METHOD_1 ( long VAR_1 , int VAR_2 , long VAR_3 , int VAR_4 , long VAR_5 ) ;","['Insert Wra', 'Delete Literal', 'Delete Return']",251
void METHOD_1 ( long number ) { VAR_1 += java.lang.String . METHOD_2 ( number ) ; VAR_2 . setText ( VAR_1 ) ; },void METHOD_1 ( int number ) { VAR_1 += java.lang.String . METHOD_2 ( number ) ; VAR_2 . setText ( VAR_1 ) ; },['Update TypeReference'],252
"public static java.lang.String METHOD_1 ( java.lang.String path ) { return TYPE_1 . METHOD_1 ( path , STRING_1 ) ; }","public static java.lang.String METHOD_1 ( java.lang.String path ) { return TYPE_1 . METHOD_1 ( path , null ) ; }","['Insert Literal', 'Delete TypeAccess']",253
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 response , java.util.Map < java.lang.String , java.lang.Object > VAR_3 ) { if ( ( VAR_4 ) >= ( VAR_5 ) ) { message = STRING_1 ; } else { message = STRING_2 ; } return VAR_6 ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 response , java.util.Map < java.lang.String , java.lang.Object > VAR_3 ) { if ( ( VAR_4 ) > ( VAR_5 ) ) { message = STRING_1 ; } else { message = STRING_2 ; } return VAR_6 ; }",['Update BinaryOperator'],254
"protected java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 < TYPE_1 > METHOD_2 ( new TYPE_2 ( ) , new TYPE_3 ( ) , new TYPE_3 ( VAR_2 ) , new TYPE_4 ( ) , new TYPE_5 ( ) ) ; }","protected java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 < TYPE_1 > METHOD_2 ( new TYPE_2 ( ) , new TYPE_3 ( VAR_2 ) , new TYPE_4 ( ) , new TYPE_5 ( ) ) ; }",['Delete ConstructorCall'],255
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( VAR_3 , VAR_4 ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_2 , 0 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( VAR_3 , VAR_4 ) ; METHOD_3 ( VAR_2 , 1 ) ; }","['Update Literal', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",256
public final double METHOD_1 ( ) { return ( METHOD_2 ( ) ) - ( METHOD_3 ( ) ) ; },public final double METHOD_1 ( ) { return ( this . METHOD_2 ( ) ) - ( this . METHOD_3 ( ) ) ; },"['Insert ThisAccess', 'Insert ThisAccess']",257
public void METHOD_1 ( java.util.Date endTime ) { this . endTime = new java.util.Date ( VAR_1 . getTime ( ) ) ; },public void METHOD_1 ( java.util.Date endTime ) { this . endTime = endTime ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall']",258
"public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , final TYPE_4 context ) throws java.io.IOException { return METHOD_2 ( VAR_3 , VAR_1 , VAR_2 , null , null , context ) ; }","public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , final TYPE_4 context ) throws java.io.IOException { return METHOD_2 ( VAR_3 , VAR_1 , VAR_2 , null , context ) ; }",['Delete Literal'],259
public TYPE_1 METHOD_1 ( short VAR_1 ) { this . VAR_1 = VAR_1 ; return this ; },public void METHOD_1 ( short VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Update TypeReference', 'Delete ThisAccess', 'Delete Return']",260
"void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) ;",void METHOD_1 ( TYPE_1 VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",261
"public void METHOD_1 ( ) { TYPE_1 t = new TYPE_1 ( STRING_1 ) ; TYPE_2 VAR_1 = new TYPE_3 ( new TYPE_4 ( ( - INT_1 ) , INT_1 ) , INT_2 , INT_2 ) ; t . METHOD_2 ( VAR_1 ) ; }","public void METHOD_1 ( ) { TYPE_1 t = new TYPE_1 ( ) ; TYPE_2 VAR_1 = new TYPE_3 ( new TYPE_4 ( ( - INT_1 ) , INT_1 ) , INT_2 , INT_2 ) ; t . METHOD_2 ( VAR_1 ) ; }",['Delete FieldRead'],262
"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( new TYPE_2 ( INT_1 , INT_2 , INT_3 , VAR_2 ) ) ; VAR_3 = new TYPE_3 ( VAR_1 ) ; }",public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( null ) ; VAR_3 = new TYPE_3 ( VAR_1 ) ; },"['Update ConstructorCall', 'Insert Literal', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall']",263
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int VAR_4 , int count , java.lang.String VAR_5 , java.lang.String VAR_6 , java.lang.String VAR_7 , java.lang.String VAR_8 ) throws TYPE_1 ;","public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int VAR_4 , int count , java.lang.String VAR_5 , java.lang.String VAR_6 , java.lang.String VAR_7 ) throws TYPE_1 ;","['Delete TypeReference', 'Delete Parameter']",264
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 . NULL ) ) { VAR_1 . METHOD_3 ( ) ; return null ; } return TYPE_1 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 . NULL ) ) { return null ; } return TYPE_1 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; },"['Delete VariableRead', 'Delete Invocation']",265
private java.lang.Long METHOD_1 ( final long VAR_1 ) { return VAR_1 < ( VAR_2 ) ? VAR_1 : VAR_2 ; },private java.lang.Long METHOD_1 ( final long VAR_1 ) { return VAR_1 < ( VAR_2 ) ? VAR_1 + 1 : VAR_2 ; },"['Insert BinaryOperator', 'Move VariableRead', 'Insert Literal']",266
"public void METHOD_1 ( android.view.View view , TYPE_1 event ) { VAR_1 . i ( STRING_1 , STRING_2 ) ; METHOD_2 ( true ) ; }","public void METHOD_1 ( android.view.View view , TYPE_1 event ) { VAR_1 . i ( STRING_1 , STRING_2 ) ; METHOD_2 ( ) ; }",['Delete Literal'],267
"protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String field ) { VAR_2 . put ( VAR_1 , field ) ; return VAR_1 ; }","private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String field ) { VAR_2 . put ( VAR_1 , field ) ; return VAR_1 ; }",['Update Wra'],268
void METHOD_1 ( ) { VAR_1 = true ; VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 = false ; },"void METHOD_1 ( ) { VAR_1 = true ; VAR_2 . METHOD_2 ( METHOD_3 ( ) , true ) ; VAR_1 = false ; }",['Insert Literal'],269
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , false ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , true ) ; }",['Update Literal'],270
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( null != ( VAR_2 . getId ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } VAR_3 . METHOD_1 ( VAR_1 ) ; return VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( null != ( VAR_2 . getId ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Update TypeReference', 'Delete VariableRead', 'Delete Return']",271
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_2 = VAR_1 ; },public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { this . VAR_2 = VAR_1 ; },['Insert ThisAccess'],272
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) <= 0 ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) > 0 ; },['Update BinaryOperator'],273
private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) ) ( VAR_3 ) ++ ; else ( VAR_4 ) ++ ; } },private void METHOD_1 ( java.util.List < TYPE_1 > VAR_2 ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) ) ( VAR_3 ) ++ ; else ( VAR_4 ) ++ ; } },"['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead', 'Insert TypeReference', 'Delete FieldRead']",274
public TYPE_1 METHOD_1 ( ) { return this . METHOD_2 ( ) . METHOD_3 ( ) ; },public TYPE_1 METHOD_1 ( ) { return this . METHOD_2 ( ) . METHOD_1 ( ) ; },['Update Invocation'],276
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( this ) ; VAR_1 = TYPE_2 . METHOD_3 ( new TYPE_3 ( VAR_2 , VAR_3 , new TYPE_4 ( ) , STRING_1 , STRING_2 , 0 , STRING_3 ) ) . build ( ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( this ) ; VAR_1 = TYPE_2 . METHOD_3 ( new TYPE_3 ( VAR_2 , VAR_3 , new TYPE_4 ( ) , null , null , 0 , null ) ) . build ( ) ; }","['Insert Literal', 'Insert Literal', 'Insert Literal', 'Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead']",277
"public TYPE_1 METHOD_1 ( java.lang.String url , int i ) throws java.io.IOException { return VAR_1 . METHOD_1 ( METHOD_2 ( url ) , i ) ; }",public TYPE_1 METHOD_1 ( java.lang.String url ) throws java.io.IOException { return VAR_1 . METHOD_1 ( METHOD_2 ( url ) ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",278
"< TYPE_1 > TYPE_1 METHOD_1 ( java.lang.Object VAR_1 , java.lang.String key ) ;","< TYPE_1 > TYPE_1 METHOD_1 ( java.lang.Object array , java.lang.String key ) ;",['Update Parameter'],279
"public < TYPE_1 > java.util.Collection < TYPE_1 > METHOD_1 ( java.lang.Class < TYPE_1 > t ) { return METHOD_1 ( this , t , new java.util.ArrayList < TYPE_1 > ( ) , true ) ; }","public < TYPE_1 > java.util.Collection < TYPE_1 > METHOD_1 ( java.lang.Class < TYPE_1 > t ) { return METHOD_1 ( this , t , new java.util.ArrayList < TYPE_1 > ( ) ) ; }",['Delete Literal'],280
"public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = VAR_3 . replaceAll ( STRING_1 , STRING_2 ) ; VAR_4 = VAR_5 . get ( VAR_1 ) ; VAR_6 . METHOD_2 ( ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = VAR_1 ; VAR_4 = VAR_5 . get ( VAR_1 ) ; VAR_6 . METHOD_2 ( ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",281
"protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 , boolean VAR_4 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , new TYPE_2 ( ) , true ) ; }","protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , new TYPE_2 ( ) ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete Literal']",283
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { this . VAR_1 = VAR_2 . trim ( ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { this . VAR_1 = VAR_1 ; } },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",284
public java.lang.String METHOD_1 ( int VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) return VAR_3 . get ( VAR_1 ) ; return STRING_1 ; },public java.lang.String METHOD_1 ( int VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) return VAR_3 . get ( VAR_1 ) ; return null ; },"['Insert Literal', 'Delete FieldRead']",285
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ( ( VAR_2 ) - ( VAR_1 . METHOD_4 ( ) ) ) ) . METHOD_5 ( INT_1 ) . start ( ) ; },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ( ( VAR_2 ) - ( VAR_1 . METHOD_4 ( ) ) ) ) . METHOD_5 ( INT_1 ) . start ( ) ; },['Update Wra'],286
public static java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) throws java.lang.Exception { if ( VAR_1 == null ) return null ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return VAR_2 . METHOD_2 ( ) ; },public static java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return VAR_2 . METHOD_2 ( ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",287
"public void METHOD_1 ( android.view.View view ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 . getText ( ) . toString ( ) , this ) ) ; }","public void METHOD_1 ( android.view.View view ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( new TYPE_2 ( VAR_1 , VAR_3 . getText ( ) . toString ( ) , this ) ) ; }",['Delete FieldRead'],288
"private java.util.HashMap < java.lang.Integer , java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { return null ; }",private METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Literal', 'Delete Return']",289
public static void i ( java.lang.String message ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { VAR_1 . get ( i ) . i ( message ) ; } },public static void i ( java.lang.String message ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { VAR_1 . get ( 0 ) . i ( message ) ; } },"['Insert Literal', 'Delete VariableRead']",292
public void METHOD_1 ( final java.lang.String value ) { this . VAR_1 = TYPE_1 . METHOD_2 ( value ) . METHOD_3 ( ) ; },public void METHOD_1 ( final java.lang.String value ) { this . VAR_1 = value ; },"['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",293
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , ( STRING_1 + VAR_1 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator']",294
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new java.util.HashSet < > ( ) ; } VAR_3 . add ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new java.util.ArrayList < > ( ) ; } VAR_3 . add ( VAR_1 ) ; },['Update ConstructorCall'],295
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_3 . toString ( ) ) ; } },private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { java.lang.System.out.println ( VAR_3 . toString ( ) ) ; } },"['Update Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete TypeAccess']",297
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { this . VAR_3 = VAR_1 . METHOD_2 ( null , VAR_2 , null ) . METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_3 = VAR_1 . METHOD_2 ( null , null , null ) . METHOD_3 ( ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",298
public boolean METHOD_1 ( ) { return ( ( VAR_1 ) == null ) && ( ( VAR_2 ) == null ) ; },public boolean METHOD_1 ( ) { return true ; },"['Insert Literal', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",299
"public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_2 ( VAR_1 , VAR_3 ) ; }","['Insert ThisAccess', 'Delete TypeAccess']",300
"TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.List < java.lang.String > VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String value , java.lang.String VAR_6 , java.util.List < java.lang.String > VAR_7 ) ;","TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.List < java.lang.String > VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String value , java.lang.String VAR_6 ) ;","['Delete TypeReference', 'Delete TypeReference', 'Delete Parameter']",302
"public java.lang.String METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { TYPE_1 writer = new TYPE_1 ( ) ; METHOD_1 ( writer , VAR_1 , true ) ; return VAR_2 . toString ( ) ; }","public java.lang.String METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { TYPE_1 writer = new TYPE_1 ( ) ; METHOD_1 ( writer , VAR_1 , false ) ; return VAR_2 . toString ( ) ; }",['Update Literal'],303
public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; } else { METHOD_3 ( true ) ; } },public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; } else { METHOD_3 ( ) ; } },['Delete Literal'],304
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) , true ) ; }",public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; },['Delete Literal'],305
"public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( state ) ; VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( ) ; return new TYPE_1 ( VAR_3 ) ; }","public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( state ) ; VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; return new TYPE_1 ( VAR_3 ) ; }","['Delete VariableRead', 'Delete Invocation']",306
private boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( VAR_2 ) ) != null ; },private boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( VAR_2 ) ) == null ; },['Update BinaryOperator'],311
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 [ ] VAR_2 = this . METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 . length ) == 0 ) { return null ; } return VAR_2 [ 0 ] ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 [ ] VAR_2 = this . METHOD_2 ( VAR_1 ) ; return VAR_2 [ 0 ] ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",312
public static int METHOD_1 ( final byte b ) { int VAR_1 = b ; if ( b < 0 ) { VAR_1 = b + INT_1 ; } return VAR_1 ; },private static int METHOD_1 ( final byte b ) { int VAR_1 = b ; if ( b < 0 ) { VAR_1 = b + INT_1 ; } return VAR_1 ; },['Update Wra'],313
private TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( this . VAR_2 ) ) ; this . VAR_2 . METHOD_4 ( ) ; return this ; },public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( this . VAR_2 ) ) ; this . VAR_2 . METHOD_4 ( ) ; return this ; },['Update Wra'],314
public void METHOD_1 ( java.util.ArrayList < java.lang.Integer > values ) { VAR_1 = new java.util.ArrayList < java.lang.Integer > ( values ) ; VAR_2 = new java.util.ArrayList < java.lang.Integer > ( values ) ; },public void METHOD_1 ( java.util.ArrayList < java.lang.Integer > values ) { VAR_1 = values ; VAR_2 = values ; },"['Move VariableRead', 'Move VariableRead', 'Delete ConstructorCall', 'Delete ConstructorCall']",315
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; } else { VAR_2 . start ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; } else { VAR_2 . start ( ) ; } },['Update Wra'],316
"public int METHOD_1 ( android.content.Intent intent , int VAR_1 , int VAR_2 ) { super . METHOD_1 ( intent , VAR_1 , VAR_2 ) ; java.lang.System.out.println ( STRING_1 ) ; TYPE_1 . METHOD_2 ( this ) ; return VAR_3 ; }","public int METHOD_1 ( android.content.Intent intent , int VAR_1 , int VAR_2 ) { super . METHOD_1 ( intent , VAR_1 , VAR_2 ) ; java.lang.System.out.print ( STRING_1 ) ; TYPE_1 . METHOD_2 ( this ) ; return VAR_3 ; }",['Update Invocation'],317
"private TYPE_1 METHOD_1 ( ) { long startTime = TYPE_2 . METHOD_2 ( ) ; TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( VAR_3 , STRING_1 , VAR_4 , VAR_5 ) ; VAR_6 = ( TYPE_2 . METHOD_2 ( ) ) - startTime ; return VAR_1 ; }","private TYPE_1 METHOD_1 ( ) { long startTime = TYPE_2 . METHOD_2 ( ) ; TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( VAR_3 , STRING_1 , VAR_4 , false ) ; VAR_6 = ( TYPE_2 . METHOD_2 ( ) ) - startTime ; return VAR_1 ; }","['Insert Literal', 'Delete TypeAccess']",318
"private static long METHOD_1 ( long VAR_1 , double VAR_2 ) { return 0 ; }","private static native long METHOD_1 ( long VAR_1 , double VAR_2 ) ;","['Insert Wra', 'Delete Literal', 'Delete Return']",319
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return null ; },private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete Literal', 'Delete Return']",321
public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { VAR_2 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } },public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { VAR_2 . METHOD_1 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } },['Update Invocation'],322
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , null ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; }",['Delete Literal'],323
"public static boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , java.lang.String VAR_3 ) { java.lang.String VAR_4 = ( ( TYPE_2 . METHOD_2 ( ) ) + STRING_1 ) + VAR_3 ; return TYPE_3 . METHOD_3 ( VAR_1 , VAR_2 , VAR_4 ) ; }","public static boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , java.lang.String VAR_3 ) { java.lang.String VAR_4 = ( ( TYPE_2 . METHOD_2 ( ) ) + STRING_1 ) + VAR_3 ; return TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 , VAR_4 ) ; }",['Update Invocation'],324
"public void METHOD_1 ( ) throws java.lang.Exception { try { METHOD_2 ( 0 ) ; METHOD_2 ( STRING_1 , STRING_2 , new TYPE_1 ( ) ) ; } finally { METHOD_3 ( ) ; } }","public void METHOD_1 ( ) throws java.lang.Exception { try { METHOD_2 ( 0 ) ; METHOD_2 ( STRING_1 , STRING_2 , null ) ; } finally { METHOD_3 ( ) ; } }","['Insert Literal', 'Delete ConstructorCall']",326
"public void METHOD_1 ( ) { for ( java.lang.Integer VAR_1 : VAR_2 ) { METHOD_2 ( VAR_1 , VAR_3 ) ; } }",public void METHOD_1 ( ) { for ( java.lang.Integer VAR_1 : VAR_2 ) { METHOD_2 ( VAR_1 ) ; } },['Delete TypeAccess'],327
"static TYPE_1 METHOD_1 ( java.io.InputStream VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_1 VAR_4 = TYPE_2 . METHOD_2 ( VAR_1 ) ; return TYPE_3 . METHOD_3 ( VAR_4 , VAR_2 , VAR_3 ) ; }","static TYPE_1 METHOD_1 ( java.io.InputStream VAR_1 , int VAR_2 ) { TYPE_1 VAR_4 = TYPE_2 . METHOD_2 ( VAR_1 ) ; return TYPE_3 . METHOD_3 ( VAR_4 , VAR_2 , 0 ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",329
"private int METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException , TYPE_2 { VAR_1 . METHOD_2 ( ) ; int VAR_2 = java.lang.Integer.parseInt ( VAR_3 . getText ( ) ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_2 ( ) ; return VAR_2 ; }","private int METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException , TYPE_2 { VAR_1 . METHOD_2 ( ) ; int VAR_2 = java.lang.Integer.parseInt ( VAR_3 . getName ( ) ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_2 ( ) ; return VAR_2 ; }",['Update Invocation'],330
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , VAR_3 ) . show ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_3 ( METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , VAR_3 ) . show ( ) ; }","['Delete TypeAccess', 'Delete Invocation']",331
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( STRING_1 ) ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( STRING_1 ) ; },"['Delete TypeReference', 'Delete Parameter']",332
"public int METHOD_1 ( TYPE_1 a , TYPE_1 b ) { return VAR_1 . getName ( ) . METHOD_2 ( VAR_2 . getName ( ) ) ; }","public int METHOD_1 ( TYPE_1 a , TYPE_1 b ) { return VAR_1 . getName ( ) . compareTo ( VAR_2 . getName ( ) ) ; }",['Update Invocation'],333
"protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( 1 , false ) ; }",protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( false ) ; },"['Update ConstructorCall', 'Delete Literal']",334
"public static void error ( java.lang.Exception VAR_1 ) { VAR_1 . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) , true , new java.util.Date ( ) ) ; }","public static void error ( java.lang.Exception VAR_1 ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) , true , new java.util.Date ( ) ) ; }","['Delete VariableRead', 'Delete Invocation']",335
"private static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 . METHOD_2 ( ) ) ; }","private static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 . METHOD_2 ( ) ) ; }",['Update BinaryOperator'],336
void METHOD_1 ( int position ) ;,void METHOD_1 ( int index ) ;,['Update Parameter'],337
public void METHOD_1 ( ) { VAR_1 [ index ] = VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { VAR_1 [ index ] = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_4 ( ) ; },['Delete Invocation'],341
protected java.lang.Object [ ] METHOD_1 ( ) { return VAR_1 ; },protected java.lang.Object [ ] METHOD_1 ( ) { return this . VAR_1 ; },['Insert ThisAccess'],343
public double METHOD_1 ( ) { return y ; },public double METHOD_1 ( ) { return x ; },['Update FieldRead'],344
"public static void METHOD_1 ( int i ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 , i ) . METHOD_5 ( ) ; }","public static void METHOD_1 ( int i ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 , i ) . commit ( ) ; }",['Update Invocation'],345
"public java.lang.String update ( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { VAR_4 . METHOD_1 ( VAR_2 ) ; return METHOD_2 ( VAR_3 ) ; }","public java.lang.String update ( TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { VAR_4 . METHOD_1 ( VAR_2 ) ; return METHOD_2 ( VAR_3 ) ; }","['Delete TypeReference', 'Delete Parameter']",346
"public java.util.Set < java.lang.String > METHOD_1 ( java.lang.String state , java.lang.String VAR_1 ) ;",public java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",347
"public java.lang.String METHOD_1 ( java.lang.Integer a , java.lang.Integer b ) { return STRING_1 ; }",public java.lang.String METHOD_1 ( ) { return STRING_1 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",348
"public static boolean METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_1 result = TYPE_3 . METHOD_2 ( item ) ; if ( result == null ) { return false ; } return VAR_1 . METHOD_3 ( result ) ; }","public static boolean METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_1 result = TYPE_3 . METHOD_2 ( item ) ; if ( result == null ) { return false ; } return VAR_1 . METHOD_3 ( item ) ; }",['Update VariableRead'],349
public java.lang.String METHOD_1 ( ) { METHOD_2 ( ) ; return STRING_1 ; },public java.lang.String METHOD_1 ( ) { METHOD_2 ( ) ; return null ; },"['Insert Literal', 'Delete FieldRead']",350
void METHOD_1 ( int y ) ;,void METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",351
public void METHOD_1 ( TYPE_1 view ) { if ( ! ( VAR_1 . contains ( view ) ) ) { java.lang.System.err.println ( ( ( VAR_2 ) + STRING_1 ) ) ; return ; } VAR_1 . remove ( view ) ; },public void METHOD_1 ( TYPE_1 view ) { if ( ! ( VAR_1 . contains ( view ) ) ) { java.lang.System.err.println ( ( ( VAR_2 ) + STRING_1 ) ) ; return ; } VAR_1 . add ( view ) ; },['Update Invocation'],352
public TYPE_1 METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) == ( VAR_3 ) ) { return new TYPE_1 ( false ) ; } return METHOD_2 ( VAR_1 ) . not ( ) ; },public TYPE_1 METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) == ( VAR_3 ) ) { return new TYPE_1 ( false ) ; } return new TYPE_1 ( true ) ; },"['Insert ConstructorCall', 'Insert Literal', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",354
"public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; return new TYPE_2 ( VAR_1 , TYPE_3 . METHOD_2 ( type ) ) ; }",public TYPE_2 METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; return this ; },"['Update TypeReference', 'Insert ThisAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete ConstructorCall']",355
"public void METHOD_1 ( char [ ] number , boolean VAR_1 ) { long num = java.lang.Long.parseLong ( java.lang.String . METHOD_2 ( number ) ) ; if ( VAR_2 . METHOD_3 ( num ) ) { VAR_3 . put ( num , VAR_1 ) ; } }","public void METHOD_1 ( char [ ] number , boolean VAR_1 ) { long num = java.lang.Long.parseLong ( java.lang.String . METHOD_2 ( number ) ) ; if ( VAR_3 . contains ( num ) ) { VAR_3 . put ( num , VAR_1 ) ; } }","['Update Invocation', 'Update TypeAccess']",356
"private void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( this , VAR_1 ) ; VAR_3 . start ( ) ; }","public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( this , VAR_1 ) ; VAR_3 . start ( ) ; }",['Update Wra'],359
"private static void METHOD_1 ( TYPE_1 [ ] [ ] VAR_1 , TYPE_2 format , int VAR_2 , int VAR_3 , int VAR_4 ) { VAR_1 [ 1 ] [ format . METHOD_2 ( ) ] = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , true ) ; }","private static void METHOD_1 ( TYPE_1 [ ] [ ] VAR_1 , TYPE_2 format , int VAR_2 ) { VAR_1 [ 1 ] [ format . METHOD_2 ( ) ] = new TYPE_1 ( VAR_2 ) ; }","['Update ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete Literal']",360
protected boolean METHOD_1 ( ) { synchronized ( VAR_1 ) { return VAR_2 ; } },protected boolean METHOD_1 ( ) { synchronized ( VAR_2 ) { return VAR_2 ; } },['Update FieldRead'],361
public java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; },public java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },['Update Invocation'],362
"public static java.lang.String METHOD_1 ( java.lang.String name , java.lang.String value ) { return ( ( ( STRING_1 + ( VAR_1 . replaceAll ( STRING_2 , STRING_3 ) ) ) + STRING_4 ) + ( VAR_2 . replaceAll ( STRING_2 , STRING_3 ) ) ) + STRING_5 ; }","public static java.lang.String METHOD_1 ( java.lang.String name , java.lang.String value ) { return ( ( ( STRING_1 + name ) + STRING_4 ) + ( VAR_2 . replaceAll ( STRING_2 , STRING_3 ) ) ) + STRING_5 ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",364
protected TYPE_1 METHOD_1 ( TYPE_2 ... VAR_1 ) { VAR_2 = VAR_1 [ 0 ] ; VAR_3 = VAR_4 . url ; return TYPE_3 . METHOD_2 ( VAR_3 ) ; },protected TYPE_1 METHOD_1 ( TYPE_2 ... VAR_1 ) { VAR_2 = VAR_1 [ 0 ] ; VAR_3 = VAR_4 . url ; return METHOD_2 ( VAR_3 ) ; },['Update TypeAccess'],365
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) ;","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;","['Delete TypeReference', 'Delete Parameter']",366
public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( VAR_2 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; },"['Delete TypeAccess', 'Delete Invocation']",367
public java.util.Set < java.lang.Object > METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( ( ( java.lang.Object ) ( this ) ) ) ; },public java.util.Set < java.lang.Object > METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( this ) ; },"['Update ThisAccess', 'Delete TypeReference']",368
"public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( getActivity ( ) , VAR_2 , null ) ; }","public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; }","['Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",369
"public java.lang.String getValue ( TYPE_1 type , int VAR_1 ) { return VAR_2 [ VAR_1 ] [ type . METHOD_1 ( ) ] ; }","public java.lang.String getValue ( TYPE_1 type , int VAR_1 ) { return rows [ ( VAR_1 + 1 ) ] [ type . METHOD_1 ( ) ] ; }","['Update FieldRead', 'Insert BinaryOperator', 'Move VariableRead', 'Insert Literal']",370
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 src , TYPE_2 VAR_2 ) { assert ( VAR_3 ) != null ; if ( VAR_3 . METHOD_2 ( VAR_1 , src , VAR_2 ) ) { METHOD_3 ( ) ; return true ; } else { return false ; } }","public boolean METHOD_1 ( TYPE_1 src , TYPE_2 VAR_2 ) { assert ( VAR_3 ) != null ; if ( VAR_3 . METHOD_2 ( this , src , VAR_2 ) ) { METHOD_3 ( ) ; return true ; } else { return false ; } }","['Insert ThisAccess', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",372
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 ;",public void METHOD_1 ( TYPE_2 VAR_2 ) throws TYPE_3 ;,"['Delete TypeReference', 'Delete Parameter']",373
public void METHOD_1 ( ) { VAR_1 = true ; METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; this . METHOD_4 ( ) ; },public void METHOD_1 ( ) { VAR_1 = true ; METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; this . METHOD_4 ( ) ; },['Update Literal'],375
"private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) , 0 ) ; }",private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; },['Delete Literal'],376
public java.util.Set < TYPE_1 > METHOD_1 ( ) { return new TYPE_2 < TYPE_1 > ( METHOD_2 ( ) . VAR_1 . values ( ) ) ; },public java.util.Set < TYPE_1 > METHOD_1 ( ) { return new java.util.HashSet < TYPE_1 > ( METHOD_2 ( ) . VAR_1 . values ( ) ) ; },['Update ConstructorCall'],377
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; return VAR_2 ; },['Update Invocation'],378
"public static java.lang.Object [ ] METHOD_1 ( TYPE_1 TYPE_2 ) { return new java.lang.Object [ ] { TYPE_2 . METHOD_2 ( ) , TYPE_2 . METHOD_3 ( ) , VAR_1 . getId ( ) } ; }","public static java.lang.Object [ ] METHOD_1 ( TYPE_1 TYPE_2 ) { return new java.lang.Object [ ] { TYPE_2 . METHOD_2 ( ) , TYPE_2 . METHOD_3 ( ) } ; }","['Delete TypeAccess', 'Delete Invocation']",379
public void METHOD_1 ( java.lang.String content ) { if ( ( ( VAR_1 ) != null ) && ( VAR_2 . equals ( content ) ) ) return ; VAR_1 = VAR_3 . trim ( ) ; METHOD_2 ( ) ; },public void METHOD_1 ( java.lang.String content ) { if ( ( ( VAR_1 ) != null ) && ( VAR_2 . equals ( content ) ) ) return ; VAR_1 = content ; METHOD_2 ( ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",380
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( ( ( java.lang.Integer ) ( VAR_1 . METHOD_4 ( ) ) ) ) ; VAR_2 . METHOD_5 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( position ) ; VAR_2 . METHOD_5 ( ) ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation']",381
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . put ( ( STRING_1 + VAR_1 ) , VAR_2 ) ; return this ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; return this ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",382
"public void METHOD_1 ( java.util.HashMap < java.lang.String , java.lang.String > VAR_1 , boolean VAR_2 ) throws java.io.IOException { this . VAR_3 = VAR_1 ; METHOD_2 ( VAR_2 ) ; }","public void METHOD_1 ( java.util.HashMap < java.lang.String , java.lang.String > VAR_1 ) throws java.io.IOException { this . VAR_3 = VAR_1 ; METHOD_2 ( ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",383
"public TYPE_1 METHOD_1 ( java.lang.String key , java.lang.Object value ) { VAR_1 . METHOD_1 ( key , value ) ; return this ; }","public TYPE_1 METHOD_1 ( java.lang.String key , java.lang.String value ) { VAR_1 . METHOD_1 ( key , value ) ; return this ; }",['Update TypeReference'],384
TYPE_1 < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) ;,TYPE_1 < java.lang.String > METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",385
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( null ) ; VAR_3 . METHOD_3 ( VAR_1 , VAR_4 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( null ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Update Invocation', 'Delete TypeAccess']",386
"public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( VAR_1 class ) ; TYPE_2 . METHOD_3 ( VAR_2 . compareTo ( STRING_1 ) ) . METHOD_4 ( 1 ) ; VAR_3 . assertEquals ( 1 , VAR_2 . compareTo ( STRING_1 ) ) ; }","public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( VAR_1 class ) ; TYPE_2 . METHOD_3 ( VAR_2 . compareTo ( STRING_1 ) ) . METHOD_4 ( 1 ) ; assertEquals ( 1 , VAR_2 . compareTo ( STRING_1 ) ) ; }",['Update TypeAccess'],387
"public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; this . VAR_6 = VAR_1 . METHOD_2 ( this . VAR_6 , event . METHOD_3 ( ) , false ) ; }","public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; this . VAR_6 = VAR_1 . METHOD_2 ( this . VAR_6 , event . METHOD_3 ( ) ) ; }",['Delete Literal'],388
protected abstract int METHOD_1 ( TYPE_1 key ) ;,public abstract int METHOD_1 ( TYPE_1 key ) ;,['Update Wra'],389
public boolean isEmpty ( ) { return ( VAR_1 . equals ( VAR_2 ) ) && ( VAR_3 . equals ( VAR_4 ) ) ; },public boolean isEmpty ( ) { return ( VAR_1 . equals ( VAR_4 ) ) && ( VAR_3 . equals ( VAR_4 ) ) ; },['Update TypeAccess'],390
public boolean METHOD_1 ( ) { return METHOD_2 ( true ) ; },public boolean METHOD_1 ( ) { return METHOD_2 ( false ) ; },['Update Literal'],391
public void METHOD_1 ( TYPE_1 event ) { VAR_1 . info ( STRING_1 ) ; for ( TYPE_2 VAR_2 : VAR_3 ) { VAR_2 . METHOD_1 ( ) ; } },public static void METHOD_1 ( ) { VAR_1 . info ( STRING_1 ) ; for ( TYPE_2 VAR_2 : VAR_3 ) { VAR_2 . METHOD_1 ( ) ; } },"['Insert Wra', 'Delete TypeReference', 'Delete Parameter']",392
public void METHOD_1 ( TYPE_1 target ) { synchronized ( VAR_1 ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . add ( target ) ; } },private void METHOD_1 ( TYPE_1 target ) { synchronized ( VAR_1 ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . add ( target ) ; } },['Update Wra'],394
"void METHOD_1 ( java.util.List < TYPE_1 > data , int position , java.lang.String VAR_1 , java.lang.String VAR_2 , double VAR_3 , java.lang.String VAR_4 , double VAR_5 ) ;","void METHOD_1 ( java.util.List < TYPE_1 > data , int position , java.lang.String VAR_1 , java.lang.String VAR_2 , double VAR_3 ) ;","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",395
"public void METHOD_1 ( TYPE_1 VAR_1 , float VAR_2 ) { VAR_3 . i ( STRING_1 , ( STRING_2 + VAR_2 ) ) ; VAR_4 . METHOD_2 ( ) ; listener . METHOD_3 ( java.lang.Math.round ( VAR_2 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , float VAR_2 ) { VAR_3 . i ( STRING_1 , ( STRING_2 + VAR_2 ) ) ; listener . METHOD_3 ( java.lang.Math.round ( VAR_2 ) ) ; }","['Delete TypeAccess', 'Delete Invocation']",397
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( this . VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) <= INT_1 ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( this . VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) <= 1 ; },"['Insert Literal', 'Delete FieldRead']",399
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( true ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( ) . METHOD_4 ( true ) ; },"['Delete VariableRead', 'Delete Invocation']",400
public java.lang.Double METHOD_1 ( ) { return this . VAR_1 ; },public java.lang.String METHOD_1 ( ) { return this . VAR_1 ; },['Update TypeReference'],402
private void METHOD_1 ( java.lang.String pattern ) { VAR_1 . add ( pattern ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; },public void METHOD_1 ( java.lang.String pattern ) { VAR_1 . add ( pattern ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; },['Update Wra'],403
"public void METHOD_1 ( java.awt.Color VAR_1 ) { for ( TYPE_1 [ ] VAR_2 : VAR_3 ) for ( TYPE_1 VAR_4 : VAR_2 ) VAR_5 . METHOD_2 ( VAR_4 , VAR_1 ) ; }","private void METHOD_1 ( java.awt.Color VAR_1 ) { for ( TYPE_1 [ ] VAR_2 : VAR_3 ) for ( TYPE_1 VAR_4 : VAR_2 ) VAR_5 . METHOD_2 ( VAR_4 , VAR_1 ) ; }",['Update Wra'],404
public final int METHOD_1 ( ) { return VAR_1 . method ; },protected final int METHOD_1 ( ) { return VAR_1 . method ; },['Update Wra'],405
public void METHOD_1 ( java.lang.Boolean VAR_1 ) { if ( ( VAR_1 != null ) && VAR_1 ) VAR_2 . setText ( METHOD_2 ( ) . getString ( VAR_3 ) ) ; else VAR_2 . setText ( METHOD_2 ( ) . getString ( VAR_4 ) ) ; },public void METHOD_1 ( java.lang.Boolean VAR_1 ) { if ( VAR_1 ) VAR_2 . setText ( METHOD_2 ( ) . getString ( VAR_3 ) ) ; else VAR_2 . setText ( METHOD_2 ( ) . getString ( VAR_4 ) ) ; },"['Move VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",406
protected final boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( null ) ; return VAR_3 . remove ( VAR_2 ) ; },"protected final boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Object VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( null ) ; return VAR_3 . remove ( VAR_2 , VAR_1 ) ; }",['Insert VariableRead'],407
"public void METHOD_1 ( int VAR_1 , TYPE_1 value ) { METHOD_2 ( VAR_1 ) ; VAR_2 = VAR_1 ; TYPE_2 . METHOD_3 ( buffer , value ) ; }","public void METHOD_1 ( int VAR_1 , TYPE_1 value ) { METHOD_2 ( VAR_1 ) ; VAR_2 = 0 ; TYPE_2 . METHOD_3 ( buffer , value ) ; }","['Insert Literal', 'Delete VariableRead']",408
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; },['Update Wra'],409
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( INT_1 , 0 , INT_1 , 1 ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( INT_1 , INT_1 , INT_1 , 1 ) ; }","['Insert TypeAccess', 'Delete Literal']",410
public static void main ( java.lang.String [ ] args ) { TYPE_1 f = new TYPE_1 ( ) ; VAR_1 . add ( new TYPE_2 ( ) ) ; f . METHOD_1 ( ) ; f . METHOD_2 ( true ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 f = new TYPE_1 ( ) ; VAR_1 . add ( new TYPE_2 ( ) ) ; f . METHOD_2 ( true ) ; },"['Delete VariableRead', 'Delete Invocation']",411
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_3 ) ; },['Update TypeAccess'],413
"public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( this , VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , false ) , true ) ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( this , VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , false ) ) ; }",['Delete Literal'],414
public void METHOD_1 ( ) { java.lang.System.out.println ( METHOD_2 ( ) . toString ( 0 ) ) ; },public void METHOD_1 ( ) { java.lang.System.out.println ( METHOD_2 ( ) . toString ( ) ) ; },['Delete Literal'],415
"public TYPE_1 METHOD_1 ( int VAR_1 , TYPE_2 VAR_2 ) { TYPE_1 status = VAR_3 ; if ( METHOD_2 ( VAR_2 ) ) { status = VAR_4 . METHOD_3 ( VAR_1 ) ; } METHOD_4 ( ) ; return status ; }","public TYPE_1 METHOD_1 ( int VAR_1 , TYPE_2 VAR_2 ) { TYPE_1 status = VAR_3 ; if ( METHOD_2 ( VAR_2 ) ) { status = VAR_4 . METHOD_3 ( VAR_1 ) ; } METHOD_4 ( status , VAR_2 ) ; return status ; }","['Insert VariableRead', 'Insert VariableRead']",416
"public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { if ( VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; } if ( VAR_4 ) { return ; } TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { if ( VAR_4 ) { TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; return ; } TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move FieldRead', 'Move Return', 'Delete FieldRead', 'Delete Block', 'Delete If']",417
"private byte [ ] METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 , long VAR_3 ) { return TYPE_2 . METHOD_2 ( VAR_4 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_5 ) , TYPE_2 . METHOD_5 ( VAR_2 ) , TYPE_2 . METHOD_5 ( VAR_3 ) ) ; }","private byte [ ] METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 , long VAR_3 ) { return TYPE_2 . METHOD_2 ( VAR_4 , VAR_1 . METHOD_1 ( ) . METHOD_4 ( VAR_5 ) , TYPE_2 . METHOD_5 ( VAR_2 ) , TYPE_2 . METHOD_5 ( VAR_3 ) ) ; }",['Update Invocation'],418
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) ;",public java.util.List < TYPE_1 > METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",419
"public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_4 . assertEquals ( STRING_1 , true , VAR_1 . METHOD_3 ( ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; assertEquals ( STRING_1 , true , VAR_1 . METHOD_3 ( ) ) ; }",['Update TypeAccess'],420
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) . METHOD_4 ( ) ) ; },private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) . getTime ( ) ) ; },['Update Invocation'],421
public void METHOD_1 ( TYPE_1 event ) { VAR_1 . init ( ) ; },public void METHOD_1 ( TYPE_1 event ) { VAR_1 . init ( event ) ; },['Insert VariableRead'],422
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( new TYPE_3 ( STRING_1 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( new TYPE_3 ( STRING_1 ) ) ; },"['Delete VariableRead', 'Delete Invocation']",423
"public java.lang.String [ ] METHOD_1 ( ) { return new java.lang.String [ ] { VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , STRING_1 } ; }","public java.lang.String [ ] METHOD_1 ( ) { return new java.lang.String [ ] { VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 } ; }",['Delete FieldRead'],424
"public java.util.List < java.lang.Integer > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.List < java.lang.Integer > VAR_2 , java.util.List < java.lang.Integer > VAR_3 , TYPE_2 VAR_4 ) { return VAR_2 ; }","public java.util.List < java.lang.Integer > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.List < java.lang.Integer > VAR_2 , java.util.List < java.lang.Integer > VAR_3 , TYPE_2 VAR_4 ) { return null ; }","['Insert Literal', 'Delete VariableRead']",425
"void METHOD_1 ( java.lang.String id , java.lang.String name ) ;",void METHOD_1 ( java.lang.String id ) ;,"['Delete TypeReference', 'Delete Parameter']",427
"public int delete ( int VAR_1 , java.lang.String VAR_2 ) throws TYPE_1 ;",public int delete ( int VAR_1 ) throws TYPE_1 ;,"['Delete TypeReference', 'Delete Parameter']",428
"public void METHOD_1 ( android.view.View view ) { TYPE_1 . METHOD_2 ( context , VAR_1 . METHOD_3 ( ) , VAR_2 ) . show ( ) ; }",public void METHOD_1 ( android.view.View view ) { },"['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",430
public synchronized void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; },public synchronized void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_3 ( ) ; },['Update Invocation'],431
"public int remove ( TYPE_1 VAR_1 ) { final int index = VAR_2 . METHOD_1 ( VAR_1 ) ; if ( 0 <= index ) { VAR_3 . remove ( index ) ; } METHOD_2 ( VAR_4 , null , null ) ; return index ; }","public int remove ( TYPE_1 VAR_1 ) { final int index = VAR_2 . METHOD_1 ( VAR_1 ) ; if ( 0 < index ) { VAR_3 . remove ( index ) ; } METHOD_2 ( VAR_4 , null , null ) ; return index ; }",['Update BinaryOperator'],432
"public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; return VAR_3 . METHOD_1 ( VAR_2 , VAR_1 ) ; }","protected java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; return VAR_3 . METHOD_1 ( VAR_2 , VAR_1 ) ; }",['Update Wra'],434
public void METHOD_1 ( java.lang.String error ) { assertTrue ( false ) ; VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( java.lang.String error ) { },"['Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",435
"private void METHOD_1 ( ) { VAR_1 . add ( new TYPE_1 ( INT_1 , INT_2 ) ) ; VAR_2 . METHOD_2 ( ) ; }","private void METHOD_1 ( ) { VAR_1 . add ( new TYPE_1 ( INT_2 , INT_2 ) ) ; VAR_2 . METHOD_2 ( ) ; }",['Update FieldRead'],436
"public static void METHOD_1 ( int i ) { new TYPE_1 ( ) . METHOD_2 ( VAR_1 , VAR_2 . get ( i ) . METHOD_3 ( ) ) ; VAR_2 . remove ( i ) ; }","public static void METHOD_1 ( int i ) { new TYPE_1 ( i ) . METHOD_2 ( VAR_1 , VAR_2 . get ( i ) . METHOD_3 ( ) ) ; }","['Update ConstructorCall', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",437
"protected java.util.Map < java.lang.String , java.lang.Class < ? extends TYPE_1 > > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 class , STRING_2 , VAR_2 class , STRING_3 , VAR_3 class ) ; }","protected java.util.Map < java.lang.String , java.lang.Class < ? extends TYPE_1 > > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( STRING_2 , VAR_2 class , STRING_3 , VAR_3 class ) ; }","['Delete TypeAccess', 'Delete TypeAccess']",438
private boolean METHOD_1 ( java.lang.String VAR_1 ) { switch ( VAR_2 . METHOD_1 ( VAR_1 ) ) { case 0 : TYPE_1 . METHOD_2 ( VAR_3 ) ; return true ; default : TYPE_1 . METHOD_3 ( VAR_4 ) ; return false ; } },private boolean METHOD_1 ( java.lang.String VAR_1 ) { switch ( VAR_2 . METHOD_1 ( VAR_1 ) ) { case 0 : return true ; default : return false ; } },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",440
protected TYPE_1 METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; },protected TYPE_1 METHOD_1 ( int index ) { return VAR_2 . get ( index ) ; },"['Update Parameter', 'Update VariableRead']",441
"private TYPE_1 METHOD_1 ( final long position ) { return VAR_1 [ TYPE_2 . METHOD_2 ( position , VAR_2 ) ] ; }","private TYPE_1 METHOD_1 ( final long position ) { return VAR_1 [ METHOD_2 ( position , VAR_2 ) ] ; }",['Update TypeAccess'],442
"void METHOD_1 ( java.lang.String VAR_1 , java.util.Set < java.lang.String > VAR_2 , java.util.List < java.util.Map < java.lang.String , java.lang.Object > > VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.Boolean VAR_6 ) throws TYPE_1 ;","void METHOD_1 ( java.util.Set < java.lang.String > VAR_2 , java.util.List < java.util.Map < java.lang.String , java.lang.Object > > VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.Boolean VAR_6 ) throws TYPE_1 ;","['Delete TypeReference', 'Delete Parameter']",444
java.lang.String METHOD_1 ( java.lang.String text ) throws java.lang.Exception { if ( VAR_1 . equals ( STRING_1 ) ) { return new java.lang.String ( STRING_2 ) ; } return null ; },java.lang.String METHOD_1 ( java.lang.String text ) throws java.lang.Exception { return null ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",446
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) ) ; return STRING_2 ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 . METHOD_1 ( ) ) ; return STRING_2 ; }",['Update Invocation'],447
"public static TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { return VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , 0 , 0 , 0 , 0 ) ; }","public static TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { return VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , 0 , 0 , 0 , 0 ) ; }",['Update Invocation'],448
"public void METHOD_1 ( java.lang.String id ) { METHOD_1 ( VAR_1 . item ( id ) , 1 ) ; }",public void METHOD_1 ( java.lang.String id ) { METHOD_1 ( VAR_1 . item ( id ) ) ; },['Delete Literal'],449
protected void METHOD_1 ( java.lang.Void result ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_2 ) { } METHOD_3 ( STRING_1 ) ; },protected void METHOD_1 ( java.lang.Void result ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_2 ) { } METHOD_3 ( ) ; },['Delete TypeAccess'],450
"public void METHOD_1 ( java.lang.String value ) throws TYPE_1 { METHOD_2 ( STRING_1 , value , true , true ) ; }","public void METHOD_1 ( java.lang.String value ) throws TYPE_1 { METHOD_2 ( STRING_1 , value , true ) ; }",['Delete Literal'],451
"public abstract TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) ;","public abstract TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) ;","['Delete TypeReference', 'Delete Parameter']",452
public void METHOD_1 ( ) { VAR_1 = new java.util.HashMap < > ( ) ; },public void METHOD_1 ( ) { VAR_1 = new java.util.ArrayList < > ( ) ; },['Update ConstructorCall'],453
"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( false , new TYPE_2 ( ) , new TYPE_2 ( ) ) ; VAR_2 = new TYPE_3 ( VAR_1 ) ; VAR_3 = new TYPE_4 ( INT_1 ) ; }",public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( false ) ; VAR_2 = new TYPE_3 ( VAR_1 ) ; VAR_3 = new TYPE_4 ( INT_1 ) ; },"['Update ConstructorCall', 'Delete ConstructorCall', 'Delete ConstructorCall']",454
"public TYPE_1 METHOD_1 ( final long VAR_1 , final int offset , final int VAR_2 , final java.lang.String VAR_3 ) { return VAR_4 . METHOD_1 ( VAR_1 , offset , VAR_2 , TYPE_2 . METHOD_2 ( VAR_3 ) ) ; }","public TYPE_1 METHOD_1 ( final long VAR_1 , final int offset , final int VAR_2 , final TYPE_2 VAR_3 ) { return VAR_4 . METHOD_1 ( VAR_1 , offset , VAR_2 , VAR_3 ) ; }","['Update TypeReference', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",455
public void METHOD_1 ( final TYPE_1 VAR_1 ) { for ( final TYPE_2 VAR_2 : VAR_3 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } },public void METHOD_1 ( final TYPE_1 VAR_1 ) { for ( final TYPE_2 VAR_2 : this . VAR_3 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } },['Insert ThisAccess'],456
protected synchronized void METHOD_1 ( TYPE_1 obj ) { VAR_1 . remove ( obj . METHOD_2 ( ) ) ; },public synchronized void METHOD_1 ( TYPE_1 obj ) { VAR_1 . remove ( obj . METHOD_2 ( ) ) ; },['Update Wra'],457
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) VAR_2 = new TYPE_1 ( VAR_1 ) ; return VAR_2 ; },public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_2 ) == null ) VAR_2 = new TYPE_1 ( ) ; return VAR_2 ; },"['Delete Wra', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",458
"private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 params ) throws java.lang.Exception { final TYPE_3 VAR_2 = new TYPE_3 ( params ) ; final TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , params . METHOD_4 ( ) , VAR_3 ) ; return VAR_3 ; }","private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 params ) throws java.lang.Exception { final TYPE_3 VAR_2 = new TYPE_3 ( params ) ; final TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_3 ) ; return VAR_3 ; }","['Delete VariableRead', 'Delete Invocation']",459
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( null == ( VAR_2 ) ) { VAR_2 = new TYPE_2 ( ) ; METHOD_2 ( VAR_2 , null ) ; } VAR_2 . METHOD_3 ( VAR_1 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( null == ( VAR_2 ) ) { VAR_2 = new TYPE_2 ( ) ; METHOD_2 ( VAR_2 ) ; } VAR_2 . METHOD_3 ( VAR_1 ) ; },['Delete Literal'],461
"public void METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) [ 0 ] ) ) ; view = ( ( TYPE_2 ) ( METHOD_2 ( ) [ 1 ] ) ) ; METHOD_3 ( new TYPE_3 ( this , INT_1 ) ) ; }","public void METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) [ 0 ] ) ) ; view = ( ( TYPE_2 ) ( METHOD_2 ( ) [ 1 ] ) ) ; METHOD_3 ( new TYPE_3 ( this , 1 ) ) ; }","['Update ConstructorCall', 'Insert Literal', 'Delete FieldRead']",462
public void METHOD_1 ( java.util.Collection < TYPE_1 > VAR_1 ) { if ( VAR_1 == null ) { return ; } for ( TYPE_1 VAR_2 : VAR_1 ) { METHOD_2 ( VAR_2 ) ; } },public void METHOD_1 ( java.util.Collection < TYPE_1 > VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { METHOD_2 ( VAR_2 ) ; } },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",463
public final void start ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . start ( ) ; VAR_3 = TYPE_2 . METHOD_1 ( ) ; },public final void start ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . start ( ) ; VAR_3 = new TYPE_2 ( VAR_1 ) ; },"['Insert ConstructorCall', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",465
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; },['Insert ThisAccess'],466
"private java.lang.String METHOD_1 ( java.lang.String str ) { return VAR_1 . replace ( STRING_1 , STRING_2 ) . replace ( STRING_3 , STRING_4 ) . replace ( ""\n"" , STRING_5 ) . replace ( STRING_6 , STRING_7 ) ; }","private java.lang.String METHOD_1 ( java.lang.String str ) { return VAR_1 . replace ( STRING_3 , STRING_4 ) . replace ( ""\n"" , STRING_5 ) . replace ( STRING_6 , STRING_7 ) . replace ( STRING_1 , STRING_2 ) ; }","['Insert Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Move TypeAccess', 'Delete Invocation']",467
"public void METHOD_1 ( int VAR_1 , boolean [ ] VAR_2 ) { METHOD_1 ( this . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) , null , VAR_2 ) ; }","public void METHOD_1 ( int VAR_1 , boolean [ ] VAR_2 ) { METHOD_1 ( this . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) , VAR_2 ) ; }",['Delete Literal'],468
"public long METHOD_1 ( java.lang.String line ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; return java.lang.Long.parseLong ( METHOD_2 ( line , VAR_1 ) ) ; }","private long METHOD_1 ( java.lang.String line ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; return java.lang.Long.parseLong ( METHOD_2 ( line , VAR_1 ) ) ; }",['Update Wra'],469
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.util.Map < java.lang.String , TYPE_1 > VAR_2 ) throws java.io.IOException { return TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 , STRING_1 , VAR_2 ) ) ; }","private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.util.Set < java.lang.String > VAR_2 ) throws java.io.IOException { return TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 , STRING_1 , VAR_2 ) ) ; }","['Update TypeReference', 'Delete TypeReference']",471
private void METHOD_1 ( ) { VAR_1 = 0 ; METHOD_2 ( ) ; VAR_2 = 0 ; METHOD_3 ( ) ; },private void METHOD_1 ( ) { VAR_1 = 0 ; METHOD_2 ( ) ; VAR_2 = 0 ; METHOD_2 ( ) ; },['Update Invocation'],472
"private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return new TYPE_1 ( VAR_1 , VAR_4 , VAR_5 . key , java.lang.String . METHOD_2 ( VAR_3 ) ) ; }","private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 ) { return new TYPE_1 ( VAR_1 , VAR_4 , VAR_5 . key , VAR_3 ) ; }","['Update TypeReference', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",473
"protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( getActivity ( ) ) . content ( VAR_2 ) . METHOD_2 ( true , 0 ) . show ( ) ; }","protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( getContext ( ) ) . content ( VAR_2 ) . METHOD_2 ( true , 0 ) . show ( ) ; }",['Update Invocation'],474
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_5 = new TYPE_2 ( VAR_1 . METHOD_3 ( ) ) ; }",public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_5 = new TYPE_2 ( VAR_1 . METHOD_3 ( ) ) ; },['Delete FieldRead'],475
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = TYPE_2 . METHOD_2 ( this ) ; VAR_3 = TYPE_3 . METHOD_3 ( this ) ; VAR_4 = new TYPE_4 ( ) . METHOD_4 ( VAR_5 , VAR_6 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = TYPE_2 . METHOD_2 ( this ) ; VAR_3 = TYPE_3 . METHOD_3 ( this ) ; VAR_4 = TYPE_4 . METHOD_4 ( VAR_5 , VAR_6 ) ; }","['Insert TypeAccess', 'Delete ConstructorCall']",477
"public void METHOD_1 ( ) { for ( TYPE_1 < java.lang.String , java.lang.String > index : this . VAR_1 ) { java.lang.System.out.println ( ( STRING_1 + index ) ) ; } }","public void METHOD_1 ( ) { for ( TYPE_1 < java.lang.String , java.lang.String > index : this . VAR_1 ) { java.lang.System.out.println ( index ) ; } }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",478
public char METHOD_1 ( char c ) { TYPE_1 VAR_1 = VAR_2 . get ( TYPE_1 . METHOD_2 ( c ) ) ; if ( VAR_1 != null ) { return VAR_1 . METHOD_3 ( ) ; } return VAR_3 ; },public char METHOD_1 ( char c ) { TYPE_1 VAR_1 = VAR_2 . get ( new TYPE_1 ( c ) ) ; if ( VAR_1 != null ) { return VAR_1 . METHOD_3 ( ) ; } return VAR_3 ; },"['Insert ConstructorCall', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",479
"protected void METHOD_1 ( java.lang.String result ) { super . METHOD_1 ( result ) ; TYPE_1 . METHOD_2 ( STRING_1 , ( STRING_2 + result ) ) ; }","protected void METHOD_1 ( java.lang.String result ) { super . METHOD_1 ( result ) ; TYPE_1 . METHOD_2 ( STRING_1 , result ) ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",480
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , ( STRING_1 + VAR_1 ) ) ; }","public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 ) ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",481
"public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) . setValue ( new TYPE_1 ( VAR_3 . getText ( ) . toString ( ) , TYPE_2 . METHOD_3 ( ) , VAR_4 ) ) ; VAR_3 . setText ( STRING_1 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) . setValue ( new TYPE_1 ( VAR_3 . getText ( ) . toString ( ) , VAR_4 ) ) ; VAR_3 . setText ( STRING_1 ) ; }","['Delete TypeAccess', 'Delete Invocation']",482
public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { main . METHOD_1 ( ) ; },"['Insert FieldRead', 'Delete TypeAccess']",483
public int METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 . get ( ) ; } else { return super . METHOD_1 ( ) ; } },public java.lang.String METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 . get ( ) ; } else { return super . METHOD_1 ( ) ; } },['Update TypeReference'],484
public boolean METHOD_1 ( ) { return ( VAR_1 ) && ( VAR_2 ) ; },public boolean METHOD_1 ( ) { return VAR_2 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",485
public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; java.lang.System.exit ( INT_1 ) ; },private static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; java.lang.System.exit ( INT_1 ) ; },['Update Wra'],486
"private static boolean METHOD_1 ( final java.lang.String name , final boolean VAR_1 ) { final java.lang.String value = TYPE_1 . METHOD_2 ( name , java.lang.String . METHOD_3 ( VAR_1 ) ) ; return java.lang.Boolean . METHOD_4 ( value ) ; }","private static boolean METHOD_1 ( final java.lang.String name , final boolean VAR_1 ) { final java.lang.String value = TYPE_1 . METHOD_2 ( name , new java.lang.Boolean ( VAR_1 ) . toString ( ) ) ; return java.lang.Boolean . METHOD_4 ( value ) ; }","['Update Invocation', 'Insert ConstructorCall', 'Move VariableRead', 'Delete TypeAccess']",487
"public static TYPE_1 METHOD_1 ( java.util.Date date , int VAR_1 ) { return TYPE_2 . METHOD_2 ( date , VAR_2 , VAR_1 ) ; }","public static TYPE_1 METHOD_1 ( java.util.Date date , int VAR_1 ) { return TYPE_2 . METHOD_2 ( new TYPE_1 ( ) , VAR_2 , VAR_1 ) ; }","['Insert ConstructorCall', 'Delete VariableRead']",488
void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; METHOD_2 ( ) ; },void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; METHOD_2 ( VAR_1 ) ; },['Insert VariableRead'],489
public void METHOD_1 ( byte [ ] VAR_1 ) throws TYPE_1 { super . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( byte [ ] VAR_1 ) throws TYPE_1 { super . METHOD_1 ( VAR_1 ) ; },['Update Invocation'],490
private TYPE_1 METHOD_1 ( TYPE_1 date ) { return TYPE_2 . METHOD_2 ( date ) . METHOD_3 ( ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) . METHOD_6 ( ) ; },private TYPE_1 METHOD_1 ( TYPE_1 date ) { return date . METHOD_3 ( ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) . METHOD_6 ( ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",491
"public void METHOD_1 ( java.lang.Throwable VAR_1 ) { VAR_2 . error ( STRING_1 , VAR_1 ) ; }","public void METHOD_1 ( java.lang.Throwable t ) { VAR_2 . error ( STRING_1 , t ) ; }","['Update Parameter', 'Update VariableRead']",492
"public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return ( VAR_3 . equals ( STRING_1 ) ) && ( VAR_4 . equals ( STRING_2 ) ) ; }","public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return false ; }","['Insert Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",493
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( 1 ) ; TYPE_2 msg = VAR_2 . METHOD_3 ( ) ; VAR_3 = INT_1 ; VAR_4 . obj = VAR_1 ; VAR_2 . METHOD_4 ( msg ) ; },public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( 1 ) ; TYPE_2 msg = VAR_2 . METHOD_3 ( ) ; VAR_3 = 1 ; VAR_4 . obj = VAR_1 ; VAR_2 . METHOD_4 ( msg ) ; },"['Insert Literal', 'Delete FieldRead']",494
"TYPE_1 < java.lang.String , java.lang.Object > METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 , TYPE_3 ;","TYPE_1 < java.lang.String , java.lang.Object > METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_3 ;",['Delete TypeReference'],495
private final void METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) < VAR_1 ) { VAR_2 = ( VAR_3 ) - ( VAR_1 - ( VAR_2 ) ) ; } else { VAR_2 = ( VAR_2 ) - VAR_1 ; } },private final void METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) < VAR_1 ) { VAR_2 = ( VAR_3 ) - ( VAR_1 - ( VAR_2 ) ) ; } else { VAR_2 = ( VAR_2 ) - 1 ; } },"['Insert Literal', 'Delete VariableRead']",496
public void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; out . METHOD_2 ( ( ( ( ( STRING_2 + ( name ) ) + STRING_3 ) + VAR_1 ) + STRING_4 ) ) ; out . METHOD_3 ( ) ; },"public void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; out . METHOD_2 ( ( ( ( ( STRING_2 + ( name ) ) + STRING_3 ) + VAR_1 ) + ""\n"" ) ) ; out . METHOD_3 ( ) ; }","['Insert Literal', 'Delete FieldRead']",498
public int [ ] [ ] METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( this . VAR_1 ) ; },public int [ ] [ ] METHOD_1 ( ) { return VAR_1 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation']",499
private boolean METHOD_1 ( ) { synchronized ( VAR_1 ) { return VAR_2 ; } },private boolean METHOD_1 ( ) { synchronized ( VAR_2 ) { return VAR_2 ; } },['Update FieldRead'],500
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; this . VAR_1 = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Delete VariableRead', 'Delete Invocation']",502
"protected java.lang.Object METHOD_1 ( java.lang.Object VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) throws java.io.IOException { TYPE_3 b = ( ( TYPE_3 ) ( super . METHOD_1 ( null , VAR_2 , VAR_3 ) ) ) ; return VAR_4 . build ( ) ; }","protected java.lang.Object METHOD_1 ( java.lang.Object VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) throws java.io.IOException { TYPE_3 b = ( ( TYPE_3 ) ( super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ) ) ; return VAR_4 . build ( ) ; }","['Insert VariableRead', 'Delete Literal']",505
private void METHOD_1 ( ) throws TYPE_1 { if ( ( this . VAR_1 ) != null ) { TYPE_2 . METHOD_1 ( this . VAR_1 ) ; this . VAR_1 . METHOD_2 ( ) ; this . VAR_1 = null ; } },private void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) != null ) { TYPE_2 . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } },"['Insert Invocation', 'Insert Invocation', 'Move TypeAccess', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete ThisAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete ThisAccess']",506
public void METHOD_1 ( TYPE_1 node ) { this . VAR_1 = node ; METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 node ) { this . VAR_1 = node ; METHOD_2 ( false ) ; },['Insert Literal'],507
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { new TYPE_4 ( ) . execute ( ) ; return VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; }","['Delete ConstructorCall', 'Delete Invocation']",508
public static boolean METHOD_1 ( java.lang.Object ... VAR_1 ) { for ( java.lang.Object item : VAR_1 ) { if ( item != null ) { return true ; } } return false ; },public static boolean METHOD_1 ( java.lang.Object ... VAR_1 ) { for ( java.lang.Object item : VAR_1 ) { if ( item != null ) { return true ; } } return true ; },['Update Literal'],509
"public static TYPE_1 error ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { return new TYPE_1 ( VAR_1 , TYPE_2 . METHOD_1 ( VAR_2 , VAR_3 ) ) ; }","public static TYPE_1 error ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return new TYPE_1 ( VAR_1 , TYPE_2 . METHOD_1 ( VAR_2 ) ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",510
"public void METHOD_1 ( android.view.View view ) { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , false ) ; }",public void METHOD_1 ( android.view.View view ) { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; },['Delete Literal'],511
"public boolean METHOD_1 ( int VAR_1 , int id ) { return ( ( VAR_1 == ( VAR_2 ) ? ( this . METHOD_2 ( VAR_1 ) ) & INT_1 : this . METHOD_3 ( VAR_1 ) ) & ( 1L < < id ) ) > 0 ; }","public boolean METHOD_1 ( int VAR_1 , int id ) { return ( ( VAR_1 == ( VAR_2 ) ? ( this . METHOD_2 ( VAR_1 ) ) & INT_1 : this . METHOD_3 ( VAR_1 ) ) & ( 1 < < id ) ) > 0 ; }",['Update Literal'],512
"private void METHOD_1 ( java.lang.String answer ) { METHOD_2 ( ) . METHOD_3 ( STRING_1 , answer ) ; METHOD_2 ( ) . METHOD_3 ( STRING_2 , STRING_3 ) ; METHOD_4 ( ) ; }","private void METHOD_1 ( java.lang.String answer ) { METHOD_4 ( answer ) ; METHOD_2 ( ) . METHOD_3 ( STRING_1 , answer ) ; }","['Move Invocation', 'Insert VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",513
public boolean METHOD_1 ( ) { return ( this . VAR_1 ) > 0 ; },public boolean METHOD_1 ( ) { return ( this . VAR_1 ) != 0 ; },['Update BinaryOperator'],514
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( VAR_1 . METHOD_2 ( ) ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.System.out.println ( VAR_1 ) ; },"['Update TypeReference', 'Move VariableRead', 'Delete Invocation']",515
public java.util.Set < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { return this . VAR_1 . METHOD_1 ( ) ; },public java.util.Set < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_1 ( ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",516
"private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( 0 , null , this ) ; }","private void METHOD_1 ( ) { METHOD_3 ( ) . METHOD_4 ( 0 , null , this ) ; }",['Delete Invocation'],517
double METHOD_1 ( ) throws java.lang.Exception { return java.lang.Double . METHOD_2 ( this . METHOD_3 ( ) ) ; },double METHOD_1 ( ) throws java.lang.Exception { return java.lang.Double . METHOD_2 ( METHOD_3 ( ) ) ; },['Delete ThisAccess'],518
protected java.lang.String METHOD_1 ( ) { return new java.lang.String ( this . VAR_1 ) ; },public java.lang.String METHOD_1 ( ) { return new java.lang.String ( this . VAR_1 ) ; },['Update Wra'],519
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( STRING_1 , VAR_4 ) ; VAR_5 . show ( VAR_2 , STRING_2 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( STRING_1 , position ) ; VAR_5 . show ( VAR_2 , STRING_2 ) ; }","['Insert FieldRead', 'Delete TypeAccess']",521
"private static float METHOD_1 ( final float value , final float min , final float VAR_1 ) { if ( min == VAR_1 ) { return FLOAT_1 ; } return ( value - min ) / ( VAR_1 - min ) ; }","private static float METHOD_1 ( final float value , final float min , final float VAR_1 ) { return ( value - min ) / ( VAR_1 - min ) ; }","['Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",522
"public void METHOD_1 ( int VAR_1 , TYPE_1 [ ] VAR_2 , byte [ ] VAR_3 , java.lang.Throwable error ) { if ( VAR_3 != null ) { TYPE_2 . METHOD_2 ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; } }","public void METHOD_1 ( int VAR_1 , TYPE_1 [ ] VAR_2 , byte [ ] VAR_3 , java.lang.Throwable error ) { if ( VAR_3 != null ) TYPE_2 . METHOD_2 ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; else { } }",['Insert Block'],523
"public TYPE_1 METHOD_1 ( int position ) { return TYPE_2 . METHOD_2 ( VAR_1 . get ( position ) . VAR_2 , position ) ; }",public TYPE_1 METHOD_1 ( int position ) { return TYPE_2 . METHOD_2 ( VAR_1 . get ( position ) . VAR_2 ) ; },['Delete VariableRead'],524
"public static void main ( java.lang.String [ ] args ) { new TYPE_1 ( INT_1 , INT_2 , INT_3 , INT_4 ) . METHOD_1 ( ) ; }","public static void main ( java.lang.String [ ] args ) { new TYPE_1 ( INT_4 , INT_2 , INT_3 , INT_4 ) . METHOD_1 ( ) ; }",['Update FieldRead'],525
"public java.lang.String METHOD_1 ( java.lang.String ... params ) { return ( VAR_1 . METHOD_2 ( ) . replace ( STRING_1 , VAR_2 . getConfig ( ) . getString ( STRING_2 ) ) ) + ( METHOD_3 ( params ) ) ; }","private java.lang.String METHOD_1 ( java.lang.String ... params ) { return ( VAR_1 . METHOD_2 ( ) . replace ( STRING_1 , VAR_2 . getConfig ( ) . getString ( STRING_2 ) ) ) + ( METHOD_3 ( params ) ) ; }",['Update Wra'],526
public static boolean METHOD_1 ( java.lang.Integer VAR_1 ) { return VAR_1 >= 0 ; },public static boolean METHOD_1 ( java.lang.Integer VAR_1 ) { return VAR_1 > 0 ; },['Update BinaryOperator'],527
"public void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . assertNotNull ( VAR_1 ) ; org.testng.Assert.assertEquals ( VAR_1 , VAR_4 ) ; }","public void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; assertNotNull ( VAR_1 ) ; org.testng.Assert.assertEquals ( VAR_1 , VAR_4 ) ; }",['Update TypeAccess'],528
"public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( int VAR_1 ) { return this . METHOD_1 ( VAR_1 , false ) ; }","public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( int VAR_1 ) { return this . METHOD_1 ( VAR_1 , true ) ; }",['Update Literal'],529
"protected TYPE_1 getValue ( java.lang.Object VAR_1 ) throws TYPE_2 { return TYPE_3 . METHOD_1 ( METHOD_2 ( ) , VAR_2 , null , null ) ; }","protected TYPE_1 getValue ( java.lang.Object VAR_1 ) throws TYPE_2 { return TYPE_3 . METHOD_1 ( METHOD_2 ( ) , VAR_2 ) ; }","['Delete Literal', 'Delete Literal']",530
"public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.List < TYPE_1 > VAR_2 , int select ) { VAR_3 = VAR_1 ; VAR_3 . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_3 , select ) ; }","public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.List < TYPE_1 > VAR_2 ) { VAR_3 = VAR_1 ; VAR_3 . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_3 , 0 ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",531
"public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String label ) { TYPE_2 . METHOD_1 ( VAR_1 , label , ( - 1 ) , ( - 1 ) , 0.0F ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String label ) { TYPE_2 . METHOD_1 ( VAR_1 , label , ( - 1 ) , ( - 1 ) ) ; }",['Delete Literal'],532
"public static void handle ( final java.lang.String info , final java.lang.Throwable VAR_1 , java.lang.Class < ? > VAR_2 , boolean VAR_3 ) { VAR_4 . handle ( info , VAR_1 , true , VAR_2 , null , null , VAR_3 ) ; }","public static void handle ( final java.lang.String info , final java.lang.Exception VAR_1 , java.lang.Class < ? > VAR_2 , boolean VAR_3 ) { VAR_4 . handle ( info , VAR_1 , true , VAR_2 , null , null , VAR_3 ) ; }",['Update TypeReference'],533
void METHOD_1 ( ) { VAR_1 . remove ( ) ; },void METHOD_1 ( ) { VAR_1 . remove ( 0 ) ; },['Insert Literal'],534
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_3 . id , VAR_1 ) ; VAR_1 . METHOD_2 ( ) ; if ( METHOD_3 ( ) ) TYPE_2 . METHOD_4 ( this ) ; METHOD_5 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_3 . id , VAR_1 ) ; if ( METHOD_3 ( ) ) TYPE_2 . METHOD_4 ( this ) ; METHOD_5 ( ) ; }","['Delete VariableRead', 'Delete Invocation']",536
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_2 . toString ( ) ) ; VAR_1 . METHOD_3 ( ) ; } else { TYPE_2 . METHOD_2 ( STRING_2 , STRING_3 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_2 . toString ( ) ) ; } else { TYPE_2 . METHOD_2 ( STRING_2 , STRING_3 ) ; } }","['Delete VariableRead', 'Delete Invocation']",537
public boolean METHOD_1 ( int VAR_1 ) { try { VAR_2 . METHOD_2 ( VAR_1 ) ; } catch ( java.io.IOException VAR_3 ) { VAR_4 . METHOD_3 ( VAR_3 ) ; return false ; } return true ; },public boolean METHOD_1 ( int value ) { try { VAR_2 . METHOD_2 ( value ) ; } catch ( java.io.IOException VAR_3 ) { VAR_4 . METHOD_3 ( VAR_3 ) ; return false ; } return true ; },"['Update Parameter', 'Update VariableRead']",538
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; },['Delete Invocation'],539
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_2 ) == null ) ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 = new TYPE_2 ( ) ; } return VAR_1 ; },private static synchronized TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_2 ) == null ) ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 = new TYPE_2 ( ) ; } return VAR_1 ; },['Update Wra'],541
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { return this . VAR_1 ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },['Delete ThisAccess'],542
"public TYPE_1 append ( java.lang.String fieldName , int value ) { if ( fieldName != null ) { METHOD_1 ( fieldName ) ; VAR_1 . METHOD_2 ( VAR_2 , value ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; } return this ; }","public TYPE_1 append ( java.lang.String fieldName , int value ) { if ( fieldName != null ) { VAR_1 . METHOD_1 ( VAR_2 , fieldName ) ; VAR_1 . METHOD_2 ( VAR_2 , value ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; } }","['Insert TypeAccess', 'Delete ThisAccess', 'Delete Return']",543
private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_1 . METHOD_2 ( ) ; } for ( TYPE_2 VAR_3 : VAR_4 ) { VAR_3 . METHOD_2 ( METHOD_3 ( ) ) ; } },private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_1 . METHOD_2 ( ) ; } for ( TYPE_2 VAR_3 : VAR_4 ) { VAR_3 . METHOD_2 ( false ) ; } },"['Insert Literal', 'Delete Invocation']",544
"void METHOD_1 ( TYPE_1 view , int position , java.lang.String VAR_1 , java.lang.String type ) ;","void METHOD_1 ( TYPE_1 view , int position , java.lang.String VAR_1 ) ;","['Delete TypeReference', 'Delete Parameter']",545
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_3 . METHOD_1 ( ) . METHOD_2 ( VAR_1 ) ; },public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( ) . METHOD_2 ( VAR_1 ) ; },"['Insert ConstructorCall', 'Delete TypeAccess', 'Delete Invocation']",548
public void METHOD_1 ( java.lang.String type ) { VAR_1 = type ; },public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Update Parameter', 'Update VariableRead', 'Insert ThisAccess']",549
public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ; },private boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ; },['Update Wra'],550
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { for ( int i = 0 ; i < INT_1 ; i ++ ) { VAR_1 . info ( STRING_1 ) ; } java.lang.System.out.println ( STRING_2 ) ; java.lang.Thread . METHOD_1 ( INT_2 ) ; },public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { for ( int i = 0 ; i < INT_1 ; i ++ ) { VAR_1 . info ( STRING_1 ) ; } java.lang.System.out.println ( STRING_2 ) ; java.lang.Thread . METHOD_1 ( INT_1 ) ; },['Update TypeAccess'],551
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( ) ; return STRING_1 + ( VAR_4 . path ( STRING_2 ) . METHOD_3 ( ) ) ; }",public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return list ( VAR_1 ) ; },"['Insert Invocation', 'Insert VariableRead', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator']",552
"protected TYPE_1 METHOD_1 ( java.lang.Void ... params ) { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }",protected TYPE_1 METHOD_1 ( java.lang.Void ... params ) { return VAR_1 . METHOD_2 ( VAR_2 ) ; },['Delete TypeAccess'],553
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_3 . assertThat ( VAR_1 ) . METHOD_3 ( STRING_1 ) ; },public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; assertThat ( VAR_1 ) . METHOD_3 ( STRING_1 ) ; },['Update TypeAccess'],554
"private void METHOD_1 ( java.lang.Throwable VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 , VAR_1 ) ; }","private void METHOD_1 ( java.lang.Exception VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 , VAR_1 ) ; }",['Update TypeReference'],555
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) != null ) { if ( ( VAR_2 . METHOD_2 ( ) ) != null ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ( STRING_1 + VAR_1 ) ) ; } } },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) != null ) { if ( ( VAR_2 . METHOD_2 ( ) ) != null ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; } } },"['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",557
"public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 state ) throws java.io.IOException { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( state . METHOD_4 ( ) ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 state ) throws java.io.IOException { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( state . METHOD_4 ( ) ) ; }",['Update Invocation'],558
"public final boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ) ) { VAR_2 . add ( VAR_1 ) ; return true ; } return false ; }",public final boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) { VAR_2 . add ( VAR_1 ) ; return false ; } return true ; },"['Move Return', 'Move Return', 'Delete VariableRead', 'Delete Invocation']",559
protected java.util.List < TYPE_1 > METHOD_1 ( TYPE_1 node ) { TYPE_1 path = VAR_1 . path ( VAR_2 ) ; if ( METHOD_2 ( path ) ) { return METHOD_3 ( path ) ; } return METHOD_3 ( node ) ; },protected java.util.List < TYPE_1 > METHOD_1 ( TYPE_1 node ) { TYPE_1 path = VAR_1 . path ( VAR_2 ) ; if ( METHOD_2 ( path ) ) { return METHOD_3 ( path ) ; } return null ; },"['Insert Literal', 'Delete VariableRead', 'Delete Invocation']",560
protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { values . METHOD_2 ( ) ; values . METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; if ( ! ( VAR_2 ) ) { METHOD_5 ( ) ; } else { METHOD_6 ( VAR_3 ) ; } },protected void METHOD_1 ( java.lang.String msg ) { METHOD_4 ( ) ; if ( ! ( VAR_2 ) ) { METHOD_5 ( ) ; } else { METHOD_6 ( VAR_3 ) ; } },"['Update Parameter', 'Update TypeReference', 'Delete TypeReference', 'Delete FieldRead', 'Delete Invocation', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",561
"public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , java.util.ArrayList < java.lang.Integer > VAR_2 ) { VAR_3 = VAR_1 ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_5 . METHOD_2 ( VAR_4 ) ; }",public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { VAR_3 = VAR_1 ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_5 . METHOD_2 ( VAR_4 ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete Parameter']",562
public void METHOD_1 ( java.lang.Throwable t ) { METHOD_2 ( null ) ; },public void METHOD_1 ( java.lang.Throwable t ) { METHOD_2 ( ) ; },['Delete Literal'],563
"public void METHOD_1 ( java.lang.String path ) { java.io.File VAR_1 = new java.io.File ( path ) ; java.lang.String [ ] VAR_2 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 } ; VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( java.lang.String path ) { java.io.File VAR_1 = new java.io.File ( path ) ; java.lang.String [ ] VAR_2 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ; VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }",['Delete FieldRead'],565
"public void METHOD_1 ( int [ ] VAR_1 , int VAR_2 , TYPE_1 field ) { VAR_3 [ METHOD_2 ( VAR_1 ) ] . METHOD_1 ( VAR_2 , field ) ; }","public void METHOD_1 ( int [ ] VAR_1 , int VAR_2 , TYPE_1 field ) { VAR_3 [ index ( VAR_1 ) ] . METHOD_1 ( VAR_2 , field ) ; }",['Update Invocation'],566
"private < TYPE_1 > TYPE_1 getValue ( TYPE_1 value , TYPE_1 VAR_1 ) { return value != null ? value : VAR_1 ; }","private < TYPE_1 > TYPE_1 getValue ( TYPE_1 value , TYPE_1 VAR_1 ) { return value == null ? VAR_1 : value ; }","['Move VariableRead', 'Update BinaryOperator']",567
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = VAR_1 . getName ( 1 ) ; org.testng.Assert.assertEquals ( name , STRING_1 ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = VAR_1 . getName ( 1 ) ; assertEquals ( name , STRING_1 ) ; }",['Delete FieldRead'],569
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 = new TYPE_1 ( ) . METHOD_2 ( STRING_1 ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_1 ) ; VAR_3 = new TYPE_2 ( ) ; },public void METHOD_1 ( ) throws java.io.IOException { VAR_1 = METHOD_2 ( STRING_1 ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_1 ) ; VAR_3 = new TYPE_2 ( ) ; },['Delete ConstructorCall'],570
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; if ( ! ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ) VAR_3 . put ( VAR_1 , VAR_2 ) ; }",['Update VariableRead'],571
public void METHOD_1 ( TYPE_1 VAR_1 ) { ++ ( VAR_2 ) ; if ( ( VAR_2 ) > ( VAR_3 ) ) VAR_2 = VAR_3 ; METHOD_2 ( ) ; VAR_1 . METHOD_3 ( new TYPE_2 ( ) ) ; },public void METHOD_1 ( ) { ++ ( VAR_2 ) ; if ( ( VAR_2 ) > ( VAR_3 ) ) VAR_2 = VAR_3 ; METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation']",572
"protected void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( ) . add ( VAR_1 , VAR_2 , VAR_3 ) . METHOD_3 ( VAR_3 ) . commit ( ) ; }","protected void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( ) . add ( VAR_1 , VAR_2 ) . METHOD_3 ( VAR_3 ) . commit ( ) ; }","['Update Invocation', 'Move Invocation', 'Update Invocation', 'Update Invocation', 'Move Invocation', 'Move Invocation', 'Move VariableRead', 'Move VariableRead', 'Delete VariableRead']",573
"protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_2 x , boolean VAR_3 , boolean VAR_4 , boolean VAR_5 , boolean VAR_6 ) { return METHOD_2 ( VAR_1 , VAR_2 , x , VAR_3 , VAR_4 , VAR_5 , VAR_6 , false ) ; }","protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , TYPE_2 x , byte VAR_3 , byte VAR_4 , byte VAR_5 , byte VAR_6 ) { return METHOD_2 ( VAR_1 , VAR_2 , x , VAR_3 , VAR_4 , VAR_5 , VAR_6 , false ) ; }","['Update TypeReference', 'Update TypeReference', 'Update TypeReference', 'Update TypeReference', 'Update TypeReference', 'Update TypeReference']",576
private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return STRING_1 . equals ( VAR_1 . METHOD_2 ( ) ) ; },public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return STRING_1 . equals ( VAR_1 . METHOD_2 ( ) ) ; },['Update Wra'],577
"public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( null , null ) ; VAR_3 . assertNotNull ( VAR_1 ) ; VAR_3 . assertEquals ( VAR_4 . size ( ) , 0 ) ; }","public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( null , null , null ) ; VAR_3 . assertNotNull ( VAR_1 ) ; VAR_3 . assertEquals ( VAR_4 . size ( ) , 0 ) ; }",['Insert Literal'],578
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 class ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; VAR_1 . METHOD_5 ( 1 ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 class ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; return VAR_1 ; },"['Delete VariableRead', 'Delete Literal', 'Delete Invocation']",579
public void METHOD_1 ( ) { java.util.Random VAR_1 = new java.util.Random ( ) ; int VAR_2 = ( VAR_1 . METHOD_2 ( ( ( INT_1 - INT_2 ) + 1 ) ) ) + INT_2 ; VAR_3 -= VAR_2 ; },public void METHOD_1 ( ) { java.util.Random VAR_1 = new java.util.Random ( ) ; int VAR_2 = ( VAR_1 . METHOD_2 ( ( ( INT_1 - INT_2 ) + 1 ) ) ) + INT_2 ; this . VAR_3 -= VAR_2 ; },['Insert ThisAccess'],580
public double METHOD_1 ( ) { return x . METHOD_2 ( ) ; },public double METHOD_1 ( ) { return this . METHOD_1 ( ) ; },"['Update Invocation', 'Insert ThisAccess', 'Delete FieldRead']",581
public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; } catch ( TYPE_2 VAR_2 ) { VAR_2 . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; } catch ( TYPE_2 VAR_2 ) { } },"['Delete VariableRead', 'Delete Invocation']",582
public TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = VAR_2 . get ( name ) ; if ( VAR_1 != null ) return VAR_1 ; return null ; },protected TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = VAR_2 . get ( name ) ; if ( VAR_1 != null ) return VAR_1 ; return null ; },['Update Wra'],583
"public static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 . METHOD_2 ( VAR_1 , VAR_3 ) ; TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }","public static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 . METHOD_2 ( VAR_3 , VAR_1 ) ; TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }",['Move VariableRead'],584
"private static void METHOD_1 ( long VAR_1 , long offset ) { }","private static native void METHOD_1 ( long VAR_1 , long offset ) ;",['Insert Wra'],586
"protected void METHOD_1 ( final java.lang.CharSequence name , final java.lang.CharSequence VAR_1 , final int VAR_2 ) { VAR_3 . put ( VAR_4 . toString ( ) , new TYPE_1 ( VAR_4 . toString ( ) , VAR_5 . toString ( ) , VAR_2 ) ) ; }","protected void METHOD_1 ( final java.lang.CharSequence name , final java.lang.CharSequence VAR_1 , final int VAR_2 ) { VAR_3 . add ( new TYPE_1 ( VAR_4 . toString ( ) , VAR_5 . toString ( ) , VAR_2 ) ) ; }","['Update Invocation', 'Delete TypeAccess', 'Delete Invocation']",587
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) . info ( ( STRING_1 + ( VAR_4 . getName ( ) ) ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; VAR_1 . METHOD_2 ( ) . info ( ( STRING_1 + ( VAR_4 . getName ( ) ) ) ) ; },"['Insert VariableRead', 'Delete TypeAccess']",588
public float METHOD_1 ( ) { return ( ( VAR_1 . METHOD_2 ( ) ) / FLOAT_1 ) * ( VAR_2 ) ; },private float METHOD_1 ( ) { return ( ( VAR_1 . METHOD_2 ( ) ) / FLOAT_1 ) * ( VAR_2 ) ; },['Update Wra'],589
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( true ) ; METHOD_4 ( ) ; },"['Delete VariableRead', 'Delete Invocation']",590
"public static TYPE_1 [ ] METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 , int VAR_3 ) { return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , TYPE_2 . METHOD_2 ( VAR_3 ) ) ; }","public static TYPE_1 [ ] METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 , int VAR_3 ) { return TYPE_2 . METHOD_1 ( new TYPE_1 ( ) , VAR_2 , VAR_3 , TYPE_2 . METHOD_2 ( VAR_3 ) ) ; }","['Insert ConstructorCall', 'Delete VariableRead']",591
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ( STRING_1 + VAR_1 ) ) ; if ( VAR_1 != null ) { VAR_4 . METHOD_4 ( VAR_1 , true ) ; } }",public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ( STRING_1 + VAR_1 ) ) ; if ( VAR_1 != null ) { VAR_4 . METHOD_4 ( VAR_1 ) ; } },['Delete Literal'],592
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 class ) { if ( ( VAR_3 ) != null ) VAR_4 . add ( VAR_1 ) ; else super . METHOD_1 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_3 ) { if ( ( VAR_3 ) != null ) VAR_4 . add ( VAR_1 ) ; else super . METHOD_1 ( VAR_1 ) ; } },['Update FieldRead'],593
"public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . add ( 0 , VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; },['Delete Literal'],594
"public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; boolean VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; assertTrue ( VAR_3 ) ; VAR_3 = VAR_4 . METHOD_2 ( VAR_2 , VAR_1 ) ; assertTrue ( VAR_3 ) ; }","public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; boolean VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; assertTrue ( VAR_3 ) ; VAR_3 = VAR_4 . METHOD_2 ( VAR_2 , VAR_1 ) ; assertTrue ( output ) ; }","['Insert FieldRead', 'Delete VariableRead']",595
"public int METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . METHOD_1 ( ( ( int ) ( VAR_3 ) ) , VAR_4 . intValue ( ) ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_3 , VAR_4 . intValue ( ) ) ; }",['Delete TypeReference'],596
"public TYPE_1 METHOD_1 ( java.lang.Long id , TYPE_2 VAR_1 ) { return VAR_2 . METHOD_2 ( id , VAR_3 ) ? VAR_4 : VAR_5 ; }","public TYPE_1 METHOD_1 ( java.lang.Long id , java.lang.String token ) { return VAR_2 . METHOD_2 ( id , token ) ? VAR_4 : VAR_5 ; }","['Update Parameter', 'Update TypeReference', 'Insert VariableRead', 'Delete TypeAccess']",597
"private java.lang.String getString ( java.lang.String value ) { if ( value == null ) { return null ; } return VAR_1 . replace ( VAR_2 , VAR_3 ) . trim ( ) ; }","private java.lang.String getString ( java.lang.String value ) { return VAR_1 . replace ( VAR_2 , VAR_3 ) . trim ( ) ; }","['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",598
"public void METHOD_1 ( TYPE_1 < TYPE_2 , TYPE_3 > value ) { remove ( VAR_1 . key ) ; value . METHOD_2 ( ) ; put ( VAR_1 . key , value ) ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 , TYPE_3 > value ) { remove ( VAR_1 . key ) ; put ( VAR_1 . key , value ) ; }","['Delete VariableRead', 'Delete Invocation']",599
private void METHOD_1 ( java.lang.CharSequence text ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 . setText ( text ) ; },private void METHOD_1 ( java.lang.String text ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 . setText ( text ) ; },['Update TypeReference'],602
public static TYPE_1 METHOD_1 ( java.lang.String fileName ) { try { return TYPE_2 . METHOD_1 ( new java.io.File ( fileName ) ) ; } catch ( java.io.IOException VAR_1 ) { throw new TYPE_3 ( ) ; } },public static TYPE_1 METHOD_1 ( java.lang.String fileName ) { try { return TYPE_2 . METHOD_1 ( new java.io.File ( fileName ) ) ; } catch ( java.io.IOException VAR_1 ) { throw new TYPE_3 ( VAR_1 ) ; } },"['Update ConstructorCall', 'Insert VariableRead']",603
public TYPE_1 METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = this . METHOD_2 ( 1 ) . METHOD_3 ( ) ; if ( VAR_2 . isEmpty ( ) ) { return null ; } else { return VAR_2 . get ( 0 ) ; } },public TYPE_1 METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = this . METHOD_2 ( 1 ) . METHOD_3 ( ) ; if ( VAR_1 == null ) { return null ; } else { return VAR_2 . get ( 0 ) ; } },"['Insert BinaryOperator', 'Insert VariableRead', 'Insert Literal', 'Delete TypeAccess', 'Delete Invocation']",605
public java.lang.Void execute ( TYPE_1 < java.lang.Void > VAR_1 ) throws java.lang.Throwable { assertTrue ( VAR_1 . METHOD_1 ( ) ) ; VAR_2 . set ( true ) ; VAR_3 . get ( ) ; return null ; },public java.lang.Void execute ( TYPE_1 < java.lang.Void > VAR_1 ) throws java.lang.Throwable { assertTrue ( VAR_1 . METHOD_1 ( ) ) ; VAR_2 . set ( true ) ; return null ; },"['Delete TypeAccess', 'Delete Invocation']",606
"public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , VAR_2 ) ; }",public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; },['Delete TypeAccess'],607
public TYPE_1 METHOD_1 ( ) { return ( VAR_1 . size ( ) ) > 0 ? VAR_2 . METHOD_2 ( ) : null ; },private TYPE_1 METHOD_1 ( ) { return ( VAR_1 . size ( ) ) > 0 ? VAR_2 . METHOD_2 ( ) : null ; },['Update Wra'],608
public final int METHOD_1 ( ) { return this . VAR_1 ; },public int METHOD_1 ( ) { return VAR_1 ; },"['Delete Wra', 'Delete ThisAccess']",609
"public static TYPE_1 METHOD_1 ( java.lang.String format , java.lang.Object ... args ) { return new TYPE_1 ( TYPE_2 . METHOD_2 ( format , args ) ) ; }","public static TYPE_1 METHOD_1 ( java.lang.String format , java.lang.Object ... args ) { return new TYPE_1 ( java.lang.String.format ( format , args ) ) ; }","['Update ConstructorCall', 'Update Invocation', 'Update TypeAccess']",610
protected void METHOD_1 ( TYPE_1 message ) { this . METHOD_1 ( message ) ; },protected void METHOD_1 ( TYPE_1 message ) { METHOD_1 ( message ) ; },['Delete ThisAccess'],611
public static TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; if ( ( VAR_1 . METHOD_1 ( ) ) == null ) { return null ; } return new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; },public static TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; return new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; },"['Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",612
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_4 ) { if ( ( VAR_5 ) == VAR_2 ) { return VAR_3 ; } } return null ; }",public TYPE_1 METHOD_1 ( int VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_4 ) { if ( ( VAR_5 ) == VAR_2 ) { return VAR_3 ; } } return null ; },"['Delete TypeReference', 'Delete Parameter']",613
"public TYPE_1 METHOD_1 ( java.util.Date VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception ;",public TYPE_1 METHOD_1 ( java.util.Date VAR_1 ) throws java.lang.Exception ;,"['Delete TypeReference', 'Delete Parameter']",614
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; METHOD_2 ( ) . METHOD_3 ( ) . replace ( VAR_2 , VAR_1 , STRING_1 ) . METHOD_4 ( null ) . commit ( ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; METHOD_2 ( ) . METHOD_3 ( ) . replace ( VAR_2 , VAR_1 ) . METHOD_4 ( null ) . commit ( ) ; }",['Delete TypeAccess'],615
"public java.lang.String METHOD_1 ( ) { try { return VAR_1 . get ( ) . METHOD_2 ( VAR_2 , VAR_3 ) . METHOD_3 ( ) ; } catch ( TYPE_1 | TYPE_2 VAR_4 ) { return VAR_4 . METHOD_4 ( ) ; } }","public java.lang.String METHOD_1 ( ) { try { return VAR_1 . get ( ) . METHOD_2 ( VAR_2 , VAR_3 ) . METHOD_3 ( ) ; } catch ( TYPE_2 VAR_4 ) { return VAR_4 . METHOD_4 ( ) ; } }",['Insert TypeReference'],616
"public static int [ ] METHOD_1 ( boolean VAR_1 ) { return new int [ ] { INT_1 , INT_2 } ; }","public int [ ] METHOD_1 ( boolean VAR_1 ) { return new int [ ] { INT_1 , INT_2 } ; }",['Delete Wra'],617
public java.lang.String end ( TYPE_1 VAR_1 ) { return new TYPE_2 ( ) . handle ( VAR_1 ) ; },public java.lang.String end ( ) { return new TYPE_2 ( ) . handle ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",618
public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) ; },public java.lang.Object METHOD_1 ( java.lang.Object VAR_1 ) { return ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) ; },"['Update TypeReference', 'Insert TypeReference']",619
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < java.lang.String > VAR_2 ) { METHOD_1 ( VAR_1 , ( ( METHOD_2 ( VAR_1 ) ) * FLOAT_1 ) , ( ( METHOD_2 ( VAR_1 ) ) * FLOAT_1 ) , VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( VAR_1 , ( ( METHOD_2 ( VAR_1 ) ) * FLOAT_1 ) , ( ( METHOD_2 ( VAR_1 ) ) * FLOAT_1 ) ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",620
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_3 ( ) { data . METHOD_4 ( ) ; index = 1 ; getData ( index ) ; } } , INT_1 ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_3 ( ) { data . METHOD_4 ( ) ; getData ( ) ; index = 1 ; } } , INT_1 ) ; }",['Delete FieldRead'],621
private void METHOD_1 ( ) { VAR_1 = VAR_2 ; VAR_2 . METHOD_2 ( false ) ; VAR_3 . METHOD_2 ( false ) ; VAR_4 . METHOD_2 ( false ) ; VAR_1 . METHOD_2 ( true ) ; },private void METHOD_1 ( ) { VAR_1 = VAR_4 ; VAR_2 . METHOD_2 ( false ) ; VAR_3 . METHOD_2 ( false ) ; VAR_4 . METHOD_2 ( false ) ; VAR_1 . METHOD_2 ( true ) ; },['Update FieldRead'],622
"private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , java.lang.String VAR_4 ) { METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_2 . METHOD_3 ( ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , java.lang.String VAR_4 ) { METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; }","['Delete VariableRead', 'Delete Invocation']",623
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( null != VAR_1 ) { this . METHOD_2 ( VAR_2 . key , VAR_3 , VAR_4 , VAR_5 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( null != VAR_1 ) { this . METHOD_2 ( VAR_2 . key , VAR_3 , VAR_5 ) ; } }",['Delete TypeAccess'],624
void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( ) ; },void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( 1 ) ; },['Insert Literal'],626
"java.util.Map < TYPE_1 , java.util.Map < TYPE_2 , TYPE_3 > > METHOD_1 ( final java.util.Set < TYPE_2 > VAR_1 , final TYPE_3 VAR_2 ) throws TYPE_4 , TYPE_5 { return METHOD_1 ( null , VAR_1 , VAR_2 , false ) ; }","java.util.Map < TYPE_1 , java.util.Map < TYPE_2 , TYPE_3 > > METHOD_1 ( final java.util.Set < TYPE_2 > VAR_1 , final TYPE_3 VAR_2 ) throws TYPE_4 , TYPE_5 { return METHOD_1 ( null , VAR_1 , VAR_2 ) ; }",['Delete Literal'],627
"protected < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 > c ) throws java.lang.Exception { return TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , c ) ; }","private < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 > c ) throws java.lang.Exception { return TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , c ) ; }",['Update Wra'],628
"public void METHOD_1 ( final java.lang.String ... VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; this . VAR_1 = java.util.Arrays.asList ( VAR_1 ) ; }","public void METHOD_1 ( final java.lang.String ... VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; this . VAR_1 = VAR_1 ; }","['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",629
"public int METHOD_1 ( int a , int b ) { return a * b ; }","public int METHOD_1 ( int a , int b ) { return a + b ; }",['Update BinaryOperator'],631
"public void METHOD_1 ( float VAR_1 , float VAR_2 , float VAR_3 , double VAR_4 ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; if ( VAR_5 ) TYPE_1 . METHOD_3 ( false ) ; }","public void METHOD_1 ( float VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; if ( VAR_5 ) TYPE_1 . METHOD_3 ( false ) ; }",['Update TypeReference'],632
"private int METHOD_1 ( int i , int j ) { return ( ( i - 1 ) * ( VAR_1 ) ) + j ; }","private int METHOD_1 ( int i , int j ) { return ( i * ( VAR_1 ) ) + j ; }","['Update BinaryOperator', 'Move BinaryOperator', 'Update BinaryOperator', 'Move VariableRead', 'Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",633
"public static int METHOD_1 ( int VAR_1 , int VAR_2 ) { return java.lang.Math.round ( ( VAR_2 / VAR_1 ) ) ; }","public static int METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_1 == 0 ) return VAR_2 ; return java.lang.Math.round ( ( VAR_2 / VAR_1 ) ) ; }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Insert Return', 'Insert VariableRead']",634
"protected abstract void METHOD_1 ( android.view.View VAR_1 , int position , int VAR_2 ) ;","public abstract void METHOD_1 ( android.view.View VAR_1 , int position , int VAR_2 ) ;",['Update Wra'],635
public void METHOD_1 ( java.lang.String arg ) { if ( arg == null ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_1 . trim ( ) ) ) ) ; } },public void METHOD_1 ( java.lang.String arg ) { if ( arg != null ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_1 . trim ( ) ) ) ) ; } },['Update BinaryOperator'],636
protected java.lang.String METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( this . VAR_2 ) . METHOD_3 ( ) . toString ( ) ; },private java.lang.String METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( this . VAR_2 ) . METHOD_3 ( ) . toString ( ) ; },['Update Wra'],637
"public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . assertThat ( this . VAR_2 . METHOD_2 ( VAR_3 ) , TYPE_1 . METHOD_3 ( VAR_4 , VAR_5 ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . assertThat ( this . VAR_2 . METHOD_2 ( VAR_3 ) , contains ( VAR_4 , VAR_5 ) ) ; }","['Update Invocation', 'Update TypeAccess']",638
"private TYPE_1 METHOD_1 ( TYPE_2 j , TYPE_1 a ) { java.lang.System.out.println ( STRING_1 ) ; METHOD_2 ( j , false ) ; return a ; }","private TYPE_1 METHOD_1 ( TYPE_2 j , TYPE_1 a ) { java.lang.System.out.println ( STRING_1 ) ; METHOD_2 ( j , true ) ; return a ; }",['Update Literal'],639
"public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { if ( VAR_2 == null ) { return null ; } return METHOD_1 ( VAR_3 , new TYPE_2 ( this , name , VAR_1 , VAR_2 ) ) ; }","public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { if ( VAR_2 == null ) { return null ; } return METHOD_1 ( new TYPE_2 ( this , name , VAR_1 , VAR_2 ) , VAR_3 ) ; }",['Move VariableRead'],640
public void METHOD_1 ( float VAR_1 ) { if ( ( VAR_2 ) == null ) { this . VAR_1 = VAR_1 ; return ; } this . VAR_1 = ( VAR_2 . METHOD_2 ( ) ) - VAR_1 ; },public void METHOD_1 ( float VAR_1 ) { if ( ( VAR_2 ) == null ) { this . VAR_1 = VAR_1 ; } this . VAR_1 = ( VAR_2 . METHOD_2 ( ) ) - VAR_1 ; },['Delete Return'],641
public void METHOD_1 ( java.lang.Object message ) throws TYPE_1 { METHOD_2 ( METHOD_3 ( message ) ) ; },public void METHOD_1 ( java.lang.Object message ) throws TYPE_1 { METHOD_3 ( message ) ; METHOD_2 ( message ) ; },"['Move Invocation', 'Insert VariableRead']",644
"public boolean METHOD_1 ( TYPE_1 element , long VAR_1 ) { return METHOD_1 ( METHOD_2 ( element ) , VAR_1 ) ; }","protected boolean METHOD_1 ( TYPE_1 element , long VAR_1 ) { return METHOD_1 ( METHOD_2 ( element ) , VAR_1 ) ; }",['Update Wra'],646
public void METHOD_1 ( ) { assertNotNull ( VAR_1 . METHOD_2 ( STRING_1 ) ) ; VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; },public void METHOD_1 ( ) { assertTrue ( VAR_1 . METHOD_2 ( STRING_1 ) ) ; VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; },['Update Invocation'],647
"public void METHOD_1 ( TYPE_1 c , TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { }","public void METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { }","['Delete TypeReference', 'Delete Parameter']",648
"public static double METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int VAR_4 ) { java.lang.String VAR_5 = STRING_1 ; boolean VAR_6 = true ; return TYPE_1 . METHOD_2 ( VAR_1 , VAR_6 , VAR_5 , VAR_2 , VAR_3 , VAR_4 , true ) ; }","public static double METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int VAR_4 ) { java.lang.String VAR_5 = STRING_1 ; boolean VAR_6 = true ; return TYPE_1 . METHOD_2 ( VAR_1 , VAR_6 , VAR_5 , VAR_2 , VAR_3 , VAR_4 ) ; }",['Delete Literal'],649
"public TYPE_1 METHOD_1 ( java.util.List < java.lang.String > VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { return METHOD_1 ( VAR_1 , VAR_2 , true ) ; }","public TYPE_1 METHOD_1 ( java.util.List < java.lang.String > VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { return METHOD_1 ( VAR_1 , VAR_2 , false ) ; }",['Update Literal'],650
public void handle ( TYPE_1 t ) { VAR_1 . METHOD_1 ( ) ; TYPE_2 . METHOD_2 ( ) ; },public void handle ( TYPE_1 t ) { VAR_1 . METHOD_1 ( ) ; TYPE_2 . METHOD_2 ( ) ; java.lang.System.exit ( 0 ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Insert Literal']",651
"private boolean METHOD_1 ( ) { return METHOD_2 ( ) . get ( VAR_1 , false ) ; }","private boolean METHOD_1 ( ) { return METHOD_2 ( ) . get ( VAR_1 , true ) ; }",['Update Literal'],652
"TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 , TYPE_6 VAR_6 ) throws java.io.IOException ;","TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_4 VAR_4 , TYPE_5 VAR_5 , TYPE_3 VAR_2 , java.lang.String VAR_3 , TYPE_6 event ) throws java.io.IOException ;","['Move Parameter', 'Move Parameter', 'Update Parameter']",653
private static java.lang.String METHOD_1 ( ) { return STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; },public java.lang.String METHOD_1 ( ) { return STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; },"['Update Wra', 'Delete Wra']",654
public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( file ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 . execute ( ) ; return STRING_1 ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( file ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 . execute ( ) ; },"['Update TypeReference', 'Delete FieldRead', 'Delete Return']",655
"public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = VAR_3 . replace ( STRING_1 , STRING_2 ) ; if ( VAR_4 [ 0 ] ) VAR_5 . setText ( VAR_2 ) ; if ( VAR_4 [ 1 ] ) VAR_6 . setText ( VAR_2 ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = VAR_1 ; if ( VAR_4 [ 0 ] ) VAR_5 . setText ( VAR_2 ) ; if ( VAR_4 [ 1 ] ) VAR_6 . setText ( VAR_2 ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",656
"private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_1 != null ? VAR_2 . substring ( 0 , VAR_1 . METHOD_2 ( STRING_1 ) ) : null ; }",private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_1 != null ? VAR_2 . substring ( ( ( VAR_1 . METHOD_2 ( 0 ) ) + 1 ) ) : null ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal', 'Move Literal', 'Delete TypeAccess']",657
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( java.lang.Integer.parseInt ( args [ 0 ] ) ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( java.lang.Integer.parseInt ( args [ 1 ] ) ) ; },['Update Literal'],658
public float METHOD_1 ( int VAR_1 ) throws TYPE_1 { return METHOD_2 ( VAR_1 ) ? 0 : ( ( float ) ( VAR_2 . METHOD_3 ( ( VAR_1 - 1 ) ) ) ) ; },public float METHOD_1 ( int VAR_1 ) throws TYPE_1 { return METHOD_2 ( VAR_1 ) ? 0 : ( ( float ) ( VAR_2 . METHOD_3 ( VAR_1 ) ) ) ; },"['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",659
private void METHOD_1 ( java.lang.String msg ) { VAR_1 . METHOD_1 ( msg ) ; },private void METHOD_1 ( java.lang.String msg ) { java.lang.System.out.println ( msg ) ; },"['Update Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete TypeAccess']",660
"private static long METHOD_1 ( long VAR_1 , long source , long VAR_2 , int VAR_3 , int VAR_4 , double VAR_5 , long VAR_6 ) { return 0 ; }","private static native long METHOD_1 ( long VAR_1 , long source , long VAR_2 , int VAR_3 , int VAR_4 , double VAR_5 , long VAR_6 ) ;","['Insert Wra', 'Delete Literal', 'Delete Return']",661
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( getClass ( ) . toString ( ) , STRING_1 ) ; METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( ) { METHOD_5 ( ) ; METHOD_6 ( false ) ; } } , INT_1 ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( getClass ( ) . toString ( ) , STRING_1 ) ; METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( ) { METHOD_5 ( ) ; METHOD_6 ( false ) ; } } ) ; }",['Delete TypeAccess'],662
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = true ; try { METHOD_2 ( ) ; } catch ( TYPE_2 | TYPE_3 VAR_3 ) { VAR_4 . error ( VAR_3 . METHOD_3 ( ) , VAR_3 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = true ; try { METHOD_2 ( ) ; } catch ( TYPE_2 VAR_3 ) { VAR_4 . error ( VAR_3 . METHOD_3 ( ) , VAR_3 ) ; } }",['Insert TypeReference'],664
"public synchronized void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( VAR_1 , STRING_1 ) ; }","public synchronized void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( STRING_1 , VAR_1 ) ; }",['Move VariableRead'],665
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = null ; },public void METHOD_1 ( TYPE_1 name ) { VAR_2 = null ; },['Update Parameter'],666
public java.lang.String METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; },public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",667
"public TYPE_1 METHOD_1 ( java.lang.String name , boolean VAR_1 ) { return ( ( TYPE_1 ) ( super . METHOD_2 ( name , VAR_1 ) ) ) ; }",public TYPE_1 METHOD_1 ( java.lang.String name ) { return ( ( TYPE_1 ) ( super . METHOD_2 ( name ) ) ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",670
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String query = VAR_2 ; query += STRING_1 + VAR_1 ; int VAR_3 = METHOD_2 ( VAR_4 ) ; return new TYPE_1 ( VAR_3 , VAR_5 , VAR_6 , VAR_7 , query , VAR_8 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String query = VAR_2 ; query += STRING_1 + VAR_1 ; int VAR_3 = METHOD_2 ( VAR_4 ) ; return new TYPE_1 ( VAR_3 , VAR_5 , VAR_6 , VAR_7 , query ) ; }",['Delete FieldRead'],671
void METHOD_1 ( float value ) ;,void METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",672
protected TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; return VAR_2 . METHOD_1 ( VAR_1 ) ; },private TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; return VAR_2 . METHOD_1 ( VAR_1 ) ; },['Update Wra'],673
"public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( this . VAR_1 , VAR_2 , STRING_1 ) ; }","public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( this , VAR_2 , STRING_1 ) ; }","['Move ThisAccess', 'Delete FieldRead']",674
java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( VAR_1 . METHOD_2 ( ) ) ) { return STRING_1 ; } return VAR_2 . getText ( ) ; },java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) | ( VAR_1 . METHOD_2 ( ) ) ) { return STRING_1 ; } return VAR_2 . getText ( ) ; },['Update BinaryOperator'],675
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setValue ( STRING_1 , this . VAR_3 ) ; VAR_1 . METHOD_2 ( INT_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setValue ( STRING_1 , this . VAR_3 ) ; }","['Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",676
"void METHOD_1 ( boolean VAR_1 , TYPE_1 file ) ;",void METHOD_1 ( boolean VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",677
public void METHOD_1 ( ) { this . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; },['Delete ThisAccess'],678
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , null , null , STRING_3 , STRING_4 , STRING_5 , STRING_6 ) ; VAR_2 . assertEquals ( VAR_1 . METHOD_3 ( STRING_7 ) . getText ( ) , STRING_8 ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 ) ; VAR_2 . assertEquals ( VAR_1 . METHOD_3 ( STRING_7 ) . getText ( ) , STRING_8 ) ; }","['Delete Literal', 'Delete Literal']",679
"public void METHOD_1 ( int x , int y , int VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 . METHOD_3 ( x , y , ( x + VAR_1 ) , ( y + VAR_2 ) , VAR_3 ) ; }","public void METHOD_1 ( int x , int y , int VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 . METHOD_3 ( x , y , ( x + VAR_1 ) , ( x + VAR_2 ) , VAR_3 ) ; }",['Update VariableRead'],680
"public void execute ( TYPE_1 result ) { TYPE_2 . METHOD_1 ( result , VAR_1 ) ; }",public void execute ( TYPE_1 result ) { TYPE_2 . METHOD_1 ( result ) ; },['Delete TypeAccess'],681
public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_1 . METHOD_2 ( ) ; } },"['Delete VariableRead', 'Delete Invocation']",682
public long METHOD_1 ( int position ) { if ( position < ( VAR_1 . size ( ) ) ) return VAR_1 . get ( position ) . METHOD_2 ( ) ; else return ( VAR_1 . size ( ) ) + 1 ; },public long METHOD_1 ( int position ) { if ( position <= ( VAR_1 . size ( ) ) ) return VAR_1 . get ( position ) . METHOD_2 ( ) ; else return ( VAR_1 . size ( ) ) + 1 ; },['Update BinaryOperator'],683
"public void METHOD_1 ( ) { new TYPE_1 ( ) . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { VAR_1 . METHOD_4 ( STRING_1 , STRING_2 ) ; } } , 1 , 1 ) ; }","public void METHOD_1 ( ) { new TYPE_1 ( ) . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { VAR_1 . METHOD_4 ( STRING_1 , STRING_2 ) ; } } , 0 , 1 ) ; }",['Update Literal'],684
"public TYPE_1 METHOD_1 ( java.lang.String string , java.lang.String VAR_1 , java.lang.String VAR_2 ) { return new TYPE_1 ( ) ; }","public TYPE_1 METHOD_1 ( java.lang.String string , java.lang.String VAR_1 , java.lang.String VAR_2 ) { return null ; }","['Insert Literal', 'Delete ConstructorCall']",687
"public TYPE_1 delete ( java.lang.String VAR_1 , java.lang.Object value ) { new TYPE_2 ( this . VAR_2 , VAR_1 , value ) ; METHOD_1 ( false ) ; return this ; }","public TYPE_1 delete ( java.lang.String VAR_1 , java.lang.Object value ) { new TYPE_2 ( this . VAR_2 , VAR_1 , value ) ; METHOD_1 ( true ) ; return this ; }",['Update Literal'],688
"public void METHOD_1 ( int id , java.lang.String VAR_1 ) { VAR_2 . METHOD_1 ( new TYPE_1 ( id , VAR_1 ) ) ; }","public void METHOD_1 ( int id , java.lang.String name ) { VAR_2 . METHOD_1 ( new TYPE_1 ( id , name ) ) ; }","['Update Parameter', 'Update VariableRead']",689
public java.util.Set < java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; },public java.util.List < java.lang.String > METHOD_1 ( ) { return VAR_1 ; },"['Update TypeReference', 'Delete ThisAccess']",690
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) METHOD_2 ( STRING_1 ) ; },public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) METHOD_2 ( ) ; },['Delete TypeAccess'],691
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 listener ) { VAR_3 . remove ( VAR_1 ) ; VAR_4 . add ( VAR_2 ) ; listener . METHOD_2 ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 listener ) { VAR_3 . remove ( VAR_2 ) ; VAR_4 . add ( VAR_2 ) ; listener . METHOD_2 ( VAR_2 ) ; }",['Update VariableRead'],692
"public void METHOD_1 ( android.view.View view ) { VAR_1 = VAR_2 . getText ( ) . toString ( ) ; result = TYPE_1 . METHOD_2 ( first , VAR_3 , VAR_1 ) ; VAR_2 . setText ( null ) ; }","public void METHOD_1 ( android.view.View view ) { VAR_1 = ( ( java.lang.String ) ( VAR_2 . getText ( ) ) ) ; result = TYPE_1 . METHOD_2 ( first , result , VAR_1 ) ; VAR_2 . setText ( null ) ; }","['Move Invocation', 'Insert TypeReference', 'Insert FieldRead', 'Delete Invocation', 'Delete TypeAccess']",693
"public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_1 . METHOD_2 ( ) ; return false ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { return false ; }","['Delete VariableRead', 'Delete Invocation']",694
"public void METHOD_1 ( ) { if ( ( listener ) != null ) { listener . METHOD_2 ( VAR_1 , new TYPE_1 ( ) ) ; } }",public void METHOD_1 ( ) { if ( ( listener ) != null ) { listener . METHOD_2 ( VAR_1 ) ; } },['Delete ConstructorCall'],695
"public static TYPE_1 METHOD_1 ( java.util.Date date ) { return TYPE_1 . METHOD_2 ( VAR_1 . getTime ( ) , TYPE_2 . METHOD_3 ( ) , VAR_2 ) ; }","public static TYPE_1 METHOD_1 ( java.util.Date date ) { return TYPE_1 . METHOD_2 ( VAR_1 . getTime ( ) , TYPE_2 . METHOD_3 ( ) ) ; }",['Delete TypeAccess'],696
private void METHOD_1 ( ) { ( this . VAR_1 ) ++ ; },public void METHOD_1 ( ) { ( this . VAR_1 ) ++ ; },['Update Wra'],697
"public static TYPE_1 METHOD_1 ( java.lang.String path , TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = TYPE_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( path , VAR_1 . METHOD_4 ( ) , VAR_3 ) ; return VAR_2 ; }","public static TYPE_1 METHOD_1 ( java.lang.String path , TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = TYPE_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( path , null , VAR_3 ) ; return VAR_2 ; }","['Insert Literal', 'Delete VariableRead', 'Delete Invocation']",698
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 , TYPE_1 VAR_4 , java.lang.String VAR_5 ) ;","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 , TYPE_1 VAR_4 ) ;","['Delete TypeReference', 'Delete Parameter']",699
"public static TYPE_1 < java.lang.String , java.lang.Object > METHOD_1 ( java.lang.String param , java.lang.Object value ) { TYPE_2 < java.lang.String , java.lang.Object > VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 . put ( param , value ) ; return VAR_2 . build ( ) ; }","protected static TYPE_1 < java.lang.String , java.lang.Object > METHOD_1 ( java.lang.String param , java.lang.Object value ) { TYPE_2 < java.lang.String , java.lang.Object > VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 . put ( param , value ) ; return VAR_2 . build ( ) ; }",['Update Wra'],701
public void METHOD_1 ( ) { int VAR_1 = size ( ) ; while ( ( VAR_1 -- ) > 0 ) VAR_2 . remove ( METHOD_2 ( ) ) ; },public void METHOD_1 ( ) { int VAR_1 = size ( ) ; while ( ( VAR_1 -- ) >= 0 ) VAR_2 . remove ( METHOD_2 ( ) ) ; },['Update BinaryOperator'],702
public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_2 . getText ( ) . trim ( ) . equals ( STRING_1 ) ) { METHOD_2 ( VAR_3 ) ; } },public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( this . VAR_2 . getText ( ) . trim ( ) . equals ( STRING_1 ) ) { this . METHOD_2 ( this . VAR_3 ) ; } },"['Insert ThisAccess', 'Insert FieldRead', 'Insert FieldRead', 'Insert ThisAccess', 'Insert ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess']",703
public boolean METHOD_1 ( double VAR_1 ) { boolean VAR_2 = false ; if ( VAR_1 > 0 ) { this . length = VAR_1 ; VAR_2 = true ; } else { this . length = VAR_3 ; } return VAR_2 ; },public void METHOD_1 ( double VAR_1 ) { boolean VAR_2 = false ; if ( VAR_1 > 0 ) { this . length = VAR_1 ; VAR_2 = true ; } else { this . length = VAR_3 ; } },"['Update TypeReference', 'Delete VariableRead', 'Delete Return']",704
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ""true"" ) ; boolean VAR_2 = VAR_1 . METHOD_3 ( VAR_3 , new java.util.HashMap < > ( ) ) ; TYPE_3 . METHOD_4 ( VAR_2 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ""true"" , true ) ; boolean VAR_2 = VAR_1 . METHOD_3 ( VAR_3 , new java.util.HashMap < > ( ) ) ; TYPE_3 . METHOD_4 ( VAR_2 ) ; }",['Insert Literal'],705
public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) . METHOD_2 ( TYPE_1 : : getData ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) . METHOD_7 ( TYPE_4 : : METHOD_8 ) ; },public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_1 ( 1 ) . METHOD_2 ( TYPE_1 : : getData ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) . METHOD_7 ( TYPE_4 : : METHOD_8 ) ; },"['Insert Literal', 'Delete VariableRead']",706
"public boolean contains ( TYPE_1 p ) { return get ( VAR_1 , p , 0 ) ; }","public boolean contains ( TYPE_1 p ) { return get ( VAR_1 , p ) ; }",['Delete Literal'],707
public java.util.Set < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.util.Set < TYPE_1 > set = this . VAR_2 . get ( VAR_1 ) ; return set == null ? new java.util.HashSet < TYPE_1 > ( ) : new java.util.HashSet < TYPE_1 > ( set ) ; },public java.util.Set < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.util.Set < TYPE_1 > set = this . VAR_2 . get ( VAR_1 ) ; return set == null ? new java.util.HashSet < TYPE_1 > ( ) : new java.util.HashSet ( set ) ; },[],709
"protected void METHOD_1 ( ) throws TYPE_1 { METHOD_2 ( super . METHOD_3 ( VAR_1 ) , ( STRING_1 + ( METHOD_4 ( ) ) ) , INT_1 ) ; }","protected void METHOD_1 ( ) throws TYPE_1 { METHOD_2 ( super . METHOD_3 ( VAR_1 ) , ( STRING_1 + ( METHOD_4 ( ) ) ) ) ; }",['Delete TypeAccess'],710
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_4 ) ; VAR_3 . METHOD_3 ( true ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( true ) ; } },['Delete FieldRead'],711
public abstract void METHOD_1 ( ) ;,protected abstract void METHOD_1 ( ) ;,['Update Wra'],712
"public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { return ( VAR_2 ) != null ? VAR_1 . METHOD_2 ( VAR_2 , null ) . METHOD_1 ( ) : TYPE_3 . METHOD_3 ( ) ; }","public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_1 != null ? VAR_1 . METHOD_2 ( VAR_2 , null ) . METHOD_1 ( ) : TYPE_3 . METHOD_3 ( ) ; }","['Insert VariableRead', 'Delete FieldRead']",713
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; METHOD_3 ( true ) ; } },private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; METHOD_3 ( true ) ; } },['Update Wra'],714
public void METHOD_1 ( java.lang.String name ) { VAR_1 . METHOD_2 ( name ) ; METHOD_3 ( ) . METHOD_4 ( ) ; },public void METHOD_1 ( java.lang.String name ) { VAR_1 . METHOD_2 ( name ) ; METHOD_3 ( ) . METHOD_1 ( ) ; },['Update Invocation'],715
"private boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( this ) . getBoolean ( getString ( VAR_1 ) , true ) ; }","private boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( this ) . getBoolean ( getString ( VAR_1 ) , false ) ; }",['Update Literal'],716
"void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ; }","void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( event , ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ; }","['Insert FieldRead', 'Delete VariableRead']",718
"protected static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 , boolean VAR_4 ) { TYPE_1 VAR_5 = TYPE_3 . METHOD_2 ( VAR_3 , VAR_2 , VAR_4 ) ; TYPE_3 . METHOD_3 ( VAR_5 ) ; return VAR_5 ; }","private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 , boolean VAR_4 ) { TYPE_1 VAR_5 = TYPE_3 . METHOD_2 ( VAR_3 , VAR_2 , VAR_4 ) ; TYPE_3 . METHOD_3 ( VAR_5 ) ; return VAR_5 ; }",['Update Wra'],719
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { final java.lang.String VAR_2 = ( TYPE_1 . METHOD_2 ( VAR_1 ) ) + STRING_1 ; return VAR_2 ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { final java.lang.String VAR_2 = VAR_1 + STRING_1 ; return VAR_2 ; },"['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",720
"public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.lang.Long VAR_2 ) { return VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }",public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",721
public java.lang.Long getId ( ) { return id ; },public long getId ( ) { return id ; },['Update TypeReference'],722
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_1 ) ) ; },public void METHOD_1 ( ) { METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_1 ) ) ; },['Update TypeAccess'],723
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; assertTrue ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; },['Update Invocation'],725
"public final java.util.HashMap < java.lang.String , java.lang.Object > METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } return this . VAR_1 ; }","public final java.util.HashMap < java.lang.String , java.lang.Object > METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } return VAR_1 ; }",['Delete ThisAccess'],726
"public void METHOD_1 ( int VAR_1 , byte [ ] data , int VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 , data , VAR_2 , true ) ; }","public void METHOD_1 ( int VAR_1 , byte [ ] value ) { VAR_3 . METHOD_2 ( VAR_1 , value , true ) ; }","['Update Parameter', 'Update VariableRead', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",727
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , double VAR_2 , double VAR_3 , double VAR_4 , TYPE_3 VAR_5 ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }","public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , double VAR_2 , double VAR_3 , double VAR_4 , TYPE_3 VAR_5 , double startTime ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , startTime ) ; }","['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead']",728
"public TYPE_1 < TYPE_2 > build ( ) { return new TYPE_1 ( new TYPE_3 ( VAR_1 , 0 , VAR_2 ) ) ; }","public TYPE_1 build ( ) { return new TYPE_1 ( new TYPE_3 ( VAR_1 , 0 , VAR_2 ) ) ; }",['Delete TypeReference'],729
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; if ( VAR_1 != null ) VAR_1 . METHOD_2 ( this ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",730
"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { VAR_3 . setText ( STRING_1 ) ; VAR_4 = true ; } else { VAR_3 . setText ( STRING_2 ) ; VAR_4 = false ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { VAR_3 . setText ( STRING_1 ) ; VAR_4 = true ; } else { VAR_3 . setText ( STRING_2 ) ; VAR_4 = true ; } }",['Update Literal'],732
"protected abstract TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 param ) ;",protected abstract TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",733
"public void METHOD_1 ( java.lang.Object VAR_1 ) { if ( ( VAR_2 . size ( ) ) < 0 ) TYPE_1 . METHOD_2 ( this , STRING_1 , VAR_3 ) . show ( ) ; else TYPE_2 . METHOD_3 ( this , STRING_2 ) ; }","public void METHOD_1 ( java.lang.Object VAR_1 ) { if ( ( VAR_2 . size ( ) ) == 0 ) TYPE_1 . METHOD_2 ( this , STRING_1 , VAR_3 ) . show ( ) ; else TYPE_2 . METHOD_3 ( this , STRING_2 ) ; }",['Update BinaryOperator'],734
"public void METHOD_1 ( java.lang.String url , TYPE_1 VAR_1 ) { VAR_2 . put ( TYPE_2 . METHOD_2 ( url ) , VAR_1 ) ; }","public void METHOD_1 ( java.lang.String url , TYPE_1 VAR_1 ) { VAR_2 . put ( url , VAR_1 ) ; }","['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",735
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.List < TYPE_3 > VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_3 ) ; java.lang.String view = STRING_2 ; return view ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.List < TYPE_3 > VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_3 ) ; java.lang.String view = STRING_2 ; return STRING_2 ; }","['Insert FieldRead', 'Delete VariableRead']",736
public static boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( VAR_2 . toLowerCase ( ) . trim ( ) . contains ( STRING_1 ) ) ) { return true ; } else { return false ; } },public static boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( VAR_2 . toLowerCase ( ) . trim ( ) . startsWith ( STRING_1 ) ) ) { return true ; } else { return false ; } },['Update Invocation'],737
public static TYPE_1 get ( ) { return VAR_1 ; },public static TYPE_1 get ( ) { return new TYPE_1 ( ) ; },"['Insert ConstructorCall', 'Delete FieldRead']",738
public void METHOD_1 ( ) { VAR_1 . delete ( VAR_2 . METHOD_2 ( ) . get ( 0 ) ) ; VAR_3 . assertTrue ( ( ( VAR_1 . count ( ) ) == 1 ) ) ; },public void METHOD_1 ( ) { VAR_1 . delete ( VAR_2 . METHOD_2 ( ) . get ( 0 ) ) ; assertTrue ( ( ( VAR_1 . count ( ) ) == 1 ) ) ; },['Update TypeAccess'],740
public void init ( ) { java.lang.System.out.println ( STRING_1 ) ; this . VAR_1 = TYPE_1 . METHOD_1 ( ) ; },public void init ( ) { java.lang.System.out.println ( STRING_1 ) ; this . VAR_1 = new TYPE_1 ( ) ; },"['Insert ConstructorCall', 'Delete TypeAccess', 'Delete Invocation']",741
public java.util.Date METHOD_1 ( long VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_2 class ) ; },public java.util.Date METHOD_1 ( long VAR_1 ) { return TYPE_1 . METHOD_2 ( ) ; },['Delete TypeAccess'],742
public void METHOD_1 ( java.lang.Long data ) { VAR_1 = VAR_2 ; METHOD_2 ( java.lang.String . METHOD_3 ( data ) ) ; },public void METHOD_1 ( long data ) { VAR_1 = VAR_2 ; METHOD_2 ( java.lang.String . METHOD_3 ( data ) ) ; },['Update TypeReference'],743
"protected < TYPE_1 , TYPE_2 , TYPE_3 > TYPE_4 < TYPE_1 , TYPE_2 , TYPE_3 > METHOD_1 ( TYPE_5 < TYPE_1 , TYPE_2 , TYPE_3 > VAR_1 ) { return new TYPE_6 ( VAR_1 ) ; }","private < TYPE_1 , TYPE_2 , TYPE_3 > TYPE_4 < TYPE_1 , TYPE_2 , TYPE_3 > METHOD_1 ( TYPE_5 < TYPE_1 , TYPE_2 , TYPE_3 > VAR_1 ) { return new TYPE_6 < TYPE_1 , TYPE_2 , TYPE_3 > ( VAR_1 ) ; }",['Update Wra'],744
"public boolean METHOD_1 ( ) throws TYPE_1 , TYPE_2 { if ( ! ( this . METHOD_2 ( ) ) ) return false ; if ( ( this . METHOD_3 ( ) ) != 0 ) { return true ; } return false ; }","public boolean METHOD_1 ( ) throws TYPE_1 , TYPE_2 { if ( ! ( this . METHOD_2 ( ) ) ) return false ; if ( ( this . METHOD_3 ( ) ) == 0 ) { return true ; } return false ; }",['Update BinaryOperator'],745
"public int METHOD_1 ( int line , int VAR_1 ) { return ( VAR_2 . get ( ( line - 1 ) ) ) + VAR_1 ; }","public int METHOD_1 ( int line , int VAR_1 ) { return ( VAR_2 . get ( line ) ) + VAR_1 ; }","['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",746
"static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String path ) { return null ; }",static java.lang.String METHOD_1 ( java.lang.String path ) { return null ; },"['Delete TypeReference', 'Delete Parameter']",747
public double METHOD_1 ( ) { METHOD_2 ( ) ; return VAR_1 [ index ] ; },public double METHOD_1 ( ) { return VAR_1 [ index ] ; },['Delete Invocation'],748
"public TYPE_1 METHOD_1 ( double VAR_1 , double to ) { VAR_2 = VAR_3 . METHOD_1 ( VAR_1 , to ) ; VAR_4 = VAR_5 . METHOD_1 ( VAR_1 , to ) ; VAR_6 = VAR_7 . METHOD_1 ( VAR_1 , to ) ; return VAR_8 ; }","public TYPE_1 METHOD_1 ( double VAR_1 , double to ) { VAR_2 = VAR_3 . METHOD_1 ( VAR_1 , to ) ; VAR_4 = VAR_3 . METHOD_1 ( VAR_1 , to ) ; VAR_6 = VAR_3 . METHOD_1 ( VAR_1 , to ) ; return VAR_8 ; }","['Update TypeAccess', 'Update TypeAccess']",749
"public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = new TYPE_1 < TYPE_2 > ( new TYPE_3 < TYPE_2 > ( VAR_2 class , false ) ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 class ) ; }","public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = new TYPE_1 < TYPE_2 > ( new TYPE_3 < TYPE_2 > ( VAR_2 class , false ) ) ; VAR_1 . METHOD_2 ( ""0"" , VAR_2 class ) ; }","['Insert Literal', 'Delete TypeAccess']",751
"public void METHOD_1 ( java.util.Date VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = VAR_3 . METHOD_3 ( query ( VAR_1 ) , new java.lang.String [ ] { } ) ; METHOD_4 ( ) ; }","public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = VAR_3 . METHOD_3 ( query ( ) , new java.lang.String [ ] { } ) ; METHOD_4 ( ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",752
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { METHOD_2 ( ) ; },public void METHOD_1 ( java.lang.Void item ) { METHOD_2 ( ) ; },"['Update Parameter', 'Update TypeReference', 'Delete TypeReference']",753
"public TYPE_1 METHOD_1 ( final android.content.Context context ) { return new TYPE_1 ( VAR_1 , VAR_2 . getString ( VAR_3 ) , context ) ; }","public TYPE_1 METHOD_1 ( final android.content.Context context ) { return new TYPE_1 ( VAR_1 , context ) ; }","['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",754
"public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { long VAR_3 = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; VAR_5 = true ; METHOD_2 ( ) ; return VAR_3 != ( - 1 ) ; }","public boolean METHOD_1 ( int VAR_1 , boolean VAR_2 ) { long VAR_3 = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; VAR_5 = true ; METHOD_2 ( ) ; return VAR_3 != ( - 1 ) ; }",['Update TypeReference'],755
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . i ( VAR_4 , STRING_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_5 . put ( VAR_2 . METHOD_3 ( ) , VAR_2 ) ; METHOD_4 ( VAR_2 , STRING_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . i ( VAR_4 , STRING_1 ) ; VAR_5 . put ( VAR_2 . METHOD_3 ( ) , VAR_2 ) ; METHOD_4 ( VAR_2 , STRING_2 ) ; }","['Delete VariableRead', 'Delete Invocation']",756
public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; },public boolean METHOD_1 ( ) { return false ; },"['Update TypeReference', 'Insert Return', 'Insert Literal', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",757
public double METHOD_1 ( ) { return FLOAT_1 ; },public double METHOD_1 ( ) { return 1.0 ; },"['Insert Literal', 'Delete FieldRead']",758
"protected void execute ( ) { METHOD_1 ( ) ; VAR_1 . set ( VAR_2 , VAR_3 ) ; }","protected void execute ( ) { METHOD_1 ( ) ; VAR_1 . set ( VAR_2 , VAR_2 ) ; }",['Update TypeAccess'],759
"public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { VAR_3 . put ( VAR_1 , new java.util.ArrayList < TYPE_1 > ( ) ) ; } }",public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { VAR_3 . remove ( VAR_1 ) ; } },"['Update Invocation', 'Delete ConstructorCall']",760
"public static void METHOD_1 ( int VAR_1 ) { TYPE_1 . METHOD_2 ( ( ( STRING_1 + ( java.lang.String . METHOD_3 ( VAR_1 ) ) ) + STRING_2 ) , false ) ; }",public static void METHOD_1 ( int VAR_1 ) { TYPE_1 . METHOD_2 ( ( ( STRING_1 + ( java.lang.String . METHOD_3 ( VAR_1 ) ) ) + STRING_2 ) ) ; },['Delete Literal'],762
"public static void METHOD_1 ( int VAR_1 ) { synchronized ( VAR_2 ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_1 ) . METHOD_5 ( ) ; } }","public static void METHOD_1 ( int VAR_1 ) { synchronized ( VAR_2 ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_1 ) . commit ( ) ; } }",['Update Invocation'],763
"private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String fileName ) throws java.io.IOException { return METHOD_1 ( ( ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + VAR_1 ) + ( VAR_2 ) ) + fileName ) ) ; }","protected java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String fileName ) throws java.io.IOException { return METHOD_1 ( ( ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + VAR_1 ) + ( VAR_2 ) ) + fileName ) ) ; }",['Update Wra'],764
"public static void METHOD_1 ( TYPE_1 p , int VAR_1 ) { if ( ( p . METHOD_2 ( VAR_1 ) ) != INT_1 ) return ; if ( p . METHOD_3 ( VAR_1 ) ) { java.lang.System.out.println ( STRING_1 ) ; } return ; }",public static void METHOD_1 ( TYPE_1 p ) { if ( ( p . METHOD_2 ( ) ) != INT_1 ) return ; if ( p . METHOD_3 ( ) ) { java.lang.System.out.println ( STRING_1 ) ; } return ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead']",765
private void METHOD_1 ( int id ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( id ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) ; } },private void METHOD_1 ( int id ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( id ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) . commit ( ) ; } },['Update Invocation'],768
"private TYPE_1 METHOD_1 ( java.lang.String key ) { return TYPE_1 . METHOD_2 ( this . VAR_1 . replace ( VAR_2 , TYPE_1 . METHOD_3 ( key ) ) , VAR_3 ) ; }","private TYPE_1 METHOD_1 ( java.lang.String key ) { return TYPE_1 . METHOD_2 ( this . VAR_1 . replace ( VAR_2 , TYPE_1 . METHOD_3 ( key ) ) ) ; }",['Delete TypeAccess'],770
public double METHOD_1 ( double VAR_1 ) { return VAR_1 / ( ( VAR_2 . t ) / ( VAR_2 . k ) ) ; },public long METHOD_1 ( long VAR_1 ) { return VAR_1 / ( ( VAR_2 . t ) / ( VAR_2 . k ) ) ; },"['Update TypeReference', 'Update TypeReference']",772
public void METHOD_1 ( ) { this . VAR_1 = new java.util.ArrayList < TYPE_1 < TYPE_2 > > ( ) ; },public void METHOD_1 ( ) { this . VAR_1 = null ; },"['Insert Literal', 'Delete ConstructorCall']",774
"public java.util.Iterator < TYPE_1 > iterator ( ) { return this . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public java.util.Iterator < TYPE_1 > iterator ( ) { return METHOD_1 ( VAR_1 , VAR_2 ) ; }",['Delete ThisAccess'],775
"public void METHOD_1 ( int count , TYPE_1 VAR_1 ) { if ( VAR_1 == null ) VAR_2 . setText ( java.lang.Integer.toString ( count ) ) ; else VAR_2 . setText ( STRING_1 ) ; }","public void METHOD_1 ( int count , TYPE_1 VAR_1 ) { if ( VAR_1 == null ) VAR_2 . setText ( java.lang.Integer.toString ( count ) ) ; else VAR_2 . setText ( 0 ) ; }","['Insert Literal', 'Delete TypeAccess']",776
public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_2 . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; this . METHOD_1 ( VAR_1 ) ; },"['Insert ThisAccess', 'Delete TypeAccess']",778
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . end = VAR_2 . getName ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . end = VAR_1 ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",779
"public static double METHOD_1 ( double n ) { if ( n < 0 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( n == 0 ) { return 0 ; } return TYPE_2 . METHOD_2 ( n , 1 ) ; }","public static double METHOD_1 ( double n ) { if ( n < 0 ) { throw new TYPE_1 ( ) ; } return TYPE_2 . METHOD_2 ( n , 1 ) ; }","['Delete FieldRead', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",780
public final java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( ) ; },public final java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; },['Insert ThisAccess'],782
"public java.util.List METHOD_1 ( java.lang.String item , java.lang.String type ) ;",public java.util.List METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",783
"public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ""0"" ) ) ; }",public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( 0 ) ) ; },['Update Literal'],784
private static void METHOD_1 ( java.lang.String message ) { java.lang.System.out.println ( ( STRING_1 + message ) ) ; },private static void METHOD_1 ( java.lang.String message ) { },"['Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",786
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( context , STRING_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) , position , VAR_4 . METHOD_7 ( ) ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( context , STRING_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) , position ) ; }","['Delete TypeAccess', 'Delete Invocation']",787
public void METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( true ) ; },public void METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( ) ; },['Delete Literal'],788
"public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String [ ] VAR_2 ) { for ( java.lang.String VAR_3 : VAR_2 ) { if ( ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_3 ) ) != ( VAR_4 ) ) { return false ; } } return true ; }","public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String [ ] VAR_2 ) { for ( java.lang.String VAR_3 : VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( VAR_3 ) ) != ( VAR_4 ) ) { return false ; } } return true ; }",['Delete TypeAccess'],790
"public final void METHOD_1 ( java.lang.String name , long date ) { VAR_1 . METHOD_1 ( name , date ) ; }","protected final void METHOD_1 ( java.lang.String name , long date ) { VAR_1 . METHOD_1 ( name , date ) ; }",['Update Wra'],791
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 ) ; METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( true ) ; VAR_3 . add ( VAR_1 , VAR_4 ) ; }","private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 ) ; METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( false ) ; VAR_3 . add ( VAR_1 , VAR_4 ) ; }",['Update Literal'],792
public void METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { this . METHOD_2 ( ) ; return ; } ( this . VAR_2 ) ++ ; this . VAR_1 . METHOD_3 ( this . VAR_2 ) ; },public void METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { this . METHOD_2 ( ) ; } ( this . VAR_2 ) ++ ; this . VAR_1 . METHOD_3 ( this . VAR_2 ) ; },['Delete Return'],795
public TYPE_1 METHOD_1 ( long id ) { return VAR_1 . METHOD_2 ( id ) ; },public TYPE_1 METHOD_1 ( int id ) { return VAR_1 . METHOD_2 ( id ) ; },['Update TypeReference'],796
"public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . assertEquals ( INT_1 , ( INT_2 + INT_3 ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . assertEquals ( INT_1 , ( INT_2 + INT_2 ) ) ; }",['Update FieldRead'],797
public void METHOD_1 ( java.util.Collection < TYPE_1 > VAR_1 ) { VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( java.util.Collection < TYPE_1 > VAR_1 ) { },"['Delete TypeAccess', 'Delete Invocation']",799
"public int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( query , true ) ; }",public int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( query ) ; },['Delete Literal'],800
public static boolean METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return true ; return false ; },public static boolean METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return true ; return true ; },['Update Literal'],801
public int METHOD_1 ( int position ) { if ( position >= ( VAR_1 . size ( ) ) ) { return 1 ; } else { return 0 ; } },public int METHOD_1 ( int position ) { return 1 ; },"['Move Return', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",803
public float METHOD_1 ( long VAR_1 ) { return FLOAT_1 ; },public float METHOD_1 ( long VAR_1 ) { return 0 ; },"['Insert Literal', 'Delete FieldRead']",804
public java.util.ArrayList < java.lang.String > METHOD_1 ( ) { return VAR_1 ; },public java.util.ArrayList < java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; },['Insert ThisAccess'],805
"public void METHOD_1 ( ) { TYPE_1 TYPE_2 = new TYPE_1 ( ) ; int sum = TYPE_2 . METHOD_2 ( INT_1 , INT_2 ) ; VAR_1 . assertEquals ( INT_3 , sum ) ; }","public void METHOD_1 ( ) { TYPE_1 TYPE_2 = new TYPE_1 ( ) ; int sum = TYPE_2 . METHOD_2 ( INT_1 , INT_2 ) ; VAR_1 . assertEquals ( 1 , sum ) ; }","['Insert Literal', 'Delete TypeAccess']",806
public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_2 = ( ( this . VAR_2 ) + STRING_1 ) + VAR_1 ; },"public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_2 = ( ( this . VAR_2 ) + ""\n"" ) + VAR_1 ; }","['Insert Literal', 'Delete FieldRead']",807
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 method , TYPE_4 VAR_2 ) throws java.io.IOException { return METHOD_1 ( VAR_1 , method , VAR_2 , TYPE_5 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 method , TYPE_4 VAR_2 ) throws java.io.IOException { return METHOD_1 ( VAR_1 , method , VAR_2 , TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ; }",['Update VariableRead'],808
"public void METHOD_1 ( java.lang.Long VAR_1 , java.lang.String text ) { this . VAR_2 . METHOD_1 ( VAR_1 , text ) ; }",public void METHOD_1 ( java.lang.Long VAR_1 ) { this . VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",809
"public static java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 context ) { return TYPE_3 . METHOD_2 ( context , VAR_1 ) ; }","public static java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 context ) { return TYPE_3 . METHOD_2 ( context , VAR_1 , true , true ) ; }","['Insert Literal', 'Insert Literal']",810
boolean METHOD_1 ( ) { return ( VAR_1 ) < INT_1 ? true : false ; },boolean METHOD_1 ( ) { return ( VAR_1 ) <= INT_1 ? true : false ; },['Update BinaryOperator'],811
"public TYPE_1 METHOD_1 ( java.lang.String string , java.lang.Class < ? extends TYPE_2 > type ) { return null ; }","public TYPE_1 METHOD_1 ( java.lang.String string , java.lang.Class < ? extends TYPE_2 > type ) { }","['Delete Literal', 'Delete Return']",812
"public java.lang.String METHOD_1 ( java.util.Map VAR_1 ) { VAR_2 . put ( STRING_1 , VAR_3 . METHOD_2 ( VAR_4 , INT_1 ) ) ; return STRING_2 ; }","public java.lang.String METHOD_1 ( java.util.Map VAR_1 ) { VAR_2 . put ( STRING_2 , VAR_3 . METHOD_2 ( VAR_4 , INT_1 ) ) ; return STRING_2 ; }",['Update TypeAccess'],813
"public boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) ; }","public boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( VAR_2 , false ) ) ; }","['Insert Literal', 'Delete TypeAccess']",814
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( STRING_1 ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_3 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( FLOAT_1 ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( STRING_1 ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_3 . METHOD_4 ( ) ) ; },"['Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",815
"private void METHOD_1 ( boolean error ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_3 ) ; VAR_4 . setText ( VAR_1 ) ; METHOD_5 ( VAR_5 , error ) ; }","private void METHOD_1 ( boolean error ) { java.lang.String VAR_1 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . toString ( VAR_3 ) ; VAR_4 . setText ( VAR_1 ) ; METHOD_5 ( VAR_5 , error ) ; }","['Update Invocation', 'Delete TypeAccess']",816
public void METHOD_1 ( java.util.Date VAR_1 ) { this . VAR_2 = VAR_1 ; },public void METHOD_1 ( ) { this . VAR_2 = new java.util.Date ( ) ; },"['Insert ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",817
public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) { this . VAR_2 . add ( VAR_1 ) ; } },public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( ! ( this . VAR_2 . contains ( VAR_1 ) ) ) { this . VAR_2 . add ( VAR_1 ) ; } },"['Update Invocation', 'Insert FieldRead', 'Insert ThisAccess']",819
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; return ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; },['Delete Return'],820
"public void METHOD_1 ( TYPE_1 source ) { java.util.List VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_2 . contains ( METHOD_2 ( ) ) ) { METHOD_5 ( true , null ) ; } }",public void METHOD_1 ( TYPE_1 source ) { java.util.List VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_2 . contains ( METHOD_2 ( ) ) ) { METHOD_5 ( true ) ; } },['Delete Literal'],821
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Integer VAR_1 , java.util.Date VAR_2 ) ;",public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Integer VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",822
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; TYPE_4 . METHOD_2 ( VAR_2 ) ; VAR_3 = TYPE_5 . METHOD_3 ( VAR_4 class ) ; VAR_5 = new TYPE_6 ( VAR_3 ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; TYPE_4 . METHOD_2 ( VAR_2 ) ; VAR_3 = METHOD_3 ( VAR_4 class ) ; VAR_5 = new TYPE_6 ( VAR_3 ) ; },['Update TypeAccess'],825
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_1 VAR_4 = VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; return ( VAR_2 != null ) || ( VAR_4 != null ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_1 VAR_4 = VAR_3 . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ; return ( VAR_2 == null ) || ( VAR_4 != null ) ; },"['Update Invocation', 'Update BinaryOperator']",827
"public void METHOD_1 ( int VAR_1 , int VAR_2 ) throws java.io.IOException ;",public void METHOD_1 ( int VAR_2 ) throws java.io.IOException ;,"['Delete TypeReference', 'Delete Parameter']",829
public void METHOD_1 ( TYPE_1 item ) ;,public void METHOD_1 ( int key ) ;,"['Update Parameter', 'Update TypeReference']",831
private boolean METHOD_1 ( TYPE_1 b ) { if ( b == null ) return false ; TYPE_2 VAR_1 = VAR_2 . getType ( ) ; for ( TYPE_2 VAR_3 : VAR_4 ) if ( VAR_5 . equals ( VAR_1 ) ) return true ; return false ; },private boolean METHOD_1 ( TYPE_1 b ) { TYPE_2 VAR_1 = VAR_2 . getType ( ) ; for ( TYPE_2 VAR_3 : VAR_4 ) if ( VAR_5 . equals ( VAR_1 ) ) return true ; return false ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",832
"public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; delete ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; delete ( VAR_1 , VAR_2 , VAR_1 , VAR_2 ) ; }","['Update VariableRead', 'Update VariableRead']",833
public TYPE_1 METHOD_1 ( TYPE_2 arg ) { return new TYPE_1 ( ) ; },public void METHOD_1 ( ) { },"['Update TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete ConstructorCall', 'Delete Return']",834
"public void METHOD_1 ( ) { state = VAR_1 ; METHOD_2 ( VAR_2 , null ) ; }",public void METHOD_1 ( ) { state = VAR_1 ; METHOD_2 ( VAR_2 ) ; },['Delete Literal'],835
"private void METHOD_1 ( long VAR_1 , long VAR_2 , java.lang.String VAR_3 ) { java.lang.String result = this . VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result , ( VAR_3 + STRING_1 ) ) ; }","private void METHOD_1 ( long VAR_1 , long VAR_2 , java.lang.String VAR_3 ) { java.lang.String result = this . VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result , VAR_3 ) ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",837
public boolean METHOD_1 ( TYPE_1 state ) { if ( ( state . METHOD_2 ( ) ) == null ) { return false ; } TYPE_2 VAR_1 = state . METHOD_2 ( ) . METHOD_3 ( ) ; return VAR_2 . contains ( VAR_1 ) ; },public boolean METHOD_1 ( TYPE_1 state ) { TYPE_2 VAR_1 = state . METHOD_2 ( ) . METHOD_3 ( ) ; return VAR_2 . contains ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",838
"public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { METHOD_2 ( VAR_1 , VAR_1 . METHOD_3 ( ) , new TYPE_3 ( VAR_2 . getId ( ) ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { METHOD_2 ( VAR_1 , new TYPE_3 ( VAR_2 . getId ( ) ) ) ; }","['Delete VariableRead', 'Delete Invocation']",840
public boolean METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 1 ) { return false ; } else if ( VAR_1 > ( this . METHOD_2 ( ) ) ) { return false ; } else { return true ; } },public boolean METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 ) { return false ; } else if ( VAR_1 > ( this . METHOD_2 ( ) ) ) { return false ; } else { return true ; } },['Update Literal'],841
"public static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , int offset , int VAR_2 ) { return TYPE_4 . METHOD_1 ( VAR_1 . METHOD_2 ( VAR_3 , 0 , VAR_4 ) . METHOD_3 ( ""name"" , 1 ) , offset , VAR_2 , VAR_5 class ) ; }","public static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , int offset , int VAR_2 ) { return TYPE_4 . METHOD_1 ( VAR_1 . METHOD_3 ( ""name"" , 1 ) , offset , VAR_2 , VAR_5 class ) ; }","['Move VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation']",842
"void METHOD_1 ( double VAR_1 , int VAR_2 ) ;",void METHOD_1 ( int VAR_1 ) ;,"['Update Parameter', 'Delete TypeReference', 'Delete Parameter']",843
"protected TYPE_1 METHOD_1 ( java.lang.Double VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( this , VAR_3 ) ; return VAR_2 ; }","protected TYPE_1 METHOD_1 ( java.lang.Double VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( this , true ) ; return VAR_2 ; }","['Update ConstructorCall', 'Insert Literal', 'Delete FieldRead']",845
public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( STRING_1 ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; },['Delete TypeAccess'],846
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return null ; } return VAR_2 . METHOD_3 ( ) ; },public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_2 . METHOD_3 ( ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",847
"public static void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 . METHOD_2 ( ) ) < FLOAT_1 ) TYPE_2 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) ; }","private static void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 . METHOD_2 ( ) ) < FLOAT_1 ) TYPE_2 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) ; }",['Update Wra'],848
"java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 status , TYPE_4 VAR_2 , TYPE_5 item , TYPE_6 VAR_3 , TYPE_7 VAR_4 ) ;","java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 status , TYPE_4 VAR_2 , TYPE_5 item , TYPE_7 VAR_4 ) ;","['Delete TypeReference', 'Delete Parameter']",849
"private void METHOD_1 ( int [ ] VAR_1 ) { METHOD_1 ( VAR_1 [ VAR_2 ] , VAR_1 [ VAR_3 ] ) ; }","public void METHOD_1 ( int [ ] VAR_1 ) { METHOD_1 ( VAR_1 [ VAR_2 ] , VAR_1 [ VAR_3 ] ) ; }",['Update Wra'],850
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , ( STRING_2 + ( VAR_2 ) ) ) ; VAR_1 . METHOD_2 ( STRING_3 , ( STRING_4 + ( VAR_3 ) ) ) ; }","public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , ( STRING_2 + ( VAR_2 ) ) ) ; VAR_1 . METHOD_2 ( STRING_3 , ( STRING_4 + ( VAR_3 ) ) ) ; }",['Insert Wra'],851
"void METHOD_1 ( int VAR_1 , TYPE_1 < TYPE_2 > response ) ;",void METHOD_1 ( int VAR_1 ) ;,"['Delete TypeReference', 'Delete TypeReference', 'Delete Parameter']",852
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } else { VAR_1 . METHOD_2 ( ) ; } VAR_2 = ! ( VAR_3 . equals ( null ) ) ; },private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 = new TYPE_1 ( ) ; } else { VAR_1 . METHOD_2 ( ) ; } VAR_2 = ! ( VAR_3 . equals ( null ) ) ; },['Update BinaryOperator'],853
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; if ( ( VAR_4 ) != null ) METHOD_4 ( new TYPE_1 ( ) { public void METHOD_5 ( ) { VAR_4 . METHOD_6 ( ) ; } } ) ; },public void METHOD_1 ( ) { METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; if ( ( VAR_4 ) != null ) METHOD_4 ( new TYPE_1 ( ) { public void METHOD_5 ( ) { VAR_4 . METHOD_6 ( ) ; } } ) ; },['Update Invocation'],854
"public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( name , VAR_1 , this ) ; VAR_2 . METHOD_2 ( ) ; this . VAR_3 . add ( VAR_2 ) ; this . METHOD_2 ( ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( name , VAR_1 , this ) ; this . VAR_3 . add ( VAR_2 ) ; this . METHOD_2 ( ) ; return VAR_2 ; }","['Delete VariableRead', 'Delete Invocation']",855
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; } return VAR_1 ; },private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; } return VAR_1 ; },['Update Wra'],856
"public java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) { return METHOD_2 ( ( ( VAR_2 ) + STRING_1 ) , new java.lang.String [ ] { STRING_2 } ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( ( ( VAR_2 ) + STRING_1 ) , new java.lang.String [ ] { STRING_2 } ) ; }","['Delete TypeReference', 'Delete Parameter']",857
"public java.util.List < TYPE_1 > METHOD_1 ( java.util.Date VAR_1 , java.util.Date VAR_2 , TYPE_2 VAR_3 , int VAR_4 ) ;","public java.util.List < TYPE_1 > METHOD_1 ( java.util.Date VAR_1 , java.util.Date VAR_2 , TYPE_2 VAR_3 ) ;","['Delete TypeReference', 'Delete Parameter']",858
protected TYPE_1 METHOD_1 ( ) { throw new TYPE_2 ( ) ; },public TYPE_1 METHOD_1 ( ) { throw new TYPE_2 ( ) ; },['Update Wra'],859
"private void METHOD_1 ( final TYPE_1 [ ] VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 ) ) ; } }",private void METHOD_1 ( final TYPE_1 [ ] VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_3 ( METHOD_4 ( VAR_1 ) ) ; } },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete VariableRead']",860
private void METHOD_1 ( java.awt.Color VAR_1 ) { this . VAR_1 = VAR_1 ; },public void METHOD_1 ( java.awt.Color VAR_1 ) { this . VAR_1 = VAR_1 ; },['Update Wra'],861
"public static TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) . get ( ) . VAR_1 ; java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) . get ( ) . VAR_4 ; TYPE_2 . METHOD_1 ( VAR_1 , VAR_3 ) ; return VAR_5 ; }","public static void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) . get ( ) . VAR_1 ; java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) . get ( ) . VAR_4 ; TYPE_2 . METHOD_1 ( VAR_1 , VAR_3 ) ; }","['Update TypeReference', 'Delete FieldRead', 'Delete Return']",862
private void METHOD_1 ( int VAR_1 ) throws TYPE_1 { java.lang.String VAR_2 = STRING_1 + VAR_1 ; if ( VAR_1 > 0 ) { VAR_3 . METHOD_2 ( ( STRING_2 + VAR_2 ) ) ; handle ( ) . METHOD_3 ( VAR_2 ) ; } },private void METHOD_1 ( int VAR_1 ) throws TYPE_1 { java.lang.String VAR_2 = STRING_1 + VAR_1 ; if ( VAR_1 > 1 ) { VAR_3 . METHOD_2 ( ( STRING_2 + VAR_2 ) ) ; handle ( ) . METHOD_3 ( VAR_2 ) ; } },['Update Literal'],864
"public boolean METHOD_1 ( TYPE_1 b , TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { return ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( ! ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) ; }","public boolean METHOD_1 ( TYPE_1 b , TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { return ( ! ( VAR_2 . METHOD_2 ( ) ) ) && ( ! ( VAR_2 . METHOD_3 ( VAR_3 ) ) ) ; }","['Update VariableRead', 'Update VariableRead']",865
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { this . id = VAR_3 ; ( VAR_3 ) ++ ; this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; this . status = STRING_1 ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , java.lang.String status ) { this . id = VAR_3 ; ( VAR_3 ) ++ ; this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; this . status = STRING_1 ; }","['Insert Parameter', 'Insert TypeReference']",866
public TYPE_1 METHOD_1 ( java.lang.String className ) { for ( TYPE_2 VAR_1 : VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( className ) ) { return VAR_1 . METHOD_2 ( ) ; } } return null ; },public TYPE_1 METHOD_1 ( java.lang.String className ) { for ( TYPE_2 VAR_1 : VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( className ) ) { return VAR_1 . METHOD_2 ( ) ; } } return null ; },['Update Invocation'],867
void METHOD_1 ( boolean VAR_1 ) { VAR_2 = false ; VAR_3 = false ; response . METHOD_2 ( ( VAR_4 ? VAR_5 : VAR_6 . METHOD_3 ( ) ? VAR_7 : VAR_8 ) ) ; VAR_9 = VAR_1 ; METHOD_4 ( true ) ; },"void METHOD_1 ( boolean VAR_4 , boolean VAR_1 ) { VAR_2 = false ; VAR_3 = false ; response . METHOD_2 ( ( VAR_4 ? VAR_5 : VAR_6 . METHOD_3 ( ) ? VAR_7 : VAR_8 ) ) ; VAR_9 = VAR_1 ; METHOD_4 ( true ) ; }","['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead', 'Delete FieldRead']",868
"protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 0 , TYPE_1 . METHOD_3 ( ) . METHOD_4 ( METHOD_5 ( ) , METHOD_6 ( ) ) ) ; }","private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 0 , TYPE_1 . METHOD_3 ( ) . METHOD_4 ( METHOD_5 ( ) , METHOD_6 ( ) ) ) ; }",['Update Wra'],869
public void METHOD_1 ( int i ) { this . VAR_1 = i ; },public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Update Parameter', 'Update TypeReference', 'Update VariableRead']",870
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_2 . trim ( ) . isEmpty ( ) ) ) return ; VAR_3 . setText ( VAR_1 ) ; VAR_4 . get ( ) . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 . setText ( VAR_1 ) ; VAR_4 . get ( ) . METHOD_2 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",871
public java.lang.String getName ( ) { return this . METHOD_1 ( ) . getName ( ) . METHOD_2 ( ) . get ( VAR_1 ) ; },public java.lang.String getName ( ) { return this . METHOD_1 ( ) . getName ( ) . METHOD_2 ( ) . get ( ) ; },['Delete TypeAccess'],872
"public static boolean METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 , TYPE_1 VAR_3 , double VAR_4 , TYPE_2 VAR_5 ) { return TYPE_3 . METHOD_1 ( VAR_6 . x , VAR_6 . y , VAR_2 , VAR_7 . x , VAR_7 . y , VAR_4 , VAR_5 ) ; }","public static boolean METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 , TYPE_1 VAR_3 , double VAR_4 , TYPE_2 VAR_5 ) { return TYPE_3 . METHOD_1 ( VAR_6 . x , VAR_6 . y , VAR_4 , VAR_7 . x , VAR_7 . y , VAR_4 , VAR_5 ) ; }",['Update VariableRead'],873
"public java.lang.String METHOD_1 ( ) { return VAR_1 . getString ( STRING_1 , STRING_2 ) ; }",public java.lang.String METHOD_1 ( ) { return VAR_1 . getString ( STRING_1 ) ; },['Delete TypeAccess'],874
"public boolean METHOD_1 ( TYPE_1 b , TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { return true ; }","protected boolean METHOD_1 ( TYPE_1 b , TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { return true ; }",['Update Wra'],875
private void init ( ) { VAR_1 = new java.util.LinkedList < TYPE_1 > ( ) ; VAR_2 = new java.lang.StringBuilder ( ) ; VAR_3 = new java.lang.StringBuilder ( ) ; VAR_4 = new java.lang.StringBuilder ( ) ; METHOD_1 ( true ) ; },private void init ( ) { VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_2 = new java.lang.StringBuilder ( ) ; VAR_3 = new java.lang.StringBuilder ( ) ; VAR_4 = new java.lang.StringBuilder ( ) ; METHOD_1 ( true ) ; },['Update ConstructorCall'],876
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) return false ; return VAR_1 . METHOD_3 ( ) . METHOD_4 ( this ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) return false ; return VAR_1 . METHOD_4 ( this ) ; },"['Move VariableRead', 'Delete Invocation']",877
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_1 . METHOD_2 ( ) . compareTo ( VAR_2 . METHOD_2 ( ) ) ; }",['Update Invocation'],878
"public boolean METHOD_1 ( TYPE_1 VAR_1 , final TYPE_2 listener ) { return METHOD_1 ( VAR_1 , false , STRING_1 , true , listener ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , final TYPE_2 listener ) { return METHOD_1 ( VAR_1 , false , listener ) ; }","['Delete TypeAccess', 'Delete Literal']",879
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return list ( VAR_1 , VAR_2 , null , false , 0 ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return list ( VAR_1 , VAR_2 , null , 0 ) ; }",['Delete Literal'],880
"public static java.lang.String METHOD_1 ( TYPE_1 target ) { return java.lang.String.format ( STRING_1 , VAR_1 . get ( VAR_2 . getClass ( ) ) , target . METHOD_2 ( ) ) ; }","public static java.lang.String METHOD_1 ( TYPE_1 target ) { return java.lang.String.format ( STRING_1 , VAR_1 . get ( VAR_2 . getClass ( ) ) , VAR_2 . getName ( ) ) ; }","['Update Invocation', 'Insert TypeAccess', 'Delete VariableRead']",881
public synchronized TYPE_1 METHOD_1 ( ) { return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return VAR_1 ; },['Delete Wra'],882
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( new TYPE_3 ( ) ) ; VAR_1 . METHOD_4 ( new TYPE_4 ( ) ) ; },public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( new TYPE_3 ( ) ) ; },"['Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation']",883
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move VariableRead', 'Delete Invocation', 'Delete ConstructorCall']",885
"protected boolean METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.util.List < java.lang.String > VAR_2 ) { for ( java.lang.String str : VAR_2 ) { if ( VAR_3 . contains ( str ) ) return true ; } return false ; }","private boolean METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.util.List < java.lang.String > VAR_2 ) { for ( java.lang.String str : VAR_2 ) { if ( VAR_3 . contains ( str ) ) return true ; } return false ; }",['Update Wra'],886
"public void METHOD_1 ( ) throws java.io.IOException { for ( TYPE_1 VAR_1 : VAR_2 ) { try { VAR_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 , VAR_3 , STRING_3 ) ) ; } catch ( java.io.IOException VAR_4 ) { } } java.lang.System.exit ( 0 ) ; }","public void METHOD_1 ( ) throws java.io.IOException { for ( TYPE_1 VAR_1 : VAR_2 ) { try { VAR_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 , VAR_3 , null ) ) ; } catch ( java.io.IOException VAR_4 ) { } } java.lang.System.exit ( 0 ) ; }","['Insert Literal', 'Delete FieldRead']",887
public static TYPE_1 METHOD_1 ( TYPE_2 context ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( context ) ; } return VAR_1 ; },public static TYPE_1 METHOD_1 ( TYPE_2 context ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( context ) ; } return VAR_1 ; },"['Insert ConstructorCall', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",888
public void METHOD_1 ( android.view.View view ) { METHOD_2 ( ( i + 1 ) ) ; },public void METHOD_1 ( android.view.View view ) { METHOD_2 ( i ) ; },"['Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",890
protected final boolean METHOD_1 ( ) { if ( VAR_1 ) { return false ; } VAR_1 = true ; return true ; },public final boolean METHOD_1 ( ) { if ( VAR_1 ) { return false ; } VAR_1 = true ; return true ; },['Update Wra'],891
"public java.lang.Boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 status = METHOD_2 ( VAR_2 ) ; if ( status == null ) { return null ; } return status == ( VAR_3 ) ? true : null ; }","public java.lang.Boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 status = METHOD_2 ( VAR_2 ) ; if ( status == null ) { return false ; } return status == ( VAR_3 ) ? true : false ; }","['Update Literal', 'Update Literal']",892
public void METHOD_1 ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { java.lang.System.out.print ( ( ( METHOD_2 ( ) ) + STRING_1 ) ) ; } },public void METHOD_1 ( int n ) { for ( int i = 1 ; i < n ; i ++ ) { java.lang.System.out.print ( ( ( METHOD_2 ( ) ) + STRING_1 ) ) ; } },['Update Literal'],893
"public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( VAR_2 , filePath , VAR_3 ) ; }","public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( VAR_2 , filePath ) ; }",['Delete TypeAccess'],894
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_1 writer = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) ) ) ; if ( ( VAR_2 ) > 0 ) { writer . METHOD_3 ( VAR_2 ) ; } return writer ; },private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_1 writer = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) ) ) ; if ( ( VAR_2 ) != null ) { writer . METHOD_3 ( VAR_2 ) ; } return writer ; },"['Update BinaryOperator', 'Update Literal']",895
public void METHOD_1 ( android.view.View view ) { java.lang.String VAR_1 ; java.lang.String VAR_2 ; VAR_1 = VAR_3 . getText ( ) . toString ( ) ; VAR_2 = VAR_4 . getText ( ) . toString ( ) ; METHOD_2 ( ) ; },"public void METHOD_1 ( android.view.View view ) { java.lang.String VAR_1 ; java.lang.String VAR_2 ; VAR_1 = VAR_3 . getText ( ) . toString ( ) ; VAR_2 = VAR_4 . getText ( ) . toString ( ) ; start ( VAR_1 , VAR_2 ) ; }","['Update Invocation', 'Insert VariableRead', 'Insert VariableRead']",897
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 . METHOD_2 ( context , VAR_3 , false ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 . METHOD_2 ( context , VAR_3 , true ) ; }",['Update Literal'],898
public TYPE_1 METHOD_1 ( java.lang.Long id ) throws TYPE_2 { return this . VAR_1 . METHOD_1 ( id ) ; },public TYPE_1 METHOD_1 ( java.lang.Long id ) throws TYPE_2 { return VAR_1 . METHOD_1 ( id ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",899
"public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_1 VAR_4 ) { TYPE_2 VAR_5 = new TYPE_2 ( VAR_1 , VAR_2 ) ; VAR_5 . METHOD_2 ( VAR_4 ) ; VAR_6 . execute ( VAR_3 ) ; }","public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_1 VAR_4 ) { TYPE_2 VAR_5 = new TYPE_2 ( VAR_1 , VAR_2 ) ; VAR_5 . METHOD_2 ( VAR_4 ) ; VAR_6 . execute ( VAR_3 , VAR_1 , VAR_2 ) ; }","['Insert VariableRead', 'Insert VariableRead']",900
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 , STRING_1 ) ; }",protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; },['Delete TypeAccess'],902
"public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }","public static TYPE_1 METHOD_1 ( android.content.Context context ) { return new TYPE_1 ( context , VAR_1 , VAR_2 ) ; }","['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead']",904
public void METHOD_1 ( ) { if ( ! ( this . VAR_1 ) ) VAR_2 . remove ( this ) ; super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { if ( ! ( this . VAR_1 ) ) VAR_2 . add ( this ) ; super . METHOD_1 ( ) ; },['Update Invocation'],905
"public void METHOD_1 ( long VAR_1 , java.lang.String className ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , className ) ; }","public void METHOD_1 ( long VAR_1 , java.lang.String className ) { TYPE_1 . METHOD_2 ( ) . METHOD_1 ( VAR_1 , className ) ; }",['Update Invocation'],906
"protected void METHOD_1 ( java.lang.Double result ) { VAR_1 . METHOD_2 ( VAR_2 , result ) ; }","protected void METHOD_1 ( java.lang.Long result ) { VAR_1 . METHOD_2 ( VAR_2 , result ) ; }",['Update TypeReference'],907
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; java.util.List < TYPE_1 > result = VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_3 . assertThat ( result , TYPE_2 . METHOD_2 ( VAR_4 ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; java.util.List < TYPE_1 > result = VAR_2 . METHOD_1 ( VAR_1 ) ; assertThat ( result , TYPE_2 . METHOD_2 ( VAR_4 ) ) ; }",['Update TypeAccess'],908
private static java.lang.String METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return VAR_2 . getString ( STRING_1 ) ; } else { return VAR_2 . getString ( STRING_2 ) ; } },public static java.lang.String METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return VAR_2 . getString ( STRING_1 ) ; } else { return VAR_2 . getString ( STRING_2 ) ; } },['Update Wra'],909
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) , STRING_1 ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; },['Delete TypeAccess'],910
"public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . replaceAll ( STRING_1 , STRING_2 ) ; } else { return null ; } }","private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . replaceAll ( STRING_1 , STRING_2 ) ; } else { return null ; } }",['Update Wra'],911
"public static java.lang.String METHOD_1 ( final java.lang.String string , final char VAR_1 ) { final java.lang.String VAR_2 = java.lang.String . METHOD_2 ( VAR_1 ) ; return VAR_3 . replace ( ( STRING_1 + VAR_2 ) , VAR_2 ) ; }","public static java.lang.String METHOD_1 ( final java.lang.String string , final char VAR_1 ) { final java.lang.String VAR_2 = java.lang.String . METHOD_2 ( VAR_1 ) ; return VAR_3 . replaceAll ( ( STRING_1 + VAR_2 ) , VAR_2 ) ; }",['Update Invocation'],912
public TYPE_1 METHOD_1 ( ) { return ( ( TYPE_2 ) ( context ) ) . METHOD_2 ( ) ; },public TYPE_1 METHOD_1 ( ) { return ( ( TYPE_2 ) ( getActivity ( ) ) ) . METHOD_2 ( ) ; },"['Insert Invocation', 'Update Invocation', 'Move Invocation', 'Move TypeReference', 'Delete FieldRead']",913
public void METHOD_1 ( ) { TYPE_1 = VAR_1 . METHOD_2 ( ) ; VAR_2 = TYPE_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( 0 ) ; TYPE_2 . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( ) ; VAR_3 = new TYPE_3 ( TYPE_1 ) ; },public void METHOD_1 ( ) { TYPE_1 = VAR_1 . METHOD_2 ( ) ; VAR_2 = TYPE_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( 1 ) ; TYPE_2 . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( ) ; VAR_3 = new TYPE_3 ( TYPE_1 ) ; },['Update Literal'],914
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; METHOD_3 ( VAR_2 ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( false ) ; },"['Update Literal', 'Delete TypeAccess', 'Delete Invocation']",915
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_5 . getId ( ) , null , VAR_6 ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_5 . getId ( ) , VAR_6 ) ; }",['Delete Literal'],916
private void METHOD_1 ( int n ) { VAR_1 += n ; },public void METHOD_1 ( int n ) { VAR_1 += n ; },['Update Wra'],917
"private static TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) { return new TYPE_1 ( VAR_1 , VAR_2 , false , VAR_3 , VAR_4 ) ; }","private static TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 , false ) ; }","['Update ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead']",918
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 < TYPE_3 > VAR_2 ) throws TYPE_4 , TYPE_5 , TYPE_6 { return this . METHOD_1 ( VAR_1 , VAR_2 , null , null ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.util.Set < TYPE_3 > VAR_2 ) throws TYPE_4 , TYPE_5 , TYPE_6 { return this . METHOD_1 ( VAR_1 , VAR_2 , null , null ) ; }",['Update TypeReference'],919
public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( 0 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; return VAR_2 ; },"['Update ConstructorCall', 'Delete Literal']",921
public boolean METHOD_1 ( ) throws TYPE_1 { java.lang.Thread . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) . METHOD_4 ( ) ; METHOD_5 ( VAR_3 ) ; METHOD_5 ( VAR_4 ) ; return true ; },public void METHOD_1 ( ) throws TYPE_1 { java.lang.Thread . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) . METHOD_4 ( ) ; METHOD_5 ( VAR_3 ) ; METHOD_5 ( VAR_4 ) ; },"['Update TypeReference', 'Delete Literal', 'Delete Return']",922
"public static int [ ] METHOD_1 ( java.util.List < java.util.Date > VAR_1 , java.util.List < java.util.Date > VAR_2 ) { return TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , true ) ; }","public static int [ ] METHOD_1 ( java.util.List < java.util.Date > VAR_1 , java.util.List < java.util.Date > VAR_2 ) { return TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , false ) ; }",['Update Literal'],923
"public void METHOD_1 ( TYPE_1 message ) { METHOD_2 ( message , false ) ; }",public void METHOD_1 ( TYPE_1 message ) { METHOD_2 ( message ) ; },['Delete Literal'],924
public TYPE_1 METHOD_1 ( boolean b ) { VAR_1 = b ; return this ; },public TYPE_1 METHOD_1 ( boolean b ) { VAR_1 = true ; return this ; },"['Insert Literal', 'Delete VariableRead']",925
"public static int METHOD_1 ( int a , int b ) { if ( b == 0 ) { return 0 ; } return ( a / b ) * b ; }","public static int METHOD_1 ( int a , int b ) { return ( a / b ) * b ; }","['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",926
void METHOD_1 ( java.io.File file ) ;,void METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",927
public int METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = 0 ; int VAR_3 = java.lang.Integer.parseInt ( VAR_1 ) ; if ( VAR_3 <= ( VAR_4 ) ) { VAR_2 = VAR_3 ; } return VAR_2 ; },public int METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = 0 ; int VAR_3 = java.lang.Integer.parseInt ( VAR_1 ) ; if ( VAR_3 < ( VAR_4 ) ) { VAR_2 = VAR_3 ; } return VAR_2 ; },['Update BinaryOperator'],928
"public boolean METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 , VAR_3 , VAR_1 , VAR_4 , ( ( ( VAR_3 ) - VAR_1 ) > ( VAR_4 ) ) ) ; return ( ( VAR_3 ) - VAR_1 ) >= ( VAR_4 ) ; }","public boolean METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 , VAR_3 , VAR_1 , VAR_4 , ( ( ( VAR_3 ) - VAR_1 ) > ( VAR_4 ) ) ) ; return ( ( VAR_3 ) - VAR_1 ) > ( VAR_4 ) ; }",['Update BinaryOperator'],930
"public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 ) throws TYPE_2 { try { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } catch ( TYPE_3 VAR_4 ) { throw new TYPE_2 ( VAR_4 ) ; } }","protected void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 ) throws TYPE_2 { try { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } catch ( TYPE_3 VAR_4 ) { throw new TYPE_2 ( VAR_4 ) ; } }",['Update Wra'],931
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { METHOD_2 ( VAR_1 , response ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { METHOD_2 ( VAR_1 , response ) ; }",['Update Wra'],932
private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_2 . delete ( ) ; } VAR_3 . intent ( this ) . start ( ) ; METHOD_2 ( ) ; },private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_2 . delete ( ) ; } METHOD_2 ( ) ; },"['Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation']",933
"public void METHOD_1 ( java.lang.String name , java.lang.String id ) { VAR_1 . METHOD_2 ( id ) ; view . METHOD_3 ( name ) ; }",public void METHOD_1 ( java.lang.String id ) { VAR_1 . METHOD_2 ( id ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",934
private static TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_3 ; VAR_1 . METHOD_3 ( VAR_2 ) ; return VAR_4 . build ( ) ; },private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_3 ; VAR_1 . METHOD_3 ( VAR_2 ) ; return VAR_4 . build ( ) ; },['Delete Wra'],935
"private void METHOD_1 ( ) { METHOD_2 ( target . METHOD_3 ( ) , target . METHOD_4 ( ) , target . METHOD_5 ( ) ) ; target = null ; }","public void METHOD_1 ( ) { METHOD_2 ( target . METHOD_3 ( ) , target . METHOD_4 ( ) , target . METHOD_5 ( ) ) ; target = null ; }",['Update Wra'],936
"public java.io.InputStream METHOD_1 ( TYPE_1 path , TYPE_2 VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_3 . get ( path ) ) ; }",public java.io.InputStream METHOD_1 ( TYPE_1 path ) { return VAR_2 . METHOD_2 ( VAR_3 . get ( path ) ) ; },"['Delete TypeReference', 'Delete Parameter']",937
"public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { return TYPE_3 . METHOD_1 ( VAR_1 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ) ; }","public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { return TYPE_3 . METHOD_1 ( VAR_1 , null ) ; }","['Insert Literal', 'Delete ConstructorCall']",938
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 , 1 ) ; VAR_1 . METHOD_2 ( ) ; assertTrue ( TYPE_1 . METHOD_3 ( ) . get ( 0 ) . equals ( VAR_1 ) ) ; }",public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( ) ; assertTrue ( TYPE_1 . METHOD_3 ( ) . get ( 0 ) . equals ( VAR_1 ) ) ; },"['Delete FieldRead', 'Delete Literal']",940
public static void METHOD_1 ( android.content.Context context ) { VAR_1 . get ( ) . METHOD_2 ( ) ; },public static void METHOD_1 ( android.content.Context context ) { VAR_1 . get ( ) . METHOD_2 ( context ) ; },['Insert VariableRead'],941
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Delete TypeAccess', 'Delete Invocation']",942
public boolean METHOD_1 ( final java.lang.String fileName ) { return ( VAR_1 ) || ( ( VAR_2 . contains ( STRING_1 ) ) && ( VAR_3 . contains ( VAR_2 . split ( STRING_1 ) [ 1 ] ) ) ) ; },public boolean METHOD_1 ( final java.lang.String fileName ) { return ( VAR_1 ) || ( ( VAR_3 . contains ( STRING_1 ) ) && ( VAR_3 . contains ( VAR_2 . split ( STRING_1 ) [ 1 ] ) ) ) ; },['Update TypeAccess'],943
public void METHOD_1 ( ) { VAR_1 . setText ( STRING_1 ) ; },public void METHOD_1 ( ) { },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",944
"private void METHOD_1 ( java.util.Collection < TYPE_1 > VAR_1 , TYPE_2 < java.lang.String > args ) throws java.lang.Exception { METHOD_2 ( VAR_1 , false , args ) ; }","private void METHOD_1 ( TYPE_2 < java.lang.String > args ) throws java.lang.Exception { METHOD_2 ( false , args ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",945
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { METHOD_1 ( VAR_1 , VAR_2 , ( ( TYPE_1 ) ( null ) ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { METHOD_1 ( VAR_1 , VAR_2 , null ) ; }","['Update Literal', 'Delete TypeReference']",946
"private void METHOD_1 ( ) { TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ; VAR_3 . add ( a ) ; VAR_4 . METHOD_2 ( a ) ; }",private void METHOD_1 ( ) { TYPE_1 a = new TYPE_1 ( VAR_1 ) ; VAR_3 . add ( a ) ; VAR_4 . METHOD_2 ( a ) ; },['Delete FieldRead'],947
public static void METHOD_1 ( int VAR_1 ) { VAR_2 = ( VAR_2 ) - VAR_1 ; java.lang.System.out.println ( ( STRING_1 + ( VAR_2 ) ) ) ; },public static void METHOD_1 ( int VAR_1 ) { VAR_2 = ( VAR_2 ) - VAR_1 ; java.lang.System.out.print ( ( STRING_1 + ( VAR_2 ) ) ) ; },['Update Invocation'],948
"protected final java.lang.String toString ( java.lang.String VAR_1 , boolean VAR_2 ) { return ""false"" ; }","protected final java.lang.String toString ( java.lang.String VAR_1 , boolean VAR_2 ) { return ""true"" ; }",['Update Literal'],950
"public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : TYPE_2 . METHOD_3 ( this ) ; METHOD_4 ( VAR_2 , VAR_3 ) ; return true ; } return super . METHOD_1 ( item ) ; }","public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : TYPE_2 . METHOD_3 ( this ) ; METHOD_4 ( VAR_3 , VAR_2 ) ; return true ; } return super . METHOD_1 ( item ) ; }",['Move TypeAccess'],951
"private long METHOD_1 ( final long VAR_1 ) { if ( VAR_1 >= ( VAR_2 ) ) { VAR_3 = METHOD_2 ( VAR_1 , 0 ) ; VAR_2 = METHOD_2 ( VAR_1 , 1 ) ; } return VAR_1 - ( VAR_3 ) ; }",private long METHOD_1 ( final long VAR_1 ) { if ( VAR_1 >= ( VAR_2 ) ) { VAR_3 = METHOD_2 ( 0 ) ; VAR_2 = METHOD_2 ( 1 ) ; } return VAR_1 - ( VAR_3 ) ; },"['Delete VariableRead', 'Delete VariableRead']",953
protected abstract double METHOD_1 ( ) ;,public abstract double METHOD_1 ( ) ;,['Update Wra'],954
public void METHOD_1 ( java.lang.String message ) { VAR_1 . METHOD_2 ( ) . METHOD_1 ( message ) ; },public void METHOD_1 ( java.lang.String msg ) { VAR_1 . METHOD_2 ( ) . METHOD_1 ( msg ) ; },"['Update Parameter', 'Update VariableRead']",955
void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_1 ( ) ; },void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_1 ( ) ; },['Update TypeAccess'],956
"public java.util.Iterator < java.lang.String > METHOD_1 ( int n ) throws java.lang.Exception { return new TYPE_1 ( VAR_1 , n ) . METHOD_2 ( ) ; }","public java.util.Iterator < java.lang.String > METHOD_1 ( int n ) throws java.lang.Exception { return new TYPE_1 ( VAR_1 , 1 ) . METHOD_2 ( ) ; }","['Insert Literal', 'Delete VariableRead']",957
private static int METHOD_1 ( java.lang.String method ) { if ( VAR_1 . startsWith ( STRING_1 ) ) { return VAR_2 ; } if ( VAR_1 . startsWith ( STRING_2 ) ) { return VAR_3 ; } return - 1 ; },public static int METHOD_1 ( java.lang.String method ) { if ( VAR_1 . startsWith ( STRING_1 ) ) { return VAR_2 ; } if ( VAR_1 . startsWith ( STRING_2 ) ) { return VAR_3 ; } return - 1 ; },['Update Wra'],958
public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . add ( VAR_2 ) ; } catch ( TYPE_1 VAR_3 ) { VAR_1 . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . add ( VAR_2 ) ; } catch ( TYPE_1 VAR_3 ) { } },"['Delete TypeAccess', 'Delete Invocation']",959
"static void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( new TYPE_3 ( VAR_1 , 0 ) ) ; }",static void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( new TYPE_3 ( VAR_1 ) ) ; },['Delete Literal'],960
private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 ; if ( VAR_1 != null ) VAR_1 . METHOD_2 ( ) ; VAR_2 = null ; },protected void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 ; if ( VAR_1 != null ) VAR_1 . METHOD_2 ( ) ; VAR_2 = null ; },['Update Wra'],961
"public int METHOD_1 ( int [ ] VAR_1 , int VAR_2 , int VAR_3 ) { return VAR_3 ; }","public int METHOD_1 ( int [ ] VAR_1 , int VAR_2 , int VAR_3 ) { }","['Delete VariableRead', 'Delete Return']",962
"public void METHOD_1 ( ) { try { METHOD_2 ( false , true , view , VAR_1 ) ; TYPE_1 . METHOD_3 ( view , STRING_1 , VAR_2 ) . show ( ) ; } catch ( TYPE_2 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } }","public void METHOD_1 ( ) { try { METHOD_2 ( false , view , VAR_1 ) ; TYPE_1 . METHOD_3 ( view , STRING_1 , VAR_2 ) . show ( ) ; } catch ( TYPE_2 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } }",['Delete Literal'],963
"protected void METHOD_1 ( java.lang.Exception VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; }","protected void METHOD_1 ( java.lang.Exception VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; }","['Delete TypeAccess', 'Delete Invocation']",964
final java.lang.String METHOD_1 ( ) { final java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( STRING_1 ) . append ( VAR_2 ) ; VAR_3 . append ( STRING_2 ) . append ( VAR_4 ) . append ( STRING_3 ) ; return VAR_3 . toString ( ) ; },protected java.lang.String METHOD_1 ( ) { final java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( STRING_1 ) . append ( VAR_2 ) ; VAR_3 . append ( STRING_2 ) . append ( VAR_4 ) . append ( STRING_3 ) ; return VAR_3 . toString ( ) ; },['Update Wra'],965
"public java.util.List < TYPE_1 > METHOD_1 ( int size ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; return VAR_1 . METHOD_5 ( 0 , size ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( int size ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; return VAR_1 . METHOD_5 ( 0 , size ) ; }",['Delete Invocation'],966
"public native int METHOD_1 ( long VAR_1 , double [ ] VAR_2 , long offset ) ;","public native int METHOD_1 ( long VAR_1 , double [ ] VAR_2 ) ;","['Delete TypeReference', 'Delete Parameter']",967
private boolean METHOD_1 ( final TYPE_1 file ) { final java.lang.String VAR_1 = file . METHOD_2 ( ) ; if ( VAR_1 == null ) return false ; return ( VAR_2 . equals ( STRING_1 ) ) || ( VAR_2 . equals ( STRING_2 ) ) ; },private boolean METHOD_1 ( final TYPE_1 file ) { final java.lang.String VAR_1 = file . METHOD_2 ( ) ; return ( VAR_2 . equals ( STRING_1 ) ) || ( VAR_2 . equals ( STRING_2 ) ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",968
public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + ( this . VAR_1 ) ) + STRING_2 ) + ( this . VAR_2 ) ) + STRING_3 ) + ( this . VAR_3 ) ) + STRING_4 ; },public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) + ( VAR_3 ) ) + STRING_4 ; },"['Delete ThisAccess', 'Delete ThisAccess', 'Delete ThisAccess']",969
"public void METHOD_1 ( java.lang.String path , TYPE_1 listener ) { super . METHOD_1 ( path , listener ) ; VAR_1 = false ; }",public void METHOD_1 ( java.lang.String path ) { super . METHOD_1 ( path ) ; VAR_1 = false ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",971
public void METHOD_1 ( ) { assert ! ( TYPE_1 . METHOD_2 ( getView ( ) ) ) : STRING_1 ; },public void METHOD_1 ( ) { assert ! ( getView ( ) . METHOD_2 ( ) ) : STRING_1 ; },['Delete TypeAccess'],972
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_1 . METHOD_2 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) == null ) VAR_1 . METHOD_2 ( ) ; },['Update BinaryOperator'],973
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_2 . METHOD_4 ( ) ) ; TYPE_4 . METHOD_5 ( VAR_1 , response , STRING_2 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { VAR_1 . METHOD_3 ( STRING_1 , VAR_2 . METHOD_4 ( ) ) ; TYPE_4 . METHOD_5 ( VAR_1 , response , STRING_2 ) ; }","['Move VariableRead', 'Delete Invocation']",974
public double METHOD_1 ( ) { return ( super . METHOD_1 ( ) ) * ( - 1 ) ; },public double METHOD_1 ( ) { return ( super . getValue ( ) ) * ( - 1 ) ; },['Update Invocation'],975
"public static java.lang.String METHOD_1 ( android.content.Context context ) { return TYPE_1 . METHOD_2 ( context ) . getString ( VAR_1 , STRING_1 ) ; }","public static java.lang.String METHOD_1 ( android.content.Context context ) { return TYPE_1 . METHOD_2 ( context ) . getString ( VAR_1 , null ) ; }","['Insert Literal', 'Delete TypeAccess']",976
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { double VAR_3 = VAR_1 . METHOD_2 ( ) ; double VAR_4 = VAR_2 . METHOD_3 ( ) ; double VAR_5 = VAR_4 * VAR_3 ; VAR_6 . setValue ( VAR_5 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_3 { double VAR_3 = VAR_1 . METHOD_2 ( ) ; double VAR_4 = VAR_2 . METHOD_3 ( ) ; double VAR_5 = VAR_4 * VAR_3 ; VAR_6 . setValue ( VAR_5 ) ; },"['Insert TypeAccess', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",977
public final void METHOD_1 ( final TYPE_1 VAR_1 ) { this . VAR_2 . METHOD_1 ( VAR_1 ) ; },public final void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",978
public boolean METHOD_1 ( ) { return ( VAR_1 . size ( ) ) >= 1 ; },public boolean METHOD_1 ( ) { return ( VAR_1 . size ( ) ) > 1 ; },['Update BinaryOperator'],979
"public TYPE_1 build ( ) { return new TYPE_1 ( title , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; }","public TYPE_1 build ( ) { return new TYPE_1 ( title , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }",['Delete FieldRead'],980
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Invocation']",981
"private void METHOD_1 ( TYPE_1 node ) { this . VAR_1 . put ( VAR_2 . getId ( ) , node ) ; }","public void METHOD_1 ( TYPE_1 node ) { this . VAR_1 . put ( VAR_2 . getId ( ) , node ) ; }",['Update Wra'],982
"protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 < ? > VAR_2 , boolean VAR_3 ) { return TYPE_3 . METHOD_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , VAR_3 ) . add ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ; }","protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 < ? > VAR_2 , boolean VAR_3 ) { return METHOD_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , VAR_3 ) . add ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ; }",['Update TypeAccess'],983
public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 ) { METHOD_2 ( ) ; } else { VAR_3 = true ; METHOD_3 ( new java.util.ArrayList < > ( TYPE_1 . METHOD_4 ( VAR_4 ) ) ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 ) { METHOD_2 ( ) ; } else { VAR_3 = true ; METHOD_3 ( new java.util.ArrayList < > ( java.util.Arrays.asList ( VAR_4 ) ) ) ; } },"['Update Invocation', 'Update TypeAccess']",985
protected void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . update ( VAR_1 ) ; },protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . update ( VAR_1 ) ; },['Update TypeReference'],986
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return false ; }","['Update Literal', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",987
public java.util.List < TYPE_1 > METHOD_1 ( ) { try { return VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_2 VAR_2 ) { VAR_2 . METHOD_3 ( ) ; return null ; } },public java.util.List < TYPE_1 > METHOD_1 ( ) { try { return VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_2 VAR_2 ) { return null ; } },"['Delete VariableRead', 'Delete Invocation']",988
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.HashMap < java.lang.String , java.lang.Object > VAR_3 ) throws java.lang.Exception { METHOD_1 ( null , VAR_1 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { METHOD_1 ( null , VAR_1 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter']",989
"public void METHOD_1 ( ) throws TYPE_1 { VAR_1 = new TYPE_2 ( STRING_1 , VAR_2 , null , date , VAR_3 , VAR_4 , VAR_5 , VAR_6 , STRING_2 , STRING_3 , 1 ) ; }","public void METHOD_1 ( ) throws TYPE_1 { VAR_1 = new TYPE_2 ( STRING_1 , VAR_2 , null , date , VAR_3 , VAR_4 , VAR_5 , VAR_6 , STRING_2 , STRING_3 ) ; }",['Delete Literal'],990
public static boolean isEmpty ( java.lang.CharSequence str ) { return ( str == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ; },public static boolean isEmpty ( java.lang.String str ) { return ( str == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ; },['Update TypeReference'],991
public int METHOD_1 ( int [ ] VAR_1 ) { return java.lang.Math.abs ( ( ( METHOD_2 ( VAR_1 ) ) + ( VAR_2 ) ) ) ; },public int METHOD_1 ( int [ ] VAR_1 ) { return java.lang.Math.abs ( ( ( METHOD_2 ( VAR_1 ) ) - ( VAR_2 ) ) ) ; },['Update BinaryOperator'],992
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return ; } VAR_1 . METHOD_2 ( ) ; VAR_2 . remove ( VAR_1 ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . remove ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",993
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; },private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; },['Update Wra'],995
"public void METHOD_1 ( int VAR_1 ) { METHOD_1 ( VAR_2 , VAR_1 , false ) ; }","public void METHOD_1 ( int VAR_1 ) { METHOD_1 ( VAR_1 , false ) ; }",['Delete TypeAccess'],997
private native void METHOD_1 ( java.lang.Object VAR_1 ) ;,public native void METHOD_1 ( ) ;,"['Update Wra', 'Delete TypeReference', 'Delete Parameter']",999
"public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_2 ( VAR_1 , false ) ; }",public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_2 ( VAR_1 ) ; },['Delete Literal'],1000
"public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( this ) ; return new TYPE_1 ( VAR_3 , VAR_1 , VAR_4 , VAR_5 , METHOD_3 ( ) ) ; }","public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( this ) ; return new TYPE_1 ( VAR_3 , VAR_1 , VAR_4 , VAR_5 ) ; }",['Delete Invocation'],1001
"public void update ( TYPE_1 [ ] VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . METHOD_1 ( ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; }",public void update ( TYPE_1 [ ] VAR_1 ) { VAR_3 . METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1003
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { return TYPE_3 . METHOD_2 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { return null ; }","['Insert Literal', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1004
public abstract void METHOD_1 ( final java.lang.String VAR_1 ) ;,public void METHOD_1 ( final java.lang.String VAR_1 ) { },['Delete Wra'],1005
TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { VAR_1 = VAR_3 . METHOD_2 ( ) ; } return VAR_1 ; },TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { this . VAR_1 = VAR_3 . METHOD_2 ( ) ; } return VAR_1 ; },['Insert ThisAccess'],1006
public java.lang.String METHOD_1 ( ) { return ( this . label ) == null ? STRING_1 : this . VAR_1 ; },public java.lang.String METHOD_1 ( ) { return ( this . label ) == null ? null : this . VAR_1 ; },"['Insert Literal', 'Delete FieldRead']",1007
"private static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_3 . METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_2 ) , VAR_2 . METHOD_4 ( VAR_3 ) ) ; }",private static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_3 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1008
"public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { long VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; long VAR_4 = TYPE_1 . METHOD_2 ( VAR_2 ) ; return VAR_4 < VAR_3 ; }","public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { long VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; long VAR_4 = TYPE_1 . METHOD_2 ( VAR_2 ) ; return VAR_4 > VAR_3 ; }",['Update BinaryOperator'],1009
public static void main ( java.lang.String [ ] args ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_1 ( STRING_1 ) ; VAR_2 . show ( ) ; },public static void main ( java.lang.String [ ] args ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_2 . show ( ) ; },"['Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1011
"public static TYPE_1 METHOD_1 ( TYPE_2 c , int VAR_1 , boolean VAR_2 ) { return TYPE_3 . METHOD_1 ( c . METHOD_2 ( ) , c . METHOD_3 ( ) , VAR_1 , VAR_2 ) ; }","public static int METHOD_1 ( TYPE_2 c , int VAR_1 , boolean VAR_2 ) { return TYPE_3 . METHOD_1 ( c . METHOD_2 ( ) , c . METHOD_3 ( ) , VAR_1 , VAR_2 ) ; }",['Update TypeReference'],1012
public void METHOD_1 ( ) { VAR_1 . start ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( ) ; if ( ! ( VAR_5 . METHOD_4 ( ) ) ) VAR_6 . show ( ) ; },public void METHOD_1 ( ) { VAR_1 . start ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( ) ; if ( ! ( VAR_5 . METHOD_4 ( ) ) ) VAR_6 . show ( ) ; return ; },['Insert Return'],1013
"public void METHOD_1 ( java.lang.String name ) { ( ( TYPE_1 ) ( TYPE_2 ) ) . METHOD_1 ( name , 1 ) ; }","public void METHOD_1 ( java.lang.String name , int size ) { ( ( TYPE_1 ) ( TYPE_2 ) ) . METHOD_1 ( name , size ) ; }","['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead', 'Delete Literal']",1014
"public void METHOD_1 ( TYPE_1 VAR_1 , short VAR_2 ) { }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete Parameter']",1015
"public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 class ) , VAR_3 , null , new TYPE_2 ( ) ) ; }","public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( METHOD_3 ( VAR_2 class ) , VAR_3 , null , new TYPE_2 ( ) ) ; }",['Update TypeAccess'],1016
public short METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( VAR_2 ) ; },private short METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( VAR_2 ) ; },['Update Wra'],1017
"private void METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_2 . index ( VAR_1 , true ) ; } catch ( java.io.IOException VAR_3 ) { VAR_4 . error ( STRING_1 , VAR_3 ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_2 . index ( VAR_1 ) ; } catch ( java.io.IOException VAR_3 ) { VAR_4 . error ( STRING_1 , VAR_3 ) ; } }",['Delete Literal'],1019
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; VAR_3 . METHOD_7 ( VAR_1 , this ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; },"['Delete TypeAccess', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation']",1021
"void METHOD_1 ( java.lang.String VAR_1 , java.lang.String to , java.lang.String date , java.lang.String time , java.lang.Boolean VAR_2 ) ;",void METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",1022
"public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . init ( STRING_1 , STRING_2 , STRING_3 , STRING_2 , STRING_4 , STRING_5 ) ; }",public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . init ( ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess']",1025
"TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) throws TYPE_2 ;",TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ;,"['Delete TypeReference', 'Delete Parameter']",1027
public synchronized void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ( ( ( ( ( ( STRING_1 + ( METHOD_3 ( ) ) ) + STRING_2 ) + STRING_3 ) + ( VAR_1 ) ) + STRING_4 ) + ( VAR_2 ) ) ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ( ( ( ( ( ( STRING_1 + ( METHOD_3 ( ) ) ) + STRING_2 ) + STRING_3 ) + ( VAR_1 ) ) + STRING_4 ) + ( VAR_2 ) ) ) ; },['Delete Wra'],1028
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; android.widget.Button VAR_6 = ( ( android.widget.Button ) ( VAR_4 . METHOD_3 ( VAR_7 ) ) ) ; return VAR_4 ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; android.widget.Button VAR_6 = ( ( android.widget.Button ) ( VAR_4 . METHOD_3 ( VAR_7 ) ) ) ; }","['Delete VariableRead', 'Delete Return']",1029
public static void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_1 ( VAR_1 ) ; },public static void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.System.out.println ( VAR_1 ) ; },"['Update Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete TypeAccess']",1030
"public void METHOD_1 ( final int VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( this , VAR_1 , VAR_4 ) ; VAR_5 . show ( ) ; }","private void METHOD_1 ( final int VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( this , VAR_1 , VAR_4 ) ; VAR_5 . show ( ) ; }",['Update Wra'],1031
"public void METHOD_1 ( TYPE_1 position , TYPE_2 context ) { }",public void METHOD_1 ( TYPE_1 position ) { },"['Delete TypeReference', 'Delete Parameter']",1033
public void METHOD_1 ( java.lang.Throwable VAR_1 ) { fail ( ) ; },public void METHOD_1 ( java.lang.Throwable VAR_1 ) { fail ( state ) ; },['Insert FieldRead'],1035
"public java.lang.String METHOD_1 ( int offset , int VAR_1 ) { java.util.List < TYPE_1 > list = VAR_2 . METHOD_1 ( offset , VAR_1 ) ; return VAR_3 . toString ( ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( int offset , int VAR_1 ) { java.util.List < TYPE_1 > list = VAR_2 . METHOD_1 ( offset , VAR_1 ) ; return list ; }","['Update TypeReference', 'Insert TypeReference', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1037
protected void METHOD_1 ( final java.io.File VAR_1 ) { this . VAR_1 = VAR_1 ; if ( ( VAR_2 ) != null ) { ( ( TYPE_1 ) ( VAR_2 ) ) . METHOD_2 ( this ) ; } },private void METHOD_1 ( final java.io.File VAR_1 ) { this . VAR_1 = VAR_1 ; if ( ( VAR_2 ) != null ) { ( ( TYPE_1 ) ( VAR_2 ) ) . METHOD_2 ( this ) ; } },['Update Wra'],1038
"public void METHOD_1 ( java.lang.Throwable t ) { TYPE_1 . METHOD_2 ( STRING_1 , t . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; }","public void METHOD_1 ( java.lang.Throwable t ) { TYPE_1 . METHOD_2 ( STRING_1 , t . METHOD_3 ( ) ) ; }","['Delete TypeAccess', 'Delete Invocation']",1039
public static boolean METHOD_1 ( java.util.Collection VAR_1 ) { return ( VAR_1 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ; },public static boolean METHOD_1 ( java.util.Collection VAR_1 ) { return ( VAR_1 != null ) || ( ! ( VAR_2 . isEmpty ( ) ) ) ; },['Update BinaryOperator'],1040
public java.lang.Integer METHOD_1 ( ) { return getInt ( METHOD_2 ( VAR_1 ) ) ; },public java.lang.String METHOD_1 ( ) { return getString ( METHOD_2 ( VAR_1 ) ) ; },"['Update TypeReference', 'Update Invocation']",1042
"public void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) > ( ( VAR_1 ) + INT_1 ) ) { METHOD_3 ( new TYPE_1 ( ) , TYPE_2 . METHOD_4 ( INT_2 ) ) ; } VAR_2 = METHOD_4 ( INT_3 ) ; }","public void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) > ( ( VAR_1 ) + INT_1 ) ) { METHOD_3 ( new TYPE_1 ( ) , TYPE_2 . METHOD_4 ( INT_2 ) ) ; } VAR_2 = METHOD_4 ( INT_2 ) ; }",['Update TypeAccess'],1043
"private synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( INT_1 , VAR_2 ) ; } }","private synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( INT_1 , 1 ) ; } }","['Insert Literal', 'Delete TypeAccess']",1044
public TYPE_1 [ ] METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; },public TYPE_1 [ ] METHOD_1 ( ) { return METHOD_1 ( 0 ) ; },"['Update Invocation', 'Move Invocation', 'Insert Literal', 'Delete TypeAccess', 'Delete Invocation']",1045
"TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) ;","TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 ) ;","['Delete TypeReference', 'Delete Parameter']",1046
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . remove ( VAR_3 . getValue ( VAR_4 class ) ) ; VAR_5 . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . remove ( VAR_3 . getValue ( VAR_4 class ) ) ; },"['Delete TypeAccess', 'Delete Invocation']",1047
public TYPE_1 METHOD_1 ( TYPE_2 file ) { VAR_1 = file ; return this ; },public TYPE_1 METHOD_1 ( java.io.File file ) { VAR_1 = file ; return this ; },['Update TypeReference'],1048
"public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( 1 , 1 ) ; label . METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( 1 , 0 ) ; label . METHOD_3 ( ) ; }",['Update Literal'],1049
protected void METHOD_1 ( TYPE_1 VAR_1 ) { return ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { return ; },['Update Wra'],1050
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . getText ( ) . length ( ) ) > INT_1 ) { METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . getText ( ) . length ( ) ) >= INT_1 ) { METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } },['Update BinaryOperator'],1051
"public java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) ;","public java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 , int VAR_2 ) ;","['Delete TypeReference', 'Delete Parameter']",1053
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . METHOD_2 ( ) . add ( VAR_1 . METHOD_3 ( ) ) ; },"public void METHOD_1 ( TYPE_1 VAR_1 ) { this . METHOD_2 ( ) . put ( ( ( this . METHOD_2 ( ) . size ( ) ) + 1 ) , VAR_1 . METHOD_3 ( ) ) ; }","['Update Invocation', 'Insert BinaryOperator', 'Insert Invocation', 'Insert Literal', 'Insert Invocation', 'Insert ThisAccess']",1054
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; },"private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 , false ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; }",['Insert Literal'],1055
protected void METHOD_1 ( java.lang.String result ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( result ) ; VAR_3 . execute ( VAR_1 ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } },protected void METHOD_1 ( java.lang.String result ) { try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( result ) ; VAR_3 . execute ( VAR_1 ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } },['Delete FieldRead'],1057
"public static TYPE_1 METHOD_1 ( int VAR_1 ) { return new TYPE_1 ( 0 , true , false , VAR_1 ) ; }","public static TYPE_1 METHOD_1 ( int VAR_1 ) { return new TYPE_1 ( 0 , false , VAR_1 ) ; }","['Update ConstructorCall', 'Delete Literal']",1058
"private void METHOD_1 ( final java.util.Set < TYPE_1 < ? , ? > > VAR_1 ) { METHOD_2 ( VAR_1 , false , true , true ) ; }","private void METHOD_1 ( final java.util.Set < TYPE_1 < ? , ? > > VAR_1 ) { METHOD_2 ( VAR_1 , false , true ) ; }",['Delete Literal'],1059
public void METHOD_1 ( android.view.View view ) { METHOD_2 ( 0 ) ; METHOD_3 ( ) ; },public void METHOD_1 ( android.view.View view ) { METHOD_2 ( 1 ) ; METHOD_3 ( ) ; },['Update Literal'],1060
"private boolean METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; int result = VAR_1 . METHOD_1 ( VAR_3 , VAR_4 , VAR_5 ) ; return result == ( VAR_6 ) ; }","public boolean METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; int result = VAR_1 . METHOD_1 ( VAR_3 , VAR_4 , VAR_5 ) ; return result == ( VAR_6 ) ; }",['Update Wra'],1061
protected float METHOD_1 ( ) { return VAR_1 [ ( ( VAR_2 ) + 1 ) ] ; },public float METHOD_1 ( ) { return VAR_1 [ ( ( VAR_2 ) + 1 ) ] ; },['Update Wra'],1062
"private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 , VAR_1 ) ; }",private void METHOD_1 ( ) { METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1063
public java.util.List < TYPE_1 > METHOD_1 ( final int VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },public java.util.List < TYPE_1 > METHOD_1 ( final java.lang.String VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },['Update TypeReference'],1064
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.ArrayList < TYPE_2 > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( METHOD_2 ( 1 ) ) ; return new TYPE_3 ( VAR_1 ) ; },public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.ArrayList < TYPE_2 > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( METHOD_2 ( ) ) ; return new TYPE_3 ( VAR_1 ) ; },['Delete Literal'],1065
"public void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1066
"public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 , TYPE_2 { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; TYPE_3 . METHOD_2 ( VAR_3 , VAR_1 , VAR_2 , true , true , true , STRING_3 , VAR_4 , STRING_4 , STRING_5 ) ; }","public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 , TYPE_2 { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; TYPE_3 . METHOD_2 ( VAR_3 , VAR_1 , VAR_2 , true , true , STRING_3 , VAR_4 , STRING_4 , STRING_5 ) ; }",['Delete Literal'],1067
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; METHOD_4 ( ) ; },public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; },['Delete Invocation'],1068
"TYPE_1 METHOD_1 ( java.lang.Long VAR_1 , java.lang.String [ ] VAR_2 , java.lang.String [ ] VAR_3 , boolean VAR_4 , boolean VAR_5 ) throws TYPE_2 , TYPE_3 { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , null , VAR_4 , true , VAR_5 ) ; }","TYPE_1 METHOD_1 ( java.lang.Long VAR_1 , java.lang.String [ ] VAR_2 , java.lang.String [ ] VAR_3 , boolean VAR_4 ) throws TYPE_2 , TYPE_3 { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , null , VAR_4 , true ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1070
"private TYPE_1 METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 , TYPE_1 writer ) { for ( java.lang.String obj : VAR_1 ) { writer . METHOD_2 ( obj ) ; } writer . METHOD_2 ( STRING_1 ) ; return writer ; }","private void METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 , TYPE_1 writer ) { for ( java.lang.String obj : VAR_1 ) { writer . METHOD_2 ( obj ) ; } writer . METHOD_2 ( STRING_1 ) ; }","['Update TypeReference', 'Delete VariableRead', 'Delete Return']",1071
public boolean isEmpty ( ) { return ( length ) == 0 ; },public boolean isEmpty ( ) { return false ; },"['Insert Literal', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1073
"public int METHOD_1 ( int x , int y ) { return x - y ; }","public int METHOD_1 ( int x , int y ) { return x + y ; }",['Update BinaryOperator'],1074
"public void METHOD_1 ( java.lang.String VAR_1 , long VAR_2 ) throws java.lang.Exception { VAR_3 . set ( VAR_2 ) ; VAR_4 . METHOD_2 ( ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , long VAR_2 ) throws java.lang.Exception { VAR_3 . set ( VAR_2 ) ; }","['Delete TypeAccess', 'Delete Invocation']",1075
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_1 ) ) { return new TYPE_1 ( 1 , STRING_2 ) ; } else { return new TYPE_1 ( 0 , STRING_3 ) ; } }",public int METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_1 ) ) { return 0 ; } else { return 1 ; } },"['Update TypeReference', 'Move Literal', 'Move Literal', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete FieldRead', 'Delete ConstructorCall']",1076
"private native int METHOD_1 ( long VAR_1 , long VAR_2 , float x , float y , int VAR_3 ) ;","private native int METHOD_1 ( long VAR_1 , long VAR_2 , float x , float y ) ;","['Delete TypeReference', 'Delete Parameter']",1078
public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( false ) ; },public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( true ) ; },['Update Literal'],1079
public java.lang.String toString ( ) { if ( ( VAR_1 ) == null ) { return STRING_1 ; } return METHOD_1 ( VAR_1 ) ; },public java.lang.String toString ( ) { return METHOD_1 ( VAR_1 ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1080
public void METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; VAR_1 . METHOD_2 ( null ) ; VAR_2 . remove ( VAR_1 ) ; assert ! ( VAR_2 . contains ( VAR_1 ) ) ; assert METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; VAR_2 . remove ( VAR_1 ) ; assert ! ( VAR_2 . contains ( VAR_1 ) ) ; assert METHOD_3 ( ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete Invocation']",1081
"public boolean METHOD_1 ( ) { return VAR_1 . equals ( this . VAR_2 , new byte [ 1 ] ) ? false : true ; }","public boolean METHOD_1 ( ) { return VAR_1 . equals ( this . VAR_2 , new byte [ 1 ] ) ? true : false ; }",['Move Literal'],1082
private int METHOD_1 ( ) { return position ; },public int METHOD_1 ( ) { return position ; },['Update Wra'],1084
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( VAR_2 , STRING_1 ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( VAR_2 , STRING_1 ) ; METHOD_3 ( intent ) ; }","['Delete TypeReference', 'Delete Parameter']",1085
public TYPE_1 get ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return null ; TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; return VAR_2 ; },public TYPE_1 get ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; return VAR_2 ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1086
"void METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) ;","void METHOD_1 ( int VAR_2 , TYPE_1 VAR_3 ) ;","['Delete TypeReference', 'Delete Parameter']",1087
protected boolean METHOD_1 ( java.lang.Boolean VAR_1 ) { return ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( ) ) ; },protected boolean METHOD_1 ( java.lang.Boolean VAR_1 ) { return ( VAR_1 != null ) && VAR_1 ; },"['Move VariableRead', 'Delete Invocation']",1089
protected int METHOD_1 ( ) { return 0 ; },protected int METHOD_1 ( ) { return 1 ; },['Update Literal'],1090
"public void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; ( VAR_3 ) ++ ; METHOD_2 ( VAR_3 , false , false ) ; }","public void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; ( VAR_3 ) ++ ; METHOD_2 ( VAR_3 , false ) ; }",['Delete Literal'],1091
private java.lang.String METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ) ) + STRING_1 ; },private java.lang.String METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( 0 ) ) + STRING_1 ; },['Insert Literal'],1092
"public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return null ; }",public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { return null ; },"['Delete TypeReference', 'Delete Parameter']",1093
"public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 , METHOD_3 ( ) ) ; }","public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( VAR_1 , METHOD_3 ( ) ) ; }",['Update Invocation'],1094
"public static boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return false ; }","public static java.lang.Object METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return null ; }","['Update TypeReference', 'Update Literal']",1097
"public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { VAR_3 = VAR_1 ; VAR_4 = true ; VAR_5 = VAR_3 ; VAR_6 = true ; VAR_7 = VAR_3 ; VAR_8 . METHOD_2 ( VAR_2 . METHOD_3 ( VAR_9 ) ) ; }","public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { VAR_3 = VAR_1 ; VAR_4 = true ; VAR_5 = VAR_3 ; VAR_6 = true ; VAR_7 = VAR_3 ; VAR_8 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; }",['Delete TypeAccess'],1098
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.ArrayList < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; VAR_3 = new TYPE_4 ( this , VAR_2 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.ArrayList < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; VAR_3 = new TYPE_4 ( VAR_2 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; },['Delete ThisAccess'],1099
"public static java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return ( java.lang.Double . METHOD_2 ( VAR_1 ) ) < ( java.lang.Double . METHOD_2 ( VAR_2 ) ) ? VAR_3 : VAR_4 ; }","private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return ( java.lang.Double . METHOD_2 ( VAR_1 ) ) < ( java.lang.Double . METHOD_2 ( VAR_2 ) ) ? VAR_3 : VAR_4 ; }","['Update Wra', 'Delete Wra']",1100
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; double VAR_3 = VAR_2 . METHOD_3 ( ) ; double VAR_4 = VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ( VAR_4 / VAR_3 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; double VAR_3 = VAR_2 . METHOD_3 ( ) ; double VAR_4 = VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ( VAR_3 / VAR_4 ) ) ; },['Move VariableRead'],1101
"public java.lang.String METHOD_1 ( ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) ; }","public java.lang.String METHOD_1 ( ) { return METHOD_2 ( METHOD_3 ( this . VAR_1 , this . VAR_2 , this . VAR_3 ) ) ; }","['Insert FieldRead', 'Insert FieldRead', 'Insert FieldRead', 'Insert ThisAccess', 'Insert ThisAccess', 'Insert ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess']",1103
public void METHOD_1 ( ) { if ( ( ( VAR_1 . size ( ) ) > 0 ) || ( ( VAR_2 . size ( ) ) > 0 ) ) { throw new TYPE_1 ( STRING_1 ) ; } },public void METHOD_1 ( ) { if ( ( ( VAR_1 . size ( ) ) != 0 ) && ( ( VAR_2 . size ( ) ) != 0 ) ) { throw new TYPE_1 ( STRING_1 ) ; } },"['Update BinaryOperator', 'Update BinaryOperator', 'Update BinaryOperator']",1104
"public static void METHOD_1 ( ) { java.lang.System.out.println ( TYPE_1 . METHOD_2 ( INT_1 , INT_2 ) ) ; }","public static void METHOD_1 ( ) { java.lang.System.out.println ( TYPE_1 . METHOD_2 ( INT_2 , INT_2 ) ) ; }",['Update TypeAccess'],1105
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { return new TYPE_1 ( TYPE_3 . METHOD_2 ( VAR_3 . getContext ( ) ) . METHOD_3 ( VAR_4 , VAR_1 , false ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { return null ; }","['Insert Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete ConstructorCall']",1107
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . buffer = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . buffer = buffer ; },"['Insert FieldRead', 'Delete VariableRead']",1108
public TYPE_1 METHOD_1 ( int VAR_1 ) { return VAR_2 ; },public TYPE_1 METHOD_1 ( int VAR_1 ) { return null ; },"['Insert Literal', 'Delete FieldRead']",1109
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; },['Update Wra'],1110
"public void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_2 , false ) ; } }","public void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_2 , true ) ; } }",['Update Literal'],1113
"public TYPE_1 METHOD_1 ( TYPE_2 key , TYPE_1 value ) { return METHOD_1 ( key , value , this . VAR_1 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 key , TYPE_1 value ) { return put ( key , value , this . VAR_1 ) ; }",['Update Invocation'],1115
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( INT_1 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; this . VAR_2 . METHOD_5 ( VAR_1 ) ; },public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( INT_1 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",1116
public static boolean contains ( java.lang.Object VAR_1 ) { synchronized ( VAR_2 . set ) { return VAR_3 . contains ( VAR_1 ) ; } },public static boolean contains ( java.lang.Object VAR_1 ) { synchronized ( VAR_1 ) { return VAR_3 . contains ( VAR_1 ) ; } },"['Insert VariableRead', 'Delete FieldRead']",1117
"public static TYPE_1 METHOD_1 ( java.lang.String id ) { response ( ) . METHOD_2 ( STRING_1 ) ; TYPE_2 response = VAR_1 . handle ( METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , id ) ; return METHOD_6 ( response ) ; }",public static TYPE_1 METHOD_1 ( ) { response ( ) . METHOD_2 ( STRING_1 ) ; TYPE_2 response = VAR_1 . handle ( METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; return METHOD_6 ( response ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1118
private boolean METHOD_1 ( ) { boolean VAR_1 = false ; if ( ( counter ) >= INT_1 ) { VAR_1 = true ; } return VAR_1 ; },private boolean METHOD_1 ( ) { boolean VAR_1 = false ; if ( ( counter ) <= INT_1 ) { VAR_1 = true ; } return VAR_1 ; },['Update BinaryOperator'],1119
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_3 . show ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( getActivity ( ) ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_3 . show ( ) ; },"['Insert Invocation', 'Delete FieldRead']",1120
public void delete ( ) { METHOD_1 ( true ) ; if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . delete ( ) ; } },public void delete ( ) { METHOD_1 ( ) ; if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . delete ( ) ; } },['Delete Literal'],1121
"public void METHOD_1 ( TYPE_1 result ) { VAR_1 . i ( VAR_2 , ( STRING_1 + ( result . METHOD_2 ( ) ) ) ) ; METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( METHOD_5 ( ) , STRING_2 , VAR_3 ) . show ( ) ; }","public void METHOD_1 ( TYPE_1 result ) { VAR_1 . i ( VAR_2 , ( STRING_1 + result ) ) ; METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( METHOD_5 ( ) , STRING_2 , VAR_3 ) . show ( ) ; }","['Move VariableRead', 'Delete Invocation']",1123
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 , int VAR_3 , int VAR_4 ) { return new TYPE_1 ( VAR_1 , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , ( VAR_4 + 1 ) ) , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 , int VAR_3 , int VAR_4 ) { return new TYPE_1 ( VAR_1 , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , VAR_4 ) , VAR_2 ) ; }","['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",1124
public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_1 = false ; VAR_2 . METHOD_1 ( ) ; METHOD_2 ( ) ; } },public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_1 = false ; VAR_2 . METHOD_1 ( ) ; } },['Delete Invocation'],1125
private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.NullPointerException { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.NullPointerException { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( getContext ( ) ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Update Wra', 'Update Invocation']",1127
public void METHOD_1 ( java.util.Collection < java.lang.String > VAR_1 ) { this . VAR_1 = new java.util.ArrayList < > ( VAR_1 ) ; METHOD_2 ( ) ; },public void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; METHOD_2 ( ) ; },"['Update TypeReference', 'Move VariableRead', 'Delete ConstructorCall']",1129
"public static void delete ( java.lang.String url , TYPE_1 VAR_1 ) { TYPE_2 . METHOD_1 ( ) ; TYPE_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; VAR_2 . delete ( url , new TYPE_3 ( VAR_1 ) ) ; }","private static void delete ( java.lang.String url , TYPE_1 VAR_1 ) { TYPE_2 . METHOD_1 ( ) ; TYPE_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; VAR_2 . delete ( url , new TYPE_3 ( VAR_1 ) ) ; }",['Update Wra'],1130
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) throws TYPE_3 { return METHOD_1 ( new TYPE_4 ( VAR_1 , VAR_2 ) , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) throws TYPE_3 { return METHOD_1 ( new TYPE_4 ( VAR_1 ) , VAR_2 ) ; }",['Delete VariableRead'],1131
public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { VAR_1 . METHOD_4 ( VAR_2 ) ; } } ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( ) ; },public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { VAR_1 . METHOD_4 ( VAR_2 ) ; } } ) ; VAR_1 . METHOD_5 ( ) ; },"['Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1133
"public void update ( int VAR_1 , TYPE_1 param , TYPE_1 VAR_2 ) { if ( VAR_2 != null ) { METHOD_1 ( VAR_2 , VAR_1 ) ; } METHOD_2 ( param , VAR_1 ) ; }","public void update ( int VAR_1 , TYPE_1 param , TYPE_1 VAR_2 ) { if ( VAR_2 != null ) { METHOD_1 ( VAR_2 , VAR_1 ) ; } METHOD_2 ( VAR_2 , VAR_1 ) ; }",['Update VariableRead'],1134
"public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; METHOD_3 ( new android.content.Intent ( VAR_3 . getContext ( ) , VAR_4 class ) ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( new android.content.Intent ( VAR_3 . getContext ( ) , VAR_4 class ) ) ; }","['Delete TypeAccess', 'Delete Invocation']",1135
"public void METHOD_1 ( TYPE_1 view , TYPE_2 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( new TYPE_3 ( ) ) ; TYPE_4 . METHOD_4 ( view . METHOD_5 ( ) , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 view , TYPE_2 VAR_1 ) { if ( VAR_1 == null ) return ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( new TYPE_3 ( ) ) ; METHOD_4 ( view . METHOD_5 ( ) , VAR_1 ) ; }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Update TypeAccess', 'Insert VariableRead', 'Insert Literal', 'Insert Return']",1136
"public void execute ( java.lang.String VAR_1 , java.util.List < java.lang.String > VAR_2 ) { execute ( VAR_1 , VAR_2 . METHOD_1 ( new java.lang.String [ VAR_3 . size ( ) ] ) ) ; }","public void execute ( java.lang.String VAR_1 , java.util.List < java.lang.String > VAR_2 ) { execute ( VAR_1 , VAR_2 . METHOD_1 ( new java.lang.String [ 0 ] ) ) ; }","['Insert Literal', 'Delete TypeAccess', 'Delete Invocation']",1137
"public int METHOD_1 ( final float x , final float y ) { int VAR_1 = METHOD_2 ( x ) ; int VAR_2 = METHOD_3 ( y ) ; return METHOD_1 ( VAR_1 , VAR_2 ) ; }","public int METHOD_1 ( final float x , final float y ) { int VAR_1 = METHOD_2 ( x ) ; int VAR_2 = METHOD_2 ( y ) ; return METHOD_1 ( VAR_1 , VAR_2 ) ; }",['Update Invocation'],1138
"public TYPE_1 < java.lang.Long > METHOD_1 ( java.lang.Long VAR_1 , java.lang.Long VAR_2 , java.lang.String VAR_3 , java.lang.Integer offset , java.lang.Integer VAR_4 ) { return new TYPE_1 < java.lang.Long > ( new java.util.ArrayList < java.lang.Long > ( ) , VAR_3 ) ; }","public TYPE_1 < java.lang.Long > METHOD_1 ( java.lang.Long VAR_1 , java.lang.Long VAR_2 , java.lang.String VAR_3 , java.lang.Integer offset , java.lang.Integer VAR_4 ) { return null ; }","['Insert Literal', 'Delete ConstructorCall', 'Delete VariableRead', 'Delete ConstructorCall']",1139
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return ; this . VAR_1 = VAR_1 ; this . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; this . METHOD_2 ( ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1140
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( true ) ; VAR_4 . METHOD_3 ( false ) ; VAR_5 . setText ( STRING_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( true ) ; VAR_4 . METHOD_3 ( false ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1141
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ( ( message + STRING_1 ) + ( VAR_2 ) ) ) ; } },public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( message ) ; } },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1142
"public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . assertEquals ( this . VAR_1 . METHOD_3 ( ) , STRING_2 ) ; VAR_2 . assertEquals ( this . VAR_1 . METHOD_4 ( ) , STRING_3 ) ; }","public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( STRING_1 ) ; assertEquals ( this . VAR_1 . METHOD_3 ( ) , STRING_2 ) ; assertEquals ( this . VAR_1 . METHOD_4 ( ) , STRING_3 ) ; }","['Update TypeAccess', 'Update TypeAccess']",1144
"public static synchronized void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 . METHOD_2 ( VAR_1 , null , VAR_2 ) ; }","public static synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 , null ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1145
"public void METHOD_1 ( ) { VAR_1 = VAR_2 ; TYPE_1 VAR_3 = new TYPE_2 ( false , INT_1 ) ; METHOD_2 ( VAR_3 , new TYPE_2 ( false , INT_1 ) ) ; }","public void METHOD_1 ( ) { VAR_1 = VAR_2 ; TYPE_1 VAR_3 = new TYPE_2 ( true , INT_1 ) ; METHOD_2 ( VAR_3 , new TYPE_2 ( true , INT_1 ) ) ; }","['Update Literal', 'Update Literal']",1146
public static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { },public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { },['Delete Wra'],1147
"private TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( new TYPE_2 ( VAR_1 ) , TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; }","private TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( new TYPE_2 ( VAR_1 ) , TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . getName ( ) ) ) ; }",['Update Invocation'],1148
protected int METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( INT_1 ) ) + INT_2 ; },public int METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( INT_1 ) ) + INT_2 ; },['Update Wra'],1149
"protected TYPE_1 METHOD_1 ( java.lang.String type , TYPE_1 [ ] VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { if ( VAR_3 . equals ( VAR_2 . METHOD_2 ( ) ) ) { return VAR_2 ; } } return null ; }","private TYPE_1 METHOD_1 ( java.lang.String type , TYPE_1 [ ] VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { if ( VAR_3 . equals ( VAR_2 . METHOD_2 ( ) ) ) { return VAR_2 ; } } return null ; }",['Update Wra'],1150
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 < TYPE_1 > node = TYPE_2 . METHOD_2 ( VAR_1 ) ; this . VAR_2 = node ; this . VAR_3 = node ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 node = TYPE_2 . METHOD_2 ( VAR_1 ) ; this . VAR_2 = node ; this . VAR_3 = node ; },['Delete TypeReference'],1151
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( VAR_2 ) ; } return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } return VAR_1 ; },['Delete FieldRead'],1152
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , TYPE_2 VAR_4 , TYPE_2 VAR_5 , java.lang.String VAR_6 ) { return METHOD_1 ( VAR_1 , new TYPE_3 ( ) , VAR_5 , VAR_4 , VAR_2 , VAR_3 , VAR_6 ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , TYPE_2 VAR_4 , TYPE_2 VAR_5 , java.lang.String VAR_6 ) { return METHOD_1 ( VAR_1 , new TYPE_3 ( ) , VAR_5 , VAR_4 , VAR_2 , 0 , VAR_6 ) ; }","['Insert Literal', 'Delete VariableRead']",1154
synchronized void f ( ) { },protected void f ( ) { },['Update Wra'],1156
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_2 , TYPE_3 { return VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_2 { return VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; }",['Delete TypeReference'],1157
public float METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 ; },public float METHOD_1 ( ) { return VAR_2 ; },"['Delete TypeReference', 'Delete Parameter']",1158
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) { return null ; } return METHOD_3 ( VAR_3 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; return METHOD_3 ( VAR_3 ) ; }","['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1159
public void to ( final int c ) { if ( c < 0 ) throw new TYPE_1 ( ) ; this . c = c ; },public void to ( final int i ) { if ( i < 0 ) throw new TYPE_1 ( ) ; this . c = i ; },"['Update Parameter', 'Update VariableRead', 'Update VariableRead']",1160
"public TYPE_1 < TYPE_2 > METHOD_1 ( int id , TYPE_3 args ) { switch ( id ) { case 1 : return new TYPE_4 ( this , VAR_1 , null , VAR_2 , null , VAR_3 ) ; case INT_1 : break ; } return null ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( int id , TYPE_3 args ) { switch ( id ) { case 1 : return new TYPE_4 ( this , VAR_1 , null , VAR_2 , null , null ) ; case INT_1 : break ; } return null ; }","['Insert Literal', 'Delete FieldRead']",1161
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( context ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; },['Delete FieldRead'],1162
"private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ; boolean VAR_2 = VAR_3 . getBoolean ( STRING_1 , true ) ; return VAR_2 ; }","private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( getActivity ( ) ) ; boolean VAR_2 = VAR_3 . getBoolean ( STRING_1 , true ) ; return VAR_2 ; }","['Update Invocation', 'Update TypeAccess']",1164
"public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = true ; this . VAR_3 = VAR_1 ; VAR_4 . set ( this . id , VAR_1 ) ; }","public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = true ; this . VAR_3 = VAR_1 ; VAR_4 . set ( this . id , false ) ; }","['Insert Literal', 'Delete VariableRead']",1165
"public static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { int VAR_3 = INT_1 ; boolean VAR_4 = false ; if ( ( ( VAR_1 + INT_2 ) * VAR_3 ) <= VAR_2 ) { VAR_4 = true ; } return VAR_4 ; }","private static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { int VAR_3 = INT_1 ; boolean VAR_4 = false ; if ( ( ( VAR_1 + INT_2 ) * VAR_3 ) <= VAR_2 ) { VAR_4 = true ; } return VAR_4 ; }",['Update Wra'],1166
"public void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.Long VAR_3 , java.lang.Long VAR_4 , java.lang.Long VAR_5 , java.lang.String key ) { synchronized ( this ) { METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; } }","public void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.Long VAR_3 , java.lang.Long VAR_4 , java.lang.Long VAR_5 , java.lang.String key ) { synchronized ( this ) { METHOD_2 ( VAR_3 , VAR_4 ) ; } }",['Delete VariableRead'],1167
public void METHOD_1 ( java.lang.Boolean result ) { assertNotNull ( result ) ; assertTrue ( result ) ; VAR_1 . METHOD_2 ( ) ; },"public void METHOD_1 ( java.lang.Boolean result ) { assertNotNull ( result ) ; assertEquals ( result , new java.lang.Boolean ( true ) ) ; assertTrue ( result ) ; VAR_1 . METHOD_2 ( ) ; }","['Insert Invocation', 'Insert VariableRead', 'Insert ConstructorCall', 'Insert Literal']",1168
"public int METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_2 <= 0 ) { return 1 ; } return VAR_1 * ( METHOD_1 ( VAR_1 , ( VAR_2 - 1 ) ) ) ; }","public int METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_2 <= 0 ) { return 1 ; } if ( VAR_2 == VAR_1 ) { return VAR_1 ; } return VAR_1 * ( METHOD_1 ( VAR_1 , ( VAR_2 - 1 ) ) ) ; }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert VariableRead', 'Insert Return', 'Insert VariableRead']",1171
"private static void METHOD_1 ( ) { if ( VAR_1 ) return ; VAR_1 = true ; VAR_2 . add ( new TYPE_1 ( new TYPE_2 ( STRING_1 ) , STRING_2 , STRING_3 , new TYPE_3 ( STRING_4 ) ) ) ; }","private static void METHOD_1 ( ) { if ( VAR_1 ) return ; VAR_1 = true ; VAR_2 . add ( new TYPE_1 ( new TYPE_2 ( STRING_1 ) , STRING_2 , STRING_3 ) ) ; }","['Delete FieldRead', 'Delete ConstructorCall']",1173
"public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 , TYPE_2 title ) { return new TYPE_1 ( id , VAR_1 , title ) ; }","public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 ) { return new TYPE_1 ( id , VAR_1 ) ; }","['Update ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1174
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { if ( ( VAR_3 . size ( ) ) > ( VAR_4 ) ) { VAR_2 . METHOD_2 ( ) ; } return VAR_2 . METHOD_1 ( VAR_1 ) ; } },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { if ( ( VAR_3 . size ( ) ) < ( VAR_4 ) ) { VAR_2 . METHOD_2 ( ) ; } return VAR_2 . METHOD_1 ( VAR_1 ) ; } },['Update BinaryOperator'],1175
public TYPE_1 METHOD_1 ( ) { if ( ( start ) == ( end ) ) { throw new TYPE_2 ( ) ; } TYPE_1 result = data [ end ] ; data [ end ] = null ; ( end ) -- ; return result ; },private TYPE_1 METHOD_1 ( ) { if ( ( start ) == ( end ) ) { throw new TYPE_2 ( ) ; } TYPE_1 result = data [ end ] ; data [ end ] = null ; ( end ) -- ; return result ; },['Update Wra'],1177
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = TYPE_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1178
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; if ( VAR_1 == null ) return null ; VAR_1 = METHOD_4 ( VAR_1 ) ; return METHOD_5 ( VAR_1 ) ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 = METHOD_4 ( VAR_1 ) ; return METHOD_5 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1179
"private java.lang.String METHOD_1 ( java.lang.String id , java.util.List < java.lang.String > VAR_1 ) { if ( id != null ) { for ( java.lang.String VAR_2 : VAR_1 ) { if ( id . METHOD_2 ( VAR_2 ) ) { return VAR_2 ; } } } return null ; }","private java.lang.String METHOD_1 ( java.lang.String id , java.util.List < java.lang.String > VAR_1 ) { if ( id != null ) { for ( java.lang.String VAR_2 : VAR_1 ) { if ( VAR_2 . METHOD_2 ( id ) ) { return VAR_2 ; } } } return null ; }",['Move VariableRead'],1181
"public void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 = new TYPE_3 ( VAR_3 , this , VAR_4 , VAR_5 ) ; }","public void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 = new TYPE_3 ( this , VAR_4 , VAR_5 ) ; }",['Delete FieldRead'],1182
"public void init ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; }",public void init ( ) { VAR_1 = new TYPE_1 ( VAR_2 ) ; },['Delete FieldRead'],1183
"TYPE_1 < TYPE_2 > METHOD_1 ( double VAR_1 , double VAR_2 ) ;",TYPE_1 < TYPE_2 > METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",1184
"java.lang.CharSequence METHOD_1 ( android.content.Context context , int type , java.lang.String VAR_1 , boolean VAR_2 ) ;","java.lang.CharSequence METHOD_1 ( android.content.Context context , int type , java.lang.String VAR_1 ) ;","['Delete TypeReference', 'Delete Parameter']",1186
public boolean update ( TYPE_1 VAR_1 ) { return false ; },public TYPE_1 update ( TYPE_1 VAR_1 ) { return null ; },"['Update TypeReference', 'Update Literal']",1187
"private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . getText ( ) , VAR_3 . getText ( ) ) ; METHOD_4 ( false , false ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . getText ( ) , VAR_3 . getText ( ) ) ; METHOD_4 ( false ) ; }",['Delete Literal'],1190
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; },"['Move VariableRead', 'Delete Invocation']",1191
public static void METHOD_1 ( java.util.ArrayList message ) { VAR_1 . info ( ( message != null ? VAR_2 . toString ( ) : STRING_1 ) ) ; },public static void METHOD_1 ( java.util.ArrayList message ) { VAR_1 . info ( ( message != null ? VAR_2 . toString ( ) : null ) ) ; },"['Insert Literal', 'Delete FieldRead']",1192
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_2 ( STRING_1 ) ; intent . METHOD_3 ( VAR_2 ) ; METHOD_4 ( intent , INT_1 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_2 ( STRING_1 ) ; intent . METHOD_3 ( VAR_2 ) ; METHOD_4 ( intent , 1 ) ; }","['Insert Literal', 'Delete TypeAccess']",1193
public TYPE_1 METHOD_1 ( int index ) { return VAR_1 . get ( index ) ; },public TYPE_1 METHOD_1 ( int index ) { return this . VAR_1 . get ( index ) ; },"['Insert FieldRead', 'Insert ThisAccess', 'Delete TypeAccess']",1194
"public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 + STRING_2 ; assertEquals ( new TYPE_1 ( VAR_1 , VAR_2 ) . METHOD_2 ( ) . first ( ) , new TYPE_2 ( INT_1 ) ) ; }","public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 + STRING_2 ; assertEquals ( new TYPE_1 ( VAR_1 ) . METHOD_2 ( ) . first ( ) , new TYPE_2 ( INT_1 ) ) ; }","['Update ConstructorCall', 'Delete FieldRead']",1195
public static java.lang.String [ ] METHOD_1 ( java.lang.String str ) { if ( ( str == null ) || ( VAR_1 . isEmpty ( ) ) ) return null ; java.lang.String [ ] VAR_2 = VAR_1 . split ( VAR_3 ) ; return VAR_2 ; },public static java.lang.String [ ] METHOD_1 ( java.lang.String str ) { java.lang.String [ ] VAR_2 = VAR_1 . split ( VAR_3 ) ; return VAR_2 ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1196
private void METHOD_1 ( TYPE_1 VAR_1 ) { this . start = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . start = VAR_1 ; },['Update Wra'],1198
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( false ) ; VAR_2 . METHOD_5 ( 1.0F ) ; TYPE_1 . METHOD_6 ( VAR_3 ) ; },public void METHOD_1 ( ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( false ) ; VAR_2 . METHOD_5 ( 1.0F ) ; METHOD_6 ( VAR_3 ) ; },"['Update TypeAccess', 'Update TypeAccess']",1199
private static void METHOD_1 ( ) { new TYPE_1 ( new TYPE_2 ( ) . METHOD_2 ( 0 ) . METHOD_3 ( 0 ) ) . METHOD_4 ( ) ; },private static void METHOD_1 ( ) { new TYPE_1 ( new TYPE_2 ( ) ) . METHOD_4 ( ) ; },"['Update Invocation', 'Move Invocation', 'Insert ConstructorCall', 'Move ConstructorCall', 'Delete Literal', 'Delete Literal', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Invocation']",1200
"public java.lang.String METHOD_1 ( ) { return METHOD_1 ( CHAR_1 , false ) ; }",public java.lang.String METHOD_1 ( ) { return METHOD_1 ( CHAR_1 ) ; },['Delete Literal'],1201
private static void METHOD_1 ( java.lang.String id ) { },public void METHOD_1 ( java.lang.String id ) { },"['Update Wra', 'Delete Wra']",1202
"public void METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] VAR_3 ) { try { VAR_4 . get ( VAR_1 ) . METHOD_1 ( VAR_2 , VAR_3 ) ; } catch ( java.io.IOException VAR_5 ) { VAR_5 . METHOD_2 ( ) ; } }","public void METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] VAR_3 ) { try { VAR_4 . get ( VAR_1 ) . METHOD_1 ( VAR_2 , VAR_3 , p ) ; } catch ( java.io.IOException VAR_5 ) { VAR_5 . METHOD_2 ( ) ; } }",['Insert FieldRead'],1203
public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . update ( true ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . update ( ) ; },['Delete Literal'],1204
private java.lang.String METHOD_1 ( final java.lang.Object VAR_1 ) { return VAR_1 instanceof java.lang.String ? VAR_2 . toString ( ) : null ; },private java.lang.String METHOD_1 ( final java.lang.Object VAR_1 ) { return VAR_1 instanceof java.lang.String ? ( ( java.lang.String ) ( VAR_1 ) ) : null ; },"['Insert VariableRead', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation']",1206
"public boolean METHOD_1 ( int x , int y ) { return this . VAR_1 [ x ] [ y ] ; }","public boolean METHOD_1 ( int i , int j ) { return this . VAR_1 [ i ] [ j ] ; }","['Update Parameter', 'Update Parameter', 'Update VariableRead', 'Update VariableRead']",1207
public TYPE_1 METHOD_1 ( java.lang.String value ) { return VAR_1 . isEmpty ( value ) ? null : new TYPE_1 ( value ) ; },public TYPE_1 METHOD_1 ( java.lang.String value ) { return value == null ? null : new TYPE_1 ( value ) ; },"['Insert BinaryOperator', 'Move VariableRead', 'Insert Literal', 'Delete TypeAccess', 'Delete Invocation']",1208
public static TYPE_1 METHOD_1 ( int n ) { TYPE_1 VAR_1 = VAR_2 ; for ( int i = n ; i > 1 ; i -- ) { VAR_1 = VAR_1 . METHOD_2 ( new TYPE_1 ( java.lang.Integer.toString ( i ) ) ) ; } return VAR_1 ; },private static TYPE_1 METHOD_1 ( int n ) { TYPE_1 VAR_1 = VAR_2 ; for ( int i = n ; i > 1 ; i -- ) { VAR_1 = VAR_1 . METHOD_2 ( new TYPE_1 ( java.lang.Integer.toString ( i ) ) ) ; } return VAR_1 ; },['Update Wra'],1210
"private TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( INT_1 , INT_1 , VAR_1 , null ) ; }","private TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( INT_1 , INT_1 , null , null ) ; }","['Insert Literal', 'Delete FieldRead']",1211
"protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { switch ( VAR_1 ) { case VAR_3 : if ( VAR_2 == ( VAR_4 ) ) { METHOD_2 ( data ) ; } break ; default : break ; } }","protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { switch ( VAR_1 ) { case VAR_3 : if ( VAR_2 == ( VAR_4 ) ) { METHOD_2 ( data , true ) ; } break ; default : break ; } }",['Insert Literal'],1212
public void METHOD_1 ( ) { VAR_1 = new java.util.HashMap < > ( ) ; VAR_2 = VAR_3 ; },public void METHOD_1 ( ) { VAR_1 = new java.util.Vector < java.lang.Integer > ( ) ; VAR_2 = VAR_3 ; },['Update ConstructorCall'],1213
"private synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 . toString ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } }","protected synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 . toString ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } }",['Update Wra'],1214
protected TYPE_1 METHOD_1 ( int index ) { return null ; },protected TYPE_1 METHOD_1 ( int index ) { return ; },['Delete Literal'],1215
"private boolean METHOD_1 ( ) { try ( TYPE_1 VAR_1 = new TYPE_1 ( ) ) { VAR_1 . METHOD_2 ( new TYPE_2 ( VAR_2 , java.lang.Integer.parseInt ( VAR_3 ) ) , INT_1 ) ; return true ; } catch ( java.io.IOException VAR_4 ) { return false ; } }","public boolean METHOD_1 ( ) { try ( TYPE_1 VAR_1 = new TYPE_1 ( ) ) { VAR_1 . METHOD_2 ( new TYPE_2 ( VAR_2 , java.lang.Integer.parseInt ( VAR_3 ) ) , INT_1 ) ; return true ; } catch ( java.io.IOException VAR_4 ) { return false ; } }",['Update Wra'],1216
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( new TYPE_4 ( new TYPE_5 ( ) ) , new TYPE_6 ( ) ) ; return new TYPE_1 ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( new TYPE_4 ( ) , new TYPE_6 ( ) ) ; return new TYPE_1 ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; }",['Delete ConstructorCall'],1217
public TYPE_1 METHOD_1 ( ) { return ; },public TYPE_1 METHOD_1 ( ) { return null ; },['Insert Literal'],1218
protected boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { return ( VAR_2 . size ( ) ) < ( VAR_3 . length ) ; },protected boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { return ( VAR_2 . size ( ) ) <= ( VAR_3 . length ) ; },['Update BinaryOperator'],1219
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( java.lang.Thread : : METHOD_3 ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( java.lang.Thread : : METHOD_3 ) ; },['Update Wra'],1221
"private static void METHOD_1 ( long VAR_1 , long source , int VAR_2 , float VAR_3 ) { }","private static native void METHOD_1 ( long VAR_1 , long source , int VAR_2 , float VAR_3 ) ;",['Insert Wra'],1222
"public static void main ( java.lang.String [ ] args ) { TYPE_1 params = new TYPE_1 ( args , VAR_1 , STRING_1 ) ; VAR_2 = VAR_1 ; new TYPE_2 ( params ) ; }",public static void main ( java.lang.String [ ] args ) { TYPE_1 params = new TYPE_1 ( args ) ; VAR_2 = VAR_1 ; new TYPE_2 ( params ) ; },"['Update ConstructorCall', 'Delete FieldRead', 'Delete FieldRead']",1223
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( VAR_2 . METHOD_3 ( VAR_1 ) ) ; },public static TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1224
private boolean METHOD_1 ( ) { return false ; },private boolean METHOD_1 ( ) { return true ; },['Update Literal'],1225
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( null ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",1226
private void METHOD_1 ( ) { if ( ( count ) <= 0 ) { status = VAR_1 ; } else { status = VAR_2 ; } },private void METHOD_1 ( ) { if ( ( count ) == 0 ) { status = VAR_1 ; } else { status = VAR_2 ; } },['Update BinaryOperator'],1227
public boolean METHOD_1 ( float VAR_1 ) { try { VAR_2 . METHOD_2 ( VAR_1 ) ; } catch ( java.io.IOException VAR_3 ) { VAR_4 . METHOD_3 ( VAR_3 ) ; return false ; } return true ; },public boolean METHOD_1 ( float value ) { try { VAR_2 . METHOD_2 ( value ) ; } catch ( java.io.IOException VAR_3 ) { VAR_4 . METHOD_3 ( VAR_3 ) ; return false ; } return true ; },"['Update Parameter', 'Update VariableRead']",1228
protected java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },['Update Wra'],1229
"public void METHOD_1 ( boolean VAR_1 ) { METHOD_2 ( VAR_1 , true , null , false ) ; }","public void METHOD_1 ( boolean VAR_1 ) { METHOD_2 ( VAR_1 , true , null ) ; }",['Delete Literal'],1230
"static long METHOD_1 ( int VAR_1 , int n ) { long start ; long end ; start = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_1 , n ) ; end = TYPE_1 . METHOD_2 ( ) ; return end - start ; }","public static long METHOD_1 ( long VAR_1 , long n ) { long start ; long end ; start = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_1 , n ) ; end = TYPE_1 . METHOD_2 ( ) ; return end - start ; }","['Insert Wra', 'Update TypeReference', 'Update TypeReference']",1231
"public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return VAR_2 ; } int [ ] result = new int [ ] { VAR_2 } ; METHOD_2 ( VAR_1 , result ) ; return result [ 0 ] ; }","public int METHOD_1 ( TYPE_1 VAR_1 ) { int [ ] result = new int [ ] { 0 } ; METHOD_2 ( VAR_1 , 0 , result ) ; return result [ 0 ] ; }","['Insert Literal', 'Insert Literal', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete FieldRead']",1232
"public void METHOD_1 ( java.lang.String VAR_1 , java.util.ArrayList < java.lang.Long > VAR_2 , java.util.ArrayList < java.lang.Long > VAR_3 ) { METHOD_2 ( VAR_4 , VAR_1 , VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( java.lang.Long VAR_1 , java.util.ArrayList < java.lang.Long > VAR_2 , java.util.ArrayList < java.lang.Long > VAR_3 ) { METHOD_2 ( VAR_4 , VAR_1 , VAR_2 , VAR_3 ) ; }",['Update TypeReference'],1233
private void METHOD_1 ( ) { for ( java.util.List < TYPE_1 > VAR_1 : VAR_2 . values ( ) ) { for ( TYPE_1 p : VAR_1 ) { p . METHOD_2 ( false ) ; p . METHOD_3 ( false ) ; } } VAR_3 = false ; },private void METHOD_1 ( ) { for ( java.util.List < TYPE_1 > VAR_1 : VAR_2 . values ( ) ) { for ( TYPE_1 p : VAR_1 ) { p . METHOD_2 ( false ) ; } } VAR_3 = false ; },"['Delete VariableRead', 'Delete Literal', 'Delete Invocation']",1234
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == VAR_1 ) return null ; TYPE_1 VAR_3 = VAR_2 ; VAR_2 = VAR_1 ; if ( VAR_1 != null ) METHOD_2 ( ) ; return VAR_3 ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == VAR_1 ) return null ; TYPE_1 VAR_3 = VAR_2 ; VAR_2 = VAR_1 ; if ( VAR_1 != null ) this . METHOD_2 ( ) ; return VAR_3 ; },['Insert ThisAccess'],1235
public boolean METHOD_1 ( TYPE_1 temp ) { VAR_1 . add ( temp ) ; return true ; },public boolean METHOD_1 ( TYPE_1 temp ) { if ( false ) { return false ; } VAR_1 . add ( temp ) ; return true ; },"['Insert If', 'Insert Literal', 'Insert Block', 'Insert Return', 'Insert Literal']",1236
protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_4 ( ) ) ; TYPE_3 . METHOD_2 ( TYPE_2 . METHOD_5 ( ) . getText ( ) ) ; METHOD_6 ( ) ; },protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_4 ( ) ) ; TYPE_3 . METHOD_2 ( TYPE_2 . METHOD_5 ( ) . getText ( ) ) ; METHOD_6 ( ) ; },"['Delete TypeReference', 'Delete Parameter']",1237
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 , new TYPE_2 ( ) ) ; return VAR_1 ; }",public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; return VAR_1 ; },"['Delete VariableRead', 'Delete TypeAccess', 'Delete ConstructorCall', 'Delete Invocation']",1238
private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . title = VAR_4 . getString ( VAR_5 ) ; VAR_6 = VAR_4 . getString ( VAR_7 ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . title = VAR_4 . getString ( VAR_5 ) ; VAR_6 = VAR_4 . getString ( VAR_7 ) ; },['Update Wra'],1239
protected boolean METHOD_1 ( java.lang.Object VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; boolean VAR_2 = index != ( - 1 ) ; if ( VAR_2 ) { METHOD_1 ( index ) ; } return VAR_2 ; },protected boolean METHOD_1 ( java.lang.Object VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; boolean VAR_2 = index != ( - 1 ) ; if ( VAR_2 ) { remove ( index ) ; } return VAR_2 ; },['Update Invocation'],1240
"public int METHOD_1 ( java.lang.Integer a , java.lang.Integer b ) { return a - b ; }","public int METHOD_1 ( java.lang.Integer a , java.lang.Integer b ) { return b - a ; }",['Move VariableRead'],1241
"public void METHOD_1 ( ) throws TYPE_1 { long VAR_1 = VAR_2 . METHOD_2 ( ) ; this . VAR_2 = VAR_3 . METHOD_3 ( VAR_4 , VAR_1 , this . VAR_5 ) ; this . VAR_6 = 0 ; }","private void METHOD_1 ( ) throws TYPE_1 { long VAR_1 = VAR_2 . METHOD_2 ( ) ; this . VAR_2 = VAR_3 . METHOD_3 ( VAR_4 , VAR_1 , this . VAR_5 ) ; this . VAR_6 = 0 ; }",['Update Wra'],1242
"public TYPE_1 < TYPE_2 , TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { final TYPE_4 t = VAR_2 . METHOD_2 ( VAR_1 ) ; return TYPE_1 . METHOD_3 ( METHOD_4 ( t ) , new TYPE_5 ( 0 ) ) ; }","public TYPE_1 < TYPE_2 , TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { final TYPE_4 t = VAR_2 . METHOD_2 ( VAR_1 ) ; return TYPE_1 . METHOD_3 ( METHOD_4 ( t ) , null ) ; }","['Insert Literal', 'Delete Literal', 'Delete ConstructorCall']",1243
public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_2 . toUpperCase ( ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1244
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { final TYPE_3 VAR_2 = this . VAR_3 . METHOD_2 ( VAR_1 ) ; this . VAR_4 . METHOD_3 ( VAR_2 ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { final TYPE_3 VAR_2 = this . VAR_3 . METHOD_2 ( VAR_1 ) ; this . VAR_4 . METHOD_1 ( VAR_2 ) ; return VAR_1 ; },['Update Invocation'],1245
protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getText ( ) ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getText ( ) ) ; },['Update Wra'],1247
public java.lang.Object METHOD_1 ( TYPE_1 node ) { super . METHOD_1 ( node ) ; METHOD_2 ( node ) ; return false ; },public java.lang.Object METHOD_1 ( TYPE_1 node ) { super . METHOD_1 ( node ) ; METHOD_2 ( node ) ; return null ; },['Update Literal'],1248
"public TYPE_1 update ( TYPE_1 VAR_1 ) { init ( ) ; VAR_2 = VAR_3 . METHOD_1 ( true ) ; VAR_4 . update ( ( ( VAR_5 ) + STRING_1 ) , VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; return VAR_1 ; }","public TYPE_1 update ( TYPE_1 VAR_1 ) { init ( ) ; VAR_2 = VAR_3 . METHOD_1 ( ) ; VAR_4 . update ( ( ( VAR_5 ) + STRING_1 ) , VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; return VAR_1 ; }",['Delete Literal'],1249
"public void METHOD_1 ( java.util.Map < java.lang.Object , java.lang.Object > VAR_1 , TYPE_1 VAR_2 ) { if ( ( this . VAR_2 ) != null ) { VAR_3 . METHOD_2 ( VAR_4 ) ; } TYPE_2 . METHOD_3 ( VAR_5 , STRING_1 , this . VAR_2 ) ; }","public void METHOD_1 ( java.util.Map < java.lang.Object , java.lang.Object > VAR_1 , TYPE_1 VAR_2 ) { if ( ( this . VAR_2 ) == null ) { VAR_3 . METHOD_2 ( VAR_4 ) ; } TYPE_2 . METHOD_3 ( VAR_5 , STRING_1 , this . VAR_2 ) ; }",['Update BinaryOperator'],1250
protected void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) VAR_3 . add ( VAR_2 . get ( i ) ) ; },protected void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) VAR_3 . add ( VAR_2 . get ( i ) ) ; },"['Delete VariableRead', 'Delete Invocation']",1251
"private void METHOD_1 ( boolean commit , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 ... VAR_3 ) throws TYPE_4 { VAR_2 . METHOD_2 ( ) ; METHOD_1 ( commit , VAR_1 , VAR_3 ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 ... VAR_3 ) throws TYPE_4 { VAR_2 . METHOD_2 ( ) ; METHOD_1 ( VAR_1 , VAR_3 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1252
public java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 ) ;,public java.util.List < TYPE_1 > METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",1253
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; VAR_2 . assertTrue ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; assertTrue ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; },"['Update TypeAccess', 'Update TypeAccess']",1254
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; if ( VAR_2 == null ) throw new TYPE_3 ( ) ; return VAR_2 ; },public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) . METHOD_3 ( ) ; if ( VAR_2 == null ) throw new TYPE_3 ( ) ; return VAR_2 ; },['Update Invocation'],1255
public boolean equals ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_1 ( ) ) == ( this . METHOD_1 ( ) ) ) { return true ; } else { return false ; } },public boolean equals ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_1 ( ) ) == ( METHOD_1 ( ) ) ) { return true ; } else { return false ; } },['Delete ThisAccess'],1256
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 ) { return METHOD_2 ( VAR_1 , ( STRING_1 + ( TYPE_4 . METHOD_3 ( ) ) ) , VAR_2 , VAR_3 , VAR_5 , VAR_6 , VAR_4 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_3 VAR_5 ) { return METHOD_2 ( VAR_1 , ( STRING_1 + ( TYPE_4 . METHOD_3 ( ) ) ) , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1257
"private static boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 ) { return ( VAR_2 . METHOD_2 ( ) . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) . getId ( ) ) ) && ( VAR_3 . METHOD_3 ( VAR_4 ) ) ; }","private static boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 ) { return ( VAR_2 . METHOD_2 ( ) . getId ( ) . equals ( VAR_2 . METHOD_2 ( ) . getId ( ) ) ) && ( VAR_3 . METHOD_3 ( VAR_4 ) ) ; }",['Update VariableRead'],1260
public static TYPE_1 METHOD_1 ( TYPE_1 type ) { return TYPE_1 . METHOD_2 ( VAR_1 . name ( ) ) ; },public static TYPE_1 METHOD_1 ( TYPE_1 type ) { return TYPE_1 . METHOD_2 ( VAR_1 . toString ( ) ) ; },['Update Invocation'],1261
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String to , java.lang.String VAR_2 , java.lang.String status ) ;","public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String to , java.lang.String VAR_2 ) ;","['Delete TypeReference', 'Delete Parameter']",1263
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 response ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; }",public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Parameter']",1264
"TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String id ) ;",TYPE_1 METHOD_1 ( java.lang.String id ) ;,"['Delete TypeReference', 'Delete Parameter']",1265
"java.util.Map < java.lang.Integer , TYPE_1 > METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 , java.lang.Integer VAR_2 ) throws java.lang.Exception ;","java.util.Map < java.lang.Integer , TYPE_1 > METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 ) throws java.lang.Exception ;","['Delete TypeReference', 'Delete Parameter']",1266
public abstract void METHOD_1 ( final TYPE_1 p ) ;,protected abstract void METHOD_1 ( final TYPE_1 p ) ;,['Update Wra'],1267
public boolean METHOD_1 ( java.lang.String str ) { return true ; },public boolean METHOD_1 ( java.lang.String str ) { return false ; },['Update Literal'],1268
"public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 array , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { return METHOD_2 ( VAR_1 , TYPE_5 . METHOD_3 ( ( ( double [ ] ) ( TYPE_6 . METHOD_4 ( array ) ) ) ) , array , VAR_2 ) ; }","public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 array , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { return METHOD_2 ( VAR_1 , TYPE_5 . METHOD_3 ( ( ( double [ ] ) ( TYPE_6 . METHOD_4 ( array ) ) ) ) , VAR_2 ) ; }",['Delete VariableRead'],1269
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) throw new java.lang.NullPointerException ( STRING_1 ) ; VAR_2 . add ( new TYPE_1 ( VAR_1 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) throw new java.lang.NullPointerException ( STRING_1 ) ; VAR_2 . add ( VAR_1 ) ; },"['Move VariableRead', 'Delete ConstructorCall']",1270
"public void METHOD_1 ( final TYPE_1 event ) { METHOD_2 ( event . METHOD_3 ( ) , event . METHOD_3 ( ) . METHOD_4 ( ) ) ; }",public void METHOD_1 ( final TYPE_1 event ) { METHOD_2 ( event . METHOD_3 ( ) ) ; },"['Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",1271
public void METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( VAR_1 == ( VAR_2 ) ) { METHOD_1 ( ) ; } else if ( VAR_1 == ( VAR_3 ) ) { METHOD_2 ( ) ; } else { throw new TYPE_1 ( STRING_1 ) ; } },public void METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( VAR_1 == ( VAR_2 ) ) { METHOD_1 ( ) ; } else if ( VAR_1 == ( VAR_3 ) ) { METHOD_2 ( ) ; } else { throw new java.io.IOException ( STRING_1 ) ; } },['Update ConstructorCall'],1272
"protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { if ( VAR_1 != ( VAR_3 ) ) return ; METHOD_2 ( ) ; METHOD_3 ( ) ; }","protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { if ( VAR_1 != 0 ) return ; METHOD_2 ( ) ; METHOD_3 ( ) ; }","['Insert Literal', 'Delete FieldRead']",1274
"public void METHOD_1 ( java.lang.String name ) { VAR_1 . add ( VAR_1 . size ( ) , new TYPE_1 ( name , false ) ) ; }","public void METHOD_1 ( java.lang.String name ) { VAR_1 . add ( VAR_1 . size ( ) , new TYPE_1 ( false , true , name ) ) ; }","['Update ConstructorCall', 'Move VariableRead', 'Insert Literal']",1276
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . init ( ) ; VAR_1 . METHOD_1 ( ) . METHOD_2 ( new TYPE_2 ( ) ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . init ( ) ; },"['Delete VariableRead', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Invocation']",1277
"public void METHOD_1 ( int start , int end , TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { METHOD_1 ( start , end , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","public void METHOD_1 ( int start , int end , TYPE_1 VAR_1 , int VAR_2 ) { METHOD_1 ( start , end , VAR_1 , VAR_2 , VAR_4 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1278
public double METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { return 0.0 ; } return ( VAR_2 ) / ( VAR_3 ) ; },public double METHOD_1 ( ) { return ( VAR_2 ) / ( VAR_3 ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1280
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.Integer i ) { this . VAR_2 . put ( VAR_1 , i ) ; return this ; }",public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_2 . add ( VAR_1 ) ; return this ; },"['Update Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1281
"public TYPE_1 METHOD_1 ( android.content.Context context , long id ) { return new TYPE_2 ( context ) . METHOD_1 ( id ) ; }","public TYPE_1 METHOD_1 ( android.content.Context context , long id ) { return new TYPE_2 ( context ) . METHOD_1 ( ( ( int ) ( id ) ) ) ; }",['Insert TypeReference'],1283
"public TYPE_1 replace ( long VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { VAR_4 . METHOD_1 ( ) ; return new TYPE_2 ( VAR_4 . METHOD_2 ( ) , VAR_5 , VAR_6 , VAR_7 , VAR_1 , VAR_2 , value , VAR_3 ) ; }","public TYPE_1 replace ( int VAR_5 , int VAR_6 ) { VAR_4 . METHOD_1 ( ) ; return new TYPE_2 ( VAR_4 . METHOD_2 ( ) , VAR_5 , VAR_6 , VAR_7 , VAR_1 , VAR_2 , value , VAR_3 ) ; }","['Update Parameter', 'Update Parameter', 'Update TypeReference', 'Update TypeReference', 'Move FieldRead', 'Insert VariableRead', 'Insert VariableRead', 'Update FieldRead', 'Update FieldRead', 'Insert FieldRead', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",1284
"public static void METHOD_1 ( java.lang.String ... VAR_1 ) { for ( java.lang.String VAR_2 : VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , null ) ; } }","public static void METHOD_1 ( java.lang.String ... VAR_1 ) { for ( java.lang.String VAR_2 : VAR_1 ) { TYPE_1 . METHOD_1 ( VAR_2 , null ) ; } }",['Update Invocation'],1285
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 target , TYPE_2 event ) { if ( target instanceof TYPE_3 ) { METHOD_2 ( VAR_1 , ( ( TYPE_3 ) ( target ) ) , event ) ; } else { METHOD_3 ( VAR_1 , event ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 target , TYPE_2 event ) { if ( target instanceof TYPE_3 ) { METHOD_2 ( VAR_1 , ( ( TYPE_3 ) ( target ) ) ) ; } else { METHOD_3 ( VAR_1 , event ) ; } }",['Delete VariableRead'],1286
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = this . VAR_3 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_4 , VAR_2 ) ; TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 , STRING_1 ) ; return STRING_2 ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = this . VAR_3 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_4 , VAR_2 ) ; TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 ) ; return STRING_2 ; }",['Delete TypeAccess'],1287
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 , true ) ; java.lang.String VAR_3 = TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; return VAR_3 ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; return VAR_3 ; }",['Delete Literal'],1288
"protected static native boolean METHOD_1 ( long handle , boolean VAR_1 , boolean VAR_2 ) ;","protected static native boolean METHOD_1 ( long handle , boolean VAR_1 ) ;","['Delete TypeReference', 'Delete Parameter']",1289
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = ( VAR_1 . METHOD_2 ( STRING_1 ) ) + INT_1 ; return VAR_3 . substring ( VAR_2 ) ; },"public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = ( VAR_1 . METHOD_2 ( STRING_1 ) ) + INT_1 ; return VAR_3 . substring ( VAR_2 , ( ( VAR_3 . length ( ) ) - VAR_2 ) ) ; }","['Insert BinaryOperator', 'Insert Invocation', 'Insert VariableRead', 'Insert TypeAccess']",1290
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) - 1 ) >= 0 ) { ( this . VAR_1 ) -- ; METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( ) { if ( ( ( VAR_1 ) - 1 ) > 0 ) { ( this . VAR_1 ) -- ; METHOD_2 ( VAR_1 ) ; } },['Update BinaryOperator'],1292
public TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 VAR_1 ) { return execute ( new TYPE_3 ( VAR_1 ) ) ; },public TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 VAR_1 ) { return execute ( new TYPE_3 ( ) ) ; },['Delete VariableRead'],1293
"protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; return new TYPE_1 ( new TYPE_3 ( ) , VAR_1 ) ; }",protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; return new TYPE_1 ( ) ; },"['Delete ConstructorCall', 'Delete VariableRead']",1294
"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { VAR_2 . METHOD_2 ( ( position + 1 ) ) ; }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { VAR_2 . METHOD_2 ( position ) ; }","['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",1295
public void METHOD_1 ( final long VAR_1 ) { this . VAR_2 . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( final long VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",1296
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.StringBuilder VAR_5 ) throws TYPE_2 { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , null , VAR_5 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) throws TYPE_2 { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , null ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1298
"public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { java.lang.String VAR_3 = ( ( java.lang.String ) ( VAR_2 ) ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { java.lang.String VAR_3 = ( ( java.lang.String ) ( VAR_2 ) ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; return false ; }",['Update Literal'],1299
"public static final void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { if ( ( VAR_2 != null ) && ( ! ( VAR_2 instanceof TYPE_3 ) ) ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }","protected static final void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { if ( ( VAR_2 != null ) && ( ! ( VAR_2 instanceof TYPE_3 ) ) ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }",['Update Wra'],1300
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( null ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( data ) ; },"['Insert FieldRead', 'Delete Literal']",1301
public static boolean METHOD_1 ( java.lang.String name ) { return name . METHOD_2 ( STRING_1 ) ; },private static boolean METHOD_1 ( java.lang.String name ) { return name . METHOD_2 ( STRING_1 ) ; },['Update Wra'],1302
public static int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return 0 ; TYPE_2 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; },public static int METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; return VAR_2 ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1303
"public double METHOD_1 ( double VAR_1 , double VAR_2 ) { return VAR_1 * VAR_2 ; }","public double METHOD_1 ( double a , double b ) { return a * b ; }","['Update Parameter', 'Update Parameter', 'Update VariableRead', 'Update VariableRead']",1304
"private void METHOD_1 ( int x , int y ) { int VAR_1 = 0 ; while ( VAR_1 < ( y - 1 ) ) { METHOD_2 ( VAR_1 , x ) ; VAR_1 ++ ; } }","private void METHOD_1 ( int x , int y ) { int VAR_1 = 0 ; while ( VAR_1 < y ) { METHOD_2 ( VAR_1 , x ) ; VAR_1 ++ ; } }","['Update BinaryOperator', 'Move BinaryOperator', 'Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",1305
"public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; METHOD_2 ( VAR_1 , STRING_5 ) ; }","public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; METHOD_2 ( VAR_1 , STRING_5 , true ) ; }",['Insert Literal'],1306
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 , this , STRING_1 ) ; VAR_2 . METHOD_2 ( STRING_2 ) ; VAR_2 . METHOD_3 ( TYPE_4 . METHOD_4 ( ) ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 , this , STRING_1 ) ; VAR_2 . METHOD_2 ( STRING_2 ) ; return VAR_2 ; }","['Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1307
"public static double METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 , double VAR_3 ) { return TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public static double METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 ) { return TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1308
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( this ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; VAR_1 . METHOD_3 ( this ) ; },['Delete TypeAccess'],1310
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) { if ( VAR_3 ) { METHOD_2 ( ) ; } else { METHOD_3 ( false ) ; } } },public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) { if ( VAR_3 ) { METHOD_2 ( ) ; } else { METHOD_3 ( ) ; } } },['Delete Literal'],1311
public static < TYPE_1 > void METHOD_1 ( TYPE_1 t ) { if ( null == t ) return ; TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . delete ( ) . METHOD_4 ( t ) ; },public static < TYPE_1 > void METHOD_1 ( TYPE_1 t ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . delete ( ) . METHOD_4 ( t ) ; },"['Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1312
public static void main ( java.lang.String [ ] args ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_1 ( ) ; for ( int i = 0 ; i < INT_1 ; ++ i ) { VAR_1 . METHOD_2 ( ) ; } },public static void main ( java.lang.String [ ] args ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_1 ( ) ; for ( int i = 0 ; i < 1 ; ++ i ) { VAR_1 . METHOD_2 ( ) ; } },"['Insert Literal', 'Delete FieldRead']",1313
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 = TYPE_2 . METHOD_4 ( ) ; METHOD_5 ( VAR_6 , VAR_5 , STRING_1 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 = TYPE_2 . METHOD_4 ( ) ; METHOD_5 ( VAR_6 , VAR_5 ) ; }",['Delete TypeAccess'],1314
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.NullPointerException { return new TYPE_3 ( this ) ; },"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.NullPointerException { return new TYPE_3 ( this , VAR_1 ) ; }","['Update ConstructorCall', 'Insert VariableRead']",1315
public static void main ( java.lang.String [ ] args ) { TYPE_1 t = new TYPE_1 ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( null ) ; VAR_1 . METHOD_1 ( true ) ; t . METHOD_2 ( VAR_1 ) ; t . METHOD_1 ( true ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 t = new TYPE_1 ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_1 ( true ) ; t . METHOD_2 ( VAR_1 ) ; t . METHOD_1 ( true ) ; },"['Update ConstructorCall', 'Delete Literal']",1316
"public void METHOD_1 ( TYPE_1 VAR_1 , final TYPE_2 VAR_2 , final TYPE_2 VAR_3 , final TYPE_2 VAR_4 , TYPE_3 VAR_5 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , null , VAR_5 , false ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , final TYPE_2 VAR_2 , final TYPE_2 VAR_3 , final TYPE_2 VAR_4 , TYPE_3 VAR_5 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , null , VAR_5 ) ; }",['Delete Literal'],1317
"void METHOD_1 ( java.lang.Throwable VAR_1 , java.lang.String message ) ;","void METHOD_1 ( java.lang.Throwable t , java.lang.String message , java.lang.Object ... args ) ;","['Update Parameter', 'Insert Parameter']",1318
"public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . assertEquals ( true , TYPE_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . assertEquals ( true , METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) ; }",['Update TypeAccess'],1319
public void METHOD_1 ( ) { METHOD_1 ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; },private void METHOD_1 ( ) { METHOD_1 ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; },['Update Wra'],1320
public static boolean METHOD_1 ( final int status ) { return status > ( VAR_1 ) ; },public static boolean METHOD_1 ( final byte status ) { return status > ( VAR_1 ) ; },['Update TypeReference'],1321
"TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { return new TYPE_6 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { return new TYPE_6 ( VAR_1 , VAR_2 , VAR_3 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1322
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) ) ; VAR_2 . METHOD_4 ( ) ; return VAR_2 ; },public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; return VAR_2 ; },"['Update TypeReference', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation']",1323
"public void METHOD_1 ( ) { if ( VAR_1 != ( - 1 ) ) { VAR_2 . METHOD_2 ( ( VAR_1 + 1 ) , VAR_3 . size ( ) ) ; } else { VAR_2 . METHOD_3 ( ) ; } }","public void METHOD_1 ( ) { if ( VAR_1 != ( - 1 ) ) { VAR_2 . METHOD_2 ( VAR_1 , VAR_3 . size ( ) ) ; } else { VAR_2 . METHOD_3 ( ) ; } }","['Insert TypeAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1324
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String key , int VAR_1 ) { return ( ( TYPE_2 ) ( this . METHOD_2 ( ) ) ) . METHOD_3 ( key , TYPE_3 . METHOD_4 ( VAR_1 ) ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String key , int VAR_1 ) { return ( ( TYPE_2 ) ( this . METHOD_2 ( ) ) ) . METHOD_3 ( key ) ; }","['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1325
public void METHOD_1 ( TYPE_1 < ? > VAR_1 ) { TYPE_2 < TYPE_3 > VAR_2 = VAR_3 . get ( VAR_1 ) ; VAR_4 . remove ( VAR_2 ) ; VAR_3 . remove ( VAR_1 ) ; VAR_5 . METHOD_1 ( VAR_2 ) ; },"public void METHOD_1 ( TYPE_1 < ? > VAR_1 ) { TYPE_2 < TYPE_3 > VAR_2 = VAR_3 . get ( VAR_1 ) ; VAR_4 . remove ( VAR_2 ) ; VAR_3 . remove ( VAR_1 , VAR_2 ) ; VAR_5 . METHOD_1 ( VAR_2 ) ; }",['Insert VariableRead'],1326
public boolean METHOD_1 ( ) { return ( error ) == null ; },public boolean METHOD_1 ( ) { return ( error ) != null ; },['Update BinaryOperator'],1327
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) ; }",['Update Wra'],1328
"public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 ) { if ( VAR_1 == 0 ) { VAR_4 . METHOD_2 ( VAR_5 . METHOD_3 ( VAR_3 ) ) ; } else { VAR_6 . error ( VAR_1 ) ; } }","public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 ) { if ( VAR_1 == 0 ) { VAR_4 . METHOD_2 ( VAR_5 . METHOD_3 ( VAR_3 ) ) ; } else { VAR_6 . error ( VAR_2 ) ; } }",['Update VariableRead'],1330
"public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( ) . replace ( VAR_2 , VAR_1 , STRING_1 ) . METHOD_4 ( java.lang.String . METHOD_5 ( VAR_3 . getId ( ) ) ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( ) . add ( VAR_2 , VAR_1 , STRING_1 ) . METHOD_4 ( java.lang.String . METHOD_5 ( VAR_3 . getId ( ) ) ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( ) ; }",['Update Invocation'],1331
"public boolean METHOD_1 ( TYPE_1 state ) { for ( TYPE_1 [ ] VAR_1 : this . VAR_2 ) { if ( METHOD_2 ( VAR_1 , state ) ) return true ; } return false ; }","public boolean METHOD_1 ( TYPE_1 state ) { for ( TYPE_1 [ ] VAR_1 : this . VAR_2 ) { if ( METHOD_2 ( VAR_1 , state ) ) ; return true ; } return false ; }","['Move Return', 'Delete Block']",1332
private static TYPE_1 METHOD_1 ( java.lang.String item ) { for ( TYPE_1 i : VAR_1 ) { if ( VAR_2 . equals ( item ) ) return new TYPE_1 ( i ) ; } return null ; },private static TYPE_1 METHOD_1 ( java.lang.String item ) { for ( TYPE_1 i : VAR_1 ) { if ( VAR_2 . equals ( item ) ) return i ; } return null ; },"['Move VariableRead', 'Delete ConstructorCall']",1333
public boolean METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { super . METHOD_1 ( VAR_1 ) ; return false ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { super . METHOD_1 ( VAR_1 ) ; return true ; },['Update Literal'],1334
"public java.lang.String METHOD_1 ( java.lang.Long id , TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 , this . VAR_2 . METHOD_3 ( id ) ) ; VAR_1 . METHOD_2 ( STRING_2 , this . VAR_2 . METHOD_4 ( ) ) ; return STRING_3 ; }","public java.lang.String METHOD_1 ( java.lang.Long id , TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 , this . VAR_2 . METHOD_3 ( id ) ) ; VAR_1 . METHOD_2 ( STRING_1 , this . VAR_2 . METHOD_4 ( ) ) ; return STRING_3 ; }",['Update TypeAccess'],1335
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 , this . VAR_4 ) ; return METHOD_3 ( VAR_2 . METHOD_4 ( new TYPE_3 ( ) , new TYPE_4 ( ) ) ) ; }","public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( this . VAR_1 , this . VAR_4 ) ; return METHOD_3 ( VAR_2 . METHOD_4 ( new TYPE_3 ( ) , new TYPE_4 ( ) ) ) ; }","['Insert FieldRead', 'Insert ThisAccess', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1336
"public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > args , boolean VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , TYPE_3 { VAR_3 . set ( VAR_4 . get ( ) ) ; super . METHOD_1 ( args , VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > args , TYPE_1 VAR_2 ) throws TYPE_2 , TYPE_3 { VAR_3 . set ( VAR_4 . get ( ) ) ; super . METHOD_1 ( args , VAR_2 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1337
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( new TYPE_2 ( INT_1 , INT_1 ) ) ; VAR_2 . METHOD_5 ( ) ; }",public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( true ) ; VAR_2 . METHOD_5 ( ) ; },"['Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation']",1338
public TYPE_1 < TYPE_2 > METHOD_1 ( double VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; return this ; },public TYPE_1 < TYPE_2 > METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; return this ; },['Update TypeReference'],1339
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String message ) { METHOD_2 ( ) . METHOD_1 ( VAR_1 , ( ( ( ( this . getClass ( ) . METHOD_3 ( ) ) + STRING_1 ) + VAR_2 ) + STRING_2 ) , message ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String message ) { METHOD_2 ( ) . METHOD_1 ( VAR_1 , ( ( ( ( this . getClass ( ) . getName ( ) ) + STRING_1 ) + VAR_2 ) + STRING_2 ) , message ) ; }",['Update Invocation'],1341
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new java.util.ArrayList < > ( ) ; VAR_3 . add ( new TYPE_2 ( VAR_1 ) ) ; METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new java.util.ArrayList < > ( ) ; VAR_3 . add ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; METHOD_2 ( ) ; },"['Insert VariableRead', 'Insert TypeReference', 'Delete VariableRead', 'Delete ConstructorCall']",1344
protected void METHOD_1 ( int status ) { },protected abstract void METHOD_1 ( int status ) ;,['Insert Wra'],1345
"public static void main ( java.lang.String [ ] args ) throws TYPE_1 , TYPE_2 { TYPE_3 VAR_1 = new TYPE_3 ( STRING_1 , STRING_2 ) ; }","public static void main ( java.lang.String [ ] args ) throws TYPE_1 , TYPE_2 { TYPE_3 VAR_1 = new TYPE_3 ( STRING_1 , STRING_1 ) ; }",['Update FieldRead'],1346
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( STRING_2 ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 = new TYPE_2 ( VAR_4 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( STRING_2 ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 = new TYPE_2 ( ) ; },['Delete FieldRead'],1347
"public float [ ] METHOD_1 ( int VAR_1 ) { final int VAR_2 = INT_1 ; final int VAR_3 = INT_1 ; final int VAR_4 = INT_1 ; return METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_1 ) ; }","public float [ ] METHOD_1 ( ) { final int VAR_2 = INT_1 ; final int VAR_3 = INT_1 ; final int VAR_4 = INT_1 ; return METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1348
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_3 = this . getClass ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; VAR_4 = this . getClass ( ) . METHOD_2 ( STRING_2 ) . METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_3 = this . getClass ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; VAR_4 = this . getClass ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; },"['Update TypeAccess', 'Delete FieldRead']",1349
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_4 , VAR_5 , ( - 1 ) , null , VAR_1 , VAR_2 ) ; METHOD_4 ( VAR_5 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_4 , VAR_5 , ( - 1 ) , null , VAR_1 , VAR_2 ) ; METHOD_4 ( ) ; }",['Delete TypeAccess'],1350
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < ? extends TYPE_3 > VAR_2 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_2 ) ; }","public void METHOD_1 ( java.lang.Integer VAR_1 , TYPE_2 < ? extends TYPE_3 > VAR_2 ) { METHOD_1 ( VAR_1 , VAR_2 . METHOD_4 ( ) , VAR_2 ) ; }","['Update Invocation', 'Update TypeReference', 'Move VariableRead', 'Delete Invocation']",1351
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_3 . error ( STRING_1 ) ; return ; } VAR_2 . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) == null ) { java.lang.System.err.println ( STRING_1 ) ; return ; } VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Update Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete TypeAccess']",1352
"public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; return new TYPE_3 ( new TYPE_4 ( VAR_1 . METHOD_3 ( ) ) , STRING_1 , STRING_2 , STRING_3 ) ; }","public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; return new TYPE_3 ( new TYPE_4 ( VAR_1 . METHOD_3 ( ) ) , STRING_1 , STRING_2 ) ; }",['Delete FieldRead'],1353
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { VAR_1 . METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_1 , response ) ; return ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { VAR_1 . METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_1 , response ) ; }",['Delete Return'],1354
"public void METHOD_1 ( ) { node . METHOD_2 ( VAR_1 ) ; VAR_2 . assertEquals ( VAR_3 . state , VAR_1 ) ; }","public void METHOD_1 ( ) { node . METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_3 . state , VAR_1 ) ; }",['Update TypeAccess'],1355
"public void METHOD_1 ( int VAR_1 , TYPE_1 [ ] VAR_2 , java.lang.String VAR_3 , java.lang.Throwable VAR_4 ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_3 ) ; }","public void METHOD_1 ( int VAR_1 , TYPE_1 [ ] VAR_2 , java.lang.String VAR_3 , java.lang.Throwable VAR_4 ) { TYPE_2 . METHOD_2 ( ) ; }","['Delete TypeAccess', 'Delete VariableRead']",1356
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( false ) ; VAR_3 . METHOD_2 ( false ) ; VAR_4 . METHOD_2 ( false ) ; VAR_5 . METHOD_2 ( true ) ; TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_6 ) ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( false ) ; VAR_3 . METHOD_2 ( false ) ; VAR_4 . METHOD_2 ( false ) ; VAR_5 . METHOD_2 ( true ) ; TYPE_1 . METHOD_3 ( VAR_6 ) ; },"['Insert TypeAccess', 'Delete FieldRead', 'Delete ConstructorCall']",1358
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . METHOD_3 ( STRING_2 ) ; TYPE_1 . METHOD_4 ( STRING_1 ) ; TYPE_1 . METHOD_5 ( STRING_3 ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . METHOD_3 ( STRING_1 ) ; TYPE_1 . METHOD_4 ( STRING_1 ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; },"['Update TypeAccess', 'Update TypeAccess']",1359
"public TYPE_1 content ( java.lang.String content ) { this . content = TYPE_2 . METHOD_1 ( content , TYPE_3 . METHOD_2 ( ) ) ; return this ; }",public TYPE_1 content ( java.lang.String content ) { this . content = content ; return this ; },"['Move VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1360
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( INT_1 ) ; VAR_2 . init ( ) ; },public void METHOD_1 ( ) { VAR_2 . init ( ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1361
public TYPE_1 < ? > METHOD_1 ( final TYPE_1 < ? > VAR_1 ) { return VAR_2 ; },public TYPE_1 < ? > METHOD_1 ( final TYPE_1 < ? > VAR_1 ) { return VAR_1 ; },"['Insert VariableRead', 'Delete FieldRead']",1362
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; this . VAR_2 . METHOD_2 ( ) ; this . VAR_3 . METHOD_2 ( ) ; this . VAR_4 . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 c ) { super . METHOD_1 ( c ) ; VAR_2 . METHOD_2 ( ) ; this . VAR_2 . METHOD_2 ( ) ; this . VAR_3 . METHOD_2 ( ) ; this . VAR_4 . METHOD_2 ( ) ; },"['Update Parameter', 'Update VariableRead']",1363
public boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) ) == null ; },public boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) ) != null ; },['Update BinaryOperator'],1364
"public boolean METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 , int VAR_2 ) { return false ; }","public boolean METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { return false ; }","['Delete TypeReference', 'Delete Parameter']",1365
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < > ( ) ; },public void METHOD_1 ( ) { VAR_1 = new java.util.ArrayList < > ( ) ; },['Update ConstructorCall'],1366
protected float METHOD_1 ( ) { return VAR_1 [ VAR_2 ] ; },public float METHOD_1 ( ) { return VAR_1 [ VAR_2 ] ; },['Update Wra'],1367
"public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_2 < TYPE_1 > METHOD_2 ( new TYPE_3 ( VAR_1 ) , new TYPE_4 ( VAR_1 ) , new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 ) , new TYPE_7 ( VAR_1 ) ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_2 < TYPE_1 > METHOD_2 ( new TYPE_3 ( VAR_1 ) , new TYPE_4 ( VAR_1 ) , new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 ) ) ; }","['Delete VariableRead', 'Delete ConstructorCall']",1368
private static long METHOD_1 ( long VAR_1 ) { return 0 ; },private static native long METHOD_1 ( long VAR_1 ) ;,"['Insert Wra', 'Delete Literal', 'Delete Return']",1369
"protected void METHOD_1 ( java.io.File file , TYPE_1 VAR_1 ) { METHOD_2 ( file , VAR_1 , false ) ; VAR_2 . put ( file , VAR_1 ) ; VAR_3 . get ( file , VAR_1 , INT_1 , INT_1 , true , true , VAR_4 ) ; }","protected void METHOD_1 ( java.io.File file , TYPE_1 VAR_1 ) { METHOD_2 ( file , VAR_1 ) ; VAR_2 . put ( file , VAR_1 ) ; VAR_3 . get ( file , VAR_1 , INT_1 , INT_1 , true , true , VAR_4 ) ; }",['Delete Literal'],1370
"public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . delete ( VAR_2 ) ; METHOD_2 ( ) ; VAR_3 . assertTrue ( STRING_1 , VAR_2 . METHOD_3 ( ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . delete ( VAR_2 ) ; METHOD_2 ( null ) ; VAR_3 . assertTrue ( STRING_1 , VAR_2 . METHOD_3 ( ) ) ; }",['Insert Literal'],1371
"public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 ) { if ( VAR_1 == null ) { return null ; } return TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , new TYPE_3 ( ) ) ; }","public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 ) { return TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , new TYPE_3 ( ) ) ; }","['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1372
"private void METHOD_1 ( java.lang.Class < ? > VAR_1 ) { VAR_2 . add ( TYPE_1 . METHOD_2 ( ( ( VAR_3 . getName ( ) . replace ( STRING_1 , STRING_2 ) ) + STRING_3 ) ) ) ; }","private void METHOD_1 ( java.lang.Class < ? > VAR_1 ) { VAR_2 . add ( TYPE_1 . METHOD_2 ( ( ( VAR_3 . getName ( ) . replaceAll ( STRING_2 , STRING_2 ) ) + STRING_3 ) ) ) ; }","['Update Invocation', 'Update TypeAccess']",1373
private void METHOD_1 ( ) { this . VAR_1 . execute ( new TYPE_1 < TYPE_2 > ( ) . METHOD_2 ( this ) ) ; },private void METHOD_1 ( ) { this . VAR_1 . execute ( this ) ; },"['Update Invocation', 'Move Invocation', 'Move FieldRead', 'Delete ConstructorCall', 'Delete Invocation']",1374
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( title ) != null ) && ( VAR_2 . equals ( VAR_1 ) ) ) return ; title = VAR_3 . trim ( ) ; METHOD_2 ( ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( title ) != null ) && ( VAR_2 . equals ( VAR_1 ) ) ) return ; title = VAR_1 ; METHOD_2 ( ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1375
"protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { super . METHOD_1 ( VAR_1 , VAR_2 , data ) ; VAR_3 = data . METHOD_2 ( VAR_4 ) ; VAR_5 . METHOD_3 ( ) ; METHOD_4 ( ) ; }","protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { super . METHOD_1 ( VAR_1 , VAR_2 , data ) ; VAR_3 = data . METHOD_2 ( VAR_4 ) ; }","['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1376
public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) . get ( 1 ) ; },public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) . get ( 0 ) ; },['Update Literal'],1377
"public java.lang.String METHOD_1 ( ) { try { return TYPE_1 . METHOD_2 ( ) . get ( VAR_1 , VAR_2 . METHOD_1 ( ) ) ; } catch ( TYPE_2 VAR_3 ) { TYPE_3 . METHOD_3 ( VAR_4 , STRING_1 , VAR_3 ) ; } return null ; }","public java.lang.String METHOD_1 ( ) { try { return TYPE_1 . METHOD_2 ( true ) . get ( VAR_1 , VAR_2 . METHOD_1 ( ) ) ; } catch ( TYPE_2 VAR_3 ) { TYPE_3 . METHOD_3 ( VAR_4 , STRING_1 , VAR_3 ) ; } return null ; }",['Insert Literal'],1378
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( null , true ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( null ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) ; },['Delete Literal'],1379
"void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , long VAR_4 , int VAR_5 ) throws TYPE_1 { if ( ( ( VAR_6 ) ++ ) > 0 ) { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } }","void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int VAR_4 , int VAR_5 ) throws TYPE_1 { if ( ( ( VAR_6 ) ++ ) > 0 ) { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } }",['Update TypeReference'],1381
"protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( this , new TYPE_3 [ ] { VAR_1 } , new TYPE_4 [ ] { VAR_2 } ) ; }","private TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( this , new TYPE_3 [ ] { VAR_1 } , new TYPE_4 [ ] { VAR_2 } ) ; }",['Update Wra'],1382
public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . getString ( STRING_1 ) ) ; },protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . getString ( STRING_1 ) ) ; },['Update Wra'],1383
private void METHOD_1 ( ) { VAR_1 = METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; },protected void METHOD_1 ( ) { VAR_1 = METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; },['Update Wra'],1384
"public void METHOD_1 ( ) { TYPE_1 id = METHOD_2 ( ""id"" ) ; if ( id != null ) { if ( TYPE_2 . METHOD_3 ( id ) ) { METHOD_4 ( ) ; return ; } } METHOD_5 ( ) ; }","public void METHOD_1 ( ) { TYPE_1 id = METHOD_2 ( ""id"" ) ; if ( id != null ) { if ( TYPE_2 . METHOD_3 ( id ) ) { METHOD_4 ( ) ; } } METHOD_5 ( ) ; }",['Delete Return'],1385
"public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , int VAR_3 , int [ ] VAR_4 , int VAR_5 , java.lang.Object [ ] args ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , args , null , false ) ; }","public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , int VAR_3 , int [ ] VAR_4 , int VAR_5 , java.lang.Object [ ] args ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , args , null ) ; }",['Delete Literal'],1386
"private boolean METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 ) { if ( VAR_3 . equals ( VAR_2 ) ) { return true ; } else { return false ; } }","private boolean METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 ) { if ( VAR_3 . equals ( VAR_1 ) ) { return true ; } else { return false ; } }",['Update VariableRead'],1388
protected static boolean METHOD_1 ( ) { TYPE_1 response ; response = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 . toString ( ) ) ; return ! ( VAR_3 . getClass ( ) . equals ( VAR_4 class ) ) ; },private static boolean METHOD_1 ( ) { TYPE_1 response ; response = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 . toString ( ) ) ; return ! ( VAR_3 . getClass ( ) . equals ( VAR_4 class ) ) ; },['Update Wra'],1389
"public boolean METHOD_1 ( TYPE_1 params ) { TYPE_2 . METHOD_2 ( VAR_1 , ( STRING_1 + params ) ) ; VAR_2 . execute ( params ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 params ) { TYPE_2 . METHOD_2 ( VAR_1 , ( STRING_1 + params ) ) ; VAR_2 . execute ( ) ; return true ; }",['Delete VariableRead'],1390
"public int METHOD_1 ( ) { java.lang.String str = java.lang.String . METHOD_2 ( ( ( TYPE_1 ) ( VAR_1 ) ) . getText ( ) ) ; METHOD_3 ( str , true ) ; return VAR_2 ; }",public int METHOD_1 ( ) { java.lang.String str = java.lang.String . METHOD_2 ( ( ( TYPE_1 ) ( VAR_1 ) ) . getText ( ) ) ; METHOD_3 ( str ) ; return VAR_2 ; },['Delete Literal'],1392
"public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 >= 0 ) && ( VAR_1 < INT_1 ) ) { METHOD_2 ( VAR_2 , VAR_1 ) ; } }","public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 > 0 ) && ( VAR_1 < INT_1 ) ) { METHOD_2 ( VAR_2 , VAR_1 ) ; } }",['Update BinaryOperator'],1393
public TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = METHOD_2 ( name ) ; if ( VAR_1 != null ) return VAR_1 ; throw new TYPE_2 ( ( ( STRING_1 + name ) + STRING_2 ) ) ; },protected TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = METHOD_2 ( name ) ; if ( VAR_1 != null ) return VAR_1 ; throw new TYPE_2 ( ( ( STRING_1 + name ) + STRING_2 ) ) ; },['Update Wra'],1394
public void METHOD_1 ( TYPE_1 data ) { TYPE_2 . METHOD_2 ( VAR_1 . getContext ( ) ) . METHOD_3 ( data . METHOD_4 ( ) ) . METHOD_5 ( VAR_2 . get ( java.lang.Integer.parseInt ( VAR_3 ) ) ) ; },public void METHOD_1 ( TYPE_1 data ) { TYPE_2 . METHOD_2 ( VAR_1 . getContext ( ) ) . METHOD_3 ( data . METHOD_4 ( ) ) . METHOD_5 ( VAR_2 . get ( index ) ) ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1395
"public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 , VAR_3 , VAR_4 ) ; }",['Delete VariableRead'],1396
"TYPE_1 < java.util.List < TYPE_2 > > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) ;",TYPE_1 < java.util.List < TYPE_2 > > METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",1397
"boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) ;","boolean METHOD_1 ( java.lang.String VAR_2 , java.lang.String VAR_3 ) ;","['Delete TypeReference', 'Delete Parameter']",1398
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { return TYPE_1 . METHOD_2 ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; } catch ( java.lang.Exception VAR_3 ) { VAR_3 . METHOD_3 ( ) ; return TYPE_1 . METHOD_4 ( VAR_3 ) ; } },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { return TYPE_1 . METHOD_2 ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; } catch ( java.lang.Exception VAR_3 ) { return TYPE_1 . METHOD_4 ( VAR_3 ) ; } },"['Delete VariableRead', 'Delete Invocation']",1399
"public double METHOD_1 ( double a ) { return 1 / ( java.lang.Math.pow ( ( FLOAT_1 + a ) , INT_1 ) ) ; }","private double METHOD_1 ( double a ) { return 1 / ( java.lang.Math.pow ( ( FLOAT_1 + a ) , INT_1 ) ) ; }",['Update Wra'],1400
"private static boolean METHOD_1 ( ) { return ( ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ) || ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 ) ) ) & ( TYPE_1 . METHOD_2 ( VAR_4 , VAR_5 ) ) ; }","private static boolean METHOD_1 ( ) { return ( ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ) || ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 ) ) ) && ( TYPE_1 . METHOD_2 ( VAR_4 , VAR_5 ) ) ; }",['Update BinaryOperator'],1402
public void METHOD_1 ( TYPE_1 context ) { super . METHOD_1 ( context ) ; context . METHOD_2 ( new TYPE_2 ( VAR_1 ) ) ; },public void METHOD_1 ( TYPE_1 context ) { super . METHOD_1 ( context ) ; context . METHOD_2 ( new TYPE_2 ( ) ) ; },['Delete FieldRead'],1403
"java.util.List < TYPE_1 > METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.util.List < java.lang.Long > VAR_2 , java.lang.String query ) ;","java.util.List < TYPE_1 > METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.util.List < java.lang.Long > VAR_2 ) ;","['Delete TypeReference', 'Delete Parameter']",1405
"private TYPE_1 getType ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . getName ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ( ( TYPE_4 . METHOD_1 ( ) ) + VAR_2 ) ) ; return new TYPE_1 ( VAR_4 , VAR_4 , this , null ) ; }","private TYPE_1 getType ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . getName ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ( ( TYPE_4 . METHOD_1 ( ) ) + VAR_2 ) ) ; return new TYPE_1 ( VAR_4 , VAR_4 ) ; }","['Delete ThisAccess', 'Delete Literal']",1406
"public static boolean METHOD_1 ( TYPE_1 name , java.lang.String k ) { return TYPE_2 . METHOD_1 ( name , k ) ; }","public static boolean METHOD_1 ( java.lang.String name , java.lang.String k ) { return TYPE_2 . METHOD_1 ( name , k ) ; }",['Update TypeReference'],1407
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; },['Update TypeAccess'],1408
public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( false ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; },['Delete Literal'],1410
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) return null ; return TYPE_3 . METHOD_1 ( VAR_1 , TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . getId ( ) ) ) ; }","public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_3 . METHOD_1 ( VAR_1 , TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . getId ( ) ) ) ; }","['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1411
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) ; }",public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . METHOD_2 ( STRING_1 ) ; },['Delete VariableRead'],1413
"public static void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < java.lang.String > args ) { TYPE_2 VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( true ) ; TYPE_3 . METHOD_5 ( VAR_1 , METHOD_6 ( ) , STRING_1 ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < java.lang.String > args ) { TYPE_2 VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( VAR_1 , METHOD_6 ( ) , STRING_1 ) ; }",['Delete Literal'],1414
"public void METHOD_1 ( ) { new TYPE_1 ( VAR_1 , VAR_2 , TYPE_2 . METHOD_2 ( VAR_1 ) , this , VAR_3 ) . execute ( ) ; }","public void METHOD_1 ( ) { new TYPE_1 ( getActivity ( ) , VAR_2 , TYPE_2 . METHOD_2 ( getActivity ( ) ) , this , VAR_3 ) . execute ( ) ; }","['Insert Invocation', 'Insert Invocation', 'Move TypeAccess', 'Insert Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1415
"public java.util.List < TYPE_1 > METHOD_1 ( ) { return java.util.Arrays.asList ( new TYPE_2 ( ) , new TYPE_3 ( ) , new TYPE_4 ( ) , new TYPE_5 ( ) ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( ) { return java.util.Arrays.asList ( new TYPE_2 ( ) , new TYPE_3 ( ) , new TYPE_4 ( ) ) ; }",['Delete ConstructorCall'],1416
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 , STRING_5 , STRING_6 , STRING_7 ) ; }",['Delete TypeAccess'],1417
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) . METHOD_2 ( VAR_1 ) ; return VAR_2 . METHOD_3 ( METHOD_4 ( ( ( TYPE_3 ) ( VAR_1 ) ) ) ) ; },private TYPE_1 METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) . METHOD_2 ( VAR_1 ) ; return VAR_2 . METHOD_3 ( METHOD_4 ( VAR_1 ) ) ; },"['Update TypeReference', 'Delete TypeReference']",1418
"public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 ) { TYPE_2 . METHOD_2 ( ) ; return new TYPE_3 ( VAR_1 , null , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; }","public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 ) { TYPE_2 . METHOD_2 ( ) ; return new TYPE_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; }","['Update ConstructorCall', 'Insert VariableRead', 'Delete Literal']",1419
"java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) ;",java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",1421
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; assertEquals ( STRING_2 , VAR_3 , true ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_2 ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; assertEquals ( VAR_3 , false ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_2 ) ; }","['Update Literal', 'Delete TypeAccess']",1422
"protected boolean METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { return ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) ) < ( ( ( TYPE_1 ) ( VAR_2 ) ) . METHOD_2 ( ) ) ; }","private boolean METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { return ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) ) < ( ( ( TYPE_1 ) ( VAR_2 ) ) . METHOD_2 ( ) ) ; }",['Update Wra'],1423
"public void METHOD_1 ( TYPE_1 VAR_1 , boolean value ) throws TYPE_2 { if ( value ) { VAR_1 . METHOD_2 ( ) ; } else { VAR_1 . METHOD_3 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean value ) throws TYPE_2 { }","['Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1424
public void METHOD_1 ( java.lang.String text ) { this . VAR_1 = java.lang.Double . METHOD_2 ( text ) ; },public void METHOD_1 ( java.lang.String text ) { this . VAR_1 = java.lang.Integer . METHOD_2 ( text ) ; },['Update TypeAccess'],1425
public boolean METHOD_1 ( ) { return ( this . VAR_1 . size ( ) ) > ( VAR_2 ) ; },public boolean METHOD_1 ( ) { return ( this . VAR_1 . size ( ) ) == ( VAR_2 ) ; },['Update BinaryOperator'],1426
"public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; break ; case VAR_2 : TYPE_2 . METHOD_3 ( STRING_1 , STRING_3 ) ; break ; } return false ; }","public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; break ; case VAR_2 : TYPE_2 . METHOD_3 ( STRING_1 , STRING_3 ) ; break ; } return true ; }",['Update Literal'],1427
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; return VAR_3 . METHOD_4 ( VAR_2 ) ; },private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( true ) ; return VAR_3 . METHOD_4 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1428
"TYPE_1 METHOD_1 ( java.lang.Long id , TYPE_2 VAR_1 ) ;","TYPE_1 METHOD_1 ( java.lang.Long id , java.lang.String token ) ;","['Update Parameter', 'Update TypeReference']",1430
"private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < java.util.ArrayList < TYPE_2 > > VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_3 = METHOD_3 ( ( VAR_1 + STRING_1 ) ) ; return new TYPE_1 ( VAR_2 , VAR_3 ) ; }","private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < java.util.ArrayList < TYPE_2 > > VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_3 = METHOD_3 ( ( VAR_1 + STRING_1 ) , 1 , f ) ; return new TYPE_1 ( VAR_2 , VAR_3 ) ; }","['Insert Literal', 'Insert FieldRead']",1431
"public TYPE_1 METHOD_1 ( TYPE_2 c ) { return METHOD_2 ( c , VAR_1 . get ( c ) , true ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 c ) { return METHOD_2 ( c , VAR_1 . get ( c ) ) ; }",['Delete Literal'],1433
public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 ) throw new TYPE_1 ( STRING_1 ) ; this . VAR_2 = VAR_1 ; },public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 ) throw new TYPE_1 ( STRING_1 ) ; VAR_2 = VAR_1 ; },['Delete ThisAccess'],1434
"public static double METHOD_1 ( java.util.Date date , boolean VAR_1 ) { java.util.Calendar VAR_2 = new TYPE_1 ( VAR_3 , VAR_4 ) ; VAR_2 . METHOD_2 ( date ) ; return TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 ) ; }","public static double METHOD_1 ( java.util.Date date , boolean VAR_1 ) { java.util.Calendar VAR_2 = new TYPE_1 ( VAR_4 ) ; VAR_2 . METHOD_2 ( date ) ; return TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 ) ; }",['Delete FieldRead'],1435
public void add ( double x ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_1 ( x ) ; } else { VAR_2 . METHOD_2 ( TYPE_1 . METHOD_1 ( x ) ) ; } VAR_3 += x ; },public void add ( double x ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( x ) ; } else { VAR_2 . METHOD_2 ( new TYPE_1 ( x ) ) ; } VAR_3 += x ; },"['Insert ConstructorCall', 'Insert ConstructorCall', 'Move VariableRead', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",1436
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_1 . METHOD_2 ( new TYPE_3 ( TYPE_4 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ) { } ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( new TYPE_3 ( TYPE_4 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ) { } ) ; },"['Delete TypeReference', 'Delete Parameter']",1437
"protected final TYPE_1 METHOD_1 ( short VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( VAR_1 , VAR_2 , new TYPE_2 ( ) ) ; }","protected final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( VAR_1 , VAR_2 , new TYPE_2 ( ) ) ; }",['Update TypeReference'],1438
"private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . replace ( VAR_3 , STRING_1 ) . replaceAll ( STRING_2 , ""\n"" ) . trim ( ) ; }","private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . replaceAll ( VAR_3 , STRING_1 ) . replaceAll ( STRING_2 , ""\n"" ) . trim ( ) ; }",['Update Invocation'],1440
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; java.lang.System.exit ( 0 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.exit ( 0 ) ; },"['Delete TypeAccess', 'Delete Invocation']",1441
"public void METHOD_1 ( ) { METHOD_2 ( ) ; boolean VAR_1 = false ; while ( ! VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( ) ; VAR_1 = METHOD_4 ( VAR_2 ) ; } java.lang.System.out.println ( ( STRING_1 + ""\n"" ) ) ; }",public void METHOD_1 ( ) { METHOD_2 ( ) ; boolean VAR_1 = false ; while ( ! VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( ) ; VAR_1 = METHOD_4 ( VAR_2 ) ; } java.lang.System.out.println ( STRING_1 ) ; },"['Insert TypeAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1443
"public static TYPE_1 METHOD_1 ( java.util.List < ? > list , int VAR_1 ) { return TYPE_2 . METHOD_2 ( list , VAR_1 ) . build ( ) ; }",public static TYPE_1 METHOD_1 ( java.util.List < ? > list ) { return TYPE_2 . METHOD_2 ( list ) . build ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1444
"public java.lang.Boolean METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { for ( java.lang.String name : VAR_1 . METHOD_2 ( ) ) { this . METHOD_3 ( name , VAR_1 . METHOD_4 ( ) ) ; } return VAR_2 ; }","public java.lang.Boolean METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { for ( java.lang.String name : VAR_1 . METHOD_2 ( ) ) { this . METHOD_3 ( name ) ; } return VAR_2 ; }","['Delete VariableRead', 'Delete Invocation']",1445
protected TYPE_1 METHOD_1 ( TYPE_2 handle ) { return new TYPE_1 ( handle ) ; },protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 > handle ) { return new TYPE_1 ( handle ) ; },['Insert TypeReference'],1446
"private TYPE_1 select ( java.lang.String query ) { return VAR_1 . METHOD_1 ( query , null ) ; }","public TYPE_1 select ( java.lang.String query ) { return VAR_1 . METHOD_1 ( query , null ) ; }",['Update Wra'],1447
"public boolean METHOD_1 ( java.lang.Long VAR_1 , java.lang.Long VAR_2 ) { return ( VAR_3 . METHOD_2 ( VAR_2 , VAR_1 ) ) != null ; }","public boolean METHOD_1 ( java.lang.Long VAR_1 , java.lang.Long VAR_2 ) { return ( VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) != null ; }",['Move VariableRead'],1448
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { return TYPE_2 . METHOD_2 ( ) . toString ( ) ; },public java.lang.String METHOD_1 ( ) throws java.io.IOException { return TYPE_2 . METHOD_2 ( ) . toString ( ) ; },"['Delete TypeReference', 'Delete Parameter']",1449
public long METHOD_1 ( ) { return VAR_1 ; },public long METHOD_1 ( ) { return this . VAR_1 ; },['Insert ThisAccess'],1451
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( context ) ; assertEquals ( new java.util.ArrayList < java.lang.String > ( ) , VAR_1 . METHOD_2 ( null ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( context ) ; assertEquals ( null , VAR_1 . METHOD_2 ( null ) ) ; }","['Insert Literal', 'Delete ConstructorCall']",1452
public boolean METHOD_1 ( TYPE_1 event ) { if ( ! ( METHOD_2 ( ) ) ) return false ; return true ; },public void METHOD_1 ( TYPE_1 event ) { if ( ! ( METHOD_2 ( ) ) ) return ; },"['Update TypeReference', 'Delete Literal', 'Delete Literal', 'Delete Return']",1453
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 msg ; msg = new TYPE_2 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 . put ( msg , null ) ; VAR_5 . put ( VAR_6 , null ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 msg ; msg = new TYPE_2 ( VAR_2 , VAR_3 ) ; VAR_5 . put ( msg , null ) ; VAR_5 . put ( VAR_6 , null ) ; }",['Delete FieldRead'],1454
public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( false ) ; } if ( ( VAR_1 . METHOD_4 ( ) ) == null ) { METHOD_5 ( false ) ; } },public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( false ) ; } if ( ( VAR_1 . METHOD_4 ( ) ) == null ) { METHOD_5 ( ) ; } },['Delete Literal'],1455
"public double [ ] [ ] METHOD_1 ( double VAR_1 , double VAR_2 , double VAR_3 , double VAR_4 , double VAR_5 , TYPE_1 type ) { return METHOD_2 ( VAR_1 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , type ) ; }","public double [ ] [ ] METHOD_1 ( double VAR_1 , double VAR_2 , double VAR_3 , double VAR_4 , double VAR_5 , TYPE_1 type ) { return METHOD_2 ( VAR_1 , VAR_1 , 0 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , type ) ; }",['Insert Literal'],1456
public static void main ( java.lang.String [ ] args ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_2 . execute ( STRING_1 ) ; },public static void main ( java.lang.String [ ] args ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_2 . execute ( ) ; },['Delete TypeAccess'],1457
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 result = TYPE_3 . METHOD_2 ( ) ; result . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) . METHOD_7 ( VAR_2 . getType ( ) ) ; return result ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 result = TYPE_3 . METHOD_2 ( ) ; result . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) . METHOD_7 ( VAR_2 . getType ( ) ) ; return result ; },['Update Invocation'],1458
"public TYPE_1 get ( java.lang.String VAR_1 ) throws java.io.IOException { return get ( VAR_1 , null , null ) ; }","public TYPE_1 get ( java.lang.String VAR_1 ) throws java.io.IOException { return get ( VAR_1 , null ) ; }",['Delete Literal'],1459
private java.lang.String METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) + STRING_1 ) + ( ( TYPE_1 . METHOD_3 ( ) ) / INT_1 ) ; },private java.lang.String METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) + STRING_1 ) + ( ( TYPE_1 . METHOD_3 ( ) ) % INT_1 ) ; },['Update BinaryOperator'],1460
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( INT_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( INT_2 ) ; VAR_1 . METHOD_5 ( INT_3 ) ; },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( INT_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( 0 ) ; VAR_1 . METHOD_5 ( INT_3 ) ; },"['Insert Literal', 'Delete TypeAccess']",1461
"public native void open ( int VAR_1 , int VAR_2 ) ;","private native void open ( int VAR_1 , int VAR_2 ) ;",['Update Wra'],1462
"int METHOD_1 ( java.lang.Long id , java.lang.Integer VAR_1 , java.lang.Long VAR_2 , TYPE_1 VAR_3 , java.lang.String VAR_4 , java.lang.String source , java.lang.String VAR_5 ) ;","int METHOD_1 ( java.lang.Long id , java.lang.Integer VAR_1 , TYPE_1 VAR_3 , java.lang.String VAR_4 , java.lang.String source , java.lang.String VAR_5 ) ;","['Delete TypeReference', 'Delete Parameter']",1463
public void METHOD_1 ( TYPE_1 event ) { event . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 event ) { },"['Delete VariableRead', 'Delete Invocation']",1464
public final boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; },public final boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",1465
public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( ) ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 = VAR_4 . get ( VAR_1 ) ; },public void METHOD_1 ( ) { VAR_1 = METHOD_2 ( new TYPE_2 ( ) ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 = VAR_4 . get ( VAR_1 ) ; },['Update TypeAccess'],1467
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { for ( TYPE_2 VAR_3 : VAR_4 ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_3 : VAR_4 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1469
private void METHOD_1 ( ) { TYPE_1 VAR_1 ; for ( TYPE_2 c : VAR_2 . METHOD_2 ( ) ) { VAR_1 = ( ( TYPE_1 ) ( c ) ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } },private void METHOD_1 ( ) { TYPE_1 VAR_1 ; for ( TYPE_2 c : VAR_2 . METHOD_2 ( ) ) { VAR_1 = ( ( TYPE_1 ) ( c ) ) ; VAR_1 . METHOD_3 ( ) ; } },"['Delete VariableRead', 'Delete Invocation']",1470
"public void METHOD_1 ( java.lang.String name , java.lang.String value ) { VAR_1 . put ( new TYPE_1 ( name ) , value ) ; }","public void METHOD_1 ( java.lang.String name , java.lang.String value ) { VAR_1 . put ( name , value ) ; }","['Move VariableRead', 'Delete ConstructorCall']",1472
public void METHOD_1 ( ) { VAR_1 . setText ( VAR_2 . toString ( VAR_3 ) ) ; },private void METHOD_1 ( ) { VAR_1 . setText ( VAR_2 . toString ( VAR_3 ) ) ; },['Update Wra'],1473
"private void METHOD_1 ( int VAR_1 ) { VAR_2 = VAR_1 ; METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; }","private void METHOD_1 ( int VAR_1 ) { VAR_2 = VAR_1 + 1 ; METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; }","['Insert BinaryOperator', 'Move VariableRead', 'Insert Literal']",1474
"public void METHOD_1 ( double [ ] [ ] VAR_1 , int VAR_2 ) { VAR_3 . set ( VAR_2 , VAR_1 . METHOD_2 ( ) ) ; }","public void METHOD_1 ( double [ ] [ ] VAR_1 , int index ) { VAR_3 . set ( index , VAR_1 . METHOD_2 ( ) ) ; }","['Update Parameter', 'Update VariableRead']",1475
public static java.lang.String METHOD_1 ( java.lang.String id ) { return TYPE_1 . METHOD_2 ( id ) . METHOD_3 ( ) ; },public static java.lang.String METHOD_1 ( java.lang.String id ) { if ( id == null ) { return null ; } return TYPE_1 . METHOD_2 ( id ) . METHOD_3 ( ) ; },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Insert Return', 'Insert Literal']",1476
"private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String text ) { return new TYPE_1 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( new TYPE_2 ( VAR_2 . String , text ) ) ; }","private TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String text ) { return new TYPE_1 ( ) . METHOD_2 ( name ) . METHOD_3 ( new TYPE_2 ( VAR_2 . String , text ) ) ; }","['Update Parameter', 'Update VariableRead']",1477
private static synchronized TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 = new TYPE_1 ( VAR_1 ) ; return VAR_3 ; },public static synchronized TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 = new TYPE_1 ( VAR_1 ) ; return VAR_3 ; },['Update Wra'],1478
"public static java.util.List < java.lang.Object > METHOD_1 ( java.lang.String VAR_1 , java.lang.String ... args ) { return TYPE_1 . METHOD_1 ( false , VAR_1 , args ) ; }","public static java.util.List < java.lang.Object > METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_1 ( false , VAR_1 ) ; }","['Delete Parameter', 'Delete VariableRead']",1480
"public boolean contains ( TYPE_1 p ) { if ( p == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } return ( this . METHOD_1 ( p , true ) ) != null ; }",public boolean contains ( TYPE_1 p ) { if ( p == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } return ( this . METHOD_1 ( p ) ) != null ; },['Delete Literal'],1481
"private void METHOD_1 ( ) { TYPE_1 TYPE_2 = new TYPE_3 ( this , VAR_1 ) ; METHOD_2 ( TYPE_2 ) ; TYPE_2 . METHOD_3 ( ) ; METHOD_4 ( STRING_1 ) ; METHOD_5 ( false ) ; METHOD_6 ( ) ; METHOD_7 ( null ) ; }","private void METHOD_1 ( ) { TYPE_1 TYPE_2 = new TYPE_3 ( this , VAR_1 ) ; METHOD_2 ( TYPE_2 ) ; METHOD_4 ( STRING_1 ) ; METHOD_5 ( false ) ; METHOD_6 ( ) ; METHOD_7 ( null ) ; }","['Delete VariableRead', 'Delete Invocation']",1482
"public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { java.lang.String VAR_1 = intent . METHOD_2 ( ""name"" ) ; VAR_2 . METHOD_3 ( VAR_1 , STRING_1 ) ; VAR_3 . i ( STRING_2 , ( STRING_3 + VAR_1 ) ) ; }","public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { java.lang.String VAR_1 = intent . METHOD_2 ( ""name"" ) ; VAR_2 . METHOD_3 ( VAR_1 , STRING_1 ) ; java.lang.System.out.println ( VAR_1 ) ; }","['Update Invocation', 'Insert FieldRead', 'Move VariableRead', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete BinaryOperator']",1483
"public void METHOD_1 ( final TYPE_1 view , final int VAR_1 , final int VAR_2 ) { METHOD_2 ( VAR_3 ) ; }","public void METHOD_1 ( final TYPE_1 view , final int VAR_1 , final int VAR_2 ) { METHOD_2 ( ) ; }",['Delete TypeAccess'],1484
"public void METHOD_1 ( TYPE_1 field ) { this . VAR_1 . put ( ( ( ( VAR_2 . getName ( ) ) + STRING_1 ) + ( VAR_2 . getType ( ) ) ) , field ) ; }",public void METHOD_1 ( TYPE_1 field ) { this . VAR_1 . add ( field ) ; },"['Update Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",1485
"public TYPE_1 METHOD_1 ( java.lang.String str ) { if ( str == null ) throw new java.lang.NullPointerException ( ) ; return new TYPE_2 ( TYPE_3 . METHOD_1 ( VAR_1 , TYPE_3 . METHOD_2 ( str ) ) , VAR_2 , VAR_3 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String str ) { if ( str == null ) throw new java.lang.NullPointerException ( ) ; return new TYPE_2 ( TYPE_3 . METHOD_1 ( VAR_1 , TYPE_3 . METHOD_2 ( str ) ) , VAR_3 ) ; }",['Delete FieldRead'],1487
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 ) ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Delete VariableRead', 'Delete Invocation']",1488
"public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 = new TYPE_3 ( new TYPE_4 ( ) , VAR_1 ) ; }",public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 = new TYPE_3 ( VAR_1 ) ; },['Delete ConstructorCall'],1489
"public int METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { int VAR_2 = VAR_3 . update ( STRING_1 , VAR_1 ) ; return VAR_2 ; }","public int METHOD_1 ( java.lang.String id ) throws TYPE_2 { int VAR_2 = VAR_3 . update ( STRING_1 , id ) ; return VAR_2 ; }","['Update Parameter', 'Update TypeReference', 'Update VariableRead']",1490
"public static void main ( java.lang.String [ ] args ) { int VAR_1 = INT_1 ; int VAR_2 = 0 ; java.lang.System.out.println ( TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 ) ) ; }","public static void main ( java.lang.String [ ] args ) { int VAR_1 = INT_1 ; int VAR_2 = 1 ; java.lang.System.out.println ( TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 ) ) ; }",['Update Literal'],1491
private void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },private void METHOD_1 ( int time ) { VAR_2 . METHOD_1 ( time ) ; },"['Update Parameter', 'Update TypeReference', 'Update VariableRead']",1493
public java.lang.String [ ] METHOD_1 ( ) { final java.lang.String [ ] VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_3 . length ) > 0 ) ) return VAR_1 ; return null ; },public java.lang.String [ ] METHOD_1 ( ) { final java.lang.String [ ] VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_3 . length ) > 0 ) ) return VAR_1 ; return VAR_1 ; },"['Insert VariableRead', 'Delete Literal']",1494
"public void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > list , java.lang.String VAR_2 , java.lang.String VAR_3 , boolean VAR_4 ) ;","public void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > list , java.lang.String VAR_2 , java.lang.String VAR_3 ) ;","['Delete TypeReference', 'Delete Parameter']",1496
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { METHOD_2 ( ) ; if ( VAR_1 == null ) { return ; } METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; },public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1497
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( ) ; },public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; },['Update TypeAccess'],1498
"public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 . put ( VAR_3 . getId ( ) , VAR_1 ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }","public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 . put ( VAR_3 . getName ( ) , VAR_1 ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }",['Update Invocation'],1499
"public void METHOD_1 ( java.lang.CharSequence title , TYPE_1 VAR_1 ) { if ( title != null ) { VAR_2 . setText ( title , VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; } else { VAR_3 . METHOD_2 ( VAR_5 ) ; } }","public void METHOD_1 ( java.lang.CharSequence title , TYPE_1 VAR_1 ) { if ( title != null ) { VAR_2 . setText ( title ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; } else { VAR_3 . METHOD_2 ( VAR_5 ) ; } }",['Delete VariableRead'],1500
public void METHOD_1 ( ) { if ( ( VAR_1 ) && ( ( VAR_2 . METHOD_2 ( ) ) == 0 ) ) { int i = VAR_3 . METHOD_3 ( VAR_4 . state ) ; VAR_2 . METHOD_4 ( ( i + 1 ) ) ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) && ( ( VAR_2 . METHOD_2 ( ) ) == 0 ) ) { int i = VAR_3 . METHOD_3 ( VAR_4 . state ) ; VAR_2 . METHOD_4 ( i ) ; } },"['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",1501
java.util.Collection < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },java.util.Collection < TYPE_1 > METHOD_1 ( ) { return this . VAR_1 ; },['Insert ThisAccess'],1502
"void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) ;",void METHOD_1 ( TYPE_1 VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",1503
"private TYPE_1 METHOD_1 ( final TYPE_2 event ) { return TYPE_1 . METHOD_2 ( VAR_1 , METHOD_3 ( event . METHOD_4 ( ) ) ) ; }","private TYPE_1 METHOD_1 ( final TYPE_2 event ) { return TYPE_1 . METHOD_2 ( VAR_1 , METHOD_3 ( event ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Update Invocation', 'Delete Invocation']",1504
public void METHOD_1 ( int position ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = VAR_2 . get ( position ) ; TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( ) ; VAR_5 . show ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; },public void METHOD_1 ( int position ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = VAR_2 . get ( position ) ; TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( ) ; VAR_5 . show ( VAR_1 ) ; VAR_5 . commit ( ) ; },"['Update Invocation', 'Insert TypeAccess', 'Delete VariableRead']",1505
"public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) throws TYPE_2 { try { return VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_3 VAR_4 ) { throw ( ( TYPE_2 ) ( VAR_4 . METHOD_2 ( ) ) ) ; } }","public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) throws TYPE_2 { try { return VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_3 VAR_4 ) { throw new TYPE_2 ( VAR_4 ) ; } }","['Insert ConstructorCall', 'Move VariableRead', 'Delete TypeReference', 'Delete Invocation']",1506
"protected < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 > METHOD_1 ( TYPE_4 VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 ) { return new TYPE_5 < TYPE_1 > ( VAR_3 , VAR_1 , VAR_2 ) ; }","protected < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 > METHOD_1 ( TYPE_4 VAR_1 , TYPE_1 VAR_3 ) { return new TYPE_5 < TYPE_1 > ( VAR_3 , VAR_1 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1507
"java.util.List < TYPE_1 > METHOD_1 ( java.util.Date VAR_1 , java.lang.Long VAR_2 ) ;",java.util.List < TYPE_1 > METHOD_1 ( java.util.Date VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",1509
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String message , java.lang.String VAR_3 ) throws TYPE_1 ;","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String message ) throws TYPE_1 ;","['Delete TypeReference', 'Delete Parameter']",1511
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_3 VAR_3 ) throws java.lang.Exception { TYPE_2 VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; return VAR_4 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_3 VAR_3 ) throws java.lang.Exception { TYPE_2 VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_2 , VAR_3 ) ; return VAR_4 ; }",['Insert VariableRead'],1513
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( index ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( getName ) ; },['Update FieldRead'],1514
"public void METHOD_1 ( TYPE_1 error ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 error ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; }","['Delete TypeAccess', 'Delete Invocation']",1515
"public void METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 , true ) ; }",public void METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },['Delete Literal'],1516
private void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . add ( VAR_1 ) ; METHOD_2 ( ) ; },protected void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . add ( VAR_1 ) ; METHOD_2 ( ) ; },['Update Wra'],1517
public int METHOD_1 ( int VAR_1 ) { int VAR_2 = ( ( VAR_3 ) - VAR_1 ) - INT_1 ; if ( VAR_2 < 0 ) { return 0 ; } return VAR_2 ; },public int METHOD_1 ( int VAR_1 ) { int VAR_2 = ( ( VAR_3 ) - VAR_1 ) + INT_1 ; if ( VAR_2 < 0 ) { return 0 ; } return VAR_2 ; },['Update BinaryOperator'],1518
"private void METHOD_1 ( java.lang.String token ) { VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( METHOD_4 ( ) ) , token ) ; }","private void METHOD_1 ( java.lang.String token ) { VAR_1 . METHOD_2 ( METHOD_3 ( ) , token ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Update Invocation', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1519
public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; return VAR_1 ; },public void METHOD_1 ( final TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Update TypeReference', 'Delete VariableRead', 'Delete Return']",1520
"int METHOD_1 ( java.lang.Long id , TYPE_1 VAR_1 , java.lang.Integer VAR_2 , java.lang.Long VAR_3 , java.lang.String source , java.lang.String VAR_4 ) ;","int METHOD_1 ( java.lang.Long id , TYPE_1 VAR_1 , java.lang.Integer VAR_2 , java.lang.String source , java.lang.String VAR_4 ) ;","['Delete TypeReference', 'Delete Parameter']",1521
public boolean METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) ) ) && ( METHOD_4 ( ) ) ; },public boolean METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) && ( METHOD_2 ( ) ) ) && ( METHOD_4 ( ) ) ; },['Update Invocation'],1522
"public TYPE_1 [ ] METHOD_1 ( ) { return new TYPE_1 [ ] { new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 , error ) } ; }","public TYPE_1 [ ] METHOD_1 ( ) { return new TYPE_1 [ ] { new TYPE_2 ( VAR_2 , VAR_3 , error ) } ; }",['Delete FieldRead'],1523
"public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_4 . assertEquals ( STRING_1 , 1 , VAR_1 . METHOD_3 ( ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; assertEquals ( STRING_1 , 1 , VAR_1 . METHOD_3 ( ) ) ; }",['Update TypeAccess'],1524
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( ) . remove ( VAR_2 ) ; VAR_3 . remove ( VAR_2 ) ; METHOD_3 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( ) . remove ( VAR_2 ) ; VAR_3 . remove ( position ) ; METHOD_3 ( ) ; },"['Insert FieldRead', 'Delete TypeAccess']",1525
"public void METHOD_1 ( TYPE_1 state , java.lang.Class < ? extends TYPE_2 > VAR_1 ) { state . METHOD_2 ( VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 state , int id , java.lang.Class < ? extends TYPE_2 > VAR_1 ) { state . METHOD_2 ( id , VAR_1 ) ; }","['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead']",1526
"public TYPE_1 METHOD_1 ( java.lang.String field , java.lang.Object ... values ) { return METHOD_2 ( false , field , VAR_1 , values ) ; }","public TYPE_1 METHOD_1 ( java.lang.String field , java.lang.Object ... values ) { return METHOD_1 ( field , VAR_1 , values ) ; }","['Update Invocation', 'Delete Literal']",1527
"TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.util.List < java.lang.String > VAR_2 , int VAR_3 , java.lang.String VAR_4 , int VAR_5 ) ;","TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.util.List < java.lang.String > VAR_2 , int VAR_3 ) ;","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",1528
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( null , null , STRING_1 , VAR_3 ) ; VAR_4 . show ( METHOD_3 ( ) , STRING_2 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( null , java.util.Calendar.getInstance ( ) , STRING_1 , VAR_3 ) ; VAR_4 . show ( METHOD_3 ( ) , STRING_2 ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Delete Literal']",1529
public java.util.ArrayList METHOD_1 ( ) { return VAR_1 ; },private java.util.ArrayList METHOD_1 ( ) { return VAR_1 ; },['Update Wra'],1530
"public void execute ( TYPE_1 VAR_1 , TYPE_2 file ) throws java.lang.Exception { METHOD_1 ( VAR_1 , file , VAR_2 ) ; }","public void execute ( TYPE_1 VAR_1 , TYPE_2 file ) throws java.lang.Exception { METHOD_1 ( VAR_1 , file ) ; }",['Delete TypeAccess'],1531
"public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_3 . assertNotNull ( VAR_1 ) ; }","public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; assertNotNull ( VAR_1 ) ; }",['Update TypeAccess'],1532
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { try { return new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) ; } catch ( TYPE_4 VAR_2 ) { throw TYPE_2 . METHOD_3 ( VAR_2 ) ; } },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { try { return new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) ; } catch ( java.lang.Throwable VAR_2 ) { throw TYPE_2 . METHOD_3 ( VAR_2 ) ; } },['Update TypeReference'],1533
"public void METHOD_1 ( int i , int j , int time ) ;","public void METHOD_1 ( int i , int j ) ;","['Delete TypeReference', 'Delete Parameter']",1534
"private void METHOD_1 ( long size ) { VAR_1 . info ( STRING_1 , size ) ; VAR_2 . METHOD_2 ( VAR_3 , null , 0 , size , false , false , false ) ; }","public void METHOD_1 ( long size ) { VAR_1 . info ( STRING_1 , size ) ; VAR_2 . METHOD_2 ( VAR_3 , null , 0 , size , false , false ) ; }","['Update Wra', 'Delete Literal']",1535
"private static void METHOD_1 ( long VAR_1 , long source , int VAR_2 , int VAR_3 , long VAR_4 , long VAR_5 , long VAR_6 ) { }","private static native void METHOD_1 ( long VAR_1 , long source , int VAR_2 , int VAR_3 , long VAR_4 , long VAR_5 , long VAR_6 ) ;",['Insert Wra'],1536
"private boolean METHOD_1 ( final java.lang.Object VAR_1 , final java.lang.Object VAR_2 ) { if ( ( VAR_1 == null ) || ( VAR_2 == null ) ) { return false ; } return VAR_3 . equals ( VAR_4 . getClass ( ) ) ; }","private boolean METHOD_1 ( final java.lang.Object VAR_1 , final java.lang.Object VAR_2 ) { if ( ( VAR_1 == null ) || ( VAR_2 == null ) ) { return false ; } return VAR_3 . equals ( VAR_4 . getClass ( ) . getName ( ) ) ; }","['Insert Invocation', 'Move Invocation']",1537
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 . METHOD_2 ( VAR_6 ) ; },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_5 . METHOD_2 ( VAR_6 ) ; },['Update TypeAccess'],1538
public static void main ( java.lang.String [ ] arg ) { int n = INT_1 ; int size = INT_2 ; TYPE_1 VAR_1 = new TYPE_1 ( size ) ; java.lang.System.out.println ( VAR_1 . METHOD_1 ( n ) . size ( ) ) ; },public static void main ( java.lang.String [ ] arg ) { int n = INT_1 ; int size = INT_2 ; TYPE_1 VAR_1 = new TYPE_1 ( size ) ; java.lang.System.out.println ( VAR_1 . METHOD_1 ( n ) . toString ( ) ) ; },['Update Invocation'],1539
"private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = VAR_2 ; while ( VAR_3 != null ) { if ( VAR_4 . equals ( VAR_3 ) ) { return true ; } VAR_3 = VAR_3 . METHOD_2 ( ) ; } return false ; }","private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_1 VAR_3 = VAR_2 ; while ( VAR_3 != null ) { if ( VAR_4 . equals ( VAR_3 ) ) { return true ; } VAR_3 = VAR_2 . METHOD_2 ( ) ; } return false ; }",['Update VariableRead'],1540
"public boolean METHOD_1 ( android.view.View VAR_1 , TYPE_1 event ) { VAR_2 . setText ( ( ( ( VAR_3 . METHOD_2 ( ) ) + STRING_1 ) + ( VAR_3 . METHOD_3 ( ) ) ) ) ; return true ; }","public boolean METHOD_1 ( android.view.View VAR_1 , TYPE_1 event ) { return true ; }","['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation']",1543
public int METHOD_1 ( TYPE_1 t ) { return VAR_1 . METHOD_1 ( t ) ; },public synchronized int METHOD_1 ( TYPE_1 t ) { return VAR_1 . METHOD_1 ( t ) ; },['Insert Wra'],1544
"public static int METHOD_1 ( int i , int j ) { return i - j ; }","public static int METHOD_1 ( int i , int j ) { return i + j ; }",['Update BinaryOperator'],1545
"private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String msg , java.lang.Throwable t ) { VAR_2 . METHOD_2 ( VAR_1 , t , msg ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String msg , java.lang.Throwable t ) { VAR_2 . METHOD_2 ( VAR_1 , msg , t ) ; }",['Move VariableRead'],1547
public java.awt.Font METHOD_1 ( ) { return this . VAR_1 ; },public java.awt.Font METHOD_1 ( ) { return VAR_1 ; },['Delete ThisAccess'],1549
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },['Update Invocation'],1550
private void METHOD_1 ( android.content.Context context ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( context ) ; try { VAR_2 = new TYPE_2 < TYPE_3 > ( VAR_1 . METHOD_3 ( ) ) ; } catch ( TYPE_4 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } },private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { VAR_2 = new TYPE_2 < TYPE_3 > ( VAR_1 . METHOD_3 ( ) ) ; } catch ( TYPE_4 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1552
"public static java.lang.Object [ ] METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_1 ( VAR_1 , 0 ) ; }","public static java.lang.Object [ ] METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_1 ( VAR_1 , 1 ) ; }",['Update Literal'],1553
public java.awt.Color METHOD_1 ( ) { return VAR_1 ; },public java.awt.Color METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete FieldRead']",1555
"public synchronized void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , java.lang.String name ) { new TYPE_1 ( VAR_1 , VAR_2 , name , VAR_3 ) ; }","public synchronized void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , java.lang.String name ) { new TYPE_1 ( VAR_1 , VAR_2 , name , this ) ; }","['Update ConstructorCall', 'Insert ThisAccess', 'Delete FieldRead']",1556
void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; },void METHOD_1 ( java.lang.String name ) { this . VAR_1 = name ; },"['Update Parameter', 'Update VariableRead']",1557
public static TYPE_1 METHOD_1 ( java.lang.String key ) { return VAR_1 . remove ( key ) ; },static TYPE_1 METHOD_1 ( java.lang.String key ) { return VAR_1 . remove ( key ) ; },['Delete Wra'],1558
"public void METHOD_1 ( ) throws java.io.IOException , java.lang.ClassNotFoundException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_4 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) ; }","public void METHOD_1 ( ) throws java.io.IOException , java.lang.ClassNotFoundException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_4 ( STRING_1 , STRING_2 , STRING_3 ) ) ; }",['Delete TypeAccess'],1559
"public void METHOD_1 ( int b ) { this . VAR_1 . put ( STRING_1 , b ) ; }","public void METHOD_1 ( int b ) { this . VAR_1 . replace ( STRING_1 , b ) ; }",['Update Invocation'],1560
"private void error ( TYPE_1 VAR_1 , byte VAR_2 ) { VAR_1 . METHOD_1 ( ) . put ( VAR_2 ) ; try { VAR_1 . METHOD_2 ( 1 ) ; } catch ( java.io.IOException VAR_3 ) { } METHOD_3 ( VAR_1 ) ; }","private void error ( TYPE_1 VAR_1 , byte VAR_2 ) { VAR_1 . METHOD_1 ( ) . put ( VAR_2 ) ; try { VAR_1 . METHOD_2 ( 1 ) ; } catch ( java.io.IOException VAR_3 ) { } METHOD_3 ( VAR_1 , null ) ; }",['Insert Literal'],1561
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( ( VAR_4 ) == null ) { VAR_5 = false ; VAR_6 . METHOD_5 ( false ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( ( VAR_4 ) == null ) { VAR_5 = false ; VAR_6 . METHOD_5 ( VAR_5 ) ; } },"['Insert TypeAccess', 'Delete Literal']",1562
"public void METHOD_1 ( ) throws java.lang.Exception { long VAR_1 = METHOD_2 ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_3 = VAR_2 . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) . execute ( ) ; org.testng.Assert.assertEquals ( VAR_4 . size ( ) , 1 ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { long VAR_1 = METHOD_2 ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_3 = VAR_2 . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) . execute ( ) ; assertEquals ( VAR_4 . size ( ) , 1 ) ; }",['Delete FieldRead'],1563
"public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; METHOD_2 ( VAR_1 ) ; return new TYPE_1 ( this . VAR_2 , 1 , VAR_1 ) ; }","public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; METHOD_2 ( VAR_1 ) ; return new TYPE_1 ( this . VAR_2 , 0 , VAR_1 ) ; }",['Update Literal'],1564
public void METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { this . METHOD_2 ( ) ; return ; } ( this . VAR_2 ) -- ; this . VAR_1 . METHOD_3 ( this . VAR_2 ) ; },public void METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { this . METHOD_2 ( ) ; } ( this . VAR_2 ) -- ; this . VAR_1 . METHOD_3 ( this . VAR_2 ) ; },['Delete Return'],1565
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { t . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { VAR_2 . METHOD_3 ( ) ; }","['Delete VariableRead', 'Delete Invocation']",1566
"public static TYPE_1 METHOD_1 ( final java.lang.String name , final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) { return TYPE_4 . METHOD_1 ( name , VAR_3 , VAR_1 , false , VAR_2 ) ; }","public static TYPE_1 METHOD_1 ( final java.lang.String name , final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) { return TYPE_4 . METHOD_1 ( name , VAR_1 , false , VAR_2 ) ; }",['Delete TypeAccess'],1567
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . getValue ( VAR_5 class ) ; VAR_6 . add ( VAR_3 ) ; VAR_7 = new TYPE_3 ( VAR_8 , VAR_9 ) ; VAR_10 . METHOD_2 ( VAR_7 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . getValue ( VAR_5 class ) ; VAR_6 . add ( VAR_3 ) ; VAR_7 = new TYPE_3 ( getActivity ( ) , VAR_9 ) ; VAR_10 . METHOD_2 ( VAR_7 ) ; }","['Insert Invocation', 'Delete FieldRead']",1568
"public boolean METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View VAR_2 , int VAR_3 , long id ) { METHOD_2 ( ( ( TYPE_2 ) ( VAR_4 . METHOD_3 ( VAR_3 ) ) ) , VAR_3 ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View VAR_2 , int VAR_3 , long id ) { METHOD_2 ( ( ( TYPE_2 ) ( VAR_4 . METHOD_3 ( VAR_3 ) ) ) , ( VAR_3 - 1 ) ) ; return true ; }","['Insert BinaryOperator', 'Move VariableRead', 'Insert Literal']",1569
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; VAR_2 . assertNotNull ( VAR_1 . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( ) ; },public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; VAR_2 . assertNotNull ( VAR_1 . METHOD_2 ( ) ) ; },"['Delete VariableRead', 'Delete Invocation']",1570
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { t . METHOD_2 ( ) ; VAR_2 . METHOD_1 ( ) ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { t . METHOD_2 ( ) ; }","['Delete TypeAccess', 'Delete Invocation']",1573
public void METHOD_1 ( java.lang.String error ) { listener . METHOD_2 ( error ) ; },public void METHOD_1 ( java.lang.String error ) { },"['Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",1574
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , boolean VAR_6 , java.lang.String VAR_7 ) ;","public TYPE_1 METHOD_1 ( TYPE_3 VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , boolean VAR_6 , java.lang.String VAR_7 ) ;","['Delete TypeReference', 'Delete Parameter']",1576
"private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { java.lang.String output = VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; output = output + ( METHOD_2 ( VAR_4 ) ) ; return output ; }","private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { java.lang.String output = VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; output = output + ( METHOD_2 ( ) ) ; return output ; }",['Delete TypeAccess'],1577
"public void add ( TYPE_1 VAR_1 ) { add ( VAR_1 , 0 , VAR_2 ) ; }","public void add ( TYPE_1 VAR_1 ) { add ( VAR_1 , 0 ) ; }",['Delete TypeAccess'],1580
"public static TYPE_1 METHOD_1 ( int value , boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 . setValue ( value ) ; VAR_2 . METHOD_2 ( 0 ) ; return TYPE_2 . METHOD_1 ( VAR_2 , VAR_1 ) ; }",public static TYPE_1 METHOD_1 ( int value ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 . setValue ( value ) ; VAR_2 . METHOD_2 ( 0 ) ; return TYPE_2 . METHOD_1 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1582
public boolean isEmpty ( ) { return ( size ( ) ) <= 0 ; },public boolean isEmpty ( ) { return ( size ( ) ) < 0 ; },['Update BinaryOperator'],1583
"public TYPE_1 value ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_1 ( ) ; return new TYPE_4 ( ( VAR_2 == null ? null : VAR_3 . getValue ( ) ) , VAR_1 . METHOD_2 ( ) ) ; }",public TYPE_1 value ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_1 ( ) ; return new TYPE_4 ( ( VAR_2 == null ? null : VAR_3 . getValue ( ) ) ) ; },"['Delete VariableRead', 'Delete Invocation']",1584
"public TYPE_1 put ( TYPE_2 key , TYPE_1 VAR_1 ) { return ! ( VAR_2 . contains ( key ) ) ? super . put ( key , VAR_1 ) : VAR_1 ; }","public TYPE_1 put ( TYPE_2 key , TYPE_1 value ) { return ! ( VAR_2 . contains ( key ) ) ? super . put ( key , value ) : value ; }","['Update Parameter', 'Update VariableRead', 'Update VariableRead']",1586
"public static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_3 ) != null ) VAR_1 . METHOD_2 ( VAR_3 , null ) . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_1 != null ) VAR_1 . METHOD_2 ( VAR_3 , null ) . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Insert VariableRead', 'Delete FieldRead']",1587
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( METHOD_2 ( ) ) { return super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } else { return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; } }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( METHOD_2 ( ) ) { return super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } else { return METHOD_3 ( VAR_1 , VAR_2 ) ; } }",['Delete VariableRead'],1588
"boolean METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) throws TYPE_1 ;","boolean METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_1 ;","['Delete TypeReference', 'Delete Parameter']",1589
private boolean METHOD_1 ( java.lang.String filePath ) { if ( filePath == null ) { return false ; } java.io.File f = new java.io.File ( filePath ) ; return ( f . METHOD_2 ( ) ) && ( ! ( f . METHOD_3 ( ) ) ) ; },private boolean METHOD_1 ( java.lang.String filePath ) { java.io.File f = new java.io.File ( filePath ) ; return ( f . METHOD_2 ( ) ) && ( ! ( f . METHOD_3 ( ) ) ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1590
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( this , STRING_1 , VAR_4 ) . show ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( this , STRING_1 , VAR_4 ) . show ( ) ; }","['Delete TypeAccess', 'Delete Invocation']",1591
"public void METHOD_1 ( ) { assertThat ( VAR_1 . METHOD_2 ( ) , not ( null ) ) ; }","public java.lang.String METHOD_1 ( ) { assertThat ( VAR_1 . METHOD_2 ( ) , not ( null ) ) ; }",['Update TypeReference'],1593
"public void METHOD_1 ( int type , int VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( type , VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( int type , int VAR_1 ) { VAR_3 . METHOD_2 ( type , VAR_1 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1594
private void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) { VAR_2 . show ( 0 ) ; } },private void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) { VAR_2 . show ( ) ; } },['Delete Literal'],1595
"protected abstract TYPE_1 METHOD_1 ( long VAR_1 , long to , java.util.List < TYPE_2 > VAR_2 ) ;","protected abstract TYPE_1 METHOD_1 ( long VAR_1 , java.util.List < TYPE_2 > VAR_2 ) ;","['Delete TypeReference', 'Delete Parameter']",1596
"public void METHOD_1 ( TYPE_1 target , float VAR_1 ) { float VAR_2 = INT_1 ; VAR_3 . METHOD_2 ( VAR_4 , this , target , VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 target , float VAR_1 ) { float VAR_2 = 1 ; VAR_3 . METHOD_2 ( VAR_4 , this , target , VAR_1 , VAR_2 ) ; }","['Insert Literal', 'Delete FieldRead']",1597
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 0 ) ; VAR_1 . METHOD_3 ( 0 ) ; METHOD_4 ( 0 ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 0 ) ; VAR_1 . METHOD_3 ( 0 ) ; METHOD_4 ( 1 ) ; },['Update Literal'],1599
"private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 . METHOD_2 ( VAR_1 ) ) ) ; if ( VAR_2 != null ) { METHOD_3 ( VAR_1 , VAR_2 ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 . METHOD_2 ( VAR_1 ) ) ) ; if ( VAR_2 != null ) { METHOD_3 ( VAR_1 , VAR_2 ) ; } }","['Update Wra', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1601
"public final void METHOD_1 ( ) { VAR_1 . assertEquals ( java.util.Arrays.asList ( INT_1 , INT_2 , INT_3 ) , TYPE_1 . METHOD_2 ( STRING_1 ) ) ; }","public final void METHOD_1 ( ) { VAR_1 . assertEquals ( java.util.Arrays.asList ( INT_3 ) , TYPE_1 . METHOD_2 ( STRING_1 ) ) ; }","['Delete TypeAccess', 'Delete TypeAccess']",1602
protected void init ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( this ) ; METHOD_1 ( VAR_2 ) ; },protected void init ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; METHOD_1 ( VAR_2 ) ; },"['Update ConstructorCall', 'Delete ThisAccess']",1603
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; return VAR_1 ; },['Update Wra'],1604
"public static TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , new java.util.ArrayList < > ( ) ) ) ; }",public static TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; },['Delete ConstructorCall'],1605
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1607
void METHOD_1 ( boolean show ) ;,void METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",1609
private boolean METHOD_1 ( final int x ) { return ( ( VAR_1 ) <= x ) && ( x <= ( VAR_2 ) ) ; },private boolean METHOD_1 ( final int x ) { return ( ( VAR_1 ) <= x ) && ( x < ( VAR_2 ) ) ; },['Update BinaryOperator'],1610
public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_3 . METHOD_3 ( STRING_2 ) ; },public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1611
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_3 [ VAR_4 ] ) - ( VAR_5 [ VAR_6 ] ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_3 [ VAR_4 ] ) - ( VAR_3 [ VAR_4 ] ) ; }","['Update FieldRead', 'Update FieldRead']",1613
"private void METHOD_1 ( ) { for ( java.util.Map.Entry < TYPE_1 , java.awt.Color > VAR_1 : VAR_2 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; }","public void METHOD_1 ( ) { for ( java.util.Map.Entry < TYPE_1 , java.awt.Color > VAR_1 : VAR_2 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; }",['Update Wra'],1614
"public void METHOD_1 ( ) { assertEquals ( VAR_1 . METHOD_2 ( ) . size ( ) , INT_1 ) ; }","public void METHOD_1 ( ) { assertEquals ( VAR_1 . METHOD_2 ( ) . size ( ) , 1 ) ; }","['Insert Literal', 'Delete TypeAccess']",1615
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( TYPE_2 VAR_2 : this ) { TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; VAR_1 = VAR_1 . METHOD_2 ( VAR_3 ) ; } return VAR_1 ; },private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( TYPE_2 VAR_2 : this ) { TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; VAR_1 = VAR_1 . METHOD_2 ( VAR_3 ) ; } return VAR_1 ; },['Update Wra'],1616
"public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { return ! ( ( this . VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ) == null ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { return ! ( ( VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ) == null ) ; }","['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",1617
"private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { names = new TYPE_2 < java.lang.String , TYPE_1 > ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { VAR_3 . put ( VAR_4 . getName ( ) , VAR_2 ) ; } }","private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { names = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { VAR_3 . put ( VAR_4 . getName ( ) , VAR_2 ) ; } }",['Update ConstructorCall'],1618
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { METHOD_2 ( VAR_2 ) ; VAR_1 = false ; } else { METHOD_3 ( ) ; METHOD_4 ( ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { METHOD_2 ( VAR_2 ) ; VAR_1 = false ; } },"['Delete Invocation', 'Delete Invocation', 'Delete Block']",1619
public void METHOD_1 ( java.util.ArrayList list ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { java.lang.System.out.println ( VAR_1 . get ( i ) . toString ( ) ) ; } return ; },public void METHOD_1 ( java.util.ArrayList list ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { java.lang.System.out.println ( VAR_1 . toString ( ) ) ; } return ; },"['Update Invocation', 'Move Invocation', 'Move FieldRead', 'Update Invocation', 'Delete VariableRead', 'Delete Invocation']",1621
public void METHOD_1 ( final TYPE_1 VAR_1 ) { this . VAR_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; },public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",1622
"private void METHOD_1 ( TYPE_1 VAR_1 , final java.lang.String VAR_2 , final TYPE_2 VAR_3 , final TYPE_3 VAR_4 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_4 . METHOD_3 ( ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , final TYPE_2 VAR_3 , final java.lang.String VAR_2 , final TYPE_3 VAR_4 ) { METHOD_2 ( VAR_1 , VAR_3 , VAR_2 ) ; VAR_4 . METHOD_3 ( ) ; }","['Move Parameter', 'Move VariableRead']",1624
public boolean METHOD_1 ( java.lang.String name ) { if ( name == null ) { return false ; } TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( name ) ; return this . remove ( VAR_2 . name ( ) ) ; },public boolean METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( name ) ; return this . remove ( VAR_2 . name ( ) ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1626
public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = ! VAR_1 ; },public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = ! VAR_1 ; },['Delete ThisAccess'],1627
"public void METHOD_1 ( TYPE_1 listener ) { METHOD_2 ( ) ; VAR_1 . add ( new TYPE_2 < TYPE_1 > ( listener , VAR_2 ) ) ; }","public void METHOD_1 ( TYPE_1 listener ) { METHOD_2 ( ) ; VAR_1 . add ( new TYPE_2 < TYPE_1 > ( listener , VAR_2 , true ) ) ; }",['Insert Literal'],1628
"public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( getActivity ( ) , VAR_2 , true ) ; return true ; }","public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( getActivity ( ) , VAR_2 , true ) ; return false ; }",['Update Literal'],1629
"void METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 = TYPE_2 . METHOD_2 ( this , METHOD_3 ( context , VAR_1 , VAR_2 , VAR_3 ) ) ; VAR_4 . METHOD_1 ( ) ; }","void METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 = TYPE_2 . METHOD_2 ( this , METHOD_3 ( context , VAR_1 , VAR_2 , VAR_3 ) ) ; }","['Delete TypeAccess', 'Delete Invocation']",1630
public void METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 ) { VAR_2 = VAR_1 ; },public void METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_2 ) { this . VAR_2 = VAR_2 ; },"['Update Parameter', 'Update VariableRead', 'Insert ThisAccess']",1631
"public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_2 += VAR_1 + ""\n"" ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_2 += VAR_1 ; },"['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",1632
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_2 . start ( ) ; VAR_3 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; },private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_2 . start ( ) ; VAR_3 = new TYPE_2 ( VAR_3 . METHOD_2 ( ) ) ; },['Update TypeAccess'],1633
"public void METHOD_1 ( TYPE_1 position , TYPE_2 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( this . field , position , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 position , TYPE_2 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( field , position , VAR_1 ) ; }",['Delete ThisAccess'],1634
"private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return VAR_1 == null ? null : new TYPE_4 ( VAR_1 , VAR_2 ) ; }",private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_1 == null ? null : new TYPE_4 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1635
"private static java.lang.String METHOD_1 ( java.lang.String url ) throws TYPE_1 , java.io.IOException { return VAR_1 . getString ( new java.io.BufferedReader ( new TYPE_2 ( TYPE_3 . METHOD_2 ( url ) , STRING_1 ) ) ) ; }","private static java.lang.String METHOD_1 ( java.lang.String url ) throws TYPE_1 , java.io.IOException { return VAR_1 . getString ( new java.io.BufferedReader ( new TYPE_2 ( TYPE_3 . METHOD_2 ( url ) ) ) ) ; }",['Delete FieldRead'],1636
"public static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { java.io.BufferedWriter writer = new java.io.BufferedWriter ( new TYPE_2 ( VAR_2 . out ) ) ; TYPE_3 . METHOD_2 ( writer , VAR_1 ) ; writer . METHOD_3 ( ) ; writer . METHOD_4 ( ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { java.io.BufferedWriter writer = new java.io.BufferedWriter ( new TYPE_2 ( VAR_2 . out ) ) ; TYPE_3 . METHOD_2 ( writer , VAR_1 ) ; }","['Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1637
public boolean METHOD_1 ( ) { return ( VAR_1 ) > INT_1 ; },public boolean METHOD_1 ( ) { return ( VAR_1 ) <= INT_1 ; },['Update BinaryOperator'],1638
public java.lang.String METHOD_1 ( ) { return STRING_1 + ( STRING_2 + STRING_3 ) ; },public java.lang.String METHOD_1 ( ) { },"['Delete FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Return']",1639
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_2 , VAR_2 ) , VAR_2 ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( STRING_2 , VAR_2 ) , VAR_2 ) ; }",['Insert VariableRead'],1640
"public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; }","public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }",['Delete TypeAccess'],1642
private long add ( long VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 . add ( VAR_1 ) ; } return VAR_4 . METHOD_1 ( VAR_1 ) ; },public long add ( long VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 . add ( VAR_1 ) ; } return VAR_4 . METHOD_1 ( VAR_1 ) ; },['Update Wra'],1643
"private void METHOD_1 ( double a , double b ) { VAR_1 = a + b ; VAR_2 = b - ( ( VAR_1 ) - a ) ; }","private void METHOD_1 ( double a , double b ) { VAR_1 = a + b ; VAR_2 = b - ( ( VAR_2 ) - a ) ; }",['Update FieldRead'],1646
public final boolean isEmpty ( ) { return ( count ) == 0 ; },public boolean isEmpty ( ) { return ( first ) == null ; },"['Update FieldRead', 'Update Literal', 'Delete Wra']",1647
"private void METHOD_1 ( java.lang.String name ) { if ( ! ( VAR_1 . METHOD_1 ( name , STRING_1 ) ) ) { java.lang.System.out.println ( STRING_2 ) ; } }",private void METHOD_1 ( java.lang.String name ) { if ( ! ( VAR_1 . METHOD_1 ( name ) ) ) { java.lang.System.out.println ( STRING_2 ) ; } },['Delete TypeAccess'],1648
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; return STRING_3 ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 ) ; return STRING_3 ; },"['Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1650
"public void append ( TYPE_1 VAR_1 ) { TYPE_2 node = new TYPE_2 ( VAR_1 , this . VAR_2 ) ; VAR_3 = this ; VAR_4 = this . VAR_5 ; if ( ( VAR_5 ) != null ) VAR_6 = node ; this . VAR_5 = node ; }",public void append ( TYPE_1 VAR_1 ) { TYPE_2 node = new TYPE_2 ( VAR_1 ) ; VAR_3 = this ; VAR_4 = this . VAR_5 ; if ( ( VAR_5 ) != null ) VAR_6 = node ; this . VAR_5 = node ; },"['Delete ThisAccess', 'Delete FieldRead']",1652
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; java.lang.System.out.println ( STRING_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; java.lang.System.out.println ( STRING_1 ) ; },"['Delete TypeAccess', 'Delete Invocation']",1653
"public void METHOD_1 ( ) { TYPE_1 VAR_1 ; VAR_1 = VAR_2 . get ( 0 ) ; VAR_3 . METHOD_2 ( this , VAR_1 ) ; }","public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 ; VAR_1 = VAR_2 . get ( 0 ) ; VAR_3 . METHOD_2 ( this , VAR_1 ) ; }","['Insert Parameter', 'Insert TypeReference']",1655
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) . getString ( STRING_1 ) ; if ( TYPE_1 . METHOD_3 ( VAR_1 ) ) { return VAR_2 . getString ( STRING_2 ) ; } return VAR_1 ; },public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) . getString ( STRING_1 ) ; if ( TYPE_1 . METHOD_3 ( VAR_1 ) ) { return VAR_2 . getString ( STRING_2 ) ; } return null ; },"['Insert Literal', 'Delete VariableRead']",1656
public synchronized void METHOD_1 ( boolean VAR_1 ) { this . VAR_1 = VAR_1 ; METHOD_2 ( ) ; },private synchronized void METHOD_1 ( boolean VAR_1 ) { this . VAR_1 = VAR_1 ; METHOD_2 ( ) ; },['Update Wra'],1657
private int [ ] [ ] [ ] METHOD_1 ( ) { METHOD_2 ( ) ; return VAR_1 ; },public int [ ] [ ] [ ] METHOD_1 ( ) { METHOD_2 ( ) ; return VAR_1 ; },['Update Wra'],1658
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 = VAR_4 . METHOD_2 ( 0 ) ; VAR_5 = VAR_3 ; VAR_6 = - 1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 ; VAR_3 = VAR_4 . METHOD_2 ( 0 ) ; VAR_5 = VAR_3 ; VAR_6 = - 1 ; },['Insert ThisAccess'],1659
"public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_4 , STRING_1 ) ; VAR_5 . METHOD_3 ( ) ; return false ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_4 , STRING_1 ) ; return false ; }","['Delete TypeAccess', 'Delete Invocation']",1660
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ( STRING_1 + ( VAR_2 ) ) ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ( STRING_1 + ( VAR_2 ) ) ) ; },['Insert ThisAccess'],1661
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( INT_1 ) ; VAR_2 . METHOD_2 ( INT_2 ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( INT_2 ) ; VAR_2 . METHOD_2 ( INT_1 ) ; },"['Move TypeAccess', 'Move TypeAccess']",1662
public void METHOD_1 ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { java.lang.System.out.print ( ( ( METHOD_2 ( ) ) + STRING_1 ) ) ; } },public void METHOD_1 ( int n ) { for ( int i = 1 ; i < n ; i ++ ) { java.lang.System.out.print ( ( ( METHOD_2 ( ) ) + STRING_1 ) ) ; } },['Update BinaryOperator'],1663
public void METHOD_1 ( ) throws TYPE_1 { java.lang.String [ ] args = new java.lang.String [ 0 ] ; VAR_1 . main = new TYPE_2 ( VAR_2 ) ; VAR_3 . start ( ) ; },public void METHOD_1 ( ) throws TYPE_1 { java.lang.String [ ] args = new java.lang.String [ 0 ] ; VAR_1 . main = new TYPE_2 ( args ) ; VAR_3 . start ( ) ; },"['Update ConstructorCall', 'Insert VariableRead', 'Delete FieldRead']",1664
public final void METHOD_1 ( final double add ) { this . x += add ; },public void METHOD_1 ( final double x ) { this . x += x ; },"['Update Parameter', 'Update VariableRead', 'Delete Wra']",1665
private void METHOD_1 ( ) { source . METHOD_2 ( ) ; while ( METHOD_3 ( source . METHOD_4 ( ) ) ) { source . METHOD_2 ( ) ; } },protected void METHOD_1 ( ) { source . METHOD_2 ( ) ; while ( METHOD_3 ( source . METHOD_4 ( ) ) ) { source . METHOD_2 ( ) ; } },['Update Wra'],1666
"private TYPE_1 METHOD_1 ( java.io.File file , int VAR_1 , int VAR_2 ) { return METHOD_2 ( TYPE_2 . METHOD_3 ( file , VAR_1 , VAR_2 , VAR_3 ) ) ; }","private TYPE_1 METHOD_1 ( java.io.File file , int VAR_2 ) { return METHOD_2 ( TYPE_2 . METHOD_3 ( file , VAR_2 ) ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete TypeAccess']",1667
"private void METHOD_1 ( java.lang.String key , java.util.Set < TYPE_1 > VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 , TYPE_3 : : toString ) ; VAR_3 . METHOD_3 ( ) . METHOD_4 ( key , VAR_2 ) . METHOD_5 ( ) ; }","private void METHOD_1 ( java.lang.String key , java.util.Set < TYPE_1 > VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 , TYPE_3 : : toString ) ; VAR_3 . METHOD_3 ( ) . METHOD_4 ( key , VAR_2 ) . commit ( ) ; }",['Update Invocation'],1668
"TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { return new TYPE_1 ( VAR_1 , VAR_2 , new TYPE_6 ( this , new TYPE_7 ( ) ) , VAR_3 , VAR_4 ) ; }","TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { return new TYPE_1 ( VAR_1 , VAR_2 , new TYPE_6 ( this , new TYPE_7 ( ) ) , VAR_3 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1669
"public java.util.Map < java.lang.Integer , java.lang.Object > METHOD_1 ( ) { return ( VAR_1 ) == null ? new java.util.HashMap < java.lang.Integer , java.lang.Object > ( ) : VAR_1 . METHOD_1 ( ) ; }","public java.util.Map < java.lang.Integer , java.lang.Object > METHOD_1 ( ) { return ( VAR_1 ) == null ? null : VAR_1 . METHOD_1 ( ) ; }","['Insert Literal', 'Delete ConstructorCall']",1670
private void METHOD_1 ( TYPE_1 event ) throws java.io.IOException { ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; },protected void METHOD_1 ( TYPE_1 event ) throws java.io.IOException { ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; },['Update Wra'],1671
public boolean METHOD_1 ( ) { return ( value ) != null ; },public boolean METHOD_1 ( ) { return ( value ) == null ; },['Update BinaryOperator'],1672
public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { VAR_2 . METHOD_1 ( VAR_1 ) ; },"public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { VAR_2 . METHOD_1 ( VAR_1 , 0 ) ; }",['Insert Literal'],1673
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 1 , ( 1 + ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) ; VAR_1 . METHOD_5 ( ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 0 , ( 1 + ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) ; VAR_1 . METHOD_5 ( ) ; }",['Update Literal'],1674
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; METHOD_4 ( ) ; },['Delete Invocation'],1675
"public void METHOD_1 ( ) { assertEquals ( INT_1 , ( ( long ) ( METHOD_2 ( b . METHOD_1 ( INT_1 ) ) ) ) ) ; }","public void METHOD_1 ( ) { assertEquals ( INT_1 , METHOD_2 ( b . METHOD_1 ( INT_1 ) ) ) ; }",['Delete TypeReference'],1676
"public < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( final java.lang.Class < TYPE_1 > VAR_1 , java.lang.String VAR_2 , java.lang.String id , java.lang.String VAR_3 ) throws java.lang.Exception { return null ; }","public < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( final java.lang.Class < TYPE_1 > VAR_1 , java.lang.String id , java.lang.String VAR_3 ) throws java.lang.Exception { return null ; }","['Delete TypeReference', 'Delete Parameter']",1677
"private boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case INT_1 : return METHOD_2 ( VAR_3 , 1 ) ; case INT_2 : return METHOD_2 ( VAR_3 , INT_1 ) ; } return true ; }","private boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case 1 : return METHOD_2 ( VAR_3 , INT_2 ) ; case INT_1 : return METHOD_2 ( VAR_3 , INT_1 ) ; } return true ; }","['Move Literal', 'Move FieldRead', 'Insert TypeAccess', 'Delete FieldRead']",1678
"public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_2 . add ( 0 , VAR_2 . remove ( VAR_3 ) ) ; VAR_4 . METHOD_2 ( VAR_5 ) ; VAR_6 . METHOD_3 ( null ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_2 . add ( 0 , VAR_2 . remove ( VAR_3 ) ) ; VAR_4 . METHOD_2 ( VAR_5 ) ; }","['Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",1679
private boolean METHOD_1 ( ) { for ( TYPE_1 [ ] VAR_1 : VAR_2 ) { for ( TYPE_1 b : VAR_1 ) { if ( b . METHOD_2 ( ) ) return true ; } } return false ; },public boolean METHOD_1 ( ) { for ( TYPE_1 [ ] VAR_1 : VAR_2 ) { for ( TYPE_1 b : VAR_1 ) { if ( b . METHOD_2 ( ) ) return true ; } } return false ; },['Update Wra'],1680
public static void METHOD_1 ( double VAR_1 ) { final double VAR_2 = FLOAT_1 ; double VAR_3 ; VAR_3 = VAR_1 / VAR_2 ; java.lang.System.out.println ( ( STRING_1 + VAR_3 ) ) ; },public static void METHOD_1 ( double VAR_1 ) { final double VAR_2 = FLOAT_1 ; double VAR_3 ; VAR_3 = VAR_1 * VAR_2 ; java.lang.System.out.println ( ( STRING_1 + VAR_3 ) ) ; },['Update BinaryOperator'],1681
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( index , VAR_1 . toString ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( index , text ) ; }","['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1683
public void METHOD_1 ( double VAR_1 ) { this . VAR_1 = VAR_1 / INT_1 ; },public void METHOD_1 ( double VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",1684
public java.lang.String METHOD_1 ( java.lang.Long id ) { TYPE_1 VAR_1 = METHOD_2 ( id ) ; if ( VAR_1 != null ) { VAR_2 . remove ( VAR_1 ) ; return STRING_1 ; } else { return STRING_2 ; } },public java.lang.String METHOD_1 ( java.lang.Long id ) { TYPE_1 VAR_1 = METHOD_2 ( new java.lang.Long ( id ) ) ; if ( VAR_1 != null ) { VAR_2 . remove ( VAR_1 ) ; return STRING_1 ; } else { return STRING_2 ; } },"['Insert ConstructorCall', 'Move VariableRead']",1685
"public static void METHOD_1 ( java.lang.String VAR_1 , java.util.Map < java.lang.String , java.lang.String > VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) { VAR_3 . METHOD_3 ( ( STRING_1 + VAR_1 ) , VAR_2 ) ; } }","public static void METHOD_1 ( java.lang.String id , java.util.Map < java.lang.String , java.lang.String > VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) { VAR_3 . METHOD_3 ( ( STRING_1 + id ) , VAR_2 ) ; } }","['Update Parameter', 'Update VariableRead']",1686
"public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 item : VAR_2 ) { VAR_3 . METHOD_2 ( item , 1 , true ) ; VAR_4 . METHOD_3 ( item , 1 , false , true ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 item : VAR_2 ) { VAR_3 . METHOD_2 ( item , 1 ) ; VAR_4 . METHOD_3 ( item , 1 , false ) ; } }","['Delete Literal', 'Delete Literal']",1687
"public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.String message ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( null ) ; VAR_2 . METHOD_3 ( VAR_1 , message ) ; } }","protected void METHOD_1 ( java.lang.Object VAR_1 , java.lang.String message ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( null ) ; VAR_2 . METHOD_3 ( VAR_1 , message ) ; } }",['Update Wra'],1688
"public void METHOD_1 ( boolean VAR_1 , int index ) { VAR_2 [ ( INT_1 - index ) ] = VAR_1 ; }","public void METHOD_1 ( boolean VAR_1 , int index ) { VAR_2 [ index ] = VAR_1 ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",1690
"public boolean METHOD_1 ( int x , int y ) { return ( ( ( x > ( VAR_1 ) ) && ( x < ( VAR_2 ) ) ) && ( y > ( VAR_3 ) ) ) && ( y < ( VAR_4 ) ) ; }","private boolean METHOD_1 ( int x , int y ) { return ( ( ( x > ( VAR_1 ) ) && ( x < ( VAR_2 ) ) ) && ( y > ( VAR_3 ) ) ) && ( y < ( VAR_4 ) ) ; }",['Update Wra'],1691
"public void METHOD_1 ( int VAR_1 , boolean VAR_2 ) { if ( ! ( VAR_3 ) ) { VAR_4 = new java.util.Date ( ) . getTime ( ) ; } VAR_5 = VAR_1 ; }",public void METHOD_1 ( int VAR_1 ) { if ( ! ( VAR_3 ) ) { VAR_4 = new java.util.Date ( ) . getTime ( ) ; } VAR_5 = VAR_1 ; },"['Delete TypeReference', 'Delete Parameter']",1692
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View VAR_3 = VAR_4 . METHOD_2 ( VAR_5 , VAR_1 , false ) ; TYPE_1 VAR_6 = new TYPE_1 ( VAR_3 ) ; return VAR_6 ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View VAR_3 = VAR_4 . METHOD_2 ( VAR_5 , null ) ; TYPE_1 VAR_6 = new TYPE_1 ( VAR_3 ) ; return VAR_6 ; }","['Update Literal', 'Delete VariableRead']",1694
"public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { VAR_2 . setText ( VAR_3 [ ( position % INT_1 ) ] ) ; VAR_1 . METHOD_2 ( position ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { VAR_2 . setText ( VAR_3 [ ( position % INT_1 ) ] ) ; }","['Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1696
private boolean METHOD_1 ( double x ) { return ( VAR_1 . METHOD_2 ( ) ) <= x ; },private boolean METHOD_1 ( double x ) { return ( VAR_1 . METHOD_2 ( ) ) < x ; },['Update BinaryOperator'],1697
"private void METHOD_1 ( long id ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) ; VAR_2 . delete ( VAR_3 , ( ( VAR_4 ) + STRING_1 ) , new java.lang.String [ ] { java.lang.String . METHOD_3 ( id ) } ) ; }","public void METHOD_1 ( long id ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) ; VAR_2 . delete ( VAR_3 , ( ( VAR_4 ) + STRING_1 ) , new java.lang.String [ ] { java.lang.String . METHOD_3 ( id ) } ) ; }",['Update Wra'],1698
public void METHOD_1 ( ) { VAR_1 . assertTrue ( VAR_2 . isEmpty ( STRING_1 ) ) ; },public void METHOD_1 ( ) { assertTrue ( VAR_2 . isEmpty ( STRING_1 ) ) ; },['Update TypeAccess'],1699
"public TYPE_1 METHOD_1 ( TYPE_2 [ ] args ) { return METHOD_2 ( args , VAR_1 , false ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 [ ] args ) { return METHOD_2 ( args , VAR_1 , false , true ) ; }",['Insert Literal'],1700
void METHOD_1 ( android.content.Context VAR_1 ) ;,void METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",1701
"public void METHOD_1 ( java.lang.String data , TYPE_1 VAR_1 , java.lang.String time , TYPE_2 VAR_2 ) { VAR_2 . METHOD_2 ( VAR_1 , java.lang.String.format ( STRING_1 , VAR_3 , data ) ) ; }","public void METHOD_1 ( java.lang.String data , TYPE_1 VAR_1 , java.lang.String time , TYPE_2 VAR_2 ) { java.lang.System.out.println ( data ) ; VAR_2 . METHOD_2 ( VAR_1 , java.lang.String.format ( STRING_1 , VAR_3 , data ) ) ; }","['Insert Invocation', 'Insert FieldRead', 'Insert VariableRead', 'Insert TypeAccess']",1702
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; VAR_2 . METHOD_2 ( STRING_2 , VAR_1 ) ; return VAR_2 ; }",public TYPE_1 METHOD_1 ( java.lang.Integer id ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; return VAR_2 ; },"['Update Parameter', 'Update TypeReference', 'Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1703
"public boolean METHOD_1 ( java.io.File VAR_1 , java.lang.String name ) { return VAR_2 . contains ( ( VAR_3 + STRING_1 ) ) ; }","public boolean METHOD_1 ( java.io.File VAR_1 , java.lang.String name ) { return VAR_2 . contains ( VAR_3 ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1704
public void start ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 . start ( ) ; } },public void start ( ) { if ( ( VAR_1 ) != null ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 . start ( ) ; } },['Update BinaryOperator'],1705
"public void count ( ) { VAR_1 . METHOD_1 ( ) . METHOD_2 ( VAR_2 , ( ( VAR_3 . getInt ( VAR_2 , 0 ) ) + 1 ) ) . METHOD_3 ( ) ; }","public void count ( ) { VAR_1 . METHOD_1 ( ) . METHOD_2 ( VAR_2 , ( ( VAR_3 . getInt ( VAR_2 , 0 ) ) + 1 ) ) . commit ( ) ; }",['Update Invocation'],1706
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String status ) throws TYPE_2 ;",public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException ;,"['Update TypeReference', 'Delete TypeReference', 'Delete Parameter']",1707
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) ;,METHOD_1 ( TYPE_2 VAR_1 ) { },['Delete TypeReference'],1708
"public TYPE_1 < TYPE_2 > METHOD_1 ( int id , TYPE_3 args ) { return new TYPE_4 ( this , id , args ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( int id , TYPE_3 args ) { return new TYPE_4 ( this , id , args , null ) ; }",['Insert Literal'],1709
"private int METHOD_1 ( int index , int length ) { if ( index < 0 ) { return index + length ; } if ( index > ( length - 1 ) ) { return index % length ; } return index ; }","private int METHOD_1 ( int index , int length ) { if ( index > ( length - 1 ) ) { return index % length ; } return index ; }","['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1711
"public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { java.lang.String VAR_1 = intent . METHOD_2 ( ) ; if ( VAR_2 . equals ( VAR_3 ) ) { METHOD_3 ( context ) ; } }","public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { java.lang.String VAR_1 = intent . METHOD_2 ( ) ; if ( VAR_2 . equals ( VAR_3 ) ) { METHOD_3 ( ) ; } }",['Delete VariableRead'],1712
"public java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( null , null , null ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( null , null ) ; }",['Delete Literal'],1714
"private int METHOD_1 ( java.lang.String title ) { java.lang.Object [ ] VAR_1 = new java.lang.Object [ ] { STRING_1 , STRING_2 } ; return TYPE_1 . METHOD_2 ( VAR_2 , title , STRING_3 , VAR_3 , VAR_4 , null , VAR_1 , VAR_1 [ 0 ] ) ; }","public int METHOD_1 ( java.lang.String title ) { java.lang.Object [ ] VAR_1 = new java.lang.Object [ ] { STRING_1 , STRING_2 } ; return TYPE_1 . METHOD_2 ( VAR_2 , title , STRING_3 , VAR_3 , VAR_4 , null , VAR_1 , VAR_1 [ 0 ] ) ; }",['Update Wra'],1715
private TYPE_1 METHOD_1 ( java.lang.Integer position ) { return this . VAR_1 . get ( position ) ; },public TYPE_1 METHOD_1 ( java.lang.Integer position ) { return this . VAR_1 . get ( position ) ; },['Update Wra'],1717
public boolean contains ( java.lang.Object VAR_1 ) { if ( ( VAR_1 == null ) || ( ! ( VAR_1 instanceof java.lang.String ) ) ) return false ; return VAR_2 . contains ( ( ( java.lang.String ) ( VAR_1 ) ) . toLowerCase ( ) ) ; },public boolean contains ( java.lang.Object VAR_1 ) { if ( ( VAR_1 == null ) && ( ! ( VAR_1 instanceof java.lang.String ) ) ) return false ; return VAR_2 . contains ( ( ( java.lang.String ) ( VAR_1 ) ) . toLowerCase ( ) ) ; },['Update BinaryOperator'],1718
"TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.Class < TYPE_1 > VAR_2 ) throws TYPE_2 ;","TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.Object data , java.lang.Class < TYPE_1 > VAR_2 ) throws TYPE_2 ;","['Insert Parameter', 'Insert TypeReference']",1719
"void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 writer ) throws TYPE_3 { boolean VAR_2 = false ; VAR_2 = VAR_2 | ( METHOD_2 ( VAR_2 , VAR_1 , writer ) ) ; if ( VAR_2 ) { writer . METHOD_3 ( ) ; } }","void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 writer ) throws TYPE_3 { boolean VAR_2 = false ; VAR_2 = VAR_2 & ( METHOD_2 ( VAR_2 , VAR_1 , writer ) ) ; if ( VAR_2 ) { writer . METHOD_3 ( ) ; } }",['Update BinaryOperator'],1721
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation']",1722
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , boolean VAR_4 ) { VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; this . METHOD_2 ( VAR_1 , VAR_2 ) ; return this . METHOD_1 ( VAR_3 , VAR_4 ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , boolean VAR_4 ) { VAR_2 . METHOD_2 ( ) ; this . METHOD_2 ( VAR_1 , VAR_2 ) ; return this . METHOD_1 ( VAR_3 , VAR_4 ) ; }","['Delete VariableRead', 'Delete Invocation']",1723
"public static boolean METHOD_1 ( java.lang.Class VAR_1 ) { return ( TYPE_1 . METHOD_2 ( new TYPE_2 ( VAR_1 ) , null ) ) != null ; }",public static boolean METHOD_1 ( java.lang.Class VAR_1 ) { return ( TYPE_1 . METHOD_2 ( VAR_1 ) ) != null ; },"['Move Literal', 'Move VariableRead', 'Delete ConstructorCall', 'Delete Literal']",1724
public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; return null ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; },"['Update TypeReference', 'Delete Literal', 'Delete Return']",1725
public java.lang.String METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) + STRING_1 ) + ( METHOD_3 ( ) ) ; },public java.lang.String METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) + STRING_1 ) + ( getTime ( ) ) ; },['Update Invocation'],1727
"protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 , ( ( float ) ( FLOAT_1 ) ) , STRING_3 , STRING_4 , STRING_5 , STRING_6 ) ; return VAR_1 ; }","protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 , ( ( float ) ( FLOAT_1 ) ) , STRING_3 , STRING_4 , STRING_5 ) ; return VAR_1 ; }",['Delete FieldRead'],1729
"public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( VAR_1 , VAR_3 ) . METHOD_4 ( ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( VAR_1 , VAR_3 ) . METHOD_4 ( ) ; }",['Delete TypeAccess'],1731
public boolean METHOD_1 ( float VAR_1 ) { return ( TYPE_1 . METHOD_2 ( VAR_1 ) ) > 0 ; },public boolean METHOD_1 ( float VAR_1 ) { return VAR_1 > 0 ; },"['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1732
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( METHOD_5 ( new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 } ) ) ; METHOD_6 ( ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( METHOD_5 ( new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 } ) ) ; METHOD_6 ( ) ; }",['Update TypeAccess'],1733
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_2 . METHOD_2 ( ) ; }",public void METHOD_1 ( ) { METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1734
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; super . METHOD_1 ( ) ; },protected void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; super . METHOD_1 ( ) ; },['Update Wra'],1736
"public void init ( TYPE_1 VAR_1 , long id ) { METHOD_1 ( METHOD_2 ( ) , 1 , VAR_1 . METHOD_2 ( ) , id ) ; init ( ) ; }","public void init ( TYPE_1 VAR_1 , java.lang.String name ) { METHOD_1 ( METHOD_2 ( ) , 1 , VAR_1 . METHOD_2 ( ) , name ) ; init ( ) ; }","['Update Parameter', 'Update TypeReference', 'Update VariableRead']",1737
public java.lang.String execute ( ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( this ) ; return VAR_2 ; } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_3 ( ) ; return VAR_4 ; } },public java.lang.String execute ( ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( this ) ; return VAR_2 ; } catch ( java.io.IOException VAR_3 ) { return VAR_4 ; } },"['Delete VariableRead', 'Delete Invocation']",1738
public boolean METHOD_1 ( java.lang.String key ) { VAR_1 . METHOD_2 ( key ) ; return true ; },private boolean METHOD_1 ( java.lang.String key ) { VAR_1 . METHOD_2 ( key ) ; return true ; },['Update Wra'],1741
public TYPE_1 getType ( ) { return this . type ; },public TYPE_1 getType ( ) { return type ; },['Delete ThisAccess'],1742
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ; if ( ( VAR_2 ) != null ) VAR_1 . METHOD_2 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_1 . METHOD_2 ( VAR_2 ) ; },"['Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation']",1743
"public abstract void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) ;",public abstract void METHOD_1 ( TYPE_1 VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",1744
"TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.util.List < TYPE_2 > VAR_4 , java.lang.String VAR_5 ) ;","METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.util.List < TYPE_2 > VAR_4 , java.lang.String VAR_5 ) { }",['Delete TypeReference'],1745
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int i ) { android.view.View VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 . getContext ( ) ) . METHOD_3 ( VAR_4 , VAR_1 , false ) ; return new TYPE_1 ( VAR_2 , VAR_5 . get ( i ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int i ) { android.view.View VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 . getContext ( ) ) . METHOD_3 ( VAR_4 , VAR_1 , false ) ; return new TYPE_1 ( VAR_2 ) ; }","['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1746
"void METHOD_1 ( java.lang.String VAR_1 , short VAR_2 ) { VAR_3 . put ( VAR_1 , ( ( int ) ( VAR_2 ) ) ) ; }","void METHOD_1 ( java.lang.String VAR_1 , short VAR_2 ) { VAR_3 . put ( VAR_2 , VAR_1 ) ; }","['Move VariableRead', 'Delete TypeReference']",1747
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( false ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; },['Update Literal'],1748
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { METHOD_2 ( ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) throws TYPE_2 { METHOD_2 ( ) ; return this . VAR_1 ; },['Insert ThisAccess'],1749
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this ) ; },['Update Wra'],1750
"private TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( STRING_1 , ""type"" , STRING_2 ) ; }","private TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( STRING_1 , ""type"" ) ; }",['Delete FieldRead'],1751
"private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( STRING_1 , true ) ; METHOD_3 ( intent ) ; }","private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; METHOD_3 ( intent ) ; }","['Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",1752
"public void append ( TYPE_1 event ) { final TYPE_2 VAR_1 = event . METHOD_1 ( ) ; if ( VAR_1 != null ) { TYPE_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; } }","public void append ( TYPE_1 event ) { final TYPE_2 VAR_1 = event . METHOD_1 ( ) ; if ( VAR_1 != null ) { TYPE_3 . METHOD_2 ( VAR_2 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; } }","['Delete TypeAccess', 'Delete Invocation']",1753
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; return VAR_2 . get ( VAR_3 . toLowerCase ( ) ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; return VAR_2 . get ( VAR_3 . toUpperCase ( ) ) ; },['Update Invocation'],1754
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Throwable VAR_2 ) throws TYPE_2 , java.io.IOException { TYPE_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_4 . toString ( ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Throwable VAR_2 ) throws TYPE_2 , java.io.IOException { TYPE_3 . METHOD_2 ( ) ; VAR_3 . METHOD_4 ( VAR_4 . toString ( ) ) ; }","['Delete VariableRead', 'Delete Invocation']",1755
private static void METHOD_1 ( ) { java.lang.System.out.print ( STRING_1 ) ; },public static void METHOD_1 ( ) { java.lang.System.out.print ( STRING_1 ) ; },['Update Wra'],1756
private void METHOD_1 ( ) { for ( java.util.List < TYPE_1 > VAR_1 : VAR_2 . values ( ) ) { for ( TYPE_1 p : VAR_1 ) { p . METHOD_2 ( true ) ; p . METHOD_3 ( true ) ; } } VAR_3 = true ; },private void METHOD_1 ( ) { for ( java.util.List < TYPE_1 > VAR_1 : VAR_2 . values ( ) ) { for ( TYPE_1 p : VAR_1 ) { p . METHOD_2 ( true ) ; } } VAR_3 = true ; },"['Delete VariableRead', 'Delete Literal', 'Delete Invocation']",1757
public void METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( new TYPE_2 ( ) . METHOD_2 ( ) ) ) ; METHOD_3 ( VAR_1 ) ; VAR_2 = VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 = VAR_1 . METHOD_4 ( ) ; },"['Insert ConstructorCall', 'Delete TypeReference', 'Delete ConstructorCall', 'Delete Invocation']",1758
"public TYPE_1 append ( java.lang.String fieldName , java.lang.Object VAR_1 ) { if ( fieldName != null ) { METHOD_1 ( fieldName ) ; METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; } return this ; }","public TYPE_1 append ( java.lang.String fieldName , java.lang.Object VAR_1 ) { if ( fieldName != null ) { VAR_2 . METHOD_1 ( VAR_3 , fieldName ) ; METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; } return this ; }",['Insert TypeAccess'],1759
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 ) { return METHOD_2 ( false , VAR_1 , VAR_3 , VAR_2 ) ; }","private TYPE_1 METHOD_1 ( TYPE_2 node , TYPE_2 VAR_3 , TYPE_2 VAR_2 ) { return METHOD_2 ( false , node , VAR_3 , VAR_2 ) ; }","['Move Parameter', 'Update Parameter', 'Update VariableRead']",1760
"public TYPE_1 METHOD_1 ( int VAR_1 ) { java.lang.Float value = VAR_2 . METHOD_2 ( ) ; if ( value != null ) return METHOD_3 ( VAR_1 , value ) ; return null ; }",public TYPE_1 METHOD_1 ( ) { java.lang.Float value = VAR_2 . METHOD_2 ( ) ; if ( value != null ) return METHOD_3 ( value ) ; return null ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1761
private void METHOD_1 ( ) { VAR_1 = new java.util.LinkedList < TYPE_1 > ( ) ; VAR_2 = new java.util.ArrayList < TYPE_2 > ( ) ; VAR_3 = new java.util.LinkedList < TYPE_1 > ( ) ; VAR_4 = 0 ; },private void METHOD_1 ( ) { VAR_1 = new java.util.LinkedList < TYPE_1 > ( ) ; VAR_2 = new java.util.ArrayList < TYPE_2 > ( ) ; VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_4 = 0 ; },['Update ConstructorCall'],1763
public < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 > type ) throws TYPE_3 { VAR_1 . METHOD_2 ( ) ; return ( ( TYPE_4 ) ( VAR_2 ) ) . METHOD_1 ( type ) ; },public < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 > type ) throws TYPE_3 { VAR_1 . METHOD_2 ( ) ; return VAR_2 . METHOD_1 ( type ) ; },['Delete TypeReference'],1764
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( STRING_1 , INT_1 , INT_2 ) ; VAR_2 . assertEquals ( STRING_2 , VAR_1 . METHOD_2 ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( STRING_1 , INT_1 , INT_2 ) ; assertEquals ( STRING_2 , VAR_1 . METHOD_2 ( ) ) ; }",['Update TypeAccess'],1765
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_1 VAR_2 = new TYPE_1 ( ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_2 ( new TYPE_2 ( VAR_1 ) ) ; } return VAR_2 ; },public static TYPE_1 METHOD_1 ( java.lang.String str ) throws java.io.IOException { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( new TYPE_2 ( str ) ) ; return VAR_2 ; },"['Update Parameter', 'Insert Invocation', 'Move VariableRead', 'Insert ConstructorCall', 'Insert VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete Block', 'Delete If']",1766
public void METHOD_1 ( TYPE_1 VAR_1 ) { ( VAR_2 ) ++ ; VAR_3 = ( ( double ) ( VAR_2 ) ) / FLOAT_1 ; VAR_4 = new java.lang.Double ( VAR_3 ) . toString ( 1.0 ) ; VAR_5 . setText ( VAR_4 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { ( VAR_2 ) ++ ; VAR_3 = ( ( double ) ( VAR_2 ) ) / FLOAT_1 ; VAR_4 = new java.lang.Double ( VAR_3 ) . toString ( ) ; VAR_5 . setText ( VAR_4 ) ; },['Delete Literal'],1767
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; },"['Delete TypeAccess', 'Delete Invocation']",1768
"public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_1 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; },"['Delete VariableRead', 'Delete Invocation']",1769
"public TYPE_1 METHOD_1 ( final int VAR_1 , TYPE_2 VAR_2 , TYPE_3 type , boolean VAR_3 , TYPE_4 VAR_4 ) throws java.lang.Exception { return METHOD_1 ( VAR_1 , VAR_2 , type , VAR_3 , VAR_4 , null ) ; }","public TYPE_1 METHOD_1 ( final int VAR_1 , TYPE_2 VAR_2 , TYPE_3 type , TYPE_4 VAR_4 ) throws java.lang.Exception { return METHOD_1 ( VAR_1 , VAR_2 , type , VAR_4 , null ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1770
"protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) , VAR_1 . not ( METHOD_3 ( ) ) , new TYPE_3 ( METHOD_4 ( ) ) , null ) ; }","protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) , VAR_1 . not ( METHOD_3 ( ) ) , null , null ) ; }","['Insert Literal', 'Delete Invocation', 'Delete ConstructorCall']",1771
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = getActivity ( ) . METHOD_2 ( VAR_3 ) ; } },"['Insert Invocation', 'Delete TypeAccess']",1772
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; boolean VAR_2 = ! ( VAR_3 . METHOD_2 ( ) ) ; VAR_4 . setEnabled ( VAR_2 ) ; VAR_5 . setEnabled ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; boolean VAR_2 = ! ( VAR_3 . METHOD_2 ( ) ) ; VAR_4 . setEnabled ( VAR_2 ) ; },"['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1773
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; new TYPE_2 ( ) . METHOD_3 ( this ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; new TYPE_2 ( ) . show ( this ) ; }",['Update Invocation'],1775
"public static void METHOD_1 ( android.content.Context context ) { java.lang.String url = VAR_1 ; new TYPE_1 ( url , false , VAR_2 , VAR_3 , context ) . METHOD_2 ( VAR_4 ) ; }","public static void METHOD_1 ( android.content.Context context ) { java.lang.String url = VAR_1 ; new TYPE_1 ( url , true , VAR_2 , VAR_3 , context ) . METHOD_2 ( VAR_4 ) ; }",['Update Literal'],1776
private void METHOD_1 ( ) { VAR_1 = VAR_2 ; VAR_3 = ( METHOD_2 ( ) ) * FLOAT_1 ; VAR_4 = ( - ( METHOD_2 ( ) ) ) * FLOAT_2 ; VAR_5 = ( METHOD_3 ( ) ) * FLOAT_3 ; },private void METHOD_1 ( ) { VAR_1 = VAR_2 ; VAR_3 = ( METHOD_2 ( ) ) * FLOAT_2 ; VAR_4 = ( - ( METHOD_2 ( ) ) ) * FLOAT_1 ; VAR_5 = ( METHOD_3 ( ) ) * FLOAT_3 ; },"['Move FieldRead', 'Move FieldRead']",1778
"public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 ; VAR_3 = new TYPE_2 ( VAR_4 , VAR_1 ) ; METHOD_2 ( true ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 ; VAR_3 = new TYPE_2 ( VAR_4 , VAR_1 ) ; METHOD_2 ( ) ; }",['Delete Literal'],1779
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) ;",public void METHOD_1 ( TYPE_1 VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",1780
"public java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) { return METHOD_2 ( null , null ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( null , null ) ; }","['Delete TypeReference', 'Delete Parameter']",1781
"public TYPE_1 METHOD_1 ( TYPE_2 view , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { return TYPE_5 . METHOD_2 ( new TYPE_6 ( VAR_3 . getContext ( ) , VAR_4 ) , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( android.content.Context context , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { return TYPE_5 . METHOD_2 ( new TYPE_6 ( context , VAR_4 ) , VAR_2 ) ; }","['Update Parameter', 'Update TypeReference', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1782
"void METHOD_1 ( java.util.Map < java.lang.String , java.util.List < java.lang.String > > VAR_1 , java.util.List < java.lang.String > VAR_2 ) ;","void METHOD_1 ( java.util.Map < java.lang.String , java.util.List < java.lang.String > > VAR_1 , java.util.List < java.lang.String > message ) ;",['Update Parameter'],1783
public void METHOD_1 ( ) { if ( ( VAR_1 ) != 0 ) { VAR_2 = ( ( VAR_2 ) + 1 ) % ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) != 0 ) { VAR_2 = ( ( VAR_2 ) + 1 ) % ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ; } },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1784
"public static java.lang.String METHOD_1 ( byte [ ] VAR_1 ) throws TYPE_1 { return new java.lang.String ( VAR_1 , STRING_1 ) ; }","private static java.lang.String METHOD_1 ( byte [ ] VAR_1 ) throws TYPE_1 { return new java.lang.String ( VAR_1 , STRING_1 ) ; }",['Update Wra'],1785
"public TYPE_1 METHOD_1 ( java.io.File [ ] VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_3 . size ( ) ) == 0 ) { return null ; } return VAR_3 . get ( 0 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( java.io.File [ ] VAR_1 ) { if ( ( VAR_3 . size ( ) ) == 0 ) { return null ; } return VAR_3 . get ( 0 ) . METHOD_1 ( VAR_1 , this ) ; }","['Insert ThisAccess', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1786
public int METHOD_1 ( ) { return java.lang.Integer . METHOD_2 ( METHOD_3 ( ) ) ; },public int METHOD_1 ( ) { return java.lang.Integer.parseInt ( METHOD_3 ( ) ) ; },['Update Invocation'],1787
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { VAR_1 . METHOD_2 ( ( ( java.lang.String ) ( VAR_2 . METHOD_3 ( ""id"" ) ) ) ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; java.lang.String url = STRING_1 ; return new TYPE_1 ( url ) ; }",public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; java.lang.String url = STRING_1 ; return new TYPE_1 ( url ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Invocation']",1789
TYPE_1 < java.util.List < TYPE_2 > > METHOD_1 ( java.lang.String id ) ;,TYPE_1 < java.util.List < TYPE_2 > > METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",1790
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( this . METHOD_2 ( ) ) . METHOD_2 ( ) ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_3 ( this ) . METHOD_2 ( ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move VariableRead', 'Delete Invocation', 'Delete Invocation']",1792
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( INT_1 ) ; VAR_2 = new TYPE_2 ( VAR_1 ) ; VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 = new TYPE_2 ( VAR_1 ) ; VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_2 ( ) ; },['Delete FieldRead'],1793
protected int METHOD_1 ( ) { return ( super . METHOD_1 ( ) ) ^ ( TYPE_1 . METHOD_2 ( values ) ) ; },protected int METHOD_1 ( ) { return ( super . METHOD_2 ( ) ) ^ ( TYPE_1 . METHOD_2 ( values ) ) ; },['Update Invocation'],1794
private void METHOD_1 ( ) { switch ( VAR_1 ) { case INT_1 : VAR_2 = VAR_3 ; break ; case INT_2 : VAR_2 = VAR_4 ; break ; case INT_3 : VAR_2 = VAR_5 ; break ; case INT_4 : VAR_2 = VAR_6 ; break ; } },public void METHOD_1 ( ) { switch ( VAR_1 ) { case INT_1 : VAR_2 = VAR_3 ; break ; case INT_2 : VAR_2 = VAR_4 ; break ; case INT_3 : VAR_2 = VAR_5 ; break ; case INT_4 : VAR_2 = VAR_6 ; break ; } },['Update Wra'],1795
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_4 ( ) ; METHOD_4 ( ) ; },private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_4 ( ) ; METHOD_4 ( ) ; },['Update Wra'],1796
"public TYPE_1 METHOD_1 ( int id ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; VAR_2 . add ( TYPE_3 . METHOD_3 ( STRING_1 , id ) ) ; return ( ( TYPE_1 ) ( VAR_1 . METHOD_4 ( ) ) ) ; }","public TYPE_1 METHOD_1 ( int id ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; VAR_2 . add ( TYPE_3 . METHOD_3 ( ""id"" , id ) ) ; return ( ( TYPE_1 ) ( VAR_1 . METHOD_4 ( ) ) ) ; }","['Insert Literal', 'Delete TypeAccess']",1797
"public boolean METHOD_1 ( java.lang.Exception VAR_1 , java.lang.String VAR_2 , TYPE_1 < TYPE_2 > target , boolean VAR_3 ) { VAR_4 . METHOD_2 ( ) ; return false ; }","public boolean METHOD_1 ( java.lang.Exception VAR_1 , java.lang.String VAR_2 , TYPE_1 < TYPE_2 > target , boolean VAR_3 ) { return false ; }","['Delete TypeAccess', 'Delete Invocation']",1798
public boolean METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 class ) ; if ( VAR_1 != null ) { VAR_3 = VAR_1 . METHOD_5 ( ) ; } return ( VAR_3 ) != null ; },private boolean METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 class ) ; if ( VAR_1 != null ) { VAR_3 = VAR_1 . METHOD_5 ( ) ; } return ( VAR_3 ) != null ; },['Update Wra'],1799
"protected void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . assertThat ( STRING_1 , VAR_1 , TYPE_2 . METHOD_2 ( ( ( TYPE_1 ) ( null ) ) ) ) ; }","protected void METHOD_1 ( final TYPE_1 VAR_1 ) { assertThat ( STRING_1 , VAR_1 , TYPE_2 . METHOD_2 ( ( ( TYPE_1 ) ( null ) ) ) ) ; }",['Update TypeAccess'],1800
"public boolean add ( TYPE_1 view , boolean VAR_1 , boolean VAR_2 ) { if ( METHOD_1 ( view , VAR_1 , VAR_2 , null ) ) { METHOD_2 ( view ) ; return true ; } return false ; }","public boolean add ( TYPE_1 view , boolean VAR_1 , boolean VAR_2 ) { if ( METHOD_1 ( view , VAR_1 , VAR_2 ) ) { METHOD_2 ( view ) ; return true ; } return false ; }",['Delete Literal'],1801
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; },public abstract TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) ;,"['Insert Wra', 'Delete Literal', 'Delete Return']",1804
public TYPE_1 METHOD_1 ( ) { try { return VAR_1 . METHOD_2 ( VAR_2 . String class ) ; } catch ( final TYPE_2 VAR_3 ) { throw VAR_3 ; } catch ( final java.lang.Exception VAR_3 ) { return null ; } },public TYPE_1 METHOD_1 ( ) { try { return c . METHOD_2 ( VAR_2 . String class ) ; } catch ( final TYPE_2 VAR_3 ) { throw VAR_3 ; } catch ( final java.lang.Exception VAR_3 ) { return null ; } },"['Insert FieldRead', 'Delete TypeAccess']",1805
public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { this . VAR_2 . remove ( this . METHOD_2 ( VAR_1 ) . getId ( ) ) ; },public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { this . VAR_2 . remove ( this . METHOD_2 ( VAR_1 ) . toString ( ) ) ; },['Update Invocation'],1806
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ) ; },private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ) ; },['Delete Wra'],1807
"public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( 1L , INT_1 ) ; TYPE_1 . METHOD_3 ( VAR_2 ) . METHOD_2 ( 1L , INT_1 ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( 1L , INT_1 ) ; TYPE_1 . METHOD_3 ( VAR_2 . METHOD_2 ( 1L , INT_1 ) ) ; }","['Move Invocation', 'Move Invocation', 'Move TypeAccess']",1808
public java.lang.String METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 && ( ( VAR_2 ) != null ) ) { return VAR_2 ; } else { return VAR_3 ; } },protected java.lang.String METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 && ( ( VAR_2 ) != null ) ) { return VAR_2 ; } else { return VAR_3 ; } },['Update Wra'],1809
"public void METHOD_1 ( ) { java.lang.String string = STRING_1 ; java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( string ) ; VAR_3 . assertThat ( VAR_1 ) . METHOD_3 ( STRING_2 , STRING_3 , STRING_4 ) ; }","public void METHOD_1 ( ) { java.lang.String string = STRING_1 ; java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( string ) ; assertThat ( VAR_1 ) . METHOD_3 ( STRING_2 , STRING_3 , STRING_4 ) ; }",['Update TypeAccess'],1810
private static void METHOD_1 ( int id ) { },private static native void METHOD_1 ( int id ) ;,['Insert Wra'],1811
public int METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) . METHOD_1 ( ) ; },public int METHOD_1 ( ) { return ; return METHOD_2 ( VAR_1 ) . METHOD_1 ( ) ; },['Insert Return'],1812
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 ; if ( VAR_1 == ( VAR_3 ) ) { this . VAR_4 = VAR_5 ; } else { this . VAR_4 = VAR_6 ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 ; if ( VAR_1 == ( VAR_3 ) ) { VAR_4 = VAR_5 ; } else { VAR_4 = VAR_6 ; } },"['Delete ThisAccess', 'Delete ThisAccess']",1813
public java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) return null ; return new java.util.HashSet < java.lang.String > ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ; },public java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { return new java.util.HashSet < java.lang.String > ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1814
"private static native void METHOD_1 ( java.lang.Object method , java.lang.String VAR_1 , boolean VAR_2 , int VAR_3 , int VAR_4 ) ;","private static native void METHOD_1 ( java.lang.Object method , java.lang.String VAR_1 , boolean VAR_2 , int VAR_3 ) ;","['Delete TypeReference', 'Delete Parameter']",1815
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int VAR_3 , TYPE_3 VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , ( ( byte ) ( - 1 ) ) , VAR_3 , VAR_4 ) ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int VAR_3 ) { return METHOD_2 ( VAR_1 , VAR_2 , ( ( byte ) ( - 1 ) ) , VAR_3 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1816
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1817
"private void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { if ( VAR_1 == null ) { throw new TYPE_1 ( STRING_1 ) ; } TYPE_2 . METHOD_1 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ; }","private void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { if ( VAR_1 != null ) { throw new TYPE_1 ( STRING_1 ) ; } TYPE_2 . METHOD_1 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ; }",['Update BinaryOperator'],1818
public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) . METHOD_4 ( this ) ; METHOD_5 ( null ) ; } if ( TYPE_1 . METHOD_6 ( ) ) TYPE_1 . METHOD_7 ( ) ; },public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) METHOD_3 ( ) . METHOD_4 ( this ) ; if ( TYPE_1 . METHOD_6 ( ) ) TYPE_1 . METHOD_7 ( ) ; },"['Delete Literal', 'Delete Invocation']",1819
"public static void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { TYPE_2 . METHOD_3 ( event , VAR_3 ) ; } }","private static void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { TYPE_2 . METHOD_3 ( event , VAR_3 ) ; } }",['Update Wra'],1821
"public synchronized TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) { add ( VAR_2 ) ; return VAR_2 ; } return VAR_3 ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) { add ( VAR_2 ) ; return VAR_2 ; } return VAR_3 ; }",['Delete Wra'],1822
private void METHOD_1 ( java.lang.Integer VAR_1 ) { this . VAR_1 = VAR_1 ; },public void METHOD_1 ( java.lang.Integer VAR_1 ) { this . VAR_1 = VAR_1 ; },['Update Wra'],1823
public static TYPE_1 METHOD_1 ( boolean VAR_1 ) { return ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_1 ( VAR_1 ) ) ) ; },public static TYPE_1 METHOD_1 ( boolean VAR_1 ) { return ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_1 ( false ) ) ) ; },"['Insert Literal', 'Delete VariableRead']",1824
"public final void response ( int state , java.lang.String message ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . put ( VAR_3 , INT_1 ) ; VAR_2 . put ( VAR_4 , message ) ; this . response ( VAR_1 ) ; }","protected final void response ( int state , java.lang.String message ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . put ( VAR_3 , INT_1 ) ; VAR_2 . put ( VAR_4 , message ) ; this . response ( VAR_1 ) ; }",['Update Wra'],1825
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { TYPE_3 . METHOD_2 ( VAR_2 , STRING_1 , t ) ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { TYPE_3 . METHOD_2 ( VAR_2 , STRING_1 , null ) ; }","['Insert Literal', 'Delete VariableRead']",1826
public int METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; return VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Update TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Return']",1827
private boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( java.lang.String key : VAR_2 . METHOD_2 ( ) ) { if ( VAR_3 . equals ( key ) ) return true ; } return false ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( java.lang.String key : VAR_2 . METHOD_2 ( ) ) { if ( VAR_3 . equals ( key ) ) return true ; } return false ; },['Update Wra'],1828
"private void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 , VAR_1 ) ; METHOD_3 ( intent ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( ""id"" , VAR_1 ) ; METHOD_3 ( intent ) ; }","['Insert Literal', 'Delete TypeAccess']",1829
"public void METHOD_1 ( final int position , TYPE_1 item ) { METHOD_2 ( item ) ; }","public void METHOD_1 ( final int position , TYPE_1 item ) { METHOD_2 ( position , item ) ; }",['Insert VariableRead'],1830
"static void METHOD_1 ( java.lang.Object VAR_1 , int VAR_2 , TYPE_1 ... VAR_3 ) { TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , true , VAR_3 ) ; }","static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_1 ... VAR_3 ) { TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , true , VAR_3 ) ; }",['Update TypeReference'],1832
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) { VAR_1 . METHOD_3 ( ) ; } METHOD_4 ( this ) ; VAR_1 . METHOD_5 ( ) ; },private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) { VAR_1 . METHOD_3 ( ) ; } METHOD_4 ( this ) ; VAR_1 . METHOD_5 ( ) ; },['Update Wra'],1833
void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( 1 ) ; } },void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( 0 ) ; } },['Update Literal'],1835
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = java.lang.Integer.toString ( VAR_1 . METHOD_2 ( ) ) ; return ( VAR_3 . delete ( VAR_4 , ( ( VAR_5 ) + STRING_1 ) , new java.lang.String [ ] { VAR_2 } ) ) > 0 ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = java.lang.Integer.toString ( VAR_1 . METHOD_2 ( ) ) ; return ( VAR_3 . delete ( VAR_5 , ( ( VAR_5 ) + STRING_1 ) , new java.lang.String [ ] { VAR_2 } ) ) > 0 ; }",['Update TypeAccess'],1836
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( true ) ; },"['Delete VariableRead', 'Delete Invocation']",1837
public static TYPE_1 METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 < 0 ) || ( VAR_1 > ( VAR_2 . length ) ) ) { VAR_1 = 0 ; } return VAR_3 [ VAR_1 ] ; },public static TYPE_1 METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 < 0 ) || ( VAR_1 >= ( VAR_2 . length ) ) ) { VAR_1 = 0 ; } return VAR_3 [ VAR_1 ] ; },['Update BinaryOperator'],1838
"public final void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . assertEquals ( 1 , VAR_4 . size ( ) ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; assertEquals ( 1 , VAR_4 . size ( ) ) ; }","['Update TypeAccess', 'Delete Wra']",1839
"public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final int VAR_2 ) { return new TYPE_1 ( TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_3 . getContext ( ) ) , VAR_1 , false ) ) ; }","public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final int VAR_2 ) { return new TYPE_1 ( VAR_1 ) ; }","['Move VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",1840
public java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 ) { java.util.List VAR_2 = VAR_3 . METHOD_1 ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; return VAR_2 == null ? TYPE_2 . METHOD_3 ( ) : VAR_2 ; },public java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 ) { java.util.List VAR_2 = this . VAR_3 . METHOD_1 ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; return VAR_2 == null ? TYPE_2 . METHOD_3 ( ) : VAR_2 ; },"['Insert FieldRead', 'Insert ThisAccess', 'Delete TypeAccess']",1841
public boolean METHOD_1 ( java.util.Collection < ? > VAR_1 ) { boolean VAR_2 = false ; for ( java.lang.Object VAR_3 : VAR_1 ) { VAR_2 |= this . remove ( VAR_3 ) ; } return VAR_2 ; },public boolean METHOD_1 ( java.util.Collection < ? > VAR_1 ) { boolean VAR_2 = true ; for ( java.lang.Object VAR_3 : VAR_1 ) { VAR_2 &= this . remove ( VAR_3 ) ; } return VAR_2 ; },['Update Literal'],1842
public void METHOD_1 ( final java.lang.String [ ] VAR_1 ) { this . VAR_1 = VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( final java.lang.String [ ] VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move VariableRead', 'Delete Invocation']",1844
public java.lang.Object METHOD_1 ( java.lang.String VAR_1 ) { try { return super . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_1 VAR_2 ) { return VAR_3 . get ( ) . get ( VAR_1 ) ; } },public java.lang.Object METHOD_1 ( java.lang.String VAR_1 ) { try { return super . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_1 VAR_2 ) { return null ; } },"['Insert Literal', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1847
"public void METHOD_1 ( int item ) { METHOD_1 ( item , true ) ; }","public void METHOD_1 ( int item ) { METHOD_1 ( item , false ) ; }",['Update Literal'],1848
"public static void METHOD_1 ( java.lang.Object VAR_1 , java.lang.String msg ) { TYPE_1 . METHOD_1 ( VAR_2 . getClass ( ) . METHOD_2 ( ) , msg ) ; TYPE_2 . METHOD_3 ( VAR_3 , VAR_2 . getClass ( ) . METHOD_2 ( ) , msg ) ; }","public static void METHOD_1 ( java.lang.Object VAR_1 , java.lang.String msg ) { TYPE_1 . METHOD_1 ( VAR_2 . getClass ( ) . getName ( ) , msg ) ; TYPE_2 . METHOD_3 ( VAR_3 , VAR_2 . getClass ( ) . getName ( ) , msg ) ; }","['Update Invocation', 'Update Invocation']",1849
public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { VAR_2 . METHOD_2 ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_4 . add ( VAR_3 ) ; } METHOD_3 ( ) ; },private void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { VAR_2 . METHOD_2 ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_4 . add ( VAR_3 ) ; } METHOD_3 ( ) ; },['Update Wra'],1850
public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( true ) ; },public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; },['Delete Literal'],1852
void METHOD_1 ( int x ) ;,void METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",1853
"public void setValue ( TYPE_1 VAR_1 , java.lang.Integer value ) { VAR_2 = value ; VAR_1 . METHOD_1 ( ) ; }","public void setValue ( TYPE_1 VAR_1 , java.lang.Integer value ) { VAR_2 = value ; }","['Delete VariableRead', 'Delete Invocation']",1854
"protected void init ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; }","protected void init ( ) { VAR_1 = new TYPE_1 ( VAR_3 , VAR_4 ) ; }",['Delete FieldRead'],1855
"private void info ( java.lang.String VAR_1 , java.lang.String message ) { VAR_2 . info ( message ) ; VAR_3 . METHOD_1 ( VAR_1 , VAR_4 , METHOD_2 ( ) . METHOD_3 ( message ) ) ; }","private void info ( java.lang.String message ) { VAR_2 . info ( message ) ; VAR_3 . METHOD_1 ( null , VAR_4 , METHOD_2 ( ) . METHOD_3 ( message ) ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1856
"public void METHOD_1 ( TYPE_1 item , boolean VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_3 . x , VAR_3 . y ) ; VAR_4 = VAR_2 ; if ( VAR_2 != null ) { VAR_5 . add ( item , VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 item ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_3 . x , VAR_3 . y ) ; VAR_4 = VAR_2 ; if ( VAR_2 != null ) { VAR_5 . add ( item ) ; } }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1857
"public void info ( long VAR_1 , java.lang.String VAR_2 , java.lang.Object ... VAR_3 ) { this . METHOD_1 ( VAR_4 , VAR_2 , VAR_1 , VAR_3 ) ; }","public void info ( long VAR_1 , java.lang.String VAR_2 , java.lang.Object ... VAR_3 ) { METHOD_1 ( VAR_4 , VAR_2 , VAR_1 , VAR_3 ) ; }",['Delete ThisAccess'],1858
"public final boolean METHOD_1 ( int index , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_3 . METHOD_2 ( ) ) { this . METHOD_3 ( index , VAR_1 , VAR_2 ) ; return true ; } return false ; }","public final boolean METHOD_1 ( int index , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_3 . METHOD_2 ( ) ) { METHOD_3 ( index , VAR_1 , VAR_2 ) ; return true ; } return false ; }",['Delete ThisAccess'],1859
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return ; TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 class ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( VAR_4 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 class ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( VAR_4 ) ; } },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1860
"public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( VAR_2 . METHOD_2 ( STRING_1 ) ) { if ( METHOD_3 ( VAR_1 ) ) { return true ; } else { return false ; } } else { return false ; } }","public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( VAR_1 . METHOD_2 ( STRING_1 ) ) { if ( METHOD_3 ( VAR_1 ) ) { return true ; } else { return false ; } } else { return false ; } }",['Update VariableRead'],1861
"void METHOD_1 ( android.content.Context context , int VAR_1 ) { if ( ( VAR_2 ) <= VAR_1 ) { VAR_2 = VAR_1 + 1 ; METHOD_2 ( context ) ; } }",void METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) <= VAR_1 ) { VAR_2 = VAR_1 + 1 ; METHOD_2 ( ) ; } },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1862
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( getActivity ( ) , VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( getContext ( ) , VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; }",['Update Invocation'],1863
"public TYPE_1 METHOD_1 ( java.lang.Object id ) { return this . VAR_1 . METHOD_1 ( VAR_2 , id ) ; }","public TYPE_1 METHOD_1 ( java.lang.Object id ) { return VAR_1 . METHOD_1 ( VAR_2 , id ) ; }","['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",1865
"private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( VAR_3 , VAR_4 . NULL , VAR_5 . get ( ) ) ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( VAR_3 , VAR_4 . NULL , VAR_5 . get ( ) ) ) ; }","['Delete Invocation', 'Delete Invocation']",1866
"TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.util.Date date ) ;",TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",1867
"private TYPE_1 < ? > METHOD_1 ( TYPE_2 VAR_1 , java.util.Set < TYPE_3 > VAR_2 ) { return TYPE_2 ( VAR_3 . type , METHOD_1 ( VAR_4 [ 0 ] , VAR_2 ) , VAR_3 . index , VAR_1 . METHOD_2 ( ) ) ; }","private TYPE_1 < ? > METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_2 ( VAR_3 . type , METHOD_1 ( VAR_4 [ 0 ] ) , VAR_3 . index , VAR_1 . METHOD_2 ( ) ) ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1868
"private void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; this . VAR_3 . add ( VAR_1 ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; VAR_3 . add ( VAR_1 ) ; }","['Insert TypeAccess', 'Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ThisAccess', 'Delete FieldRead']",1870
"private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { TYPE_2 . METHOD_1 ( VAR_3 , VAR_1 , STRING_1 , java.lang.String . METHOD_2 ( VAR_2 ) ) ; }","private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { TYPE_2 . METHOD_1 ( VAR_3 , VAR_1 , java.lang.String . METHOD_2 ( VAR_2 ) ) ; }",['Delete TypeAccess'],1872
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_2 ) && ( ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_2 ( ) ) == ( VAR_2 ) ) ; },protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_2 ) && ( ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_2 ( ) ) == ( VAR_2 ) ) ; },['Update Wra'],1873
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 , INT_1 ) ; VAR_4 . assertEquals ( STRING_1 , VAR_1 . METHOD_3 ( INT_2 ) . toString ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 , INT_1 ) ; VAR_4 . assertEquals ( STRING_1 , VAR_1 . METHOD_3 ( INT_1 ) . toString ( ) ) ; }",['Update TypeAccess'],1874
public double METHOD_1 ( ) { return ( METHOD_2 ( ) ) * FLOAT_1 ; },public double METHOD_1 ( ) { return ( METHOD_2 ( ) ) / FLOAT_1 ; },['Update BinaryOperator'],1876
public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( ( STRING_1 + args ) ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( ( STRING_1 + args ) ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },"['Delete VariableRead', 'Delete Invocation']",1877
public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_1 . METHOD_2 ( ) ; } VAR_2 . METHOD_3 ( ) ; },"public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { METHOD_2 ( VAR_1 , 1 ) ; } VAR_2 . METHOD_3 ( ) ; }",['Insert Literal'],1878
public int METHOD_1 ( int position ) { return VAR_1 ; },public int METHOD_1 ( int position ) { return 0 ; },"['Insert Literal', 'Delete FieldRead']",1879
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . start ( ) ; VAR_3 . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . start ( ) ; },"['Delete TypeAccess', 'Delete Invocation']",1880
"public void METHOD_1 ( ) { ( VAR_1 ) ++ ; TYPE_1 . METHOD_2 ( VAR_2 , ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) ) ; VAR_3 . METHOD_3 ( new java.lang.Integer ( VAR_1 ) ) ; ( VAR_4 ) ++ ; }","public void METHOD_1 ( ) { ( VAR_1 ) ++ ; TYPE_1 . METHOD_2 ( VAR_2 , ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) , VAR_4 ) ; VAR_3 . METHOD_3 ( new java.lang.Integer ( VAR_1 ) ) ; ( VAR_4 ) ++ ; }",['Insert TypeAccess'],1881
"int update ( TYPE_1 VAR_1 , java.util.Map < java.lang.String , java.lang.String > VAR_2 ) ;",int update ( TYPE_1 VAR_1 ) ;,"['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter']",1883
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( TYPE_1 . METHOD_3 ( ) ? 1 : 0 ) ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( TYPE_1 . METHOD_3 ( ) ? 0 : 1 ) ) ; },['Move Literal'],1884
"protected java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 < TYPE_1 > METHOD_2 ( new TYPE_2 ( ) , new TYPE_3 ( ) , new TYPE_4 ( ) , new TYPE_3 ( ) ) ; }","protected java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 < TYPE_1 > METHOD_2 ( new TYPE_2 ( ) , new TYPE_4 ( ) , new TYPE_3 ( ) ) ; }",['Delete ConstructorCall'],1885
"public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_3 . add ( VAR_4 , new TYPE_3 ( ) ) ; VAR_2 . METHOD_4 ( null ) ; VAR_3 . commit ( ) ; }","public void METHOD_1 ( android.view.View view ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_3 . replace ( VAR_4 , new TYPE_3 ( ) ) ; VAR_2 . METHOD_4 ( null ) ; VAR_3 . commit ( ) ; }",['Update Invocation'],1886
"public void METHOD_1 ( java.lang.String [ ] args ) { super . METHOD_1 ( args ) ; VAR_1 = new TYPE_1 [ TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ] ; VAR_2 = VAR_3 . open ( STRING_1 , true ) ; }",public void METHOD_1 ( java.lang.String [ ] args ) { super . METHOD_1 ( args ) ; VAR_1 = new TYPE_1 [ TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ] ; VAR_2 = VAR_3 . open ( STRING_1 ) ; },['Delete Literal'],1887
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_1 . METHOD_2 ( ) . toLowerCase ( ) , VAR_1 ) ; VAR_1 . METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_1 . METHOD_2 ( ) . toLowerCase ( ) , VAR_1 ) ; }","['Delete VariableRead', 'Delete Invocation']",1888
public void handle ( TYPE_1 VAR_1 ) { METHOD_1 ( VAR_2 . getText ( ) ) ; METHOD_2 ( java.lang.Double . METHOD_3 ( VAR_3 . getText ( ) ) ) ; VAR_4 . METHOD_4 ( ) ; },public void handle ( TYPE_1 VAR_1 ) { METHOD_1 ( VAR_2 . getText ( ) ) ; METHOD_2 ( java.lang.Double . METHOD_3 ( VAR_3 . getText ( ) ) ) ; },"['Delete TypeAccess', 'Delete Invocation']",1889
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { final java.lang.String value = VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( null == value ) { return VAR_1 . METHOD_4 ( ) ; } return VAR_3 . trim ( ) ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { final java.lang.String value = VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( null == value ) { return VAR_1 . METHOD_4 ( ) ; } return value ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1890
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws java.lang.Exception { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; return VAR_3 ; }","public void METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws java.lang.Exception { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; }","['Update TypeReference', 'Delete VariableRead', 'Delete Return']",1892
public void METHOD_1 ( java.lang.Double VAR_1 ) { this . VAR_2 = VAR_2 ; },public void METHOD_1 ( java.lang.Double VAR_2 ) { this . VAR_2 = VAR_2 ; },"['Update Parameter', 'Insert VariableRead', 'Delete FieldRead']",1893
"public int METHOD_1 ( java.lang.String num , java.lang.String name , float VAR_1 ) ;","public int METHOD_1 ( java.lang.String id , java.lang.String name , float VAR_1 ) ;",['Update Parameter'],1894
"protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( this , VAR_1 ) ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( this , VAR_1 ) ; }",['Update Wra'],1895
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean result = METHOD_2 ( VAR_1 , true , true ) ; if ( ! result ) { this . METHOD_3 ( STRING_1 ) ; } return result ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean result = METHOD_2 ( VAR_1 , true ) ; if ( ! result ) { this . METHOD_3 ( STRING_1 ) ; } return result ; }",['Delete Literal'],1897
"public void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_3 . METHOD_2 ( this , VAR_4 [ VAR_5 ] ) ) { METHOD_3 ( VAR_1 , VAR_2 ) ; } else { TYPE_1 . METHOD_4 ( this , VAR_5 , VAR_6 ) ; } }","public void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( TYPE_1 . METHOD_2 ( this , VAR_4 [ 0 ] ) ) { METHOD_3 ( VAR_1 , VAR_2 ) ; } else { TYPE_1 . METHOD_4 ( this , VAR_5 , VAR_6 ) ; } }","['Update TypeAccess', 'Insert Literal', 'Delete FieldRead']",1898
public void METHOD_1 ( int number ) { this . number = number + 1 ; },public void METHOD_1 ( int number ) { this . number = number ; },"['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",1899
"public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_2 ( INT_1 , INT_2 , INT_3 , false , false ) ) ; TYPE_1 . METHOD_3 ( true ) ; new java.lang.Thread ( new TYPE_1 ( ) ) . start ( ) ; }","public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_2 ( INT_1 , INT_2 , INT_3 , true , false ) ) ; TYPE_1 . METHOD_3 ( true ) ; new java.lang.Thread ( new TYPE_1 ( ) ) . start ( ) ; }",['Update Literal'],1900
"private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 item = new TYPE_1 ( VAR_2 , 1 ) ; TYPE_3 VAR_3 = item . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( STRING_1 ) ; item . METHOD_4 ( VAR_3 ) ; return item ; }","private static TYPE_1 METHOD_1 ( ) { TYPE_1 item = new TYPE_1 ( VAR_2 , 1 ) ; TYPE_3 VAR_3 = item . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( STRING_1 ) ; item . METHOD_4 ( VAR_3 ) ; return item ; }","['Delete TypeReference', 'Delete Parameter']",1902
private native java.lang.String METHOD_1 ( java.lang.String VAR_1 ) ;,private native java.lang.String METHOD_1 ( java.lang.String id ) ;,['Update Parameter'],1904
public TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) ;,public TYPE_1 [ ] METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",1905
"public void METHOD_1 ( java.util.List < java.lang.Long > VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 , VAR_1 ) . METHOD_4 ( ) ; }","public void METHOD_1 ( java.util.List < java.lang.Long > VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 , VAR_1 ) . METHOD_4 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 , VAR_1 ) . METHOD_4 ( ) ; }","['Insert Invocation', 'Insert Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Insert VariableRead', 'Insert TypeAccess', 'Insert TypeAccess']",1906
"public void METHOD_1 ( int x , int y ) { }",public void METHOD_1 ( int x ) { },"['Delete TypeReference', 'Delete Parameter']",1907
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = new TYPE_3 ( ) ; VAR_1 . METHOD_3 ( ) . replace ( VAR_3 , VAR_2 ) . commit ( ) ; VAR_1 . METHOD_4 ( ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = new TYPE_3 ( ) ; VAR_1 . METHOD_3 ( ) . replace ( VAR_3 , VAR_2 ) . commit ( ) ; }","['Delete VariableRead', 'Delete Invocation']",1908
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( VAR_2 , VAR_3 class ) ; intent . METHOD_2 ( VAR_4 , VAR_5 . get ( VAR_6 ) . getId ( ) ) ; VAR_2 . METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( VAR_2 , VAR_3 class ) ; intent . METHOD_2 ( VAR_4 , VAR_5 . get ( position ) . getId ( ) ) ; VAR_2 . METHOD_3 ( intent ) ; }","['Insert FieldRead', 'Delete TypeAccess']",1910
"TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 , int VAR_2 , java.lang.String VAR_3 ) ;",TYPE_1 METHOD_1 ( int id ) ;,"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",1911
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },['Update Invocation'],1912
"public void execute ( final TYPE_1 VAR_1 ) { METHOD_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_1 ) ; }","public void execute ( final TYPE_1 VAR_1 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_4 ) ; }","['Move VariableRead', 'Delete TypeAccess']",1913
"public boolean METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { return false ; }","public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return false ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",1914
public java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_2 . add ( STRING_1 ) ; return VAR_1 ; },public java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < java.lang.String > ( ) ; return VAR_1 ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1915
"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long VAR_2 ) { METHOD_2 ( position , true ) ; }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long VAR_2 ) { METHOD_2 ( position ) ; }",['Delete Literal'],1916
public boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) ;,public boolean METHOD_1 ( TYPE_1 < TYPE_2 > set ) ;,['Update Parameter'],1917
private void update ( ) { METHOD_1 ( ) ; METHOD_2 ( ) ; },private void update ( ) { METHOD_1 ( true ) ; METHOD_2 ( ) ; },['Insert Literal'],1918
public java.lang.String METHOD_1 ( java.lang.CharSequence VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },['Update TypeReference'],1919
"public java.lang.String execute ( ) throws java.lang.Exception { state = VAR_1 . METHOD_1 ( VAR_2 , VAR_3 ) ; if ( ( state ) >= 0 ) return VAR_4 ; return VAR_5 ; }","public java.lang.String execute ( ) throws java.lang.Exception { state = VAR_1 . METHOD_1 ( VAR_2 , VAR_3 ) ; if ( ( state ) > 0 ) return VAR_4 ; return VAR_5 ; }",['Update BinaryOperator'],1920
"protected void METHOD_1 ( TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_1 , long VAR_2 ) { long VAR_3 = METHOD_2 ( VAR_1 ) ; VAR_4 . assertTrue ( java.lang.String.format ( STRING_1 , VAR_2 , VAR_3 ) , ( VAR_3 < VAR_2 ) ) ; }","private void METHOD_1 ( TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_1 , long VAR_2 ) { long VAR_3 = METHOD_2 ( VAR_1 ) ; VAR_4 . assertTrue ( java.lang.String.format ( STRING_1 , VAR_2 , VAR_3 ) , ( VAR_3 < VAR_2 ) ) ; }",['Update Wra'],1921
static final java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) return null ; return TYPE_1 . METHOD_2 ( VAR_1 ) . replaceAll ( STRING_1 ) ; },static final java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_1 ) . replaceAll ( STRING_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1922
private static final java.lang.String METHOD_1 ( java.lang.String id ) { return STRING_1 ; },private static final java.lang.String METHOD_1 ( java.lang.String id ) { return id ; },"['Insert VariableRead', 'Delete FieldRead']",1923
private static long METHOD_1 ( int type ) { return 0 ; },private static native long METHOD_1 ( int type ) ;,"['Insert Wra', 'Delete Literal', 'Delete Return']",1925
"TYPE_1 < TYPE_2 > METHOD_1 ( long VAR_1 , TYPE_3 VAR_2 ) ;",TYPE_1 < TYPE_2 > METHOD_1 ( long VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",1926
protected void METHOD_1 ( ) { VAR_1 . setEnabled ( true ) ; VAR_2 . setEnabled ( true ) ; VAR_3 . setEnabled ( true ) ; },public void METHOD_1 ( ) { VAR_1 . setEnabled ( true ) ; VAR_2 . setEnabled ( true ) ; VAR_3 . setEnabled ( true ) ; },['Update Wra'],1927
"public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; }","public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_1 ) ; TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; }",['Insert TypeAccess'],1929
public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ( ( VAR_1 ) >= INT_1 ? new TYPE_2 ( ) : new TYPE_3 ( ) ) ) ; },public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ( ( VAR_1 ) >= INT_1 ? new TYPE_3 ( ) : new TYPE_3 ( ) ) ) ; },['Update ConstructorCall'],1930
private void METHOD_1 ( ) { },public void METHOD_1 ( ) { },['Update Wra'],1931
"public void METHOD_1 ( TYPE_1 VAR_1 , int index , TYPE_2 VAR_2 ) throws TYPE_3 { assert VAR_2 != null ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . set ( index , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int index , java.lang.String VAR_2 ) throws TYPE_3 { assert VAR_2 != null ; VAR_1 . METHOD_2 ( new TYPE_2 ( VAR_2 ) ) ; VAR_3 . set ( index , VAR_1 ) ; }","['Update TypeReference', 'Insert ConstructorCall', 'Move VariableRead']",1932
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_3 . get ( VAR_4 . getId ( ) ) ) - ( VAR_3 . get ( VAR_5 . getId ( ) ) ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_3 . get ( VAR_4 . getName ( ) ) ) - ( VAR_3 . get ( VAR_5 . getName ( ) ) ) ; }","['Update Invocation', 'Update Invocation']",1933
"public static int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int VAR_3 ) { return TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; }","public static int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int VAR_3 ) { return TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , 0 ) ; }","['Insert Literal', 'Delete TypeAccess']",1934
"public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { this . METHOD_1 ( VAR_1 , java.lang.String . METHOD_2 ( VAR_2 ) ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { this . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1935
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ( STRING_1 + STRING_2 ) ) ; VAR_1 . METHOD_2 ( ( STRING_3 + STRING_4 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ( STRING_1 + STRING_2 ) ) ; },"['Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",1936
"public void METHOD_1 ( java.lang.String key , TYPE_1 response ) throws java.io.IOException { VAR_1 . METHOD_1 ( key ) ; }",public void METHOD_1 ( java.lang.String key ) throws java.io.IOException { VAR_1 . METHOD_1 ( key ) ; },"['Delete TypeReference', 'Delete Parameter']",1937
private java.lang.String METHOD_1 ( int y ) { return java.lang.String . METHOD_2 ( ( ( char ) ( CHAR_1 + y ) ) ) ; },private java.lang.String METHOD_1 ( int y ) { return java.lang.String . METHOD_2 ( ( ( CHAR_1 - 1 ) + ( ( char ) ( y ) ) ) ) ; },"['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal', 'Move TypeReference']",1938
private static java.lang.String METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; case VAR_4 : return STRING_3 ; default : return STRING_4 ; } },private static final java.lang.String METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; case VAR_4 : return STRING_3 ; default : return STRING_4 ; } },['Insert Wra'],1939
"public static double METHOD_1 ( TYPE_1 VAR_1 , java.lang.String str ) { return ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 . substring ( 0 , ( ( VAR_2 . length ( ) ) - 1 ) ) ) ) / INT_1 ; }","public static double METHOD_1 ( java.lang.String str ) { return ( TYPE_2 . METHOD_2 ( VAR_2 . substring ( 0 , ( ( VAR_2 . length ( ) ) - 1 ) ) ) ) / INT_1 ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1940
public void METHOD_1 ( ) { java.lang.System.out.print ( ( ( ( ( STRING_1 + ( this . x ) ) + STRING_2 ) + ( this . y ) ) + STRING_3 ) ) ; },public void METHOD_1 ( ) { java.lang.System.out.println ( ( ( ( ( STRING_1 + ( this . x ) ) + STRING_2 ) + ( this . y ) ) + STRING_3 ) ) ; },['Update Invocation'],1941
private void METHOD_1 ( long VAR_1 ) { this . VAR_1 = VAR_1 ; },public void METHOD_1 ( long VAR_1 ) { this . VAR_1 = VAR_1 ; },['Update Wra'],1942
"public void METHOD_1 ( java.lang.String url , java.util.Map < java.lang.String , java.lang.Object > parameters , TYPE_1 VAR_1 ) { METHOD_2 ( STRING_1 ) . build ( ) . METHOD_1 ( VAR_2 , url , parameters , VAR_1 ) ; }","public void METHOD_1 ( java.lang.String url , java.util.Map < java.lang.String , java.lang.Object > parameters , TYPE_1 VAR_1 ) { METHOD_2 ( null ) . build ( ) . METHOD_1 ( VAR_2 , url , parameters , VAR_1 ) ; }","['Insert Literal', 'Delete TypeAccess']",1943
"public static java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }","public static java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return null ; }","['Insert Literal', 'Delete FieldRead']",1944
public java.lang.Boolean METHOD_1 ( ) { return ( VAR_1 ) == null ? true : VAR_1 ; },public java.lang.Boolean METHOD_1 ( ) { return ( VAR_1 ) == null ? false : VAR_1 ; },['Update Literal'],1945
"public void METHOD_1 ( ) { METHOD_2 ( INT_1 ) ; final boolean VAR_1 = VAR_2 . METHOD_3 ( ) ; VAR_3 . assertTrue ( VAR_1 ) ; VAR_3 . assertEquals ( 0 , VAR_2 . METHOD_4 ( ) ) ; }","public void METHOD_1 ( ) { METHOD_2 ( INT_1 ) ; final boolean VAR_1 = VAR_2 . METHOD_3 ( ) ; VAR_3 . assertTrue ( VAR_1 ) ; VAR_3 . assertEquals ( 1 , VAR_2 . METHOD_4 ( ) ) ; }",['Update Literal'],1946
"private void METHOD_1 ( java.lang.String text , int line ) { final TYPE_1 VAR_1 = new TYPE_1 ( text , line , this ) ; VAR_2 . add ( VAR_1 ) ; }","private void METHOD_1 ( java.lang.String text , int line ) { final TYPE_1 VAR_1 = new TYPE_1 ( text , line ) ; VAR_2 . add ( VAR_1 ) ; }","['Update ConstructorCall', 'Delete ThisAccess']",1947
"public void execute ( ) throws TYPE_1 , TYPE_2 { execute ( VAR_1 , VAR_2 , VAR_3 class , new TYPE_3 ( VAR_4 , VAR_5 ) ) ; }","public void execute ( ) throws TYPE_1 , TYPE_2 { execute ( VAR_1 , VAR_2 , VAR_3 class , new TYPE_3 ( VAR_4 , null ) ) ; }","['Insert Literal', 'Delete FieldRead']",1948
"public java.lang.String [ ] METHOD_1 ( ) { return new java.lang.String [ ] { name , VAR_1 . toString ( ) , new java.lang.String ( key , VAR_2 ) } ; }","public java.lang.String [ ] METHOD_1 ( ) { return new java.lang.String [ ] { name , VAR_1 . toString ( ) , new java.lang.String ( key ) } ; }","['Update ConstructorCall', 'Delete FieldRead']",1949
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; VAR_2 . METHOD_6 ( VAR_4 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; VAR_2 . METHOD_6 ( VAR_4 ) ; return VAR_2 ; },"['Update TypeAccess', 'Update TypeAccess']",1950
"public void METHOD_1 ( int position , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;","['Delete TypeReference', 'Delete Parameter']",1952
public void METHOD_1 ( float x ) throws TYPE_1 { if ( x > ( VAR_1 ) ) { throw new TYPE_1 ( ( x - ( VAR_1 ) ) ) ; } else { float b = ( VAR_1 ) - x ; VAR_1 = b ; } },public void METHOD_1 ( float x ) throws TYPE_1 { if ( x > ( VAR_1 ) ) { throw new TYPE_1 ( ) ; } else { float b = ( VAR_1 ) - x ; VAR_1 = b ; } },"['Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",1953
"public TYPE_1 METHOD_1 ( final java.lang.String token ) { return METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( STRING_1 , token ) . METHOD_3 ( STRING_2 , true ) . METHOD_4 ( STRING_3 , TYPE_3 . METHOD_5 ( ) ) ) ; }","public TYPE_1 METHOD_1 ( final java.lang.String token ) { return METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( STRING_1 , token ) . METHOD_3 ( STRING_2 , true ) . METHOD_3 ( STRING_3 , TYPE_3 . METHOD_5 ( ) ) ) ; }",['Update Invocation'],1954
"public void METHOD_1 ( java.lang.Boolean VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_3 , VAR_4 ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_3 , VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; }","public void METHOD_1 ( java.lang.Boolean VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_3 , VAR_4 ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_3 , true ) ; VAR_2 . METHOD_5 ( ) ; }","['Insert Literal', 'Delete VariableRead']",1955
"void METHOD_1 ( float VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 , int VAR_5 ) { TYPE_1 VAR_6 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; VAR_6 . METHOD_3 ( VAR_5 ) ; }","void METHOD_1 ( float VAR_1 , float VAR_2 , int VAR_5 ) { TYPE_1 VAR_6 = METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_6 . METHOD_3 ( VAR_5 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead']",1957
public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_3 VAR_1 = new TYPE_3 ( ) ; TYPE_4 . METHOD_4 ( STRING_1 ) ; },public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_3 VAR_1 = new TYPE_3 ( ) ; TYPE_1 . METHOD_2 ( ) ; TYPE_4 . METHOD_4 ( STRING_1 ) ; },"['Insert Invocation', 'Insert TypeAccess']",1958
public void update ( ) { if ( ( VAR_1 ) && ( METHOD_1 ( ) ) ) { ( VAR_2 ) ++ ; } else { VAR_1 = false ; VAR_2 = 0 ; VAR_3 = null ; key = STRING_1 ; } },public void update ( ) { if ( ( VAR_1 ) && ( METHOD_1 ( ) ) ) { ( VAR_2 ) ++ ; } else { VAR_1 = false ; VAR_2 = 0 ; VAR_3 = null ; key = null ; } },"['Insert Literal', 'Delete FieldRead']",1959
public void METHOD_1 ( ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_2 ) ; if ( view == null ) { return ; } this . METHOD_3 ( view ) ; },public void METHOD_1 ( ) { android.view.View view = VAR_1 . METHOD_2 ( VAR_2 ) ; this . METHOD_3 ( view ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1960
"public void METHOD_1 ( boolean b ) { METHOD_2 ( new android.content.Intent ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_4 ( VAR_4 , getString ( VAR_5 ) ) ; } }","public void METHOD_1 ( ) { METHOD_2 ( new android.content.Intent ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_4 ( VAR_4 , getString ( VAR_5 ) ) ; } }","['Delete TypeReference', 'Delete Parameter']",1962
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; }",public TYPE_1 METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1963
public int METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { return VAR_1 . METHOD_2 ( ) ; },public int METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { return 0 ; },"['Insert Literal', 'Delete VariableRead', 'Delete Invocation']",1965
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) + STRING_2 ; } else { return VAR_3 ; } },public java.lang.String METHOD_1 ( ) { if ( ( VAR_3 ) != null ) { return ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) + STRING_2 ; } else { return VAR_3 ; } },['Update FieldRead'],1966
protected boolean METHOD_1 ( ) { return VAR_1 ; },public boolean METHOD_1 ( ) { return VAR_1 ; },['Update Wra'],1967
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_2 . setText ( STRING_1 ) ; assertTrue ( VAR_3 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( VAR_4 . METHOD_3 ( ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_2 . setText ( STRING_1 ) ; assertTrue ( VAR_3 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( VAR_3 . METHOD_3 ( ) ) ; },['Update TypeAccess'],1968
private TYPE_1 getColor ( java.lang.String message ) { for ( TYPE_1 VAR_1 : VAR_2 . values ( ) ) { if ( VAR_3 . contains ( VAR_4 . toString ( ) ) ) return VAR_1 ; } return VAR_5 ; },public TYPE_1 getColor ( java.lang.String message ) { for ( TYPE_1 VAR_1 : VAR_2 . values ( ) ) { if ( VAR_3 . contains ( VAR_4 . toString ( ) ) ) return VAR_1 ; } return VAR_5 ; },['Update Wra'],1969
public void METHOD_1 ( ) { this . METHOD_2 ( true ) ; this . METHOD_3 ( false ) ; this . METHOD_4 ( false ) ; },private void METHOD_1 ( ) { this . METHOD_2 ( true ) ; this . METHOD_3 ( false ) ; this . METHOD_4 ( false ) ; },['Update Wra'],1970
protected void METHOD_1 ( final TYPE_1 VAR_1 ) throws java.lang.Exception { METHOD_2 ( ) ; },protected final void METHOD_1 ( final TYPE_1 VAR_1 ) throws java.lang.Exception { METHOD_2 ( ) ; },['Insert Wra'],1971
"public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { java.util.List < TYPE_3 > VAR_1 = VAR_2 . METHOD_2 ( 1 ) ; VAR_3 . info ( VAR_4 . METHOD_3 ( VAR_1 ) ) ; assert VAR_1 != null ; }","public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { java.util.List < TYPE_3 > VAR_1 = VAR_2 . METHOD_2 ( 0 ) ; VAR_3 . info ( VAR_4 . METHOD_3 ( VAR_1 ) ) ; assert VAR_1 != null ; }",['Update Literal'],1972
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 ) ;","public TYPE_1 METHOD_1 ( TYPE_3 VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 ) ;","['Delete TypeReference', 'Delete Parameter']",1973
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; return ( VAR_2 != null ) && ( ( VAR_2 . METHOD_3 ( VAR_3 class ) ) != null ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; return ( VAR_2 != null ) && ( ( VAR_2 . METHOD_3 ( VAR_3 class ) ) != null ) ; },"['Update Wra', 'Delete Wra']",1974
public abstract void update ( TYPE_1 VAR_1 ) ;,public void update ( TYPE_1 VAR_1 ) { },['Delete Wra'],1976
"public void METHOD_1 ( java.lang.String key , boolean value ) { METHOD_2 ( ) . METHOD_3 ( key , value ) ; }","protected void METHOD_1 ( java.lang.String key , boolean value ) { METHOD_2 ( ) . METHOD_3 ( key , value ) ; }",['Update Wra'],1977
"private void METHOD_1 ( boolean VAR_1 , java.lang.String ... VAR_2 ) { METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) , VAR_1 , ( ( java.lang.String [ ] ) ( null ) ) ) ; }","private void METHOD_1 ( java.lang.String ... VAR_2 ) { METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) , ( ( java.lang.String [ ] ) ( null ) ) ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1978
"TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , android.content.Context context ) { return new TYPE_7 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , context ) ; }","TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) { return new TYPE_7 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1979
"public void METHOD_1 ( ) { final java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , METHOD_3 ( ) , false ) ; VAR_3 . execute ( ) ; }","public void METHOD_1 ( ) { final java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , METHOD_3 ( ) , true ) ; VAR_3 . execute ( ) ; }",['Update Literal'],1981
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 . getValue ( VAR_4 class ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( VAR_5 ) , false ) ; VAR_6 = true ; METHOD_6 ( ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 . getValue ( VAR_4 class ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( VAR_5 ) ) ; VAR_6 = true ; METHOD_6 ( ) ; },['Delete Literal'],1982
"public void METHOD_1 ( ) { METHOD_2 ( ( - INT_1 ) , FLOAT_1 , VAR_1 , false ) ; }","public void METHOD_1 ( ) { METHOD_2 ( ( - INT_1 ) , 0 , VAR_1 , false ) ; }","['Insert Literal', 'Delete TypeAccess']",1983
"public double METHOD_1 ( ) { return METHOD_2 ( VAR_1 , VAR_2 ) ; }","public int METHOD_1 ( ) { return METHOD_2 ( VAR_1 , VAR_2 ) ; }",['Update TypeReference'],1984
public TYPE_1 METHOD_1 ( ) { return METHOD_1 ( true ) ; },public TYPE_1 METHOD_1 ( ) { return METHOD_1 ( false ) ; },['Update Literal'],1985
private void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 [ VAR_3 ] . METHOD_2 ( ) ; VAR_4 . setText ( VAR_1 ) ; },private void METHOD_1 ( ) { int VAR_1 = VAR_2 [ VAR_3 ] . METHOD_2 ( ) ; VAR_4 . setText ( VAR_1 ) ; },['Update TypeReference'],1987
java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { int b = VAR_1 . METHOD_2 ( ) ; return java.lang.Boolean . METHOD_3 ( ( ( b & INT_1 ) != 0 ) ) ; },java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { int b = VAR_1 . METHOD_2 ( ) ; return java.lang.Boolean . METHOD_3 ( ( ( b & 1 ) != 0 ) ) ; },"['Insert Literal', 'Delete FieldRead']",1988
"public double get ( int i , int j ) { return VAR_1 . get ( i ) . get ( j ) ; }","private double get ( int i , int j ) { return 1 ; }","['Update Wra', 'Insert Literal', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1989
"public void init ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 = new TYPE_3 ( VAR_3 ) ; field = new TYPE_4 ( VAR_4 , VAR_5 . height , VAR_3 ) ; VAR_6 = new TYPE_5 ( field , VAR_3 , VAR_2 ) ; }","public void init ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 = new TYPE_3 ( ) ; field = new TYPE_4 ( VAR_4 , VAR_5 . height , VAR_3 ) ; VAR_6 = new TYPE_5 ( field , VAR_3 , VAR_2 ) ; }",['Delete FieldRead'],1990
"public static TYPE_1 METHOD_1 ( int VAR_1 , int size , int VAR_2 ) { return new TYPE_1 ( VAR_1 , size , VAR_2 , VAR_3 ) ; }","public static TYPE_1 METHOD_1 ( int VAR_1 , int size ) { return new TYPE_1 ( VAR_1 , size , VAR_3 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1991
public void METHOD_1 ( android.content.Context VAR_1 ) { VAR_2 = VAR_1 ; if ( ( VAR_3 ) == null ) { VAR_3 = new TYPE_1 ( this ) ; } VAR_3 . METHOD_1 ( VAR_1 ) ; },"public void METHOD_1 ( android.content.Context VAR_1 ) { VAR_2 = VAR_1 ; if ( ( VAR_3 ) == null ) { VAR_3 = new TYPE_1 ( VAR_2 , this ) ; } }","['Update ConstructorCall', 'Insert FieldRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1992
public int METHOD_1 ( int y ) { y = y % ( this . VAR_1 ) ; if ( y < 0 ) { y = y + ( this . VAR_1 ) ; } return y ; },public int METHOD_1 ( int y ) { y = y % ( this . VAR_1 ) ; if ( y < 0 ) { y = y + ( this . VAR_1 ) ; } return x ; },"['Insert FieldRead', 'Delete VariableRead']",1993
private void METHOD_1 ( ) { VAR_1 . commit ( ) ; },public void METHOD_1 ( ) { VAR_1 . commit ( ) ; },['Update Wra'],1996
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { this . VAR_4 . add ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { VAR_4 . add ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) ; }","['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",1997
"public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = new TYPE_1 < TYPE_2 > ( new TYPE_3 < TYPE_2 > ( VAR_2 class , false ) ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; }","public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = new TYPE_1 < TYPE_2 > ( new TYPE_3 < TYPE_2 > ( VAR_2 class , false ) ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ""0"" ) ) ; }","['Insert Literal', 'Delete TypeAccess']",1998
"public java.util.List < java.lang.Object [ ] > METHOD_1 ( TYPE_1 VAR_1 , java.util.Set < TYPE_2 > VAR_2 , long VAR_3 ) { java.lang.String VAR_4 = METHOD_2 ( ) ; return METHOD_3 ( VAR_1 , VAR_2 , VAR_4 , VAR_3 ) ; }","public java.util.List < java.lang.Object [ ] > METHOD_1 ( TYPE_1 VAR_1 , java.util.Set < TYPE_2 > VAR_2 ) { java.lang.String VAR_4 = METHOD_2 ( ) ; return METHOD_3 ( VAR_1 , VAR_2 , VAR_4 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1999
"public static TYPE_1 METHOD_1 ( TYPE_2 type , TYPE_3 [ ] VAR_1 ) { return new TYPE_4 ( VAR_2 , type , type , new TYPE_5 ( STRING_1 , TYPE_6 . METHOD_2 ( VAR_3 , VAR_1 ) , java.util.Arrays.asList ( VAR_1 ) , VAR_4 ) ) ; }","public static TYPE_1 METHOD_1 ( TYPE_2 type , TYPE_3 [ ] VAR_1 ) { return new TYPE_4 ( VAR_2 , type , type , new TYPE_5 ( java.util.Arrays.asList ( VAR_1 ) , VAR_4 ) ) ; }","['Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2000
"public void update ( ) { update ( true , null ) ; }","public void update ( ) { update ( false , null ) ; }",['Update Literal'],2001
public TYPE_1 METHOD_1 ( ) { VAR_1 = false ; return METHOD_2 ( ) ; },public TYPE_1 METHOD_1 ( ) { this . VAR_1 = false ; return METHOD_2 ( ) ; },['Insert ThisAccess'],2002
protected void METHOD_1 ( ) { this . VAR_1 . get ( ) . METHOD_2 ( ) ; this . VAR_2 = TYPE_1 . METHOD_3 ( ) ; },protected void METHOD_1 ( ) { this . VAR_1 . get ( ) . METHOD_2 ( ) ; this . VAR_2 = null ; },"['Insert Literal', 'Delete TypeAccess', 'Delete Invocation']",2003
"protected static boolean METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { return VAR_1 == null ? VAR_2 == null : VAR_3 . equals ( VAR_2 ) ; }","private static boolean METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { return VAR_1 == null ? VAR_2 == null : VAR_3 . equals ( VAR_2 ) ; }",['Update Wra'],2005
TYPE_1 METHOD_1 ( android.content.Context context ) { if ( ( VAR_1 ) == null ) { getData ( context ) ; } if ( ( VAR_1 ) != null ) { VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_3 = VAR_4 ; } return VAR_2 ; },TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { getData ( ) ; } if ( ( VAR_1 ) != null ) { VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_3 = VAR_4 ; } return VAR_2 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2006
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( true , METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( this , 0 ) ; VAR_2 . show ( METHOD_5 ( ) , STRING_1 ) ; }","private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( true ) ; VAR_1 . METHOD_4 ( this , 0 ) ; VAR_2 . show ( METHOD_5 ( ) , STRING_1 ) ; }",['Delete Invocation'],2007
"public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( id , VAR_1 , VAR_2 , VAR_3 . METHOD_1 ( ) ) ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( id , VAR_1 , VAR_2 ) ; }","['Delete TypeAccess', 'Delete Invocation']",2008
"public void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 ) ; ++ i ) { METHOD_2 ( i , false ) ; } }",public void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 ) ; ++ i ) { METHOD_2 ( false ) ; } },['Delete VariableRead'],2009
"TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;",TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",2011
public void METHOD_1 ( ) { this . VAR_1 = new TYPE_1 ( new java.io.File ( STRING_1 ) ) ; },"public void METHOD_1 ( ) { this . VAR_1 = new TYPE_1 ( null , new java.io.File ( STRING_1 ) ) ; }","['Update ConstructorCall', 'Insert Literal']",2012
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_1 . METHOD_4 ( STRING_1 ) ; VAR_1 . METHOD_5 ( ) ; VAR_2 . setText ( VAR_3 . toString ( ) ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_1 . METHOD_4 ( STRING_1 ) ; VAR_1 . METHOD_5 ( ) ; VAR_2 . setText ( VAR_3 . toString ( ) ) ; },['Update Wra'],2013
"public native void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String string ) ;","public native void METHOD_1 ( TYPE_1 element , java.lang.String string ) ;",['Update Parameter'],2014
public static java.lang.String METHOD_1 ( int count ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < count ; ++ i ) VAR_2 . append ( STRING_1 ) ; return VAR_2 . toString ( ) ; },private static java.lang.String METHOD_1 ( int count ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < count ; ++ i ) VAR_2 . append ( STRING_1 ) ; return VAR_2 . toString ( ) ; },['Update Wra'],2016
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Throwable VAR_2 ) { VAR_3 . remove ( VAR_1 ) ; java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_2 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Throwable VAR_2 ) { VAR_3 . remove ( VAR_1 ) ; java.lang.System.out.println ( STRING_1 ) ; }","['Delete VariableRead', 'Delete Invocation']",2017
public static int METHOD_1 ( int VAR_1 ) { return INT_1 * VAR_1 ; },public static int METHOD_1 ( int VAR_1 ) { return 0 ; },"['Insert Literal', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator']",2018
private final void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 listener : VAR_2 ) { listener . METHOD_2 ( VAR_1 ) ; } },public final void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 listener : VAR_2 ) { listener . METHOD_2 ( VAR_1 ) ; } },['Update Wra'],2019
public void add ( TYPE_1 VAR_1 ) { this . VAR_2 . METHOD_1 ( VAR_1 ) ; if ( ( this . VAR_3 . size ( ) ) > INT_1 ) { this . VAR_2 . METHOD_2 ( ) ; } this . VAR_4 = VAR_1 ; },public void add ( TYPE_1 VAR_1 ) { this . VAR_2 . METHOD_1 ( VAR_1 ) ; if ( ( this . VAR_3 . size ( ) ) > INT_1 ) { this . VAR_3 . remove ( 0 ) ; } this . VAR_4 = VAR_1 ; },"['Update Invocation', 'Update FieldRead', 'Insert Literal']",2020
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.Integer VAR_2 , java.lang.String name , java.lang.String VAR_3 , java.lang.String VAR_4 ) { return METHOD_1 ( type , VAR_1 , VAR_2 , name , VAR_3 , VAR_4 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , java.lang.String name , java.lang.String VAR_3 , java.lang.String VAR_4 ) { return METHOD_1 ( type , VAR_1 , VAR_2 , name , VAR_3 , VAR_4 ) ; }",['Update TypeReference'],2021
"public synchronized void METHOD_1 ( ) { this . VAR_1 = VAR_2 ; try { METHOD_2 ( ) ; VAR_3 . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_1 VAR_4 ) { VAR_5 . error ( STRING_2 , VAR_4 ) ; } }","public synchronized void METHOD_1 ( ) { this . VAR_1 = VAR_2 ; try { METHOD_2 ( ) ; VAR_5 . info ( STRING_1 ) ; } catch ( TYPE_1 VAR_4 ) { VAR_5 . error ( STRING_2 , VAR_4 ) ; } }","['Update Invocation', 'Update TypeAccess']",2023
"public static void assertNotNull ( java.lang.Object VAR_1 ) { VAR_2 . assertNotNull ( VAR_1 , null ) ; }",public static void assertNotNull ( java.lang.Object VAR_1 ) { VAR_2 . assertTrue ( ( VAR_1 == null ) ) ; },"['Update Invocation', 'Insert BinaryOperator', 'Move VariableRead', 'Move Literal']",2024
public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( 0 ) ) == true ) { METHOD_3 ( STRING_1 ) ; } },public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) == true ) { METHOD_3 ( STRING_1 ) ; } },['Delete Literal'],2025
"private TYPE_1 METHOD_1 ( java.util.List < java.lang.String > start , java.util.List < java.lang.String > end , boolean VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( start , end , VAR_1 , VAR_4 , VAR_2 ) ; return VAR_3 ; }","private TYPE_1 METHOD_1 ( java.util.List < java.lang.String > start , java.util.List < java.lang.String > end , boolean VAR_1 ) { TYPE_3 VAR_3 = new TYPE_3 ( start , end , VAR_1 , VAR_4 ) ; return VAR_3 ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2026
"public boolean METHOD_1 ( java.lang.String key , boolean VAR_1 ) { java.lang.Object obj = get ( key ) ; if ( obj == null ) return false ; if ( obj instanceof java.lang.Boolean ) return ( ( java.lang.Boolean ) ( obj ) ) ; return VAR_1 ; }",public boolean METHOD_1 ( java.lang.String key ) { java.lang.Object obj = get ( key ) ; if ( obj == null ) return false ; if ( obj instanceof java.lang.Boolean ) return ( ( java.lang.Boolean ) ( obj ) ) ; return false ; },"['Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2028
"public void METHOD_1 ( int VAR_1 ) { METHOD_1 ( true , VAR_1 , true ) ; }","public void METHOD_1 ( int VAR_1 ) { METHOD_1 ( true , VAR_1 ) ; }",['Delete Literal'],2029
public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ( VAR_1 + 1 ) ) ; METHOD_3 ( ) ; },public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; },"['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",2030
"private static long METHOD_1 ( long VAR_1 , long VAR_2 , int VAR_3 , int method , int VAR_4 , long VAR_5 ) { return 0 ; }","private static native long METHOD_1 ( long VAR_1 , long VAR_2 , int VAR_3 , int method , int VAR_4 , long VAR_5 ) ;","['Insert Wra', 'Delete Literal', 'Delete Return']",2031
"public void execute ( final TYPE_1 VAR_1 ) { execute ( false , VAR_1 ) ; }","public void execute ( final TYPE_1 VAR_1 ) { execute ( true , VAR_1 ) ; }",['Update Literal'],2033
"public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_8 ) ; }",['Delete TypeAccess'],2035
"public static void METHOD_1 ( java.util.Date time ) { if ( time != null ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 , VAR_2 . getTime ( ) ) . METHOD_5 ( ) ; } }","public static void METHOD_1 ( java.util.Date time ) { if ( time != null ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 , VAR_2 . getTime ( ) ) . commit ( ) ; } }",['Update Invocation'],2036
"java.util.List < TYPE_1 > update ( android.content.Context context , TYPE_2 VAR_1 ) ;",java.util.List < TYPE_1 > update ( TYPE_2 VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",2037
public boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . VAR_1 ) >= ( METHOD_2 ( ) . METHOD_3 ( 0 ) ) ; },public boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . VAR_1 ) > ( METHOD_2 ( ) . METHOD_3 ( 0 ) ) ; },['Update BinaryOperator'],2038
"private static void METHOD_1 ( TYPE_1 query , java.util.Map < java.lang.Object , TYPE_2 > VAR_1 , TYPE_3 VAR_2 , boolean VAR_3 ) throws java.io.IOException { TYPE_4 . METHOD_2 ( query . METHOD_3 ( VAR_2 ) , VAR_1 , VAR_2 , VAR_3 ) ; }","private static void METHOD_1 ( TYPE_1 query , java.util.Map < java.lang.Object , TYPE_2 > VAR_1 , TYPE_3 VAR_2 , boolean VAR_3 ) throws java.io.IOException { TYPE_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( query , VAR_2 ) , VAR_1 , VAR_2 , VAR_3 ) ; }",['Insert TypeAccess'],2039
protected void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; },public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; },['Update Wra'],2040
public double METHOD_1 ( ) { double VAR_1 = this . METHOD_2 ( 1 ) ; if ( ( VAR_1 < 0 ) && ( VAR_1 >= ( - FLOAT_1 ) ) ) { return 0 ; } return VAR_1 ; },public double METHOD_1 ( ) { double VAR_1 = this . METHOD_2 ( 1 ) ; if ( ( VAR_1 < 0 ) && ( VAR_1 > ( - FLOAT_1 ) ) ) { return 0 ; } return VAR_1 ; },['Update BinaryOperator'],2041
"public void METHOD_1 ( java.lang.String message ) { final java.lang.String VAR_1 = message ; VAR_2 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_3 ( ) { TYPE_2 . METHOD_4 ( VAR_3 this , VAR_1 , VAR_4 ) . show ( ) ; } } ) ; }","private void METHOD_1 ( java.lang.String message ) { final java.lang.String VAR_1 = message ; VAR_2 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_3 ( ) { TYPE_2 . METHOD_4 ( VAR_3 this , VAR_1 , VAR_4 ) . show ( ) ; } } ) ; }",['Update Wra'],2042
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , ( ( VAR_3 . getId ( ) ) + STRING_1 ) , VAR_4 . METHOD_3 ( VAR_1 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , ( ( VAR_3 . getName ( ) ) + STRING_1 ) , VAR_4 . METHOD_3 ( VAR_1 ) ) ; }",['Update Invocation'],2044
"private void METHOD_1 ( java.lang.String words , int VAR_1 ) { VAR_2 . METHOD_1 ( words , VAR_1 , null ) ; }","private void METHOD_1 ( java.lang.String words , int VAR_1 ) { VAR_2 . METHOD_1 ( words , VAR_1 , null , null ) ; }",['Insert Literal'],2045
public void METHOD_1 ( ) { VAR_1 = VAR_2 . list ( VAR_3 . METHOD_2 ( ) ) ; },private void METHOD_1 ( ) { VAR_1 = VAR_2 . list ( VAR_3 . METHOD_2 ( ) ) ; },['Update Wra'],2047
"private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , new java.lang.String [ ] { ""true"" , ""false"" } , 0 ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , new java.lang.String [ ] { ""true"" , ""true"" } , 0 ) ; }",['Update Literal'],2048
private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( ) ; } },"['Delete VariableRead', 'Delete Invocation']",2049
"public int METHOD_1 ( TYPE_1 t , int id ) { VAR_1 . add ( id , t ) ; return id ; }","public int METHOD_1 ( TYPE_1 t , int id ) { VAR_1 . add ( t ) ; return VAR_1 . size ( ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Delete VariableRead', 'Delete VariableRead']",2050
"public static boolean METHOD_1 ( int VAR_1 , TYPE_1 error ) { return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , error ) ; }",public static boolean METHOD_1 ( TYPE_1 error ) { return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( error ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2051
"public TYPE_1 METHOD_1 ( double VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) , VAR_1 ) ; VAR_4 = false ; METHOD_6 ( ) ; return this ; }","public TYPE_1 METHOD_1 ( double VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( false ) , VAR_2 . METHOD_5 ( false ) , VAR_1 ) ; VAR_4 = false ; METHOD_6 ( ) ; return this ; }","['Insert Literal', 'Insert Literal']",2053
protected boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) ) <= ( VAR_2 ) ; },protected boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) ) >= ( VAR_2 ) ; },['Update BinaryOperator'],2054
protected TYPE_1 METHOD_1 ( ) throws java.io.IOException { return VAR_1 . METHOD_2 ( ) ; },private TYPE_1 METHOD_1 ( ) throws java.io.IOException { return VAR_1 . METHOD_2 ( ) ; },['Update Wra'],2056
private void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ( VAR_1 == 0 ? VAR_3 : VAR_4 ) ) ; },private void METHOD_1 ( int value ) { VAR_2 . METHOD_2 ( ( value == 0 ? VAR_3 : VAR_4 ) ) ; },"['Update Parameter', 'Update VariableRead']",2057
"private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_1 ( VAR_1 , VAR_2 , null , 1 , 0 ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_1 ( VAR_1 , VAR_2 , null , 0 , 0 ) ; }",['Update Literal'],2058
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) <= ( VAR_3 ) ) { METHOD_2 ( VAR_1 ) ; } ( VAR_2 ) ++ ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) < ( VAR_3 ) ) { METHOD_2 ( VAR_1 ) ; } ( VAR_2 ) ++ ; },['Update BinaryOperator'],2059
public java.lang.String METHOD_1 ( ) { TYPE_1 t = getClass ( ) . METHOD_2 ( VAR_1 class ) ; return t == null ? getClass ( ) . METHOD_3 ( ) : VAR_2 . name ( ) ; },public java.lang.String METHOD_1 ( ) { TYPE_1 t = getClass ( ) . METHOD_2 ( VAR_1 class ) ; return t == null ? getClass ( ) . getName ( ) : VAR_2 . name ( ) ; },['Update Invocation'],2062
public final boolean METHOD_1 ( java.lang.String name ) { return ( ( context ) != null ) && ( context . METHOD_2 ( name ) ) ; },protected final boolean METHOD_1 ( java.lang.String name ) { return ( ( context ) != null ) && ( context . METHOD_2 ( name ) ) ; },['Update Wra'],2064
"public void METHOD_1 ( ) throws TYPE_1 { org.testng.Assert.assertEquals ( METHOD_2 ( VAR_1 , 1 , 1 ) , 0 ) ; }","public void METHOD_1 ( ) throws TYPE_1 { assertEquals ( METHOD_2 ( VAR_1 , 1 , 1 ) , 0 ) ; }",['Delete FieldRead'],2065
"public static TYPE_1 METHOD_1 ( final int min , final int VAR_1 ) { return TYPE_2 . METHOD_2 ( new TYPE_3 ( min , VAR_1 ) ) . msg ( ( ( ( ( STRING_1 + min ) + STRING_2 ) + VAR_1 ) + STRING_3 ) ) ; }","public static TYPE_1 METHOD_1 ( final int min , final int VAR_1 ) { return TYPE_2 . METHOD_2 ( new TYPE_3 ( VAR_1 , VAR_1 ) ) . msg ( ( ( ( ( STRING_1 + min ) + STRING_2 ) + VAR_1 ) + STRING_3 ) ) ; }",['Update VariableRead'],2066
"public static java.lang.String METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) throws java.io.IOException { return TYPE_1 . METHOD_1 ( new java.io.File ( path ) , VAR_1 ) ; }","public static java.lang.String METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) throws java.io.IOException { return TYPE_1 . METHOD_1 ( new java.io.File ( path ) ) ; }",['Delete VariableRead'],2067
"protected void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ; TYPE_4 . METHOD_4 ( TYPE_3 . METHOD_3 ( ) , null ) . METHOD_5 ( ) ; }","protected void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ; TYPE_4 . METHOD_4 ( TYPE_3 . METHOD_3 ( ) , null , false ) . METHOD_5 ( ) ; }",['Insert Literal'],2068
"public void METHOD_1 ( ) { p . METHOD_2 ( ) . METHOD_3 ( p , STRING_1 ) ; }",public void METHOD_1 ( ) { p . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; },['Delete FieldRead'],2069
public TYPE_1 METHOD_1 ( TYPE_2 TYPE_3 ) { if ( TYPE_3 == null ) return null ; return VAR_1 . METHOD_1 ( METHOD_2 ( ) ) ; },public TYPE_1 METHOD_1 ( TYPE_2 TYPE_3 ) { return VAR_1 . METHOD_1 ( METHOD_2 ( ) ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2071
public static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . update ( VAR_1 ) ; },public static java.lang.Integer METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . update ( VAR_1 ) ; return 1 ; },"['Update TypeReference', 'Insert Return', 'Insert Literal']",2072
"public void METHOD_1 ( TYPE_1 error , java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( getString ( VAR_4 ) ) ; VAR_5 . setEnabled ( true ) ; }","public void METHOD_1 ( TYPE_1 error , java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( getString ( VAR_4 ) ) ; }","['Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",2073
public TYPE_1 < TYPE_2 < java.lang.String > > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; },"public TYPE_1 < TYPE_2 < java.lang.String > > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 , null ) ; }",['Insert Literal'],2074
"public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = TYPE_1 . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( ) ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2075
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; new TYPE_1 ( ) . METHOD_4 ( ) ; info ( STRING_1 ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; new TYPE_1 ( ) . METHOD_4 ( this ) ; info ( STRING_1 ) ; },['Insert ThisAccess'],2076
"public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 out ) { if ( ! ( VAR_2 . isEmpty ( ) ) ) { out.write ( VAR_1 ) ; } out.write ( id ) ; super . METHOD_1 ( STRING_1 , out ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 out ) { if ( ! ( VAR_2 . isEmpty ( ) ) ) { out.write ( VAR_1 ) ; } out.write ( id ) ; super . METHOD_1 ( VAR_1 , out ) ; }","['Insert VariableRead', 'Delete TypeAccess']",2077
"public static TYPE_1 METHOD_1 ( TYPE_2 t , byte [ ] b ) { return null ; }","public static TYPE_1 METHOD_1 ( TYPE_2 t , byte [ ] b ) { return t . METHOD_1 ( b ) ; }","['Insert Invocation', 'Insert VariableRead', 'Insert VariableRead', 'Delete Literal']",2078
"public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; VAR_1 = new TYPE_1 ( VAR_1 ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( VAR_1 , VAR_1 . METHOD_6 ( ) ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; VAR_1 = new TYPE_1 ( VAR_1 ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Invocation']",2079
"public static TYPE_1 METHOD_1 ( int id , int VAR_1 , boolean VAR_2 ) { if ( VAR_3 ) throw new TYPE_2 ( STRING_1 ) ; return new TYPE_1 ( id , false , VAR_1 , VAR_2 ) ; }","public static TYPE_1 METHOD_1 ( int id , int VAR_1 , boolean VAR_2 ) { if ( VAR_3 ) throw new TYPE_2 ( STRING_1 ) ; return new TYPE_1 ( id , false , null , VAR_1 , VAR_2 ) ; }","['Update ConstructorCall', 'Insert Literal']",2080
public void METHOD_1 ( ) { for ( java.lang.String VAR_1 : VAR_2 ) { java.lang.System.out.println ( VAR_1 ) ; } },private void METHOD_1 ( ) { for ( java.lang.String VAR_1 : VAR_2 ) { java.lang.System.out.println ( VAR_1 ) ; } },['Update Wra'],2082
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { VAR_2 = VAR_3 . first ( ) . file ( ) . METHOD_2 ( ) . replace ( CHAR_1 , CHAR_2 ) ; METHOD_3 ( false ) ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { VAR_2 = VAR_3 . first ( ) . file ( ) . METHOD_2 ( ) . replace ( CHAR_1 , CHAR_2 ) ; METHOD_3 ( ) ; }",['Delete Literal'],2083
"public TYPE_1 handle ( TYPE_2 VAR_1 , TYPE_3 response ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = TYPE_4 . METHOD_1 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; return new TYPE_1 ( VAR_2 , STRING_5 ) ; }","public TYPE_1 handle ( TYPE_2 VAR_1 , TYPE_3 response ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = TYPE_4 . METHOD_1 ( STRING_1 , STRING_2 ) ; return new TYPE_1 ( VAR_2 , STRING_5 ) ; }","['Delete TypeAccess', 'Delete TypeAccess']",2084
public void METHOD_1 ( android.view.View view ) { if ( ( context ) instanceof TYPE_1 ) { ( ( TYPE_1 ) ( context ) ) . METHOD_2 ( string ) ; } },public void METHOD_1 ( android.view.View view ) { if ( ( context ) instanceof TYPE_1 ) { ( ( TYPE_1 ) ( context ) ) . METHOD_2 ( string ) ; } else { } },['Insert Block'],2085
"public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , VAR_3 , this ) ; }","['Update Invocation', 'Move Invocation', 'Insert Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Move TypeAccess', 'Move TypeAccess', 'Delete Invocation']",2086
"public synchronized void METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; METHOD_4 ( VAR_1 ) ; }","public synchronized void METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; }",['Insert VariableRead'],2087
"public static void METHOD_1 ( java.lang.Exception VAR_1 , java.lang.String VAR_2 ) { if ( ! ( VAR_3 ) ) { java.lang.System.err.println ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; VAR_1 . METHOD_2 ( VAR_4 ) ; VAR_3 = false ; } }","public static void METHOD_1 ( java.lang.Exception VAR_1 , java.lang.String VAR_2 ) { if ( ! ( VAR_3 ) ) { java.lang.System.err.println ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; VAR_1 . METHOD_2 ( VAR_4 ) ; VAR_3 = true ; } }",['Update Literal'],2088
public final void METHOD_1 ( long VAR_1 ) { this . VAR_1 = VAR_1 ; },protected final void METHOD_1 ( long VAR_1 ) { this . VAR_1 = VAR_1 ; },['Update Wra'],2090
"public void METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String data ) { if ( VAR_3 . contains ( VAR_1 ) ) VAR_3 . remove ( ( ( java.lang.Integer ) ( VAR_1 ) ) ) ; }","public void METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String data ) { if ( VAR_3 . contains ( VAR_1 ) ) VAR_3 . remove ( VAR_1 ) ; }",['Delete TypeReference'],2091
"protected TYPE_1 METHOD_1 ( TYPE_2 context , java.lang.String path ) throws TYPE_3 { TYPE_1 file = METHOD_2 ( context , path ) ; if ( file == null ) { throw new TYPE_3 ( ( ( STRING_1 + path ) + STRING_2 ) ) ; } return file ; }","protected TYPE_1 METHOD_1 ( TYPE_2 context , java.lang.String path ) throws TYPE_3 { TYPE_1 file = METHOD_2 ( context , path ) ; if ( file == null ) { throw new TYPE_3 ( ( ( STRING_1 + file ) + STRING_2 ) ) ; } return file ; }",['Update VariableRead'],2092
"private boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . getName ( ) , true ) ; }","private boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . getName ( ) , false ) ; }",['Update Literal'],2094
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( intent ) ; }","['Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2095
"public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 p = new TYPE_1 ( ) ; p . METHOD_2 ( false ) ; p . METHOD_3 ( METHOD_4 ( STRING_1 ) ) ; VAR_1 . assertEquals ( STRING_2 , VAR_2 . getValue ( STRING_3 ) ) ; }","public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 p = new TYPE_1 ( ) ; p . METHOD_2 ( false ) ; p . METHOD_3 ( METHOD_4 ( STRING_1 ) ) ; assertEquals ( STRING_2 , VAR_2 . getValue ( STRING_3 ) ) ; }",['Update TypeAccess'],2096
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( new java.util.Date ( ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation']",2097
public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_1 ( 0 ) ) == true ) { METHOD_2 ( STRING_1 ) ; } },public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_1 ( ) ) == true ) { METHOD_2 ( STRING_1 ) ; } },['Delete Literal'],2098
public long METHOD_1 ( int VAR_1 ) { return VAR_1 ; },public long METHOD_1 ( int VAR_1 ) { return 0 ; },"['Insert Literal', 'Delete VariableRead']",2099
"private java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , boolean VAR_4 , java.lang.String VAR_5 ) { return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 , VAR_5 ) ; }","private java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead']",2100
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = this ; VAR_2 = TYPE_1 . METHOD_2 ( this ) ; TYPE_2 . METHOD_3 ( STRING_1 ) ; new TYPE_3 ( this ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = this ; VAR_2 = TYPE_1 . METHOD_2 ( this ) ; TYPE_2 . METHOD_3 ( STRING_1 ) ; new TYPE_3 ( this ) ; METHOD_4 ( ) ; },['Delete Invocation'],2101
"public void METHOD_1 ( java.lang.Long id , java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; this . VAR_4 . update ( VAR_3 , VAR_1 , VAR_2 , id ) ; }","public void METHOD_1 ( java.lang.Long id , java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; this . VAR_4 . update ( VAR_3 , VAR_1 , id ) ; }",['Delete VariableRead'],2102
private void event ( TYPE_1 event ) { METHOD_1 ( ) . METHOD_2 ( event . METHOD_3 ( ) ) . METHOD_4 ( event . METHOD_5 ( ) ) . METHOD_6 ( event . METHOD_7 ( ) ) ; },public void event ( TYPE_1 event ) { METHOD_1 ( ) . METHOD_2 ( event . METHOD_3 ( ) ) . METHOD_4 ( event . METHOD_5 ( ) ) . METHOD_6 ( event . METHOD_7 ( ) ) ; },['Update Wra'],2103
public int METHOD_1 ( java.lang.String VAR_1 ) { return INT_1 ; },public int METHOD_1 ( java.lang.String VAR_1 ) { return 1 ; },"['Insert Literal', 'Delete FieldRead']",2104
private TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( name ) ; VAR_2 . add ( VAR_3 ) ; VAR_1 . METHOD_3 ( true ) ; return VAR_1 ; },private TYPE_1 METHOD_1 ( java.lang.String label ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( label ) ; VAR_2 . add ( VAR_3 ) ; VAR_1 . METHOD_3 ( true ) ; return VAR_1 ; },"['Update Parameter', 'Update VariableRead']",2105
protected double [ ] METHOD_1 ( ) { return new double [ ] { INT_1 } ; },protected double [ ] METHOD_1 ( ) { return new double [ 0 ] ; },"['Insert Literal', 'Delete FieldRead']",2106
public void delete ( TYPE_1 t ) { },public void delete ( ) { },"['Delete TypeReference', 'Delete Parameter']",2107
public void METHOD_1 ( ) { try { new TYPE_1 ( ) ; VAR_1 . fail ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { } },public void METHOD_1 ( ) { try { new TYPE_1 ( ) ; fail ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { } },['Update TypeAccess'],2108
"public boolean METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { return false ; }",public boolean METHOD_1 ( java.lang.String VAR_1 ) { return false ; },"['Delete TypeReference', 'Delete Parameter']",2109
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_2 ( ( ( VAR_2 ) + STRING_1 ) , VAR_1 ) ; }",public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( ( ( VAR_2 ) + STRING_1 ) ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2111
"public abstract void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , int VAR_4 , int VAR_5 ) ;","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , int VAR_4 , int VAR_5 ) { }",['Delete Wra'],2112
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; }","public void METHOD_1 ( ) { METHOD_2 ( VAR_3 , VAR_4 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2113
protected boolean METHOD_1 ( java.lang.String VAR_1 ) { int index = VAR_1 . METHOD_2 ( STRING_1 ) ; return ( index != ( - 1 ) ) && ( ( VAR_2 . substring ( index ) . length ( ) ) > 1 ) ; },protected boolean METHOD_1 ( java.lang.String VAR_1 ) { int index = VAR_1 . METHOD_2 ( STRING_1 ) ; return ( index != ( - 1 ) ) && ( ( VAR_2 . substring ( index ) . length ( ) ) > 0 ) ; },['Update Literal'],2114
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = null ; METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = null ; METHOD_2 ( VAR_1 ) ; },['Update Wra'],2115
"public void METHOD_1 ( java.lang.Integer VAR_1 ) { assertTrue ( ( ( VAR_1 == ( VAR_2 ) ) || ( VAR_1 == ( VAR_3 ) ) ) , VAR_4 . getString ( STRING_1 , VAR_1 ) ) ; this . VAR_1 = VAR_1 ; }","public void METHOD_1 ( int VAR_1 ) { assertTrue ( ( ( VAR_1 == ( VAR_2 ) ) || ( VAR_1 == ( VAR_3 ) ) ) , VAR_4 . getString ( STRING_1 , VAR_1 ) ) ; this . VAR_1 = VAR_1 ; }",['Update TypeReference'],2117
public void METHOD_1 ( ) { VAR_1 . remove ( ( ( VAR_2 ) - 1 ) ) ; if ( ( VAR_2 ) >= ( ( VAR_1 . size ( ) ) - 1 ) ) { ( VAR_2 ) -- ; } },public void METHOD_1 ( ) { VAR_1 . remove ( ( ( VAR_2 ) - 1 ) ) ; if ( ( VAR_2 ) == ( ( VAR_1 . size ( ) ) - 1 ) ) { ( VAR_2 ) -- ; } },['Update BinaryOperator'],2118
private void METHOD_1 ( double VAR_1 ) { VAR_2 = VAR_1 ; },public void METHOD_1 ( double VAR_1 ) { VAR_2 = VAR_1 ; },['Update Wra'],2119
public float METHOD_1 ( TYPE_1 VAR_1 ) { return FLOAT_1 ; },public float METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete FieldRead', 'Delete Return']",2121
"public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { java.util.Map < java.lang.String , TYPE_3 < TYPE_4 > > VAR_2 = null ; }","public java.util.Map < java.lang.String , TYPE_3 < TYPE_4 > > METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { java.util.Map < java.lang.String , TYPE_3 < TYPE_4 > > VAR_2 = null ; return VAR_2 ; }","['Update TypeReference', 'Insert Return', 'Insert TypeReference', 'Insert TypeReference', 'Insert VariableRead', 'Insert TypeReference']",2122
"public void METHOD_1 ( ) { boolean b = VAR_1 . METHOD_2 ( null , null ) ; TYPE_1 . METHOD_3 ( b ) ; }","public void METHOD_1 ( ) { boolean b = VAR_1 . METHOD_2 ( null , null ) ; METHOD_3 ( b ) ; }",['Update TypeAccess'],2123
"private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { TYPE_3 VAR_3 ; VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { TYPE_3 VAR_3 = null ; VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; }","['Update Wra', 'Insert Literal']",2124
"public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( this . x , this . y ) ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( this . x , this . y , false ) ; }",['Insert Literal'],2125
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( getIntent ( ) ) ; TYPE_2 . METHOD_3 ( METHOD_4 ( ) , VAR_1 ) ; VAR_2 . METHOD_5 ( this ) ; }",protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( getIntent ( ) ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_5 ( this ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2126
public TYPE_1 METHOD_1 ( TYPE_2 b ) { for ( TYPE_1 c : VAR_1 ) { if ( ( VAR_2 ) == b ) { return c ; } } return null ; },public TYPE_1 METHOD_1 ( TYPE_2 b ) { for ( TYPE_1 c : VAR_1 ) { } return null ; },"['Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",2127
"protected java.lang.String [ ] METHOD_1 ( ) { return VAR_1 . toString ( ) . split ( ""\n"" ) ; }","public java.lang.String [ ] METHOD_1 ( ) { return VAR_1 . toString ( ) . split ( ""\n"" ) ; }",['Update Wra'],2128
protected float METHOD_1 ( float VAR_1 ) { return ( ( float ) ( VAR_1 * FLOAT_1 ) ) ; },private float METHOD_1 ( float VAR_1 ) { return ( ( float ) ( VAR_1 * FLOAT_1 ) ) ; },['Update Wra'],2129
"protected long METHOD_1 ( ) throws java.lang.Exception { if ( ( getType ( ) ) == ( VAR_1 ) ) { return - 1 ; } return METHOD_2 ( false , false ) . METHOD_3 ( ) . getTime ( ) ; }",protected long METHOD_1 ( ) throws java.lang.Exception { if ( ( getType ( ) ) == ( VAR_1 ) ) { return - 1 ; } return METHOD_2 ( false ) . METHOD_3 ( ) . getTime ( ) ; },['Delete Literal'],2130
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( STRING_1 , ( ( STRING_2 + VAR_1 ) + STRING_2 ) ) ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( STRING_1 , VAR_1 ) ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",2131
private double METHOD_1 ( ) { double VAR_1 = 0.0 ; for ( TYPE_1 item : this . VAR_2 ) { VAR_1 += item . METHOD_2 ( ) ; } return ( java.lang.Math.round ( ( VAR_1 * FLOAT_1 ) ) ) / FLOAT_1 ; },private double METHOD_1 ( ) { double VAR_1 = 0.0 ; for ( TYPE_1 item : this . VAR_2 ) { VAR_1 += item . METHOD_2 ( ) ; } return VAR_1 ; },"['Move VariableRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2132
"private TYPE_1 < TYPE_2 , java.lang.Long > METHOD_1 ( TYPE_3 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_3 ( ) . count ( ) ; }","public TYPE_1 < TYPE_2 , java.lang.Long > METHOD_1 ( TYPE_3 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_3 ( ) . count ( ) ; }",['Update Wra'],2133
"public void METHOD_1 ( float VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 , float VAR_5 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }","public void METHOD_1 ( float VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 , float VAR_5 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }",['Delete VariableRead'],2135
"public TYPE_1 METHOD_1 ( int i ) { switch ( i ) { case 0 : return TYPE_2 . METHOD_2 ( VAR_1 ) ; case 1 : return TYPE_3 . METHOD_2 ( null , STRING_1 ) ; } return null ; }",public TYPE_1 METHOD_1 ( int i ) { switch ( i ) { case 0 : return TYPE_2 . METHOD_2 ( VAR_1 ) ; case 1 : return TYPE_2 . METHOD_2 ( null ) ; } return null ; },"['Update TypeAccess', 'Delete TypeAccess']",2136
"protected void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { METHOD_2 ( ( VAR_1 - INT_1 ) , ( VAR_2 - INT_1 ) ) ; }","protected void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Move VariableRead', 'Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",2137
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; METHOD_4 ( VAR_2 ) ; VAR_5 . METHOD_5 ( ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; METHOD_4 ( VAR_2 ) ; VAR_5 . METHOD_5 ( ) ; },"['Delete VariableRead', 'Delete Invocation']",2138
public void METHOD_1 ( int VAR_1 ) { assert ! ( METHOD_2 ( ) ) : STRING_1 ; assert ( ( VAR_2 ) + VAR_1 ) >= 0 ; assert ( ( VAR_2 ) + VAR_1 ) <= ( VAR_3 ) ; VAR_2 += VAR_1 ; },public void METHOD_1 ( int VAR_1 ) { assert ! ( METHOD_2 ( ) ) ; assert ( ( VAR_2 ) + VAR_1 ) >= 0 ; assert ( ( VAR_2 ) + VAR_1 ) <= ( VAR_3 ) ; VAR_2 += VAR_1 ; },['Delete FieldRead'],2139
"protected java.lang.Void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , p , VAR_2 ) ; return null ; }","protected java.lang.Void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , p ) ; return null ; }",['Delete TypeAccess'],2141
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , 0 , 0 , 0 ) ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( java.lang.Integer.parseInt ( STRING_1 ) , 0 , 0 , 0 ) ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Move TypeAccess']",2142
"public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , int VAR_3 , float VAR_4 ) { VAR_5 . METHOD_1 ( TYPE_1 . METHOD_2 ( VAR_1 ) , VAR_2 , VAR_3 , VAR_4 ) ; }","public static void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , float VAR_3 ) { VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","['Update Parameter', 'Update Parameter', 'Update Parameter', 'Move VariableRead', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2143
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String to ) { try { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 , to ) ; VAR_3 . remove ( VAR_2 ) ; return VAR_2 ; } catch ( TYPE_2 VAR_4 ) { return null ; } }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String to ) { try { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 , to ) ; VAR_3 . remove ( VAR_2 ) ; } catch ( TYPE_2 VAR_4 ) { } }","['Update TypeReference', 'Delete VariableRead', 'Delete Return', 'Delete Literal', 'Delete Return']",2144
"void METHOD_1 ( java.lang.String VAR_1 , java.util.Map < java.lang.String , TYPE_1 > VAR_2 , java.util.Map < java.lang.String , java.lang.String > VAR_3 ) ;","void METHOD_1 ( java.lang.String VAR_1 , java.util.Map < java.lang.String , TYPE_1 > VAR_2 ) ;","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter']",2145
public void METHOD_1 ( java.lang.String query ) { VAR_1 . setText ( query ) ; },public void METHOD_1 ( java.lang.String query ) { java.lang.System.out.println ( query ) ; VAR_1 . setText ( query ) ; },"['Insert Invocation', 'Insert FieldRead', 'Insert VariableRead', 'Insert TypeAccess']",2146
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return ; } METHOD_2 ( ( ( ( VAR_1 . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ) ) ; METHOD_5 ( false ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ( ( ( VAR_1 . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ) ) ; METHOD_5 ( false ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",2147
"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 , TYPE_2 . METHOD_2 ( STRING_2 , STRING_3 ) ) ; VAR_2 = new TYPE_1 ( STRING_4 , TYPE_2 . METHOD_2 ( STRING_5 , STRING_6 ) ) ; }","public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 , TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 ) ) ; VAR_2 = new TYPE_1 ( STRING_4 , TYPE_2 . METHOD_2 ( STRING_4 , STRING_5 , STRING_6 ) ) ; }","['Insert TypeAccess', 'Insert TypeAccess']",2148
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , true ) ; VAR_5 . remove ( VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 . remove ( VAR_4 ) ; }",['Delete Literal'],2150
protected void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( null ) ; },protected void METHOD_1 ( java.lang.String VAR_1 ) { METHOD_2 ( null ) ; },['Update TypeReference'],2151
"public java.lang.String [ ] METHOD_1 ( ) { return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 } ; }","public java.lang.String [ ] METHOD_1 ( ) { return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ; }",['Delete FieldRead'],2152
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , int VAR_3 ) throws java.io.IOException { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_3 ) throws java.io.IOException { return METHOD_2 ( VAR_1 , VAR_3 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2154
private void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = ( VAR_1 . METHOD_2 ( this . line ) ) + ( this . VAR_3 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = ( VAR_1 . METHOD_2 ( this . line ) ) + ( this . VAR_3 ) ; },['Update Wra'],2155
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , TYPE_3 VAR_4 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , null , VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_3 , TYPE_3 VAR_4 ) { METHOD_2 ( VAR_1 , VAR_3 , null , VAR_4 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2156
"private void METHOD_1 ( java.lang.Double VAR_1 , java.lang.Double VAR_2 ) { VAR_3 . METHOD_2 ( ( VAR_2 / VAR_1 ) ) ; }","private void METHOD_1 ( java.lang.Double VAR_1 , java.lang.Double VAR_2 ) { VAR_3 . METHOD_2 ( ( VAR_1 / VAR_2 ) ) ; }",['Move VariableRead'],2157
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) { VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) { VAR_6 . METHOD_1 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2158
"void METHOD_1 ( android.view.View VAR_1 , boolean VAR_2 , int position , TYPE_1 VAR_3 ) ;","void METHOD_1 ( android.view.View view , boolean VAR_2 , int position , TYPE_1 VAR_3 ) ;",['Update Parameter'],2159
public java.lang.String METHOD_1 ( ) { return ( ( VAR_1 ) + ( VAR_2 ) ) + ( VAR_3 ) ; },public java.lang.String METHOD_1 ( java.lang.String size ) { return ( ( VAR_1 ) + size ) + ( VAR_3 ) ; },"['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead', 'Delete FieldRead']",2160
"public void METHOD_1 ( ) throws java.lang.Exception { java.lang.System.out.println ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 f = METHOD_3 ( STRING_2 , VAR_1 ) ; VAR_3 . assertEquals ( VAR_4 , f ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { java.lang.System.out.println ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 f = METHOD_3 ( STRING_2 , VAR_1 ) ; assertEquals ( VAR_4 , f ) ; }",['Update TypeAccess'],2161
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { }","public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { }",['Update Parameter'],2162
"public synchronized void METHOD_1 ( int index , TYPE_1 target ) throws TYPE_2 { VAR_1 . METHOD_1 ( index , target ) ; METHOD_2 ( ) ; }",public synchronized void METHOD_1 ( TYPE_1 target ) throws TYPE_2 { VAR_1 . METHOD_1 ( target ) ; METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2167
"TYPE_1 < java.util.List < TYPE_2 > > METHOD_1 ( java.lang.String id , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String src , java.lang.String VAR_3 ) ;","TYPE_1 < java.util.List < TYPE_2 > > METHOD_1 ( java.lang.String id , java.lang.String VAR_1 , java.lang.String src , java.lang.String VAR_3 ) ;","['Delete TypeReference', 'Delete Parameter']",2168
"public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 ) throws java.io.IOException { for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_1 . METHOD_2 ( VAR_1 , VAR_4 . type ) ; } return VAR_1 ; }","public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 ) throws java.io.IOException { for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_1 . METHOD_2 ( VAR_4 . type ) ; } return VAR_1 ; }",['Delete VariableRead'],2169
private boolean METHOD_1 ( int VAR_1 ) { if ( VAR_1 == ( VAR_2 [ VAR_3 ] ) ) { return true ; } else { METHOD_2 ( ) ; return false ; } },public boolean METHOD_1 ( int VAR_1 ) { if ( VAR_1 == ( VAR_2 [ VAR_3 ] ) ) { return true ; } else { METHOD_2 ( ) ; return false ; } },['Update Wra'],2170
public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( METHOD_2 ( ) ) instanceof TYPE_2 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ; return VAR_2 . METHOD_1 ( VAR_1 ) ; } return 0 ; },public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( METHOD_2 ( ) ) != null ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ; return VAR_2 . METHOD_1 ( VAR_1 ) ; } return 0 ; },"['Update BinaryOperator', 'Insert Literal', 'Delete TypeAccess']",2171
"public TYPE_1 METHOD_1 ( TYPE_2 p ) { return new TYPE_1 ( VAR_1 . METHOD_2 ( p ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 , false ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 p ) { return new TYPE_1 ( VAR_1 . METHOD_2 ( p ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }",['Delete Literal'],2172
"protected void execute ( ) { VAR_1 . METHOD_1 ( ( - ( VAR_2 . METHOD_2 ( ) ) ) , ( - ( ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_2 ( ) ) ) ) ; }","protected void execute ( ) { VAR_1 . METHOD_1 ( ( - ( VAR_2 . METHOD_2 ( ) ) ) , ( - ( VAR_3 . METHOD_2 ( ) ) ) ) ; }",['Delete TypeReference'],2173
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { METHOD_2 ( VAR_1 , VAR_2 ) ; }",public void METHOD_1 ( java.lang.String error ) { METHOD_2 ( error ) ; },"['Update Parameter', 'Update VariableRead', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2174
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View view = TYPE_3 . METHOD_2 ( VAR_3 . getContext ( ) ) . METHOD_3 ( VAR_4 , VAR_1 , false ) ; return new TYPE_1 ( view ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { android.view.View view = TYPE_3 . METHOD_2 ( VAR_3 . getContext ( ) ) . METHOD_3 ( VAR_4 , VAR_1 ) ; return new TYPE_1 ( view ) ; }",['Delete Literal'],2175
public java.lang.String toString ( ) { return name ( ) . toLowerCase ( VAR_1 ) ; },public java.lang.String toString ( ) { return name ( ) . toLowerCase ( ) ; },['Delete TypeAccess'],2176
public void METHOD_1 ( ) { int VAR_1 = java.lang.Integer.parseInt ( VAR_2 . getText ( ) ) ; if ( VAR_1 > INT_1 ) { VAR_1 -- ; VAR_3 = VAR_1 * INT_2 ; VAR_2 . setText ( java.lang.String . METHOD_2 ( VAR_1 ) ) ; } },public void METHOD_1 ( ) { int VAR_1 = java.lang.Integer.parseInt ( VAR_2 . getText ( ) ) ; if ( VAR_1 > INT_1 ) { VAR_1 -- ; VAR_3 = VAR_1 ; VAR_2 . setText ( java.lang.String . METHOD_2 ( VAR_1 ) ) ; } },"['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",2178
"public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { boolean VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_5 . info ( STRING_1 , VAR_2 , VAR_1 , VAR_3 ) ; return VAR_3 ; }","public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { boolean VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_5 . info ( ( STRING_1 + VAR_2 ) , VAR_1 , VAR_3 ) ; return VAR_3 ; }","['Insert BinaryOperator', 'Insert FieldRead', 'Move VariableRead', 'Delete TypeAccess']",2179
"public java.lang.String METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = response . METHOD_2 ( ) ; if ( VAR_1 != null ) { return VAR_2 . toString ( VAR_1 , STRING_1 ) ; } else { return null ; } }",public java.lang.String METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = response . METHOD_2 ( ) ; if ( VAR_1 != null ) { return VAR_2 . toString ( VAR_1 ) ; } else { return null ; } },['Delete TypeAccess'],2180
"private java.util.List < ? > METHOD_1 ( java.lang.Object VAR_1 , java.util.Collection < ? > VAR_2 , TYPE_1 VAR_3 , java.lang.Object VAR_4 , TYPE_2 VAR_5 ) { return METHOD_2 ( VAR_1 , VAR_3 , VAR_2 , VAR_4 , VAR_5 ) ; }","private java.util.List < ? > METHOD_1 ( java.lang.Object VAR_1 , java.util.Collection < ? > VAR_2 , TYPE_1 VAR_3 , java.lang.Object VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_3 , VAR_2 , VAR_4 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2181
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 key = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_1 = new TYPE_3 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_4 . assertTrue ( VAR_1 . METHOD_4 ( key ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 key = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_1 = new TYPE_3 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; assertTrue ( VAR_1 . METHOD_4 ( key ) ) ; },['Update TypeAccess'],2182
"private double METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return 0 ; }","private double METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { }","['Delete Literal', 'Delete Return']",2183
"public static int METHOD_1 ( int VAR_1 , int min ) { return ( new java.util.Random ( ) . METHOD_2 ( VAR_1 ) ) + min ; }","public static int METHOD_1 ( double VAR_1 , double min ) { return ( ( int ) ( min + ( ( java.lang.Math.random ( ) ) * ( ( VAR_1 - min ) + 1 ) ) ) ) ; }","['Update TypeReference', 'Update TypeReference', 'Insert BinaryOperator', 'Insert TypeReference', 'Insert VariableRead', 'Insert BinaryOperator', 'Insert Invocation', 'Insert BinaryOperator', 'Insert TypeAccess', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Literal', 'Move VariableRead', 'Delete ConstructorCall', 'Delete Invocation']",2184
"public static boolean METHOD_1 ( java.lang.String string , int size ) { return false ; }","public static boolean METHOD_1 ( java.lang.String string , int size ) { return true ; }",['Update Literal'],2185
"public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String data ) { VAR_1 . METHOD_2 ( ) . put ( name , data ) ; return this ; }","public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.Object data ) { VAR_1 . METHOD_2 ( ) . put ( name , data ) ; return this ; }",['Update TypeReference'],2187
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_3 < > ( ) ; } VAR_3 . add ( VAR_1 ) ; return ( ( TYPE_1 ) ( ( java.lang.Object ) ( this ) ) ) ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new java.util.LinkedList < > ( ) ; } VAR_3 . add ( VAR_1 ) ; return ( ( TYPE_1 ) ( ( java.lang.Object ) ( this ) ) ) ; },['Update ConstructorCall'],2188
"private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , boolean VAR_3 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; if ( VAR_3 ) VAR_4 . getText ( ) . METHOD_3 ( ) ; }",private void METHOD_1 ( TYPE_2 VAR_2 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; },"['Insert TypeAccess', 'Delete Wra', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",2189
public int METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { return 0 ; } return this . VAR_2 . METHOD_3 ( VAR_3 . split ( STRING_1 ) ) ; },public int METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { return 0 ; } return this . VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2190
"public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . replace ( VAR_2 . METHOD_1 ( ) , STRING_1 ) ; }","public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . replaceAll ( VAR_2 . METHOD_1 ( ) , STRING_1 ) ; }",['Update Invocation'],2192
public static void METHOD_1 ( ) { TYPE_1 = new TYPE_2 ( ) ; VAR_1 = new TYPE_3 [ INT_1 ] ; VAR_2 = new TYPE_4 [ 1 ] ; TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; },public static void METHOD_1 ( ) { TYPE_1 = new TYPE_2 ( ) ; VAR_1 = new TYPE_3 [ INT_1 ] ; VAR_2 = new TYPE_4 [ INT_1 ] ; TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; },"['Insert FieldRead', 'Delete Literal']",2193
"private void METHOD_1 ( TYPE_1 token ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( ( VAR_1 != null ) && ( VAR_2 . equals ( token ) ) ) METHOD_3 ( ) ; else error ( token , VAR_1 ) ; }","private TYPE_1 METHOD_1 ( TYPE_1 token ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( ( VAR_1 != null ) && ( VAR_2 . equals ( token ) ) ) return VAR_1 ; else { error ( token , VAR_1 ) ; return null ; } }","['Update TypeReference', 'Insert Return', 'Insert Return', 'Insert VariableRead', 'Insert Literal', 'Delete Invocation']",2194
"public < TYPE_1 extends TYPE_2 > void METHOD_1 ( java.lang.Class < ? extends TYPE_2 > VAR_1 , TYPE_3 < TYPE_1 > VAR_2 ) { METHOD_2 ( VAR_1 ) . remove ( new TYPE_4 ( VAR_2 , 0 , false ) ) ; }","public < TYPE_1 extends TYPE_2 > void METHOD_1 ( java.lang.Class < ? extends TYPE_2 > VAR_1 , TYPE_3 < TYPE_1 > VAR_2 ) { METHOD_2 ( VAR_1 ) . remove ( new TYPE_4 ( VAR_2 , 0 ) ) ; }",['Delete Literal'],2195
"public static java.lang.String METHOD_1 ( java.io.File file ) { try { long VAR_1 = VAR_2 . length ( ) ; if ( VAR_1 > 0L ) { return java.lang.String.format ( STRING_1 , VAR_1 ) ; } } catch ( TYPE_1 VAR_3 ) { } return STRING_2 ; }",public static java.lang.String METHOD_1 ( java.io.File file ) { try { long VAR_1 = VAR_2 . length ( ) ; if ( VAR_1 > 0L ) { return ( ( java.lang.String ) ( VAR_1 ) ) ; } } catch ( TYPE_1 VAR_3 ) { } return STRING_2 ; },"['Insert VariableRead', 'Insert TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2196
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return TYPE_2 . METHOD_2 ( VAR_3 . getName ( ) , VAR_4 . getName ( ) ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_3 . getName ( ) . compareTo ( VAR_4 . getName ( ) ) ; }","['Update Invocation', 'Delete TypeAccess']",2197
"public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 date ) { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 class ) . METHOD_3 ( STRING_1 , date ) . METHOD_4 ( ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 date ) { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 class ) . METHOD_4 ( ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2198
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_4 ) ; VAR_1 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ; VAR_1 . METHOD_2 ( VAR_6 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_4 ) ; VAR_1 . METHOD_3 ( VAR_5 ) ; VAR_1 . METHOD_2 ( VAR_6 ) ; }","['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",2199
"private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , VAR_3 , STRING_1 ) ; }","private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , VAR_2 , STRING_1 ) ; }",['Update TypeAccess'],2200
public synchronized android.content.Intent [ ] METHOD_1 ( ) { return VAR_1 ; },public android.content.Intent [ ] METHOD_1 ( ) { return VAR_1 ; },['Delete Wra'],2201
"protected static double METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.util.List < java.util.List < java.lang.String > > VAR_2 , java.lang.String VAR_3 ) { return ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 ) ) * ( TYPE_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) ; }","public static double METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.util.List < java.util.List < java.lang.String > > VAR_2 , java.lang.String VAR_3 ) { return ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 ) ) * ( TYPE_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) ; }",['Update Wra'],2202
void METHOD_1 ( java.lang.Boolean VAR_1 ) ;,void METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",2203
"protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , false ) ; }","protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , false ) ; }","['Move TypeAccess', 'Delete Invocation']",2204
public void METHOD_1 ( final java.util.List < TYPE_1 > VAR_1 ) { this . VAR_1 = new java.util.ArrayList ( VAR_1 ) ; },public void METHOD_1 ( final java.util.List < TYPE_1 > VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move VariableRead', 'Delete ConstructorCall']",2206
"public void METHOD_1 ( byte [ ] VAR_1 , int VAR_2 , int VAR_3 ) throws java.io.IOException { byte [ ] VAR_4 = VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; target . METHOD_1 ( VAR_4 ) ; }","public void METHOD_1 ( byte [ ] VAR_1 , int VAR_2 , int VAR_3 ) throws java.io.IOException { byte [ ] VAR_4 = VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; target . METHOD_1 ( VAR_4 , VAR_2 , VAR_3 ) ; }","['Insert VariableRead', 'Insert VariableRead']",2207
"public void METHOD_1 ( ) { TYPE_1 element = new TYPE_1 ( this . VAR_1 , this . VAR_2 ) ; VAR_3 . assertEquals ( STRING_1 , VAR_4 . getString ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 element = new TYPE_1 ( this . VAR_1 , this . VAR_2 ) ; assertEquals ( STRING_1 , VAR_4 . getString ( ) ) ; }",['Update TypeAccess'],2209
public TYPE_1 to ( java.lang.String VAR_1 ) { VAR_2 = VAR_1 ; return this ; },protected TYPE_1 to ( java.lang.String VAR_1 ) { VAR_2 = VAR_1 ; return this ; },['Update Wra'],2210
"public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_3 . field ( VAR_4 , false ) ; VAR_2 . METHOD_3 ( ) ; VAR_5 . commit ( ) ; }","public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_3 . field ( VAR_4 , false ) ; VAR_5 . commit ( ) ; }","['Delete VariableRead', 'Delete Invocation']",2211
"public void METHOD_1 ( int VAR_1 , int VAR_2 , boolean VAR_3 ) throws TYPE_1 { }","public void METHOD_1 ( int VAR_2 , boolean VAR_3 ) throws TYPE_1 { }","['Delete TypeReference', 'Delete Parameter']",2212
public void METHOD_1 ( TYPE_1 type ) { for ( int VAR_1 = 0 ; VAR_1 < ( VAR_2 ) ; ++ VAR_1 ) { VAR_3 [ VAR_1 ] . METHOD_1 ( type ) ; } },public void METHOD_1 ( ) { for ( int VAR_1 = 0 ; VAR_1 < ( VAR_2 ) ; ++ VAR_1 ) { VAR_3 [ VAR_1 ] . METHOD_1 ( ) ; } },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2213
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) ; },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 0 ) ; VAR_1 . METHOD_3 ( ) ; },"['Insert Literal', 'Delete TypeAccess']",2214
"public java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { return VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }",public java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2215
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { }",public void METHOD_1 ( java.lang.String VAR_2 ) { },"['Delete TypeReference', 'Delete Parameter']",2217
"public TYPE_1 METHOD_1 ( java.lang.String path , java.lang.String label , TYPE_2 VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 ) { return METHOD_1 ( path , label , VAR_1 , VAR_2 , VAR_3 , false ) ; }","public TYPE_1 METHOD_1 ( java.lang.String path , java.lang.String label , TYPE_2 VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 ) { return METHOD_1 ( path , label , VAR_1 , VAR_2 , null , false ) ; }","['Insert Literal', 'Delete VariableRead']",2218
public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . get ( ) . add ( new TYPE_2 ( VAR_1 ) ) ; },public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . add ( new TYPE_2 ( VAR_1 ) ) ; },"['Move TypeAccess', 'Delete Invocation']",2219
"public TYPE_1 METHOD_1 ( java.lang.String string , java.lang.Class < ? extends TYPE_2 > VAR_1 ) { return null ; }","public TYPE_1 METHOD_1 ( java.lang.String string , java.lang.Class < ? extends TYPE_2 > type ) { return null ; }",['Update Parameter'],2221
"private void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < java.util.Date > VAR_2 ) { METHOD_2 ( VAR_3 . get ( 0 ) ) ; if ( VAR_1 . METHOD_3 ( ) ) { METHOD_4 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < java.util.Date > VAR_2 ) { METHOD_2 ( VAR_3 . get ( 0 ) ) ; if ( VAR_1 . METHOD_3 ( ) ) { METHOD_4 ( ) ; } }",['Update Wra'],2222
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( getView ( ) ) ; METHOD_4 ( true ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( results , VAR_2 ) ; METHOD_3 ( getView ( ) ) ; METHOD_4 ( true ) ; }","['Insert FieldRead', 'Delete TypeAccess']",2223
"public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_1 ( VAR_1 , null ) ; }","public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_1 ( VAR_1 , null , false ) ; }",['Insert Literal'],2224
protected void execute ( ) { VAR_1 = false ; VAR_2 . METHOD_1 ( ) . METHOD_2 ( FLOAT_1 ) ; VAR_3 . METHOD_1 ( ) . METHOD_2 ( FLOAT_1 ) ; VAR_1 = true ; },protected void execute ( ) { VAR_1 = false ; VAR_2 . METHOD_1 ( ) . METHOD_2 ( 0.0 ) ; VAR_3 . METHOD_1 ( ) . METHOD_2 ( 0.0 ) ; VAR_1 = true ; },"['Insert Literal', 'Insert Literal', 'Delete TypeAccess', 'Delete TypeAccess']",2225
"TYPE_1 METHOD_1 ( ) { return METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_7 ( ) , METHOD_8 ( ) , METHOD_9 ( STRING_1 , METHOD_1 ( ) , STRING_2 ) ) ; }","TYPE_1 METHOD_1 ( ) { return METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_7 ( ) , METHOD_9 ( STRING_1 , METHOD_1 ( ) , STRING_2 ) ) ; }",['Delete Invocation'],2226
public boolean METHOD_1 ( ) { ( VAR_1 ) -- ; return ( VAR_1 ) <= 0 ; },public boolean METHOD_1 ( ) { ( VAR_1 ) -- ; return ( VAR_1 ) == 0 ; },['Update BinaryOperator'],2227
private boolean METHOD_1 ( char VAR_1 ) { return ( CHAR_1 <= VAR_1 ) && ( VAR_1 <= CHAR_2 ) ; },protected boolean METHOD_1 ( char VAR_1 ) { return ( CHAR_1 <= VAR_1 ) && ( VAR_1 <= CHAR_2 ) ; },['Update Wra'],2228
public boolean METHOD_1 ( int VAR_1 ) { return ( args.length ) >= VAR_1 ; },public boolean METHOD_1 ( int VAR_1 ) { return ( ( args.length ) + 1 ) >= VAR_1 ; },"['Insert BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Move VariableRead', 'Insert Literal']",2230
"public void METHOD_1 ( java.lang.Integer n , long VAR_1 , long offset ) { VAR_2 . remove ( n ) ; VAR_3 . put ( n , new java.util.Date ( ( VAR_1 + offset ) ) ) ; }","public void METHOD_1 ( java.lang.Integer n , java.util.Date date ) { VAR_2 . remove ( n ) ; VAR_3 . put ( n , date ) ; }","['Update Parameter', 'Update TypeReference', 'Insert VariableRead', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete ConstructorCall']",2233
"public void METHOD_1 ( TYPE_1 view , int VAR_1 , int VAR_2 , int VAR_3 ) { for ( int i = 0 ; i < ( VAR_4 . METHOD_2 ( ) ) ; i ++ ) VAR_4 . METHOD_3 ( i ) . METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 view , int VAR_1 , int VAR_2 , int VAR_3 ) { for ( int i = 0 ; i < VAR_2 ; i ++ ) VAR_4 . METHOD_3 ( i ) . METHOD_4 ( ) ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2234
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 , java.io.IOException { return METHOD_2 ( VAR_2 . METHOD_1 ( new TYPE_3 ( VAR_1 ) , VAR_3 ) ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 , java.io.IOException { return METHOD_2 ( VAR_2 . METHOD_1 ( VAR_1 , VAR_3 ) ) ; }","['Move VariableRead', 'Delete ConstructorCall']",2235
"public static java.lang.String METHOD_1 ( java.io.InputStream VAR_1 ) { java.util.Scanner VAR_2 = new java.util.Scanner ( VAR_1 , STRING_1 ) . METHOD_2 ( STRING_2 ) ; return VAR_2 . METHOD_3 ( ) ? VAR_2 . METHOD_4 ( ) : STRING_3 ; }",public static java.lang.String METHOD_1 ( java.io.InputStream VAR_1 ) { java.util.Scanner VAR_2 = new java.util.Scanner ( VAR_1 ) . METHOD_2 ( STRING_2 ) ; return VAR_2 . METHOD_3 ( ) ? VAR_2 . METHOD_4 ( ) : STRING_3 ; },"['Update ConstructorCall', 'Delete FieldRead']",2236
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( 0 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( 1 ) ; },['Update Literal'],2237
"public static void METHOD_1 ( TYPE_1 p , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( ) . METHOD_3 ( false ) . METHOD_4 ( false ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( p ) . METHOD_7 ( ) ; }","public static void METHOD_1 ( TYPE_1 p , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( p ) . METHOD_7 ( ) ; }","['Update Invocation', 'Move Invocation', 'Update Invocation', 'Update Invocation', 'Move VariableRead', 'Move VariableRead', 'Delete Literal', 'Delete Literal', 'Delete Invocation', 'Delete Invocation']",2238
"public TYPE_1 METHOD_1 ( TYPE_2 b , java.util.ArrayList < TYPE_1 > c ) { return null ; }",public boolean METHOD_1 ( ) { return false ; },"['Update TypeReference', 'Update Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter']",2242
"public void METHOD_1 ( TYPE_1 source , java.lang.String VAR_1 ) { METHOD_1 ( source , new TYPE_2 ( ) . add ( VAR_1 ) . build ( ) ) ; }","public void METHOD_1 ( TYPE_1 source , java.lang.String VAR_1 ) { METHOD_1 ( source , new TYPE_2 ( ) . add ( VAR_1 ) . toString ( ) ) ; }",['Update Invocation'],2243
"private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String message ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_3 . add ( METHOD_2 ( METHOD_3 ( VAR_4 class ) . METHOD_4 ( message ) ) . METHOD_5 ( ) ) ; return VAR_2 ; }",private TYPE_1 METHOD_1 ( java.lang.String message ) { TYPE_1 VAR_2 = new TYPE_1 ( message ) ; VAR_3 . add ( METHOD_2 ( METHOD_3 ( VAR_4 class ) . METHOD_4 ( message ) ) . METHOD_5 ( ) ) ; return VAR_2 ; },"['Update VariableRead', 'Delete TypeReference', 'Delete Parameter']",2244
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_2 ) ; if ( VAR_3 != null ) { METHOD_3 ( VAR_1 , false ) ; } return VAR_3 ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_2 ) ; if ( VAR_3 != null ) { METHOD_3 ( VAR_1 ) ; } return VAR_3 ; }",['Delete Literal'],2245
public TYPE_1 METHOD_1 ( final int VAR_1 ) { if ( ( VAR_1 < 0 ) || ( VAR_1 > ( VAR_2 ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } this . VAR_3 . METHOD_2 ( VAR_1 ) ; return this ; },public TYPE_1 METHOD_1 ( final int VAR_1 ) { if ( ( VAR_1 < 0 ) && ( VAR_1 > ( VAR_2 ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } this . VAR_3 . METHOD_2 ( VAR_1 ) ; return this ; },['Update BinaryOperator'],2246
"public TYPE_1 METHOD_1 ( ) throws TYPE_2 { METHOD_2 ( ) ; METHOD_3 ( ) ; return new TYPE_3 ( new TYPE_4 ( value ) , VAR_1 ) ; }",public TYPE_1 METHOD_1 ( ) throws TYPE_2 { METHOD_2 ( ) ; METHOD_3 ( ) ; return new TYPE_3 ( new TYPE_4 ( value ) ) ; },"['Update ConstructorCall', 'Delete FieldRead']",2247
"public void handle ( TYPE_1 event ) { METHOD_1 ( VAR_1 , VAR_2 ) ; }",public void handle ( TYPE_1 event ) { METHOD_1 ( VAR_1 ) ; },['Delete TypeAccess'],2248
"private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String [ ] VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . query ( VAR_5 , null , VAR_1 , VAR_2 , null , null , null ) ; return new TYPE_1 ( VAR_3 ) ; }","private TYPE_2 METHOD_1 ( java.lang.String VAR_1 , java.lang.String [ ] VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . query ( VAR_5 , null , VAR_1 , VAR_2 , null , null , null ) ; return VAR_3 ; }","['Update TypeReference', 'Move VariableRead', 'Delete ConstructorCall']",2250
"public void METHOD_1 ( java.lang.String path , TYPE_1 type ) { VAR_1 . getConfig ( ) . set ( path , type ) ; }","public void METHOD_1 ( java.lang.String path , TYPE_1 type ) { getConfig ( ) . set ( path , type ) ; }",['Update TypeAccess'],2251
"private int METHOD_1 ( int i , int j , int n ) { if ( n == INT_1 ) { return j ; } return METHOD_1 ( j , ( i + j ) , ( n - 1 ) ) ; }","private int METHOD_1 ( int i , int j , int n ) { if ( n == INT_1 ) { return i ; } return METHOD_1 ( j , ( i + j ) , ( n - 1 ) ) ; }",['Update VariableRead'],2253
protected static long METHOD_1 ( ) { return ( ( long ) ( ( java.lang.Math.random ( ) ) * ( VAR_1 ) ) ) ; },private static long METHOD_1 ( ) { return ( ( long ) ( ( java.lang.Math.random ( ) ) * ( VAR_1 ) ) ) ; },['Update Wra'],2254
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = ( ( ( ( this . METHOD_2 ( ) ) + STRING_1 ) + ( this . METHOD_3 ( ) ) ) + STRING_2 ) + ( this . METHOD_4 ( ) ) ; return VAR_1 ; },public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = ( ( ( ( this . METHOD_2 ( ) ) + STRING_1 ) + ( this . METHOD_3 ( ) ) ) + STRING_2 ) + ( this . METHOD_4 ( ) ) ; },"['Delete VariableRead', 'Delete Return']",2255
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) throws TYPE_5 { return new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_4 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) throws TYPE_5 { return new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_4 ) ; }",['Delete VariableRead'],2256
public java.lang.String METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; return STRING_1 ; },public java.lang.String METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Return']",2258
"public < TYPE_1 extends TYPE_2 > java.util.List < TYPE_1 > METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 , java.util.Map < java.lang.String , java.lang.Object > VAR_2 , boolean VAR_3 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , null , VAR_2 , VAR_3 ) ; }","public < TYPE_1 extends TYPE_2 > java.util.List < TYPE_1 > METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 , java.util.Map < java.lang.String , java.lang.Object > VAR_2 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , null , VAR_2 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2259
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 time , int VAR_2 , int VAR_3 , java.lang.String VAR_4 , TYPE_2 startTime , TYPE_2 endTime ) { VAR_5 . METHOD_1 ( VAR_1 , time , VAR_3 , VAR_4 , startTime , endTime ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 time , int VAR_2 , int VAR_3 , java.lang.String VAR_4 , TYPE_2 startTime , TYPE_2 endTime ) { VAR_5 . METHOD_1 ( VAR_1 , time , VAR_2 , VAR_3 , VAR_4 , startTime , endTime ) ; }",['Insert VariableRead'],2260
protected void METHOD_1 ( java.lang.Void VAR_1 ) { },protected void METHOD_1 ( java.lang.Void VAR_1 ) { return ; },['Insert Return'],2261
"public static java.lang.String METHOD_1 ( java.lang.String name , int value ) { return ( ( ( STRING_1 + ( VAR_1 . replaceAll ( STRING_2 , STRING_3 ) ) ) + STRING_4 ) + ( java.lang.Integer.toString ( value ) ) ) + STRING_5 ; }","public static java.lang.String METHOD_1 ( java.lang.String name , int value ) { return ( ( ( STRING_1 + name ) + STRING_4 ) + ( java.lang.Integer.toString ( value ) ) ) + STRING_5 ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2262
"public TYPE_1 METHOD_1 ( int VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_2 = METHOD_3 ( index ) ; VAR_1 = METHOD_4 ( VAR_1 , index ) ; return VAR_2 . METHOD_1 ( VAR_1 ) ; }",public TYPE_1 METHOD_1 ( int VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_2 = METHOD_3 ( index ) ; VAR_1 = METHOD_4 ( index ) ; return VAR_2 . METHOD_1 ( VAR_1 ) ; },['Delete VariableRead'],2263
public java.util.List < TYPE_1 < TYPE_2 > > METHOD_1 ( ) { return new java.util.ArrayList < TYPE_1 < TYPE_2 > > ( VAR_1 ) ; },public java.util.List < TYPE_1 < TYPE_2 > > METHOD_1 ( ) { return new java.util.ArrayList < TYPE_1 < TYPE_2 > > ( this . VAR_1 ) ; },['Insert ThisAccess'],2264
public java.lang.String METHOD_1 ( java.lang.String path ) throws java.io.IOException { return STRING_1 ; },public java.lang.String METHOD_1 ( java.lang.String path ) throws java.io.IOException { return null ; },"['Insert Literal', 'Delete FieldRead']",2265
"private int METHOD_1 ( android.content.Intent intent ) { TYPE_1 . METHOD_1 ( intent . METHOD_2 ( VAR_1 , ( - 1 ) ) ) ; return VAR_2 ; }","private void METHOD_1 ( android.content.Intent intent ) { TYPE_1 . METHOD_1 ( intent . METHOD_2 ( VAR_1 , ( - 1 ) ) ) ; }","['Update TypeReference', 'Delete FieldRead', 'Delete Return']",2266
"public void METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { this . VAR_2 = VAR_2 ; METHOD_2 ( context ) ; }","public void METHOD_1 ( android.content.Context context , TYPE_1 VAR_2 ) { this . VAR_2 = VAR_2 ; METHOD_2 ( context ) ; }","['Update Parameter', 'Insert VariableRead', 'Delete FieldRead']",2267
public void METHOD_1 ( int n ) { },public void METHOD_1 ( int n ) { return ; },['Insert Return'],2268
"private void METHOD_1 ( android.content.Intent intent , java.lang.String VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = METHOD_2 ( intent , VAR_1 ) ; METHOD_3 ( VAR_2 , intent ) ; }","private void METHOD_1 ( android.content.Intent intent , java.lang.String VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = METHOD_2 ( intent , VAR_1 ) ; METHOD_3 ( VAR_2 , intent , VAR_1 ) ; }",['Insert VariableRead'],2269
"public void METHOD_1 ( java.lang.String msg ) { TYPE_1 . METHOD_2 ( VAR_1 , msg , VAR_2 ) . show ( ) ; }","public void METHOD_1 ( java.lang.String msg ) { TYPE_1 . METHOD_2 ( this , msg , VAR_2 ) . show ( ) ; }","['Insert ThisAccess', 'Delete TypeAccess']",2270
protected TYPE_1 METHOD_1 ( ) { return this . VAR_1 ? new TYPE_1 ( ) : null ; },public TYPE_1 METHOD_1 ( ) { return this . VAR_1 ? new TYPE_1 ( ) : null ; },['Update Wra'],2271
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { try ( TYPE_2 VAR_3 = VAR_4 . open ( ) ) { return TYPE_3 . METHOD_1 ( VAR_3 , VAR_1 , VAR_2 ) ; } }","public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_2 ) { try ( TYPE_2 VAR_3 = VAR_4 . open ( ) ) { return TYPE_3 . METHOD_1 ( VAR_3 , VAR_2 ) ; } }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2273
public TYPE_1 METHOD_1 ( ) { final TYPE_2 t = new TYPE_2 ( METHOD_2 ( ) ) ; t . METHOD_3 ( METHOD_4 ( ) ) ; t . METHOD_5 ( METHOD_6 ( ) ) ; return t ; },public TYPE_2 METHOD_1 ( ) { final TYPE_2 t = new TYPE_2 ( METHOD_2 ( ) ) ; t . METHOD_3 ( METHOD_4 ( ) ) ; t . METHOD_5 ( METHOD_6 ( ) ) ; return t ; },['Update TypeReference'],2274
"public void METHOD_1 ( int VAR_1 , boolean VAR_2 , boolean VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; if ( VAR_3 ) VAR_4 . METHOD_4 ( VAR_2 ) ; VAR_6 . update ( VAR_4 ) ; }","public void METHOD_1 ( int VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; VAR_6 . update ( VAR_4 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2275
static TYPE_1 METHOD_1 ( ) { return null ; },static TYPE_1 METHOD_1 ( ) { return void . class ; },"['Insert FieldRead', 'Delete Literal']",2276
"protected abstract TYPE_1 METHOD_1 ( java.lang.String path , java.lang.StringBuilder VAR_1 ) throws java.lang.Exception ;",protected abstract TYPE_1 METHOD_1 ( java.lang.String path ) throws java.lang.Exception ;,"['Delete TypeReference', 'Delete Parameter']",2278
"public byte [ ] METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 ) throws java.io.IOException { synchronized ( VAR_1 ) { return VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } }","public byte [ ] METHOD_1 ( java.io.InputStream VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 ) throws java.io.IOException { synchronized ( VAR_1 ) { return VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } }",['Update TypeReference'],2280
public java.lang.String METHOD_1 ( ) { return STRING_1 + STRING_2 ; },public java.lang.String METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2282
"public static boolean METHOD_1 ( TYPE_1 p ) { return TYPE_2 . METHOD_1 ( p , null , null ) ; }","public static boolean METHOD_1 ( TYPE_1 p ) { return TYPE_2 . METHOD_1 ( p , null ) ; }",['Delete Literal'],2283
"protected TYPE_1 METHOD_1 ( double VAR_1 , double VAR_2 , double VAR_3 , double VAR_4 , double VAR_5 , double VAR_6 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; }","protected TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; }","['Update TypeReference', 'Update TypeReference', 'Update TypeReference', 'Update TypeReference', 'Update TypeReference', 'Update TypeReference']",2284
protected final TYPE_1 METHOD_1 ( TYPE_2 message ) { return this . VAR_1 . METHOD_2 ( message ) ; },private TYPE_1 METHOD_1 ( TYPE_2 message ) { return this . VAR_1 . METHOD_2 ( message ) ; },"['Update Wra', 'Delete Wra']",2285
"public void METHOD_1 ( java.lang.String type , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( type , VAR_1 ) ; VAR_3 . add ( VAR_2 ) ; }",public void METHOD_1 ( java.lang.String type ) { TYPE_1 VAR_2 = new TYPE_1 ( type ) ; VAR_3 . add ( VAR_2 ) ; },"['Update ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2286
"private static TYPE_1 < java.lang.Double > METHOD_1 ( TYPE_1 < java.lang.Double > target , TYPE_1 < java.lang.Double > VAR_1 ) { return TYPE_2 ( target , VAR_1 ) ; }","private static TYPE_1 < java.lang.Double > METHOD_1 ( TYPE_1 < java.lang.Double > target , TYPE_1 < java.lang.Double > VAR_1 ) { return new TYPE_2 ( target , VAR_1 ) ; }","['Insert ConstructorCall', 'Move VariableRead', 'Move VariableRead', 'Delete Invocation']",2287
"public void METHOD_1 ( ) { METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( p . METHOD_4 ( STRING_2 ) ) , STRING_3 , new java.lang.Object [ ] { VAR_2 . string ( STRING_4 ) } , new TYPE_1 [ ] { } ) ; }","public void METHOD_1 ( ) { METHOD_2 ( STRING_1 , VAR_2 . name ( p . METHOD_4 ( STRING_2 ) ) , STRING_3 , new java.lang.Object [ ] { VAR_2 . string ( STRING_4 ) } , new TYPE_1 [ ] { } ) ; }","['Update Invocation', 'Update TypeAccess']",2288
"private void METHOD_1 ( TYPE_1 VAR_1 ) { boolean results = METHOD_2 ( true ) ; if ( results ) { TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { boolean results = METHOD_2 ( ) ; if ( results ) { TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; } }",['Delete Literal'],2289
private java.lang.String getValue ( java.lang.String line ) { int VAR_1 = line . METHOD_1 ( STRING_1 ) ; return VAR_2 . substring ( ( VAR_1 + 1 ) ) . trim ( ) ; },private java.lang.String getValue ( java.lang.String line ) { int VAR_1 = line . METHOD_1 ( STRING_1 ) ; return VAR_2 . substring ( VAR_1 ) ; },"['Move Invocation', 'Move VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation']",2290
"TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 , false , true ) ; }","TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 , false ) ; }",['Delete Literal'],2291
public int METHOD_1 ( ) { return x ; },private int METHOD_1 ( ) { return x ; },['Update Wra'],2293
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_3 ) == null ) { VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; } }","public void METHOD_1 ( ) { if ( ( VAR_3 ) == null ) { VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; } }","['Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead']",2294
public java.lang.String METHOD_1 ( java.lang.String value ) { if ( value == null ) { return null ; } return VAR_1 ? VAR_2 . METHOD_2 ( value ) : value ; },public java.lang.String METHOD_1 ( java.lang.String value ) { return VAR_1 ? VAR_2 . METHOD_2 ( value ) : value ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2295
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ( ( TYPE_3 . METHOD_4 ( ) ) / INT_1 ) ) ) ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , java.lang.Throwable t ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; }","['Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2296
public void show ( ) { this . VAR_1 . show ( ) ; },public void show ( ) { VAR_1 . show ( ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",2297
protected TYPE_1 METHOD_1 ( ) { TYPE_1 [ ] VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) return null ; if ( ( VAR_2 . length ) != 1 ) return null ; return VAR_1 [ 0 ] ; },protected TYPE_1 METHOD_1 ( ) { TYPE_1 [ ] VAR_1 = METHOD_2 ( ) ; if ( ( VAR_2 . length ) != 1 ) return null ; return VAR_1 [ 0 ] ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2298
"private static void METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , int VAR_4 , long VAR_5 ) { }","private static native void METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , int VAR_4 , long VAR_5 ) ;",['Insert Wra'],2299
public boolean METHOD_1 ( java.lang.String VAR_1 ) { return false ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return true ; },['Update Literal'],2300
protected void METHOD_1 ( java.lang.String VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; },protected void METHOD_1 ( java.lang.String VAR_1 ) { super . execute ( ) ; METHOD_2 ( ) ; },"['Update Invocation', 'Delete VariableRead']",2301
"public final TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 . METHOD_3 ( VAR_1 , INT_1 , INT_2 , INT_3 , INT_1 , 0 , INT_4 , INT_1 ) ; return VAR_1 ; }","public final TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 . METHOD_3 ( VAR_1 , INT_1 , INT_2 , INT_3 , INT_1 ) ; return VAR_1 ; }","['Delete Literal', 'Delete TypeAccess', 'Delete TypeAccess']",2302
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; },['Update Invocation'],2303
"public int METHOD_1 ( int VAR_1 ) { if ( VAR_1 == 0 ) return 0 ; return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }","public int METHOD_1 ( int VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2304
"private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 ) ) ; }","private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) ; }","['Delete TypeAccess', 'Delete TypeAccess']",2305
public java.lang.String METHOD_1 ( ) { return new java.io.File ( this . path ) . getName ( ) ; },public java.lang.String METHOD_1 ( ) { return name ; },"['Insert FieldRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation']",2306
public static void METHOD_1 ( java.lang.Long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . remove ( VAR_1 ) ; try { VAR_2 . METHOD_2 ( false ) ; } catch ( java.lang.Exception VAR_4 ) { } },public static void METHOD_1 ( java.lang.Long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; try { VAR_2 . METHOD_2 ( false ) ; } catch ( java.lang.Exception VAR_4 ) { } },['Update Invocation'],2307
public void METHOD_1 ( TYPE_1 event ) { VAR_1 . data = METHOD_2 ( event ) ; },public void METHOD_1 ( TYPE_1 event ) { VAR_1 . data = this . METHOD_2 ( event ) ; },['Insert ThisAccess'],2309
public java.util.List < TYPE_1 > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( new java.util.ArrayList < TYPE_1 > ( VAR_1 ) ) ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return new java.util.ArrayList < TYPE_1 > ( VAR_1 ) ; },"['Move ConstructorCall', 'Delete TypeAccess', 'Delete Invocation']",2310
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { VAR_2 . METHOD_2 ( true , null ) ; } catch ( TYPE_3 VAR_3 ) { TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { VAR_2 . METHOD_2 ( true ) ; } catch ( TYPE_3 VAR_3 ) { TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ; } }",['Delete Literal'],2312
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_1 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( position , VAR_1 ) ; }","['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",2313
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return METHOD_1 ( new TYPE_3 ( VAR_1 ) , VAR_2 ) ; }",public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_1 ( new TYPE_3 ( VAR_1 ) ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2314
protected java.lang.String getId ( ) { return VAR_1 ; },public java.lang.String getId ( ) { return VAR_1 ; },['Update Wra'],2315
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 += VAR_2 ; TYPE_2 f = new TYPE_2 ( VAR_1 , VAR_2 ) ; VAR_4 . add ( f ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 += VAR_2 ; TYPE_2 f = new TYPE_2 ( VAR_1 , VAR_3 ) ; VAR_4 . add ( f ) ; }","['Insert FieldRead', 'Delete VariableRead']",2316
private void METHOD_1 ( ) { this . VAR_1 = 1 ; },private void METHOD_1 ( ) { this . VAR_1 = 0 ; },['Update Literal'],2317
public synchronized java.io.InputStream METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) != null ) { return VAR_1 ; } else { return VAR_1 = new java.io.FileInputStream ( VAR_2 . METHOD_2 ( ) ) ; } },public synchronized java.io.InputStream METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { return VAR_1 ; } else { return VAR_1 = new java.io.FileInputStream ( VAR_2 . METHOD_2 ( ) ) ; } },['Update BinaryOperator'],2318
"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 . show ( METHOD_2 ( ) , STRING_1 ) ; }","private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 . show ( METHOD_2 ( ) , STRING_1 ) ; }",['Update Wra'],2319
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String params ) { boolean x = VAR_3 . METHOD_1 ( VAR_1 , VAR_2 , params ) ; return TYPE_3 . METHOD_2 ( x ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String params ) { int x = VAR_3 . METHOD_1 ( VAR_1 , VAR_2 , params ) ; return TYPE_3 . METHOD_2 ( x ) ; }",['Update TypeReference'],2322
public void METHOD_1 ( TYPE_1 VAR_1 ) { view . METHOD_1 ( VAR_1 ) ; VAR_2 . add ( VAR_1 ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { view . METHOD_1 ( VAR_1 ) ; VAR_2 . add ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; },"['Delete VariableRead', 'Delete Invocation']",2323
"public boolean METHOD_1 ( int x , int y ) { return array [ ( x + ( ( VAR_1 ) * y ) ) ] ; }","public boolean METHOD_1 ( int i , int j ) { return array [ ( ( i * ( VAR_1 ) ) + j ) ] ; }","['Update Parameter', 'Update Parameter', 'Move VariableRead', 'Move FieldRead', 'Update VariableRead', 'Update VariableRead']",2324
"private java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; return ( VAR_1 + STRING_2 ) + VAR_1 ; }","public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; return ( VAR_1 + STRING_2 ) + VAR_1 ; }",['Update Wra'],2326
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; boolean VAR_2 = VAR_1 . METHOD_3 ( VAR_3 , new java.util.HashMap < > ( ) ) ; TYPE_3 . METHOD_4 ( VAR_2 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 , false ) ; boolean VAR_2 = VAR_1 . METHOD_3 ( VAR_3 , new java.util.HashMap < > ( ) ) ; TYPE_3 . METHOD_4 ( VAR_2 ) ; }",['Insert Literal'],2327
public double METHOD_1 ( ) { long c = super . diff ( ) ; return ( ( double ) ( ( VAR_1 ) - ( VAR_2 ) ) ) / c ; },public double METHOD_1 ( ) { long c = super . diff ( ) ; if ( c == 0 ) { return 0 ; } return ( ( double ) ( ( VAR_1 ) - ( VAR_2 ) ) ) / c ; },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Insert Return', 'Insert Literal']",2329
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = null ; try { VAR_2 = VAR_1 . METHOD_2 ( ) ; return VAR_2 ; } catch ( java.lang.Exception VAR_3 ) { METHOD_3 ( VAR_4 ) ; return null ; } },private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = null ; try { VAR_2 = VAR_1 . METHOD_2 ( ) ; return VAR_2 ; } catch ( java.lang.Exception VAR_3 ) { METHOD_3 ( VAR_4 ) ; return null ; } },['Update Wra'],2330
"protected void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object [ ] params ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , true , false ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object [ ] params ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , true ) ; }",['Delete Literal'],2331
private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { METHOD_2 ( ) ; METHOD_3 ( STRING_1 ) ; METHOD_4 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { METHOD_2 ( ) ; METHOD_3 ( STRING_1 ) ; METHOD_4 ( VAR_1 ) ; },['Update Wra'],2332
"public static native void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) ;",public static native void METHOD_1 ( java.lang.String VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",2333
"public java.lang.Void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . error ( STRING_1 , VAR_1 ) ; return null ; }",public java.lang.Void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . error ( VAR_1 ) ; return null ; },['Delete TypeAccess'],2335
"private TYPE_1 METHOD_1 ( ) { TYPE_2 delete = new TYPE_2 ( VAR_1 , VAR_2 ) ; METHOD_2 ( delete . METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; return delete . METHOD_5 ( ) ; }","private void METHOD_1 ( ) { TYPE_2 delete = new TYPE_2 ( VAR_1 , VAR_2 ) ; METHOD_2 ( delete . METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; }","['Update TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Return']",2337
"private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , new java.util.ArrayList < > ( ) ) ; }","private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; }",['Delete ConstructorCall'],2338
public double METHOD_1 ( ) { return this . length ; },public double METHOD_1 ( ) { return length ; },['Delete ThisAccess'],2339
"public abstract boolean METHOD_1 ( int VAR_1 , int VAR_2 ) ;","public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return true ; }","['Insert Return', 'Insert Literal', 'Delete Wra']",2340
private boolean METHOD_1 ( ) { return ( this . VAR_1 ) && ( ( this . VAR_2 ) < ( this . position ) ) ; },private boolean METHOD_1 ( ) { return ( this . VAR_1 ) && ( ( this . VAR_2 ) <= ( this . position ) ) ; },['Update BinaryOperator'],2341
"public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( new TYPE_1 ( STRING_1 , STRING_2 ) ) ; }",['Delete FieldRead'],2342
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = this . METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_1 , null ) ; VAR_2 . METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = this . METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_1 , null ) ; }","['Delete VariableRead', 'Delete Invocation']",2343
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 == ( VAR_2 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 != ( VAR_2 ) ; },['Update BinaryOperator'],2345
public void METHOD_1 ( TYPE_1 f ) { VAR_1 . METHOD_1 ( f ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2346
"private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , boolean VAR_4 ) { if ( VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } else { return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; } }","protected boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , boolean VAR_4 ) { if ( VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } else { return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; } }",['Update Wra'],2347
"public void METHOD_1 ( double VAR_1 , TYPE_1 VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public boolean METHOD_1 ( double VAR_1 , TYPE_1 VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; return true ; }","['Update TypeReference', 'Insert Return', 'Insert Literal']",2348
private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },['Update Wra'],2349
public boolean METHOD_1 ( ) { try { VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_1 ( ) ; return true ; } catch ( TYPE_1 VAR_3 ) { METHOD_2 ( VAR_3 ) ; } return false ; },public void METHOD_1 ( ) { try { VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_1 ( ) ; } catch ( TYPE_1 VAR_3 ) { METHOD_2 ( VAR_3 ) ; } },"['Update TypeReference', 'Delete Literal', 'Delete Return', 'Delete Literal', 'Delete Return']",2350
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = 0 ; },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = 1 ; },['Update Literal'],2351
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.System.out.println ( STRING_1 ) ; TYPE_1 . METHOD_1 ( STRING_2 ) ; TYPE_2 . METHOD_2 ( STRING_3 ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( ) ; },public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.System.out.println ( STRING_1 ) ; TYPE_2 . METHOD_1 ( STRING_2 ) ; TYPE_2 . METHOD_2 ( STRING_3 ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( ) ; },['Update TypeAccess'],2352
"public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( ( VAR_1 ) == null ) throw new TYPE_2 ( STRING_1 ) ; return new TYPE_3 ( VAR_2 , VAR_3 , VAR_4 ) ; }","public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( ( VAR_1 ) == null ) throw new TYPE_2 ( STRING_1 ) ; return new TYPE_3 ( VAR_2 , VAR_4 ) ; }",['Delete FieldRead'],2353
public void METHOD_1 ( android.view.View view ) { METHOD_2 ( ) ; view . METHOD_3 ( false ) ; VAR_1 . METHOD_3 ( true ) ; },private void METHOD_1 ( android.view.View view ) { METHOD_2 ( ) ; view . METHOD_3 ( false ) ; VAR_1 . METHOD_3 ( true ) ; },['Update Wra'],2355
public boolean METHOD_1 ( final java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_4 . getName ( ) . equals ( VAR_1 ) ) { VAR_5 = VAR_2 ; return true ; } } return false ; },public void METHOD_1 ( final java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_4 . getName ( ) . equals ( VAR_1 ) ) { VAR_5 = VAR_2 ; return ; } } },"['Update TypeReference', 'Delete Literal', 'Delete Literal', 'Delete Return']",2356
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . add ( VAR_1 ) ; return true ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; return true ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",2358
public final void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } } },public final void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { } } },"['Delete VariableRead', 'Delete Invocation']",2359
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return true ; },public boolean METHOD_1 ( ) { return true ; },"['Delete TypeReference', 'Delete Parameter']",2360
"public void METHOD_1 ( float VAR_1 , float VAR_2 ) throws java.io.IOException { if ( ! ( VAR_3 ) ) { throw new TYPE_1 ( STRING_1 ) ; } METHOD_2 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( STRING_2 ) ; }","public void METHOD_1 ( float VAR_1 , float VAR_2 ) throws java.io.IOException { if ( ! ( VAR_3 ) ) { throw new java.io.IOException ( STRING_1 ) ; } METHOD_2 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( STRING_2 ) ; }",['Update ConstructorCall'],2362
public TYPE_1 [ ] METHOD_1 ( ) { return new TYPE_1 [ ] { new TYPE_2 ( this ) } ; },public TYPE_1 [ ] METHOD_1 ( ) { return new TYPE_1 [ ] { new TYPE_2 ( ) } ; },"['Update ConstructorCall', 'Delete ThisAccess']",2363
protected java.util.ArrayList < java.lang.String > METHOD_1 ( java.lang.Void ... VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = TYPE_1 . METHOD_2 ( getActivity ( ) ) ; return VAR_2 ; },protected java.util.ArrayList < java.lang.String > METHOD_1 ( java.lang.Void ... VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = TYPE_1 . METHOD_2 ( getContext ( ) ) ; return VAR_2 ; },['Update Invocation'],2364
private void METHOD_1 ( ) { try { new java.io.File ( this . VAR_1 ) . delete ( ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_2 . METHOD_2 ( ) ; } },private void METHOD_1 ( ) { try { new java.io.File ( this . VAR_1 ) . delete ( ) ; } catch ( java.lang.Exception VAR_2 ) { } },"['Delete VariableRead', 'Delete Invocation']",2365
"public int METHOD_1 ( int VAR_1 ) { java.lang.String VAR_2 = VAR_1 + STRING_1 ; java.lang.String VAR_3 = VAR_1 + STRING_2 ; return METHOD_2 ( VAR_2 , VAR_3 ) ; }","public int METHOD_1 ( int VAR_1 ) { java.lang.String VAR_2 = VAR_1 + STRING_1 ; java.lang.String VAR_3 = ( VAR_1 + 1 ) + STRING_1 ; return METHOD_2 ( VAR_2 , VAR_3 ) ; }","['Insert BinaryOperator', 'Move BinaryOperator', 'Insert FieldRead', 'Insert Literal', 'Delete FieldRead']",2366
"public static void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 , null ) ; }",public static void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 ) ; },['Delete Literal'],2367
"public void METHOD_1 ( java.lang.Integer VAR_1 ) { java.lang.Integer VAR_2 = this . VAR_1 ; this . VAR_1 = VAR_1 ; VAR_3 . METHOD_2 ( STRING_1 , VAR_2 , VAR_1 ) ; }","public void METHOD_1 ( int VAR_1 ) { int VAR_2 = this . VAR_1 ; this . VAR_1 = VAR_1 ; VAR_3 . METHOD_2 ( STRING_1 , VAR_2 , VAR_1 ) ; }","['Update TypeReference', 'Update TypeReference']",2368
"public static boolean METHOD_1 ( int [ ] [ ] VAR_1 , int id , int VAR_2 , int VAR_3 ) { return ( VAR_1 [ ( id - 1 ) ] [ ( VAR_2 - 1 ) ] ) >= VAR_3 ; }","public static boolean METHOD_1 ( int [ ] [ ] VAR_1 , int id , int VAR_2 , int VAR_3 ) { return ( VAR_1 [ id ] [ VAR_2 ] ) >= VAR_3 ; }","['Move VariableRead', 'Move VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",2370
"protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 function ) { return METHOD_2 ( VAR_1 , function , null , true ) ; }","protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 function ) { return METHOD_2 ( VAR_1 , function , null ) ; }",['Delete Literal'],2372
public void METHOD_1 ( int size ) { VAR_1 . METHOD_2 ( getActivity ( ) ) ; },public void METHOD_1 ( int size ) { VAR_1 . METHOD_2 ( size ) ; },"['Insert VariableRead', 'Delete Invocation']",2373
"public static < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 ) { return TYPE_2 . METHOD_1 ( VAR_1 , null ) ; }","public static < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 ) { return TYPE_2 . METHOD_1 ( VAR_1 , null , null ) ; }",['Insert Literal'],2374
"public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( true ) ; METHOD_5 ( METHOD_6 ( ) . getString ( VAR_2 ) , METHOD_6 ( ) . getString ( VAR_3 ) , true ) ; }","public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( true ) ; METHOD_5 ( METHOD_6 ( ) . getString ( VAR_2 ) , METHOD_6 ( ) . getString ( VAR_3 ) ) ; }",['Delete Literal'],2375
"protected TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) ) ) ) ; }","private TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) ) ) ) ; }",['Update Wra'],2377
"private static java.lang.String METHOD_1 ( int i ) { return VAR_1 [ TYPE_1 . METHOD_2 ( i , 0 ) ] ; }",private static java.lang.String METHOD_1 ( int i ) { return VAR_1 [ i ] ; },"['Move VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",2378
"public TYPE_1 METHOD_1 ( java.lang.String name ) { if ( VAR_1 . equals ( STRING_1 ) ) return new TYPE_2 ( ) ; if ( VAR_1 . equals ( STRING_2 ) ) return new TYPE_3 ( STRING_3 , true ) ; return super . METHOD_1 ( name ) ; }",public TYPE_1 METHOD_1 ( java.lang.String name ) { if ( VAR_1 . equals ( STRING_1 ) ) return new TYPE_2 ( ) ; return super . METHOD_1 ( name ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",2379
private java.lang.String METHOD_1 ( ) { for ( int VAR_1 = 0 ; VAR_1 < ( VAR_2 . length ) ; ++ VAR_1 ) buf [ VAR_1 ] = VAR_3 [ VAR_4 . METHOD_2 ( VAR_5 . length ) ] ; return new java.lang.String ( buf ) ; },public java.lang.String METHOD_1 ( ) { for ( int VAR_1 = 0 ; VAR_1 < ( VAR_2 . length ) ; ++ VAR_1 ) buf [ VAR_1 ] = VAR_3 [ VAR_4 . METHOD_2 ( VAR_5 . length ) ] ; return new java.lang.String ( buf ) ; },['Update Wra'],2380
protected java.lang.Void METHOD_1 ( ) throws java.lang.Throwable { METHOD_2 ( ) . METHOD_3 ( ) ; return null ; },protected java.lang.Void METHOD_1 ( ) throws java.lang.Throwable { start ( ) ; return null ; },"['Update Invocation', 'Move Invocation', 'Delete Invocation']",2381
public static void main ( java.lang.String [ ] args ) { new java.lang.Thread ( new TYPE_1 ( ) ) . start ( ) ; },public static void main ( ) { new java.lang.Thread ( new TYPE_1 ( ) ) . start ( ) ; },['Delete Parameter'],2382
public void METHOD_1 ( double VAR_1 ) { if ( ( ( ( VAR_2 ) + VAR_1 ) <= INT_1 ) || ( ( ( VAR_2 ) + VAR_1 ) >= 1 ) ) { this . VAR_2 = ( VAR_2 ) + VAR_1 ; } },public void METHOD_1 ( double VAR_1 ) { if ( ( ( ( VAR_2 ) + VAR_1 ) <= INT_1 ) || ( ( ( VAR_2 ) + VAR_1 ) >= 0 ) ) { this . VAR_2 = ( VAR_2 ) + VAR_1 ; } },['Update Literal'],2383
protected int METHOD_1 ( int VAR_1 ) { if ( VAR_1 == 0 ) { return 0 ; } int result = 1 ; while ( VAR_1 > 0 ) { result *= VAR_1 -- ; } return result ; },protected int METHOD_1 ( int VAR_1 ) { int result = 1 ; while ( VAR_1 > 0 ) { result *= VAR_1 -- ; } return result ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2385
public int METHOD_1 ( float VAR_1 ) { return - ( ( METHOD_2 ( ) ) / INT_1 ) ; },public int METHOD_1 ( ) { return - ( ( METHOD_2 ( ) ) / INT_1 ) ; },"['Delete TypeReference', 'Delete Parameter']",2386
public void METHOD_1 ( ) { try { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } } catch ( TYPE_1 VAR_2 ) { } },private void METHOD_1 ( ) { try { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } } catch ( TYPE_1 VAR_2 ) { } },['Update Wra'],2389
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) throws TYPE_1 { this . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , null , null , null , null , true ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) throws TYPE_1 { this . METHOD_1 ( VAR_1 , VAR_2 , null , null , true ) ; }","['Move Literal', 'Delete VariableRead', 'Delete VariableRead', 'Delete Literal', 'Delete Literal']",2390
TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.Long VAR_1 ) ;,METHOD_1 ( java.lang.Long VAR_1 ) { },"['Delete TypeReference', 'Delete TypeReference']",2391
public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = TYPE_1 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.String url ) { this . VAR_1 = TYPE_1 . METHOD_2 ( VAR_1 ) ; },"['Update Parameter', 'Insert TypeAccess', 'Delete VariableRead']",2393
public TYPE_1 get ( ) throws java.io.IOException { return new TYPE_2 ( VAR_1 ) ; },public TYPE_1 get ( ) throws java.io.IOException { return new TYPE_2 ( ) ; },['Delete FieldRead'],2394
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . add ( new TYPE_2 ( VAR_1 ) ) ; return this ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . add ( new TYPE_2 ( VAR_1 ) ) ; return null ; },"['Insert Literal', 'Delete ThisAccess']",2395
"java.lang.String format ( float value , float VAR_1 ) ;",java.lang.String format ( float value ) ;,"['Delete TypeReference', 'Delete Parameter']",2397
"public void METHOD_1 ( java.lang.String message ) { TYPE_1 . METHOD_2 ( ( ( STRING_1 + ( name ) ) + STRING_2 ) , INT_1 ) ; TYPE_2 . METHOD_3 ( ) . METHOD_1 ( ( message + STRING_3 ) , VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( java.lang.String message ) { TYPE_1 . METHOD_2 ( ( ( STRING_1 + ( name ) ) + STRING_2 ) , INT_1 ) ; TYPE_2 . METHOD_3 ( ) . METHOD_1 ( message , VAR_1 , VAR_2 ) ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",2398
"public boolean remove ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . size ( ) ) > 1 ) { TYPE_2 . METHOD_1 ( VAR_3 , VAR_1 ) ; } return VAR_4 . METHOD_2 ( ) ; }","public boolean remove ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . size ( ) ) > 1 ) { TYPE_2 . METHOD_1 ( VAR_3 , VAR_1 ) ; } return METHOD_2 ( ) ; }",['Update TypeAccess'],2399
"public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String message = VAR_2 . getText ( ) ; VAR_3 . METHOD_2 ( message , VAR_4 ) ; VAR_2 . setText ( STRING_1 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String message = VAR_2 . getText ( ) ; VAR_3 . METHOD_2 ( message ) ; VAR_2 . setText ( STRING_1 ) ; },['Delete TypeAccess'],2400
"public void METHOD_1 ( TYPE_1 < java.lang.Void > VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( this , VAR_3 , null , VAR_2 . METHOD_4 ( ) , VAR_4 , VAR_5 , null ) ; }","public void METHOD_1 ( TYPE_1 < java.lang.Void > VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( this , VAR_3 , getIntent ( ) , VAR_2 . METHOD_4 ( ) , VAR_4 , VAR_5 , null ) ; }","['Insert Invocation', 'Delete Literal']",2401
"public static java.lang.String METHOD_1 ( java.io.InputStream VAR_1 , int VAR_2 ) throws java.io.IOException , TYPE_1 { return TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) ; }",public static java.lang.String METHOD_1 ( java.io.InputStream VAR_1 ) throws java.io.IOException { return TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; },"['Delete TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2402
public void METHOD_1 ( ) { if ( ( VAR_1 ) >= 0 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . select ( ) ; } },protected void METHOD_1 ( ) { if ( ( VAR_1 ) >= 0 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . select ( ) ; } },['Update Wra'],2406
"public void METHOD_1 ( ) { int VAR_1 = INT_1 ; assertEquals ( STRING_1 , VAR_1 , VAR_2 . METHOD_1 ( INT_2 ) . size ( ) ) ; }","public void METHOD_1 ( ) { int VAR_1 = INT_1 ; assertEquals ( STRING_1 , VAR_1 , VAR_2 . METHOD_1 ( ) . size ( ) ) ; }",['Delete TypeAccess'],2408
public TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ; },private TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ; },['Update Wra'],2409
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( 0 , VAR_1 ) ; TYPE_2 msg = TYPE_2 . METHOD_2 ( ) ; VAR_3 = VAR_4 ; VAR_5 . obj = VAR_1 ; VAR_6 . METHOD_3 ( msg ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; TYPE_2 msg = TYPE_2 . METHOD_2 ( ) ; VAR_3 = VAR_4 ; VAR_5 . obj = VAR_1 ; VAR_6 . METHOD_3 ( msg ) ; },['Delete Literal'],2410
"public void METHOD_1 ( android.content.Context context , java.lang.Object item , int position ) { }","public void METHOD_1 ( android.content.Context context , java.lang.Object item ) { }","['Delete TypeReference', 'Delete Parameter']",2412
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_2 ( element ) ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( null ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { METHOD_3 ( VAR_3 ) ; METHOD_4 ( null ) ; }","['Update Parameter', 'Delete FieldRead', 'Delete Invocation']",2413
"boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return ( ( VAR_1 >= 0 ) && ( VAR_1 <= INT_1 ) ) && ( ( VAR_2 >= 0 ) && ( VAR_2 <= INT_1 ) ) ; }","boolean METHOD_1 ( int i , int j ) { return ( ( i >= 0 ) && ( i <= INT_1 ) ) && ( ( j >= 0 ) && ( j <= INT_1 ) ) ; }","['Update Parameter', 'Update Parameter', 'Update VariableRead', 'Update VariableRead', 'Update VariableRead', 'Update VariableRead']",2414
"private boolean METHOD_1 ( int VAR_1 , java.util.ArrayList < java.util.HashSet < java.lang.Integer > > VAR_2 ) { for ( java.util.Set < java.lang.Integer > set : VAR_2 ) if ( VAR_3 . contains ( VAR_1 ) ) return true ; return false ; }","private boolean METHOD_1 ( int VAR_1 , java.util.ArrayList < java.util.Set < java.lang.Integer > > list ) { for ( java.util.Set < java.lang.Integer > set : list ) if ( VAR_3 . contains ( VAR_1 ) ) return true ; return false ; }","['Update Parameter', 'Update VariableRead', 'Update TypeReference']",2415
public TYPE_1 METHOD_1 ( TYPE_2 < ? > value ) { return METHOD_1 ( VAR_1 . end ( ) ) ; },public TYPE_1 METHOD_1 ( TYPE_2 < ? > value ) { return METHOD_1 ( value ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2416
"public boolean METHOD_1 ( java.lang.String name , TYPE_1 VAR_1 ) { int [ ] id = METHOD_2 ( name ) ; if ( ( VAR_2 . length ) == 0 ) return false ; METHOD_3 ( id , VAR_1 ) ; return VAR_1 . METHOD_4 ( ) ; }","public void METHOD_1 ( java.lang.String name , TYPE_1 VAR_1 ) { int [ ] id = METHOD_2 ( name ) ; if ( ( VAR_2 . length ) == 0 ) return ; METHOD_3 ( id , VAR_1 ) ; }","['Update TypeReference', 'Delete Literal', 'Delete VariableRead', 'Delete Invocation', 'Delete Return']",2417
public void METHOD_1 ( ) { VAR_1 = 0 ; },private void METHOD_1 ( ) { VAR_1 = 0 ; },['Update Wra'],2418
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { return METHOD_1 ( VAR_1 , VAR_2 , null ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { return METHOD_1 ( VAR_1 , VAR_2 , null , null ) ; }",['Insert Literal'],2419
public void METHOD_1 ( int [ ] VAR_1 ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( int [ ] VAR_1 ) { VAR_2 = VAR_1 ; },"['Move VariableRead', 'Delete Invocation']",2421
protected void setText ( java.util.List < java.lang.String > text ) { VAR_1 . setText ( text ) ; },protected void setText ( java.util.List < java.lang.String > text ) { VAR_1 . setText ( ) ; },['Delete VariableRead'],2422
public void METHOD_1 ( ) { VAR_1 = true ; METHOD_2 ( ) ; },public void METHOD_1 ( boolean end ) { VAR_1 = end ; METHOD_2 ( ) ; },"['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead', 'Delete Literal']",2423
"public void METHOD_1 ( long VAR_1 , long VAR_2 ) { VAR_3 . info ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ; }","public void METHOD_1 ( long VAR_1 , long VAR_2 ) { java.lang.System.out.println ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ; }","['Update Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete TypeAccess']",2425
public static java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },public static java.util.List < TYPE_1 > METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete FieldRead']",2426
"public void METHOD_1 ( TYPE_1 item ) { VAR_1 . add ( 0 , item ) ; }",public void METHOD_1 ( TYPE_1 item ) { VAR_1 . add ( item ) ; },['Delete Literal'],2427
"public static void METHOD_1 ( long VAR_1 ) { TYPE_1 . METHOD_2 ( java.lang.Thread . METHOD_3 ( ) , true , ( VAR_1 * INT_1 ) ) ; }","public static void METHOD_1 ( long VAR_1 ) { TYPE_1 . METHOD_2 ( java.lang.Thread . METHOD_3 ( ) , true , VAR_1 ) ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",2428
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) throws TYPE_5 { TYPE_6 writer = new TYPE_6 ( ) ; VAR_1 . METHOD_2 ( VAR_2 , writer ) ; return new TYPE_1 ( VAR_4 . toString ( ) ) ; }","private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) throws TYPE_5 { TYPE_6 writer = new TYPE_6 ( ) ; VAR_1 . METHOD_2 ( VAR_2 , writer ) ; return new TYPE_1 ( writer ) ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2429
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; this . METHOD_3 ( ) ; },['Insert ThisAccess'],2430
"public static TYPE_1 METHOD_1 ( final long min , final long VAR_1 ) { return TYPE_2 . METHOD_2 ( new TYPE_3 ( min , VAR_1 ) ) . msg ( ( ( ( ( STRING_1 + min ) + STRING_2 ) + VAR_1 ) + STRING_3 ) ) ; }","public static TYPE_1 METHOD_1 ( final long min , final long VAR_1 ) { return TYPE_2 . METHOD_2 ( new TYPE_3 ( VAR_1 , VAR_1 ) ) . msg ( ( ( ( ( STRING_1 + min ) + STRING_2 ) + VAR_1 ) + STRING_3 ) ) ; }",['Update VariableRead'],2431
private void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( new TYPE_2 < TYPE_3 > ( ) { public void METHOD_4 ( TYPE_3 VAR_2 ) { VAR_1 . METHOD_5 ( VAR_2 ) ; } } ) ; },public TYPE_3 METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( new TYPE_2 < TYPE_3 > ( ) { public void METHOD_4 ( TYPE_3 VAR_2 ) { VAR_1 . METHOD_5 ( VAR_2 ) ; } } ) ; return this ; },"['Update TypeReference', 'Insert Return', 'Update Wra', 'Insert ThisAccess']",2432
"public double getValue ( double x , double y ) { return x + y ; }","public double getValue ( double x , double y ) { return 1 ; }","['Insert Literal', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator']",2434
"private boolean METHOD_1 ( TYPE_1 VAR_1 ) { long VAR_2 = TYPE_2 . METHOD_2 ( this , VAR_1 ) ; return ( VAR_2 > 0 ) && ( VAR_2 <= ( VAR_3 ) ) ; }","private boolean METHOD_1 ( TYPE_1 data ) { int VAR_2 = TYPE_2 . METHOD_2 ( this , data ) ; return ( VAR_2 > 0 ) && ( VAR_2 <= ( VAR_3 ) ) ; }","['Update Parameter', 'Update TypeReference', 'Update VariableRead']",2435
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( INT_1 ) ; },public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; },['Delete FieldRead'],2438
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; boolean VAR_3 = VAR_2 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_3 , true ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; boolean VAR_3 = VAR_2 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; },['Delete Literal'],2440
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . show ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . show ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; }","['Delete TypeAccess', 'Delete Invocation']",2441
private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 = VAR_1 . METHOD_3 ( VAR_4 ) ; VAR_5 = VAR_1 . METHOD_3 ( VAR_6 ) ; VAR_7 = context . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) ; },private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 = VAR_1 . METHOD_3 ( VAR_4 ) ; VAR_5 = VAR_1 . METHOD_3 ( VAR_6 ) ; VAR_7 = VAR_1 . METHOD_3 ( VAR_4 ) ; },"['Insert VariableRead', 'Delete FieldRead', 'Delete Invocation']",2442
public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { java.lang.System.out.println ( VAR_3 ) ; VAR_1 . METHOD_2 ( ) ; } },public static void main ( java.lang.String [ ] args ) { new TYPE_1 ( ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { java.lang.System.out.println ( VAR_3 ) ; VAR_1 . METHOD_2 ( ) ; } },"['Insert ConstructorCall', 'Delete TypeAccess', 'Delete Invocation']",2443
"public static java.util.Collection < TYPE_1 < TYPE_2 , TYPE_3 , TYPE_4 > > METHOD_1 ( ) { return java.util.Arrays.asList ( new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( ) , new TYPE_8 ( ) , new TYPE_9 ( ) ) ; }","public static java.util.Collection < TYPE_1 < TYPE_2 , TYPE_3 , TYPE_4 > > METHOD_1 ( ) { return java.util.Arrays.asList ( new TYPE_5 ( ) ) ; }","['Delete ConstructorCall', 'Delete ConstructorCall', 'Delete ConstructorCall', 'Delete ConstructorCall']",2445
"public void METHOD_1 ( float VAR_1 , float VAR_2 , float VAR_3 ) { METHOD_2 ( STRING_1 , VAR_1 ) ; METHOD_2 ( STRING_2 , VAR_2 ) ; METHOD_2 ( STRING_3 , VAR_3 ) ; }","public void METHOD_1 ( float VAR_1 , float VAR_2 , float VAR_3 ) { METHOD_2 ( STRING_1 , VAR_1 ) ; METHOD_2 ( STRING_2 , VAR_1 ) ; METHOD_2 ( STRING_3 , VAR_3 ) ; }",['Update VariableRead'],2447
"public android.view.View METHOD_1 ( int position ) { return getActivity ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( position , VAR_2 ) , null ) ; }","public android.view.View METHOD_1 ( int position ) { return getActivity ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( position , 0 ) , null ) ; }","['Insert Literal', 'Delete TypeAccess']",2448
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_2 = new java.util.ArrayList < TYPE_1 > ( VAR_1 ) ; },public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_2 = VAR_1 ; },"['Move VariableRead', 'Delete ConstructorCall']",2449
java.util.List < ? > METHOD_1 ( java.io.File content ) throws TYPE_1 ;,java.util.List < ? > METHOD_1 ( java.io.File file ) throws TYPE_1 ;,['Update Parameter'],2451
"public static byte [ ] METHOD_1 ( short VAR_1 , int VAR_2 , int VAR_3 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 , VAR_2 , VAR_3 ) ; }","public static byte [ ] METHOD_1 ( short VAR_1 , int VAR_2 , int VAR_3 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 , VAR_2 , VAR_2 ) ; }",['Update VariableRead'],2452
public static java.lang.String METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 >= 1 ) && ( VAR_1 <= INT_1 ) ) { return TYPE_1 . METHOD_1 ( VAR_1 ) ; } else { return STRING_1 ; } },public static java.lang.String METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 >= 1 ) || ( VAR_1 <= INT_1 ) ) { return TYPE_1 . METHOD_1 ( VAR_1 ) ; } else { return STRING_1 ; } },['Update BinaryOperator'],2453
"public abstract void METHOD_1 ( int VAR_1 , int VAR_2 , boolean VAR_3 ) ;","public abstract void METHOD_1 ( int VAR_1 , int VAR_2 ) ;","['Delete TypeReference', 'Delete Parameter']",2454
public void remove ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_3 . remove ( VAR_1 ) ; } synchronized ( VAR_4 ) { VAR_5 . remove ( new TYPE_2 ( VAR_1 ) ) ; } },public void remove ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_3 . remove ( VAR_1 ) ; } synchronized ( VAR_4 ) { VAR_5 . remove ( VAR_1 ) ; } },"['Move VariableRead', 'Delete ConstructorCall']",2455
public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; },private void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; },['Update Wra'],2456
"public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_2 == null ) || ( ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) > ( VAR_3 ) ) ; }","public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_2 == null ) && ( ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) > ( VAR_3 ) ) ; }",['Update BinaryOperator'],2457
public TYPE_1 get ( java.lang.Object key ) { return ( ( TYPE_1 ) ( VAR_1 . get ( new TYPE_2 ( ( ( TYPE_3 ) ( key ) ) ) ) ) ) ; },public TYPE_1 get ( java.lang.Object key ) { return ( ( TYPE_1 ) ( VAR_1 . get ( key ) ) ) ; },"['Insert VariableRead', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall']",2458
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.util.ArrayList < TYPE_1 > VAR_4 , java.util.Date VAR_5 ) { new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) . start ( ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.util.ArrayList < TYPE_1 > VAR_4 , java.util.Date VAR_5 , android.content.Context context ) { new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , context ) . start ( ) ; }","['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead']",2459
"public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 , TYPE_1 VAR_4 , java.lang.String VAR_5 , int VAR_6 , boolean VAR_7 ) throws TYPE_2 ;","public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 , TYPE_1 VAR_4 , java.lang.String VAR_5 , int VAR_6 ) throws TYPE_2 ;","['Delete TypeReference', 'Delete Parameter']",2460
public TYPE_1 METHOD_1 ( TYPE_1 node ) { TYPE_2 VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( true ) ; } VAR_2 . METHOD_4 ( node ) ; VAR_3 . METHOD_5 ( ) ; return node ; },public void METHOD_1 ( TYPE_1 node ) { TYPE_2 VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( true ) ; } VAR_2 . METHOD_4 ( node ) ; VAR_3 . METHOD_5 ( ) ; },"['Update TypeReference', 'Delete VariableRead', 'Delete Return']",2461
protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( STRING_1 ) ; return VAR_1 ; },private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( STRING_1 ) ; return VAR_1 ; },['Update Wra'],2462
public void METHOD_1 ( java.lang.String VAR_1 ) ;,public void METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",2463
"public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < java.lang.Long > VAR_1 , java.lang.Long VAR_2 ) { return new java.util.ArrayList < TYPE_1 > ( ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < java.lang.Long > VAR_1 , java.lang.Long VAR_2 ) { return null ; }","['Insert Literal', 'Delete ConstructorCall']",2464
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( context , STRING_1 , STRING_2 , null , new TYPE_2 ( ) { public void METHOD_3 ( ) { TYPE_3 . METHOD_4 ( context , STRING_3 ) ; } } ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( context , STRING_1 , STRING_2 , true , null , new TYPE_2 ( ) { public void METHOD_3 ( ) { TYPE_3 . METHOD_4 ( context , STRING_3 ) ; } } ) ; }",['Insert Literal'],2465
public static void METHOD_1 ( java.lang.Integer [ ] data ) { VAR_1 = new java.util.ArrayList < java.lang.Integer > ( java.util.Arrays.asList ( data ) ) ; },public static void METHOD_1 ( java.lang.Integer [ ] data ) { VAR_1 = java.util.Arrays.asList ( data ) ; },"['Move Invocation', 'Delete ConstructorCall']",2466
public java.lang.Object METHOD_1 ( java.lang.Object VAR_1 ) { java.lang.System.out.println ( VAR_1 ) ; return VAR_1 ; },public void METHOD_1 ( java.lang.Object VAR_1 ) { java.lang.System.out.println ( VAR_1 ) ; },"['Update TypeReference', 'Delete VariableRead', 'Delete Return']",2467
public int METHOD_1 ( ) { return this . y ; },public int METHOD_1 ( ) { return y ; },['Delete ThisAccess'],2468
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; METHOD_4 ( STRING_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; METHOD_4 ( ) ; },['Delete TypeAccess'],2469
"void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 ;",void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_3 ;,"['Delete TypeReference', 'Delete Parameter']",2470
protected < TYPE_1 > boolean METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) { return false ; },protected < TYPE_1 > void METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) { },"['Update TypeReference', 'Delete Literal', 'Delete Return']",2471
"private void error ( java.lang.String error ) { this . METHOD_1 ( STRING_1 , null , ( error + ( TYPE_1 . METHOD_2 ( ) ) ) ) ; }","private void error ( java.lang.String error ) { this . METHOD_1 ( STRING_1 , null , error ) ; }","['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",2472
"public TYPE_1 METHOD_1 ( java.lang.String name , int id , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return new TYPE_1 ( id , VAR_3 , VAR_4 ) ; }","public TYPE_1 METHOD_1 ( java.lang.String name , int id , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return new TYPE_1 ( id , VAR_1 , VAR_2 ) ; }","['Insert VariableRead', 'Insert VariableRead', 'Delete FieldRead', 'Delete FieldRead']",2473
"public void METHOD_1 ( ) { METHOD_2 ( VAR_1 . getName ( ) , STRING_1 , STRING_2 ) ; METHOD_3 ( ) ; }","public void METHOD_1 ( ) { METHOD_2 ( VAR_1 . getName ( ) , STRING_1 ) ; METHOD_3 ( ) ; }",['Delete TypeAccess'],2474
protected void METHOD_1 ( ) { main . METHOD_1 ( ) ; super . METHOD_1 ( ) ; },public final void METHOD_1 ( ) { main . METHOD_1 ( ) ; super . METHOD_1 ( ) ; },"['Update Wra', 'Insert Wra']",2475
"public static byte [ ] METHOD_1 ( long VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = ( ( ( ( VAR_4 ) + STRING_1 ) + VAR_1 ) + STRING_2 ) + VAR_2 ; return VAR_3 . METHOD_2 ( ) ; }","public static byte [ ] METHOD_1 ( long VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = ( ( ( ( VAR_4 ) + STRING_1 ) + VAR_1 ) + STRING_1 ) + VAR_2 ; return VAR_3 . METHOD_2 ( ) ; }",['Update FieldRead'],2476
private void METHOD_1 ( int VAR_1 ) { java.lang.Object value = get ( VAR_1 ) ; if ( value instanceof TYPE_1 ) { ( ( TYPE_1 ) ( value ) ) . METHOD_2 ( ) ; } },private void METHOD_1 ( int VAR_1 ) { if ( VAR_1 == 0 ) return ; java.lang.Object value = get ( VAR_1 ) ; if ( value instanceof TYPE_1 ) { ( ( TYPE_1 ) ( value ) ) . METHOD_2 ( ) ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Insert Return']",2477
private void METHOD_1 ( ) { TYPE_1 < java.lang.String > file = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( file . METHOD_3 ( ) ) { METHOD_4 ( VAR_2 . get ( ) ) ; } else { VAR_3 . info ( STRING_1 ) ; } },private void METHOD_1 ( ) { TYPE_1 < java.lang.String > file = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( file . METHOD_3 ( ) ) { METHOD_4 ( VAR_2 . get ( ) ) ; } else { java.lang.System.out.println ( STRING_1 ) ; } },"['Update Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete TypeAccess']",2478
"public void METHOD_1 ( TYPE_1 context ) { final TYPE_2 VAR_1 = context . METHOD_2 ( ) ; final TYPE_3 < ? > VAR_2 = context . METHOD_3 ( ) ; this . METHOD_4 ( VAR_1 , VAR_2 , context ) ; }","public void METHOD_1 ( TYPE_1 context ) { final TYPE_2 VAR_1 = context . METHOD_2 ( ) ; final TYPE_3 < ? > VAR_2 = context . METHOD_3 ( ) ; VAR_1 . METHOD_1 ( VAR_2 ) ; this . METHOD_4 ( VAR_1 , VAR_2 , context ) ; }","['Insert Invocation', 'Insert VariableRead', 'Insert VariableRead']",2479
"private void execute ( TYPE_1 p , TYPE_1 VAR_1 ) { METHOD_1 ( p , VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; METHOD_2 ( VAR_2 , p , VAR_1 ) ; }",private void execute ( ) { METHOD_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; METHOD_2 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",2481
"private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_4 = new TYPE_2 ( VAR_2 , this , VAR_3 ) ; VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; }","private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_4 = new TYPE_2 ( VAR_2 , this , VAR_3 ) ; VAR_1 . METHOD_2 ( ) ; }",['Delete Invocation'],2482
"public boolean METHOD_1 ( java.util.Calendar VAR_1 ) { if ( ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ) >= 0 ) { return true ; } return false ; }","public boolean METHOD_1 ( java.util.Calendar VAR_1 ) { if ( ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ) > 0 ) { return true ; } return false ; }",['Update BinaryOperator'],2483
"public void METHOD_1 ( java.lang.String VAR_1 , boolean delete ) { }",public void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeReference', 'Delete Parameter']",2484
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; for ( java.lang.String value : VAR_4 ) { TYPE_2 . METHOD_2 ( value , VAR_1 . METHOD_3 ( value ) ) ; } }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; for ( java.lang.String value : VAR_4 ) { TYPE_2 . METHOD_2 ( value , VAR_1 . METHOD_3 ( value ) ) ; } }",['Delete FieldRead'],2485
public java.util.List < TYPE_1 > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( this . VAR_1 ) ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( VAR_1 ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",2486
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return null ; } TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return null ; } return TYPE_3 . METHOD_3 ( VAR_2 ) ; },private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return null ; } return TYPE_3 . METHOD_3 ( VAR_2 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2487
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_1 ( ( ( int ) ( VAR_1 . METHOD_2 ( ) ) ) , ( ( int ) ( VAR_1 . METHOD_3 ( ) ) ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_1 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ; }","['Delete TypeReference', 'Delete TypeReference']",2488
public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( INT_1 ) ; VAR_2 . METHOD_3 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( 1 ) ; VAR_2 . METHOD_3 ( ) ; },"['Insert Literal', 'Delete TypeAccess']",2489
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },private void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },['Update Wra'],2490
"public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_2 ( VAR_2 , VAR_1 ) ; getActivity ( ) . METHOD_3 ( VAR_3 , intent ) ; getActivity ( ) . METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_2 ( VAR_2 , VAR_1 ) ; getActivity ( ) . METHOD_3 ( 0 , intent ) ; getActivity ( ) . METHOD_4 ( ) ; }","['Insert Literal', 'Delete TypeAccess']",2491
"public void init ( android.content.Context context ) { boolean VAR_1 = ( ( boolean ) ( TYPE_1 . METHOD_1 ( context , STRING_1 ) ) ) ; TYPE_2 . METHOD_2 ( ( VAR_1 ? new TYPE_3 ( ) : new TYPE_4 ( ) ) ) ; }","public void init ( android.content.Context context ) { boolean VAR_1 = ( ( boolean ) ( TYPE_1 . METHOD_1 ( context , STRING_1 ) ) ) ; TYPE_2 . METHOD_2 ( ( VAR_1 ? new TYPE_3 ( ) : new TYPE_4 ( info , error ) ) ) ; }","['Insert FieldRead', 'Insert FieldRead']",2492
"protected void METHOD_1 ( TYPE_1 attribute ) { this . METHOD_2 ( ) . add ( attribute ) ; this . METHOD_3 ( ) . put ( VAR_1 . getName ( ) , attribute ) ; }","private void METHOD_1 ( TYPE_1 attribute ) { this . METHOD_2 ( ) . add ( attribute ) ; this . METHOD_3 ( ) . put ( VAR_1 . getName ( ) , attribute ) ; }",['Update Wra'],2493
"private TYPE_1 METHOD_1 ( ) { VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; VAR_2 = new TYPE_2 ( METHOD_3 ( ) , METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; return VAR_1 ; }","protected TYPE_1 METHOD_1 ( ) { VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; VAR_2 = new TYPE_2 ( METHOD_3 ( ) , METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; return VAR_1 ; }",['Update Wra'],2494
"public void METHOD_1 ( TYPE_1 VAR_1 , java.util.Random VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 ) { }","public boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.Random VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 ) { return false ; }","['Update TypeReference', 'Insert Return', 'Insert Literal']",2495
"protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , false , STRING_3 ) ; return VAR_1 ; }","protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , true , STRING_3 ) ; return VAR_1 ; }",['Update Literal'],2496
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_3 ( true ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }","['Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",2498
public void METHOD_1 ( final int VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( final java.lang.String VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },['Update TypeReference'],2499
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > info = TYPE_2 . METHOD_2 ( ) ; METHOD_1 ( info ) ; return VAR_1 . list ( info ) . METHOD_3 ( ) ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > info = TYPE_2 . METHOD_2 ( ) ; METHOD_1 ( info ) ; return info ; },"['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2500
"public static TYPE_1 METHOD_1 ( final char value ) { if ( value > INT_1 ) { throw new TYPE_2 ( VAR_1 . format ( STRING_1 , value ) ) ; } return new TYPE_1 ( ( ( int ) ( value ) ) ) ; }",public static TYPE_1 METHOD_1 ( final char value ) { if ( value > INT_1 ) { throw new TYPE_2 ( STRING_1 ) ; } return new TYPE_1 ( ( ( int ) ( value ) ) ) ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2501
"void METHOD_1 ( java.util.List < TYPE_1 > data , boolean VAR_1 ) ;",void METHOD_1 ( java.util.List < TYPE_1 > data ) ;,"['Delete TypeReference', 'Delete Parameter']",2502
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( INT_1 , TYPE_3 . METHOD_2 ( ) ) ; VAR_2 . assertThat ( VAR_3 . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( false ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , TYPE_3 . METHOD_2 ( ) ) ; VAR_2 . assertThat ( VAR_3 . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( false ) ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Delete FieldRead']",2504
"void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String [ ] VAR_3 , java.lang.String VAR_4 ) throws TYPE_1 ;","void METHOD_1 ( java.lang.String VAR_2 , java.lang.String [ ] VAR_3 , java.lang.String VAR_4 ) throws TYPE_1 ;","['Delete TypeReference', 'Delete Parameter']",2505
"protected void METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 writer ) { if ( VAR_1 != null ) { writer . METHOD_2 ( STRING_1 ) ; VAR_2 . setValue ( VAR_3 . toString ( ) ) ; writer . METHOD_3 ( ) ; } }","protected void METHOD_1 ( final java.lang.Boolean VAR_1 , final TYPE_1 writer ) { if ( VAR_1 != null ) { writer . METHOD_2 ( STRING_1 ) ; VAR_2 . setValue ( VAR_3 . toString ( ) ) ; writer . METHOD_3 ( ) ; } }",['Update TypeReference'],2506
private static void METHOD_1 ( ) { java.lang.System.out.println ( ( STRING_1 + ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) ) ) ; },private static void METHOD_1 ( ) { java.lang.System.out.println ( ( STRING_1 + ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) ) ) ; java.lang.System.exit ( 1 ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Insert Literal']",2508
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { for ( TYPE_3 VAR_2 : VAR_3 ) { VAR_1 . METHOD_1 ( VAR_2 ) ; } if ( VAR_1 . METHOD_2 ( ) ) { METHOD_3 ( ) ; } return this ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { for ( TYPE_3 VAR_2 : VAR_3 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } if ( VAR_1 . METHOD_2 ( ) ) { METHOD_3 ( ) ; } return this ; },['Move VariableRead'],2509
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.Integer VAR_2 ) { return METHOD_2 ( VAR_1 , VAR_2 ) ; }",public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2510
protected void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; super . METHOD_1 ( VAR_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { this . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; super . METHOD_1 ( VAR_1 ) ; },['Insert ThisAccess'],2511
public int METHOD_1 ( ) { return METHOD_2 ( METHOD_3 ( 1 ) ) ; },private int METHOD_1 ( ) { return METHOD_2 ( METHOD_3 ( 1 ) ) ; },['Update Wra'],2512
"public boolean METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { boolean VAR_3 ; if ( ( VAR_4 [ VAR_1 ] ) == null ) { VAR_4 [ VAR_1 ] = VAR_2 ; VAR_3 = true ; } else { VAR_3 = false ; } return VAR_3 ; }","public boolean METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { boolean VAR_3 ; if ( ( VAR_4 [ VAR_1 ] ) != null ) { VAR_4 [ VAR_1 ] = VAR_2 ; VAR_3 = true ; } else { VAR_3 = false ; } return VAR_3 ; }",['Update BinaryOperator'],2513
private int METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_2 ) - ( VAR_3 ) ) / INT_1 ; },public int METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_2 ) - ( VAR_3 ) ) / INT_1 ; },['Update Wra'],2514
public void METHOD_1 ( java.util.List < java.lang.Boolean > VAR_1 ) { this . VAR_1 = METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( java.util.List < java.lang.Boolean > VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move VariableRead', 'Delete Invocation']",2515
"public static TYPE_1 METHOD_1 ( ) throws java.io.IOException , TYPE_2 { final java.lang.String VAR_1 = STRING_1 ; final byte [ ] VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; return TYPE_3 . METHOD_3 ( VAR_2 ) ; }","public final TYPE_1 METHOD_1 ( ) throws java.io.IOException , TYPE_2 { final java.lang.String VAR_1 = STRING_1 ; final byte [ ] VAR_2 = METHOD_2 ( VAR_1 ) ; return METHOD_3 ( VAR_2 ) ; }","['Move Wra', 'Update Wra', 'Update TypeAccess', 'Update TypeAccess']",2517
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( x , y , VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( x , x , VAR_2 , VAR_3 ) ; }",['Update FieldRead'],2519
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_1 ( ) ; },['Delete Invocation'],2522
"public java.io.File [ ] METHOD_1 ( ) { return new java.io.File [ ] { new java.io.File ( VAR_1 , STRING_1 ) , new java.io.File ( VAR_1 , STRING_2 ) , new java.io.File ( VAR_1 , STRING_3 ) } ; }","public java.io.File [ ] METHOD_1 ( ) { return new java.io.File [ ] { new java.io.File ( VAR_1 , STRING_1 ) } ; }","['Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall']",2523
"protected void METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , TYPE_1 VAR_2 , int VAR_3 , int VAR_4 , boolean VAR_5 ) throws java.io.IOException { METHOD_1 ( name , VAR_1 , VAR_2 , VAR_3 , VAR_4 , null , null , null , VAR_5 ) ; }","protected void METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , TYPE_1 VAR_2 , int VAR_3 , int VAR_4 ) throws java.io.IOException { METHOD_1 ( name , VAR_1 , VAR_2 , VAR_3 , VAR_4 , null , null , null ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2524
public final java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return VAR_2 ; } else { return VAR_1 ; } },protected final java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return VAR_2 ; } else { return VAR_1 ; } },['Update Wra'],2525
"public static int METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ; return VAR_2 . getInt ( VAR_3 , INT_1 ) ; }","public static int METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ; return VAR_2 . getInt ( VAR_3 , 0 ) ; }","['Insert Literal', 'Delete TypeAccess']",2526
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 data ) { VAR_2 . METHOD_2 ( data ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object data ) { VAR_2 . METHOD_2 ( data ) ; }","['Move Parameter', 'Update Parameter', 'Update Parameter', 'Update TypeReference', 'Update TypeReference', 'Delete TypeReference']",2528
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; VAR_2 . assertThat ( TYPE_2 . METHOD_2 ( STRING_1 ) , TYPE_3 . METHOD_3 ( VAR_3 . toString ( ) ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; assertThat ( TYPE_2 . METHOD_2 ( STRING_1 ) , TYPE_3 . METHOD_3 ( VAR_3 . toString ( ) ) ) ; }",['Update TypeAccess'],2529
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_2 ( VAR_3 . getText ( ) . toString ( ) ) ; VAR_1 . METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_2 ( VAR_3 . getText ( ) . toString ( ) ) ; }","['Delete VariableRead', 'Delete Invocation']",2530
"public int METHOD_1 ( int VAR_1 , int VAR_2 ) ;",public int METHOD_1 ( int VAR_2 ) ;,"['Delete TypeReference', 'Delete Parameter']",2531
private void METHOD_1 ( TYPE_1 event ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; },private void METHOD_1 ( TYPE_1 event ) { TYPE_2 . METHOD_2 ( ) ; },['Delete TypeAccess'],2533
"int METHOD_1 ( int id , java.lang.String name , boolean VAR_1 , java.lang.String VAR_2 , boolean VAR_3 , int VAR_4 , int VAR_5 , java.lang.String VAR_6 ) ;","int METHOD_1 ( int id , java.lang.String name , boolean VAR_1 , int VAR_4 , int VAR_5 , java.lang.String VAR_6 ) ;","['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",2534
private long METHOD_1 ( ) { long VAR_1 = VAR_2 ; long VAR_3 = VAR_2 ; VAR_3 ^= VAR_3 < < INT_1 ; VAR_3 ^= VAR_3 > > > INT_2 ; VAR_3 ^= VAR_3 < < INT_3 ; VAR_2 = VAR_3 ; return VAR_1 + VAR_3 ; },private int METHOD_1 ( ) { int VAR_1 = VAR_2 ; int VAR_3 = VAR_2 ; VAR_3 ^= VAR_3 < < INT_1 ; VAR_3 ^= VAR_3 > > > INT_2 ; VAR_3 ^= VAR_3 < < INT_3 ; VAR_2 = VAR_3 ; return VAR_1 + VAR_3 ; },"['Update TypeReference', 'Update TypeReference', 'Update TypeReference']",2535
"public static TYPE_1 METHOD_1 ( final TYPE_2 [ ] VAR_1 ) { return TYPE_3 . METHOD_2 ( VAR_1 , false , false , null , null , null ) ; }","public static TYPE_1 METHOD_1 ( final TYPE_2 [ ] VAR_1 ) { return TYPE_3 . METHOD_2 ( VAR_1 , false , false , null , null ) ; }",['Delete Literal'],2536
"public void get ( java.lang.String url , TYPE_1 VAR_1 ) { VAR_2 . execute ( new TYPE_2 ( url , VAR_1 , VAR_3 ) ) ; }","public void get ( java.lang.String url , TYPE_1 VAR_1 ) { VAR_2 . execute ( new TYPE_2 ( url , VAR_1 ) ) ; }",['Delete FieldRead'],2537
"public void METHOD_1 ( int VAR_1 ) { for ( int i = 1 ; i <= ( VAR_2 . size ( ) ) ; i ++ ) TYPE_1 . METHOD_2 ( i , VAR_3 . get ( VAR_1 ) ) ; }","public void METHOD_1 ( int VAR_1 ) { for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) TYPE_1 . METHOD_2 ( i , VAR_3 . get ( VAR_1 ) ) ; }","['Update BinaryOperator', 'Update Literal']",2538
"public TYPE_1 METHOD_1 ( long VAR_1 , TYPE_2 VAR_2 ) { return VAR_3 . METHOD_2 ( VAR_4 , STRING_1 , VAR_1 , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( double VAR_1 , TYPE_2 VAR_2 ) { return VAR_3 . METHOD_2 ( VAR_4 , STRING_1 , VAR_2 ) ; }","['Update TypeReference', 'Delete VariableRead']",2539
public boolean METHOD_1 ( double VAR_1 ) { return ( VAR_1 >= ( VAR_2 ) ) && ( VAR_1 < ( VAR_3 ) ) ; },public boolean METHOD_1 ( double VAR_1 ) { return ( VAR_1 >= ( VAR_2 ) ) && ( VAR_1 <= ( VAR_3 ) ) ; },['Update BinaryOperator'],2540
"protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( STRING_1 , VAR_1 ) ; }",protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( STRING_1 ) ; },['Delete FieldRead'],2541
"public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent intent = new android.content.Intent ( getContext ( ) , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; intent . METHOD_2 ( STRING_1 , VAR_1 ) ; METHOD_4 ( intent ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent intent = new android.content.Intent ( getContext ( ) , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( intent ) ; }","['Delete VariableRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2543
"public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 , false , false ) ; TYPE_1 . METHOD_2 ( VAR_3 , false , false ) ; }","public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 , false , false ) ; }","['Delete Literal', 'Delete Literal']",2544
"public void handle ( java.lang.Throwable t ) { t . METHOD_1 ( ) ; METHOD_2 ( VAR_1 , this , true ) ; }","public void handle ( java.lang.Throwable t ) { METHOD_2 ( VAR_1 , this , true ) ; }","['Delete VariableRead', 'Delete Invocation']",2545
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_2 , false , 1 , ( VAR_3 + INT_1 ) ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_2 , false , ( VAR_3 + INT_1 ) ) ; }",['Delete Literal'],2546
"public static java.util.List < java.net.URL > METHOD_1 ( final TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_2 ( true , VAR_1 ) ; }","public static java.util.List < java.net.URL > METHOD_1 ( final TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_2 ( false , VAR_1 ) ; }",['Update Literal'],2547
"public static void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) throws java.io.IOException { TYPE_1 . METHOD_1 ( VAR_1 , VAR_3 . METHOD_2 ( ) , VAR_3 . METHOD_3 ( ) , VAR_2 ) ; }","public static void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_1 . METHOD_1 ( VAR_1 , VAR_3 . METHOD_2 ( ) , VAR_3 . METHOD_3 ( ) , true ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2548
"protected void METHOD_1 ( TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_1 , int VAR_2 ) { for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_3 . get ( i ) ; } }","private void METHOD_1 ( TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_1 , int VAR_2 ) { for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_3 . get ( i ) ; } }",['Update Wra'],2549
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( null ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete Invocation']",2551
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) { return VAR_1 . METHOD_2 ( VAR_3 , VAR_4 , VAR_2 ) ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_3 , VAR_2 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2552
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( this ) ; VAR_3 . METHOD_2 ( this ) ; VAR_4 . METHOD_2 ( this ) ; VAR_5 . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( this ) ; VAR_3 . METHOD_2 ( this ) ; VAR_4 . METHOD_2 ( this ) ; },"['Delete TypeAccess', 'Delete Invocation']",2553
public void METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_3 = new TYPE_2 ( this ) ; new TYPE_3 ( ) . execute ( ( ( VAR_4 ) + STRING_1 ) ) ; },private void METHOD_1 ( ) { VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_3 = new TYPE_2 ( this ) ; new TYPE_3 ( ) . execute ( ( ( VAR_4 ) + STRING_1 ) ) ; },['Update Wra'],2554
public void METHOD_1 ( java.util.Date VAR_1 ) { if ( VAR_1 == null ) { this . VAR_1 = new java.util.Date ( ) ; } this . VAR_1 = VAR_1 ; },public void METHOD_1 ( java.util.Date VAR_1 ) { if ( VAR_1 == null ) { this . VAR_1 = null ; } this . VAR_1 = VAR_1 ; },"['Insert Literal', 'Delete ConstructorCall']",2555
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_2 . METHOD_2 ( VAR_1 ) ; return new TYPE_1 ( VAR_3 ) ; },public void METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Update TypeReference', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Return']",2556
"public TYPE_1 METHOD_1 ( float VAR_1 , float height ) { return METHOD_2 ( new float [ ] { 0 , 0 } , new float [ ] { 0 , height } ) ; }","public TYPE_1 METHOD_1 ( float VAR_1 , float height ) { return METHOD_2 ( new float [ ] { 0 , 0 } , new float [ ] { 0 , VAR_1 } ) ; }",['Update VariableRead'],2557
"public java.lang.Object [ ] METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( METHOD_3 ( ) , parameters ) ; }","public java.lang.Object [ ] METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( METHOD_3 ( ) , parameters , false ) ; }",['Insert Literal'],2558
"public static void METHOD_1 ( ) throws TYPE_1 , java.io.IOException { VAR_1 = new TYPE_2 ( ) ; TYPE_3 . METHOD_2 ( ) ; }","private static void METHOD_1 ( ) throws TYPE_1 , java.io.IOException { VAR_1 = new TYPE_2 ( ) ; TYPE_3 . METHOD_2 ( ) ; }",['Update Wra'],2559
public void METHOD_1 ( TYPE_1 state ) { VAR_1 . add ( new TYPE_2 ( state ) ) ; },public void METHOD_1 ( TYPE_1 state ) { VAR_1 . add ( state ) ; },"['Move VariableRead', 'Delete ConstructorCall']",2560
"public boolean METHOD_1 ( java.lang.String key , boolean VAR_1 ) { return this . put ( key , new java.lang.Boolean ( VAR_1 ) ) ; }","public boolean METHOD_1 ( java.lang.String key , boolean VAR_1 ) { return this . put ( new java.lang.Boolean ( VAR_1 ) ) ; }",['Delete VariableRead'],2561
"public java.lang.String METHOD_1 ( long VAR_1 ) { int index = TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 ) ; if ( index <= ( - 1 ) ) return null ; return VAR_3 . get ( index ) . VAR_4 ; }","public java.lang.String METHOD_1 ( long VAR_1 ) { int index = TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 ) ; if ( index == ( - 1 ) ) return null ; return VAR_3 . get ( index ) . VAR_4 ; }",['Update BinaryOperator'],2562
"public void METHOD_1 ( ) { java.util.Collection < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( STRING_1 , VAR_3 . size ( ) , TYPE_3 . METHOD_5 ( INT_1 ) ) ; }","public void METHOD_1 ( ) { java.util.Collection < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( STRING_1 , VAR_3 . size ( ) , TYPE_3 . METHOD_5 ( 1 ) ) ; }","['Insert Literal', 'Delete TypeAccess']",2563
"public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 context ) { return new TYPE_2 < TYPE_1 > ( context , ( ( TYPE_1 ) ( VAR_1 ) ) ) ; }","public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 context ) { return new TYPE_2 < TYPE_1 > ( TYPE_3 . METHOD_1 ( ) , ( ( TYPE_1 ) ( VAR_1 ) ) ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Delete VariableRead']",2564
private void METHOD_1 ( java.lang.String [ ] message ) { VAR_1 . METHOD_2 ( ( ( VAR_2 ) + STRING_1 ) ) ; },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( ( VAR_2 ) + STRING_1 ) ) ; },['Delete Parameter'],2565
"public static void METHOD_1 ( java.lang.String var ) { VAR_1 . put ( var , 0.0 ) ; }","public static void METHOD_1 ( java.lang.String var ) { VAR_1 . put ( var , null ) ; }",['Update Literal'],2566
public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; },public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; },"['Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2568
"java.util.List < TYPE_1 > METHOD_1 ( java.lang.String [ ] status , java.lang.String VAR_1 ) ;",java.util.List < TYPE_1 > METHOD_1 ( java.lang.String [ ] status ) ;,"['Delete TypeReference', 'Delete Parameter']",2569
public TYPE_1 METHOD_1 ( ) { if ( ! ( this . VAR_1 . isEmpty ( ) ) ) { return this . VAR_1 . remove ( 0 ) ; } return null ; },public TYPE_1 METHOD_1 ( ) { if ( ! ( this . VAR_1 . isEmpty ( ) ) ) { return this . VAR_1 . remove ( 0 ) ; } },"['Delete Literal', 'Delete Return']",2572
public TYPE_1 < TYPE_2 > list ( ) { return VAR_1 . METHOD_1 ( INT_1 ) ; },public TYPE_1 < TYPE_2 > list ( ) { return VAR_1 . METHOD_1 ( 1 ) ; },"['Insert Literal', 'Delete TypeAccess']",2573
"public void METHOD_1 ( ) { try { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) ; } catch ( java.io.IOException VAR_3 ) { VAR_4 . METHOD_4 ( VAR_5 , STRING_1 , VAR_3 ) ; } }","public void METHOD_1 ( ) { try { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) ; } catch ( java.io.IOException VAR_3 ) { VAR_4 . METHOD_4 ( VAR_5 , STRING_1 ) ; } }",['Delete VariableRead'],2574
"public void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > result ) { int count = 1 ; VAR_1 . METHOD_2 ( ) ; for ( TYPE_2 temp : result ) { VAR_1 . METHOD_3 ( temp , ( count ++ ) ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > result ) { int count = 1 ; VAR_1 . METHOD_2 ( ) ; for ( TYPE_2 temp : result ) { VAR_1 . METHOD_3 ( temp , ( count ++ ) ) ; } }",['Update Wra'],2577
"public void METHOD_1 ( ) throws java.lang.Exception { double VAR_1 = FLOAT_1 ; VAR_2 . assertThat ( TYPE_1 . METHOD_2 ( STRING_1 ) , TYPE_2 . METHOD_3 ( VAR_3 . toString ( VAR_1 ) ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { double VAR_1 = FLOAT_1 ; assertThat ( TYPE_1 . METHOD_2 ( STRING_1 ) , TYPE_2 . METHOD_3 ( VAR_3 . toString ( VAR_1 ) ) ) ; }",['Update TypeAccess'],2578
"public static TYPE_1 METHOD_1 ( java.lang.String filePath , int size ) throws java.io.IOException { return TYPE_2 . METHOD_1 ( new java.io.File ( filePath ) , size ) ; }",public static TYPE_1 METHOD_1 ( java.lang.String filePath ) throws java.io.IOException { return TYPE_2 . METHOD_1 ( new java.io.File ( filePath ) ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2579
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_2 , VAR_4 ) ; METHOD_4 ( VAR_2 ) ; return new TYPE_1 ( VAR_1 ) ; }","public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_2 , VAR_4 ) ; METHOD_4 ( VAR_2 ) ; return new TYPE_1 ( ) ; }","['Update ConstructorCall', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2580
public final java.lang.String [ ] METHOD_1 ( ) throws TYPE_1 { return METHOD_1 ( true ) ; },public final java.lang.String [ ] METHOD_1 ( ) throws TYPE_1 { return METHOD_1 ( false ) ; },['Update Literal'],2581
public boolean equals ( java.lang.Object obj ) { return ( obj instanceof TYPE_1 ) && ( ( ( TYPE_1 ) ( obj ) ) . METHOD_1 ( ) . equals ( this . METHOD_1 ( ) ) ) ; },public boolean equals ( java.lang.Object obj ) { return ( obj instanceof TYPE_1 ) && ( ( ( TYPE_1 ) ( obj ) ) . getId ( ) . equals ( this . getId ( ) ) ) ; },"['Update Invocation', 'Update Invocation']",2582
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . i ( STRING_1 , STRING_2 ) ; super . METHOD_1 ( VAR_1 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_2 ) ; super . METHOD_1 ( VAR_1 ) ; },"['Update Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess']",2586
"public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return true ; }","public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return false ; }",['Update Literal'],2587
"private int METHOD_1 ( int x , int y ) { return ( y * ( VAR_1 ) ) + x ; }","private int METHOD_1 ( int x , int y ) { return ( x * ( VAR_1 ) ) + y ; }","['Update BinaryOperator', 'Move BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead']",2588
TYPE_1 METHOD_1 ( ) { double VAR_1 = x ; x = - ( y ) ; y = VAR_1 ; return this ; },TYPE_1 METHOD_1 ( ) { float VAR_1 = x ; x = - ( y ) ; y = VAR_1 ; return this ; },['Update TypeReference'],2589
public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : this . METHOD_3 ( ) ; return true ; case VAR_2 : METHOD_4 ( ) ; return true ; } return super . METHOD_1 ( item ) ; },public boolean METHOD_1 ( TYPE_1 item ) { switch ( item . METHOD_2 ( ) ) { case VAR_1 : METHOD_3 ( ) ; return true ; case VAR_2 : METHOD_4 ( ) ; return true ; } return super . METHOD_1 ( item ) ; },['Delete ThisAccess'],2590
public void METHOD_1 ( ) { size += 1 ; },public void METHOD_1 ( ) { this . size += 1 ; },['Insert ThisAccess'],2591
public void METHOD_1 ( int VAR_1 ) { return this . METHOD_2 ( VAR_1 ) ; },public long METHOD_1 ( int VAR_1 ) { return this . METHOD_2 ( VAR_1 ) ; },['Update TypeReference'],2594
public static boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( STRING_1 ) ) != null ; },public static boolean METHOD_1 ( ) { return true ; },"['Insert Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator']",2595
"public void METHOD_1 ( ) throws java.lang.Throwable { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( null , STRING_1 , VAR_2 class , 1 ) ; VAR_3 . handle ( ) . METHOD_3 ( 1 , INT_1 ) ; }","public void METHOD_1 ( ) throws java.lang.Throwable { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 , VAR_2 class , 1 ) ; VAR_3 . handle ( ) . METHOD_3 ( 1 , INT_1 ) ; }",['Delete Literal'],2596
"public void METHOD_1 ( ) { java.util.List < java.lang.String > names = TYPE_1 . METHOD_2 ( VAR_1 ) . select ( VAR_2 ) . METHOD_3 ( ) ; VAR_3 . assertEquals ( STRING_1 , VAR_4 . toString ( ) ) ; }","public void METHOD_1 ( ) { java.util.List < java.lang.String > names = TYPE_1 . METHOD_2 ( VAR_1 ) . select ( VAR_2 ) . METHOD_3 ( ) ; assertEquals ( STRING_1 , VAR_4 . toString ( ) ) ; }",['Update TypeAccess'],2597
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ; }","['Delete VariableRead', 'Delete Invocation']",2598
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_2 ) { this . VAR_2 = VAR_2 ; },"['Update Parameter', 'Insert VariableRead', 'Delete VariableRead', 'Delete Invocation']",2599
"private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_4 . getData ( ) , VAR_2 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( true ) ; return VAR_3 ; }","private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_4 . getData ( ) , VAR_2 . METHOD_3 ( ) ) ; return VAR_3 ; }","['Delete VariableRead', 'Delete Literal', 'Delete Invocation']",2600
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",2602
"protected java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 < TYPE_1 > METHOD_2 ( new TYPE_2 ( ) , new TYPE_3 ( ) , new TYPE_4 ( ) ) ; }","protected java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 < TYPE_1 > METHOD_2 ( new TYPE_2 ( ) , new TYPE_4 ( ) ) ; }",['Delete ConstructorCall'],2603
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( STRING_1 ) ; METHOD_4 ( STRING_2 , STRING_3 ) ; METHOD_5 ( STRING_2 ) ; METHOD_6 ( STRING_2 ) ; }",protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( STRING_1 ) ; METHOD_4 ( STRING_2 ) ; METHOD_5 ( STRING_2 ) ; METHOD_6 ( STRING_2 ) ; },['Delete TypeAccess'],2604
"public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < TYPE_2 , TYPE_1 < TYPE_2 > > VAR_1 ) { return VAR_2 . b ( ) . METHOD_2 ( VAR_2 . a ( ) ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < TYPE_2 , TYPE_1 < TYPE_2 > > VAR_1 ) { return VAR_2 . b ( ) . append ( VAR_2 . a ( ) ) ; }",['Update Invocation'],2605
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { return METHOD_1 ( VAR_1 , VAR_2 , VAR_2 , VAR_3 ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String url , java.lang.String path ) { return METHOD_1 ( VAR_1 , url , url , path ) ; }","['Update Parameter', 'Update Parameter', 'Update VariableRead', 'Update VariableRead', 'Update VariableRead']",2606
public java.lang.String toString ( ) { return ( ( ( ( STRING_1 + ( METHOD_1 ( ) ) ) + STRING_2 ) + ( METHOD_2 ( ) ) ) + STRING_3 ) + ( METHOD_3 ( ) ) ; },public java.lang.String toString ( ) { return ( ( ( ( STRING_1 + ( METHOD_1 ( ) ) ) + STRING_2 ) + ( METHOD_2 ( ) ) ) + STRING_3 ) + ( METHOD_2 ( ) ) ; },['Update Invocation'],2608
public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = INT_1 ; VAR_2 = INT_2 ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = INT_1 ; VAR_2 = ( ( byte ) ( INT_2 ) ) ; },['Insert TypeReference'],2610
"public void METHOD_1 ( ) { VAR_1 . assertEquals ( ( INT_1 + ( VAR_2 ) ) , VAR_3 . query ( STRING_1 ) . size ( ) ) ; }","public void METHOD_1 ( ) { assertEquals ( ( INT_1 + ( VAR_2 ) ) , VAR_3 . query ( STRING_1 ) . size ( ) ) ; }",['Update TypeAccess'],2611
"public void METHOD_1 ( java.lang.String VAR_1 ) { try { super . METHOD_1 ( VAR_1 ) ; this . VAR_2 . METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_3 ) { METHOD_3 ( VAR_1 , VAR_3 ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 ) { try { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_3 ) { METHOD_3 ( VAR_1 , VAR_3 ) ; } }","['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",2612
public void METHOD_1 ( ) { int i = VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { int i = VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( i ) ; },"['Insert Invocation', 'Insert FieldRead', 'Insert VariableRead', 'Insert TypeAccess']",2614
"public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; this . VAR_2 = new TYPE_1 < java.lang.String , java.util.Map < java.lang.String , java.lang.String > > ( ) ; }",public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; this . VAR_2 = null ; },"['Insert Literal', 'Delete ConstructorCall']",2615
public final void METHOD_1 ( long startTime ) { this . startTime = startTime ; },protected final void METHOD_1 ( long startTime ) { this . startTime = startTime ; },['Update Wra'],2616
public boolean METHOD_1 ( java.util.Properties VAR_1 ) { return ( METHOD_2 ( VAR_1 ) ) != null ; },public boolean METHOD_1 ( java.util.Properties VAR_1 ) { return ( get ( VAR_1 ) ) != null ; },['Update Invocation'],2617
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.util.Date startTime ) { return new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , VAR_1 , VAR_2 . METHOD_3 ( ) , startTime ) ; }","public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , VAR_1 , VAR_2 . METHOD_3 ( ) ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2618
"public static void METHOD_1 ( final java.net.URL url , final java.io.File file ) throws java.io.IOException , TYPE_1 { TYPE_2 . METHOD_1 ( url , file , false ) ; }","public static void METHOD_1 ( final java.net.URL url , final java.io.File file ) throws java.io.IOException , TYPE_1 { TYPE_2 . METHOD_1 ( url , file ) ; }",['Delete Literal'],2619
private int METHOD_1 ( int VAR_1 ) { java.util.Random VAR_2 = new java.util.Random ( ) ; int i = VAR_2 . METHOD_2 ( VAR_1 ) ; return i ; },public int METHOD_1 ( int VAR_1 ) { java.util.Random VAR_2 = new java.util.Random ( ) ; int i = VAR_2 . METHOD_2 ( VAR_1 ) ; return i ; },['Update Wra'],2620
"public TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String , java.lang.String > VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( this . VAR_3 , this . VAR_4 , new TYPE_4 ( this . VAR_1 , VAR_1 ) ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String , java.lang.String > VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( this . VAR_3 , this . VAR_4 , new TYPE_4 ( VAR_1 ) ) ; return VAR_2 ; }","['Delete ThisAccess', 'Delete FieldRead']",2621
"private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , null ) ; TYPE_1 . METHOD_2 ( VAR_2 , null ) ; TYPE_1 . METHOD_2 ( VAR_3 , null ) ; TYPE_1 . METHOD_2 ( VAR_4 , STRING_1 ) ; }","private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , null ) ; TYPE_1 . METHOD_2 ( VAR_2 , null ) ; TYPE_1 . METHOD_2 ( VAR_3 , null ) ; TYPE_1 . METHOD_2 ( VAR_4 , null ) ; }","['Insert Literal', 'Delete TypeAccess']",2622
"public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { synchronized ( VAR_3 ) { return VAR_3 . METHOD_2 ( new TYPE_1 < > ( VAR_2 , VAR_1 ) ) ; } }","public boolean METHOD_1 ( int VAR_1 , int token ) { synchronized ( VAR_3 ) { return VAR_3 . METHOD_2 ( new TYPE_1 < > ( token , VAR_1 ) ) ; } }","['Update Parameter', 'Update VariableRead']",2624
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_2 { return TYPE_1 . METHOD_2 ( ) . METHOD_3 ( new TYPE_3 ( VAR_4 , STRING_1 ) ) . build ( ) ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_2 { return TYPE_1 . METHOD_2 ( ) . METHOD_3 ( new TYPE_3 ( VAR_4 , STRING_1 ) ) . build ( ) ; }","['Delete TypeReference', 'Delete Parameter']",2625
"TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 , TYPE_9 VAR_8 ) { return new TYPE_10 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_5 , VAR_7 , VAR_8 ) ; }","TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 ) { return new TYPE_10 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_5 , VAR_7 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2626
"private void METHOD_1 ( TYPE_1 n ) { VAR_1 . setText ( ( ( java.lang.String.format ( STRING_1 , n . METHOD_2 ( ) ) ) + STRING_2 ) ) ; }",private void METHOD_1 ( java.lang.String n ) { VAR_1 . setText ( ( n + STRING_2 ) ) ; },"['Update TypeReference', 'Move VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2627
public boolean METHOD_1 ( int index ) { return ( METHOD_2 ( index ) ) instanceof TYPE_1 ; },public boolean METHOD_1 ( int index ) { return ( get ( index ) ) instanceof TYPE_1 ; },['Update Invocation'],2628
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { for ( TYPE_2 VAR_3 : VAR_4 ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_3 : VAR_4 ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2629
private int METHOD_1 ( java.lang.String name ) { return ( ( java.lang.Integer ) ( VAR_1 . get ( name ) ) ) ; },protected int METHOD_1 ( java.lang.String name ) { return ( ( java.lang.Integer ) ( VAR_1 . get ( name ) ) ) ; },['Update Wra'],2630
"public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 ... VAR_4 ) throws java.io.IOException { return new TYPE_1 ( new TYPE_5 ( new java.io.FileInputStream ( VAR_1 ) ) , VAR_2 , VAR_3 , VAR_5 , VAR_4 ) ; }","public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 ... VAR_4 ) throws java.io.IOException { return new TYPE_1 ( new TYPE_5 ( new java.io.FileInputStream ( VAR_1 ) ) , VAR_2 , VAR_3 , VAR_4 ) ; }",['Delete FieldRead'],2631
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) return STRING_1 ; else return METHOD_1 ( VAR_1 . METHOD_3 ( ) ) ; },private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) return METHOD_1 ( VAR_1 ) ; else return METHOD_1 ( VAR_1 . METHOD_3 ( ) ) ; },"['Insert Invocation', 'Insert VariableRead', 'Delete FieldRead']",2632
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; start ( ) ; if ( ( METHOD_2 ( ) ) == 0 ) { METHOD_3 ( ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( METHOD_2 ( ) ) == 0 ) { METHOD_3 ( ) ; } },['Delete Invocation'],2633
public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( VAR_2 ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( VAR_2 ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",2634
public int METHOD_1 ( ) throws java.io.IOException { return ( METHOD_2 ( ) ) / ( VAR_1 ) ; },public int METHOD_1 ( ) throws java.io.IOException { return ( METHOD_2 ( ) ) * ( VAR_1 ) ; },['Update BinaryOperator'],2635
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( ) . replace ( VAR_3 , new TYPE_2 ( ) ) . commit ( ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( ) . add ( VAR_3 , new TYPE_2 ( ) ) . commit ( ) ; }",['Update Invocation'],2636
"public TYPE_1 < java.lang.Long > end ( long num ) { return new TYPE_2 ( start , ( ( start ) + num ) , VAR_1 ) ; }","public TYPE_1 < java.lang.Long > end ( long num ) { return new TYPE_2 ( min , ( ( min ) + num ) , VAR_1 ) ; }","['Update FieldRead', 'Update FieldRead']",2637
"public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { METHOD_2 ( ( VAR_1 != null ) , STRING_1 ) ; this . VAR_1 = VAR_1 ; }","public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { METHOD_2 ( ( VAR_1 == null ) , STRING_1 ) ; this . VAR_1 = VAR_1 ; }",['Update BinaryOperator'],2638
"public void METHOD_1 ( int VAR_1 , double VAR_2 ) { if ( ( VAR_1 >= 0 ) && ( VAR_1 < ( VAR_3 . length ) ) ) { VAR_4 [ VAR_1 ] = VAR_2 ; } METHOD_2 ( ) ; }","public void METHOD_1 ( int VAR_1 , double VAR_2 ) { if ( ( VAR_1 >= 0 ) && ( VAR_1 < ( VAR_3 . length ) ) ) { VAR_4 [ VAR_1 ] = VAR_2 ; } }",['Delete Invocation'],2640
public java.lang.String index ( TYPE_1 VAR_1 ) { return VAR_1 == null ? STRING_1 : STRING_2 ; },public java.lang.String index ( ) { return ( VAR_1 ) == null ? STRING_1 : STRING_2 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2641
protected final TYPE_1 METHOD_1 ( ) { return this . VAR_1 ; },protected TYPE_1 METHOD_1 ( ) { return VAR_1 ; },"['Delete Wra', 'Delete ThisAccess']",2642
"public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { return VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_4 . name ( ) , VAR_2 , VAR_5 . name ( ) , VAR_3 ) ) ; }","public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { return VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_4 . name ( ) , VAR_2 ) ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2643
public void METHOD_1 ( int VAR_1 ) throws java.lang.Throwable { VAR_2 . assertThat ( VAR_1 ) . METHOD_2 ( VAR_3 ) ; },public void METHOD_1 ( int VAR_1 ) throws java.lang.Throwable { assertThat ( VAR_1 ) . METHOD_2 ( VAR_3 ) ; },['Update TypeAccess'],2644
"protected abstract void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , java.util.Map < java.lang.String , java.lang.Object > parameters , TYPE_1 ... VAR_2 ) throws java.io.IOException ;","protected abstract void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , TYPE_1 ... VAR_2 ) throws java.io.IOException ;","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter']",2645
public java.lang.Boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) . contains ( VAR_1 ) ) || ( METHOD_2 ( ) . contains ( VAR_2 ) ) ) { return true ; } return false ; },public java.lang.Boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) . contains ( VAR_1 ) ) && ( METHOD_2 ( ) . contains ( VAR_2 ) ) ) { return true ; } return false ; },['Update BinaryOperator'],2646
"public static java.lang.String METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ) ; TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , null ) ; return VAR_4 . toString ( ) ; }","public static java.lang.String METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ) ; TYPE_3 . METHOD_2 ( VAR_3 , VAR_1 , VAR_2 ) ; return VAR_4 . toString ( ) ; }","['Move VariableRead', 'Delete Literal']",2648
public void METHOD_1 ( TYPE_1 event ) { event . METHOD_2 ( new TYPE_2 ( ) ) ; event . METHOD_2 ( new TYPE_3 ( ) ) ; event . METHOD_2 ( new TYPE_4 ( ) ) ; event . METHOD_2 ( new TYPE_5 ( ) ) ; },public void METHOD_1 ( TYPE_1 event ) { event . METHOD_2 ( new TYPE_2 ( ) ) ; event . METHOD_2 ( new TYPE_3 ( ) ) ; event . METHOD_2 ( new TYPE_4 ( ) ) ; },"['Delete VariableRead', 'Delete ConstructorCall', 'Delete Invocation']",2649
public static void main ( java.lang.String [ ] args ) { new TYPE_1 ( ) ; java.lang.Thread VAR_1 = new java.lang.Thread ( new TYPE_2 ( ) ) ; VAR_1 . METHOD_1 ( ) ; },public static void main ( java.lang.String [ ] args ) { java.lang.Thread VAR_1 = new java.lang.Thread ( new TYPE_2 ( ) ) ; VAR_1 . METHOD_1 ( ) ; },['Delete ConstructorCall'],2650
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( java.lang.String VAR_2 , java.lang.String VAR_1 ) { TYPE_1 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_2 , VAR_1 ) ; }","['Move Parameter', 'Move VariableRead']",2653
"public abstract TYPE_1 < TYPE_2 , TYPE_2 > METHOD_1 ( TYPE_3 x ) ;","public TYPE_1 < TYPE_2 , TYPE_2 > METHOD_1 ( TYPE_3 x ) { return null ; }","['Insert Return', 'Insert Literal', 'Delete Wra']",2654
public void METHOD_1 ( final java.lang.String VAR_1 ) { this . VAR_2 . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( final java.lang.String VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",2655
"private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) > 0 ) { VAR_2 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; } else { VAR_2 . METHOD_4 ( VAR_1 , VAR_3 ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) > 0 ) { VAR_2 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; } else { VAR_2 . METHOD_4 ( VAR_1 , VAR_3 , VAR_4 ) ; } }",['Insert TypeAccess'],2658
protected void METHOD_1 ( ) { java.util.Random VAR_1 = new java.util.Random ( ) ; int num = VAR_1 . METHOD_2 ( VAR_2 ) ; java.lang.System.out.println ( ( STRING_1 + num ) ) ; VAR_3 . add ( VAR_4 . get ( num ) ) ; },private void METHOD_1 ( ) { java.util.Random VAR_1 = new java.util.Random ( ) ; int num = VAR_1 . METHOD_2 ( VAR_2 ) ; java.lang.System.out.println ( ( STRING_1 + num ) ) ; VAR_3 . add ( VAR_4 . get ( num ) ) ; },['Update Wra'],2660
public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { int i ; int VAR_2 = VAR_3 . size ( ) ; for ( i = 0 ; i < VAR_2 ; i ++ ) { java.lang.System.out.println ( VAR_3 . get ( i ) ) ; } },public void METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 ) { int i ; int VAR_2 = VAR_3 . size ( ) ; for ( i = 0 ; i < VAR_2 ; i ++ ) { java.lang.System.out.println ( VAR_3 . get ( i ) ) ; } },['Update TypeReference'],2661
public boolean METHOD_1 ( ) { return ( index ) < INT_1 ; },public boolean METHOD_1 ( ) { return ( index ) < 1 ; },"['Insert Literal', 'Delete FieldRead']",2662
public static TYPE_1 METHOD_1 ( java.lang.Long VAR_1 ) { if ( VAR_1 == null ) { return null ; } return TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) . METHOD_4 ( ) ; },public static TYPE_1 METHOD_1 ( long VAR_1 ) { return TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) . METHOD_4 ( ) ; },"['Update TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2663
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return TYPE_2 . METHOD_2 ( ) ; } return VAR_2 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return null ; return VAR_2 ; },"['Insert Literal', 'Delete TypeAccess', 'Delete Invocation']",2664
public int METHOD_1 ( ) { return length ; },public int METHOD_1 ( ) { return node . METHOD_1 ( ) ; },"['Insert Invocation', 'Insert FieldRead', 'Delete FieldRead']",2667
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_2 . toUpperCase ( ) ; return this ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_2 . toLowerCase ( ) ; return this ; },['Update Invocation'],2669
public boolean METHOD_1 ( ) { return ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( ( VAR_3 . METHOD_2 ( ) ) == ( VAR_2 ) ) ; },public boolean METHOD_1 ( ) { return ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) || ( ( VAR_3 . METHOD_2 ( ) ) == ( VAR_2 ) ) ; },['Update BinaryOperator'],2671
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 ;",public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 ;,"['Delete TypeReference', 'Delete Parameter']",2672
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) ;",public TYPE_1 METHOD_1 ( TYPE_3 VAR_2 ) ;,"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",2673
public void METHOD_1 ( ) { try { java.io.BufferedWriter writer = new java.io.BufferedWriter ( new java.io.FileWriter ( fileName ) ) ; writer.write ( VAR_1 ) ; writer . METHOD_2 ( ) ; } catch ( java.io.IOException VAR_2 ) { java.lang.System.out.println ( STRING_1 ) ; } },public void METHOD_1 ( ) { try { java.io.BufferedWriter writer = new java.io.BufferedWriter ( new java.io.FileWriter ( fileName ) ) ; writer.write ( VAR_1 ) ; } catch ( java.io.IOException VAR_2 ) { java.lang.System.out.println ( STRING_1 ) ; } },"['Delete VariableRead', 'Delete Invocation']",2674
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 , STRING_2 , VAR_3 , VAR_4 ) ) == ( VAR_5 ) ) { VAR_2 . METHOD_3 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 , STRING_2 , VAR_3 , VAR_4 ) ) == ( VAR_5 ) ) { java.lang.System.exit ( 0 ) ; } }","['Update Invocation', 'Update TypeAccess', 'Insert Literal']",2675
public static TYPE_1 METHOD_1 ( TYPE_1 type ) { return TYPE_2 . METHOD_2 ( VAR_1 . name ( ) ) ; },public static TYPE_1 METHOD_1 ( TYPE_1 type ) { return TYPE_2 . METHOD_2 ( VAR_1 . toString ( ) ) ; },['Update Invocation'],2676
"public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 , null , this ) ; }","public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( 0 , null , this ) ; }","['Insert Literal', 'Delete TypeAccess']",2677
public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 class ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ( ( TYPE_3 ) ( new TYPE_4 ( ) ) ) ) ) ; },public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 class ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ( ( TYPE_3 ) ( null ) ) ) ) ; },"['Insert Literal', 'Move TypeReference', 'Delete ConstructorCall']",2678
"public TYPE_1 METHOD_1 ( java.lang.String key ) throws TYPE_2 { return super . METHOD_2 ( VAR_1 class , STRING_1 , key ) ; }","public TYPE_1 METHOD_1 ( java.lang.String name ) throws TYPE_2 { return super . METHOD_2 ( VAR_1 class , ""name"" , name ) ; }","['Update Parameter', 'Insert Literal', 'Update VariableRead', 'Delete TypeAccess']",2680
"public TYPE_1 < ? extends TYPE_2 < TYPE_3 , java.lang.Object > > METHOD_1 ( TYPE_1 < ? extends TYPE_4 < ? extends TYPE_5 > > VAR_1 ) { return METHOD_2 ( true , false , null , VAR_1 ) ; }","public TYPE_1 < ? extends TYPE_2 < TYPE_3 , java.lang.Object > > METHOD_1 ( TYPE_1 < ? extends TYPE_4 < ? extends TYPE_5 > > VAR_1 ) { return METHOD_2 ( true , null , VAR_1 ) ; }",['Delete Literal'],2681
public void METHOD_1 ( ) { TYPE_1 result = VAR_1 . get ( ( - INT_1 ) ) ; TYPE_2 . METHOD_2 ( result ) ; },public void METHOD_1 ( ) { TYPE_1 result = VAR_1 . get ( ( - INT_1 ) ) ; METHOD_2 ( result ) ; },['Update TypeAccess'],2682
"public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 params = new TYPE_1 ( ) ; VAR_3 . put ( STRING_1 , INT_1 ) ; VAR_3 . put ( STRING_2 , VAR_4 ) ; METHOD_2 ( params , true ) ; return true ; }","public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 params = new TYPE_1 ( ) ; VAR_3 . put ( STRING_1 , INT_1 ) ; VAR_3 . put ( STRING_2 , VAR_4 ) ; METHOD_2 ( params ) ; return true ; }",['Delete Literal'],2683
public void METHOD_1 ( ) { throw new TYPE_1 ( STRING_1 ) ; },public void METHOD_1 ( ) { throw new java.lang.NullPointerException ( STRING_1 ) ; },['Update ConstructorCall'],2684
"public boolean contains ( TYPE_1 p ) { return contains ( VAR_1 . x , VAR_1 . y ) ; }","public boolean contains ( TYPE_1 p ) { return contains ( ( ( float ) ( VAR_1 . x ) ) , ( ( float ) ( VAR_1 . y ) ) ) ; }","['Insert TypeReference', 'Insert TypeReference']",2686
"protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( VAR_1 class , VAR_2 ) ; VAR_3 . METHOD_2 ( true ) ; }","protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( VAR_1 class , VAR_2 ) ; VAR_3 . METHOD_2 ( false ) ; }",['Update Literal'],2687
"public double METHOD_1 ( int VAR_1 , int VAR_2 ) { return TYPE_1 . METHOD_2 ( ( ( VAR_1 * VAR_1 ) + ( VAR_2 * VAR_2 ) ) ) ; }","private double METHOD_1 ( int VAR_1 , int VAR_2 ) { return TYPE_1 . METHOD_2 ( ( ( VAR_1 * VAR_1 ) + ( VAR_2 * VAR_2 ) ) ) ; }",['Update Wra'],2689
"public java.lang.String METHOD_1 ( int VAR_1 ) { return new TYPE_1 ( null , VAR_1 ) . toString ( ) ; }",public java.lang.String METHOD_1 ( int VAR_1 ) { return new TYPE_1 ( VAR_1 ) . toString ( ) ; },"['Update ConstructorCall', 'Delete Literal']",2690
"public void METHOD_1 ( int VAR_1 ) { java.util.ArrayList < TYPE_1 > temp = VAR_2 . get ( VAR_1 ) ; VAR_3 . add ( VAR_4 . get ( 0 ) ) ; VAR_4 . remove ( 0 ) ; VAR_2 . set ( VAR_1 , temp ) ; }","public void METHOD_1 ( int VAR_1 ) { java.util.ArrayList < TYPE_1 > temp = VAR_2 . get ( VAR_1 ) ; VAR_3 . add ( VAR_4 . get ( 0 ) ) ; VAR_4 . remove ( 0 ) ; VAR_2 . replace ( VAR_1 , temp ) ; }",['Update Invocation'],2691
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 values = new TYPE_1 ( ) ; VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . put ( VAR_4 , VAR_5 . getName ( ) ) ; return values ; }","private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 values = new TYPE_1 ( ) ; VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . put ( VAR_4 , VAR_1 . METHOD_2 ( ) ) ; return values ; }","['Update Invocation', 'Insert VariableRead', 'Delete TypeAccess']",2692
public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } },public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( ) ; } },"['Delete VariableRead', 'Delete Invocation']",2693
"private boolean METHOD_1 ( float VAR_1 , boolean VAR_2 , boolean VAR_3 ) { if ( VAR_2 ) return VAR_1 >= 0 ; else return ( ! VAR_3 ) || ( VAR_1 <= 0 ) ; }","private boolean METHOD_1 ( float VAR_1 , boolean VAR_2 , boolean VAR_3 ) { if ( VAR_2 ) return VAR_1 > 0 ; else return ( ! VAR_3 ) || ( VAR_1 < 0 ) ; }","['Update BinaryOperator', 'Update BinaryOperator']",2694
private static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( INT_1 ) ; VAR_1 . METHOD_3 ( true ) ; return VAR_1 ; },private static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( INT_1 ) ; return VAR_1 ; },"['Delete VariableRead', 'Delete Literal', 'Delete Invocation']",2695
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; java.util.List < TYPE_2 > results = VAR_2 . query ( VAR_1 ) ; org.testng.Assert.assertEquals ( VAR_3 . size ( ) , 1 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; java.util.List < TYPE_2 > results = VAR_2 . query ( VAR_1 ) ; assertEquals ( VAR_3 . size ( ) , 1 ) ; }",['Delete FieldRead'],2696
public void METHOD_1 ( ) { VAR_1 . assertThat ( TYPE_1 . METHOD_2 ( STRING_1 ) ) . METHOD_3 ( STRING_1 ) ; },public void METHOD_1 ( ) { assertThat ( TYPE_1 . METHOD_2 ( STRING_1 ) ) . METHOD_3 ( STRING_1 ) ; },['Update TypeAccess'],2697
"public void METHOD_1 ( android.view.View view , long VAR_1 ) { TYPE_1 . METHOD_2 ( getActivity ( ) , VAR_1 ) ; }","public void METHOD_1 ( android.view.View view , long VAR_1 ) { TYPE_1 . METHOD_2 ( getContext ( ) , VAR_1 ) ; }",['Update Invocation'],2699
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 . assertNotNull ( VAR_1 ) ; },"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 . assertNotNull ( VAR_1 ) ; org.testng.Assert.assertEquals ( TYPE_1 . METHOD_2 ( ) , VAR_1 ) ; }","['Insert Invocation', 'Insert FieldRead', 'Insert Invocation', 'Insert VariableRead', 'Insert TypeAccess']",2700
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_4 = new TYPE_4 ( this ) ; return VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_4 = new TYPE_4 ( ) ; return VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; }","['Update ConstructorCall', 'Delete ThisAccess']",2701
"public final int getInt ( java.lang.String VAR_1 , int VAR_2 ) { java.lang.String VAR_3 = this . getString ( VAR_1 ) ; return TYPE_1 . METHOD_1 ( VAR_3 , VAR_2 ) ; }","protected final int getInt ( java.lang.String VAR_1 , int VAR_2 ) { java.lang.String VAR_3 = this . getString ( VAR_1 ) ; return TYPE_1 . METHOD_1 ( VAR_3 , VAR_2 ) ; }",['Update Wra'],2702
public TYPE_1 METHOD_1 ( final int VAR_1 ) { if ( ( VAR_1 < 1 ) || ( VAR_1 > ( VAR_2 ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } this . VAR_3 . METHOD_2 ( VAR_1 ) ; return this ; },public TYPE_1 METHOD_1 ( final int VAR_1 ) { if ( ( VAR_1 < 1 ) && ( VAR_1 > ( VAR_2 ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } this . VAR_3 . METHOD_2 ( VAR_1 ) ; return this ; },['Update BinaryOperator'],2703
private static boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_1 . METHOD_2 ( 0 ) ) == CHAR_1 ; },public static boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_1 . METHOD_2 ( 0 ) ) == CHAR_1 ; },['Update Wra'],2704
"public java.lang.Boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return true ; }","public java.lang.Boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return false ; }",['Update Literal'],2705
protected void METHOD_1 ( TYPE_1 VAR_1 ) { throw new TYPE_2 ( STRING_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { throw new TYPE_2 ( ) ; },['Delete FieldRead'],2706
private int METHOD_1 ( int i ) { return INT_1 + i ; },private int METHOD_1 ( ) { return INT_1 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete BinaryOperator']",2709
private TYPE_1 METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { this . VAR_1 = new TYPE_2 ( new TYPE_3 ( new TYPE_4 ( VAR_2 ) ) ) ; } return this . VAR_1 ; },private TYPE_1 METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { this . VAR_1 = new TYPE_2 ( new TYPE_3 ( this . VAR_2 ) ) ; } return this . VAR_1 ; },"['Update ConstructorCall', 'Update ConstructorCall', 'Insert FieldRead', 'Insert ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall']",2710
"public static void METHOD_1 ( TYPE_1 VAR_1 , int id ) throws TYPE_2 { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( 1 , id ) ; VAR_3 . execute ( ) ; new TYPE_4 ( ) . METHOD_4 ( VAR_1 ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , int id ) throws TYPE_2 { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( 1 , id ) ; VAR_3 . execute ( ) ; }","['Delete ConstructorCall', 'Delete VariableRead', 'Delete Invocation']",2711
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < > ( ) ; } return VAR_1 ; },public java.util.Collection < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashSet < > ( ) ; } return VAR_1 ; },"['Update TypeReference', 'Update ConstructorCall']",2712
"public TYPE_1 METHOD_1 ( java.lang.Object id ) { return VAR_1 . METHOD_1 ( VAR_2 class , VAR_3 . toString ( ) ) ; }","public TYPE_1 METHOD_1 ( java.lang.Object id ) { return VAR_1 . METHOD_1 ( VAR_2 class , id ) ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2713
public < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return VAR_1 ; },public < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return null ; },"['Insert Literal', 'Delete VariableRead']",2714
"private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 status ) { try { VAR_1 . METHOD_2 ( status ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_2 ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 status ) { try { VAR_1 . METHOD_2 ( status ) ; } catch ( java.io.IOException VAR_2 ) { VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_2 ) ; } }",['Update TypeReference'],2715
"public TYPE_1 get ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_2 . isEmpty ( ) ) ) return null ; return METHOD_1 ( METHOD_2 ( ) , VAR_1 ) ; }","public TYPE_1 get ( java.lang.String VAR_1 ) { return METHOD_1 ( METHOD_2 ( ) , VAR_1 ) ; }","['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2717
"protected boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Integer VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) ) && ( VAR_2 != ( VAR_3 ) ) ) { VAR_4 . METHOD_3 ( ) ; return true ; } return false ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Integer VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) ) && ( VAR_2 != ( VAR_3 ) ) ) { VAR_4 . METHOD_3 ( ) ; } }","['Update TypeReference', 'Delete Literal', 'Delete Return', 'Delete Literal', 'Delete Return']",2718
protected java.util.List < TYPE_1 > METHOD_1 ( ) { final java.util.List < TYPE_1 > VAR_1 = super . METHOD_1 ( ) ; TYPE_2 . METHOD_2 ( new java.util.LinkedList < TYPE_1 > ( VAR_1 ) ) ; return VAR_1 ; },protected java.util.List < TYPE_1 > METHOD_1 ( ) { final java.util.List < TYPE_1 > VAR_1 = super . METHOD_1 ( ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; return VAR_1 ; },"['Move VariableRead', 'Delete ConstructorCall']",2719
"public static TYPE_1 METHOD_1 ( final java.util.List < TYPE_2 > VAR_1 ) { return new TYPE_1 ( VAR_1 , null , null ) ; }","public static TYPE_1 METHOD_1 ( final java.util.List < TYPE_2 > VAR_1 ) { return new TYPE_1 ( VAR_1 , null ) ; }",['Delete Literal'],2720
"private void METHOD_1 ( TYPE_1 event , java.lang.Boolean VAR_1 ) { METHOD_1 ( event , ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) , VAR_1 ) ; }","private void METHOD_1 ( TYPE_1 event ) { METHOD_1 ( event , ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2721
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 ) ; }",public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_1 . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2722
"private java.util.ArrayList < TYPE_1 < TYPE_2 > > METHOD_1 ( java.util.ArrayList < TYPE_1 < TYPE_2 > > VAR_1 , int num ) { return VAR_2 . METHOD_1 ( VAR_1 , num ) ; }",private java.util.ArrayList < TYPE_1 < TYPE_2 > > METHOD_1 ( java.util.ArrayList < TYPE_1 < TYPE_2 > > VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2723
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 , 1 ) ; return VAR_2 . METHOD_3 ( VAR_3 . getId ( ) , 1 ) ; }",public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return VAR_2 . METHOD_3 ( VAR_3 . getId ( ) ) ; },"['Delete Literal', 'Delete Literal']",2725
public boolean METHOD_1 ( java.lang.Object key ) { return VAR_1 . METHOD_1 ( new TYPE_1 ( ( ( TYPE_2 ) ( key ) ) ) ) ; },public boolean METHOD_1 ( java.lang.Object key ) { return VAR_1 . METHOD_1 ( key ) ; },"['Insert VariableRead', 'Delete TypeReference', 'Delete VariableRead', 'Delete ConstructorCall']",2726
"public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , boolean VAR_2 ) ;",public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",2727
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( VAR_1 ) ; },private void METHOD_1 ( ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2728
"public boolean METHOD_1 ( TYPE_1 x ) { METHOD_2 ( x , true ) ; return false ; }",public boolean METHOD_1 ( TYPE_1 x ) { METHOD_2 ( x ) ; return false ; },['Delete Literal'],2729
private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_3 = METHOD_2 ( false ) ; VAR_4 = METHOD_3 ( ) ; if ( ! ( VAR_1 . METHOD_4 ( ) ) ) VAR_1 = null ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_3 = METHOD_2 ( false ) ; VAR_4 = METHOD_3 ( ) ; if ( ! ( VAR_1 . METHOD_4 ( ) ) ) VAR_1 = null ; return VAR_1 ; },['Update Wra'],2730
"public TYPE_1 METHOD_1 ( int id ) { TYPE_1 result ; try { result = VAR_1 . METHOD_2 ( VAR_2 class , id ) ; } catch ( TYPE_2 VAR_3 ) { return null ; } return result ; }","public TYPE_1 METHOD_1 ( int id ) { TYPE_1 result = null ; try { result = VAR_1 . METHOD_2 ( VAR_2 class , id ) ; } catch ( TYPE_2 VAR_3 ) { return null ; } return result ; }",['Insert Literal'],2731
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String name ) { return METHOD_2 ( name ) ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String name ) { return this . METHOD_2 ( name ) ; }",['Insert ThisAccess'],2732
public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 + ( METHOD_2 ( ) ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",2733
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 < java.lang.String > result = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ) ; this . VAR_2 . METHOD_3 ( VAR_1 ) ; return result ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 < java.lang.String > result = new TYPE_1 ( ) ; this . VAR_2 . METHOD_3 ( VAR_1 ) ; return result ; },"['Delete VariableRead', 'Delete Invocation']",2734
"public static java.lang.String METHOD_1 ( java.lang.String filePath ) throws java.io.IOException , TYPE_1 { java.io.InputStream VAR_1 = VAR_2 class . METHOD_2 ( ) . METHOD_3 ( filePath ) ; return VAR_3 . toString ( VAR_1 , STRING_1 ) ; }","public static java.lang.String METHOD_1 ( java.lang.String filePath ) throws java.io.IOException , TYPE_1 { java.io.InputStream VAR_1 = VAR_2 class . METHOD_2 ( ) . METHOD_3 ( filePath ) ; return VAR_3 . toString ( VAR_1 ) ; }",['Delete TypeAccess'],2735
public void update ( TYPE_1 type ) { if ( VAR_1 . equals ( VAR_2 ) ) { if ( METHOD_1 ( ) ) { getView ( ) . METHOD_2 ( ) ; } } },public void update ( TYPE_1 type ) { if ( VAR_1 . equals ( VAR_2 ) ) { if ( METHOD_1 ( ) ) { getView ( ) . METHOD_2 ( ) ; } else { } } },['Insert Block'],2736
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < > ( ) ; VAR_2 = new TYPE_1 < > ( ) ; },public void METHOD_1 ( ) { VAR_1 = new java.util.ArrayList < > ( ) ; VAR_2 = new java.util.ArrayList < > ( ) ; },"['Update ConstructorCall', 'Update ConstructorCall']",2738
public java.lang.String METHOD_1 ( ) { VAR_1 = null ; VAR_2 = null ; return STRING_1 ; },public java.lang.String METHOD_1 ( ) { VAR_1 = null ; VAR_2 = null ; return null ; },"['Insert Literal', 'Delete FieldRead']",2739
final java.lang.String METHOD_1 ( ) { return getString ( ) . toLowerCase ( VAR_1 ) ; },final java.lang.String METHOD_1 ( ) { return getString ( ) . toLowerCase ( ) ; },['Delete TypeAccess'],2740
"public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { context . METHOD_2 ( VAR_1 ) ; context . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_3 ( VAR_3 , STRING_1 ) ; TYPE_2 . METHOD_4 ( context , false ) ; }","public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { context . METHOD_2 ( VAR_1 ) ; context . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_3 ( VAR_3 , STRING_1 ) ; TYPE_2 . METHOD_4 ( context ) ; }",['Delete Literal'],2741
public TYPE_1 METHOD_1 ( TYPE_2 info ) throws java.lang.Exception { VAR_1 . METHOD_2 ( info ) ; return new TYPE_3 ( VAR_2 ) ; },public TYPE_1 METHOD_1 ( TYPE_2 info ) throws java.lang.Exception { VAR_1 . METHOD_2 ( info ) ; return null ; },"['Insert Literal', 'Delete FieldRead', 'Delete ConstructorCall']",2742
"public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( VAR_1 , STRING_1 , STRING_1 , STRING_1 , STRING_1 , STRING_1 , STRING_1 ) ; }","public void METHOD_1 ( ) { this . METHOD_1 ( STRING_1 , STRING_1 , STRING_1 , STRING_1 , STRING_1 , STRING_1 ) ; }","['Move TypeAccess', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2743
"public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { return VAR_1 == VAR_2 ? VAR_3 [ 1 ] : VAR_3 [ 0 ] ; }","public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { return VAR_1 == 1 ? VAR_3 [ 1 ] : VAR_3 [ 0 ] ; }","['Insert Literal', 'Delete VariableRead']",2744
public void METHOD_1 ( TYPE_1 < java.lang.Object > response ) { super . METHOD_1 ( response ) ; VAR_1 = TYPE_2 . METHOD_2 ( response . METHOD_3 ( INT_1 ) ) ; },public void METHOD_1 ( TYPE_1 < java.lang.Object > response ) { super . METHOD_1 ( response ) ; VAR_1 = TYPE_2 . METHOD_2 ( response ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2745
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , android.content.Intent data ) { if ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_3 , data ) ) { return ; } }","public void METHOD_1 ( int VAR_2 , int VAR_3 , android.content.Intent data ) { if ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_3 , data ) ) { return ; } }","['Delete TypeReference', 'Delete Parameter']",2746
"TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String token , int VAR_1 , TYPE_3 VAR_2 ) ;","TYPE_1 < java.lang.Void > METHOD_1 ( java.lang.String token , int VAR_1 , java.lang.String name ) ;","['Update Parameter', 'Update TypeReference', 'Update TypeReference']",2747
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; METHOD_3 ( ) ; super . METHOD_1 ( ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; super . METHOD_1 ( ) ; }",['Delete Invocation'],2748
"public java.lang.Void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( name , METHOD_3 ( VAR_1 , ( STRING_1 + name ) ) , true ) ; return null ; }","public java.lang.Void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( name , METHOD_3 ( VAR_1 , ( STRING_1 + name ) ) ) ; return null ; }",['Delete Literal'],2749
"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2750
"private static void METHOD_1 ( TYPE_1 handle , TYPE_2 VAR_1 ) throws TYPE_3 { VAR_2 = TYPE_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_3 ) , 0 ) ; VAR_4 = TYPE_4 . METHOD_2 ( TYPE_4 . METHOD_4 ( VAR_3 ) , 1 ) ; }","private static void METHOD_1 ( TYPE_1 handle , TYPE_2 VAR_1 ) throws TYPE_3 { VAR_2 = TYPE_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ; VAR_4 = TYPE_4 . METHOD_2 ( TYPE_4 . METHOD_4 ( VAR_3 ) ) ; }","['Delete Literal', 'Delete Literal']",2752
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 values = TYPE_3 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 , null , values ) ; }","public void METHOD_1 ( TYPE_1 c ) { TYPE_2 values = TYPE_3 . METHOD_2 ( c ) ; VAR_2 . METHOD_3 ( VAR_3 , null , values ) ; }","['Update Parameter', 'Update VariableRead']",2753
public static java.lang.Double METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) return null ; try { return new java.lang.Double ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ; } catch ( TYPE_2 VAR_2 ) { return null ; } },public static java.lang.Double METHOD_1 ( java.lang.String VAR_1 ) { try { return new java.lang.Double ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ; } catch ( TYPE_2 VAR_2 ) { return null ; } },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2754
"boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String url , java.lang.String method ) ;",boolean METHOD_1 ( java.lang.String VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",2755
public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; METHOD_2 ( ) ; },public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; METHOD_2 ( ) ; },['Delete ThisAccess'],2756
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 ) ; assertEquals ( true , ( VAR_1 instanceof TYPE_1 ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) ; assertEquals ( true , ( VAR_1 instanceof TYPE_1 ) ) ; }",['Delete FieldRead'],2757
"private void METHOD_1 ( ) { if ( ( java.lang.Integer.parseInt ( VAR_1 ) ) < ( VAR_2 ) ) TYPE_1 . METHOD_2 ( this , VAR_3 , false ) ; VAR_4 = true ; }","private void METHOD_1 ( ) { if ( ( java.lang.Integer.parseInt ( VAR_1 ) ) >= ( VAR_2 ) ) TYPE_1 . METHOD_2 ( this , VAR_3 , false ) ; VAR_4 = true ; }",['Update BinaryOperator'],2758
public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_1 ( ) ; },public void METHOD_1 ( ) { },"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2762
protected final void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; this . METHOD_3 ( ) ; },protected final void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; this . METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Parameter']",2763
"public void METHOD_1 ( TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 ) { this . VAR_1 = VAR_1 ; }","protected void METHOD_1 ( TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 ) { this . VAR_1 = VAR_1 ; }",['Update Wra'],2764
"protected void init ( android.content.Context context , TYPE_1 VAR_1 ) { TYPE_2 . METHOD_1 ( this ) ; TYPE_3 . METHOD_1 ( this ) ; }",private void init ( ) { TYPE_2 . METHOD_1 ( this ) ; TYPE_3 . METHOD_1 ( this ) ; },"['Update Wra', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",2765
private java.lang.String METHOD_1 ( ) { return STRING_1 ; },public java.lang.String METHOD_1 ( ) { return STRING_1 ; },['Update Wra'],2766
"private void METHOD_1 ( android.content.Intent intent ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( false ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( intent , this ) ; } }","private void METHOD_1 ( android.content.Intent intent ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( intent , this ) ; } }",['Delete Literal'],2767
public java.util.Date METHOD_1 ( ) { java.util.Date date ; if ( ( VAR_1 ) != null ) { date = new java.util.Date ( VAR_2 . getTime ( ) ) ; } else { date = METHOD_2 ( ) ; } return date ; },public java.util.Date METHOD_1 ( ) { java.util.Date date = null ; if ( ( VAR_1 ) != null ) { date = new java.util.Date ( VAR_2 . getTime ( ) ) ; } else { date = METHOD_2 ( ) ; } return date ; },['Insert Literal'],2769
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return this . VAR_2 . remove ( VAR_1 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . remove ( VAR_1 ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",2770
"public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 ( ) { public void METHOD_1 ( ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) ; } } } ) ; }",public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 ( ) { public void METHOD_1 ( ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) ; } } } ) ; },['Delete TypeAccess'],2771
public synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_1 ( ) ; java.lang.System.out.println ( STRING_1 ) ; } },public synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_1 ( ) ; } },"['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",2772
"public boolean remove ( java.lang.String element ) { return VAR_1 . remove ( element , 0 ) ; }","public boolean remove ( java.lang.String element ) { return VAR_1 . contains ( element , 0 ) ; }",['Update Invocation'],2773
"public static int METHOD_1 ( byte [ ] VAR_1 , byte [ ] VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; return VAR_4 . METHOD_3 ( VAR_1 , VAR_2 ) ; }","public static int METHOD_1 ( byte [ ] VAR_1 , byte [ ] VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_4 . METHOD_3 ( VAR_1 , VAR_2 ) ; }",['Update VariableRead'],2774
"public TYPE_1 get ( ) { return ( ( TYPE_1 ) ( METHOD_1 ( ) . get ( VAR_1 class , new java.lang.Long ( 0 ) ) ) ) ; }","public TYPE_1 get ( ) { return ( ( TYPE_1 ) ( METHOD_1 ( ) . get ( VAR_1 class , 0 ) ) ) ; }","['Move Literal', 'Delete ConstructorCall']",2775
private char METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; return VAR_1 . METHOD_3 ( ) [ 0 ] ; },public char METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; return VAR_1 . METHOD_3 ( ) [ 0 ] ; },['Update Wra'],2776
"public TYPE_1 METHOD_1 ( TYPE_2 view , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { return TYPE_5 . METHOD_2 ( new TYPE_6 ( VAR_3 ) , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( android.content.Context context , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { return TYPE_5 . METHOD_2 ( new TYPE_6 ( VAR_3 ) , VAR_2 ) ; }","['Update Parameter', 'Update TypeReference']",2777
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_2 . add ( ( ( TYPE_3 ) ( VAR_1 ) ) ) ; return this ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_2 . add ( VAR_1 ) ; return this ; },['Delete TypeReference'],2778
"public void METHOD_1 ( java.lang.String ... VAR_1 ) { METHOD_1 ( java.util.Arrays.asList ( VAR_2 ) , VAR_1 ) ; }",public void METHOD_1 ( java.lang.String ... VAR_1 ) { METHOD_1 ( java.util.Arrays.asList ( VAR_2 ) ) ; },['Delete VariableRead'],2779
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_2 ) == null ) { this . VAR_2 = new TYPE_2 < TYPE_1 > ( ) ; } this . VAR_3 . add ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_2 ) == null ) { this . VAR_2 = new java.util.HashSet < TYPE_1 > ( ) ; } this . VAR_3 . add ( VAR_1 ) ; },['Update ConstructorCall'],2780
protected TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) VAR_1 = new TYPE_2 ( ( ( TYPE_3 ) ( METHOD_2 ( ) ) ) ) ; return VAR_1 ; },protected TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) VAR_1 = new TYPE_2 ( METHOD_2 ( ) ) ; return VAR_1 ; },"['Update ConstructorCall', 'Delete TypeReference']",2783
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , false ) ; METHOD_3 ( ) ; }",public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; },['Delete Literal'],2784
"public void METHOD_1 ( ) { VAR_1 . assertEquals ( INT_1 , VAR_2 . METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ) ; }","public void METHOD_1 ( ) { assertEquals ( INT_1 , VAR_2 . METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ) ; }",['Update TypeAccess'],2785
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_2 . METHOD_2 ( ) . open ( ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_2 . METHOD_2 ( ) . open ( ) ; VAR_2 . METHOD_2 ( ) . open ( ) ; return true ; }","['Insert Invocation', 'Insert Invocation', 'Insert VariableRead']",2786
public boolean METHOD_1 ( ) { METHOD_2 ( ) ; return true ; },public boolean METHOD_1 ( ) { return false ; },"['Update Literal', 'Delete Invocation']",2787
"private void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 ) ; }",['Update Wra'],2788
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_1 = VAR_2 . toString ( ) . toLowerCase ( ) ; return this ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; return this ; },"['Update TypeReference', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2789
"public void METHOD_1 ( android.view.View view ) { VAR_1 = true ; METHOD_2 ( VAR_2 , true , VAR_3 , VAR_4 ) ; }","public void METHOD_1 ( android.view.View view ) { VAR_1 = true ; METHOD_2 ( VAR_2 , true , VAR_3 , VAR_4 , 0 ) ; }",['Insert Literal'],2790
"public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , false ) ; }",public TYPE_1 METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete FieldRead', 'Delete Literal', 'Delete ConstructorCall']",2791
"public void METHOD_1 ( byte VAR_1 , long VAR_2 ) { VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( byte VAR_1 , long VAR_2 ) { VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ) ; METHOD_4 ( VAR_2 , VAR_1 ) ; }",['Move VariableRead'],2792
"public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { if ( VAR_1 != null ) { java.util.Map < java.lang.String , java.lang.String > VAR_2 = VAR_3 . get ( null ) ; if ( VAR_2 != null ) VAR_2 . METHOD_2 ( VAR_1 ) ; } }","public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { if ( VAR_1 != null ) { java.util.Map < java.lang.String , java.lang.String > VAR_2 = VAR_3 . get ( ) ; if ( VAR_2 != null ) VAR_2 . METHOD_2 ( VAR_1 ) ; } }",['Delete Literal'],2793
"public void METHOD_1 ( java.lang.String text ) { METHOD_2 ( ) ; METHOD_3 ( text , METHOD_4 ( VAR_1 ) , false ) ; }","public void METHOD_1 ( java.lang.String text ) { METHOD_2 ( ) ; METHOD_3 ( text , METHOD_4 ( VAR_1 ) ) ; }",['Delete Literal'],2794
"public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_2 ) new TYPE_2 ( STRING_1 , null ) . execute ( VAR_1 ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_2 ) new TYPE_2 ( STRING_1 , VAR_1 , null ) . execute ( ) ; }",['Move VariableRead'],2795
"public char [ ] METHOD_1 ( ) { return new char [ ] { CHAR_1 , CHAR_2 , CHAR_3 , CHAR_4 } ; }","public char [ ] METHOD_1 ( ) { return new char [ ] { CHAR_3 , CHAR_4 } ; }","['Delete FieldRead', 'Delete FieldRead']",2796
public java.lang.Boolean METHOD_1 ( ) { return true ; },public java.lang.Boolean METHOD_1 ( ) { return null ; },['Update Literal'],2797
"public void METHOD_1 ( ) { for ( java.lang.Integer VAR_1 : VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 , 1 ) ; } }",public void METHOD_1 ( ) { for ( java.lang.Integer VAR_1 : VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } },['Delete Literal'],2798
"public static void main ( java.lang.String [ ] args ) { VAR_1 = new TYPE_1 ( INT_1 , true ) ; VAR_1 . METHOD_1 ( ) ; VAR_2 = new TYPE_2 ( false ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; }","public static void main ( java.lang.String [ ] args ) { VAR_1 = new TYPE_1 ( INT_1 , true ) ; VAR_1 . METHOD_1 ( ) ; VAR_2 = new TYPE_2 ( true ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; }",['Update Literal'],2799
public TYPE_1 METHOD_1 ( java.lang.Object event ) { try { VAR_1 . METHOD_2 ( ) ; VAR_2 . handle ( TYPE_2 . METHOD_3 ( event ) ) ; } finally { TYPE_3 . METHOD_4 ( ) ; } return VAR_1 ; },public TYPE_1 METHOD_1 ( java.lang.Object event ) { try { VAR_1 . METHOD_2 ( ) ; VAR_2 . handle ( new TYPE_2 < java.lang.Object > ( event ) ) ; } finally { TYPE_3 . METHOD_4 ( ) ; } return VAR_1 ; },"['Insert ConstructorCall', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2801
public static void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_3 = new TYPE_2 ( true ) ; VAR_4 = VAR_3 . METHOD_3 ( VAR_2 ) ; },public static void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_4 = VAR_3 . METHOD_3 ( VAR_2 ) ; },"['Update ConstructorCall', 'Delete Literal']",2802
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 = 0 ; VAR_4 = 1 ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 = 0 ; VAR_4 = 0 ; },['Update Literal'],2805
"public java.util.List < TYPE_1 > METHOD_1 ( ) { final java.util.List < TYPE_1 > VAR_1 ; synchronized ( VAR_2 ) { VAR_1 = new java.util.ArrayList ( VAR_2 ) ; java.util.Collections.sort ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; return TYPE_2 . METHOD_3 ( VAR_1 ) ; } }",public java.util.List < TYPE_1 > METHOD_1 ( ) { final java.util.List < TYPE_1 > VAR_1 ; synchronized ( VAR_2 ) { VAR_1 = new java.util.ArrayList ( VAR_2 ) ; java.util.Collections.sort ( VAR_1 ) ; return TYPE_2 . METHOD_3 ( VAR_1 ) ; } },"['Delete TypeAccess', 'Delete Invocation']",2806
"private static void METHOD_1 ( int operation , long VAR_1 ) { }","private static native void METHOD_1 ( int operation , long VAR_1 ) ;",['Insert Wra'],2807
"public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( 1 ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_4 . assertEquals ( VAR_1 , VAR_3 ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( 0 ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_4 . assertEquals ( VAR_1 , VAR_3 ) ; }",['Update Literal'],2808
protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; },protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return null ; },"['Insert Literal', 'Delete VariableRead', 'Delete ConstructorCall']",2809
"private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( VAR_4 , VAR_5 . METHOD_4 ( ) ) ; VAR_6 . replace ( VAR_7 , VAR_3 , STRING_1 ) . commit ( ) ; }","private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( VAR_4 , VAR_5 . METHOD_4 ( ) ) ; VAR_6 . add ( VAR_7 , VAR_3 , STRING_1 ) . commit ( ) ; }",['Update Invocation'],2810
"void METHOD_1 ( int VAR_1 , android.view.View view ) ;",void METHOD_1 ( int VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",2811
public void METHOD_1 ( java.lang.Void response ) { VAR_1 = true ; VAR_2 = false ; METHOD_2 ( ) ; VAR_3 . METHOD_3 ( new TYPE_1 ( this ) ) ; VAR_4 . METHOD_4 ( true ) ; },public void METHOD_1 ( java.lang.Void response ) { VAR_1 = true ; VAR_2 = false ; METHOD_2 ( ) ; VAR_3 . METHOD_3 ( new TYPE_1 ( this ) ) ; },"['Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",2813
protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 . url ( VAR_1 . METHOD_3 ( ) ) ) ; return VAR_1 ; },private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 . url ( VAR_1 . METHOD_3 ( ) ) ) ; return VAR_1 ; },['Update Wra'],2815
private java.lang.Boolean METHOD_1 ( TYPE_1 message ) { if ( ( message . METHOD_2 ( ) ) == null ) { return false ; } return TYPE_2 . METHOD_3 ( ) . contains ( message . METHOD_2 ( ) . toUpperCase ( ) ) ; },private java.lang.Boolean METHOD_1 ( TYPE_1 message ) { return TYPE_2 . METHOD_3 ( ) . contains ( message . METHOD_2 ( ) . toUpperCase ( ) ) ; },"['Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2816
"public boolean METHOD_1 ( java.lang.String id ) { return VAR_1 . contains ( new TYPE_1 ( STRING_1 , id ) ) ; }",public boolean METHOD_1 ( java.lang.String id ) { return VAR_1 . contains ( id ) ; },"['Move VariableRead', 'Delete FieldRead', 'Delete ConstructorCall']",2817
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; if ( VAR_3 == null ) { return null ; } TYPE_1 response = new TYPE_1 ( VAR_3 ) ; return response ; },private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_1 response = new TYPE_1 ( VAR_3 ) ; return response ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2818
private java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( STRING_1 ) ; java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) . toString ( ) ; java.lang.String VAR_4 = VAR_3 ; return VAR_4 + STRING_2 ; },private java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( STRING_1 ) ; java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) . toString ( ) ; java.lang.String VAR_4 = VAR_3 ; return VAR_4 ; },"['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",2819
public boolean METHOD_1 ( ) { return ( VAR_1 ) > ( METHOD_2 ( ) ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 ) != ( METHOD_2 ( ) ) ; },['Update BinaryOperator'],2820
"public java.util.List < java.lang.String > METHOD_1 ( ) { return java.util.Arrays.asList ( STRING_1 , STRING_2 , STRING_3 ) ; }","public java.util.List < java.lang.String > METHOD_1 ( ) { return java.util.Arrays.asList ( STRING_1 , STRING_3 ) ; }",['Delete TypeAccess'],2821
private boolean METHOD_1 ( TYPE_1 value ) { if ( ( value . METHOD_2 ( ) ) >= 0 ) { return true ; } else { return false ; } },private boolean METHOD_1 ( TYPE_1 value ) { if ( ( value instanceof java.lang.Integer ) && ( ( ( java.lang.Integer ) ( value ) ) >= 0 ) ) { return true ; } return false ; },"['Move Return', 'Update BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Move VariableRead', 'Insert TypeAccess', 'Insert VariableRead', 'Move Literal', 'Insert TypeReference', 'Delete Invocation', 'Delete Block']",2823
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 instanceof TYPE_3 ) { TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_2 ) ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 instanceof TYPE_3 ) { TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_2 ) ) ; VAR_3 . METHOD_3 ( this . VAR_4 ) ; } },"['Insert FieldRead', 'Insert ThisAccess', 'Delete TypeAccess']",2824
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; },['Delete Invocation'],2825
"public void METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 ) throws TYPE_1 { VAR_3 . METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; this . METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 ) throws TYPE_1 { VAR_3 . METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; }",['Delete ThisAccess'],2827
"public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . assertThat ( VAR_2 . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( VAR_1 ) ) ; }","public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . assertThat ( VAR_2 . METHOD_3 ( true ) . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( VAR_1 ) ) ; }","['Insert Literal', 'Delete TypeAccess']",2829
private int METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . contains ( STRING_1 ) ) { return VAR_3 ; } if ( VAR_2 . contains ( STRING_2 ) ) { return VAR_4 ; } return VAR_5 ; },private int METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . contains ( STRING_1 ) ) { return VAR_3 ; } if ( VAR_2 . contains ( STRING_2 ) ) { return VAR_4 ; } return VAR_4 ; },['Update FieldRead'],2831
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 . METHOD_2 ( ) ) { METHOD_3 ( ) ; } TYPE_1 . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 . METHOD_2 ( ) ) { METHOD_3 ( ) ; } TYPE_1 . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( ) ; },['Delete Invocation'],2832
"public void METHOD_1 ( TYPE_1 path , TYPE_2 ... VAR_1 ) throws java.io.IOException { TYPE_3 . METHOD_2 ( path ) . METHOD_3 ( ) . METHOD_1 ( TYPE_3 . METHOD_2 ( path ) , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 path , TYPE_2 ... VAR_1 ) throws java.io.IOException { TYPE_3 . METHOD_2 ( path ) . METHOD_1 ( VAR_1 ) ; }","['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",2833
"public void METHOD_1 ( TYPE_1 response ) { assertThat ( VAR_1 , TYPE_2 . METHOD_2 ( 1 ) ) ; assertThat ( VAR_2 , TYPE_2 . METHOD_2 ( INT_1 ) ) ; }","public void METHOD_1 ( TYPE_1 response ) { assertThat ( VAR_1 , TYPE_2 . METHOD_2 ( 1 ) ) ; assertThat ( VAR_2 , TYPE_2 . METHOD_2 ( 0 ) ) ; }","['Insert Literal', 'Delete TypeAccess']",2834
"public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 ) ; }",['Delete TypeAccess'],2835
public int METHOD_1 ( ) { if ( ( VAR_1 ) != 0 ) { this . VAR_1 = -- ( VAR_1 ) ; } return this . VAR_1 ; },public int METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) { this . VAR_1 = -- ( VAR_1 ) ; } return this . VAR_1 ; },['Update BinaryOperator'],2836
private void METHOD_1 ( ) { METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; },private void METHOD_1 ( ) { METHOD_1 ( VAR_1 . METHOD_2 ( ) . size ( ) ) ; },"['Insert Invocation', 'Move Invocation']",2837
"public int METHOD_1 ( long VAR_1 ) { return METHOD_1 ( VAR_1 , false , false ) ; }","public int METHOD_1 ( long VAR_1 ) { return METHOD_1 ( VAR_1 , false ) ; }",['Delete Literal'],2839
"public java.lang.String [ ] METHOD_1 ( java.lang.String name , int ... VAR_1 ) throws java.io.IOException { return METHOD_1 ( name , 0 , new java.util.ArrayList < java.lang.String > ( ) , false , VAR_1 ) ; }","public java.lang.String [ ] METHOD_1 ( java.lang.String name , int ... VAR_1 ) throws java.io.IOException { return METHOD_1 ( name , 0 , new java.util.ArrayList < java.lang.String > ( ) , VAR_1 ) ; }",['Delete Literal'],2840
"public void METHOD_1 ( ) { this . VAR_1 . open ( INT_1 , 1 ) ; VAR_2 . assertTrue ( STRING_1 , this . VAR_3 . METHOD_2 ( INT_1 , 1 ) ) ; }","public void METHOD_1 ( ) { this . VAR_1 . open ( INT_1 , 1 ) ; assertTrue ( STRING_1 , this . VAR_3 . METHOD_2 ( INT_1 , 1 ) ) ; }",['Update TypeAccess'],2841
"public TYPE_1 METHOD_1 ( final android.content.Context context ) { return new TYPE_1 ( VAR_1 , VAR_2 . getString ( VAR_3 . height ) , context ) ; }","public TYPE_1 METHOD_1 ( final android.content.Context context ) { return new TYPE_1 ( VAR_1 , context ) ; }","['Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",2843
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ( ( STRING_1 + result ) + STRING_2 ) ) ; },['Update FieldRead'],2844
public java.lang.CharSequence METHOD_1 ( int position ) { switch ( position ) { case 0 : return STRING_1 ; case 1 : return STRING_2 ; case INT_1 : return STRING_3 ; } return STRING_4 ; },public java.lang.CharSequence METHOD_1 ( int position ) { switch ( position ) { case 0 : return STRING_4 ; case 1 : return STRING_2 ; case INT_1 : return STRING_3 ; } return STRING_4 ; },['Update FieldRead'],2845
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; return VAR_2 . get ( index ) ; },public java.lang.String METHOD_1 ( int VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; return VAR_2 . get ( index ) ; },['Update TypeReference'],2846
"public static android.content.Intent METHOD_1 ( android.content.Context context , final int VAR_1 ) { android.content.Intent intent = new android.content.Intent ( context , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 , VAR_1 ) ; intent . METHOD_3 ( ( STRING_1 + VAR_1 ) ) ; return intent ; }","public static android.content.Intent METHOD_1 ( android.content.Context context , final int VAR_1 ) { android.content.Intent intent = new android.content.Intent ( context , VAR_2 class ) ; intent . METHOD_2 ( VAR_3 , VAR_1 ) ; return intent ; }","['Delete VariableRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation']",2847
public boolean METHOD_1 ( ) { METHOD_2 ( ) ; view . METHOD_3 ( ) ; return true ; },public boolean METHOD_1 ( ) { METHOD_2 ( ) ; return true ; },"['Delete FieldRead', 'Delete Invocation']",2848
"public void METHOD_1 ( ) { for ( int i = 0 ; i < ( this . METHOD_2 ( ) ) ; i ++ ) this . METHOD_3 ( i , VAR_1 ) ; }","public void METHOD_1 ( ) { for ( int i = 0 ; i < ( this . METHOD_2 ( ) ) ; i ++ ) this . METHOD_3 ( i , null ) ; }","['Insert Literal', 'Delete TypeAccess']",2849
"public TYPE_1 METHOD_1 ( float min , float VAR_1 ) { METHOD_2 ( ) ; final TYPE_1 VAR_2 = new TYPE_1 ( getActivity ( ) ) ; VAR_2 . METHOD_3 ( min ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_2 ; }","public TYPE_1 METHOD_1 ( float min , float VAR_1 ) { METHOD_2 ( ) ; final TYPE_1 VAR_2 = new TYPE_1 ( getContext ( ) ) ; VAR_2 . METHOD_3 ( min ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_2 ; }",['Update Invocation'],2850
"public static TYPE_1 METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( null , new java.util.ArrayList < java.lang.String > ( ) , null ) ) ; }","public static TYPE_1 METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( null , new java.util.ArrayList < java.lang.String > ( ) , null , null ) ) ; }",['Insert Literal'],2851
"private void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String data = new TYPE_1 ( this , getString ( VAR_2 ) , null ) . METHOD_2 ( STRING_1 ) ; }","private void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String data = new TYPE_1 ( this , null , null ) . METHOD_2 ( STRING_1 ) ; }","['Update ConstructorCall', 'Insert Literal', 'Delete TypeAccess', 'Delete Invocation']",2852
public boolean equals ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; return this . VAR_3 . equals ( VAR_4 ) ; },public boolean equals ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; return this . VAR_3 . equals ( VAR_2 ) ; },"['Insert VariableRead', 'Delete TypeAccess']",2853
"private void METHOD_1 ( TYPE_1 response ) { VAR_1 . assertThat ( STRING_1 , response . METHOD_2 ( ) . isEmpty ( ) , TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( true ) ) ) ; }","private void METHOD_1 ( java.lang.String message , TYPE_1 response ) { VAR_1 . assertThat ( message , response . METHOD_2 ( ) . isEmpty ( ) , TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( true ) ) ) ; }","['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead', 'Delete TypeAccess']",2854
public final void METHOD_1 ( final int VAR_1 ) { this . VAR_2 . METHOD_1 ( VAR_1 ) ; },public final void METHOD_1 ( final int VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",2855
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { return new TYPE_1 ( TYPE_3 . METHOD_2 ( getContext ( ) ) . METHOD_3 ( VAR_3 , VAR_1 , false ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { return new TYPE_1 ( TYPE_3 . METHOD_2 ( getContext ( ) ) . METHOD_3 ( VAR_3 , VAR_1 , true ) ) ; }",['Update Literal'],2856
public static TYPE_1 METHOD_1 ( java.lang.String path ) { try { return VAR_1 . get ( VAR_2 class . METHOD_2 ( ) . METHOD_1 ( path ) . METHOD_3 ( ) ) ; } catch ( TYPE_2 VAR_3 ) { throw new TYPE_3 ( VAR_3 ) ; } },public static TYPE_1 METHOD_1 ( java.lang.String path ) { try { return VAR_1 . get ( VAR_2 class . METHOD_1 ( path ) . METHOD_3 ( ) ) ; } catch ( TYPE_2 VAR_3 ) { throw new TYPE_3 ( VAR_3 ) ; } },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Update Invocation', 'Update Invocation', 'Move VariableRead', 'Delete Invocation']",2858
"public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( STRING_1 , 0 , 1 , TYPE_2 . METHOD_1 ( ) ) ; }","public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( 0 , 1 , TYPE_2 . METHOD_1 ( ) ) ; }",['Delete FieldRead'],2859
private void METHOD_1 ( int VAR_1 ) { this . METHOD_2 ( VAR_1 ) . METHOD_3 ( false ) ; },public void METHOD_1 ( int VAR_1 ) { this . METHOD_2 ( VAR_1 ) . METHOD_3 ( false ) ; },['Update Wra'],2860
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) , VAR_3 , VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_2 ) ; }","['Move VariableRead', 'Delete Invocation', 'Delete Invocation']",2861
void METHOD_1 ( ) { this . VAR_1 = new TYPE_1 ( ) ; },void METHOD_1 ( ) { this . VAR_1 = new java.util.Date ( ) ; },['Update ConstructorCall'],2862
"public TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { return METHOD_1 ( VAR_1 , this . VAR_2 ) ; }","public TYPE_1 METHOD_1 ( long VAR_1 ) { return METHOD_1 ( ( ( java.lang.Object ) ( VAR_1 ) ) , true , true ) ; }","['Update TypeReference', 'Insert Literal', 'Insert Literal', 'Insert TypeReference', 'Delete ThisAccess', 'Delete FieldRead']",2863
public static TYPE_1 METHOD_1 ( java.lang.String value ) { return new TYPE_1 ( value ) ; },public TYPE_1 METHOD_1 ( java.lang.String value ) { return new TYPE_1 ( value ) ; },['Delete Wra'],2864
public int METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 ;,public int METHOD_1 ( ) throws TYPE_1 ;,"['Delete TypeReference', 'Delete Parameter']",2865
public void METHOD_1 ( android.view.View VAR_1 ) { ( VAR_2 ) -- ; METHOD_2 ( true ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { ( VAR_2 ) -- ; METHOD_2 ( ) ; },['Delete Literal'],2866
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , true ) ; }",public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; },['Delete Literal'],2867
public void METHOD_1 ( ) { VAR_1 . add ( TYPE_1 . METHOD_2 ( ) ) ; METHOD_3 ( ) ; context . METHOD_4 ( ) ; if ( ( VAR_2 ) != null ) { METHOD_5 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . add ( TYPE_1 . METHOD_2 ( ) ) ; METHOD_3 ( false ) ; context . METHOD_4 ( ) ; if ( ( VAR_2 ) != null ) { METHOD_5 ( ) ; } },['Insert Literal'],2868
public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { event . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( java.util.Set < TYPE_2 > VAR_1 ) { event . METHOD_1 ( VAR_1 ) ; },['Update TypeReference'],2869
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( false ) ; VAR_4 . show ( METHOD_4 ( ) , STRING_1 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . show ( METHOD_4 ( ) , STRING_1 ) ; }","['Delete VariableRead', 'Delete Literal', 'Delete Invocation']",2870
public abstract TYPE_1 < java.lang.String > METHOD_1 ( ) ;,public abstract java.lang.String METHOD_1 ( ) ;,"['Update TypeReference', 'Delete TypeReference']",2871
"public static java.lang.String METHOD_1 ( double VAR_1 , java.lang.String VAR_2 ) { return null ; }",public static java.lang.String METHOD_1 ( double VAR_1 ) { return null ; },"['Delete TypeReference', 'Delete Parameter']",2873
"public static void METHOD_1 ( int content ) { if ( content >= 0 ) TYPE_1 . METHOD_2 ( new java.io.File ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) ) , content ) ; else java.lang.System.err.println ( STRING_3 ) ; }","public static void METHOD_1 ( int content ) { if ( content > 0 ) TYPE_1 . METHOD_2 ( new java.io.File ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) ) , content ) ; else java.lang.System.err.println ( STRING_3 ) ; }",['Update BinaryOperator'],2874
public java.lang.Integer METHOD_1 ( java.lang.String value ) { return java.lang.Integer . METHOD_2 ( value ) ; },public java.lang.Integer METHOD_1 ( java.lang.String value ) { return null ; },"['Insert Literal', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2875
private boolean METHOD_1 ( float VAR_1 ) { return ( ( this . METHOD_2 ( VAR_1 ) ) == false ) && ( ( this . METHOD_3 ( VAR_1 ) ) == false ) ; },private boolean METHOD_1 ( float VAR_1 ) { return ( ( this . METHOD_2 ( ) ) == false ) && ( ( this . METHOD_3 ( ) ) == false ) ; },"['Delete VariableRead', 'Delete VariableRead']",2876
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { METHOD_3 ( VAR_1 ) ; } },"['Delete VariableRead', 'Delete Invocation']",2877
public java.lang.String METHOD_1 ( ) { return ( target . METHOD_2 ( VAR_1 ) ) && ( target . METHOD_3 ( ) ) ? TYPE_1 . METHOD_4 ( ) : null ; },public java.lang.String METHOD_1 ( ) { return ( target . METHOD_2 ( VAR_1 ) ) && ( this . target . METHOD_3 ( ) ) ? TYPE_1 . METHOD_4 ( ) : null ; },['Insert ThisAccess'],2878
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = ( ( ( STRING_1 + ( VAR_3 . toLowerCase ( ) ) ) + STRING_2 ) + VAR_1 ) + STRING_3 ; return VAR_2 ; },private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_1 ) + STRING_3 ; return VAR_2 ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2879
"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { VAR_2 . METHOD_2 ( position ) ; VAR_3 . setText ( STRING_1 ) ; }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int position , long id ) { VAR_3 . setText ( STRING_1 ) ; }","['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2880
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( this , VAR_1 , STRING_1 ) ; TYPE_2 . METHOD_3 ( this , intent , VAR_3 . METHOD_4 ( ) ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( this , VAR_1 , STRING_1 ) ; METHOD_3 ( intent , VAR_3 . METHOD_4 ( ) ) ; }","['Delete TypeAccess', 'Delete ThisAccess']",2881
public static boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return false ; } java.lang.String VAR_2 = VAR_3 . toLowerCase ( ) ; return ( VAR_4 . contains ( STRING_1 ) ) || ( VAR_4 . contains ( STRING_2 ) ) ; },public static boolean METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_3 . toLowerCase ( ) ; return ( VAR_4 . contains ( STRING_1 ) ) || ( VAR_4 . contains ( STRING_2 ) ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2882
long METHOD_1 ( TYPE_1 VAR_1 ) ;,void METHOD_1 ( TYPE_1 VAR_1 ) ;,['Update TypeReference'],2883
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; VAR_3 . assertEquals ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 class ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; }","['Update TypeAccess', 'Update TypeAccess']",2884
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( METHOD_6 ( ) ) ; return VAR_1 ; },protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( METHOD_6 ( ) ) ; return VAR_1 ; },['Update Wra'],2885
public int METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { return VAR_1 . METHOD_2 ( ) . METHOD_1 ( ) ; } return 1 ; },public int METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { return VAR_1 . METHOD_2 ( ) . METHOD_1 ( ) ; } return 0 ; },['Update Literal'],2886
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; java.lang.System.out.print ( VAR_1 . METHOD_3 ( this . METHOD_4 ( ) ) ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; java.lang.System.out.println ( VAR_1 . METHOD_3 ( this . METHOD_4 ( ) ) ) ; },['Update Invocation'],2887
"public static int METHOD_1 ( int a , int b ) { if ( a > INT_1 ) { return a + b ; } else { return a - b ; } }","public static int METHOD_1 ( int a , int b ) { if ( a < INT_1 ) { return a + b ; } else { return a - b ; } }",['Update BinaryOperator'],2888
public boolean METHOD_1 ( ) { if ( ( ( this . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) + 1 ) >= ( ( VAR_1 ) / INT_1 ) ) return true ; else return false ; },public boolean METHOD_1 ( ) { if ( ( ( this . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) + 1 ) >= ( ( VAR_1 ) - 1 ) ) return true ; else return false ; },"['Update BinaryOperator', 'Insert Literal', 'Delete FieldRead']",2890
public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; },public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; },['Delete Invocation'],2891
"void METHOD_1 ( boolean VAR_1 , int index ) ;",void METHOD_1 ( int index ) ;,"['Delete TypeReference', 'Delete Parameter']",2892
"public static int METHOD_1 ( ) { final TYPE_1 query = TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 , false ) ; final java.lang.Long num = ( ( java.lang.Long ) ( query . METHOD_3 ( ) ) ) ; return VAR_2 . intValue ( ) ; }","public static int METHOD_1 ( ) { final TYPE_1 query = TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 , true ) ; final java.lang.Long num = ( ( java.lang.Long ) ( query . METHOD_3 ( ) ) ) ; return VAR_2 . intValue ( ) ; }",['Update Literal'],2893
"public TYPE_1 METHOD_1 ( int id , java.lang.Object VAR_1 ) ;",public TYPE_1 METHOD_1 ( int id ) ;,"['Delete TypeReference', 'Delete Parameter']",2894
"private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 , null , false ) ; }","private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 , null ) ; }",['Delete Literal'],2896
"java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) ;",java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",2897
private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) VAR_1 = ( VAR_2 . length ) - 1 ; else ( VAR_1 ) -- ; METHOD_2 ( 0 ) ; METHOD_3 ( ) ; },private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) VAR_1 = ( VAR_2 . length ) - 1 ; else ( VAR_1 ) -- ; METHOD_3 ( ) ; },"['Delete Literal', 'Delete Invocation']",2898
"public boolean METHOD_1 ( final int index , final TYPE_1 item ) { VAR_1 . METHOD_2 ( VAR_2 ) ; return true ; }","public boolean METHOD_1 ( final int index , final TYPE_1 item ) { VAR_1 . METHOD_2 ( p ) ; return true ; }","['Insert FieldRead', 'Delete TypeAccess']",2899
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( getActivity ( ) ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; },['Insert Invocation'],2901
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( true ) ) ) ; return ( ( TYPE_1 ) ( VAR_1 . METHOD_5 ( STRING_1 ) ) ) ; },private TYPE_1 METHOD_1 ( TYPE_3 context ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( context . METHOD_3 ( ) . METHOD_4 ( true ) ) ) ; return ( ( TYPE_1 ) ( VAR_1 . METHOD_5 ( STRING_1 ) ) ) ; },"['Insert Parameter', 'Update Wra', 'Insert TypeReference', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2902
"public void METHOD_1 ( ) { VAR_1 . assertEquals ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) , TYPE_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) . METHOD_4 ( ) . toString ( ) ) ; }","public void METHOD_1 ( ) { assertEquals ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) , TYPE_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) . METHOD_4 ( ) . toString ( ) ) ; }",['Update TypeAccess'],2903
public void METHOD_1 ( final TYPE_1 [ ] VAR_1 ) { this . VAR_1 = VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( final TYPE_1 [ ] VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move VariableRead', 'Delete Invocation']",2904
"protected boolean METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return ( TYPE_1 . METHOD_2 ( getValue ( ) , java.util.Arrays.asList ( VAR_1 . METHOD_3 ( ) ) ) ) == false ; } return false ; }","protected boolean METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { return ( TYPE_1 . METHOD_2 ( getValue ( ) , java.util.Arrays.asList ( this . VAR_1 . METHOD_3 ( ) ) ) ) == false ; } return false ; }","['Insert ThisAccess', 'Insert FieldRead', 'Insert ThisAccess', 'Delete TypeAccess']",2905
"public void METHOD_1 ( int index , TYPE_1 element ) { METHOD_2 ( index ) ; if ( index == 1 ) METHOD_3 ( element ) ; else METHOD_4 ( element , node ( ( index - 1 ) ) ) ; }","public void METHOD_1 ( int index , TYPE_1 element ) { METHOD_2 ( index ) ; if ( index == 1 ) METHOD_3 ( element ) ; else METHOD_4 ( element , node ( index ) ) ; }","['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",2906
"public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( context , STRING_1 , STRING_2 , new TYPE_2 ( ) { public void METHOD_3 ( ) { TYPE_3 . METHOD_4 ( context , STRING_3 ) ; } } ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( context , STRING_1 , STRING_2 , true , new TYPE_2 ( ) { public void METHOD_3 ( ) { TYPE_3 . METHOD_4 ( context , STRING_3 ) ; } } ) ; }",['Insert Literal'],2907
"public void METHOD_1 ( int VAR_1 , int height ) { super . METHOD_1 ( VAR_1 , height ) ; VAR_2 . info ( STRING_1 , VAR_1 , height ) ; METHOD_2 ( VAR_1 , height ) ; }","public void METHOD_1 ( int VAR_1 , int height ) { super . METHOD_1 ( VAR_1 , height ) ; VAR_2 . info ( STRING_1 , VAR_1 , height ) ; METHOD_2 ( ) ; }","['Delete VariableRead', 'Delete VariableRead']",2908
"public void METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 , double VAR_3 , double VAR_4 , double VAR_5 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_4 , VAR_5 ) ; VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 , double VAR_3 , double VAR_4 , double VAR_5 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_5 , VAR_4 ) ; VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 , VAR_2 ) ; }","['Move VariableRead', 'Move VariableRead']",2909
private void METHOD_1 ( int value ) { VAR_1 = value ; },private void METHOD_1 ( int value ) { VAR_1 = value + 1 ; },"['Insert BinaryOperator', 'Move VariableRead', 'Insert Literal']",2910
protected static void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; },protected void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; },['Delete Wra'],2911
"public java.lang.Object get ( java.lang.Object key ) { TYPE_1 VAR_1 = METHOD_1 ( ) ; java.lang.Object value = VAR_2 . get ( VAR_1 , ( ( java.lang.String ) ( key ) ) ) ; VAR_1 . METHOD_2 ( ) ; return value ; }","public java.lang.Object get ( java.lang.Object key ) { TYPE_1 VAR_1 = this . METHOD_1 ( ) ; java.lang.Object value = VAR_2 . get ( VAR_1 , ( ( java.lang.String ) ( key ) ) ) ; VAR_1 . METHOD_2 ( ) ; return value ; }",['Insert ThisAccess'],2912
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; },private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_5 ( ) ; },"['Delete VariableRead', 'Delete Invocation']",2913
"public TYPE_1 METHOD_1 ( final TYPE_2 < TYPE_3 , TYPE_4 > VAR_1 ) { return VAR_1 ; }","public TYPE_1 METHOD_1 ( final TYPE_2 < TYPE_3 , TYPE_4 > VAR_1 ) { return null ; }","['Insert Literal', 'Delete VariableRead']",2915
public void METHOD_1 ( java.lang.Object ... args ) ;,public void METHOD_1 ( ) ;,['Delete Parameter'],2916
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( METHOD_2 ( ) ) METHOD_3 ( null ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( METHOD_2 ( ) ) METHOD_3 ( ) ; },['Delete Literal'],2917
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_2 . toLowerCase ( ) ; return this ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; return this ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2918
"protected TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( ) { return new TYPE_4 ( VAR_1 . size ( ) ) ; }","protected TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( ) { return new TYPE_4 < TYPE_2 , TYPE_3 > ( size ( ) ) ; }",['Update TypeAccess'],2919
"public long METHOD_1 ( int VAR_1 , int VAR_2 ) { return VAR_2 ; }","public long METHOD_1 ( int VAR_1 , int VAR_2 ) { return 0 ; }","['Insert Literal', 'Delete VariableRead']",2920
"public static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; TYPE_2 . METHOD_5 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_6 ( ) . METHOD_7 ( STRING_1 ) ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; TYPE_2 . METHOD_5 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }",['Delete TypeAccess'],2922
"public java.util.Calendar METHOD_1 ( ) { if ( ! ( VAR_1 ) ) return null ; while ( ! ( VAR_2 . contains ( VAR_3 . get ( VAR_4 ) ) ) ) { VAR_3 . add ( VAR_5 , 1 ) ; } return VAR_6 ; }","public java.util.Calendar METHOD_1 ( ) { if ( ! ( VAR_1 ) ) return null ; while ( ! ( VAR_2 . contains ( VAR_3 . get ( VAR_4 ) ) ) ) { VAR_3 . add ( VAR_4 , 1 ) ; } return VAR_6 ; }",['Update TypeAccess'],2923
public boolean METHOD_1 ( TYPE_1 end ) { return ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) >= ( end . METHOD_4 ( ) ) ; },public boolean METHOD_1 ( TYPE_1 end ) { return ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . compareTo ( end ) ) >= 0 ; },"['Update Invocation', 'Insert Literal', 'Move VariableRead', 'Delete Invocation']",2925
private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) . contains ( STRING_1 ) ) { return true ; } return true ; },private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return true ; } return true ; },"['Insert BinaryOperator', 'Move VariableRead', 'Insert Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2926
"public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Integer VAR_1 ) { return VAR_2 . METHOD_2 ( STRING_1 , VAR_3 class ) . METHOD_3 ( STRING_2 , VAR_1 ) . METHOD_4 ( ) ; }","public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Integer VAR_1 ) { return VAR_2 . METHOD_2 ( STRING_1 , VAR_3 class ) . METHOD_4 ( ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2927
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.Object VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; },['Update TypeReference'],2928
public void METHOD_1 ( ) { for ( int p = 0 ; p < ( VAR_1 . size ( ) ) ; p ++ ) { TYPE_1 VAR_2 = VAR_1 . get ( p ) ; VAR_2 . METHOD_1 ( false ) ; } },public void METHOD_1 ( ) { for ( int p = 0 ; p < ( VAR_1 . size ( ) ) ; p ++ ) { TYPE_1 VAR_2 = VAR_1 . get ( p ) ; VAR_2 . METHOD_1 ( ) ; } },['Delete Literal'],2929
"public void METHOD_1 ( int index , TYPE_1 VAR_1 ) { VAR_2 . set ( index , VAR_1 ) ; METHOD_2 ( ) ; }","public void METHOD_1 ( int index , java.lang.String value ) { VAR_2 . set ( index , value ) ; METHOD_2 ( ) ; }","['Update Parameter', 'Update TypeReference', 'Update VariableRead']",2930
public static void METHOD_1 ( ) { VAR_1 = false ; VAR_2 = false ; VAR_3 = false ; VAR_4 = false ; },private static void METHOD_1 ( ) { VAR_1 = false ; VAR_2 = false ; VAR_3 = false ; VAR_4 = false ; },['Update Wra'],2931
"private TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 , TYPE_4 { return TYPE_5 . METHOD_2 ( METHOD_3 ( false ) , this . VAR_1 , this . VAR_2 , this . VAR_3 , this . VAR_4 ) ; }","private TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 , TYPE_4 { return TYPE_5 . METHOD_2 ( METHOD_3 ( ) , this . VAR_1 , this . VAR_2 , this . VAR_3 , this . VAR_4 ) ; }",['Delete Literal'],2932
"public void METHOD_1 ( java.lang.Class VAR_1 , TYPE_1 listener ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , listener ) ; if ( VAR_2 != null ) { METHOD_1 ( VAR_2 ) ; } }","public void METHOD_1 ( java.lang.Class < TYPE_2 > VAR_1 , TYPE_1 listener ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , listener ) ; if ( VAR_2 != null ) { METHOD_1 ( VAR_2 ) ; } }",['Insert TypeReference'],2933
"public TYPE_1 < TYPE_2 , ? > METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ; } return null ; }","public TYPE_1 < TYPE_2 , ? > METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_3 ( ) . METHOD_4 ( ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ) ; } return null ; }",['Insert TypeReference'],2934
public int METHOD_1 ( ) { return new java.lang.Integer ( VAR_1 . METHOD_2 ( STRING_1 ) . getValue ( ) ) ; },public int METHOD_1 ( ) { return new java.lang.Integer ( VAR_1 . METHOD_2 ( STRING_1 ) . getValue ( ) ) . intValue ( ) ; },"['Insert Invocation', 'Move ConstructorCall']",2936
"void METHOD_1 ( java.lang.String state , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;","void METHOD_1 ( java.lang.String state , TYPE_2 VAR_2 ) ;","['Delete TypeReference', 'Delete Parameter']",2937
"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { VAR_3 = VAR_1 ; VAR_4 . METHOD_2 ( VAR_5 , VAR_1 , VAR_2 ) ; VAR_4 . METHOD_3 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 = VAR_1 ; VAR_4 . METHOD_2 ( VAR_5 , VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2938
"public void start ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 = new TYPE_2 ( INT_1 , INT_1 ) ; }",public void start ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 = new TYPE_2 ( ) ; },"['Delete FieldRead', 'Delete FieldRead']",2939
"private boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 != null ) { METHOD_3 ( VAR_3 ) ; return true ; } return false ; }","private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 != null ) { METHOD_3 ( VAR_3 ) ; } }","['Update TypeReference', 'Delete Literal', 'Delete Return', 'Delete Literal', 'Delete Return']",2940
"public static int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { return VAR_4 . METHOD_1 ( TYPE_1 . METHOD_2 ( VAR_1 ) , VAR_2 , VAR_3 ) ; }","public static int METHOD_1 ( int VAR_1 , int VAR_2 ) { return VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move Parameter', 'Update Parameter', 'Move VariableRead', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']",2941
"public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( false , x ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( true , x ) ; }",['Update Literal'],2942
public int METHOD_1 ( int id ) { return VAR_1 . contains ( id ) ? VAR_2 : VAR_3 ; },public int METHOD_1 ( int position ) { return VAR_1 . contains ( position ) ? VAR_2 : VAR_3 ; },"['Update Parameter', 'Update VariableRead']",2943
"public static int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_1 . METHOD_2 ( INT_1 ) ; VAR_4 . METHOD_3 ( VAR_1 , VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_1 , VAR_2 ) ; return VAR_4 . METHOD_5 ( VAR_1 ) ; }","public static int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . METHOD_2 ( 1 ) ; VAR_4 . METHOD_4 ( VAR_1 , VAR_2 ) ; return VAR_4 . METHOD_5 ( VAR_1 ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",2944
public boolean METHOD_1 ( long VAR_1 ) { if ( ( VAR_1 % ( VAR_2 ) ) == 0 ) { METHOD_2 ( ) ; } return true ; },public boolean METHOD_1 ( long VAR_1 ) { if ( ( VAR_1 % ( VAR_2 ) ) == 0 ) { METHOD_2 ( ) ; } return false ; },['Update Literal'],2945
public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; },public static TYPE_1 METHOD_1 ( java.lang.String method ) { return new TYPE_1 ( method ) ; },"['Insert Parameter', 'Insert TypeReference', 'Update ConstructorCall', 'Insert VariableRead']",2946
"void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException ;","void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException ;","['Delete TypeReference', 'Delete Parameter']",2947
"public void METHOD_1 ( ) { listener . METHOD_2 ( VAR_1 . METHOD_3 ( ) , info . METHOD_4 ( ) ) ; }",public void METHOD_1 ( ) { listener . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; },"['Delete FieldRead', 'Delete Invocation']",2948
protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; if ( METHOD_3 ( ) ) { state = VAR_2 ; METHOD_4 ( VAR_3 ) ; } },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; if ( METHOD_3 ( ) ) { state = VAR_2 ; METHOD_4 ( VAR_3 ) ; } },['Update Wra'],2950
"void METHOD_1 ( int VAR_1 , java.lang.String message , java.lang.String VAR_2 ) ;",void METHOD_1 ( int VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter']",2952
public TYPE_1 METHOD_1 ( java.lang.Integer VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { return METHOD_2 ( VAR_1 ) ; } return VAR_2 ; },public TYPE_1 METHOD_1 ( java.lang.Integer id ) { TYPE_1 VAR_2 = VAR_3 . get ( id ) ; if ( VAR_2 == null ) { return METHOD_2 ( id ) ; } return VAR_2 ; },"['Update Parameter', 'Update VariableRead', 'Update VariableRead']",2953
"private TYPE_1 METHOD_1 ( java.lang.Integer id ) { return VAR_1 . METHOD_2 ( VAR_2 class , id ) ; }","private TYPE_1 METHOD_1 ( java.lang.Long id ) { return VAR_1 . METHOD_2 ( VAR_2 class , id ) ; }",['Update TypeReference'],2954
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) + ( step ) ) < 0 ) { VAR_1 = 0 ; } else { VAR_1 += step ; } METHOD_2 ( ) ; },public void METHOD_1 ( ) { if ( ( ( VAR_1 ) + ( step ) ) == 0 ) { VAR_1 = 0 ; } else { VAR_1 += step ; } METHOD_2 ( ) ; },['Update BinaryOperator'],2955
protected abstract int METHOD_1 ( TYPE_1 VAR_1 ) ;,protected abstract void METHOD_1 ( ) ;,"['Update TypeReference', 'Delete TypeReference', 'Delete Parameter']",2956
public static TYPE_1 METHOD_1 ( java.lang.String key ) throws TYPE_2 { return TYPE_1 . METHOD_2 ( VAR_1 . url ( key ) ) ; },private static TYPE_1 METHOD_1 ( java.lang.String key ) throws TYPE_2 { return TYPE_1 . METHOD_2 ( VAR_1 . url ( key ) ) ; },['Update Wra'],2957
public void METHOD_1 ( double n ) { VAR_1 = n ; },public void METHOD_1 ( double VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Update Parameter', 'Update VariableRead', 'Insert ThisAccess']",2958
"public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) throws java.io.IOException { java.lang.System.out.println ( STRING_1 ) ; }","public int METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) throws java.io.IOException { java.lang.System.out.println ( STRING_1 ) ; return 0 ; }","['Update TypeReference', 'Insert Return', 'Insert Literal']",2959
"public TYPE_1 METHOD_1 ( boolean VAR_1 ) { return METHOD_2 ( VAR_2 , 1 , VAR_1 ) ; }","public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_2 , 1 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2960
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_2 ; },protected TYPE_1 METHOD_1 ( ) { return VAR_2 ; },"['Delete TypeReference', 'Delete Parameter']",2961
private void METHOD_1 ( TYPE_1 event ) { VAR_1 . info ( TYPE_2 . METHOD_2 ( event ) ) ; this . VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ; },private void METHOD_1 ( TYPE_1 event ) { VAR_1 . info ( TYPE_2 . METHOD_2 ( event ) ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead']",2962
