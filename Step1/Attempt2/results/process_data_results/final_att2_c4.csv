Unnamed: 0,fixed_code,buggy_code,gumtree_baseline,line_in_dataset,gpt_attempt1,baseline_nodes,gpt_nodes,node_set_match,jaccard_score,precision,recall,f1_score,tp,fp,fn
0,0,"private void METHOD_1 ( java.lang.String msg , int VAR_1 ) { java.lang.System.out.println ( ( ( ( VAR_1 + STRING_1 ) + STRING_2 ) + msg ) ) ; }","private void METHOD_1 ( java.lang.String msg , int VAR_1 ) { java.lang.System.out.println ( ( ( VAR_1 + STRING_1 ) + msg ) ) ; }","['Move BinaryOperator', 'Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",1,['Delete VariableRead'],"['BinaryOperator', 'VariableRead', 'FieldRead', 'BinaryOperator']",['VariableRead'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,4
1,1,"private static float METHOD_1 ( float VAR_1 , float VAR_2 ) { return ( VAR_1 == 0 ) || ( VAR_1 != VAR_1 ) ? VAR_2 : VAR_1 ; }","private static float METHOD_1 ( float VAR_1 , float VAR_2 ) { return VAR_1 == 0 ? VAR_2 : VAR_1 ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",2,['Delete BinaryOperator'],"['BinaryOperator', 'VariableRead', 'VariableRead', 'BinaryOperator', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
2,2,public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_1 ( ) ; TYPE_1 . METHOD_1 ( ) ; TYPE_2 . METHOD_1 ( ) ; VAR_2 . info ( STRING_1 ) ; },public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( ) ; TYPE_2 . METHOD_1 ( ) ; VAR_1 . METHOD_1 ( ) ; VAR_2 . info ( STRING_1 ) ; },['Move Invocation'],4,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
3,3,"public int METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( new java.lang.Object [ ] { type , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 } ) ; }","public int METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( new java.lang.Object [ ] { VAR_3 , VAR_4 , VAR_2 , VAR_6 , VAR_9 , VAR_8 , VAR_10 , type , VAR_5 , VAR_7 , VAR_11 , VAR_12 , VAR_13 , VAR_1 } ) ; }","['Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead']",6,"['Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable']","['FieldRead', 'FieldRead', 'FieldRead', 'FieldRead', 'FieldRead', 'FieldRead']","['LocalVariable', 'LocalVariable', 'LocalVariable', 'LocalVariable', 'LocalVariable', 'LocalVariable', 'LocalVariable', 'LocalVariable', 'LocalVariable', 'LocalVariable', 'LocalVariable', 'LocalVariable', 'LocalVariable', 'LocalVariable']",Partial Match,0.0,0.0,0.0,0.0,0,14,6
4,4,public void METHOD_1 ( ) { if ( ( this . METHOD_2 ( ) ) != null ) { this . METHOD_2 ( ) . METHOD_3 ( this ) ; } this . VAR_1 = true ; this . VAR_2 = null ; },public void METHOD_1 ( ) { this . METHOD_2 ( ) . METHOD_3 ( this ) ; this . VAR_1 = true ; this . VAR_2 = null ; },"['Move Invocation', 'Delete ThisAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",7,['Delete Block'],"['Invocation', 'ThisAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
5,5,private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_2 ) != null ) && ( ( VAR_3 ) != null ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_2 ) != null ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",8,"['Delete VariableRead', 'Delete VariableRead']","['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']","['VariableRead', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,5
6,6,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { VAR_3 . message ( STRING_1 , false ) ; throw new TYPE_2 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { VAR_3 . message ( STRING_1 , false ) ; throw new TYPE_2 ( ) ; } }","['Move FieldRead', 'Delete UnaryOperator']",9,['Delete Invocation'],"['FieldRead', 'UnaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
7,7,"void start ( ) { try { if ( ! ( VAR_1 . METHOD_1 ( ) ) ) { VAR_2 . start ( ) ; } } catch ( TYPE_1 VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_4 , STRING_1 ) ; } }","void start ( ) { try { VAR_2 . start ( ) ; } catch ( TYPE_1 VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_4 , STRING_1 ) ; } }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",11,['Delete Block'],"['Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
8,8,public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( this ) ; VAR_1 . METHOD_4 ( this ) ; VAR_1 . METHOD_1 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( this ) ; VAR_1 . METHOD_4 ( this ) ; },['Move Invocation'],13,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
9,9,public void show ( ) { if ( ( VAR_1 ) != null ) { VAR_2 . update ( TYPE_1 . METHOD_1 ( ) ) ; } },public void show ( ) { VAR_2 . update ( TYPE_1 . METHOD_1 ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",14,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
10,10,"public boolean METHOD_1 ( TYPE_1 event , java.lang.String VAR_1 ) { return ( ( event . METHOD_2 ( STRING_1 ) ) != null ) && ( event . METHOD_2 ( STRING_1 ) . contains ( VAR_1 ) ) ; }","public boolean METHOD_1 ( TYPE_1 event , java.lang.String VAR_1 ) { return ( event . METHOD_2 ( STRING_1 ) . contains ( VAR_1 ) ) && ( ( event . METHOD_2 ( STRING_1 ) ) != null ) ; }",['Move BinaryOperator'],15,['Move BinaryOperator'],['BinaryOperator'],['BinaryOperator'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
11,11,"public double METHOD_1 ( int VAR_1 , int VAR_2 ) { return ( ( ( double ) ( VAR_1 ) ) / ( VAR_1 + VAR_2 ) ) * INT_1 ; }","public double METHOD_1 ( int VAR_1 , int VAR_2 ) { return VAR_1 / ( VAR_1 + VAR_2 ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete FieldRead', 'Delete BinaryOperator']",18,"['Delete UnaryOperator', 'Delete BinaryOperator', 'Delete TypeAccess']","['BinaryOperator', 'TypeReference', 'FieldRead', 'BinaryOperator']","['UnaryOperator', 'BinaryOperator', 'TypeAccess']",Partial Match,0.2,0.3333333333333333,0.25,0.28571428571428575,1,2,3
12,12,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( this , VAR_1 ) ; }",public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( this ) . METHOD_1 ( VAR_1 ) ; },"['Insert Invocation', 'Update ConstructorCall', 'Move ConstructorCall', 'Move VariableRead']",20,['Insert Invocation'],"['Invocation', 'ConstructorCall', 'ConstructorCall', 'VariableRead']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
13,13,public synchronized boolean METHOD_1 ( ) { return ( java.lang.Math.abs ( ( ( VAR_1 ) - ( VAR_2 ) ) ) ) <= FLOAT_1 ; },public synchronized boolean METHOD_1 ( ) { if ( ( java.lang.Math.abs ( ( ( VAR_1 ) - ( VAR_2 ) ) ) ) > FLOAT_1 ) { return false ; } return true ; },"['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal']",23,"['Delete BinaryOperator', 'Insert BinaryOperator', 'Insert UnaryOperator', 'Insert LocalVariable', 'Insert BinaryOperator']","['If', 'BinaryOperator', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Literal']","['BinaryOperator', 'BinaryOperator', 'UnaryOperator', 'LocalVariable', 'BinaryOperator']",Partial Match,0.14285714285714285,0.0,0.0,0.0,0,5,7
14,14,"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; if ( ! ( VAR_3 ) ) { VAR_4 = false ; TYPE_2 . METHOD_4 ( VAR_5 , VAR_6 . getValue ( ) . toString ( ) ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_4 = false ; TYPE_2 . METHOD_4 ( VAR_5 , VAR_6 . getValue ( ) . toString ( ) ) ; }","['Move Assignment', 'Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",25,['Delete Wra'],"['Assignment', 'Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
15,15,"public void METHOD_1 ( int temp ) { VAR_1 = TYPE_1 . METHOD_2 ( ( temp - INT_1 ) , INT_2 ) ; }",public void METHOD_1 ( int temp ) { VAR_1 = temp - INT_1 ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",26,"['Delete TypeAccess', 'Delete Assignment', 'Insert Assignment']","['BinaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation']","['TypeAccess', 'Assignment', 'Assignment']",Partial Match,0.25,0.3333333333333333,0.25,0.28571428571428575,1,2,3
16,16,"public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { listener . METHOD_3 ( STRING_1 , this ) ; listener . METHOD_4 ( this ) ; } }","public void METHOD_1 ( ) { listener . METHOD_3 ( STRING_1 , this ) ; listener . METHOD_4 ( this ) ; }","['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",28,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
17,17,protected void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) > 0 ) { remove ( 0 ) ; } },protected void METHOD_1 ( ) { remove ( 0 ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",30,['Delete Invocation'],"['Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
18,18,public void METHOD_1 ( java.lang.Throwable VAR_1 ) { if ( VAR_1 instanceof TYPE_1 ) { VAR_2 . METHOD_2 ( true ) ; } else { super . METHOD_1 ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.Throwable VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",31,['Delete Invocation'],"['Invocation', 'VariableRead', 'TypeAccess', 'BinaryOperator', 'TypeAccess', 'Literal', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1,0.18181818181818182,1,0,9
19,19,"public java.lang.String METHOD_1 ( ) { return java.lang.String.format ( STRING_1 , METHOD_2 ( ) ) . replaceAll ( STRING_2 , STRING_3 ) ; }","public java.lang.String METHOD_1 ( ) { return java.lang.String.format ( STRING_1 , METHOD_2 ( ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",32,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
20,20,"public TYPE_1 METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) ) ) return null ; else return VAR_1 . METHOD_4 ( ( ( VAR_2 ) + 1 ) , ( ( VAR_3 ) - 1 ) ) ; }","public TYPE_1 METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) ) ) return null ; else return VAR_1 . METHOD_4 ( ( ( VAR_2 ) - 1 ) , ( ( VAR_3 ) + 1 ) ) ; }","['Update BinaryOperator', 'Update BinaryOperator']",33,"['Update UnaryOperator', 'Update UnaryOperator']","['BinaryOperator', 'BinaryOperator']","['UnaryOperator', 'UnaryOperator']",Partial Match,0.0,0.0,0.0,0.0,0,2,2
21,21,"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return ( VAR_2 == null ) || ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",34,['Delete BinaryOperator'],"['BinaryOperator', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
22,22,public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; },"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_1 . METHOD_1 ( VAR_1 , 1 ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Move VariableRead', 'Insert Literal', 'Delete ConstructorCall']",37,"['Delete TypeReference', 'Insert TypeAccess', 'Insert Invocation']","['Invocation', 'TypeAccess', 'VariableRead', 'Literal', 'ConstructorCall']","['TypeReference', 'TypeAccess', 'Invocation']",Partial Match,0.3333333333333333,0.6666666666666666,0.4,0.5,2,1,3
23,23,public boolean isEmpty ( ) { return VAR_1 . isEmpty ( ) ; },public boolean isEmpty ( ) { return ( VAR_1 . size ( ) ) == 1 ; },"['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Insert Literal']",38,"['Delete VariableRead', 'Insert VariableRead']","['BinaryOperator', 'Invocation', 'Invocation', 'Literal']","['VariableRead', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,4
24,24,"private void METHOD_1 ( TYPE_1 out ) throws java.io.IOException , java.lang.ClassNotFoundException { VAR_1 = VAR_2 . getClass ( ) . getName ( ) ; if ( METHOD_2 ( ) ) java.lang.System.err.println ( ( STRING_1 + ( VAR_1 ) ) ) ; out . METHOD_3 ( ) ; }","private void METHOD_1 ( TYPE_1 out ) throws java.io.IOException , java.lang.ClassNotFoundException { out . METHOD_3 ( ) ; VAR_1 = VAR_2 . getClass ( ) . getName ( ) ; if ( METHOD_2 ( ) ) java.lang.System.err.println ( ( STRING_1 + ( VAR_1 ) ) ) ; }",['Move Invocation'],39,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
25,25,public static java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 ; if ( TYPE_1 . METHOD_2 ( ) ) { VAR_1 = VAR_2 ; } else { VAR_1 = VAR_3 ; } return ( VAR_4 ) + VAR_1 ; },public static java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 ; if ( TYPE_1 . METHOD_2 ( ) ) { VAR_1 = VAR_2 ; } else { VAR_1 = VAR_3 ; } return VAR_1 + ( VAR_4 ) ; },['Move FieldRead'],40,['Update Return'],['FieldRead'],['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
26,26,"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; super . METHOD_1 ( ) ; }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; }",['Move Invocation'],41,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
27,27,public void METHOD_1 ( ) { if ( ( this . VAR_1 . size ( ) ) > 0 ) { this . index = - 1 ; } },public void METHOD_1 ( ) { this . index = - 1 ; },"['Move Assignment', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",43,['Delete Invocation'],"['Assignment', 'ThisAccess', 'FieldRead', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.125,1.0,0.125,0.2222222222222222,1,0,7
28,28,"public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return TYPE_2 . METHOD_2 ( VAR_1 , 0 , VAR_2 . length ) ; return null ; }","public TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( VAR_1 , 0 , VAR_2 . length ) ; }","['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",44,"['Delete Return', 'Delete TypeAccess']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']","['Return', 'TypeAccess']",Partial Match,0.14285714285714285,0.5,0.125,0.2,1,1,7
29,29,"public java.util.Map < TYPE_1 , TYPE_2 > METHOD_1 ( ) { return new java.util.HashMap ( VAR_1 ) ; }","public java.util.Map < TYPE_1 , TYPE_2 > METHOD_1 ( ) { return VAR_1 ; }","['Move FieldRead', 'Delete ConstructorCall']",45,['Delete Invocation'],"['FieldRead', 'ConstructorCall']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
30,30,protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },protected void METHOD_1 ( TYPE_2 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",46,"['Update TypeAccess', 'Delete Return']","['TypeReference', 'Invocation', 'Return']","['TypeAccess', 'Return']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
31,31,public double METHOD_1 ( java.lang.String VAR_1 ) { if ( ( TYPE_1 . METHOD_2 ( VAR_1 ) . getString ( STRING_1 ) ) != null ) { return TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( STRING_1 ) ; } return 0 ; },public double METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( STRING_1 ) ; },"['Move Return', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",48,"['Delete If', 'Delete Return']","['Return', 'TypeAccess', 'VariableRead', 'Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']","['If', 'Return']",GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,2,0,10
32,32,private void METHOD_1 ( java.lang.String VAR_1 ) { assert VAR_1 != null ; java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_3 . METHOD_3 ( ) . VAR_4 . select ( VAR_2 ) ; VAR_5 . select ( VAR_1 ) ; } },private void METHOD_1 ( java.lang.String VAR_1 ) { assert VAR_1 != null ; java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) . VAR_4 . select ( VAR_2 ) ; VAR_5 . select ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",49,['Delete Invocation'],"['Invocation', 'Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,7
33,33,public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . getName ( ) ; },"['Insert Invocation', 'Move Invocation']",50,['Insert Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
34,34,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_2 . METHOD_2 ( VAR_1 ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",51,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
35,35,public boolean METHOD_1 ( ) { return ( VAR_1 . equals ( response ) ) && ( ( VAR_2 ) != null ) ; },public boolean METHOD_1 ( ) { return VAR_1 . equals ( response ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",52,"['Delete VariableRead', 'Delete Return']","['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']","['VariableRead', 'Return']",Partial Match,0.0,0.0,0.0,0.0,0,2,5
36,36,"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , int start , int VAR_2 ) { return java.lang.String.format ( VAR_1 , ( start + VAR_2 ) , start ) ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 , int start , int VAR_2 ) { return java.lang.String.format ( VAR_1 , ( ( start + VAR_2 ) - 1 ) , start ) ; }","['Insert BinaryOperator', 'Move BinaryOperator', 'Insert Literal']",53,['Insert UnaryOperator'],"['BinaryOperator', 'BinaryOperator', 'Literal']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
37,37,private void METHOD_1 ( ) { if ( ( ( VAR_1 ) % INT_1 ) == 1 ) { if ( VAR_2 . METHOD_2 ( VAR_3 ) ) { METHOD_3 ( ) ; } else { } } },private void METHOD_1 ( ) { if ( VAR_2 . METHOD_2 ( VAR_3 ) ) { METHOD_3 ( ) ; } else { } },"['Move If', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",55,['Delete Invocation'],"['If', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,8
38,38,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . get ( ( ( VAR_1 . METHOD_2 ( ) ) - 1 ) ) . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",56,['Delete Assignment'],"['Invocation', 'Literal', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
39,39,"public TYPE_1 METHOD_1 ( java.lang.Integer VAR_1 ) { return new TYPE_1 ( filename , VAR_2 , VAR_1 , method , VAR_3 , className , context , args , VAR_4 ) ; }","public TYPE_1 METHOD_1 ( java.lang.Integer VAR_1 ) { return new TYPE_1 ( filename , VAR_2 , VAR_1 , method , VAR_3 , context , args , VAR_4 ) ; }",['Delete FieldRead'],59,['Delete TypeAccess'],['FieldRead'],['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
40,40,public boolean METHOD_1 ( ) { return ( ( ( type ) == null ) && ( ( VAR_1 ) != null ) ) || ( ( ( type ) != null ) && ( VAR_2 . toLowerCase ( ) . startsWith ( VAR_3 ) ) ) ; },public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) || ( ( ( type ) != null ) && ( VAR_2 . toLowerCase ( ) . startsWith ( VAR_3 ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",60,['Delete TypeReference'],"['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['TypeReference'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
41,41,public double METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) ) / ( VAR_2 ) ; },public double METHOD_1 ( ) { return java.lang.Math.abs ( ( ( VAR_1 . METHOD_2 ( ) ) / ( VAR_2 ) ) ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Move BinaryOperator']",61,"['Insert TypeAccess', 'Insert Invocation']","['Invocation', 'TypeAccess', 'BinaryOperator']","['TypeAccess', 'Invocation']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,2,0,1
42,42,public java.lang.String METHOD_1 ( ) { return ( ( name ) + STRING_1 ) + ( VAR_1 ) ; },public java.lang.String METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",62,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['FieldRead', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']","['Invocation', 'Invocation', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,3,5
43,43,"public void set ( int VAR_1 , TYPE_1 VAR_2 ) { METHOD_1 ( ) ; append ( VAR_1 , VAR_2 ) ; }",public void set ( TYPE_1 VAR_2 ) { METHOD_1 ( ) ; append ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",63,"['Delete Parameter', 'Delete VariableRead']","['TypeReference', 'Parameter', 'VariableRead']","['Parameter', 'VariableRead']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,2,0,1
44,44,public boolean isEmpty ( ) { return ( ( ( value ) == null ) || ( ( key ) == null ) ) || ( ( VAR_1 . trim ( ) . length ( ) ) == 0 ) ; },public boolean isEmpty ( ) { return ( ( value ) == null ) || ( ( key ) == null ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",64,['Delete UnaryOperator'],"['BinaryOperator', 'TypeAccess', 'Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
45,45,public java.lang.String METHOD_1 ( java.lang.String name ) { return ( METHOD_2 ( name ) ) + STRING_1 ; },public java.lang.String METHOD_1 ( java.lang.String name ) { return METHOD_2 ( name ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",65,['Delete Invocation'],"['Invocation', 'FieldRead', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
46,46,"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( ""id"" , ( ( VAR_3 . id ) + STRING_1 ) ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( ""id"" , VAR_3 . id ) ; METHOD_3 ( intent ) ; }","['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",67,['Delete Invocation'],"['FieldRead', 'FieldRead', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
47,47,"public void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ( VAR_3 ) == ( VAR_4 ) ) { METHOD_2 ( ) ; } else { METHOD_3 ( VAR_1 , VAR_2 ) ; } }","public void METHOD_1 ( int VAR_1 , int VAR_2 ) { METHOD_3 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",69,['Delete Invocation'],"['Invocation', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.125,0.2222222222222222,1,0,7
48,48,public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = event . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( ( VAR_3 ) && ( VAR_2 instanceof TYPE_4 ) ) event . METHOD_5 ( true ) ; },public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = event . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; event . METHOD_5 ( true ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",70,['Delete Invocation'],"['Invocation', 'FieldRead', 'VariableRead', 'TypeAccess', 'BinaryOperator', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,8
49,49,"public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_2 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; METHOD_4 ( 1 , VAR_4 ) ; execute ( ) ; METHOD_5 ( VAR_3 , INT_1 ) ; }","public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; METHOD_4 ( 1 , VAR_4 ) ; execute ( ) ; METHOD_5 ( VAR_3 , INT_1 ) ; }",['Move Invocation'],71,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
50,50,public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { return VAR_1 . METHOD_2 ( new TYPE_3 ( ) ) . METHOD_3 ( ) ; },public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { return VAR_1 . METHOD_2 ( new TYPE_3 ( ) ) ; },"['Move Invocation', 'Delete Invocation']",73,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
51,51,private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . remove ( VAR_1 ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . remove ( VAR_1 ) ) return true ; else return false ; },"['Insert If', 'Move Invocation', 'Insert Block', 'Insert Block', 'Insert Return', 'Insert Return', 'Insert Literal', 'Insert Literal', 'Delete Return']",74,"['Insert Invocation', 'Insert Return', 'Insert Return']","['If', 'Invocation', 'Block', 'Block', 'Return', 'Return', 'Literal', 'Literal', 'Return']","['Invocation', 'Return', 'Return']",GPT Missed Nodes,0.4,0.6666666666666666,0.2222222222222222,0.3333333333333333,2,1,7
52,52,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( METHOD_2 ( ) ) VAR_1 . METHOD_3 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",75,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
53,53,"protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { if ( ! ( VAR_2 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 ) . METHOD_3 ( ) ) ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ) ; } }","protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { if ( ! ( VAR_2 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 ) . METHOD_3 ( ) ) ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; } }","['Move VariableRead', 'Delete Invocation']",76,['Delete Invocation'],"['VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
54,54,"public void METHOD_1 ( ) { if ( VAR_1 ) METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) ) ; }","public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",78,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
55,55,"private TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( TYPE_3 . METHOD_2 ( STRING_1 , STRING_2 ) , INT_1 ) . build ( ) ; }","private TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( new java.util.HashSet < > ( java.util.Arrays.asList ( STRING_1 , STRING_2 ) ) , INT_1 ) . build ( ) ; }","['Insert ConstructorCall', 'Update ConstructorCall', 'Move ConstructorCall', 'Move FieldRead', 'Update Invocation', 'Update TypeAccess']",79,"['Update TypeReference', 'Update Invocation', 'Insert TypeReference', 'Insert TypeReference', 'Insert TypeReference', 'Insert TypeAccess', 'Insert Invocation']","['ConstructorCall', 'ConstructorCall', 'ConstructorCall', 'FieldRead', 'Invocation', 'TypeAccess']","['TypeReference', 'Invocation', 'TypeReference', 'TypeReference', 'TypeReference', 'TypeAccess', 'Invocation']",Partial Match,0.4,0.14285714285714285,0.16666666666666666,0.15384615384615383,1,6,5
56,56,private double METHOD_1 ( ) { double VAR_1 = ( VAR_2 ) * INT_1 ; double VAR_3 = ( ( VAR_4 ) * ( VAR_4 ) ) * ( ( VAR_5 ) - ( TYPE_1 . METHOD_2 ( VAR_5 ) ) ) ; return VAR_1 / VAR_3 ; },private double METHOD_1 ( ) { double VAR_1 = ( VAR_2 ) * INT_1 ; double VAR_3 = ( VAR_4 ) * ( ( VAR_5 ) - ( TYPE_1 . METHOD_2 ( VAR_5 ) ) ) ; return VAR_1 / VAR_3 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",80,['Delete Assignment'],"['FieldRead', 'FieldRead', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
57,57,"public static int METHOD_1 ( int [ ] VAR_1 ) { return TYPE_1 . METHOD_1 ( VAR_1 , CHAR_1 ) ; }","public static int METHOD_1 ( int [ ] VAR_1 ) { TYPE_1 . METHOD_1 ( VAR_1 , CHAR_1 ) ; }","['Move Invocation', 'Delete Return']",81,['Delete Invocation'],"['Invocation', 'Return']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
58,58,"public void METHOD_1 ( ) { METHOD_2 ( ) ; super . METHOD_1 ( ) ; VAR_1 . METHOD_3 ( STRING_1 , this , VAR_2 ) ; }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 , this , VAR_2 ) ; }",['Move Invocation'],82,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
59,59,public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( METHOD_2 ( ) ) METHOD_3 ( ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },"['Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",84,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
60,60,public float METHOD_1 ( java.lang.Float VAR_1 ) { return 1.0F / ( ( ( float ) ( TYPE_1 . METHOD_2 ( ( ( - VAR_1 ) + 1 ) ) ) ) + 1 ) ; },public float METHOD_1 ( java.lang.Float VAR_1 ) { return 1.0F / ( ( float ) ( TYPE_1 . METHOD_2 ( ( ( - VAR_1 ) + 1 ) ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Literal', 'Delete Literal', 'Delete BinaryOperator']",85,['Delete BinaryOperator'],"['BinaryOperator', 'BinaryOperator', 'Literal', 'Literal', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
61,61,public java.lang.String METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return this . METHOD_3 ( ) . METHOD_1 ( ) ; } return STRING_1 + ( getName ( ) ) ; },public java.lang.String METHOD_1 ( ) { return STRING_1 + ( getName ( ) ) ; },"['Delete Invocation', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",86,"['Delete Invocation', 'Delete Return']","['Invocation', 'ThisAccess', 'Invocation', 'Invocation', 'Return', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.4,1.0,0.2857142857142857,0.4444444444444445,2,0,5
62,62,protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( VAR_4 ) ; } },protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",87,['Delete Block'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
63,63,"private int METHOD_1 ( int number , int VAR_1 ) { int result = ( ( number - 1 ) / ( VAR_2 ) ) - ( VAR_1 / ( VAR_2 ) ) ; return result > 0 ? result : - result ; }","private int METHOD_1 ( int number , int VAR_1 ) { int result = ( number / ( VAR_2 ) ) - ( VAR_1 / ( VAR_2 ) ) ; return result > 0 ? result : - result ; }","['Update BinaryOperator', 'Move BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",88,"['Delete BinaryOperator', 'Delete Literal']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator']","['BinaryOperator', 'Literal']",GPT Missed Nodes,0.6666666666666666,1.0,0.2857142857142857,0.4444444444444445,2,0,5
64,64,public java.lang.String METHOD_1 ( java.lang.String query ) { return this . VAR_1 . METHOD_2 ( query ) ; },public java.lang.String METHOD_1 ( java.lang.String query ) { return this . VAR_1 . METHOD_2 ( query ) . toString ( ) ; },"['Insert Invocation', 'Move Invocation']",89,['Insert Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
65,65,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_4 = true ; VAR_5 = this ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_4 = true ; if ( ( VAR_5 ) == null ) { VAR_5 = this ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Assignment']",91,"['Insert Invocation', 'Insert Assignment', 'Insert VariableRead']","['If', 'BinaryOperator', 'Block', 'FieldRead', 'Literal', 'Assignment']","['Invocation', 'Assignment', 'VariableRead']",Partial Match,0.125,0.0,0.0,0.0,0,3,6
66,66,"public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 ; if ( VAR_3 . contains ( VAR_2 ) ) { METHOD_2 ( 0 ) ; } else { VAR_3 . add ( 0 , VAR_1 ) ; METHOD_3 ( 0 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 ; VAR_3 . add ( 0 , VAR_1 ) ; METHOD_3 ( 0 ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",93,"['Delete Block', 'Delete Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Literal', 'Invocation', 'Block', 'Block', 'If']","['Block', 'Invocation']",GPT Missed Nodes,0.4,1.0,0.2,0.33333333333333337,2,0,8
67,67,public void METHOD_1 ( int value ) { VAR_1 = value ; METHOD_2 ( ) ; },public void METHOD_1 ( int value ) { METHOD_2 ( ) ; VAR_1 = value ; },['Move Assignment'],94,['Move Assignment'],['Assignment'],['Assignment'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
68,68,"public java.lang.String toString ( ) { return TYPE_1 . METHOD_1 ( this ) . add ( STRING_1 , VAR_1 ) . add ( STRING_2 , VAR_2 ) . add ( STRING_3 , id ) . toString ( ) ; }","public java.lang.String toString ( ) { return TYPE_1 . METHOD_1 ( this ) . add ( STRING_1 , VAR_1 ) . add ( STRING_2 , VAR_2 ) . toString ( ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",95,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'FieldRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
69,69,public void METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_2 ) ) { return ; } if ( VAR_3 . equals ( VAR_1 ) ) { VAR_4 . setEnabled ( true ) ; } else { VAR_4 . setText ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_2 ) ) { return ; } if ( VAR_3 . equals ( VAR_1 ) ) { VAR_4 . setEnabled ( true ) ; } VAR_4 . setText ( VAR_1 ) ; },"['Move Invocation', 'Delete Block']",100,['Delete Wra'],"['Invocation', 'Block']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
70,70,"public java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return this . METHOD_1 ( VAR_1 , VAR_2 , STRING_1 , java.lang.String . METHOD_2 ( VAR_3 ) , ""0"" ) ; }","public java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return this . METHOD_1 ( VAR_1 , VAR_2 , STRING_1 , ""0"" , java.lang.String . METHOD_2 ( VAR_3 ) ) ; }",['Move Invocation'],101,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
71,71,public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 != null ) { VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Assignment', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",103,['Delete Invocation'],"['Assignment', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
72,72,"public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( ( ++ ( VAR_3 ) ) ) ; METHOD_3 ( ) ; VAR_4 . METHOD_4 ( this , VAR_5 ) ; } }","public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ( ++ ( VAR_3 ) ) ) ; METHOD_3 ( ) ; VAR_4 . METHOD_4 ( this , VAR_5 ) ; }","['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",104,['Delete Wra'],"['Invocation', 'Invocation', 'Invocation', 'FieldRead', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
73,73,public void execute ( TYPE_1 VAR_1 ) { for ( java.lang.Object VAR_2 : VAR_3 ) { TYPE_2 . METHOD_1 ( VAR_4 . remove ( VAR_2 ) ) ; } },public void execute ( TYPE_1 VAR_1 ) { for ( java.lang.Object VAR_2 : VAR_3 ) { VAR_4 . remove ( VAR_2 ) ; } },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",105,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
74,74,public void METHOD_1 ( boolean VAR_1 ) { if ( ! ( this . VAR_2 ) ) { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( boolean VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Delete ThisAccess', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",106,['Delete UnaryOperator'],"['Assignment', 'ThisAccess', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['UnaryOperator'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
75,75,public boolean METHOD_1 ( ) { return ( ( java.lang.Math.abs ( METHOD_2 ( ) ) ) <= ( VAR_1 ) ) && ( super . METHOD_1 ( ) ) ; },public boolean METHOD_1 ( ) { if ( ( java.lang.Math.abs ( METHOD_2 ( ) ) ) > ( VAR_1 ) ) { return false ; } return super . METHOD_1 ( ) ; },"['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Move Invocation', 'Insert Return', 'Insert Literal', 'Delete BinaryOperator']",109,"['Insert BinaryOperator', 'Insert Return', 'Insert BinaryOperator', 'Insert LocalVariable', 'Delete BinaryOperator', 'Update Return']","['If', 'BinaryOperator', 'BinaryOperator', 'Block', 'Invocation', 'Return', 'Literal', 'BinaryOperator']","['BinaryOperator', 'Return', 'BinaryOperator', 'LocalVariable', 'BinaryOperator', 'Return']",Partial Match,0.2857142857142857,0.3333333333333333,0.25,0.28571428571428575,2,4,6
76,76,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",111,"['Delete UnaryOperator', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'If']","['UnaryOperator', 'Invocation']",GPT Missed Nodes,0.4,1.0,0.3333333333333333,0.5,2,0,4
77,77,"public void METHOD_1 ( android.content.Intent intent ) { TYPE_1 f = METHOD_2 ( VAR_1 , VAR_2 class ) ; if ( f != null ) { ( ( TYPE_2 ) ( f ) ) . METHOD_1 ( intent , true ) ; } }","public void METHOD_1 ( android.content.Intent intent ) { TYPE_1 f = METHOD_2 ( VAR_1 , VAR_2 class ) ; if ( f != null ) { ( ( TYPE_2 ) ( f ) ) . METHOD_1 ( intent ) ; } }",['Delete Literal'],112,['Delete Parameter'],['Literal'],['Parameter'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
78,78,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",113,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
79,79,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) . startsWith ( STRING_1 ) ) || ( VAR_1 . METHOD_2 ( ) . equals ( STRING_2 ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . startsWith ( STRING_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",115,['Delete Invocation'],"['Invocation', 'VariableRead', 'Invocation', 'TypeAccess', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
80,80,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( VAR_1 ) ) || ( METHOD_3 ( VAR_1 ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( METHOD_2 ( VAR_1 ) ) || ( METHOD_3 ( VAR_1 ) ) ) { return true ; } else { return false ; } },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Insert Block', 'Insert Return', 'Insert Return', 'Insert Literal', 'Insert Literal', 'Delete Return']",116,"['Insert BinaryOperator', 'Insert Return']","['If', 'BinaryOperator', 'Block', 'Block', 'Return', 'Return', 'Literal', 'Literal', 'Return']","['BinaryOperator', 'Return']",GPT Missed Nodes,0.4,0.5,0.1111111111111111,0.1818181818181818,1,1,8
81,81,"public static double METHOD_1 ( double n ) { if ( n <= 0 ) { throw new TYPE_1 ( STRING_1 ) ; } return TYPE_2 . METHOD_2 ( n , 1.0 ) ; }","public static double METHOD_1 ( double n ) { if ( n <= 0 ) { throw new TYPE_1 ( STRING_1 ) ; } TYPE_2 . METHOD_2 ( n , 1.0 ) ; }","['Move Invocation', 'Delete Return']",118,['Delete Return'],"['Invocation', 'Return']",['Return'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
82,82,public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) return VAR_2 ; return null ; },"['Insert If', 'Insert Return', 'Insert BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert VariableRead', 'Insert Literal', 'Move Return']",119,"['Insert Invocation', 'Insert Return']","['If', 'Return', 'BinaryOperator', 'Block', 'Literal', 'VariableRead', 'Literal', 'Return']","['Invocation', 'Return']",Partial Match,0.14285714285714285,0.5,0.125,0.2,1,1,7
83,83,public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; } VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",120,"['Delete Invocation', 'Delete Block']","['Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'Block']",GPT Missed Nodes,0.5,1.0,0.4,0.5714285714285715,2,0,3
84,84,"java.lang.String METHOD_1 ( java.lang.String file ) { int VAR_1 = ( file . METHOD_2 ( STRING_1 , 0 ) ) + INT_1 ; java.lang.String output ; output = VAR_2 . substring ( VAR_1 , ( VAR_1 + INT_2 ) ) . trim ( ) ; return output ; }","java.lang.String METHOD_1 ( java.lang.String file ) { int VAR_1 = ( file . METHOD_2 ( STRING_1 , 0 ) ) + INT_1 ; java.lang.String output ; output = VAR_2 . substring ( VAR_1 , ( VAR_1 + INT_2 ) ) ; return output ; }","['Move Invocation', 'Delete Invocation']",121,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
85,85,"private int METHOD_1 ( TYPE_1 node , int VAR_1 ) { return ( ( node . METHOD_2 ( ) ) * ( VAR_2 ) ) + ( VAR_1 + 1 ) ; }","private int METHOD_1 ( TYPE_1 node , int VAR_1 ) { return ( ( node . METHOD_2 ( ) ) * ( VAR_2 ) ) + VAR_1 ; }","['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",122,['Delete UnaryOperator'],"['VariableRead', 'Literal', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
86,86,public boolean METHOD_1 ( ) { return ( ( this . VAR_1 ) != null ) && ( ( this . VAR_1 . METHOD_2 ( ) ) != null ) ; },public boolean METHOD_1 ( ) { return ( this . VAR_1 . METHOD_2 ( ) ) != null ; },"['Move BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",123,['Delete Invocation'],"['BinaryOperator', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
87,87,"private boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { if ( METHOD_3 ( VAR_1 ) ) { return true ; } return false ; } return METHOD_1 ( VAR_1 , VAR_2 ) ; }","private boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return false ; } return METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",125,"['Delete Invocation', 'Delete Return']","['VariableRead', 'Invocation', 'Literal', 'Return', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,2,0,4
88,88,public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { this . VAR_1 . METHOD_1 ( ) ; } },public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",126,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
89,89,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . length ( ) ) > 0 ) VAR_3 [ VAR_4 ] = java.lang.Double . METHOD_2 ( VAR_2 . toString ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 [ VAR_4 ] = java.lang.Double . METHOD_2 ( VAR_2 . toString ( ) ) ; },"['Move Assignment', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",128,['Delete Invocation'],"['Assignment', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.14285714285714285,0.25,1,0,6
90,90,"private void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { return ; } METHOD_2 ( 1 , size ) ; VAR_1 = false ; }","private void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { return ; } METHOD_2 ( 1 , ( ( size ) - 1 ) ) ; VAR_1 = false ; }","['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",129,['Insert UnaryOperator'],"['BinaryOperator', 'FieldRead', 'Literal']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
91,91,public void METHOD_1 ( ) { remove ( VAR_1 ) ; add ( VAR_1 ) ; METHOD_2 ( ) ; },public void METHOD_1 ( ) { remove ( VAR_1 ) ; METHOD_2 ( ) ; },"['Delete TypeAccess', 'Delete Invocation']",130,['Delete Invocation'],"['TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
92,92,public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( null != VAR_1 ) && ( ! ( VAR_2 . equals ( VAR_1 ) ) ) ) { VAR_3 . add ( VAR_1 ) ; } },public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ! ( VAR_2 . equals ( VAR_1 ) ) ) { VAR_3 . add ( VAR_1 ) ; } },"['Move UnaryOperator', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",131,['Delete Invocation'],"['UnaryOperator', 'Literal', 'VariableRead', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
93,93,"public void METHOD_1 ( TYPE_1 < java.lang.Void > VAR_1 , TYPE_2 < java.lang.Void > response ) { if ( response . METHOD_2 ( ) ) { VAR_2 . setText ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; } }","public void METHOD_1 ( TYPE_1 < java.lang.Void > VAR_1 , TYPE_2 < java.lang.Void > response ) { VAR_2 . setText ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",132,['Delete Invocation'],"['Invocation', 'Invocation', 'VariableRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
94,94,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = null ; VAR_2 = null ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 = null ; VAR_1 = null ; },['Move Assignment'],133,"['Move Assignment', 'Move Assignment']",['Assignment'],"['Assignment', 'Assignment']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
95,95,public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( ) ; } METHOD_4 ( VAR_1 ) ; this . VAR_3 = VAR_1 ; },public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_2 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; this . VAR_3 = VAR_1 ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",134,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
96,96,"public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( VAR_2 . getContext ( ) , VAR_3 , VAR_4 , VAR_1 . METHOD_3 ( ) , VAR_5 ) ; } }","public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( VAR_2 . getContext ( ) , VAR_3 , VAR_4 , VAR_1 , VAR_5 ) ; } }","['Move TypeAccess', 'Delete Invocation']",135,['Delete Invocation'],"['TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
97,97,public int METHOD_1 ( ) { final int result = METHOD_2 ( ) ; if ( result != ( - 1 ) ) { VAR_1 . add ( result ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } return result ; },public int METHOD_1 ( ) { final int result = METHOD_2 ( ) ; VAR_1 . add ( result ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; return result ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",136,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'VariableRead', 'Literal', 'UnaryOperator', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,9
98,98,private void METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_3 . add ( METHOD_2 ( ) ) ; } },private void METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } VAR_3 . add ( METHOD_2 ( ) ) ; },['Move Invocation'],137,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
99,99,public float METHOD_1 ( int VAR_1 ) { synchronized ( VAR_2 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { return VAR_3 . get ( VAR_1 ) ; } return 0 ; } },public float METHOD_1 ( int VAR_1 ) { synchronized ( VAR_2 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { VAR_3 . get ( VAR_1 ) ; } return 0 ; } },"['Move Invocation', 'Delete Return']",138,['Delete Return'],"['Invocation', 'Return']",['Return'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
100,100,public void METHOD_1 ( final long VAR_1 ) { if ( ! ( ( VAR_1 >= 0L ) && ( VAR_1 < ( VAR_2 ) ) ) ) { VAR_3 . METHOD_2 ( STRING_1 ) ; throw new TYPE_1 ( ) ; } VAR_4 = 1 ; },public void METHOD_1 ( final long VAR_1 ) { if ( ( VAR_1 >= 0L ) && ( VAR_1 < ( VAR_2 ) ) ) { VAR_3 . METHOD_2 ( STRING_1 ) ; throw new TYPE_1 ( ) ; } VAR_4 = 1 ; },"['Move BinaryOperator', 'Delete UnaryOperator']",140,['Delete UnaryOperator'],"['BinaryOperator', 'UnaryOperator']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
101,101,"public TYPE_1 METHOD_1 ( java.lang.String key , java.lang.String value ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( key , value ) ; } return this ; }","public TYPE_1 METHOD_1 ( java.lang.String key , java.lang.String value ) { this . VAR_1 . METHOD_1 ( key , value ) ; return this ; }","['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",141,['Delete Invocation'],"['Invocation', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
102,102,private boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) == ( VAR_1 ) ; },private boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == ( VAR_1 ) ) { return true ; } return false ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal']",143,"['Insert LocalVariable', 'Insert BinaryOperator', 'Insert Return']","['If', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Literal']","['LocalVariable', 'BinaryOperator', 'Return']",Partial Match,0.3333333333333333,0.3333333333333333,0.16666666666666666,0.2222222222222222,1,2,5
103,103,"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 class ) ; TYPE_1 . METHOD_3 ( STRING_1 , TYPE_2 . METHOD_4 ( VAR_3 ) ) ; }",public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 class ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",145,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
104,104,public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 ) != null ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",146,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
105,105,"public int METHOD_1 ( ) { return ( ( int ) ( TYPE_1 . METHOD_2 ( ( ( element . METHOD_3 ( ) ) + ( element . METHOD_4 ( ) ) ) , 0 ) ) ) ; }","public int METHOD_1 ( ) { return ( ( int ) ( TYPE_1 . METHOD_2 ( ( ( ( element . METHOD_3 ( ) ) + ( element . METHOD_4 ( ) ) ) - ( element . METHOD_3 ( ) ) ) , 0 ) ) ) ; }","['Insert BinaryOperator', 'Move BinaryOperator', 'Insert Invocation', 'Insert FieldRead']",147,"['Insert BinaryOperator', 'Insert Invocation']","['BinaryOperator', 'BinaryOperator', 'Invocation', 'FieldRead']","['BinaryOperator', 'Invocation']",GPT Missed Nodes,0.6666666666666666,1.0,0.5,0.6666666666666666,2,0,2
106,106,"public void METHOD_1 ( android.view.View view ) { if ( view == ( VAR_1 ) ) { METHOD_2 ( ) ; } else if ( view == ( VAR_2 ) ) { METHOD_3 ( ) ; METHOD_4 ( new android.content.Intent ( this , VAR_3 class ) ) ; } }","public void METHOD_1 ( android.view.View view ) { if ( view == ( VAR_1 ) ) { METHOD_2 ( ) ; } if ( view == ( VAR_2 ) ) { METHOD_3 ( ) ; METHOD_4 ( new android.content.Intent ( this , VAR_3 class ) ) ; } }","['Move If', 'Delete Block']",148,['Delete If'],"['If', 'Block']",['If'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
107,107,"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_3 . getName ( ) . compareTo ( VAR_4 . getName ( ) ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_3 . getName ( ) . toString ( ) . compareTo ( VAR_4 . getName ( ) . toString ( ) ) ; }","['Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Move Invocation']",149,['Insert Invocation'],"['Invocation', 'Invocation', 'Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.25,0.4,1,0,3
108,108,"public void METHOD_1 ( float x , float y ) { if ( ( VAR_1 ) != ( VAR_2 ) ) { VAR_3 . METHOD_2 ( ) . METHOD_3 ( new TYPE_1 ( x , y ) ) ; } }","public void METHOD_1 ( float x , float y ) { VAR_3 . METHOD_2 ( ) . METHOD_3 ( new TYPE_1 ( x , y ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",150,['Delete If'],"['Invocation', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['If'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
109,109,"public static void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < java.lang.String > VAR_2 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; } VAR_3 . put ( VAR_1 , VAR_2 ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < java.lang.String > VAR_2 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; }","['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",151,['Delete Invocation'],"['TypeAccess', 'VariableRead', 'Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.125,0.2222222222222222,1,0,7
110,110,"public java.lang.String toString ( ) { if ( VAR_1 ) { return java.lang.String.format ( STRING_1 , VAR_2 , VAR_3 . substring ( 0 , INT_1 ) , VAR_3 . substring ( INT_1 ) ) ; } else { return value ; } }","public java.lang.String toString ( ) { return java.lang.String.format ( STRING_1 , VAR_2 , VAR_3 . substring ( 0 , INT_1 ) , VAR_3 . substring ( INT_1 ) ) ; }","['Move Return', 'Delete FieldRead', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",152,"['Delete Return', 'Delete Return', 'Delete LocalVariable']","['Return', 'FieldRead', 'Block', 'FieldRead', 'Return', 'Block', 'If']","['Return', 'Return', 'LocalVariable']",Partial Match,0.2,0.3333333333333333,0.14285714285714285,0.2,1,2,6
111,111,"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) . size ( ) ) != VAR_2 ) { VAR_1 . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) . size ( ) ) != VAR_2 ) { METHOD_4 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; } }",['Move Invocation'],153,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
112,112,public TYPE_1 METHOD_1 ( ) { if ( ( this . METHOD_2 ( ) ) != null ) return this . METHOD_2 ( ) . METHOD_3 ( ) ; return null ; },public TYPE_1 METHOD_1 ( ) { return this . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Return', 'Delete ThisAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",154,"['Delete Invocation', 'Delete Return']","['Return', 'ThisAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']","['Invocation', 'Return']",GPT Missed Nodes,0.2857142857142857,1.0,0.2222222222222222,0.3636363636363636,2,0,7
113,113,"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 data ) { if ( ( data . METHOD_2 ( ) ) > 0 ) { VAR_2 . METHOD_3 ( data ) ; } else { METHOD_4 ( VAR_3 ) ; } }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 data ) { VAR_2 . METHOD_3 ( data ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",155,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.14285714285714285,1.0,0.2,0.33333333333333337,2,0,8
114,114,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) ) ) { VAR_2 . show ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_3 ( ) ) { VAR_2 . show ( ) ; } },"['Move Invocation', 'Delete Invocation', 'Delete BinaryOperator']",156,"['Delete Invocation', 'Delete If']","['Invocation', 'Invocation', 'BinaryOperator']","['Invocation', 'If']",Partial Match,0.3333333333333333,0.5,0.3333333333333333,0.4,1,1,2
115,115,public boolean add ( TYPE_1 VAR_1 ) { boolean result = false ; if ( ( ( size ( ) ) < ( VAR_2 ) ) && ( super . add ( VAR_1 ) ) ) { result = true ; } return result ; },public boolean add ( TYPE_1 VAR_1 ) { boolean result = false ; if ( ( ! ( ( size ( ) ) > ( VAR_2 ) ) ) && ( super . add ( VAR_1 ) ) ) { result = true ; } return result ; },"['Insert UnaryOperator', 'Update BinaryOperator', 'Move BinaryOperator']",157,"['Insert UnaryOperator', 'Update BinaryOperator']","['UnaryOperator', 'BinaryOperator', 'BinaryOperator']","['UnaryOperator', 'BinaryOperator']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
116,116,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ! ( METHOD_2 ( ) ) ) && ( VAR_1 instanceof TYPE_2 ) ) { VAR_1 . METHOD_3 ( this ) ; METHOD_4 ( true ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( this ) ; METHOD_4 ( true ) ; } },"['Move UnaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete BinaryOperator']",158,['Delete Invocation'],"['UnaryOperator', 'VariableRead', 'TypeAccess', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
117,117,public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( null ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( null ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",159,['Delete Block'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
118,118,"public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.Throwable VAR_2 ) { if ( ( ( VAR_3 ) != null ) && ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 ) ) ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } }","public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.Throwable VAR_2 ) { if ( ( VAR_3 ) != null ) VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",160,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'VariableRead', 'TypeAccess', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
119,119,public java.lang.Class < ? > METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( STRING_1 ) ) != null ) { return VAR_2 class ; } else { return VAR_3 class ; } },public java.lang.Class < ? > METHOD_1 ( ) { return VAR_2 class ; },"['Move Return', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",161,"['Delete Invocation', 'Delete Return']","['Return', 'TypeAccess', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'FieldRead', 'Return', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.25,1.0,0.18181818181818182,0.3076923076923077,2,0,9
120,120,public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ( VAR_2 . size ( ) ) > 1 ) ; },public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move BinaryOperator', 'Insert UnaryOperator', 'Update Invocation', 'Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",162,"['Update Invocation', 'Insert UnaryOperator', 'Update Invocation']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'UnaryOperator', 'Invocation', 'Invocation', 'Literal', 'BinaryOperator']","['Invocation', 'UnaryOperator', 'Invocation']",GPT Missed Nodes,0.5,0.6666666666666666,0.25,0.36363636363636365,2,1,6
121,121,public void METHOD_1 ( int VAR_1 ) { if ( ( ( VAR_2 ) + VAR_1 ) > ( METHOD_2 ( ) ) ) { VAR_2 = METHOD_2 ( ) ; } else { VAR_2 += VAR_1 ; } },public void METHOD_1 ( int VAR_1 ) { if ( ( ( VAR_2 ) + VAR_1 ) > ( this . VAR_1 ) ) { VAR_2 = METHOD_2 ( ) ; } else { VAR_2 += VAR_1 ; } },"['Insert FieldRead', 'Insert ThisAccess', 'Delete Invocation']",163,"['Update VariableRead', 'Insert TypeAccess']","['FieldRead', 'ThisAccess', 'Invocation']","['VariableRead', 'TypeAccess']",Partial Match,0.0,0.0,0.0,0.0,0,2,3
122,122,"public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object a ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 . get ( 0 ) , a ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; return null ; }","public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object a ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 , a ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; return null ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",164,['Update Invocation'],"['VariableRead', 'TypeAccess', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
123,123,public void METHOD_1 ( ) { if ( ( VAR_1 != null ) && ( VAR_2 != null ) ) { VAR_1 . METHOD_2 ( VAR_2 ) ; } VAR_3 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",167,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,10
124,124,public void METHOD_1 ( TYPE_1 buffer ) { if ( ( buffer == null ) || ( ( buffer . METHOD_2 ( ) ) == null ) ) return ; super . METHOD_1 ( buffer ) ; },public void METHOD_1 ( TYPE_1 buffer ) { if ( ( buffer . METHOD_2 ( ) ) == null ) return ; super . METHOD_1 ( buffer ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",168,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
125,125,private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 = false ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( ) . METHOD_5 ( ) ; },private void METHOD_1 ( ) { VAR_2 = false ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( ) . METHOD_5 ( ) ; VAR_1 . METHOD_2 ( ) ; },['Move Invocation'],169,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
126,126,"public void METHOD_1 ( double VAR_1 , double VAR_2 ) { VAR_3 = 0.0 ; TYPE_1 . METHOD_2 ( ( ( VAR_3 ) * VAR_1 ) , ( ( - ( VAR_3 ) ) * VAR_2 ) , false ) ; }","public void METHOD_1 ( double VAR_1 , double VAR_2 ) { VAR_3 = 0.0 ; TYPE_1 . METHOD_2 ( ( ( VAR_3 ) * VAR_1 ) , ( ( VAR_3 ) * VAR_2 ) , false ) ; }","['Move FieldRead', 'Delete UnaryOperator']",170,['Update BinaryOperator'],"['FieldRead', 'UnaryOperator']",['BinaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
127,127,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( this . VAR_2 ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( this . VAR_2 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",171,['Delete Invocation'],"['Invocation', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
128,128,"private int METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } return TYPE_1 . METHOD_4 ( VAR_2 ) . getInt ( VAR_3 , VAR_4 ) ; }",private int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return']",172,"['Delete If', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'TypeAccess', 'TypeAccess', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Return']","['If', 'Return']",GPT Missed Nodes,0.25,1.0,0.15384615384615385,0.2666666666666667,2,0,11
129,129,public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . assertTrue ( new TYPE_1 ( VAR_2 [ INT_1 ] ) . METHOD_2 ( ) . METHOD_3 ( ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { java.lang.System.out.println ( new TYPE_1 ( VAR_2 [ INT_1 ] ) . METHOD_2 ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",174,"['Update Invocation', 'Delete Invocation', 'Insert TypeAccess']","['Invocation', 'Invocation', 'FieldRead', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation', 'TypeAccess']",GPT Missed Nodes,0.6666666666666666,1.0,0.5,0.6666666666666666,3,0,3
130,130,"TYPE_1 < TYPE_2 > METHOD_1 ( long VAR_1 , java.lang.String VAR_2 ) ;","TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_2 , long VAR_1 ) ;",['Move Parameter'],175,"['Move Parameter', 'Move Parameter']",['Parameter'],"['Parameter', 'Parameter']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
131,131,public java.lang.String METHOD_1 ( ) { return java.lang.String . METHOD_2 ( VAR_1 ) ; },public int METHOD_1 ( ) { return VAR_1 ; },"['Update TypeReference', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",177,"['Update TypeAccess', 'Update Invocation', 'Update Return']","['TypeReference', 'FieldRead', 'TypeAccess', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation', 'Return']",Partial Match,0.4,0.0,0.0,0.0,0,3,5
132,132,"private static void METHOD_1 ( ) { if ( ! ( VAR_1 . get ( ) . isEmpty ( ) ) ) { VAR_2 = new TYPE_1 ( ) . METHOD_2 ( VAR_3 class , VAR_1 . getString ( STRING_1 ) ) ; } }","private static void METHOD_1 ( ) { if ( ( VAR_1 . getString ( STRING_1 ) ) != null ) { VAR_2 = new TYPE_1 ( ) . METHOD_2 ( VAR_3 class , VAR_1 . getString ( STRING_1 ) ) ; } }","['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Insert Literal', 'Insert TypeAccess', 'Delete Invocation', 'Delete UnaryOperator']",179,"['Delete Invocation', 'Insert Invocation']","['BinaryOperator', 'Invocation', 'Invocation', 'Literal', 'TypeAccess', 'Invocation', 'UnaryOperator']","['Invocation', 'Invocation']",GPT Missed Nodes,0.2,0.5,0.14285714285714285,0.22222222222222224,1,1,6
133,133,public void METHOD_1 ( ) { if ( ( this ) != null ) { TYPE_1 . METHOD_2 ( this ) ; VAR_1 . show ( ) ; } },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this ) ; VAR_1 . show ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete ThisAccess', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",180,['Delete Invocation'],"['Invocation', 'Invocation', 'ThisAccess', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,7
134,134,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 VAR_2 ) { if ( VAR_2 != null ) { VAR_3 . info ( STRING_1 , VAR_4 . getName ( ) ) ; VAR_5 . METHOD_2 ( VAR_4 . getName ( ) ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 VAR_2 ) { VAR_3 . info ( STRING_1 , VAR_4 . getName ( ) ) ; VAR_5 . METHOD_2 ( VAR_4 . getName ( ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",183,['Delete Invocation'],"['Invocation', 'Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,7
135,135,"public void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String ... VAR_2 ) { for ( final java.lang.String label : VAR_2 ) VAR_1 . METHOD_2 ( ) . METHOD_3 ( label , this . METHOD_2 ( ) ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String ... VAR_2 ) { for ( final java.lang.String label : VAR_2 ) this . METHOD_2 ( ) . METHOD_3 ( label , VAR_1 . METHOD_2 ( ) , null ) ; }","['Move VariableRead', 'Move Invocation', 'Insert Literal']",185,"['Move Invocation', 'Update VariableRead', 'Insert VariableRead', 'Insert Invocation']","['VariableRead', 'Invocation', 'Literal']","['Invocation', 'VariableRead', 'VariableRead', 'Invocation']",GPT Missed Nodes,0.6666666666666666,0.25,0.3333333333333333,0.28571428571428575,1,3,2
136,136,public java.lang.Object METHOD_1 ( ) { synchronized ( VAR_1 ) { METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_2 . isEmpty ( ) ) ; return VAR_2 . get ( 0 ) ; } },public java.lang.Object METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( VAR_2 . isEmpty ( ) ) { METHOD_2 ( ) ; } TYPE_1 . METHOD_3 ( VAR_2 . isEmpty ( ) ) ; return VAR_2 . get ( 0 ) ; } },"['Insert If', 'Insert Invocation', 'Insert Block', 'Insert TypeAccess', 'Move Invocation']",190,"['Insert Block', 'Insert Invocation']","['If', 'Invocation', 'Block', 'TypeAccess', 'Invocation']","['Block', 'Invocation']",GPT Missed Nodes,0.5,1.0,0.4,0.5714285714285715,2,0,3
137,137,public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( ( ! ( METHOD_3 ( ) ) ) && ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) { METHOD_5 ( ) ; } },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) { METHOD_5 ( ) ; } },"['Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",191,['Delete Invocation'],"['Invocation', 'Invocation', 'UnaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
138,138,"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( INT_1 , 1 , 0 ) ; VAR_2 . METHOD_2 ( 0 , 0 ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) ; }","public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( INT_1 , 1 , 0 ) ; VAR_2 . METHOD_2 ( 0 , 0 ) . METHOD_3 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_4 ( ) ; }",['Move Invocation'],192,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
139,139,public void add ( TYPE_1 c ) { if ( ! ( VAR_1 . contains ( c ) ) ) { VAR_1 . add ( c ) ; } METHOD_1 ( ) ; },public void add ( TYPE_1 c ) { VAR_1 . add ( c ) ; METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",193,['Delete Invocation'],"['Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
140,140,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { METHOD_2 ( ) ; } else { if ( ( VAR_2 ) != null ) { METHOD_3 ( ) ; } else { METHOD_2 ( ) ; } } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { METHOD_2 ( ) ; } else { METHOD_2 ( ) ; } },"['Move If', 'Move FieldRead', 'Move Block', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",194,['Delete Invocation'],"['If', 'FieldRead', 'Block', 'FieldRead', 'Literal', 'BinaryOperator', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.1,0.18181818181818182,1,0,9
141,141,public TYPE_1 METHOD_1 ( final java.lang.String fileName ) { assert null != ( this . path ) ; return TYPE_1 . METHOD_1 ( ( ( ( this . VAR_1 . toString ( ) ) + STRING_1 ) + fileName ) ) ; },public TYPE_1 METHOD_1 ( final java.lang.String fileName ) { assert null != ( this . path ) ; return TYPE_1 . METHOD_1 ( ( ( this . VAR_1 . toString ( ) ) + fileName ) ) ; },"['Move BinaryOperator', 'Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",195,['Delete TypeAccess'],"['BinaryOperator', 'VariableRead', 'FieldRead', 'BinaryOperator']",['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
142,142,public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { getActivity ( ) . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { getActivity ( ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",197,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
143,143,protected void METHOD_1 ( TYPE_1 result ) { if ( result != null ) { VAR_1 . METHOD_2 ( result ) ; } else { VAR_1 . METHOD_3 ( VAR_2 ) ; } },protected void METHOD_1 ( TYPE_1 result ) { VAR_1 . METHOD_2 ( result ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",198,"['Delete Return', 'Delete Invocation']","['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']","['Return', 'Invocation']",Partial Match,0.125,0.5,0.1,0.16666666666666669,1,1,9
144,144,public void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",199,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
145,145,public java.lang.Boolean METHOD_1 ( ) { return ( ( VAR_1 ) && ( ( VAR_2 ) != null ) ) && ( VAR_2 . METHOD_1 ( ) ) ; },public java.lang.Boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",200,"['Delete Invocation', 'Delete VariableRead', 'Delete Invocation']","['FieldRead', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator', 'TypeAccess', 'Invocation', 'BinaryOperator']","['Invocation', 'VariableRead', 'Invocation']",Partial Match,0.16666666666666666,0.3333333333333333,0.125,0.18181818181818182,1,2,7
146,146,"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { java.lang.String VAR_3 = METHOD_2 ( STRING_1 ) ; if ( VAR_3 != null ) METHOD_1 ( VAR_4 . split ( STRING_2 ) , VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { java.lang.String VAR_3 = METHOD_2 ( STRING_1 ) ; METHOD_1 ( VAR_4 . split ( STRING_2 ) , VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",201,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
147,147,"public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { remove ( VAR_1 ) ; } TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_1 = new TYPE_2 ( VAR_2 ) ; add ( VAR_1 , VAR_4 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { remove ( VAR_1 ) ; } VAR_1 = new TYPE_2 ( VAR_2 ) ; add ( VAR_1 , VAR_4 ) ; }",['Move If'],202,['Move LocalVariable'],['If'],['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
148,148,"private boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return ( VAR_3 ) || ( ( ( ( 0 <= VAR_1 ) && ( VAR_1 < INT_1 ) ) && ( 0 <= VAR_2 ) ) && ( VAR_2 < INT_1 ) ) ; }","private boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return ( ( ( 0 <= VAR_1 ) && ( VAR_1 < INT_1 ) ) && ( 0 <= VAR_2 ) ) && ( VAR_2 < INT_1 ) ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",203,"['Delete VariableRead', 'Delete BinaryOperator']","['BinaryOperator', 'FieldRead', 'BinaryOperator']","['VariableRead', 'BinaryOperator']",Partial Match,0.3333333333333333,0.5,0.3333333333333333,0.4,1,1,2
149,149,public java.lang.String toString ( ) { return ( ( java.lang.Integer.toString ( ( ( VAR_1 ) / INT_1 ) ) ) + STRING_1 ) + ( VAR_2 ) ; },public java.lang.String toString ( ) { return java.lang.Integer.toString ( ( ( VAR_1 ) / INT_1 ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",204,"['Delete BinaryOperator', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead']","['Invocation', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator']","['BinaryOperator', 'BinaryOperator', 'VariableRead', 'VariableRead']",Partial Match,0.25,0.5,0.4,0.4444444444444445,2,2,3
150,150,private boolean METHOD_1 ( java.lang.String path ) { return ( ( VAR_1 ) != null ) && ( VAR_2 . contains ( path ) ) ; },private boolean METHOD_1 ( java.lang.String path ) { return VAR_2 . contains ( path ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",205,['Delete VariableRead'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
151,151,public void METHOD_1 ( ) throws java.lang.Throwable { try { VAR_1 . METHOD_1 ( ) ; } finally { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } } },public void METHOD_1 ( ) throws java.lang.Throwable { try { VAR_1 . METHOD_1 ( ) ; } finally { VAR_2 . METHOD_2 ( ) ; } },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",206,"['Delete VariableRead', 'Delete Return']","['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']","['VariableRead', 'Return']",Partial Match,0.0,0.0,0.0,0.0,0,2,6
152,152,public static int METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = java.lang.Integer.parseInt ( VAR_3 . trim ( ) ) ; return VAR_2 ; },public static int METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = java.lang.Integer.parseInt ( VAR_1 ) ; return VAR_2 ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",207,"['Delete Invocation', 'Delete VariableRead', 'Update VariableRead']","['VariableRead', 'TypeAccess', 'Invocation']","['Invocation', 'VariableRead', 'VariableRead']",GPT Missed Nodes,0.6666666666666666,0.3333333333333333,0.3333333333333333,0.3333333333333333,1,2,2
153,153,"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { new TYPE_2 ( java.lang.Integer.toString ( VAR_3 ) ) . execute ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { }","['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Invocation']",208,['Delete Invocation'],"['TypeAccess', 'TypeAccess', 'Invocation', 'ConstructorCall', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
154,154,"public void METHOD_1 ( java.lang.String type , TYPE_1 message ) { switch ( type ) { case STRING_1 : METHOD_2 ( message ) ; default : java.lang.System.err.println ( ( STRING_2 + ( TYPE_2 . METHOD_3 ( message . METHOD_4 ( ) ) ) ) ) ; } }","public void METHOD_1 ( java.lang.String type , TYPE_1 message ) { switch ( type ) { case STRING_1 : METHOD_2 ( message ) ; default : java.lang.System.err.println ( ( STRING_2 + ( message . METHOD_4 ( ) ) ) ) ; } }","['Update Invocation', 'Move Invocation', 'Move FieldRead', 'Move BinaryOperator', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",209,['Delete Invocation'],"['Invocation', 'Invocation', 'FieldRead', 'BinaryOperator', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.14285714285714285,0.25,1,0,6
155,155,public void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ( listener ) != null ) { listener . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete If']",210,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'FieldRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
156,156,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( ! ( VAR_3 . getText ( ) . equals ( STRING_1 ) ) ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { METHOD_3 ( ) ; } },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",211,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.14285714285714285,0.25,1,0,6
157,157,boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) || ( new java.lang.Double ( VAR_1 ) . equals ( VAR_2 ) ) ; },boolean METHOD_1 ( ) { return new java.lang.Double ( VAR_1 ) . equals ( VAR_2 ) ; },"['Move Invocation', 'Delete Invocation', 'Delete BinaryOperator']",212,"['Delete BinaryOperator', 'Delete Invocation']","['Invocation', 'Invocation', 'BinaryOperator']","['BinaryOperator', 'Invocation']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
158,158,public java.lang.String METHOD_1 ( ) { return ( ( ( METHOD_2 ( VAR_1 ) ) + ( METHOD_2 ( VAR_2 ) ) ) + ( METHOD_2 ( VAR_3 ) ) ) + ( METHOD_3 ( ) ) ; },public java.lang.String METHOD_1 ( ) { return ( ( METHOD_2 ( VAR_1 ) ) + ( METHOD_2 ( VAR_2 ) ) ) + ( METHOD_2 ( VAR_3 ) ) ; },"['Move BinaryOperator', 'Delete Invocation', 'Delete BinaryOperator']",213,['Delete Invocation'],"['BinaryOperator', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
159,159,"public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { if ( ( ( VAR_4 ) == 1 ) && ( VAR_1 > INT_1 ) ) { VAR_5 . METHOD_2 ( ) ; new TYPE_1 ( ) . execute ( VAR_1 ) ; } }","public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { if ( ( VAR_4 ) == 1 ) { VAR_5 . METHOD_2 ( ) ; new TYPE_1 ( ) . execute ( VAR_1 ) ; } }","['Move BinaryOperator', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",214,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
160,160,public boolean METHOD_1 ( TYPE_1 item ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_1 ( item ) ) ) { return true ; } return super . METHOD_1 ( item ) ; },public boolean METHOD_1 ( TYPE_1 item ) { if ( VAR_1 . METHOD_1 ( item ) ) { return true ; } return super . METHOD_1 ( item ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",216,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,5
161,161,"public TYPE_1 METHOD_1 ( ) { return ( ( content ) == null ) || ( VAR_1 . trim ( ) . equals ( STRING_1 ) ) ? null : TYPE_1 . METHOD_2 ( content , METHOD_3 ( ) ) ; }","public TYPE_1 METHOD_1 ( ) { return ( content ) == null ? null : TYPE_1 . METHOD_2 ( content , METHOD_3 ( ) ) ; }","['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",218,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.16666666666666666,0.2857142857142857,1,0,5
162,162,public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( STRING_1 ) ; },public java.lang.String METHOD_1 ( ) { return STRING_1 ; },"['Update TypeReference', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",221,"['Update TypeReference', 'Update Invocation', 'Delete Invocation', 'Insert TypeReference']","['TypeReference', 'FieldRead', 'TypeAccess', 'Invocation']","['TypeReference', 'Invocation', 'Invocation', 'TypeReference']",GPT Missed Nodes,0.5,0.5,0.5,0.5,2,2,2
163,163,public void METHOD_1 ( ) { this . METHOD_2 ( 0.0F ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) ; },public void METHOD_1 ( ) { this . METHOD_2 ( 0.0F ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",222,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
164,164,public void METHOD_1 ( TYPE_1 node ) throws TYPE_2 { if ( TYPE_3 . METHOD_2 ( node ) ) { node . METHOD_3 ( TYPE_4 . METHOD_4 ( node ) ) ; } super . METHOD_1 ( node ) ; },public void METHOD_1 ( TYPE_1 node ) throws TYPE_2 { node . METHOD_3 ( TYPE_4 . METHOD_4 ( node ) ) ; super . METHOD_1 ( node ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",223,['Delete If'],"['Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'Block', 'If']",['If'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
165,165,"public java.awt.Color [ ] METHOD_1 ( ) { return new java.awt.Color [ ] { VAR_1 , VAR_2 } ; }","public java.awt.Color [ ] METHOD_1 ( ) { return new java.awt.Color [ ] { VAR_2 , VAR_1 } ; }",['Move FieldRead'],224,['Move TypeAccess'],['FieldRead'],['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
166,166,public void METHOD_1 ( java.lang.String filename ) { if ( ! ( this . VAR_1 . METHOD_2 ( filename ) ) ) { METHOD_3 ( filename ) ; METHOD_4 ( filename ) ; METHOD_5 ( VAR_2 ) ; } },public void METHOD_1 ( java.lang.String filename ) { METHOD_3 ( filename ) ; METHOD_4 ( filename ) ; METHOD_5 ( VAR_2 ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",225,['Delete Block'],"['Invocation', 'Invocation', 'Invocation', 'ThisAccess', 'FieldRead', 'VariableRead', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.14285714285714285,1.0,0.1,0.18181818181818182,1,0,9
167,167,public java.lang.String METHOD_1 ( ) { return ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) . getValue ( ) ; },public java.lang.String METHOD_1 ( ) { return ( ( java.lang.String ) ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) ; },"['Move Invocation', 'Update TypeReference', 'Delete Invocation']",226,"['Update TypeReference', 'Delete Invocation']","['Invocation', 'TypeReference', 'Invocation']","['TypeReference', 'Invocation']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
168,168,public void handle ( TYPE_1 event ) { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_1 ( ) ; init ( ) ; },public void handle ( TYPE_1 event ) { VAR_1 . METHOD_1 ( ) ; init ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",227,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
169,169,public void setValue ( final java.lang.Object value ) throws java.lang.Exception { throw new TYPE_1 ( ( STRING_1 + ( name ) ) ) ; },public void setValue ( final java.lang.Object value ) throws java.lang.Exception { throw new TYPE_1 ( ( STRING_1 + ( getName ( ) ) ) ) ; },"['Insert Invocation', 'Delete FieldRead']",228,"['Update FieldRead', 'Insert Invocation']","['Invocation', 'FieldRead']","['FieldRead', 'Invocation']",Exact Match,1.0,0.5,0.5,0.5,1,1,1
170,170,"public java.lang.Object METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { return ( ( java.lang.String ) ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) + ( ( java.lang.String ) ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) ; }","public java.lang.Object METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { return ( TYPE_1 . METHOD_2 ( VAR_1 ) . toString ( ) ) + ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference']",229,"['Delete TypeReference', 'Delete TypeReference', 'Insert Invocation', 'Delete TypeReference']","['Invocation', 'Invocation', 'TypeReference', 'TypeReference']","['TypeReference', 'TypeReference', 'Invocation', 'TypeReference']",Exact Match,1.0,0.75,0.75,0.75,3,1,1
171,171,void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = VAR_2 ; VAR_3 . METHOD_2 ( VAR_2 ) ; } },void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_1 = VAR_2 ; } },['Move Assignment'],230,['Move Assignment'],['Assignment'],['Assignment'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
172,172,"public < TYPE_1 > boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_1 > VAR_2 ) { return ( VAR_1 != null ) && ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; }","public < TYPE_1 > boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_1 > VAR_2 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",231,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,5
173,173,"public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = null ; METHOD_2 ( true ) ; if ( ! VAR_1 ) TYPE_1 . METHOD_3 ( this , STRING_1 , VAR_3 ) . show ( ) ; }","public void METHOD_1 ( ) { VAR_2 = null ; METHOD_2 ( true ) ; TYPE_1 . METHOD_3 ( this , STRING_1 , VAR_3 ) . show ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",233,"['Delete Parameter', 'Delete Invocation']","['Invocation', 'TypeReference', 'Parameter', 'VariableRead', 'UnaryOperator', 'Block', 'If']","['Parameter', 'Invocation']",GPT Missed Nodes,0.2857142857142857,0.5,0.14285714285714285,0.22222222222222224,1,1,6
174,174,"public boolean startsWith ( java.lang.String VAR_1 ) { return startsWith ( VAR_2 , VAR_1 , 0 ) ; }",public boolean startsWith ( java.lang.String VAR_1 ) { return false ; },"['Insert Literal', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",234,['Update Return'],"['Literal', 'TypeAccess', 'VariableRead', 'Literal', 'Invocation']",['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
175,175,"public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . replace ( STRING_1 , STRING_2 ) . replace ( STRING_3 , STRING_4 ) . replace ( STRING_5 , STRING_6 ) . replace ( STRING_7 , STRING_8 ) . replace ( STRING_9 , STRING_8 ) ; }","public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . replace ( STRING_1 , STRING_2 ) . replace ( STRING_3 , STRING_4 ) . replace ( STRING_5 , STRING_6 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",235,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,1.0,0.2857142857142857,0.4444444444444445,2,0,5
176,176,"protected final java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String name = VAR_1 ; if ( VAR_2 . contains ( VAR_3 ) ) { name = VAR_2 . substring ( 0 , VAR_1 . METHOD_2 ( VAR_3 ) ) ; } return name ; }","protected final java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String name = VAR_1 ; if ( ( VAR_1 . METHOD_2 ( VAR_3 ) ) >= 0 ) { name = VAR_2 . substring ( 0 , VAR_1 . METHOD_2 ( VAR_3 ) ) ; } return name ; }","['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Insert Literal', 'Insert VariableRead', 'Delete TypeAccess']",236,"['Update Invocation', 'Insert Invocation', 'Insert VariableRead']","['BinaryOperator', 'Invocation', 'Invocation', 'Literal', 'VariableRead', 'TypeAccess']","['Invocation', 'Invocation', 'VariableRead']",GPT Missed Nodes,0.4,0.6666666666666666,0.3333333333333333,0.4444444444444444,2,1,4
177,177,"public java.util.Collection < TYPE_1 > METHOD_1 ( final java.lang.Long VAR_1 ) throws TYPE_2 { try { return VAR_2 . get ( VAR_1 ) . values ( ) ; } catch ( TYPE_3 VAR_3 ) { throw new TYPE_2 ( null , VAR_3 . METHOD_2 ( ) ) ; } }","public java.util.List < TYPE_1 > METHOD_1 ( final java.lang.Long VAR_1 ) throws TYPE_2 { try { return VAR_2 . get ( VAR_1 ) ; } catch ( TYPE_3 VAR_3 ) { throw new TYPE_2 ( null , VAR_3 . METHOD_2 ( ) ) ; } }","['Update TypeReference', 'Move Invocation', 'Delete Invocation']",237,"['Update TypeReference', 'Update TypeReference', 'Delete Invocation']","['TypeReference', 'Invocation', 'Invocation']","['TypeReference', 'TypeReference', 'Invocation']",Exact Match,1.0,0.6666666666666666,0.6666666666666666,0.6666666666666666,2,1,1
178,178,public boolean METHOD_1 ( ) { if ( ( VAR_1 . get ( ) ) == 0 ) { return VAR_2 ; } else { return VAR_3 . get ( ) ; } },public boolean METHOD_1 ( ) { return VAR_3 . get ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",238,"['Delete VariableRead', 'Delete Invocation', 'Delete Return']","['Return', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'Block', 'If']","['VariableRead', 'Invocation', 'Return']",Partial Match,0.2222222222222222,0.6666666666666666,0.2,0.30769230769230765,2,1,8
179,179,"public void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ( VAR_2 * INT_1 ) <= ( VAR_3 . size ( ) ) ) { METHOD_2 ( VAR_1 ) ; } }","public void METHOD_1 ( int VAR_1 , int VAR_2 ) { METHOD_2 ( VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",240,['Delete Invocation'],"['Invocation', 'VariableRead', 'FieldRead', 'BinaryOperator', 'TypeAccess', 'Invocation', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
180,180,"public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { final TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; return TYPE_3 . METHOD_4 ( VAR_3 , VAR_1 ) . METHOD_5 ( VAR_2 ) . toString ( ) ; }","public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { final TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; return TYPE_3 . METHOD_4 ( VAR_3 , VAR_1 ) . METHOD_5 ( VAR_2 ) ; }","['Move Invocation', 'Delete Invocation']",241,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
181,181,public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete UnaryOperator']",242,['Delete BinaryOperator'],"['Invocation', 'UnaryOperator']",['BinaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
182,182,"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String text ) { if ( VAR_2 ) { return TYPE_2 . METHOD_2 ( VAR_1 , TYPE_2 . METHOD_3 ( VAR_1 , text ) ) ; } else { return text ; } }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String text ) { if ( VAR_2 ) { return TYPE_2 . METHOD_2 ( VAR_1 , text ) ; } else { return text ; } }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",244,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
183,183,static java.lang.String toString ( java.lang.Exception VAR_1 ) { TYPE_1 . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( new TYPE_3 ( VAR_2 ) ) ; return VAR_3 . toString ( ) ; },static java.lang.String toString ( java.lang.Exception VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_1 . METHOD_1 ( VAR_1 ) . METHOD_2 ( new TYPE_3 ( VAR_2 ) ) ; return VAR_3 . toString ( ) ; },"['Move Invocation', 'Delete VariableRead']",245,"['Delete Invocation', 'Insert Invocation']","['Invocation', 'VariableRead']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.0,0.0,0.0,0,2,2
184,184,public void METHOD_1 ( TYPE_1 VAR_1 ) { float VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ( ( ( ( 1 - VAR_2 ) * VAR_5 ) + VAR_6 ) - INT_1 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { float VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ( ( ( 1 - VAR_2 ) * VAR_5 ) + VAR_6 ) ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",247,['Delete Assignment'],"['BinaryOperator', 'FieldRead', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
185,185,"public void METHOD_1 ( TYPE_1 result ) { VAR_1 . assertEquals ( 1 , ( ( TYPE_2 ) ( VAR_2 . get ( STRING_1 ) ) ) . size ( ) ) ; }","public void METHOD_1 ( TYPE_1 result ) { VAR_1 . assertEquals ( 1 , ( ( long [ ] ) ( VAR_2 . get ( STRING_1 ) ) ) . length ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move Literal', 'Insert FieldRead', 'Move Invocation', 'Update TypeReference', 'Delete Invocation']",248,"['Update TypeReference', 'Update Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'Literal', 'FieldRead', 'Invocation', 'TypeReference', 'Invocation']","['TypeReference', 'Invocation']",GPT Missed Nodes,0.4,1.0,0.25,0.4,2,0,6
186,186,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_3 = false ; } else { VAR_3 = true ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_3 = true ; } else { VAR_3 = false ; } },"['Move Assignment', 'Move Assignment']",249,"['Update Assignment', 'Update Assignment']","['Assignment', 'Assignment']","['Assignment', 'Assignment']",Exact Match,1.0,0.0,0.0,0.0,0,2,2
187,187,"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 msg ) throws java.lang.Exception { if ( ! ( TYPE_3 . METHOD_2 ( VAR_2 ) ) ) { TYPE_3 . METHOD_3 ( VAR_2 , TYPE_4 . METHOD_4 ( VAR_3 ) ) ; } }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 msg ) throws java.lang.Exception { if ( ! ( TYPE_3 . METHOD_2 ( VAR_2 ) ) ) { TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ; } }","['Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",250,"['Delete Invocation', 'Delete TypeAccess']","['TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
188,188,"public java.util.HashMap < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }","public java.util.HashMap < java.lang.String , java.lang.String > METHOD_1 ( ) { return METHOD_1 ( ) ; }","['Insert Invocation', 'Delete FieldRead']",251,"['Update Return', 'Insert Invocation']","['Invocation', 'FieldRead']","['Return', 'Invocation']",Partial Match,0.3333333333333333,0.5,0.5,0.5,1,1,1
189,189,public java.lang.String METHOD_1 ( ) { this . VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; return STRING_1 ; },public java.lang.String METHOD_1 ( java.lang.String VAR_3 ) { this . VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; return STRING_1 ; },"['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead', 'Delete TypeAccess']",252,['Insert Parameter'],"['Parameter', 'TypeReference', 'VariableRead', 'TypeAccess']",['Parameter'],GPT Missed Nodes,0.25,1.0,0.25,0.4,1,0,3
190,190,public boolean METHOD_1 ( ) throws TYPE_1 { ( position ) ++ ; if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; return true ; } return false ; },public boolean METHOD_1 ( ) throws TYPE_1 { if ( METHOD_2 ( ) ) { ( position ) ++ ; METHOD_3 ( ) ; return true ; } return false ; },['Move UnaryOperator'],253,['Move UnaryOperator'],['UnaryOperator'],['UnaryOperator'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
191,191,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { VAR_3 . setText ( TYPE_2 . METHOD_2 ( ( ( TYPE_3 ) ( VAR_3 . getContext ( ) ) ) ) ) ; } VAR_2 = ! ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { VAR_3 . setText ( TYPE_2 . METHOD_2 ( ( ( TYPE_3 ) ( VAR_3 . getContext ( ) ) ) ) ) ; } VAR_2 = ! ( VAR_2 ) ; },"['Move FieldRead', 'Delete UnaryOperator']",255,['Delete Wra'],"['FieldRead', 'UnaryOperator']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
192,192,public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ! ( VAR_2 . isEmpty ( VAR_1 ) ) ) && ( ! ( VAR_3 . equals ( STRING_1 ) ) ) ) { VAR_4 = VAR_1 ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( VAR_2 . isEmpty ( VAR_1 ) ) ) { VAR_4 = VAR_1 ; } },"['Move UnaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",257,['Delete Invocation'],"['UnaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
193,193,public void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ( ( ( VAR_1 ) != true ) && ( ( VAR_2 ) != true ) ) && ( ( VAR_3 ) != true ) ) { ( VAR_4 . time ) ++ ; } },public void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ( ( VAR_1 ) != true ) && ( ( VAR_2 ) != true ) ) { ( VAR_4 . time ) ++ ; } },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",258,['Delete Block'],"['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Block'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
194,194,"void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 , STRING_1 , null ) ; VAR_1 . METHOD_4 ( true ) ; }","void METHOD_1 ( ) { TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 , STRING_1 , null ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_4 ( true ) ; }",['Move Invocation'],259,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
195,195,public java.lang.Integer METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; int VAR_2 = METHOD_3 ( ) ; return ( ( ( getType ( ) . METHOD_1 ( ) ) * INT_1 ) + ( VAR_1 * INT_2 ) ) + VAR_2 ; },public java.lang.Integer METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; int VAR_2 = METHOD_3 ( ) ; return ( ( ( type . METHOD_1 ( ) ) * INT_1 ) + ( VAR_1 * INT_2 ) ) + VAR_2 ; },"['Insert FieldRead', 'Delete Invocation']",260,"['Update Invocation', 'Update TypeAccess']","['FieldRead', 'Invocation']","['Invocation', 'TypeAccess']",Partial Match,0.3333333333333333,0.0,0.0,0.0,0,2,2
196,196,public final TYPE_1 < TYPE_2 > get ( int key ) { return METHOD_1 ( TYPE_3 . METHOD_2 ( key ) ) ; },public final TYPE_1 < TYPE_2 > get ( int key ) { return METHOD_1 ( key ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",261,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation']",Exact Match,1.0,1.0,0.5,0.6666666666666666,2,0,2
197,197,public boolean METHOD_1 ( ) { return ( this . VAR_1 ) || ( java.lang.Thread . METHOD_2 ( ) . METHOD_3 ( ) ) ; },public boolean METHOD_1 ( ) { return this . VAR_1 ; },"['Move FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator']",262,['Delete Invocation'],"['FieldRead', 'TypeAccess', 'Invocation', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
198,198,public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( VAR_3 ) ; METHOD_2 ( ) ; },['Move Invocation'],263,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
199,199,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( FLOAT_1 ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( FLOAT_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",264,['Delete Invocation'],"['Invocation', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,7
200,200,public void METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) METHOD_2 ( ( -- ( VAR_1 ) ) ) ; },public void METHOD_1 ( ) { METHOD_2 ( ( -- ( VAR_1 ) ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",266,['Delete UnaryOperator'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
201,201,private void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; },private void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Delete Invocation']",268,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.25,0.4,1,0,3
202,202,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { VAR_2 . METHOD_2 ( getActivity ( ) ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( ( VAR_2 ) == null ) ) { VAR_2 . METHOD_2 ( getActivity ( ) ) ; } },"['Insert UnaryOperator', 'Insert BinaryOperator', 'Insert FieldRead', 'Insert Literal', 'Delete FieldRead']",269,"['Insert VariableRead', 'Insert VariableRead', 'Insert If']","['UnaryOperator', 'BinaryOperator', 'FieldRead', 'Literal', 'FieldRead']","['VariableRead', 'VariableRead', 'If']",Partial Match,0.0,0.0,0.0,0.0,0,3,5
203,203,public boolean METHOD_1 ( ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) != 0 ) && ( ( VAR_2 . METHOD_3 ( ) ) == true ) ) { return true ; } else { return false ; } },public boolean METHOD_1 ( ) { VAR_2 . METHOD_3 ( ) ; return false ; },"['Move Invocation', 'Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",270,"['Delete Return', 'Delete Invocation', 'Delete Return']","['Invocation', 'Return', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Literal', 'BinaryOperator', 'BinaryOperator', 'Literal', 'Return', 'Block', 'Block', 'If']","['Return', 'Invocation', 'Return']",GPT Missed Nodes,0.2857142857142857,0.6666666666666666,0.14285714285714285,0.23529411764705882,2,1,12
204,204,public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == 0 ) { return STRING_1 ; } return STRING_2 ; },public java.lang.String METHOD_1 ( ) { return STRING_2 ; },"['Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",272,"['Delete Return', 'Delete Invocation']","['Invocation', 'Literal', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'If']","['Return', 'Invocation']",GPT Missed Nodes,0.2857142857142857,1.0,0.2857142857142857,0.4444444444444445,2,0,5
205,205,public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) METHOD_3 ( ) ; else if ( ! ( METHOD_4 ( ) ) ) METHOD_5 ( ) ; METHOD_6 ( ) ; return METHOD_7 ( ) ; },public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) METHOD_3 ( ) ; else if ( ! ( METHOD_4 ( ) ) ) METHOD_5 ( ) ; else METHOD_6 ( ) ; return METHOD_7 ( ) ; },"['Insert Block', 'Move Invocation']",273,"['Insert Block', 'Insert Invocation']","['Block', 'Invocation']","['Block', 'Invocation']",Exact Match,1.0,0.5,0.5,0.5,1,1,1
206,206,public double METHOD_1 ( ) { double VAR_1 = ( ( ( double ) ( VAR_2 ) ) / INT_1 ) / ( ( double ) ( length ) ) ; return VAR_1 ; },public double METHOD_1 ( ) { double VAR_1 = ( ( double ) ( VAR_2 ) ) / ( ( double ) ( length ) ) ; return VAR_1 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",274,['Delete TypeAccess'],"['BinaryOperator', 'FieldRead', 'FieldRead', 'BinaryOperator']",['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
207,207,public java.lang.String toString ( ) { return ( ( ( ( time ) + STRING_1 ) + ( VAR_1 . id ) ) + STRING_1 ) + ( VAR_2 . id ) ; },public java.lang.String toString ( ) { return ( ( ( ( ( ( time ) + STRING_1 ) + ( type ) ) + STRING_1 ) + ( VAR_1 . id ) ) + STRING_1 ) + ( VAR_2 . id ) ; },"['Insert BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Move FieldRead', 'Insert BinaryOperator', 'Move FieldRead', 'Move BinaryOperator', 'Insert FieldRead', 'Insert FieldRead']",276,"['Insert VariableRead', 'Insert VariableRead']","['BinaryOperator', 'BinaryOperator', 'FieldRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'FieldRead', 'FieldRead']","['VariableRead', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,9
208,208,public java.lang.Integer METHOD_1 ( ) { return VAR_1 ; },public int METHOD_1 ( ) { return VAR_1 ; },['Update TypeReference'],277,['Update TypeAccess'],['TypeReference'],['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
209,209,protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == VAR_1 ) VAR_2 = null ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = null ; },"['Move Assignment', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",279,['Delete Assignment'],"['Assignment', 'FieldRead', 'VariableRead', 'BinaryOperator', 'Block', 'If']",['Assignment'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
210,210,"public TYPE_1 METHOD_1 ( int VAR_1 ) { return new TYPE_2 ( VAR_2 , VAR_3 , VAR_1 , VAR_4 ) ; }","public TYPE_1 METHOD_1 ( int VAR_1 ) { return new TYPE_2 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ; }",['Move FieldRead'],280,['Move VariableRead'],['FieldRead'],['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
211,211,protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( false ) ; super . METHOD_1 ( ) ; },protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( false ) ; },['Move Invocation'],281,"['Move Invocation', 'Move Invocation']",['Invocation'],"['Invocation', 'Invocation']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
212,212,public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) VAR_2 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",283,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.14285714285714285,0.25,1,0,6
213,213,public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ; METHOD_5 ( STRING_3 ) . to ( STRING_4 ) . to ( STRING_5 ) ; },public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) . METHOD_4 ( STRING_2 ) ; METHOD_5 ( STRING_3 ) . to ( STRING_4 ) . to ( STRING_5 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",284,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
214,214,"public static java.lang.String METHOD_1 ( java.lang.String str , java.lang.Object ... args ) { if ( ( args == null ) || ( ( args.length ) == 0 ) ) { return str ; } else { return java.lang.String.format ( str , args ) ; } }","public static java.lang.String METHOD_1 ( java.lang.String str , java.lang.Object ... args ) { if ( args != null ) { return java.lang.String.format ( str , args ) ; } else { return str ; } }","['Update BinaryOperator', 'Move BinaryOperator', 'Move Return', 'Move Return', 'Delete VariableRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",285,"['Delete UnaryOperator', 'Delete Invocation', 'Delete Invocation']","['BinaryOperator', 'BinaryOperator', 'Return', 'Return', 'VariableRead', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']","['UnaryOperator', 'Invocation', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,3,9
215,215,"TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_4 VAR_3 , TYPE_4 VAR_4 , TYPE_4 VAR_5 ) ;","TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_4 VAR_2 , TYPE_4 VAR_3 , TYPE_4 VAR_4 , TYPE_4 VAR_5 , TYPE_3 VAR_1 ) ;",['Move Parameter'],286,['Move Parameter'],['Parameter'],['Parameter'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
216,216,public void METHOD_1 ( java.lang.Throwable VAR_1 ) { if ( VAR_2 == 1 ) { VAR_3 . METHOD_2 ( ) ; } },public void METHOD_1 ( java.lang.Throwable VAR_1 ) { VAR_3 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",287,['Delete Wra'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
217,217,public boolean METHOD_1 ( ) { return super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",289,"['Update TypeAccess', 'Delete Return']","['TypeReference', 'Invocation', 'Return']","['TypeAccess', 'Return']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
218,218,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) < INT_1 ) { VAR_2 = INT_1 ; } VAR_3 [ INT_2 ] = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) >= INT_1 ) { VAR_3 [ INT_2 ] = VAR_1 ; } if ( ( VAR_2 ) < INT_1 ) { VAR_2 = INT_1 ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert FieldRead', 'Move Assignment']",290,"['Insert BinaryOperator', 'Insert Assignment', 'Delete Assignment', 'Delete BinaryOperator']","['If', 'BinaryOperator', 'Block', 'FieldRead', 'FieldRead', 'Assignment']","['BinaryOperator', 'Assignment', 'Assignment', 'BinaryOperator']",GPT Missed Nodes,0.4,0.25,0.16666666666666666,0.2,1,3,5
219,219,public void METHOD_1 ( ) { if ( ( VAR_1 != null ) && ( ( VAR_2 . data ) != null ) ) { VAR_3 . METHOD_2 ( VAR_4 . list ) ; if ( VAR_5 == 1 ) { VAR_3 . METHOD_3 ( ) ; } } },public void METHOD_1 ( ) { if ( ( VAR_1 != null ) && ( ( VAR_2 . data ) != null ) ) { VAR_3 . METHOD_2 ( VAR_4 . list ) ; VAR_3 . METHOD_3 ( ) ; } },"['Move Block', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete If', 'Delete Block']",291,['Delete Block'],"['Block', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'If', 'Block']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
220,220,public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 ) { TYPE_3 . METHOD_3 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == false ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; } else { TYPE_3 . METHOD_3 ( VAR_1 ) ; } },"['Insert BinaryOperator', 'Insert Block', 'Move FieldRead', 'Insert Literal', 'Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Invocation']",292,"['Delete Invocation', 'Insert If']","['BinaryOperator', 'Block', 'FieldRead', 'Literal', 'Invocation', 'Invocation', 'VariableRead', 'Invocation']","['Invocation', 'If']",Partial Match,0.14285714285714285,0.5,0.125,0.2,1,1,7
221,221,public void METHOD_1 ( int offset ) { VAR_1 = offset ; if ( ( VAR_2 ) != null ) { METHOD_2 ( ) ; } },public void METHOD_1 ( int offset ) { VAR_1 = offset ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",293,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
222,222,public java.lang.String METHOD_1 ( ) { return java.lang.Integer.toString ( VAR_1 . METHOD_1 ( ) ) ; },public java.lang.String METHOD_1 ( ) { return new java.lang.Integer ( VAR_1 . METHOD_1 ( ) ) . toString ( ) ; },"['Insert ConstructorCall', 'Move Invocation', 'Delete TypeAccess']",294,"['Insert TypeAccess', 'Insert Invocation']","['ConstructorCall', 'Invocation', 'TypeAccess']","['TypeAccess', 'Invocation']",GPT Missed Nodes,0.6666666666666666,0.0,0.0,0.0,0,2,3
223,223,"private double METHOD_1 ( double VAR_1 , double VAR_2 , double x ) { if ( x < VAR_1 ) return 0.0 ; else if ( x > VAR_2 ) return 1.0 ; else return ( x - VAR_1 ) / ( VAR_1 - VAR_2 ) ; }","private double METHOD_1 ( double VAR_1 , double VAR_2 , double x ) { if ( x < VAR_2 ) return 1.0 ; else if ( x < VAR_1 ) return ( VAR_1 - x ) / ( VAR_1 - VAR_2 ) ; else return 0.0 ; }","['Move If', 'Update BinaryOperator', 'Move If', 'Move Return', 'Move Return', 'Move VariableRead']",295,"['Update BinaryOperator', 'Update BinaryOperator', 'Update Return', 'Update BinaryOperator', 'Update Return', 'Update BinaryOperator', 'Update Return']","['If', 'BinaryOperator', 'If', 'Return', 'Return', 'VariableRead']","['BinaryOperator', 'BinaryOperator', 'Return', 'BinaryOperator', 'Return', 'BinaryOperator', 'Return']",GPT Missed Nodes,0.5,0.14285714285714285,0.16666666666666666,0.15384615384615383,1,6,5
224,224,public final TYPE_1 < TYPE_2 > get ( java.lang.String key ) { return METHOD_1 ( TYPE_3 . METHOD_2 ( key ) ) ; },public final TYPE_1 < TYPE_2 > get ( java.lang.String key ) { return METHOD_1 ( key ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",296,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess']",Exact Match,1.0,1.0,0.5,0.6666666666666666,2,0,2
225,225,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) { VAR_2 . add ( VAR_1 ) ; return true ; } return false ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) { VAR_2 . add ( VAR_1 ) ; return true ; } else return false ; },"['Insert Block', 'Move Return']",297,['Insert Return'],"['Block', 'Return']",['Return'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
226,226,public final boolean METHOD_1 ( ) { return ( ( ( VAR_1 ) >= ( VAR_2 ) ) && ( METHOD_2 ( ) ) ) && ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; },public final boolean METHOD_1 ( ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { return ( METHOD_2 ( ) ) && ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; } return false ; },"['Insert If', 'Insert Return', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Move Return', 'Move BinaryOperator', 'Move Invocation', 'Delete BinaryOperator']",298,"['Insert LocalVariable', 'Insert Return', 'Insert BinaryOperator', 'Delete BinaryOperator', 'Update Return']","['If', 'Return', 'BinaryOperator', 'Block', 'Literal', 'Return', 'BinaryOperator', 'Invocation', 'BinaryOperator']","['LocalVariable', 'Return', 'BinaryOperator', 'BinaryOperator', 'Return']",Partial Match,0.2857142857142857,0.4,0.2222222222222222,0.2857142857142857,2,3,7
227,227,public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_1 = VAR_1 ; if ( ( this . VAR_2 ) != null ) { return this . VAR_2 . METHOD_1 ( VAR_1 ) ; } else { return null ; } },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_1 = VAR_1 ; return this . VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Return', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",299,"['Delete Invocation', 'Delete Return']","['Return', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['Invocation', 'Return']",Partial Match,0.125,0.5,0.1,0.16666666666666669,1,1,9
228,228,public void show ( ) { VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; if ( VAR_3 ) VAR_4 . METHOD_3 ( ) ; },public void show ( ) { VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",300,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
229,229,public void METHOD_1 ( int VAR_1 ) { final TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . remove ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; } },public void METHOD_1 ( int VAR_1 ) { final TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { METHOD_3 ( VAR_2 ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 . remove ( VAR_1 ) ; } },['Move Invocation'],302,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
230,230,private int METHOD_1 ( int count ) throws TYPE_1 { VAR_1 += count ; return METHOD_2 ( VAR_1 ) ; },private void METHOD_1 ( int count ) throws TYPE_1 { VAR_1 += count ; METHOD_2 ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",303,"['Update TypeAccess', 'Delete Return']","['TypeReference', 'Invocation', 'Return']","['TypeAccess', 'Return']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
231,231,public java.lang.Double METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . getConfig ( ) . METHOD_1 ( VAR_1 ) ; },public java.lang.Double METHOD_1 ( java.lang.String VAR_1 ) { return getConfig ( ) . METHOD_1 ( VAR_1 ) ; },['Update TypeAccess'],304,['Delete VariableRead'],['TypeAccess'],['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
232,232,protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( java.lang.String . METHOD_3 ( VAR_2 . getValue ( ) ) ) ) { return false ; } return true ; },protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return true ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",305,"['Delete If', 'Delete Return']","['TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation', 'Invocation', 'Literal', 'Return', 'Block', 'If']","['If', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,2,0,8
233,233,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_2 == null ) { METHOD_2 ( ) ; } if ( ( VAR_3 ) != null ) { METHOD_3 ( VAR_3 , false ) ; } VAR_4 . METHOD_4 ( METHOD_5 ( ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( ) ; if ( ( VAR_3 ) != null ) { METHOD_3 ( VAR_3 , false ) ; } VAR_4 . METHOD_4 ( METHOD_5 ( ) ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",306,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
234,234,"public boolean METHOD_1 ( TYPE_1 key , TYPE_1 VAR_1 ) { return this . VAR_2 . METHOD_1 ( key , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 key , TYPE_1 VAR_1 ) { this . VAR_2 . METHOD_1 ( key , VAR_1 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",307,"['Update TypeAccess', 'Delete Return']","['TypeReference', 'Invocation', 'Return']","['TypeAccess', 'Return']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
235,235,"private boolean METHOD_1 ( ) throws java.io.IOException , TYPE_1 { boolean VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { ( VAR_3 ) ++ ; VAR_4 = METHOD_3 ( VAR_2 ) . METHOD_4 ( VAR_2 ) ; } return VAR_1 ; }","private boolean METHOD_1 ( ) throws java.io.IOException , TYPE_1 { boolean VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { ( VAR_3 ) ++ ; VAR_4 = METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; } return VAR_1 ; }","['Update Invocation', 'Move Invocation', 'Insert Invocation', 'Delete TypeAccess', 'Delete Invocation']",309,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
236,236,"public void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; if ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == false ) { METHOD_4 ( ) ; } }","public void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; METHOD_4 ( ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",310,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
237,237,public void METHOD_1 ( ) { VAR_1 = false ; VAR_2 = true ; if ( ( METHOD_2 ( ) ) > ( METHOD_3 ( ) . METHOD_4 ( ) ) ) METHOD_5 ( ( - INT_1 ) ) ; },public void METHOD_1 ( ) { VAR_1 = false ; VAR_2 = true ; METHOD_5 ( ( - INT_1 ) ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",311,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'Invocation', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.14285714285714285,0.25,1,0,6
238,238,public static boolean METHOD_1 ( java.lang.String string ) { if ( ( string == null ) && ( STRING_1 . equals ( string ) ) ) { return true ; } return false ; },public static boolean METHOD_1 ( java.lang.String string ) { if ( ( string == null ) && ( STRING_1 . equals ( string ) ) ) { return false ; } return true ; },"['Move Return', 'Move Return']",312,"['Update Literal', 'Update Literal']","['Return', 'Return']","['Literal', 'Literal']",Partial Match,0.0,0.0,0.0,0.0,0,2,2
239,239,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 == VAR_2 ) || ( VAR_1 instanceof TYPE_2 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 == VAR_2 ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete BinaryOperator']",313,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'TypeAccess', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
240,240,"public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( 0 , 0 , ( ( VAR_1 . METHOD_2 ( ) ) - 1 ) , ( ( VAR_1 . METHOD_3 ( ) ) - 1 ) ) ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( 0 , 0 , VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",315,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Literal', 'BinaryOperator']","['Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,2,6
241,241,public double METHOD_1 ( ) { double answer = ( java.lang.Math.abs ( VAR_1 . METHOD_2 ( ) ) ) + ( java.lang.Math.abs ( VAR_2 . METHOD_2 ( ) ) ) ; answer /= FLOAT_1 ; return answer ; },public double METHOD_1 ( ) { double answer = ( VAR_1 . METHOD_2 ( ) ) + ( VAR_2 . METHOD_2 ( ) ) ; answer /= FLOAT_1 ; return answer ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",316,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation']",Exact Match,1.0,1.0,0.3333333333333333,0.5,2,0,4
242,242,public boolean METHOD_1 ( ) { if ( ( VAR_1 . c ) == null ) { return false ; } else { return VAR_2 . METHOD_1 ( ) ; } },public boolean METHOD_1 ( ) { return c . METHOD_1 ( ) ; },"['Insert Return', 'Insert Invocation', 'Insert FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",317,"['Delete If', 'Delete Return', 'Delete Return', 'Delete TypeAccess', 'Update VariableRead']","['Return', 'Invocation', 'FieldRead', 'FieldRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'TypeAccess', 'Invocation', 'Return', 'Block', 'If']","['If', 'Return', 'Return', 'TypeAccess', 'VariableRead']",Partial Match,0.3333333333333333,0.8,0.2857142857142857,0.4210526315789473,4,1,10
243,243,"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( 0 , 0 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; },"['Delete Literal', 'Delete Literal', 'Delete Invocation']",318,['Delete Invocation'],"['Literal', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
244,244,public boolean METHOD_1 ( ) { return ( position ) < ( size ) ; },public boolean METHOD_1 ( ) { return ( position ) < ( ( size ) - 1 ) ; },"['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",319,"['Insert BinaryOperator', 'Insert LocalVariable']","['BinaryOperator', 'FieldRead', 'Literal']","['BinaryOperator', 'LocalVariable']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
245,245,public void METHOD_1 ( TYPE_1 error ) { if ( error . METHOD_2 ( ) . toString ( ) . equals ( VAR_1 ) ) { VAR_2 . METHOD_3 ( ) ; } else { VAR_2 . METHOD_4 ( STRING_1 ) ; } },public void METHOD_1 ( TYPE_1 error ) { if ( error . METHOD_2 ( ) . equals ( VAR_1 ) ) { VAR_2 . METHOD_3 ( ) ; } else { VAR_2 . METHOD_4 ( STRING_1 ) ; } },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",320,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
246,246,"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.System.out.println ( STRING_1 ) ; if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_3 ) ) { METHOD_3 ( VAR_1 , VAR_2 ) ; } return false ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_3 ) ) { METHOD_3 ( VAR_1 , VAR_2 ) ; } return false ; }","['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",322,['Delete Invocation'],"['TypeAccess', 'FieldRead', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
247,247,"public void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; if ( ( ( VAR_3 ) != null ) && ( VAR_4 ) ) { VAR_3 . METHOD_2 ( ) ; } super . METHOD_1 ( ) ; }","public void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) ; } super . METHOD_1 ( ) ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",323,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
248,248,"protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( super . METHOD_1 ( VAR_1 , VAR_2 ) ) { VAR_3 = VAR_4 ; METHOD_2 ( VAR_5 . METHOD_3 ( VAR_6 ) ) ; return true ; } return false ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 = VAR_4 ; super . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Update TypeReference', 'Move Assignment', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",324,"['Update Wra', 'Delete Return', 'Delete Invocation', 'Delete Invocation']","['TypeReference', 'Assignment', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation', 'Literal', 'Return', 'Block', 'If', 'Literal', 'Return']","['Wra', 'Return', 'Invocation', 'Invocation']",Partial Match,0.2222222222222222,0.75,0.23076923076923078,0.3529411764705882,3,1,10
249,249,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) { METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",325,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
250,250,public boolean METHOD_1 ( ) { if ( VAR_1 ) { return true ; } return false ; },public boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",328,"['Delete Return', 'Delete Return']","['FieldRead', 'Literal', 'Return', 'Block', 'If', 'Literal']","['Return', 'Return']",GPT Missed Nodes,0.2,0.5,0.16666666666666666,0.25,1,1,5
251,251,protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = VAR_1 ; if ( ( VAR_2 ) != null ) METHOD_2 ( STRING_1 ) ; else METHOD_2 ( STRING_2 ) ; METHOD_3 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = VAR_1 ; METHOD_2 ( STRING_1 ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",329,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
252,252,public java.util.LinkedList < TYPE_1 > METHOD_1 ( ) { return ( ( java.util.LinkedList < TYPE_1 > ) ( VAR_1 . METHOD_2 ( ) ) ) ; },public java.util.LinkedList < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation']",331,"['Delete Invocation', 'Delete TypeReference']","['FieldRead', 'TypeReference', 'TypeReference', 'TypeAccess', 'Invocation']","['Invocation', 'TypeReference']",GPT Missed Nodes,0.5,1.0,0.4,0.5714285714285715,2,0,3
253,253,"public java.util.Map < TYPE_1 , java.util.List < java.lang.String > > METHOD_1 ( ) { return VAR_1 ; }","public java.util.Map < TYPE_1 , java.util.List < java.lang.String > > METHOD_1 ( ) { return METHOD_1 ( ) ; }","['Insert Invocation', 'Delete FieldRead']",332,['Update Invocation'],"['Invocation', 'FieldRead']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
254,254,"private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( new TYPE_3 ( new java.lang.Object [ ] { VAR_1 } ) , true ) ; METHOD_3 ( VAR_1 , true ) ; METHOD_4 ( ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { METHOD_3 ( VAR_1 , true ) ; VAR_2 . METHOD_2 ( new TYPE_3 ( new java.lang.Object [ ] { VAR_1 } ) , true ) ; METHOD_4 ( ) ; }",['Move Invocation'],333,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
255,255,"public static void i ( java.lang.String VAR_1 , java.lang.Throwable t ) { if ( TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR_3 . i ( VAR_1 , TYPE_2 . METHOD_2 ( t ) ) ; }","public static void i ( java.lang.String VAR_1 , java.lang.Throwable t ) { VAR_3 . i ( VAR_1 , TYPE_2 . METHOD_2 ( t ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",334,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
256,256,protected boolean METHOD_1 ( ) { if ( VAR_1 ) { return ( VAR_2 . METHOD_1 ( ) ) && ( ! ( VAR_3 . isEmpty ( ) ) ) ; } else { return true ; } },protected boolean METHOD_1 ( ) { if ( VAR_1 ) { return ( VAR_2 . METHOD_1 ( ) ) && ( isEmpty ( VAR_2 ) ) ; } else { return true ; } },"['Insert Invocation', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator']",335,"['Delete TypeAccess', 'Insert Invocation', 'Delete UnaryOperator']","['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'UnaryOperator']","['TypeAccess', 'Invocation', 'UnaryOperator']",Exact Match,1.0,1.0,0.6,0.7499999999999999,3,0,2
257,257,public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { METHOD_2 ( ) ; } VAR_3 . setState ( VAR_1 ) ; },public void METHOD_1 ( ) { VAR_3 . setState ( VAR_1 ) ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",336,['Delete Invocation'],"['FieldRead', 'FieldRead', 'BinaryOperator', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
258,258,public TYPE_1 METHOD_1 ( TYPE_1 msg ) throws TYPE_2 { if ( msg instanceof TYPE_3 ) { METHOD_2 ( ( ( TYPE_3 ) ( msg ) ) ) ; } return msg ; },public TYPE_1 METHOD_1 ( TYPE_1 msg ) throws TYPE_2 { return msg ; },"['Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",338,['Delete Invocation'],"['VariableRead', 'TypeAccess', 'BinaryOperator', 'TypeReference', 'VariableRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.125,0.2222222222222222,1,0,7
259,259,public void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",341,['Delete Block'],"['Invocation', 'Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
260,260,"public static < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String name ) { TYPE_3 . METHOD_1 ( VAR_1 , name ) ; return VAR_1 ; }","public static < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String name ) { return TYPE_3 . METHOD_1 ( VAR_1 , name ) ; }","['Move Invocation', 'Delete VariableRead']",342,['Delete Invocation'],"['Invocation', 'VariableRead']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
261,261,void METHOD_1 ( ) { try { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } } catch ( TYPE_1 VAR_2 ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; } },void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; } },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",343,"['Delete Block', 'Delete If']","['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']","['Block', 'If']",GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,2,0,4
262,262,"public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = STRING_1 ; VAR_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; if ( VAR_5 ) TYPE_1 . METHOD_4 ( VAR_5 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = STRING_1 ; VAR_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; if ( VAR_5 ) TYPE_1 . METHOD_4 ( true ) ; }","['Insert Literal', 'Delete TypeAccess']",344,['Update VariableRead'],"['Literal', 'TypeAccess']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
263,263,public boolean METHOD_1 ( ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( ) ; } else { return false ; } },public boolean METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",346,"['Delete Return', 'Delete Return']","['Return', 'FieldRead', 'Block', 'Literal', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.2,0.5,0.14285714285714285,0.22222222222222224,1,1,6
264,264,public java.lang.String METHOD_1 ( java.lang.String type ) { return this . type = type ; },public void METHOD_1 ( java.lang.String type ) { this . type = type ; },"['Update TypeReference', 'Move Assignment', 'Delete Return']",348,['Update TypeReference'],"['TypeReference', 'Assignment', 'Return']",['TypeReference'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
265,265,public void METHOD_1 ( ) { METHOD_1 ( null ) ; },public boolean METHOD_1 ( ) { return METHOD_1 ( null ) ; },"['Update TypeReference', 'Insert Return', 'Move Invocation']",349,"['Update Wra', 'Insert Return']","['TypeReference', 'Return', 'Invocation']","['Wra', 'Return']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
266,266,public java.lang.Boolean METHOD_1 ( ) { return ( ( VAR_1 . get ( STRING_1 ) ) != null ) && ( VAR_1 . get ( STRING_1 ) . equals ( STRING_2 ) ) ? true : false ; },public java.lang.Boolean METHOD_1 ( ) { return VAR_1 . get ( STRING_1 ) . equals ( STRING_2 ) ? true : false ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",350,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.14285714285714285,0.25,1,0,6
267,267,public void METHOD_1 ( float VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( ) ; VAR_3 . METHOD_1 ( ) ; VAR_4 . METHOD_1 ( ) ; if ( VAR_5 ) VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( float VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_1 ( ) ; VAR_2 . METHOD_1 ( ) ; VAR_4 . METHOD_1 ( ) ; if ( VAR_5 ) VAR_2 . METHOD_2 ( ) ; },['Move Invocation'],351,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
268,268,public void METHOD_1 ( float VAR_1 ) { this . VAR_1 = VAR_1 ; },public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; },['Update TypeReference'],352,['Update TypeAccess'],['TypeReference'],['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
269,269,"public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_3 , STRING_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_4 ( VAR_3 , STRING_1 ) ; METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }",['Move Invocation'],353,"['Move Invocation', 'Move Invocation']",['Invocation'],"['Invocation', 'Invocation']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
270,270,"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( METHOD_3 ( ) , new TYPE_1 ( VAR_2 . METHOD_4 ( ) ) ) ; VAR_3 . METHOD_5 ( this ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( METHOD_3 ( ) , new TYPE_1 ( VAR_2 . METHOD_4 ( ) ) ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_5 ( this ) ; } }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Invocation']",354,"['Insert Invocation', 'Insert VariableRead']","['If', 'BinaryOperator', 'Block', 'FieldRead', 'Literal', 'Invocation']","['Invocation', 'VariableRead']",Partial Match,0.14285714285714285,0.0,0.0,0.0,0,2,6
271,271,"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return java.lang.Long . METHOD_2 ( METHOD_3 ( VAR_1 ) ) . compareTo ( METHOD_3 ( VAR_2 ) ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return java.lang.Long . METHOD_1 ( METHOD_3 ( VAR_1 ) , METHOD_3 ( VAR_2 ) ) ; }","['Update Invocation', 'Move Invocation', 'Move Invocation', 'Delete Invocation']",355,"['Update Invocation', 'Delete Invocation', 'Insert Invocation']","['Invocation', 'Invocation', 'Invocation', 'Invocation']","['Invocation', 'Invocation', 'Invocation']",Exact Match,1.0,0.6666666666666666,0.5,0.5714285714285715,2,1,2
272,272,public int METHOD_1 ( ) { return ( ( this . METHOD_2 ( ) ) - ( this . METHOD_3 ( ) ) ) + 1 ; },public int METHOD_1 ( ) { return ( this . METHOD_2 ( ) ) - ( this . METHOD_3 ( ) ) ; },"['Move BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",356,['Delete UnaryOperator'],"['BinaryOperator', 'Literal', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
273,273,public java.lang.String toString ( ) { return ( ( ( ( ( ( ( STRING_1 + ( METHOD_1 ( ) ) ) + STRING_2 ) + ( name ) ) + STRING_3 ) + ( VAR_1 ) ) + STRING_4 ) + ( VAR_2 ) ) + STRING_5 ; },public java.lang.String toString ( ) { return ( ( ( ( ( name ) + STRING_3 ) + ( VAR_1 ) ) + STRING_4 ) + ( VAR_2 ) ) + STRING_5 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",358,"['Delete Invocation', 'Delete TypeAccess']","['FieldRead', 'FieldRead', 'Invocation', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'BinaryOperator']","['Invocation', 'TypeAccess']",Partial Match,0.25,0.5,0.14285714285714285,0.22222222222222224,1,1,6
274,274,public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . append ( STRING_1 ) ; VAR_3 . setText ( VAR_2 . toString ( ) ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { if ( true ) { VAR_2 . append ( STRING_1 ) ; VAR_3 . setText ( VAR_2 . toString ( ) ) ; } },"['Insert If', 'Insert Literal', 'Insert Block', 'Move Invocation', 'Move Invocation']",361,['Insert If'],"['If', 'Literal', 'Block', 'Invocation', 'Invocation']",['If'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
275,275,"private void METHOD_1 ( ) { assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_2 ( ) ) == null ) ) ; }","private void METHOD_1 ( ) { assertTrue ( STRING_1 , ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == null ) ) ) ; }","['Insert BinaryOperator', 'Insert BinaryOperator', 'Move BinaryOperator', 'Insert FieldRead', 'Insert Literal']",362,"['Insert BinaryOperator', 'Insert VariableRead']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'Literal']","['BinaryOperator', 'VariableRead']",Partial Match,0.25,0.5,0.2,0.28571428571428575,1,1,4
276,276,public double METHOD_1 ( double VAR_1 ) { return ( ( ( min ) * ( FLOAT_1 - VAR_1 ) ) + ( ( VAR_2 ) * ( VAR_1 - FLOAT_2 ) ) ) / FLOAT_3 ; },public double METHOD_1 ( double VAR_1 ) { return ( min ) + ( ( ( VAR_1 * ( ( VAR_2 ) - ( min ) ) ) - FLOAT_2 ) / FLOAT_3 ) ; },"['Update BinaryOperator', 'Insert FieldRead', 'Update BinaryOperator', 'Update BinaryOperator', 'Move FieldRead', 'Move BinaryOperator', 'Move FieldRead', 'Move VariableRead', 'Move FieldRead', 'Move FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator']",363,"['Update BinaryOperator', 'Update BinaryOperator', 'Update BinaryOperator', 'Update BinaryOperator']","['BinaryOperator', 'FieldRead', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'FieldRead', 'VariableRead', 'FieldRead', 'FieldRead', 'FieldRead', 'VariableRead', 'BinaryOperator']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator']",GPT Missed Nodes,0.3333333333333333,0.75,0.23076923076923078,0.3529411764705882,3,1,10
277,277,"public void METHOD_1 ( ) { long n = 1 ; long VAR_1 = 0 ; long result = TYPE_1 . METHOD_2 ( n ) ; assertEquals ( VAR_1 , result ) ; }","public void METHOD_1 ( ) { int n = 1 ; int VAR_1 = 0 ; int result = TYPE_1 . METHOD_2 ( n ) ; assertEquals ( VAR_1 , result ) ; }","['Update TypeReference', 'Update TypeReference', 'Update TypeReference']",364,"['Update TypeReference', 'Update TypeReference', 'Update TypeReference']","['TypeReference', 'TypeReference', 'TypeReference']","['TypeReference', 'TypeReference', 'TypeReference']",Exact Match,1.0,1.0,1.0,1.0,3,0,0
278,278,public void METHOD_1 ( TYPE_1 item ) { if ( ( item . METHOD_2 ( ) ) > 1 ) { item . METHOD_3 ( ) ; } else { VAR_1 . remove ( item ) ; } },public void METHOD_1 ( TYPE_1 item ) { item . METHOD_3 ( ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",367,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'VariableRead', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.14285714285714285,1.0,0.18181818181818182,0.3076923076923077,2,0,9
279,279,public boolean METHOD_1 ( TYPE_1 element ) { return element == ( VAR_1 . get ( 0 ) ) ; },public boolean METHOD_1 ( TYPE_1 element ) { if ( ( VAR_1 . get ( 0 ) ) == element ) { return true ; } else { return false ; } },"['Insert If', 'Move BinaryOperator', 'Move VariableRead', 'Insert Block', 'Insert Block', 'Insert Return', 'Insert Return', 'Insert Literal', 'Insert Literal', 'Delete Return']",369,"['Insert BinaryOperator', 'Insert Invocation']","['If', 'BinaryOperator', 'VariableRead', 'Block', 'Block', 'Return', 'Return', 'Literal', 'Literal', 'Return']","['BinaryOperator', 'Invocation']",Partial Match,0.14285714285714285,0.0,0.0,0.0,0,2,10
280,280,"public void info ( java.lang.Object msg , java.lang.Throwable t ) { if ( VAR_1 . METHOD_1 ( TYPE_1 ) ) { java.lang.System.out.println ( ( STRING_1 + ( METHOD_2 ( msg ) ) ) ) ; t . METHOD_3 ( ) ; } }","public void info ( java.lang.Object msg , java.lang.Throwable t ) { if ( TYPE_1 . METHOD_1 ( VAR_1 ) ) { java.lang.System.out.println ( ( STRING_1 + ( METHOD_2 ( msg ) ) ) ) ; t . METHOD_3 ( ) ; } }",['Move TypeAccess'],371,['Update Invocation'],['TypeAccess'],['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
281,281,public java.lang.String getText ( java.lang.Object element ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( element ) ) ; if ( ( VAR_1 . METHOD_1 ( ) ) != null ) return VAR_2 . format ( VAR_1 . METHOD_1 ( ) ) ; else return STRING_1 ; },public java.lang.String getText ( java.lang.Object element ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( element ) ) ; return VAR_2 . format ( VAR_1 . METHOD_1 ( ) ) ; },"['Move Return', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",372,"['Delete Invocation', 'Delete TypeAccess']","['Return', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'FieldRead', 'Return', 'Block', 'If']","['Invocation', 'TypeAccess']",Partial Match,0.1111111111111111,0.5,0.1,0.16666666666666669,1,1,9
282,282,public long METHOD_1 ( ) { return ( VAR_1 . getTime ( ) ) / INT_1 ; },public long METHOD_1 ( ) { return VAR_1 . getTime ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",375,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'FieldRead', 'BinaryOperator']","['TypeAccess', 'Invocation']",Partial Match,0.25,0.0,0.0,0.0,0,2,3
283,283,public java.lang.String METHOD_1 ( ) { METHOD_2 ( ) ; return STRING_1 + ( VAR_1 ) ; },public java.lang.String METHOD_1 ( ) { return STRING_1 + ( VAR_1 ) ; },['Delete Invocation'],376,['Delete Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
284,284,protected void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; super . METHOD_1 ( VAR_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; },['Move Invocation'],377,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
285,285,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; if ( ( VAR_3 ) == null ) { VAR_3 = METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 = METHOD_2 ( ) ; },"['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",379,['Delete Invocation'],"['Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
286,286,public void METHOD_1 ( boolean VAR_1 ) { java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_2 . getText ( ) ) ) + STRING_2 ) + VAR_1 ) ) ; },public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . setText ( ( ( ( VAR_2 . getText ( ) ) + STRING_2 ) + VAR_1 ) ) ; },"['Update Invocation', 'Insert TypeAccess', 'Move BinaryOperator', 'Move VariableRead', 'Move FieldRead', 'Delete FieldRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete BinaryOperator']",381,"['Delete TypeAccess', 'Delete Invocation', 'Insert Invocation']","['Invocation', 'TypeAccess', 'BinaryOperator', 'VariableRead', 'FieldRead', 'FieldRead', 'TypeAccess', 'FieldRead', 'BinaryOperator']","['TypeAccess', 'Invocation', 'Invocation']",GPT Missed Nodes,0.4,0.3333333333333333,0.1111111111111111,0.16666666666666666,1,2,8
287,287,public synchronized TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return this . VAR_2 . get ( VAR_1 ) . METHOD_2 ( ) ; },public synchronized TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_2 . get ( VAR_1 ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Return']",383,['Delete Return'],"['Invocation', 'Invocation', 'Return']",['Return'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
288,288,public void handle ( java.util.Map data ) { VAR_1 . remove ( VAR_2 ) ; METHOD_1 ( ) ; VAR_3 . METHOD_2 ( ) ; },public void handle ( java.util.Map data ) { METHOD_1 ( ) ; VAR_1 . remove ( VAR_2 ) ; VAR_3 . METHOD_2 ( ) ; },['Move Invocation'],384,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
289,289,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 . getData ( ) ) ; VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_1 ( ) ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 . getData ( ) ) ; VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; } },['Move Invocation'],386,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
290,290,"public static TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 c = null ; try { c = VAR_2 . open ( VAR_1 ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_4 , STRING_1 ) ; } return c ; }",public static TYPE_1 METHOD_1 ( ) { TYPE_1 c = null ; try { c = VAR_2 . open ( ) ; } catch ( java.lang.Exception VAR_3 ) { } return c ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",387,"['Delete Parameter', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess']","['TypeReference', 'Parameter', 'VariableRead', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation']","['Parameter', 'VariableRead', 'Invocation', 'TypeAccess']",GPT Missed Nodes,0.8,1.0,0.5714285714285714,0.7272727272727273,4,0,3
291,291,"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 , METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 , METHOD_3 ( ( ( VAR_3 . METHOD_4 ( ) ) + 1 ) ) ) ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",388,['Insert UnaryOperator'],"['BinaryOperator', 'Invocation', 'Literal']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
292,292,protected TYPE_1 METHOD_1 ( ) { if ( TYPE_2 . METHOD_2 ( buffer ) ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_3 ( buffer . METHOD_4 ( ) ) ; VAR_2 . put ( buffer ) . METHOD_5 ( ) ; return VAR_1 ; } return null ; },protected TYPE_1 METHOD_1 ( ) { if ( TYPE_2 . METHOD_2 ( buffer ) ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_3 ( buffer . METHOD_4 ( ) ) ; VAR_2 . put ( buffer ) ; return VAR_1 ; } return null ; },"['Move Invocation', 'Delete Invocation']",390,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
293,293,protected void METHOD_1 ( ) { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( this . VAR_2 . getText ( ) ) ; } },protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this . VAR_2 . getText ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",391,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
294,294,public int METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return 0 ; } else { return VAR_2 . size ( ) ; } },public int METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return 0 ; } else { return VAR_2 . size ( ) ; } },"['Move Invocation', 'Delete UnaryOperator']",392,['Delete Wra'],"['Invocation', 'UnaryOperator']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
295,295,"public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ! ( VAR_2 . equals ( VAR_3 , VAR_1 ) ) ) && ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) ) { VAR_3 = VAR_1 ; METHOD_3 ( STRING_1 , VAR_1 ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( VAR_2 . equals ( VAR_3 , VAR_1 ) ) ) { VAR_3 = VAR_1 ; METHOD_3 ( STRING_1 , VAR_1 ) ; } }","['Move UnaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",393,['Delete Invocation'],"['UnaryOperator', 'TypeAccess', 'VariableRead', 'Invocation', 'UnaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
296,296,public java.util.ArrayList < java.lang.String > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return VAR_2 . METHOD_2 ( ) ; } else { return VAR_1 ; } },public java.util.ArrayList < java.lang.String > METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",394,"['Delete Return', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'FieldRead', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.16666666666666666,0.5,0.1111111111111111,0.1818181818181818,1,1,8
297,297,"public void update ( TYPE_1 VAR_1 , float VAR_2 ) { counter -= VAR_2 ; if ( ( ( counter ) <= 0 ) || ( ( VAR_1 . METHOD_1 ( ) ) == 0 ) ) METHOD_2 ( VAR_1 ) ; }","public void update ( TYPE_1 VAR_1 , float VAR_2 ) { counter -= VAR_2 ; if ( ( counter ) <= 0 ) METHOD_2 ( VAR_1 ) ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",395,"['Delete TypeAccess', 'Delete Assignment']","['BinaryOperator', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']","['TypeAccess', 'Assignment']",Partial Match,0.0,0.0,0.0,0.0,0,2,6
298,298,"boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( METHOD_4 ( ) , this . METHOD_5 ( ) ) ) ; }","boolean METHOD_1 ( ) { return VAR_1 . METHOD_3 ( METHOD_4 ( ) , this . METHOD_5 ( ) ) ; }","['Move Invocation', 'Delete Invocation', 'Delete BinaryOperator']",397,['Delete Invocation'],"['Invocation', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
299,299,"public void METHOD_1 ( TYPE_1 VAR_1 , int position , java.lang.Object VAR_2 ) { if ( ( VAR_3 . size ( ) ) < ( VAR_4 ) ) { VAR_1 . METHOD_2 ( VAR_3 . get ( ( position % ( size ) ) ) ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int position , java.lang.Object VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 . get ( ( position % ( size ) ) ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",398,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
300,300,public int METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) + ( METHOD_3 ( ) ) ) - ( VAR_1 . METHOD_4 ( ) ) ; },public int METHOD_1 ( ) { return ( ( ( METHOD_2 ( ) ) + ( METHOD_3 ( ) ) ) + 1 ) - ( VAR_1 . METHOD_4 ( ) ) ; },"['Insert BinaryOperator', 'Move BinaryOperator', 'Insert Literal']",399,['Insert Literal'],"['BinaryOperator', 'BinaryOperator', 'Literal']",['Literal'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
301,301,public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return null ; } return VAR_2 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_2 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",401,['Delete Return'],"['FieldRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
302,302,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 == ( VAR_2 ) ) && ( VAR_1 instanceof TYPE_2 ) ) return false ; else return super . METHOD_1 ( VAR_1 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) return false ; else return super . METHOD_1 ( VAR_1 ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete BinaryOperator']",402,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'TypeAccess', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
303,303,public java.lang.String METHOD_1 ( ) { if ( VAR_1 ) { return VAR_2 ; } else { return getText ( ) . toString ( ) ; } },public java.lang.String METHOD_1 ( ) { return VAR_2 ; },"['Move Return', 'Delete FieldRead', 'Delete Block', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",403,"['Delete Return', 'Delete Return', 'Delete Invocation']","['Return', 'FieldRead', 'Block', 'Invocation', 'Invocation', 'Return', 'Block', 'If']","['Return', 'Return', 'Invocation']",GPT Missed Nodes,0.4,0.6666666666666666,0.25,0.36363636363636365,2,1,6
304,304,"public boolean METHOD_1 ( TYPE_1 type , java.lang.String VAR_1 , java.lang.Object VAR_2 ) { return this . METHOD_1 ( type , VAR_1 , VAR_2 , null ) ; }","public void METHOD_1 ( TYPE_1 type , java.lang.String VAR_1 , java.lang.Object VAR_2 ) { this . METHOD_1 ( type , VAR_1 , VAR_2 , null ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",405,['Update TypeReference'],"['TypeReference', 'Invocation', 'Return']",['TypeReference'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
305,305,"public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) . getText ( ) , VAR_1 . METHOD_4 ( ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) . getText ( ) , VAR_1 . METHOD_4 ( ) . getText ( ) ) ; }","['Insert Invocation', 'Move Invocation']",406,['Insert Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
306,306,public TYPE_1 METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 < 0 ) || ( VAR_1 >= ( VAR_2 . size ( ) ) ) ) return null ; return VAR_2 . get ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",407,['Delete Assignment'],"['VariableRead', 'Literal', 'BinaryOperator', 'VariableRead', 'TypeAccess', 'Invocation', 'BinaryOperator', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,12
307,307,public java.lang.Object METHOD_1 ( int VAR_1 ) { return new java.lang.Integer ( java.lang.Math.abs ( ( ( int ) ( FLOAT_1 * ( VAR_2 ) ) ) ) ) ; },public java.lang.Object METHOD_1 ( int VAR_1 ) { return new java.lang.Integer ( ( ( int ) ( FLOAT_1 * ( VAR_2 ) ) ) ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation']",408,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
308,308,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; if ( ( ! ( VAR_4 ) ) && ( VAR_5 ) ) VAR_1 . METHOD_4 ( VAR_6 , VAR_7 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_4 ) return ; TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; if ( VAR_5 ) VAR_1 . METHOD_4 ( VAR_6 , VAR_7 ) ; }","['Insert If', 'Move FieldRead', 'Insert Block', 'Move FieldRead', 'Insert Return', 'Delete UnaryOperator', 'Delete BinaryOperator']",409,"['Insert If', 'Insert Return', 'Update If']","['If', 'FieldRead', 'Block', 'FieldRead', 'Return', 'UnaryOperator', 'BinaryOperator']","['If', 'Return', 'If']",GPT Missed Nodes,0.3333333333333333,0.6666666666666666,0.2857142857142857,0.4,2,1,5
309,309,"public void METHOD_1 ( TYPE_1 target ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 , VAR_6 ) ; VAR_7 . METHOD_2 ( VAR_8 ) ; VAR_4 . METHOD_4 ( VAR_6 ) ; }","public void METHOD_1 ( TYPE_1 target ) { VAR_4 . METHOD_3 ( VAR_5 , VAR_6 ) ; VAR_4 . METHOD_4 ( VAR_6 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_7 . METHOD_2 ( VAR_8 ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeAccess']",411,"['Delete Invocation', 'Insert Invocation', 'Update Invocation']","['Invocation', 'Invocation', 'TypeAccess']","['Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.0,0.0,0.0,0,3,3
310,310,"public TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String > error , TYPE_3 VAR_1 ) { if ( error . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( STRING_1 , STRING_2 ) ; } return new TYPE_1 ( STRING_3 , STRING_4 , error ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String > error ) { return new TYPE_1 ( STRING_3 , STRING_4 , error ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",412,"['Delete Parameter', 'Delete Invocation']","['TypeReference', 'Parameter', 'VariableRead', 'Invocation', 'VariableRead', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']","['Parameter', 'Invocation']",GPT Missed Nodes,0.2857142857142857,1.0,0.2,0.33333333333333337,2,0,8
311,311,"public void METHOD_1 ( TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 ) { if ( VAR_1 != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",413,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
312,312,public void METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { out . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { METHOD_1 ( VAR_1 ) ; },['Delete FieldRead'],416,['Delete TypeAccess'],['FieldRead'],['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
313,313,"private void METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) return ; VAR_1 . i ( VAR_2 , STRING_1 ) ; if ( VAR_3 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( ) ; VAR_4 = true ; } }","private void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; VAR_3 . METHOD_4 ( ) ; VAR_4 = true ; }","['Move Invocation', 'Move Assignment', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",417,"['Delete Invocation', 'Delete Return', 'Delete Invocation']","['Invocation', 'Assignment', 'Invocation', 'UnaryOperator', 'Return', 'Block', 'If', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'Return', 'Invocation']",GPT Missed Nodes,0.2857142857142857,1.0,0.2727272727272727,0.42857142857142855,3,0,8
314,314,public void METHOD_1 ( ) { VAR_1 = null ; if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { VAR_1 = null ; VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",418,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
315,315,"public boolean delete ( final TYPE_1 < TYPE_2 > VAR_1 , final TYPE_2 key ) { return delete ( VAR_1 , key , null ) ; }","public void delete ( final TYPE_1 < TYPE_2 > VAR_1 , final TYPE_2 key ) { delete ( VAR_1 , key , null ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",419,['Update TypeReference'],"['TypeReference', 'Invocation', 'Return']",['TypeReference'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
316,316,"public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( null , METHOD_3 ( ) ) ; return VAR_2 . get ( ) ; }",public TYPE_1 METHOD_1 ( ) { if ( ( VAR_2 . get ( ) ) == null ) { VAR_2 . set ( METHOD_3 ( ) ) ; } return VAR_2 . get ( ) ; },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Invocation', 'Move Literal', 'Update Invocation', 'Move Invocation', 'Insert TypeAccess', 'Update TypeAccess']",420,"['Delete Invocation', 'Insert Assignment', 'Insert Invocation']","['If', 'BinaryOperator', 'Block', 'Invocation', 'Literal', 'Invocation', 'Invocation', 'TypeAccess', 'TypeAccess']","['Invocation', 'Assignment', 'Invocation']",Partial Match,0.14285714285714285,0.3333333333333333,0.1111111111111111,0.16666666666666666,1,2,8
317,317,"public int METHOD_1 ( ) { int VAR_1 = VAR_2 . get ( this . METHOD_2 ( 0 , ( ( VAR_2 . size ( ) ) - 1 ) ) ) ; VAR_2 . remove ( VAR_3 . METHOD_3 ( VAR_1 ) ) ; return VAR_1 ; }","public int METHOD_1 ( ) { int VAR_1 = VAR_2 . get ( this . METHOD_2 ( 0 , VAR_2 . size ( ) ) ) ; VAR_2 . remove ( VAR_3 . METHOD_3 ( VAR_1 ) ) ; return VAR_1 ; }","['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",421,['Delete UnaryOperator'],"['Invocation', 'Literal', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
318,318,public void METHOD_1 ( android.view.View VAR_1 ) { if ( listener != null ) { listener . METHOD_2 ( VAR_2 ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { listener . METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",422,['Delete Wra'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
319,319,"public double METHOD_1 ( double VAR_1 , double ... param ) { switch ( VAR_2 ) { case VAR_3 : return METHOD_2 ( VAR_1 , VAR_4 ) ; default : return VAR_1 ; } }","public double METHOD_1 ( double VAR_1 , double ... param ) { switch ( this ) { case VAR_3 : return METHOD_2 ( VAR_1 , VAR_4 ) ; default : return VAR_1 ; } }","['Insert ThisAccess', 'Delete FieldRead']",423,['Update VariableRead'],"['ThisAccess', 'FieldRead']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
320,320,"private boolean METHOD_1 ( double VAR_1 , double VAR_2 , double VAR_3 ) { return ( VAR_2 == 0 ) || ( ( VAR_2 >= VAR_1 ) && ( VAR_2 <= VAR_3 ) ) ; }","private boolean METHOD_1 ( double VAR_1 , double VAR_2 , double VAR_3 ) { return ( VAR_2 >= VAR_1 ) && ( VAR_2 <= VAR_3 ) ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",425,['Delete BinaryOperator'],"['BinaryOperator', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
321,321,"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_3 . METHOD_2 ( VAR_1 ) ) { VAR_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; } else { } VAR_2 . METHOD_3 ( STRING_3 , VAR_1 ) ; return STRING_4 ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_2 . METHOD_3 ( STRING_3 , VAR_1 ) ; return STRING_4 ; }","['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",426,['Delete Invocation'],"['TypeAccess', 'VariableRead', 'Invocation', 'VariableRead', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.1,0.18181818181818182,1,0,9
322,322,"protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_1 , ( ( VAR_2 ) | ( VAR_3 ) ) ) ; }","protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }","['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",428,['Delete UnaryOperator'],"['FieldRead', 'FieldRead', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
323,323,public final void METHOD_1 ( TYPE_1 position ) { if ( ! ( VAR_1 ) ) { if ( ! ( VAR_2 . equals ( this . position ) ) ) { VAR_1 = true ; } } this . position = position ; },public final void METHOD_1 ( TYPE_1 position ) { this . position = position ; if ( ! ( VAR_1 ) ) { if ( ! ( VAR_2 . equals ( new TYPE_1 ( ) ) ) ) { VAR_1 = true ; } } },"['Move If', 'Insert ConstructorCall', 'Delete ThisAccess', 'Delete FieldRead']",430,"['Move Assignment', 'Update Invocation', 'Insert TypeAccess']","['If', 'ConstructorCall', 'ThisAccess', 'FieldRead']","['Assignment', 'Invocation', 'TypeAccess']",Partial Match,0.0,0.0,0.0,0.0,0,3,4
324,324,"public void METHOD_1 ( short [ ] data ) { if ( ( VAR_1 ) != null ) { VAR_2 = METHOD_2 ( VAR_1 , data , VAR_2 ) ; } }","public void METHOD_1 ( short [ ] data ) { VAR_2 = METHOD_2 ( VAR_1 , data , VAR_2 ) ; }","['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",431,['Delete Wra'],"['Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
325,325,public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ; },public java.lang.String toString ( ) { return ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",432,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
326,326,public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( VAR_1 != null ) ) VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",433,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,10
327,327,"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; if ( VAR_2 ) { METHOD_3 ( ) ; } }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; METHOD_3 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",434,['Delete Return'],"['Invocation', 'FieldRead', 'Block', 'If']",['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
328,328,public java.lang.String METHOD_1 ( ) { return ( ( ( ( ( ( ( ( x ) + STRING_1 ) + ( y ) ) + STRING_1 ) + ( VAR_1 ) ) + STRING_1 ) + ( name ) ) + STRING_1 ) + ( index ) ; },public java.lang.String METHOD_1 ( ) { return ( ( ( ( ( ( x ) + STRING_1 ) + ( y ) ) + STRING_1 ) + ( VAR_1 ) ) + STRING_1 ) + ( name ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",435,['Delete LocalVariable'],"['BinaryOperator', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator']",['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
329,329,public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 = VAR_2 ; select ( VAR_2 ) ; } },public void METHOD_1 ( ) { VAR_1 = VAR_2 ; select ( VAR_2 ) ; },"['Move Assignment', 'Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",436,['Delete Invocation'],"['Assignment', 'Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
330,330,public TYPE_1 METHOD_1 ( java.lang.String name ) { for ( TYPE_1 c : VAR_1 ) { if ( c . METHOD_2 ( ) . toLowerCase ( ) . equals ( VAR_2 . toLowerCase ( ) ) ) { return c ; } } return null ; },public TYPE_1 METHOD_1 ( java.lang.String name ) { for ( TYPE_1 c : VAR_1 ) { if ( c . METHOD_2 ( ) . equals ( name ) ) { return c ; } } return null ; },"['Update Invocation', 'Move Invocation', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",437,"['Delete Invocation', 'Delete Invocation', 'Update Parameter']","['Invocation', 'Invocation', 'VariableRead', 'TypeAccess', 'Invocation', 'Invocation']","['Invocation', 'Invocation', 'Parameter']",Partial Match,0.25,0.6666666666666666,0.3333333333333333,0.4444444444444444,2,1,4
331,331,"private java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_2 . replace ( STRING_1 , STRING_2 ) . trim ( ) ; } return null ; }","private java.lang.String METHOD_1 ( ) { return VAR_2 . replace ( STRING_1 , STRING_2 ) . trim ( ) ; }","['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",438,['Delete If'],"['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']",['If'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
332,332,public void commit ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { commit ( TYPE_1 . METHOD_1 ( ) ) ; } },public void commit ( ) { commit ( TYPE_1 . METHOD_1 ( ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",440,"['Delete Block', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']","['Block', 'Invocation']",GPT Missed Nodes,0.3333333333333333,1.0,0.2857142857142857,0.4444444444444445,2,0,5
333,333,"public void METHOD_1 ( ) throws java.lang.Exception { if ( ( METHOD_2 ( ) ) || ( METHOD_3 ( INT_1 , INT_2 ) ) ) { METHOD_4 ( STRING_1 ) ; } }","public void METHOD_1 ( ) throws java.lang.Exception { if ( ( ! ( METHOD_2 ( ) ) ) || ( METHOD_3 ( INT_1 , INT_2 ) ) ) { METHOD_4 ( STRING_1 ) ; } }","['Insert UnaryOperator', 'Move Invocation']",441,['Insert UnaryOperator'],"['UnaryOperator', 'Invocation']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
334,334,"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; if ( ( value ) != null ) VAR_4 . value = value . METHOD_2 ( ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_4 . value = value . METHOD_2 ( ) ; return VAR_1 ; }","['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",442,['Delete Assignment'],"['Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Assignment'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
335,335,"private static boolean METHOD_1 ( double VAR_1 ) { return TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) * ( TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ) , VAR_1 ) ; }",private static boolean METHOD_1 ( java.lang.Double VAR_1 ) { return ( ( TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) * ( TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ) == VAR_1 ; },"['Update TypeReference', 'Insert BinaryOperator', 'Move BinaryOperator', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",443,"['Update TypeAccess', 'Update TypeAccess', 'Delete Invocation', 'Insert BinaryOperator']","['TypeReference', 'BinaryOperator', 'BinaryOperator', 'VariableRead', 'TypeAccess', 'Invocation']","['TypeAccess', 'TypeAccess', 'Invocation', 'BinaryOperator']",GPT Missed Nodes,0.6,0.5,0.3333333333333333,0.4,2,2,4
336,336,public void METHOD_1 ( ) { state = VAR_1 ; METHOD_2 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; state = VAR_1 ; },['Move Assignment'],444,['Move Assignment'],['Assignment'],['Assignment'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
337,337,"private double METHOD_1 ( double x , double y ) { if ( ( x == 0 ) || ( x == 0.0 ) ) { return ( VAR_1 ) / INT_1 ; } return TYPE_1 . METHOD_2 ( ( y / x ) ) ; }","private double METHOD_1 ( double x , double y ) { if ( x == 0 ) { return 1.0 ; } return TYPE_1 . METHOD_2 ( ( y / x ) ) ; }","['Move BinaryOperator', 'Insert Literal', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",447,"['Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Return', 'Insert Return']","['BinaryOperator', 'Literal', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'FieldRead', 'BinaryOperator']","['BinaryOperator', 'BinaryOperator', 'Return', 'Return']",Partial Match,0.2,0.5,0.2222222222222222,0.30769230769230765,2,2,7
338,338,public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . append ( STRING_1 ) . append ( METHOD_2 ( VAR_1 ) ) . append ( CHAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . append ( ( ( STRING_1 + ( METHOD_2 ( VAR_1 ) ) ) + CHAR_1 ) ) ; },"['Move Invocation', 'Move TypeAccess', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert FieldRead', 'Insert FieldRead', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",448,"['Delete Invocation', 'Insert BinaryOperator']","['Invocation', 'TypeAccess', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'FieldRead', 'Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'BinaryOperator']",GPT Missed Nodes,0.5,1.0,0.18181818181818182,0.3076923076923077,2,0,9
339,339,public void METHOD_1 ( java.lang.String VAR_1 ) { ( ( TYPE_1 ) ( this . VAR_2 ) ) . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { ( ( TYPE_1 ) ( this ) ) . METHOD_1 ( VAR_1 ) ; },"['Update ThisAccess', 'Move ThisAccess', 'Move TypeReference', 'Delete FieldRead']",450,['Delete VariableRead'],"['ThisAccess', 'ThisAccess', 'TypeReference', 'FieldRead']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
340,340,"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_3 ( VAR_3 , VAR_4 ) . VAR_5 ) ; assertEquals ( VAR_6 , VAR_1 . METHOD_4 ( VAR_3 , VAR_4 ) . VAR_5 ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_3 ( VAR_3 , VAR_4 ) ) ; assertEquals ( VAR_6 , VAR_1 . METHOD_4 ( VAR_3 , VAR_4 ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete FieldRead']",451,['Delete TypeAccess'],"['Invocation', 'Invocation', 'FieldRead', 'FieldRead']",['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
341,341,"public void METHOD_1 ( final java.lang.String VAR_1 ) throws java.lang.Throwable { VAR_2 . assertEquals ( VAR_1 , VAR_3 ) ; }","public void METHOD_1 ( final java.lang.String VAR_1 ) throws java.lang.Throwable { VAR_2 . assertEquals ( VAR_3 , VAR_1 ) ; }",['Move VariableRead'],453,"['Move VariableRead', 'Move VariableRead']",['VariableRead'],"['VariableRead', 'VariableRead']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
342,342,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . equals ( this . VAR_1 , VAR_1 ) ) ) { this . VAR_1 = VAR_1 ; this . VAR_3 = null ; this . VAR_4 = null ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . equals ( this . VAR_1 , VAR_1 ) ) { this . VAR_1 = VAR_1 ; this . VAR_3 = null ; this . VAR_4 = null ; } }","['Move Invocation', 'Delete UnaryOperator']",456,['Delete Wra'],"['Invocation', 'UnaryOperator']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
343,343,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; return true ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 . METHOD_2 ( ) ) ; return true ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",458,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
344,344,"public void METHOD_1 ( ) { assertEquals ( ( ( STRING_1 + ( fileName ) ) + STRING_2 ) , TYPE_1 . METHOD_2 ( STRING_3 ) ) ; }","public void METHOD_1 ( ) { assertEquals ( TYPE_1 . METHOD_2 ( STRING_3 ) , ( ( STRING_1 + ( fileName ) ) + STRING_2 ) ) ; }",['Move BinaryOperator'],460,"['Move TypeAccess', 'Move BinaryOperator']",['BinaryOperator'],"['TypeAccess', 'BinaryOperator']",GPT Hallucinated Nodes,0.5,0.5,1.0,0.6666666666666666,1,1,0
345,345,public void error ( final java.lang.Exception VAR_1 ) { VAR_2 . error ( VAR_1 ) ; VAR_3 . add ( VAR_1 ) ; VAR_4 . METHOD_1 ( ) ; },public void error ( final java.lang.Exception VAR_1 ) { VAR_3 . add ( VAR_1 ) ; VAR_4 . METHOD_1 ( ) ; },"['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",461,['Delete Invocation'],"['TypeAccess', 'VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
346,346,"public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final TYPE_1 VAR_3 = super . METHOD_1 ( VAR_1 , VAR_2 ) ; if ( TYPE_3 . METHOD_2 ( VAR_3 ) ) { this . METHOD_3 ( ) ; } return VAR_3 ; }","public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final TYPE_1 VAR_3 = super . METHOD_1 ( VAR_1 , VAR_2 ) ; if ( VAR_3 != null ) { this . METHOD_3 ( ) ; return VAR_3 ; } return VAR_3 ; }","['Insert BinaryOperator', 'Move VariableRead', 'Insert Literal', 'Insert Return', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",462,"['Delete Invocation', 'Insert Return', 'Insert LocalVariable']","['BinaryOperator', 'VariableRead', 'Literal', 'Return', 'VariableRead', 'TypeAccess', 'Invocation']","['Invocation', 'Return', 'LocalVariable']",Partial Match,0.2857142857142857,0.6666666666666666,0.2857142857142857,0.4,2,1,5
347,347,"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( this , ( ( VAR_2 . getId ( ) ) + STRING_1 ) , VAR_3 ) . show ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( this , VAR_2 . getText ( ) , VAR_3 ) . show ( ) ; }","['Update Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",463,"['Update Invocation', 'Delete TypeAccess']","['Invocation', 'Invocation', 'FieldRead', 'BinaryOperator']","['Invocation', 'TypeAccess']",Partial Match,0.25,0.5,0.25,0.3333333333333333,1,1,3
348,348,public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_1 ( ) ) || ( VAR_2 ) ) ; },public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_1 ( ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",464,['Delete VariableRead'],"['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
349,349,"public void show ( ) { VAR_1 . METHOD_1 ( new TYPE_1 ( VAR_2 , VAR_3 ) ) ; }",public void show ( ) { VAR_1 . METHOD_1 ( VAR_3 ) ; },"['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall']",465,"['Delete TypeAccess', 'Delete Invocation']","['TypeAccess', 'FieldRead', 'FieldRead', 'ConstructorCall']","['TypeAccess', 'Invocation']",Partial Match,0.25,0.0,0.0,0.0,0,2,4
350,350,public final TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) METHOD_2 ( ) ; return VAR_1 . METHOD_3 ( ) ; },public final TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) METHOD_2 ( ) ; return VAR_1 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",466,"['Delete Invocation', 'Insert VariableRead']","['FieldRead', 'TypeAccess', 'Invocation']","['Invocation', 'VariableRead']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
351,351,public java.lang.Integer METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_2 ( ) ; } else { return null ; } },public java.lang.Integer METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",467,"['Delete Return', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.16666666666666666,0.5,0.1111111111111111,0.1818181818181818,1,1,8
352,352,private void METHOD_1 ( TYPE_1 event ) { if ( ( event . METHOD_2 ( ) ) == 1 ) { VAR_1 = false ; VAR_2 = false ; VAR_3 = event . METHOD_3 ( ) ; } },private void METHOD_1 ( TYPE_1 event ) { VAR_1 = false ; VAR_2 = false ; VAR_3 = event . METHOD_3 ( ) ; },"['Move Assignment', 'Move Assignment', 'Move Assignment', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",468,['Delete If'],"['Assignment', 'Assignment', 'Assignment', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['If'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
353,353,public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 > ( VAR_2 ) ) { this . VAR_1 = METHOD_2 ( ) ; } else { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 > ( METHOD_2 ( ) ) ) { this . VAR_1 = METHOD_2 ( ) ; } else { this . VAR_1 = VAR_1 ; } },"['Insert Invocation', 'Delete FieldRead']",473,"['Update VariableRead', 'Insert Invocation']","['Invocation', 'FieldRead']","['VariableRead', 'Invocation']",Partial Match,0.3333333333333333,0.5,0.5,0.5,1,1,1
354,354,"public boolean isEmpty ( int x , int y , int VAR_1 ) { return ( isEmpty ( x , y ) ) || ( ! ( get ( x , y ) . METHOD_1 ( VAR_1 ) ) ) ; }","public boolean isEmpty ( int x , int y , int VAR_1 ) { return ( isEmpty ( x , y ) ) || ( get ( x , y ) . METHOD_1 ( VAR_1 ) ) ; }","['Move Invocation', 'Delete UnaryOperator']",474,['Delete UnaryOperator'],"['Invocation', 'UnaryOperator']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
355,355,"public void METHOD_1 ( java.io.File VAR_1 , java.util.Properties VAR_2 ) { METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; }","public void METHOD_1 ( java.io.File VAR_1 , java.util.Properties VAR_2 ) { METHOD_2 ( VAR_1 , VAR_2 ) ; this . VAR_2 . METHOD_4 ( VAR_2 ) ; }","['Insert FieldRead', 'Insert ThisAccess', 'Delete Invocation']",475,"['Delete Invocation', 'Insert VariableRead', 'Insert Invocation']","['FieldRead', 'ThisAccess', 'Invocation']","['Invocation', 'VariableRead', 'Invocation']",Partial Match,0.25,0.3333333333333333,0.3333333333333333,0.3333333333333333,1,2,2
356,356,"public static boolean METHOD_1 ( ) { long VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , ( - 1L ) ) ; return ( VAR_1 == ( - 1 ) ) || ( ! ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ; }","public static boolean METHOD_1 ( ) { long VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , ( - 1L ) ) ; return ( VAR_1 == ( - 1 ) ) || ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; }","['Move Invocation', 'Delete UnaryOperator']",476,['Delete UnaryOperator'],"['Invocation', 'UnaryOperator']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
357,357,public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) METHOD_2 ( ) . METHOD_3 ( ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) METHOD_2 ( ) . show ( ) ; },['Update Invocation'],479,['Update Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
358,358,public boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( ) . METHOD_3 ( ( p ) - > ( VAR_3 . startsWith ( ( p + ( VAR_4 ) ) ) ) || ( VAR_3 . equals ( p ) ) ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( ) . METHOD_3 ( ( p ) - > VAR_3 . startsWith ( ( p + ( VAR_4 ) ) ) ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",484,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'FieldRead', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
359,359,"public java.lang.String METHOD_1 ( int id , java.lang.Integer VAR_1 , java.lang.String VAR_2 ) { this . VAR_3 . METHOD_2 ( id ) ; return ( ( ( STRING_1 + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ; }","public java.lang.String METHOD_1 ( int id , java.lang.Integer VAR_1 ) { this . VAR_3 . METHOD_2 ( id ) ; return ( STRING_1 + STRING_2 ) + VAR_1 ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete Parameter', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator']",485,"['Delete Parameter', 'Delete VariableRead', 'Delete VariableRead']","['BinaryOperator', 'TypeReference', 'Parameter', 'FieldRead', 'BinaryOperator', 'VariableRead', 'BinaryOperator']","['Parameter', 'VariableRead', 'VariableRead']",GPT Missed Nodes,0.4,0.6666666666666666,0.2857142857142857,0.4,2,1,5
360,360,public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) return false ; VAR_1 = VAR_2 ; return true ; },public void METHOD_1 ( ) { VAR_1 = VAR_2 ; },"['Update TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",486,"['Delete Return', 'Delete Return', 'Update Wra']","['TypeReference', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If', 'Literal', 'Return']","['Return', 'Return', 'Wra']",Partial Match,0.125,0.6666666666666666,0.2,0.30769230769230765,2,1,8
361,361,public static boolean METHOD_1 ( java.lang.Object obj ) { return ( ( TYPE_1 ) != null ) && ( TYPE_1 . METHOD_2 ( VAR_1 . getClass ( ) ) ) ; },public static boolean METHOD_1 ( java.lang.Object obj ) { return TYPE_1 . METHOD_2 ( VAR_1 . getClass ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",487,['Delete BinaryOperator'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
362,362,public boolean METHOD_1 ( ) { return ( this . VAR_1 ) == ( this ) ; },public boolean METHOD_1 ( ) { if ( ( this . VAR_1 ) == ( this ) ) { return true ; } else return false ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Insert Block', 'Insert Return', 'Insert Return', 'Insert Literal', 'Insert Literal', 'Delete Return']",488,"['Insert BinaryOperator', 'Insert Return']","['If', 'BinaryOperator', 'Block', 'Block', 'Return', 'Return', 'Literal', 'Literal', 'Return']","['BinaryOperator', 'Return']",GPT Missed Nodes,0.4,0.5,0.1111111111111111,0.1818181818181818,1,1,8
363,363,public int METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) == ( ( METHOD_2 ( ) ) - 1 ) ) { return METHOD_3 ( ) ; } return - 1 ; },public int METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) == ( METHOD_2 ( ) ) ) { return METHOD_3 ( ) ; } return - 1 ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",489,['Delete UnaryOperator'],"['BinaryOperator', 'BinaryOperator', 'Invocation', 'Literal', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
364,364,"protected void add ( java.util.List list , TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) , this , list ) ; } }","protected void add ( java.util.List list , TYPE_1 VAR_1 ) { VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) , this , list ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",491,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
365,365,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( getContext ( ) ) ; if ( ( VAR_2 ) != null ) { VAR_1 . METHOD_2 ( VAR_2 ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( getContext ( ) ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",493,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
366,366,"protected void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; }","protected void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 , VAR_4 ) ; }",['Move TypeAccess'],494,"['Move VariableRead', 'Move VariableRead']",['TypeAccess'],"['VariableRead', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,1
367,367,public short getData ( ) { return data . METHOD_1 ( ) ; },public short getData ( ) { return data ; },"['Move FieldRead', 'Delete Invocation']",495,['Delete Invocation'],"['FieldRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
368,368,public void METHOD_1 ( java.lang.String name ) { if ( VAR_1 . contains ( STRING_1 ) ) METHOD_2 ( name ) ; else this . name = name ; },public void METHOD_1 ( java.lang.String name ) { this . name = name ; },"['Move Assignment', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",496,['Delete Invocation'],"['Assignment', 'TypeAccess', 'TypeAccess', 'Invocation', 'VariableRead', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.1111111111111111,0.19999999999999998,1,0,8
369,369,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . getText ( ) . isEmpty ( ) ) { VAR_2 . setText ( STRING_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( STRING_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",497,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
370,370,public void METHOD_1 ( ) { VAR_1 . remove ( VAR_2 ) ; },public void METHOD_1 ( ) { VAR_1 . remove ( p ) ; },"['Insert FieldRead', 'Delete TypeAccess']",499,['Update VariableRead'],"['FieldRead', 'TypeAccess']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
371,371,public boolean METHOD_1 ( java.util.List nodes ) { return ( ( VAR_1 . size ( ) ) - 1 ) <= ( this . VAR_2 ) ; },public boolean METHOD_1 ( java.util.List nodes ) { if ( ( ( VAR_1 . size ( ) ) - 1 ) <= ( this . VAR_2 ) ) return true ; return false ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal']",500,"['Insert If', 'Insert Return', 'Insert Return']","['If', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Literal']","['If', 'Return', 'Return']",GPT Missed Nodes,0.4,0.6666666666666666,0.3333333333333333,0.4444444444444444,2,1,4
372,372,"public void METHOD_1 ( TYPE_1 response ) { TYPE_2 . METHOD_2 ( STRING_1 , ( STRING_2 + ( VAR_1 . toString ( ) ) ) ) ; }","public void METHOD_1 ( TYPE_1 response ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 . toString ( ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",501,['Delete Invocation'],"['Invocation', 'FieldRead', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
373,373,public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { offset = 0 ; VAR_2 = false ; VAR_3 = VAR_1 ; METHOD_2 ( ) ; VAR_4 = new boolean [ VAR_5 . size ( ) ] ; },public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { offset = 0 ; VAR_2 = false ; METHOD_2 ( ) ; VAR_3 = VAR_1 ; VAR_4 = new boolean [ VAR_5 . size ( ) ] ; },['Move Assignment'],502,['Move Assignment'],['Assignment'],['Assignment'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
374,374,"public static void METHOD_1 ( android.content.Context context , java.lang.String message ) { if ( context != null ) { TYPE_1 . METHOD_2 ( context . METHOD_3 ( ) , message , VAR_1 ) . show ( ) ; } }","public static void METHOD_1 ( android.content.Context context , java.lang.String message ) { TYPE_1 . METHOD_2 ( context . METHOD_3 ( ) , message , VAR_1 ) . show ( ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",506,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
375,375,protected void METHOD_1 ( java.lang.Integer ... values ) { super . METHOD_1 ( values ) ; VAR_1 . METHOD_2 ( values [ 0 ] ) ; VAR_1 . METHOD_3 ( values [ 1 ] ) ; },protected void METHOD_1 ( java.lang.Integer ... values ) { super . METHOD_1 ( values ) ; METHOD_2 ( values [ 0 ] ) ; VAR_1 . METHOD_2 ( values [ 0 ] ) ; },"['Move Invocation', 'Update Invocation', 'Update TypeAccess', 'Update Literal']",507,"['Delete Invocation', 'Insert Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'Literal']","['Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,2,4
376,376,public boolean METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) { return false ; } return ( VAR_2 . METHOD_2 ( ) . contains ( VAR_3 ) ) && ( ! ( METHOD_3 ( VAR_3 ) ) ) ; },public boolean METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) { return false ; } return VAR_2 . METHOD_2 ( ) . contains ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",508,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
377,377,public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_2 . toString ( ) ; } else { return null ; } },public java.lang.String METHOD_1 ( ) { return VAR_2 . toString ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",509,"['Delete LocalVariable', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['LocalVariable', 'Return']",Partial Match,0.14285714285714285,0.5,0.1111111111111111,0.1818181818181818,1,1,8
378,378,"public static java.lang.String METHOD_1 ( java.lang.String key ) { if ( VAR_1 ) return TYPE_1 . METHOD_2 ( ( STRING_1 + ( VAR_2 ) ) , TYPE_2 . METHOD_3 ( ) ) . getString ( key ) ; else return VAR_3 . getString ( key ) ; }","public static java.lang.String METHOD_1 ( java.lang.String key ) { if ( VAR_1 ) return TYPE_1 . METHOD_2 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) . getString ( key ) ; else return VAR_3 . getString ( key ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",510,['Delete Invocation'],"['TypeAccess', 'FieldRead', 'FieldRead', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
379,379,public TYPE_1 METHOD_1 ( TYPE_2 message ) throws java.io.IOException { return VAR_1 . METHOD_2 ( message ) ; },public TYPE_1 METHOD_1 ( TYPE_2 message ) throws java.io.IOException { VAR_1 . METHOD_2 ( message ) ; return new TYPE_1 ( ) ; },"['Move Invocation', 'Insert ConstructorCall']",511,"['Delete Return', 'Insert Invocation', 'Insert Return']","['Invocation', 'ConstructorCall']","['Return', 'Invocation', 'Return']",Partial Match,0.3333333333333333,0.0,0.0,0.0,0,3,2
380,380,"public void METHOD_1 ( TYPE_1 [ ] VAR_1 , int VAR_2 ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public TYPE_1 [ ] METHOD_1 ( TYPE_1 [ ] VAR_1 , int VAR_2 ) { return VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Update TypeReference', 'Insert Return', 'Move Invocation']",512,"['Insert TypeAccess', 'Insert LocalVariable', 'Insert Invocation']","['TypeReference', 'Return', 'Invocation']","['TypeAccess', 'LocalVariable', 'Invocation']",Partial Match,0.2,0.0,0.0,0.0,0,3,3
381,381,public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ( ( VAR_1 . getId ( ) ) - 1 ) ) ; METHOD_3 ( ) ; VAR_2 . METHOD_4 ( new TYPE_2 ( VAR_2 ) ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . getId ( ) ) ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation']",515,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['Invocation', 'Literal', 'BinaryOperator', 'Invocation', 'TypeAccess', 'FieldRead', 'ConstructorCall', 'Invocation']","['Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.16666666666666666,0.6666666666666666,0.25,0.36363636363636365,2,1,6
382,382,public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; start . METHOD_3 ( true ) ; VAR_3 . METHOD_3 ( false ) ; VAR_4 . setText ( STRING_1 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",516,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['FieldRead', 'Literal', 'Invocation', 'TypeAccess', 'Literal', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.25,1.0,0.3333333333333333,0.5,3,0,6
383,383,"public int METHOD_1 ( TYPE_1 < java.lang.String , java.lang.Integer > VAR_1 , TYPE_1 < java.lang.String , java.lang.Integer > VAR_2 ) { return ( VAR_2 . METHOD_2 ( ) ) - ( VAR_1 . METHOD_2 ( ) ) ; }","public int METHOD_1 ( TYPE_1 < java.lang.String , java.lang.Integer > VAR_1 , TYPE_1 < java.lang.String , java.lang.Integer > VAR_2 ) { return ( VAR_1 . METHOD_2 ( ) ) - ( VAR_2 . METHOD_2 ( ) ) ; }",['Move Invocation'],517,"['Update VariableRead', 'Update VariableRead']",['Invocation'],"['VariableRead', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,1
384,384,public java.lang.Void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . contains ( VAR_3 . id ) ) ) { VAR_4 . add ( VAR_3 . id ) ; } return null ; },public java.lang.Void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . add ( VAR_3 . id ) ; return null ; },"['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",519,['Delete Block'],"['Invocation', 'TypeAccess', 'FieldRead', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
385,385,public void METHOD_1 ( TYPE_1 event ) { if ( METHOD_2 ( ) ) { if ( ( ( event . METHOD_3 ( ) ) != null ) && ( event . METHOD_3 ( ) . equals ( VAR_1 ) ) ) { VAR_2 = true ; } } },public void METHOD_1 ( TYPE_1 event ) { if ( METHOD_2 ( ) ) { if ( event . METHOD_3 ( ) . equals ( VAR_1 ) ) { VAR_2 = true ; } } },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",520,['Delete Invocation'],"['Invocation', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
386,386,protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; if ( ! ( METHOD_3 ( ) ) ) { VAR_3 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ; } },protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",521,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
387,387,public void METHOD_1 ( ) { VAR_1 . setText ( ( ( VAR_2 . size ( ) ) + STRING_1 ) ) ; },public void METHOD_1 ( ) { VAR_1 . setText ( ( ( ( VAR_2 . size ( ) ) - 1 ) + STRING_1 ) ) ; },"['Insert BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Insert Literal']",523,"['Insert BinaryOperator', 'Insert LocalVariable']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'Literal']","['BinaryOperator', 'LocalVariable']",Partial Match,0.25,0.5,0.2,0.28571428571428575,1,1,4
388,388,public int METHOD_1 ( ) { return INT_1 + ( ( int ) ( ( java.lang.Math.random ( ) ) * ( INT_2 + 1 ) ) ) ; },public int METHOD_1 ( ) { return INT_1 + ( ( int ) ( ( java.lang.Math.random ( ) ) * INT_2 ) ) ; },"['Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",524,['Delete BinaryOperator'],"['FieldRead', 'Literal', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
389,389,public void METHOD_1 ( TYPE_1 node ) { node . METHOD_2 ( ) . METHOD_3 ( this ) ; node . METHOD_4 ( ) . METHOD_3 ( this ) ; VAR_1 . add ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 node ) { node . METHOD_4 ( ) . METHOD_3 ( this ) ; node . METHOD_2 ( ) . METHOD_3 ( this ) ; VAR_1 . add ( VAR_2 ) ; },['Move Invocation'],526,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
390,390,public synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } },public synchronized void METHOD_1 ( ) { VAR_1 = null ; },"['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",527,"['Delete Invocation', 'Delete Return']","['Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'Return']",Partial Match,0.1111111111111111,0.5,0.125,0.2,1,1,7
391,391,public void METHOD_1 ( TYPE_1 a ) { VAR_1 . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( ) ) { VAR_1 . METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 a ) { VAR_1 . METHOD_2 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",528,['Delete Invocation'],"['TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
392,392,public void handle ( TYPE_1 event ) { METHOD_1 ( ) ; METHOD_2 ( ) ; },public void handle ( TYPE_1 event ) { METHOD_1 ( ) ; java.lang.System.out.println ( METHOD_2 ( ) ) ; },"['Insert Invocation', 'Insert FieldRead', 'Move Invocation', 'Insert TypeAccess']",531,"['Insert TypeAccess', 'Insert Invocation']","['Invocation', 'FieldRead', 'Invocation', 'TypeAccess']","['TypeAccess', 'Invocation']",GPT Missed Nodes,0.6666666666666666,1.0,0.5,0.6666666666666666,2,0,2
393,393,public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return new TYPE_1 ( ( ( ( ( STRING_1 + ( TYPE_1 . METHOD_2 ( path ) ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) ) ; },public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return new TYPE_1 ( ( ( ( ( STRING_1 + ( path ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) ) ; },"['Move FieldRead', 'Delete TypeAccess', 'Delete Invocation']",533,['Delete Invocation'],"['FieldRead', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
394,394,public int METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { return ( TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) . size ( ) ) + ( TYPE_1 . METHOD_2 ( METHOD_4 ( VAR_1 ) ) . size ( ) ) ; },public int METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { return TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) . size ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator']",537,['Delete Invocation'],"['Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'Invocation', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.14285714285714285,0.25,1,0,6
395,395,public static long METHOD_1 ( double a ) { return ( ( long ) ( a + ( ( TYPE_1 . METHOD_2 ( a ) ) * FLOAT_1 ) ) ) ; },public static long METHOD_1 ( double a ) { return ( ( long ) ( a + FLOAT_1 ) ) ; },"['Move FieldRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",538,['Delete Invocation'],"['FieldRead', 'TypeAccess', 'VariableRead', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,1,0,4
396,396,public TYPE_1 METHOD_1 ( java.lang.Long id ) { return METHOD_2 ( id ) . METHOD_1 ( ) ; },public TYPE_1 METHOD_1 ( java.lang.Long id ) { return METHOD_2 ( id ) ; },"['Move Invocation', 'Delete Invocation']",539,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
397,397,public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( METHOD_3 ( ) ) ; } },public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",540,"['Delete Block', 'Delete Invocation']","['Invocation', 'FieldRead', 'Block', 'If']","['Block', 'Invocation']",GPT Missed Nodes,0.5,0.5,0.25,0.3333333333333333,1,1,3
398,398,public boolean METHOD_1 ( int VAR_1 ) { return ! ( VAR_2 . get ( VAR_1 ) . METHOD_2 ( ) ) ; },public boolean METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) . METHOD_2 ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",541,['Delete Invocation'],"['Invocation', 'UnaryOperator']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
399,399,private static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; if ( VAR_3 ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_2 . size ( ) ) ) ) ; } },private static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; java.lang.System.out.println ( VAR_2 . size ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Block', 'Delete If']",542,"['Delete Invocation', 'Delete VariableRead']","['Invocation', 'Invocation', 'FieldRead', 'BinaryOperator', 'FieldRead', 'Block', 'If']","['Invocation', 'VariableRead']",Partial Match,0.16666666666666666,0.0,0.0,0.0,0,2,7
400,400,"protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( null , ( - 1 ) ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_3 ) ; VAR_1 . METHOD_4 ( STRING_2 , VAR_4 ) ; super . METHOD_1 ( VAR_1 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_3 ) ; VAR_1 . METHOD_4 ( STRING_2 , VAR_4 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Literal', 'Delete UnaryOperator', 'Delete Invocation']",543,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Literal', 'Literal', 'UnaryOperator', 'Invocation']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
401,401,private void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { VAR_2 = null ; VAR_1 = true ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) ; } } },private void METHOD_1 ( ) { VAR_2 = null ; VAR_1 = true ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) ; } },"['Move Assignment', 'Move Assignment', 'Move If', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",547,['Delete Wra'],"['Assignment', 'Assignment', 'If', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
402,402,protected java.util.Collection < TYPE_1 > METHOD_1 ( java.net.URL url ) { METHOD_2 ( url ) ; METHOD_3 ( ) ; METHOD_4 ( true ) ; METHOD_4 ( false ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; return this . VAR_1 . values ( ) ; },protected java.util.Collection < TYPE_1 > METHOD_1 ( java.net.URL url ) { index ( ) ; return this . VAR_1 . values ( ) ; },"['Update Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",548,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['Invocation', 'VariableRead', 'Invocation', 'Literal', 'Invocation', 'Literal', 'Invocation', 'Invocation', 'Invocation']","['Invocation', 'Invocation', 'Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,1.0,0.5555555555555556,0.7142857142857143,5,0,4
403,403,public void METHOD_1 ( java.lang.String msg ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) VAR_2 . METHOD_3 ( msg ) ; },public void METHOD_1 ( java.lang.String msg ) { VAR_2 . METHOD_3 ( msg ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",551,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
404,404,"public synchronized void setValue ( java.lang.String key , java.lang.Object value ) { if ( value != null ) { METHOD_1 ( VAR_1 . getClass ( ) ) ; } VAR_2 . put ( key , TYPE_1 . METHOD_2 ( value ) ) ; }","public synchronized void setValue ( java.lang.String key , java.lang.Object value ) { if ( value != null ) { METHOD_1 ( VAR_1 . getClass ( ) ) ; } VAR_2 . put ( key , value ) ; }","['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",552,"['Delete TypeAccess', 'Delete Invocation']","['VariableRead', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,2,0,1
405,405,public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) VAR_1 . METHOD_3 ( ) ; super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",553,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1,0.18181818181818182,1,0,9
406,406,"public void METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { METHOD_3 ( METHOD_4 ( ) , METHOD_5 ( ) ) ; remove ( ) ; this . remove ( ) ; } else { new TYPE_1 ( VAR_1 , STRING_1 ) ; } }","public void METHOD_1 ( ) { METHOD_3 ( METHOD_4 ( ) , METHOD_5 ( ) ) ; remove ( ) ; this . remove ( ) ; }","['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Block', 'Delete If']",554,"['Delete Block', 'Delete Invocation']","['Invocation', 'Invocation', 'Invocation', 'Invocation', 'UnaryOperator', 'Block', 'FieldRead', 'FieldRead', 'ConstructorCall', 'Block', 'If']","['Block', 'Invocation']",GPT Missed Nodes,0.3333333333333333,1.0,0.18181818181818182,0.3076923076923077,2,0,9
407,407,boolean METHOD_1 ( java.lang.Long id ) { return ( id != null ) && ( VAR_1 . METHOD_2 ( id ) ) ; },boolean METHOD_1 ( java.lang.Long id ) { return VAR_1 . METHOD_2 ( id ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",555,['Delete UnaryOperator'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
408,408,public void METHOD_1 ( int VAR_1 ) { id = new int [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { id [ i ] = i ; VAR_2 [ i ] = 1 ; } },public METHOD_1 ( int VAR_1 ) { id = new int [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) id [ i ] = i ; VAR_2 [ i ] = 1 ; },"['Move Assignment', 'Insert FieldRead', 'Delete TypeReference', 'Delete VariableRead']",556,"['Delete Wra', 'Delete Block', 'Insert Assignment']","['Assignment', 'FieldRead', 'TypeReference', 'VariableRead']","['Wra', 'Block', 'Assignment']",Partial Match,0.16666666666666666,0.0,0.0,0.0,0,3,4
409,409,"public void METHOD_1 ( float VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( ) ; if ( VAR_5 ) VAR_4 . METHOD_5 ( 0 , ( VAR_1 / INT_1 ) , 0 ) ; }","public void METHOD_1 ( float VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( 0 , ( VAR_1 / INT_1 ) , 0 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",557,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
410,410,public double METHOD_1 ( ) { return METHOD_2 ( ) ; },public double METHOD_1 ( ) { return 0 ; },"['Insert Literal', 'Delete Invocation']",558,['Update Invocation'],"['Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
411,411,"public void METHOD_1 ( java.lang.Object VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , TYPE_1 VAR_5 ) { if ( ( this ) == VAR_1 ) return ; TYPE_2 . METHOD_2 ( STRING_1 ) ; }","public void METHOD_1 ( java.lang.Object VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , TYPE_1 VAR_5 ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; }","['Delete ThisAccess', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",559,['Delete Invocation'],"['ThisAccess', 'VariableRead', 'BinaryOperator', 'Return', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
412,412,protected void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; } } super . METHOD_1 ( ) ; },protected void METHOD_1 ( ) { VAR_1 . METHOD_3 ( ) ; super . METHOD_1 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If']",564,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.14285714285714285,0.5,0.1,0.16666666666666669,1,1,9
413,413,"public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; if ( VAR_2 ) VAR_3 . format ( STRING_1 , VAR_4 , VAR_5 , VAR_6 ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; VAR_3 . format ( STRING_1 , VAR_4 , VAR_5 , VAR_6 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",565,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
414,414,public java.lang.String toString ( ) { return ( ( ( ( ( ( VAR_1 ) + STRING_1 ) + ( VAR_2 ) ) + STRING_1 ) + ( VAR_3 ) ) + STRING_2 ) + ( VAR_4 ) ; },public java.lang.String toString ( ) { return ( ( ( ( VAR_1 ) + STRING_1 ) + ( VAR_2 ) ) + STRING_1 ) + ( VAR_3 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",566,"['Delete VariableRead', 'Delete VariableRead']","['BinaryOperator', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator']","['VariableRead', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,5
415,415,"public boolean METHOD_1 ( int i , TYPE_1 VAR_1 , int j ) { return ( ( VAR_2 ) == ( VAR_3 ) ) && ( j == ( METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; }","public boolean METHOD_1 ( int i , TYPE_1 VAR_1 , int j ) { return ( VAR_2 ) == ( VAR_3 ) ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator', 'Delete BinaryOperator']",567,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'Invocation', 'Invocation', 'Invocation', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.14285714285714285,0.25,1,0,6
416,416,public void METHOD_1 ( android.view.View view ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; } },public void METHOD_1 ( android.view.View view ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",568,['Delete If'],"['Invocation', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['If'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
417,417,public java.lang.Object execute ( TYPE_1 event ) throws TYPE_2 { final java.lang.String VAR_1 = event . METHOD_1 ( STRING_1 ) ; if ( METHOD_2 ( VAR_1 ) ) { TYPE_3 . METHOD_3 ( VAR_2 ) ; } return null ; },public java.lang.Object execute ( TYPE_1 event ) throws TYPE_2 { final java.lang.String VAR_1 = event . METHOD_1 ( STRING_1 ) ; METHOD_2 ( VAR_1 ) ; TYPE_3 . METHOD_3 ( VAR_2 ) ; return null ; },"['Move Invocation', 'Move Invocation', 'Delete Block', 'Delete If']",569,['Delete Block'],"['Invocation', 'Invocation', 'Block', 'If']",['Block'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
418,418,"private static boolean METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { return ( ( VAR_4 - VAR_1 ) >= 0 ) && ( ( VAR_2 - VAR_3 ) >= 0 ) ; }","private static boolean METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { return ( VAR_1 <= VAR_4 ) && ( VAR_2 >= VAR_3 ) ; }","['Update BinaryOperator', 'Move BinaryOperator', 'Update BinaryOperator', 'Move VariableRead', 'Update BinaryOperator', 'Move BinaryOperator', 'Delete Literal', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",571,"['Delete BinaryOperator', 'Delete BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Update BinaryOperator', 'Update BinaryOperator', 'Update VariableRead', 'Update VariableRead']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'VariableRead', 'BinaryOperator', 'BinaryOperator', 'Literal', 'Literal', 'BinaryOperator', 'BinaryOperator']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'VariableRead', 'VariableRead']",GPT Missed Nodes,0.6666666666666666,0.5,0.4,0.4444444444444445,4,4,6
419,419,"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) . replace ( VAR_3 , VAR_1 ) . METHOD_3 ( null ) . commit ( ) ; VAR_2 . METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) . replace ( VAR_3 , VAR_1 ) . commit ( ) ; VAR_2 . METHOD_4 ( ) ; }","['Update Invocation', 'Move Invocation', 'Delete Literal', 'Delete Invocation']",573,['Delete Invocation'],"['Invocation', 'Invocation', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
420,420,private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return ; } VAR_1 . METHOD_2 ( ) ; },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",575,['Delete Return'],"['FieldRead', 'Literal', 'BinaryOperator', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
421,421,public void METHOD_1 ( ) { if ( VAR_1 . contains ( VAR_2 ) ) { METHOD_2 ( VAR_2 ) ; } },public void METHOD_1 ( ) { METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",576,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
422,422,public void METHOD_1 ( android.view.View view ) { if ( VAR_1 ) { METHOD_2 ( VAR_2 ) ; } else { METHOD_2 ( VAR_3 ) ; } },public void METHOD_1 ( android.view.View view ) { METHOD_2 ( VAR_3 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",577,"['Delete LocalVariable', 'Delete Invocation']","['Invocation', 'FieldRead', 'TypeAccess', 'Invocation', 'Block', 'Block', 'If']","['LocalVariable', 'Invocation']",Partial Match,0.16666666666666666,0.5,0.14285714285714285,0.22222222222222224,1,1,6
423,423,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( ( VAR_2 . getText ( ) . toString ( ) ) != null ) && ( ( VAR_3 . getText ( ) . toString ( ) ) != null ) ) { METHOD_2 ( ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( ( VAR_2 . getText ( ) ) != null ) && ( ( VAR_3 . getText ( ) ) != null ) ) { METHOD_2 ( ) ; } },"['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete Invocation']",578,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.25,0.4,1,0,3
424,424,"public TYPE_1 METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int end ) { append ( VAR_1 , start , end ) ; stringBuilder.append ( ""\n"" ) ; return this ; }","public TYPE_1 METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int end ) { return append ( VAR_1 , start , end ) . append ( ""\n"" ) ; }","['Insert Invocation', 'Move Invocation', 'Move Literal', 'Delete FieldRead', 'Delete Invocation', 'Delete ThisAccess']",580,"['Delete Invocation', 'Insert Invocation']","['Invocation', 'Invocation', 'Literal', 'FieldRead', 'Invocation', 'ThisAccess']","['Invocation', 'Invocation']",GPT Missed Nodes,0.25,1.0,0.3333333333333333,0.5,2,0,4
425,425,"protected void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { if ( METHOD_2 ( VAR_1 , VAR_2 ) ) { if ( VAR_3 == null ) { METHOD_3 ( VAR_1 , VAR_2 ) ; } } else { METHOD_4 ( VAR_2 ) ; } }","protected void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { if ( ! ( METHOD_2 ( VAR_1 , VAR_2 ) ) ) { METHOD_4 ( VAR_2 ) ; } }","['Insert UnaryOperator', 'Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Block']",581,"['Insert VariableRead', 'Delete If', 'Delete If']","['UnaryOperator', 'Invocation', 'Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'VariableRead', 'VariableRead', 'Invocation', 'Block', 'If', 'Block']","['VariableRead', 'If', 'If']",GPT Missed Nodes,0.2857142857142857,0.3333333333333333,0.08333333333333333,0.13333333333333333,1,2,11
426,426,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( init ( ) ) VAR_3 . METHOD_2 ( VAR_2 , VAR_1 , null ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_2 , VAR_1 , null ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",584,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
427,427,"public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Throwable VAR_2 ) { return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , null ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Throwable VAR_2 ) { TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , null ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",585,"['Update Return', 'Delete Return']","['TypeReference', 'Invocation', 'Return']","['Return', 'Return']",GPT Missed Nodes,0.3333333333333333,0.5,0.3333333333333333,0.4,1,1,2
428,428,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) != null ) { return ; } METHOD_3 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",586,"['Delete Return', 'Delete Invocation']","['TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Return', 'Block', 'If']","['Return', 'Invocation']",GPT Missed Nodes,0.2857142857142857,1.0,0.2857142857142857,0.4444444444444445,2,0,5
429,429,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_1 . METHOD_3 ( ) ) ) && ( super . METHOD_1 ( VAR_1 ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_1 . METHOD_3 ( ) ) ) { return false ; } return super . METHOD_1 ( VAR_1 ) ; },"['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Move Invocation', 'Insert Return', 'Insert Literal', 'Delete BinaryOperator']",587,"['Insert BinaryOperator', 'Insert Return', 'Delete BinaryOperator', 'Update Return']","['If', 'BinaryOperator', 'BinaryOperator', 'Block', 'Invocation', 'Return', 'Literal', 'BinaryOperator']","['BinaryOperator', 'Return', 'BinaryOperator', 'Return']",GPT Missed Nodes,0.3333333333333333,0.5,0.25,0.3333333333333333,2,2,6
430,430,public void METHOD_1 ( java.lang.String time ) { TYPE_1 VAR_1 ; if ( ( getView ( ) ) != null ) { VAR_1 = ( ( TYPE_1 ) ( getView ( ) . METHOD_2 ( VAR_2 ) ) ) ; VAR_3 . setText ( time ) ; } },public void METHOD_1 ( java.lang.String time ) { TYPE_1 VAR_1 ; if ( ( VAR_1 = ( ( TYPE_1 ) ( getView ( ) . METHOD_2 ( VAR_2 ) ) ) ) == null ) return ; VAR_3 . setText ( time ) ; },"['Move Invocation', 'Update BinaryOperator', 'Move Assignment', 'Insert Return', 'Delete Invocation']",589,"['Update Invocation', 'Delete Invocation', 'Insert LocalVariable']","['Invocation', 'BinaryOperator', 'Assignment', 'Return', 'Invocation']","['Invocation', 'Invocation', 'LocalVariable']",Partial Match,0.2,0.3333333333333333,0.2,0.25,1,2,4
431,431,"public void METHOD_1 ( TYPE_1 < TYPE_2 > result , boolean VAR_1 ) { if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; } TYPE_3 . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 ( VAR_3 , result , VAR_4 ) ) ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 > result , boolean VAR_1 ) { TYPE_3 . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 ( VAR_3 , result , VAR_4 ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; } }",['Move If'],590,['Move Block'],['If'],['Block'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
432,432,public boolean METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) != ( ( VAR_2 ) - 1 ) ) { return false ; } return true ; },public boolean METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) < ( VAR_2 ) ) { return false ; } return true ; },"['Update BinaryOperator', 'Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",592,"['Delete BinaryOperator', 'Update BinaryOperator']","['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator']","['BinaryOperator', 'BinaryOperator']",GPT Missed Nodes,0.3333333333333333,1.0,0.5,0.6666666666666666,2,0,2
433,433,"public TYPE_1 METHOD_1 ( java.lang.String name ) { if ( ( VAR_1 . get ( name ) ) != null ) return VAR_1 . get ( name ) ; else return new TYPE_1 ( METHOD_2 ( STRING_1 ) , name ) ; }",public TYPE_1 METHOD_1 ( java.lang.String name ) { return VAR_1 . get ( name ) ; },"['Move Return', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",593,"['Delete Invocation', 'Delete Invocation']","['Return', 'TypeAccess', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'Invocation', 'VariableRead', 'ConstructorCall', 'Return', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.1111111111111111,1.0,0.14285714285714285,0.25,2,0,12
434,434,public java.lang.String toString ( ) { return ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) + ( VAR_3 ) ; },public java.lang.String toString ( ) { return ( ( STRING_1 + ( VAR_2 ) ) + STRING_3 ) + ( VAR_3 ) ; },"['Move BinaryOperator', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",594,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['BinaryOperator', 'FieldRead', 'FieldRead', 'FieldRead', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']","['Invocation', 'Invocation', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,3,8
435,435,public boolean METHOD_1 ( ) { return ( ( this ) instanceof TYPE_1 ) || ( ( this ) instanceof TYPE_2 ) ; },public boolean METHOD_1 ( ) { if ( ( ( this ) instanceof TYPE_1 ) || ( ( this ) instanceof TYPE_2 ) ) { return true ; } return false ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal']",595,"['Insert If', 'Insert Return', 'Insert Return']","['If', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Literal']","['If', 'Return', 'Return']",GPT Missed Nodes,0.4,0.6666666666666666,0.3333333333333333,0.4444444444444444,2,1,4
436,436,"public boolean METHOD_1 ( ) { return ""0"" . equals ( result ) ; }",public boolean METHOD_1 ( ) { return ( result ) == 0 ; },"['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal', 'Delete Literal', 'Delete Invocation']",596,"['Delete Invocation', 'Insert BinaryOperator']","['BinaryOperator', 'FieldRead', 'Literal', 'Literal', 'Invocation']","['Invocation', 'BinaryOperator']",GPT Missed Nodes,0.5,1.0,0.4,0.5714285714285715,2,0,3
437,437,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_2 . getType ( ) . equals ( VAR_3 ) ) && ( ! ( METHOD_2 ( ) ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_2 . getType ( ) ) == ( VAR_3 ) ) && ( ! ( METHOD_2 ( ) ) ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",597,"['Update Invocation', 'Insert BinaryOperator', 'Delete Invocation']","['BinaryOperator', 'Invocation', 'FieldRead', 'TypeAccess', 'Invocation']","['Invocation', 'BinaryOperator', 'Invocation']",GPT Missed Nodes,0.5,0.6666666666666666,0.4,0.5,2,1,3
438,438,public void execute ( java.lang.String VAR_1 ) { VAR_2 = true ; VAR_3 . METHOD_1 ( VAR_1 ) ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_2 ( ) ; } },public void execute ( java.lang.String VAR_1 ) { VAR_2 = true ; VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",601,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
439,439,"void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) ;",void METHOD_1 ( java.lang.String VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",602,['Delete Parameter'],"['TypeReference', 'Parameter']",['Parameter'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
440,440,public java.lang.Object get ( int index ) { if ( ( index < 0 ) || ( index > ( ( size ) - 1 ) ) ) return null ; return VAR_1 [ index ] ; },public java.lang.Object get ( int index ) { if ( index > ( size ) ) return null ; return VAR_1 [ index ] ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move VariableRead', 'Delete Literal', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator']",603,"['Delete UnaryOperator', 'Delete Assignment']","['BinaryOperator', 'BinaryOperator', 'VariableRead', 'Literal', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator']","['UnaryOperator', 'Assignment']",Partial Match,0.0,0.0,0.0,0.0,0,2,9
441,441,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) == null ) { if ( ( VAR_3 ) != null ) VAR_3 . METHOD_2 ( VAR_4 ) ; } else { METHOD_3 ( VAR_5 ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_3 ) != null ) VAR_3 . METHOD_2 ( VAR_4 ) ; },"['Move If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",604,"['Delete Invocation', 'Delete VariableRead']","['If', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'VariableRead']",Partial Match,0.125,0.5,0.1111111111111111,0.1818181818181818,1,1,8
442,442,public boolean METHOD_1 ( int [ ] context ) { if ( ( VAR_1 . length ) == 0 ) return true ; else return VAR_2 . contains ( new TYPE_1 ( TYPE_2 . METHOD_2 ( context ) ) ) ; },public boolean METHOD_1 ( int [ ] context ) { return VAR_2 . contains ( new TYPE_1 ( TYPE_2 . METHOD_2 ( context ) ) ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",606,['Delete Return'],"['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.1111111111111111,0.19999999999999998,1,0,8
443,443,public void METHOD_1 ( TYPE_1 event ) { super . METHOD_1 ( event ) ; TYPE_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_3 . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 event ) { super . METHOD_1 ( event ) ; TYPE_3 . METHOD_2 ( ) ; TYPE_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; },['Move Invocation'],607,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
444,444,"public boolean METHOD_1 ( android.view.View VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( this , VAR_1 , ( ( VAR_2 . METHOD_4 ( ) ) - ( METHOD_5 ( ) ) ) ) ; }","public boolean METHOD_1 ( android.view.View VAR_1 ) { return ( ( METHOD_2 ( ) ) != null ) && ( METHOD_2 ( ) . METHOD_3 ( this , VAR_1 , ( ( VAR_2 . METHOD_4 ( ) ) - ( METHOD_5 ( ) ) ) ) ) ; }","['Insert BinaryOperator', 'Insert BinaryOperator', 'Move Invocation', 'Insert Invocation', 'Insert Literal']",608,"['Insert BinaryOperator', 'Insert Invocation']","['BinaryOperator', 'BinaryOperator', 'Invocation', 'Invocation', 'Literal']","['BinaryOperator', 'Invocation']",GPT Missed Nodes,0.6666666666666666,1.0,0.4,0.5714285714285715,2,0,3
445,445,"public static java.util.List < java.io.File > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { return TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , false ) ; }","public static java.util.List < java.io.File > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { return TYPE_1 . METHOD_1 ( VAR_1 , true , true , VAR_2 ) ; }","['Move VariableRead', 'Update Literal', 'Insert Literal']",609,"['Insert VariableRead', 'Insert VariableRead', 'Move VariableRead']","['VariableRead', 'Literal', 'Literal']","['VariableRead', 'VariableRead', 'VariableRead']",GPT Missed Nodes,0.5,0.3333333333333333,0.3333333333333333,0.3333333333333333,1,2,2
446,446,public void METHOD_1 ( int VAR_1 ) { if ( ( response ) != null ) response . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( int VAR_1 ) { response . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",610,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
447,447,"public void METHOD_1 ( java.lang.String VAR_1 ) { METHOD_2 ( ( STRING_1 + VAR_1 ) , VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 . METHOD_3 ( VAR_1 ) ; },"['Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation']",611,['Delete Invocation'],"['FieldRead', 'VariableRead', 'BinaryOperator', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,1,0,4
448,448,protected boolean METHOD_1 ( ) { return ( ( ( VAR_1 ) != null ) && ( ( VAR_2 . getValue ( ) ) != null ) ) && ( ! ( VAR_2 . getValue ( ) . isEmpty ( ) ) ) ; },protected boolean METHOD_1 ( ) { return ( ( ( VAR_1 ) != null ) && ( ( VAR_2 . getValue ( ) ) != null ) ) && ( VAR_2 . getValue ( ) . isEmpty ( ) ) ; },"['Move Invocation', 'Delete UnaryOperator']",612,['Delete Invocation'],"['Invocation', 'UnaryOperator']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
449,449,"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( VAR_2 ) ; intent . METHOD_2 ( STRING_1 ) ; METHOD_3 ( intent , VAR_3 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( VAR_2 ) ; intent . METHOD_2 ( STRING_1 ) ; getActivity ( ) . METHOD_3 ( intent , VAR_3 ) ; }",['Insert Invocation'],613,['Insert Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
450,450,"public static void main ( java.lang.String [ ] args ) throws TYPE_1 , java.io.IOException , TYPE_2 , TYPE_3 { TYPE_4 . METHOD_1 ( new TYPE_5 ( TYPE_6 . METHOD_2 ( args ) ) ) ; }","public static void main ( java.lang.String [ ] args ) throws TYPE_1 , java.io.IOException { new TYPE_5 ( TYPE_6 . METHOD_2 ( args ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation']",614,"['Delete TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess']","['ConstructorCall', 'TypeReference', 'TypeReference', 'TypeAccess', 'Invocation']","['TypeReference', 'TypeReference', 'Invocation', 'TypeAccess']",GPT Missed Nodes,0.75,1.0,0.8,0.888888888888889,4,0,1
451,451,private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 p : VAR_2 ) { if ( p . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) return p ; } return null ; },private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 p : VAR_2 ) { if ( ( p . METHOD_2 ( ) ) == VAR_1 ) return p ; } return null ; },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",616,"['Delete Invocation', 'Insert TypeAccess']","['BinaryOperator', 'Invocation', 'VariableRead', 'Invocation']","['Invocation', 'TypeAccess']",Partial Match,0.25,0.5,0.25,0.3333333333333333,1,1,3
452,452,"public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; } VAR_3 . put ( VAR_1 , VAR_2 ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; }","['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",618,['Delete Invocation'],"['TypeAccess', 'VariableRead', 'Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.125,0.2222222222222222,1,0,7
453,453,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . getId ( ) ) == ( VAR_3 ) ) { VAR_4 . setText ( STRING_1 ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . getId ( ) ) == ( VAR_3 ) ) ; VAR_4 . setText ( STRING_1 ) ; },"['Move Invocation', 'Delete Block']",619,['Delete If'],"['Invocation', 'Block']",['If'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
454,454,public double METHOD_1 ( ) { if ( ( VAR_1 ) != 0 ) { return ( ( int ) ( ( INT_1 * ( VAR_2 ) ) / ( VAR_1 ) ) ) ; } else { return 0 ; } },public double METHOD_1 ( ) { return ( ( int ) ( ( INT_1 * ( VAR_2 ) ) / ( VAR_1 ) ) ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",620,"['Delete Return', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.16666666666666666,0.5,0.1111111111111111,0.1818181818181818,1,1,8
455,455,"public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( this ) ; if ( VAR_1 ) VAR_2 . METHOD_3 ( this , METHOD_4 ( ) ) ; }","public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( this ) ; VAR_2 . METHOD_3 ( this , METHOD_4 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Block', 'Delete If']",622,['Delete LocalVariable'],"['Invocation', 'TypeReference', 'Parameter', 'VariableRead', 'Block', 'If']",['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
456,456,"protected void METHOD_1 ( ) { METHOD_2 ( ) ; if ( METHOD_3 ( ) ) { METHOD_4 ( new android.content.Intent ( this , VAR_1 class ) ) ; TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) ; } super . METHOD_1 ( ) ; }","protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_4 ( new android.content.Intent ( this , VAR_1 class ) ) ; TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) ; super . METHOD_1 ( ) ; }","['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",623,['Delete Block'],"['Invocation', 'Invocation', 'Invocation', 'Block', 'If']",['Block'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
457,457,public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_1 ( ) ; } status = VAR_2 ; },public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; status = VAR_2 ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",624,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
458,458,"public void METHOD_1 ( java.lang.String path ) { if ( ( this . path ) != null ) this . path = TYPE_1 . METHOD_2 ( path , this . path ) ; }","public void METHOD_1 ( java.lang.String path ) { this . path = TYPE_1 . METHOD_2 ( path , this . path ) ; }","['Move Assignment', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",625,['Delete Invocation'],"['Assignment', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
459,459,"private void METHOD_1 ( ) { VAR_1 = VAR_2 . getString ( STRING_1 , VAR_3 ) ; getActivity ( ) . METHOD_2 ( VAR_4 . toUpperCase ( ) . replace ( STRING_2 , STRING_3 ) ) ; }","private void METHOD_1 ( ) { VAR_1 = VAR_2 . getString ( STRING_1 , VAR_3 ) . toUpperCase ( ) . replace ( STRING_2 , STRING_3 ) ; getActivity ( ) . METHOD_2 ( VAR_1 ) ; }","['Insert Invocation', 'Update Invocation', 'Move Invocation', 'Move Invocation', 'Insert TypeAccess', 'Update Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",626,"['Update Invocation', 'Update Invocation']","['Invocation', 'Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,1.0,0.18181818181818182,0.3076923076923077,2,0,9
460,460,public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 ; } else { return TYPE_1 . METHOD_2 ( parameters ) ; } },public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( parameters ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",627,"['Delete Return', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.16666666666666666,0.5,0.1111111111111111,0.1818181818181818,1,1,8
461,461,public static java.lang.String METHOD_1 ( final TYPE_1 field ) { if ( field == null ) { throw new TYPE_2 ( STRING_1 ) ; } return TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ; },public static java.lang.String METHOD_1 ( final TYPE_1 field ) { if ( field == null ) { throw new TYPE_2 ( STRING_1 ) ; } return TYPE_3 . METHOD_2 ( java.util.Arrays.asList ( VAR_1 . getName ( ) ) ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Move Invocation']",629,"['Insert TypeAccess', 'Insert Invocation']","['Invocation', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
462,462,public static java.util.List < TYPE_1 > METHOD_1 ( ) { return java.util.Arrays.asList ( VAR_1 ) ; },public static TYPE_1 [ ] METHOD_1 ( ) { return VAR_1 ; },"['Update TypeReference', 'Insert FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",630,"['Delete TypeAccess', 'Delete Invocation', 'Update TypeReference']","['TypeReference', 'FieldRead', 'TypeReference', 'TypeAccess', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation', 'TypeReference']",GPT Missed Nodes,0.75,1.0,0.5,0.6666666666666666,3,0,3
463,463,public void METHOD_1 ( java.lang.Integer VAR_1 ) throws java.lang.Exception { if ( ( this . VAR_1 ) != null ) if ( ! ( this . VAR_2 . equals ( VAR_1 ) ) ) throw new java.lang.Exception ( STRING_1 ) ; this . VAR_1 = VAR_1 ; },public void METHOD_1 ( java.lang.Integer VAR_1 ) throws java.lang.Exception { if ( ( this . VAR_1 ) != null ) if ( ( this . VAR_1 ) != VAR_1 ) throw new java.lang.Exception ( STRING_1 ) ; this . VAR_1 = VAR_1 ; },"['Insert BinaryOperator', 'Update FieldRead', 'Move FieldRead', 'Move VariableRead', 'Delete Invocation', 'Delete UnaryOperator']",631,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'FieldRead', 'VariableRead', 'Invocation', 'UnaryOperator']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
464,464,"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",634,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
465,465,public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) && ( ( VAR_2 ) != ( VAR_3 ) ) ) { TYPE_1 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( ) ; } },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",635,['Delete Invocation'],"['Invocation', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,5
466,466,"public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( this . VAR_1 . METHOD_1 ( ) . toString ( ) . replaceAll ( STRING_1 , VAR_2 ) ) ; }",public TYPE_1 METHOD_1 ( ) { return VAR_2 ; },"['Insert FieldRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall']",636,"['Delete Invocation', 'Delete TypeReference']","['FieldRead', 'ThisAccess', 'FieldRead', 'Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'ConstructorCall']","['Invocation', 'TypeReference']",Partial Match,0.16666666666666666,0.5,0.1111111111111111,0.1818181818181818,1,1,8
467,467,public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { char first = VAR_1 . METHOD_2 ( 0 ) ; if ( ( first < CHAR_1 ) || ( CHAR_2 < first ) ) { VAR_1 = VAR_2 . substring ( 1 ) ; } return VAR_1 ; },public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { char first = VAR_1 . METHOD_2 ( 0 ) ; if ( ( first < CHAR_1 ) && ( CHAR_2 < first ) ) { VAR_1 = VAR_2 . substring ( 1 ) ; } return VAR_1 ; },['Update BinaryOperator'],637,['Update UnaryOperator'],['BinaryOperator'],['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
468,468,public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( getContext ( ) ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( false ) ; if ( ! ( getActivity ( ) . METHOD_4 ( ) ) ) VAR_2 . show ( ) ; },public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( getContext ( ) ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( false ) ; VAR_2 . show ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",638,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
469,469,public boolean METHOD_1 ( ) { return java.lang.Boolean . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) . toString ( ) ) ; },public boolean METHOD_1 ( ) { return ( ( boolean ) ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) ; },"['Move Invocation', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",640,"['Delete Invocation', 'Insert UnaryOperator', 'Insert TypeAccess']","['Invocation', 'TypeReference', 'TypeAccess', 'Invocation', 'Invocation']","['Invocation', 'UnaryOperator', 'TypeAccess']",Partial Match,0.5,0.3333333333333333,0.2,0.25,1,2,4
470,470,public void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { VAR_3 = 0 ; METHOD_3 ( ) ; } },public void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 = 0 ; METHOD_3 ( ) ; },"['Move Assignment', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",642,['Delete IfStatement'],"['Assignment', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['IfStatement'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
471,471,public double [ ] position ( ) { return position . METHOD_1 ( ) ; },public double [ ] position ( ) { return position ; },"['Move FieldRead', 'Delete Invocation']",643,['Delete Invocation'],"['FieldRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
472,472,"public void METHOD_1 ( final int VAR_1 , final int VAR_2 , final android.content.Intent data ) { if ( VAR_1 == ( TYPE_1 . METHOD_2 ( ) ) ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 , data ) ; } }","public void METHOD_1 ( final int VAR_1 , final int VAR_2 , final android.content.Intent data ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 , data ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",644,['Delete Invocation'],"['Invocation', 'VariableRead', 'TypeAccess', 'Invocation', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
473,473,public java.lang.String getName ( ) { return VAR_1 . get ( ) ; },public java.lang.String getName ( ) { return name ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",645,"['Delete TypeAccess', 'Insert VariableRead']","['FieldRead', 'TypeAccess', 'Invocation']","['TypeAccess', 'VariableRead']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
474,474,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( VAR_3 . METHOD_2 ( ) ) ) VAR_4 . METHOD_3 ( true ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_3 . METHOD_2 ( ) ) VAR_4 . METHOD_3 ( true ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",646,['Delete VariableRead'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
475,475,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( ) ) METHOD_3 ( ) ; return ( VAR_2 ) == null ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; return ( VAR_2 ) == null ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",647,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
476,476,public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",648,['Delete Assignment'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
477,477,public java.util.List < TYPE_1 > METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; if ( VAR_1 ) { return VAR_2 ; } else { return VAR_3 ; } },public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_3 ) == null ) { METHOD_2 ( STRING_1 ) ; if ( VAR_1 ) { return VAR_2 ; } else { return VAR_3 ; } } else { return VAR_3 ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Invocation', 'Move If', 'Insert Return', 'Insert FieldRead']",649,"['Insert Invocation', 'Insert VariableRead']","['If', 'BinaryOperator', 'Block', 'Block', 'FieldRead', 'Literal', 'Invocation', 'If', 'Return', 'FieldRead']","['Invocation', 'VariableRead']",Partial Match,0.125,0.0,0.0,0.0,0,2,10
478,478,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == 1 ) { VAR_2 = INT_1 ; } VAR_3 [ 1 ] = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) >= INT_1 ) { VAR_3 [ 1 ] = VAR_1 ; } if ( ( VAR_2 ) < INT_1 ) { VAR_2 = INT_1 ; } },"['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Insert BinaryOperator', 'Insert FieldRead', 'Move Assignment', 'Insert FieldRead', 'Insert FieldRead', 'Delete Literal']",651,"['Update BinaryOperator', 'Update BinaryOperator', 'Insert BinaryOperator', 'Insert Assignment', 'Delete Assignment']","['If', 'BinaryOperator', 'BinaryOperator', 'Block', 'BinaryOperator', 'FieldRead', 'Assignment', 'FieldRead', 'FieldRead', 'Literal']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'Assignment', 'Assignment']",GPT Missed Nodes,0.3333333333333333,0.4,0.2,0.26666666666666666,2,3,8
479,479,public void METHOD_1 ( ) { if ( ( ( key ) == ( VAR_1 ) ) && ( ( VAR_2 . size ( ) ) != 0 ) ) VAR_3 = ( ++ ( VAR_3 ) ) % ( VAR_2 . size ( ) ) ; },public void METHOD_1 ( ) { if ( ( key ) == ( VAR_1 ) ) VAR_3 = ( ++ ( VAR_3 ) ) % ( VAR_2 . size ( ) ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",652,['Delete Assignment'],"['BinaryOperator', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
480,480,public void METHOD_1 ( boolean VAR_1 ) { if ( ! ( VAR_2 ) ) { setState ( ( VAR_1 ? VAR_3 : VAR_4 ) ) ; } super . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( boolean VAR_1 ) { setState ( ( VAR_1 ? VAR_3 : VAR_4 ) ) ; super . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",654,['Delete Invocation'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,5
481,481,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",655,['Delete Invocation'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,5
482,482,public int METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return 0 ; } else { return VAR_2 . size ( ) ; } },public int METHOD_1 ( ) { return VAR_2 . size ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",656,"['Delete VariableRead', 'Delete Invocation']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'Block', 'If']","['VariableRead', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,2,9
483,483,public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) return VAR_3 . get ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( ) ; else return false ; },public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_3 . get ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",657,['Delete If'],"['Return', 'TypeAccess', 'VariableRead', 'Invocation', 'Block', 'Literal', 'Return', 'Block', 'If']",['If'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
484,484,"public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { METHOD_1 ( METHOD_2 ( ) . getName ( ) , VAR_1 ) ; }","public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { METHOD_1 ( METHOD_2 ( ) , VAR_1 ) ; }","['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",658,['Delete Invocation'],"['Invocation', 'Invocation', 'VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
485,485,java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 . METHOD_2 ( ) ; else return null ; },java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",659,"['Delete Invocation', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['Invocation', 'Return']",Partial Match,0.14285714285714285,0.5,0.1111111111111111,0.1818181818181818,1,1,8
486,486,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; this . METHOD_4 ( true ) ; VAR_1 . METHOD_5 ( ) . METHOD_6 ( STRING_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; this . METHOD_4 ( true ) ; VAR_1 . METHOD_6 ( STRING_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",660,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
487,487,public void update ( ) throws TYPE_1 { METHOD_1 ( ) ; if ( ( state ) != ( VAR_1 ) ) { VAR_2 = METHOD_2 ( ) ; VAR_3 = new java.util.Date ( ) ; } METHOD_3 ( ) ; },public void update ( ) throws TYPE_1 { METHOD_1 ( ) ; if ( ( state ) != ( VAR_1 ) ) { VAR_2 = METHOD_2 ( ) ; VAR_3 = new java.util.Date ( ) ; METHOD_3 ( ) ; } },['Move Invocation'],661,"['Move Invocation', 'Move Invocation']",['Invocation'],"['Invocation', 'Invocation']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
488,488,public static boolean METHOD_1 ( int VAR_1 ) { return ( VAR_1 < 0 ) || ( VAR_1 >= ( VAR_2 ) ) ; },public static boolean METHOD_1 ( int VAR_1 ) { return VAR_1 >= ( VAR_2 ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",662,['Delete BinaryOperator'],"['BinaryOperator', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
489,489,private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( STRING_1 ) ) { return ( VAR_1 . METHOD_3 ( STRING_2 ) ) != null ; } return false ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_3 ( STRING_2 ) ) != null ; },"['Move Return', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",663,"['Delete Invocation', 'Delete Return']","['Return', 'VariableRead', 'TypeAccess', 'Invocation', 'Block', 'If', 'Literal', 'Return']","['Invocation', 'Return']",GPT Missed Nodes,0.2857142857142857,1.0,0.25,0.4,2,0,6
490,490,public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_4 . getName ( ) . equals ( VAR_1 ) ) { return VAR_2 ; } } return null ; },public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { if ( ( VAR_4 . getName ( ) ) == VAR_1 ) { return VAR_2 ; } } return null ; },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",664,['Update TypeAccess'],"['BinaryOperator', 'Invocation', 'VariableRead', 'Invocation']",['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
491,491,"public static void METHOD_1 ( android.content.Context content , java.lang.CharSequence text ) { TYPE_1 . METHOD_2 ( content . METHOD_3 ( ) , text ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_3 . show ( ) ; }","public static void METHOD_1 ( android.content.Context content , java.lang.CharSequence text ) { TYPE_1 . METHOD_2 ( content , text ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_3 . show ( ) ; }","['Move VariableRead', 'Delete Invocation']",665,['Delete Invocation'],"['VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
492,492,private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; METHOD_2 ( VAR_2 ) ; },['Move Invocation'],666,"['Move Invocation', 'Move Invocation']",['Invocation'],"['Invocation', 'Invocation']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
493,493,"public int METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( ( ( VAR_1 ) - ( VAR_2 ) ) , VAR_3 ) ; }",public int METHOD_1 ( ) { return ( VAR_1 ) - ( VAR_2 ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",667,"['Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead']","['BinaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation', 'VariableRead', 'VariableRead']",Partial Match,0.5,0.5,0.5,0.5,2,2,2
494,494,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { ( this . VAR_3 [ ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) - 1 ) ] [ ( ( TYPE_1 . METHOD_2 ( VAR_2 ) ) - 1 ) ] ) ++ ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { ( this . VAR_3 [ ( ( TYPE_1 . METHOD_2 ( VAR_2 ) ) - 1 ) ] [ ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) - 1 ) ] ) ++ ; }","['Move BinaryOperator', 'Move BinaryOperator']",668,"['Update VariableRead', 'Update VariableRead']","['BinaryOperator', 'BinaryOperator']","['VariableRead', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,2
495,495,"public boolean METHOD_1 ( java.lang.String data ) { return METHOD_1 ( data , null ) ; }","public void METHOD_1 ( java.lang.String data ) { METHOD_1 ( data , null ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",669,"['Update TypeReference', 'Delete Return']","['TypeReference', 'Invocation', 'Return']","['TypeReference', 'Return']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,2,0,1
496,496,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 ) . METHOD_3 ( VAR_5 ) ; TYPE_5 VAR_6 = METHOD_4 ( VAR_1 ) ; return METHOD_5 ( VAR_7 . build ( ) , VAR_6 , VAR_8 ) ; }","public void METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 ) . METHOD_3 ( VAR_5 ) ; TYPE_5 VAR_6 = METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_7 . build ( ) , VAR_6 , VAR_8 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",670,"['Update TypeAccess', 'Delete Return']","['TypeReference', 'Invocation', 'Return']","['TypeAccess', 'Return']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
497,497,"private java.lang.Integer METHOD_1 ( TYPE_1 VAR_1 , java.lang.String key ) { return java.lang.Integer.parseInt ( ( ( java.lang.String ) ( VAR_2 . get ( key ) ) ) ) ; }","private java.lang.Integer METHOD_1 ( TYPE_1 VAR_1 , java.lang.String key ) { return ( ( java.lang.Integer ) ( VAR_2 . get ( key ) ) ) ; }","['Move Invocation', 'Update TypeReference', 'Delete TypeAccess', 'Delete Invocation']",671,"['Delete Invocation', 'Delete TypeAccess', 'Delete TypeReference']","['Invocation', 'TypeReference', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess', 'TypeReference']",Exact Match,1.0,0.6666666666666666,0.5,0.5714285714285715,2,1,2
498,498,public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 = false ; return true ; } else { return METHOD_3 ( ) . METHOD_1 ( ) ; } },public boolean METHOD_1 ( ) { VAR_1 = false ; return true ; },"['Move Assignment', 'Move Return', 'Delete Invocation', 'Delete Block', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",672,"['Delete Invocation', 'Delete Return']","['Assignment', 'Return', 'Invocation', 'Block', 'Invocation', 'Invocation', 'Return', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.4,1.0,0.2222222222222222,0.3636363636363636,2,0,7
499,499,public int METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_2 ( ) ; } else { return INT_1 ; } },public int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",673,"['Delete Return', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'FieldRead', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.16666666666666666,0.5,0.1111111111111111,0.1818181818181818,1,1,8
500,500,"public void METHOD_1 ( java.lang.String message , TYPE_1 VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { java.lang.System.out.println ( message ) ; } }","public void METHOD_1 ( java.lang.String message , TYPE_1 VAR_1 ) { java.lang.System.out.println ( message ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",674,['Delete Invocation'],"['Invocation', 'VariableRead', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
501,501,protected boolean METHOD_1 ( ) { return ( ( VAR_1 . METHOD_2 ( ) ) || ( VAR_1 . METHOD_3 ( ) ) ) || ( VAR_1 . METHOD_4 ( ) ) ; },protected boolean METHOD_1 ( ) { return VAR_1 . METHOD_4 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete BinaryOperator']",675,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'BinaryOperator', 'BinaryOperator']","['Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.6666666666666666,0.2857142857142857,0.4,2,1,5
502,502,"public static TYPE_1 METHOD_1 ( java.lang.String id ) { if ( TYPE_2 . METHOD_2 ( ) ) { return VAR_1 . METHOD_3 ( VAR_2 class , id ) ; } else { return VAR_1 . METHOD_3 ( VAR_2 class , java.lang.Integer . METHOD_4 ( id ) ) ; } }","public static TYPE_1 METHOD_1 ( java.lang.String id ) { return VAR_1 . METHOD_3 ( VAR_2 class , id ) ; }","['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",676,"['Delete Invocation', 'Delete Return']","['Return', 'TypeAccess', 'Invocation', 'Block', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'VariableRead', 'Invocation', 'Invocation', 'Return', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.15384615384615385,0.2666666666666667,2,0,11
503,503,"private void METHOD_1 ( int position ) { if ( ( VAR_1 ) != null ) { METHOD_1 ( position , VAR_2 . id ) ; } else { METHOD_1 ( position , ( - 1 ) ) ; } }","private void METHOD_1 ( int position ) { METHOD_1 ( position , VAR_2 . id ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",677,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'VariableRead', 'Literal', 'UnaryOperator', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.125,1.0,0.09090909090909091,0.16666666666666669,1,0,10
504,504,"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; if ( ( VAR_3 ) != null ) VAR_3 . METHOD_3 ( VAR_4 ) ; if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_4 ( VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_4 ( VAR_1 ) ; } }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",678,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
505,505,private void METHOD_1 ( ) { if ( ( ( ( VAR_1 ) != null ) && ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) && ( ( VAR_3 ) <= 0 ) ) { VAR_1 . METHOD_4 ( VAR_4 ) ; } },private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) { VAR_1 . METHOD_4 ( VAR_4 ) ; } },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",680,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
506,506,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { new TYPE_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",681,"['Delete Invocation', 'Delete Return']","['ConstructorCall', 'VariableRead', 'Invocation', 'FieldRead', 'BinaryOperator', 'Block', 'If']","['Invocation', 'Return']",Partial Match,0.125,0.5,0.14285714285714285,0.22222222222222224,1,1,6
507,507,public double [ ] METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_1 ( ) ; return VAR_2 . METHOD_1 ( ) ; },public double [ ] METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_1 ( ) ; return VAR_1 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",683,"['Update Invocation', 'Update TypeAccess', 'Update Invocation', 'Update VariableRead']","['FieldRead', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess', 'Invocation', 'VariableRead']",Partial Match,0.5,0.0,0.0,0.0,0,4,3
508,508,"public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) == ( VAR_3 ) ) { METHOD_2 ( ) ; } else { TYPE_1 . METHOD_3 ( VAR_4 , ( STRING_1 + ( VAR_2 ) ) ) ; } }",public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( this . VAR_2 ) == ( VAR_3 ) ) { METHOD_2 ( ) ; } },"['Insert ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block']",684,"['Insert TypeAccess', 'Delete Invocation']","['ThisAccess', 'TypeAccess', 'TypeAccess', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Invocation', 'Block']","['TypeAccess', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.5,0.125,0.2,1,1,7
509,509,public void init ( android.content.Context context ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( context ) ; } if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_2 ( context ) ; } },public void init ( android.content.Context context ) { VAR_1 = new TYPE_1 ( context ) ; VAR_2 = new TYPE_2 ( context ) ; },"['Move Assignment', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",685,"['Delete Assignment', 'Delete Assignment']","['Assignment', 'Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']","['Assignment', 'Assignment']",GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,2,12
510,510,private boolean METHOD_1 ( ) { return ( ( VAR_1 ) == ( VAR_2 ) ) && ( ( VAR_3 ) != null ) ; },private boolean METHOD_1 ( ) { return ( VAR_1 ) == ( VAR_2 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",686,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
511,511,"public TYPE_1 METHOD_1 ( boolean VAR_1 , boolean VAR_2 ) { return VAR_3 . METHOD_1 ( ( ( VAR_4 ) || VAR_1 ) , ( ( VAR_5 ) || VAR_2 ) ) ; }","public TYPE_1 METHOD_1 ( ) { return METHOD_1 ( VAR_4 , VAR_5 ) ; }","['Update TypeAccess', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator']",688,"['Delete LocalVariable', 'Delete LocalVariable', 'Delete VariableRead', 'Delete VariableRead', 'Update Invocation', 'Delete VariableRead', 'Delete VariableRead']","['TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeReference', 'Parameter', 'TypeReference', 'Parameter', 'FieldRead', 'VariableRead', 'BinaryOperator', 'FieldRead', 'VariableRead', 'BinaryOperator']","['LocalVariable', 'LocalVariable', 'VariableRead', 'VariableRead', 'Invocation', 'VariableRead', 'VariableRead']",Partial Match,0.125,0.2857142857142857,0.15384615384615385,0.2,2,5,11
512,512,"public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == STRING_1 ) { return VAR_2 ; } else if ( VAR_1 == STRING_2 ) { return VAR_3 ; } else { throw new TYPE_4 ( ) ; } }","public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == STRING_1 ) { return VAR_2 ; } else { throw new TYPE_4 ( ) ; } }","['Move If', 'Move BinaryOperator', 'Move Block', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",689,['Delete Invocation'],"['If', 'BinaryOperator', 'Block', 'VariableRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,11
513,513,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",690,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
514,514,protected void execute ( ) { VAR_1 . METHOD_1 ( ( ( ( ( ( VAR_2 ) + ( VAR_3 ) ) + INT_1 ) % INT_1 ) - INT_2 ) ) ; },protected void execute ( ) { VAR_1 . METHOD_1 ( ( ( ( ( VAR_2 ) + ( VAR_3 ) ) + INT_1 ) % INT_1 ) ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",691,['Delete BinaryOperator'],"['BinaryOperator', 'FieldRead', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
515,515,private void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) != ( - 1 ) ) { VAR_2 . remove ( VAR_1 ) ; VAR_1 = - 1 ; METHOD_2 ( ) ; } },private void METHOD_1 ( TYPE_1 event ) { VAR_2 . remove ( VAR_1 ) ; VAR_1 = - 1 ; METHOD_2 ( ) ; },"['Move Invocation', 'Move Assignment', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",692,['Delete UnaryOperator'],"['Invocation', 'Assignment', 'Invocation', 'FieldRead', 'Literal', 'UnaryOperator', 'BinaryOperator', 'Block', 'If']",['UnaryOperator'],GPT Missed Nodes,0.125,1.0,0.1111111111111111,0.19999999999999998,1,0,8
516,516,"public void METHOD_1 ( java.lang.Exception VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; }","public void METHOD_1 ( java.lang.Exception VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; if ( null != ( VAR_3 ) ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert FieldRead', 'Move Invocation']",693,"['Insert Invocation', 'Insert VariableRead']","['If', 'BinaryOperator', 'Block', 'Literal', 'FieldRead', 'Invocation']","['Invocation', 'VariableRead']",Partial Match,0.14285714285714285,0.0,0.0,0.0,0,2,6
517,517,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) return ; if ( METHOD_2 ( VAR_2 , ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ) { VAR_3 . METHOD_4 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) return ; METHOD_2 ( VAR_2 , ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",694,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
518,518,private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( ) ) ) && ( ( VAR_1 . METHOD_4 ( ) ) == null ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( ) ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",695,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
519,519,"public java.lang.String METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; return METHOD_4 ( VAR_2 , TYPE_1 . METHOD_5 ( ) ) ; } catch ( TYPE_2 VAR_3 ) { VAR_3 . METHOD_6 ( ) ; return null ; } }","public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_2 , TYPE_1 . METHOD_5 ( ) ) ; } catch ( TYPE_2 VAR_3 ) { VAR_3 . METHOD_6 ( ) ; } }","['Update TypeReference', 'Move Invocation', 'Delete Return', 'Delete Literal', 'Delete Return']",696,"['Update TypeAccess', 'Delete Return', 'Update TypeAccess']","['TypeReference', 'Invocation', 'Return', 'Literal', 'Return']","['TypeAccess', 'Return', 'TypeAccess']",Partial Match,0.2,0.3333333333333333,0.2,0.25,1,2,4
520,520,public void METHOD_1 ( TYPE_1 event ) { if ( ! ( event . METHOD_2 ( ) . VAR_1 ) ) TYPE_2 . METHOD_3 ( event . METHOD_2 ( ) ) . METHOD_4 ( event ) ; },public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . METHOD_3 ( event . METHOD_2 ( ) ) . METHOD_4 ( event ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",698,['Delete Invocation'],"['Invocation', 'VariableRead', 'Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
521,521,public void METHOD_1 ( ) { java.lang.System.out.println ( this . name ) ; if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( ) ; } },public void METHOD_1 ( ) { java.lang.System.out.println ( this . name ) ; this . VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",699,['Delete Invocation'],"['Invocation', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
522,522,public static void METHOD_1 ( ) { if ( VAR_1 ) VAR_2 . METHOD_2 ( STRING_1 ) ; },public static void METHOD_1 ( ) { VAR_2 . METHOD_2 ( STRING_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",701,['Delete If'],"['Invocation', 'FieldRead', 'Block', 'If']",['If'],GPT Missed Nodes,0.25,1.0,0.25,0.4,1,0,3
523,523,public void METHOD_1 ( ) { METHOD_2 ( buffer ) ; },public void METHOD_1 ( ) { if ( status >= 0 ) { METHOD_2 ( buffer ) ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Invocation']",702,"['Insert Block', 'Insert Invocation']","['If', 'BinaryOperator', 'Block', 'FieldRead', 'Literal', 'Invocation']","['Block', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.5,0.16666666666666666,0.25,1,1,5
524,524,public void METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",705,['Delete Invocation'],"['Invocation', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
525,525,public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( ) . toString ( ) ; },public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete Invocation']",707,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
526,526,public void METHOD_1 ( android.view.View view ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; } },public void METHOD_1 ( android.view.View view ) { VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",710,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
527,527,"private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . name ( ) . substring ( 0 , 1 ) . toLowerCase ( ) ; }","private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . name ( ) . substring ( 0 , 1 ) ; }","['Move Invocation', 'Delete Invocation']",712,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
528,528,"public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 , VAR_4 . id ) , METHOD_4 ( VAR_1 ) ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , METHOD_4 ( VAR_1 ) ) ; return VAR_1 ; }","['Move TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",713,"['Delete Invocation', 'Delete TypeAccess']","['TypeAccess', 'TypeAccess', 'FieldRead', 'Invocation']","['Invocation', 'TypeAccess']",GPT Missed Nodes,0.6666666666666666,1.0,0.5,0.6666666666666666,2,0,2
529,529,private void METHOD_1 ( ) { if ( ( VAR_1 ) != 0L ) { METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 ) ; METHOD_3 ( 0L ) ; VAR_3 = true ; } },private void METHOD_1 ( ) { METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 ) ; METHOD_3 ( 0L ) ; VAR_3 = true ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",714,['Delete Return'],"['Invocation', 'Invocation', 'Invocation', 'Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,9
530,530,public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return output ; },public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return METHOD_1 ( ) ; },"['Insert Invocation', 'Delete FieldRead']",715,"['Update Return', 'Insert Invocation']","['Invocation', 'FieldRead']","['Return', 'Invocation']",Partial Match,0.3333333333333333,0.5,0.5,0.5,1,1,1
531,531,public void start ( ) { if ( ! ( state ) ) startTime = TYPE_1 . METHOD_1 ( ) ; state = true ; },public void start ( ) { startTime = TYPE_1 . METHOD_1 ( ) ; state = true ; },"['Move Assignment', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",716,['Delete Block'],"['Assignment', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,1,0,4
532,532,protected void METHOD_1 ( TYPE_1 < ? super TYPE_2 > VAR_1 ) { VAR_2 . to ( VAR_3 class ) . METHOD_2 ( ) ; },protected void METHOD_1 ( TYPE_1 < ? super TYPE_2 > VAR_1 ) { VAR_2 . to ( VAR_3 class ) ; },"['Move Invocation', 'Delete Invocation']",717,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
533,533,public java.lang.String toString ( ) { return ( ( ( ( ( ( STRING_1 + ( n ) ) + STRING_2 ) + ( c ) ) + STRING_3 ) + ( VAR_1 ) ) + STRING_4 ) + ( f ) ; },public java.lang.String toString ( ) { return ( ( ( ( STRING_1 + ( n ) ) + STRING_2 ) + ( c ) ) + STRING_3 ) + ( VAR_1 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",718,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
534,534,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 . start ( ) ; } } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 . start ( ) ; } },"['Move If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",719,['Delete Invocation'],"['If', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
535,535,public boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_1 ( ) ) && ( ! ( VAR_1 . METHOD_2 ( ) ) ) ; },public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",720,['Delete UnaryOperator'],"['Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator']",['UnaryOperator'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
536,536,private void METHOD_1 ( ) { if ( ( VAR_1 ) == INT_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 . setText ( VAR_2 . METHOD_2 ( ) ) ; VAR_4 . setText ( VAR_2 . METHOD_3 ( ) ) ; } } },private void METHOD_1 ( ) { if ( ( VAR_1 ) == INT_1 ) { VAR_3 . setText ( VAR_2 . METHOD_2 ( ) ) ; VAR_4 . setText ( VAR_2 . METHOD_3 ( ) ) ; } },"['Move If', 'Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",721,['Delete Invocation'],"['If', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
537,537,public void execute ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_1 ( list . METHOD_2 ( VAR_2 ) ) ; },public void execute ( TYPE_1 VAR_1 ) { list . METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",723,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
538,538,public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) && ( ( VAR_2 . METHOD_3 ( ) ) != null ) ) { VAR_2 . METHOD_4 ( VAR_3 ) ; } },public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_4 ( VAR_3 ) ; } },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",724,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
539,539,public int METHOD_1 ( ) { return ( ( INT_1 + ( java.lang.Long . METHOD_2 ( VAR_1 ) . METHOD_1 ( ) ) ) * INT_1 ) + ( java.lang.Long . METHOD_2 ( VAR_2 ) . METHOD_1 ( ) ) ; },public int METHOD_1 ( ) { return ( ( INT_1 + ( java.lang.Long . METHOD_1 ( VAR_1 ) ) ) * INT_1 ) + ( java.lang.Long . METHOD_1 ( VAR_2 ) ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move Invocation', 'Delete Invocation', 'Delete Invocation']",725,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'Invocation', 'Invocation', 'Invocation', 'Invocation', 'Invocation']","['Invocation', 'Invocation']",Exact Match,1.0,1.0,0.3333333333333333,0.5,2,0,4
540,540,public java.lang.String toString ( ) { return ( ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( name ) ) + CHAR_1 ) + STRING_3 ) + ( size ) ) + STRING_4 ) + ( VAR_1 ) ) + CHAR_2 ; },public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + STRING_2 ) + ( name ) ) + CHAR_1 ) + STRING_3 ) + ( size ) ) + CHAR_2 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",726,"['Delete Invocation', 'Delete Invocation']","['BinaryOperator', 'FieldRead', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']","['Invocation', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,2,6
541,541,private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) ) { VAR_1 . METHOD_3 ( ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",727,['Delete Invocation'],"['Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
542,542,private boolean METHOD_1 ( ) { if ( ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) != null ) && ( ! ( VAR_3 . METHOD_3 ( STRING_1 ) ) ) ) { return true ; } return false ; },private boolean METHOD_1 ( ) { if ( ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) != null ) && ( ( VAR_3 ) != STRING_1 ) ) { return true ; } return false ; },"['Insert BinaryOperator', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator']",728,"['Delete Invocation', 'Insert VariableRead']","['BinaryOperator', 'FieldRead', 'FieldRead', 'TypeAccess', 'TypeAccess', 'Invocation', 'UnaryOperator']","['Invocation', 'VariableRead']",Partial Match,0.16666666666666666,0.5,0.14285714285714285,0.22222222222222224,1,1,6
543,543,"public java.lang.Object [ ] get ( ) { return new java.lang.Object [ ] { this . VAR_1 , this . VAR_2 , this . VAR_3 , this . VAR_4 } ; }","public java.lang.Object [ ] get ( ) { return new java.lang.Object [ ] { this . VAR_1 , this . VAR_3 , this . VAR_2 , this . VAR_4 } ; }",['Move FieldRead'],729,"['Move ThisAccess', 'Move ThisAccess']",['FieldRead'],"['ThisAccess', 'ThisAccess']",Partial Match,0.0,0.0,0.0,0.0,0,2,1
544,544,"private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ) { VAR_3 = VAR_1 ; } else { VAR_2 . METHOD_5 ( VAR_1 ) ; VAR_3 = VAR_1 ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_1 ) ) { VAR_3 = VAR_1 ; } else { VAR_2 . METHOD_5 ( VAR_1 ) ; VAR_3 = VAR_1 ; } }","['Move VariableRead', 'Delete Invocation']",730,['Delete Invocation'],"['VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
545,545,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 . size ( ) ) < ( VAR_3 ) ) && ( ( VAR_1 . METHOD_2 ( ) ) == ( this . name ) ) ) { VAR_2 . add ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . size ( ) ) < ( VAR_3 ) ) { VAR_2 . add ( VAR_1 ) ; } },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",732,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'Invocation', 'ThisAccess', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
546,546,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; return true ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; return true ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",734,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
547,547,"private void METHOD_1 ( ) { int VAR_1 = VAR_2 . x ; int VAR_3 = VAR_2 . y ; if ( ! ( METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ) ) { VAR_3 ++ ; } METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; }","private void METHOD_1 ( ) { int VAR_1 = VAR_2 . x ; int VAR_3 = VAR_2 . y ; if ( ! ( METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ) ) ; { VAR_3 ++ ; } METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; }","['Move UnaryOperator', 'Delete Block']",735,['Insert Wra'],"['UnaryOperator', 'Block']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
548,548,"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; METHOD_4 ( ) . METHOD_5 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_4 ( ) . METHOD_5 ( ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",736,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'Invocation', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,1.0,0.4,0.5714285714285715,2,0,3
549,549,public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( VAR_1 . size ( ) ) > 0 ) METHOD_4 ( ) ; if ( ( VAR_2 ) != null ) { METHOD_5 ( ) ; METHOD_6 ( ) ; } },public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",738,"['Delete Invocation', 'Delete Invocation', 'Delete Block']","['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']","['Invocation', 'Invocation', 'Block']",GPT Missed Nodes,0.2857142857142857,0.6666666666666666,0.14285714285714285,0.23529411764705882,2,1,12
550,550,"public void METHOD_1 ( java.lang.String string ) { if ( VAR_1 ) java.lang.System.out.println ( string ) ; VAR_2 = ( ( VAR_2 ) + ""\n"" ) + string ; if ( VAR_3 ) VAR_4 . getView ( ) . METHOD_2 ( string ) ; }","public void METHOD_1 ( java.lang.String string ) { if ( VAR_1 ) java.lang.System.out.println ( string ) ; VAR_2 = ( ( VAR_2 ) + ""\n"" ) + string ; VAR_4 . getView ( ) . METHOD_2 ( string ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",739,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
551,551,public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . add ( STRING_1 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",740,"['Delete Invocation', 'Delete Invocation']","['TypeAccess', 'VariableRead', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,2,0,4
552,552,"public void METHOD_1 ( java.lang.String id ) { if ( ( VAR_1 ) && ( VAR_2 ) ) VAR_3 . i ( STRING_1 , ( STRING_2 + id ) ) ; VAR_4 . METHOD_2 ( ( STRING_3 + id ) ) ; }",public void METHOD_1 ( java.lang.String id ) { VAR_4 . METHOD_2 ( ( STRING_3 + id ) ) ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",741,['Delete Invocation'],"['FieldRead', 'FieldRead', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'FieldRead', 'VariableRead', 'BinaryOperator', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.09090909090909091,0.16666666666666669,1,0,10
553,553,"public TYPE_1 add ( TYPE_2 VAR_1 ) { if ( METHOD_1 ( VAR_1 ) ) { if ( ( VAR_2 ) != null ) { VAR_3 . add ( this , VAR_1 ) ; } else { METHOD_2 ( ) ; } } return this ; }","public TYPE_1 add ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 . add ( this , VAR_1 ) ; } else { METHOD_1 ( VAR_1 ) ; } return this ; }","['Move If', 'Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",742,"['Delete Invocation', 'Insert Invocation']","['If', 'Invocation', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.5,0.2,0.28571428571428575,1,1,4
554,554,public java.lang.String toString ( ) { return ( ( ( ( ( type ) + STRING_1 ) + ( name ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ; },public java.lang.String toString ( ) { return ( ( type ) + STRING_1 ) + ( name ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",744,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['BinaryOperator', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator']","['Invocation', 'Invocation', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,3,7
555,555,public boolean METHOD_1 ( ) { return ! ( this . VAR_1 . METHOD_2 ( ) ) ; },public boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",745,['Delete UnaryOperator'],"['Invocation', 'UnaryOperator']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
556,556,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 . toString ( ) ) ; METHOD_3 ( VAR_3 . toString ( ) ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . toString ( ) ) ; METHOD_3 ( VAR_3 . toString ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",746,['Delete Invocation'],"['Invocation', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,7
557,557,public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 ) ) ; },public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( false ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 ) ) ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Move Invocation']",748,"['Insert Invocation', 'Insert TypeAccess']","['If', 'BinaryOperator', 'Block', 'VariableRead', 'Literal', 'Invocation']","['Invocation', 'TypeAccess']",Partial Match,0.14285714285714285,0.0,0.0,0.0,0,2,6
558,558,public boolean METHOD_1 ( java.lang.String str ) { return ! ( VAR_1 . contains ( STRING_1 ) ) ; },public boolean METHOD_1 ( java.lang.String str ) { if ( VAR_1 . contains ( STRING_1 ) ) { return false ; } return true ; },"['Insert If', 'Move Invocation', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal', 'Delete UnaryOperator']",749,"['Insert If', 'Insert Return', 'Insert Return', 'Delete Return']","['If', 'Invocation', 'Block', 'Literal', 'Return', 'Literal', 'UnaryOperator']","['If', 'Return', 'Return', 'Return']",GPT Missed Nodes,0.3333333333333333,0.5,0.2857142857142857,0.36363636363636365,2,2,5
559,559,public java.lang.Boolean METHOD_1 ( ) { return ( this . VAR_1 . getBoolean ( VAR_2 ) ) && ( this . METHOD_2 ( ) ) ; },public java.lang.Boolean METHOD_1 ( ) { return ( this . VAR_1 . getBoolean ( VAR_2 ) ) && ( ! ( this . METHOD_2 ( ) ) ) ; },"['Insert UnaryOperator', 'Move Invocation']",750,['Insert UnaryOperator'],"['UnaryOperator', 'Invocation']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
560,560,"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( VAR_2 . METHOD_2 ( ) . isEmpty ( ) ) ) { return false ; } return METHOD_1 ( VAR_2 . METHOD_2 ( ) , VAR_1 ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( VAR_2 . METHOD_2 ( ) . isEmpty ( ) ) ) { return false ; } METHOD_1 ( VAR_2 . METHOD_2 ( ) , VAR_1 ) ; return false ; }","['Move Invocation', 'Insert Literal']",752,"['Delete Return', 'Insert Invocation']","['Invocation', 'Literal']","['Return', 'Invocation']",Partial Match,0.3333333333333333,0.0,0.0,0.0,0,2,2
561,561,public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 ) != ( VAR_2 . out ) ) ) VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { if ( ( VAR_1 ) != ( VAR_2 . out ) ) VAR_1 . METHOD_2 ( ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",753,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
562,562,public static < TYPE_1 > boolean isEmpty ( TYPE_2 < TYPE_1 > VAR_1 ) { return ! ( VAR_2 . iterator ( ) . METHOD_1 ( ) ) ; },public static < TYPE_1 > boolean isEmpty ( TYPE_2 < TYPE_1 > VAR_1 ) { return VAR_2 . iterator ( ) . METHOD_1 ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",754,['Delete UnaryOperator'],"['Invocation', 'UnaryOperator']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
563,563,public void update ( ) { METHOD_1 ( ) ; METHOD_2 ( ) ; execute ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; java.lang.System.out.println ( STRING_1 ) ; },public void update ( ) { METHOD_1 ( ) ; execute ( ) ; METHOD_3 ( ) ; METHOD_2 ( ) ; METHOD_4 ( ) ; java.lang.System.out.println ( STRING_1 ) ; },['Move Invocation'],756,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
564,564,public final void METHOD_1 ( TYPE_1 listener ) { if ( listener != null ) { VAR_1 . remove ( listener ) ; } },public final void METHOD_1 ( TYPE_1 listener ) { VAR_1 . remove ( listener ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",757,['Delete UnaryOperator'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
565,565,"public void i ( java.lang.Throwable VAR_1 ) { METHOD_1 ( VAR_2 , VAR_1 , null ) ; }","public void i ( java.lang.Throwable VAR_1 ) { METHOD_1 ( VAR_2 , null , VAR_1 ) ; }",['Move VariableRead'],758,"['Move VariableRead', 'Move VariableRead']",['VariableRead'],"['VariableRead', 'VariableRead']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
566,566,public android.view.View METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_1 ( ) ; } return null ; },public android.view.View METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",759,['Delete Return'],"['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
567,567,public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; if ( ! ( VAR_3 ) ) { VAR_1 . METHOD_1 ( ) ; } VAR_3 = true ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_1 ( ) ; VAR_3 = true ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",760,['Delete Return'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
568,568,public boolean METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_4 ( ) ; return true ; },public boolean METHOD_1 ( ) { TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_4 ( ) ; VAR_1 . METHOD_2 ( ) ; return true ; },['Move Invocation'],762,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
569,569,"public TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 , true ) ; METHOD_3 ( VAR_1 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; METHOD_3 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 , true ) ; return VAR_1 ; }",['Move Invocation'],763,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
570,570,"public static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < java.util.List < TYPE_2 > > VAR_2 ) { if ( VAR_1 != null ) { TYPE_3 . METHOD_2 ( VAR_1 , null , VAR_2 ) ; } }","public static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < java.util.List < TYPE_2 > > VAR_2 ) { TYPE_3 . METHOD_2 ( VAR_1 , null , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",766,['Delete Wra'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
571,571,public void METHOD_1 ( ) { ( VAR_1 ) ++ ; if ( ( VAR_1 ) >= ( VAR_2 . size ( ) ) ) { VAR_1 = 0 ; } },public void METHOD_1 ( ) { ( VAR_1 ) ++ ; if ( ( ( VAR_1 ) + 1 ) >= ( VAR_2 . size ( ) ) ) { VAR_1 = 0 ; } },"['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",768,"['Insert VariableRead', 'Insert UnaryOperator']","['BinaryOperator', 'FieldRead', 'Literal']","['VariableRead', 'UnaryOperator']",Partial Match,0.0,0.0,0.0,0.0,0,2,3
572,572,public TYPE_1 METHOD_1 ( int position ) { return VAR_1 . get ( position ) ; },public TYPE_1 METHOD_1 ( int position ) { if ( ( VAR_1 . size ( ) ) > 0 ) return VAR_1 . get ( position ) ; else return null ; },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Block', 'Insert Invocation', 'Insert Literal', 'Move Return', 'Insert Return', 'Insert TypeAccess', 'Insert Literal']",769,"['Insert Invocation', 'Insert Invocation']","['If', 'BinaryOperator', 'Block', 'Block', 'Invocation', 'Literal', 'Return', 'Return', 'TypeAccess', 'Literal']","['Invocation', 'Invocation']",GPT Missed Nodes,0.14285714285714285,0.5,0.1,0.16666666666666669,1,1,9
573,573,public static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . field ( VAR_4 ) ; if ( VAR_2 != null ) return TYPE_1 . METHOD_2 ( VAR_2 ) ; return null ; },public static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . field ( VAR_4 ) ; return TYPE_1 . METHOD_2 ( VAR_2 ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",770,['Delete IfStatement'],"['Return', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']",['IfStatement'],Partial Match,0.0,0.0,0.0,0.0,0,1,8
574,574,public void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . to ( VAR_2 class ) ; METHOD_3 ( VAR_1 class ) ; METHOD_2 ( VAR_2 class ) ; },public void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . to ( VAR_2 class ) ; METHOD_3 ( VAR_1 class ) ; },"['Delete TypeAccess', 'Delete Invocation']",771,['Delete Invocation'],"['TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
575,575,public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 ; } else return null ; },public TYPE_1 METHOD_1 ( ) { return VAR_1 ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",772,"['Delete LocalVariable', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['LocalVariable', 'Return']",Partial Match,0.14285714285714285,0.5,0.1111111111111111,0.1818181818181818,1,1,8
576,576,public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( VAR_4 ) . toUpperCase ( ) ; VAR_5 = TYPE_1 . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_5 ) ; METHOD_5 ( STRING_1 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 = TYPE_1 . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_5 ) ; METHOD_5 ( STRING_1 ) ; },"['Move Invocation', 'Delete Invocation']",773,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
577,577,"java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) ;",java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_2 ) ;,"['Delete TypeReference', 'Delete Parameter']",774,['Delete Parameter'],"['TypeReference', 'Parameter']",['Parameter'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
578,578,public long getTime ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_1 ( VAR_1 ) ) { return VAR_3 . get ( VAR_1 ) ; } return 0L ; },public long getTime ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_1 ( VAR_1 ) ) { return VAR_3 . get ( VAR_1 ) ; } else { return 0L ; } },"['Insert Block', 'Move Return']",775,"['Insert Wra', 'Insert TypeReference']","['Block', 'Return']","['Wra', 'TypeReference']",Partial Match,0.0,0.0,0.0,0.0,0,2,2
579,579,"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String value ) throws TYPE_1 { writer . METHOD_1 ( VAR_1 , VAR_2 , TYPE_2 . METHOD_2 ( value ) ) ; }","public void METHOD_1 ( java.lang.String VAR_2 , java.lang.String value ) throws TYPE_1 { writer . METHOD_1 ( VAR_2 , METHOD_2 ( value ) ) ; }","['Update TypeAccess', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",776,"['Delete Parameter', 'Delete VariableRead', 'Delete TypeAccess']","['TypeAccess', 'TypeReference', 'Parameter', 'VariableRead']","['Parameter', 'VariableRead', 'TypeAccess']",GPT Missed Nodes,0.75,0.6666666666666666,0.5,0.5714285714285715,2,1,2
580,580,"public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) != VAR_1 ) { if ( TYPE_1 . METHOD_2 ( getActivity ( ) , this ) ) { VAR_2 = VAR_1 ; } } }","public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) != VAR_1 ) { VAR_2 = VAR_1 ; TYPE_1 . METHOD_2 ( getActivity ( ) , this ) ; } }","['Move If', 'Move BinaryOperator', 'Move Invocation', 'Delete Block', 'Delete If']",777,['Delete Invocation'],"['If', 'BinaryOperator', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,5
581,581,public java.lang.String toString ( ) { return ( ( VAR_1 ) + STRING_1 ) + ( VAR_2 ) ; },public java.lang.String toString ( ) { return new java.lang.StringBuilder ( ) . append ( VAR_1 ) . append ( STRING_1 ) . append ( VAR_2 ) . toString ( ) ; },"['Insert Invocation', 'Insert Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Insert Invocation', 'Insert TypeAccess', 'Insert ConstructorCall', 'Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",778,"['Insert Invocation', 'Insert TypeReference']","['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'ConstructorCall', 'TypeAccess', 'FieldRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator']","['Invocation', 'TypeReference']",Partial Match,0.16666666666666666,0.5,0.07692307692307693,0.13333333333333336,1,1,12
582,582,public boolean METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( METHOD_3 ( VAR_1 ) ) != null ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal', 'Delete TypeAccess', 'Delete Invocation']",780,"['Delete TypeAccess', 'Delete Invocation', 'Insert Invocation']","['BinaryOperator', 'Invocation', 'Literal', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.6666666666666666,0.4,0.5,2,1,3
583,583,private int METHOD_1 ( ) { int count = 0 ; for ( TYPE_1 VAR_1 : TYPE_2 ) if ( ( VAR_1 instanceof TYPE_3 ) || ( VAR_1 instanceof TYPE_4 ) ) count ++ ; return count ; },private int METHOD_1 ( ) { int count = 0 ; for ( TYPE_1 VAR_1 : TYPE_2 ) if ( VAR_1 instanceof TYPE_3 ) count ++ ; return count ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete BinaryOperator']",781,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'TypeAccess', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
584,584,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { METHOD_2 ( VAR_2 , java.lang.String . METHOD_3 ( VAR_1 ) ) ; return this ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { METHOD_2 ( VAR_2 , VAR_1 ) ; return this ; }","['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",783,"['Delete TypeAccess', 'Delete Invocation']","['VariableRead', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,2,0,1
585,585,public boolean METHOD_1 ( ) { return ( VAR_1 ) && ( ( VAR_2 ) != null ) ; },public boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",786,['Delete Invocation'],"['FieldRead', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
586,586,"public void METHOD_1 ( int position , java.util.Collection < TYPE_1 > VAR_1 ) { VAR_2 . METHOD_2 ( position , VAR_1 ) ; TYPE_2 . METHOD_3 ( position , VAR_3 . size ( ) ) ; TYPE_2 . METHOD_4 ( position , METHOD_5 ( ) ) ; }","public void METHOD_1 ( int position , java.util.Collection < TYPE_1 > VAR_1 ) { TYPE_2 . METHOD_3 ( position , VAR_3 . size ( ) ) ; VAR_2 . METHOD_2 ( position , VAR_1 ) ; TYPE_2 . METHOD_4 ( position , METHOD_5 ( ) ) ; }",['Move Invocation'],787,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
587,587,public static java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { return ( STRING_1 + STRING_2 ) + ( VAR_1 . METHOD_2 ( ) . getValue ( ) ) ; },public static java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { return new java.lang.String ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 . METHOD_2 ( ) . getValue ( ) ) ) ) ; },"['Insert ConstructorCall', 'Move BinaryOperator']",788,['Insert Invocation'],"['ConstructorCall', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
588,588,public double METHOD_1 ( double y ) { return ( ( ( y - ( c ) ) * ( b ) ) / ( VAR_1 ) ) + ( a ) ; },public double METHOD_1 ( double y ) { return ( ( ( ( y - ( c ) ) + 0.0 ) * ( b ) ) / ( VAR_1 ) ) + ( a ) ; },"['Insert BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Update BinaryOperator', 'Move FieldRead', 'Update BinaryOperator', 'Move FieldRead', 'Insert Literal']",790,['Insert BinaryOperator'],"['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'FieldRead', 'Literal']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.1111111111111111,0.19999999999999998,1,0,8
589,589,public int METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 . isEmpty ( ) ) { return 0 ; } else { return VAR_3 . get ( 0 ) . METHOD_3 ( ) ; } },public int METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = METHOD_2 ( VAR_1 ) ; return VAR_3 . get ( 0 ) . METHOD_3 ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",791,"['Delete Return', 'Delete Return']","['Return', 'TypeAccess', 'Invocation', 'Literal', 'Return', 'Block', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.16666666666666666,0.5,0.125,0.2,1,1,7
590,590,"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; if ( VAR_2 ) { METHOD_3 ( ) ; } }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; METHOD_3 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",793,['Delete Block'],"['Invocation', 'FieldRead', 'Block', 'If']",['Block'],GPT Missed Nodes,0.25,1.0,0.25,0.4,1,0,3
591,591,"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; VAR_3 . METHOD_3 ( VAR_4 , VAR_1 , VAR_5 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_6 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; VAR_3 . METHOD_3 ( VAR_5 , VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_6 ) ; }","['Move VariableRead', 'Delete TypeAccess']",794,['Delete Invocation'],"['VariableRead', 'TypeAccess']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
592,592,protected TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_2 . METHOD_2 ( ) . contains ( VAR_1 ) ) ) { return VAR_1 ; } else { return null ; } },protected TYPE_1 METHOD_1 ( ) { return VAR_1 ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",797,"['Delete Invocation', 'Delete VariableRead', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['Invocation', 'VariableRead', 'Return']",Partial Match,0.2222222222222222,0.6666666666666666,0.14285714285714285,0.23529411764705882,2,1,12
593,593,"protected java.lang.String METHOD_1 ( java.lang.String content ) { return VAR_1 . replace ( ""\t"" , STRING_1 ) . replace ( ""\n"" , STRING_2 ) . replace ( STRING_3 , STRING_1 ) . replace ( STRING_4 , STRING_5 ) ; }","protected java.lang.String METHOD_1 ( java.lang.String content ) { return VAR_1 . replace ( ""\t"" , STRING_1 ) . replace ( ""\n"" , STRING_2 ) . replace ( STRING_4 , STRING_5 ) ; }","['Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",798,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.16666666666666666,0.2857142857142857,1,0,5
594,594,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; } this . VAR_1 = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; this . VAR_1 = VAR_1 ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",799,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
595,595,"public void METHOD_1 ( TYPE_1 event , float x , float y ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 = VAR_4 ; VAR_5 . METHOD_3 ( VAR_6 ) ; VAR_7 . METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 event , float x , float y ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 = VAR_4 ; VAR_5 . METHOD_3 ( VAR_6 ) ; }","['Delete TypeAccess', 'Delete Invocation']",801,['Delete Invocation'],"['TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
596,596,public TYPE_1 METHOD_1 ( ) { if ( this . VAR_1 ) { return this . VAR_2 . METHOD_2 ( ) ; } return this . VAR_3 ; },public TYPE_1 METHOD_1 ( ) { if ( this . VAR_1 ) { this . VAR_2 . METHOD_2 ( ) ; } return this . VAR_3 ; },"['Move Invocation', 'Delete Return']",802,['Delete Return'],"['Invocation', 'Return']",['Return'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
597,597,private static void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) return ; VAR_2 . remove ( VAR_1 ) . end ( ) ; },private static void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) return ; VAR_2 . get ( VAR_1 ) . end ( ) ; VAR_2 . remove ( VAR_1 ) ; },"['Move Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Insert VariableRead']",804,"['Update Invocation', 'Insert Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'VariableRead']","['Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.5,0.25,0.3333333333333333,1,1,3
598,598,"protected void add ( java.lang.String name , java.lang.String value ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } if ( value != null ) { VAR_1 = VAR_2 . add ( name , value ) ; } }","protected void add ( java.lang.String name , java.lang.String value ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } VAR_1 = VAR_2 . add ( name , value ) ; }","['Move Assignment', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",805,['Delete Assignment'],"['Assignment', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Assignment'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
599,599,"public boolean METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return false ; }","public boolean METHOD_1 ( float x , float y , int VAR_3 , int VAR_4 ) { return false ; }","['Update Parameter', 'Update Parameter', 'Update TypeReference', 'Update TypeReference']",806,"['Update Parameter', 'Update Parameter']","['Parameter', 'Parameter', 'TypeReference', 'TypeReference']","['Parameter', 'Parameter']",GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,2,0,2
600,600,public TYPE_1 METHOD_1 ( TYPE_1 node ) { if ( node != null ) return METHOD_2 ( ( ( VAR_1 . key ) + 1 ) ) ; else return null ; },public TYPE_1 METHOD_1 ( TYPE_1 node ) { return METHOD_2 ( ( ( VAR_1 . key ) + 1 ) ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",807,['Delete Return'],"['Return', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.1111111111111111,0.19999999999999998,1,0,8
601,601,public boolean METHOD_1 ( ) { return ( VAR_1 ) && ( ( VAR_2 . size ( ) ) == 0 ) ; },public boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",808,['Delete Invocation'],"['FieldRead', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
602,602,"public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( INT_1 ) ; assertEquals ( VAR_2 , VAR_4 . get ( INT_1 ) ) ; }","public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( INT_1 ) ; assertEquals ( VAR_4 . get ( INT_1 ) , VAR_2 ) ; }",['Move VariableRead'],809,['Update Invocation'],['VariableRead'],['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
603,603,"public void METHOD_1 ( TYPE_1 key , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) , VAR_2 . getString ( key ) ) ; VAR_3 . METHOD_1 ( key , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 key , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( STRING_1 , key , VAR_2 . getString ( key ) ) ; VAR_3 . METHOD_1 ( key , VAR_1 ) ; }","['Insert VariableRead', 'Delete VariableRead', 'Delete Invocation']",810,['Update Invocation'],"['VariableRead', 'VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,3
604,604,public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return java.lang.String . METHOD_2 ( VAR_2 . get ( VAR_1 ) ) ; },public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",812,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
605,605,"public void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) TYPE_1 . METHOD_3 ( ( ( STRING_1 + ( this ) ) + STRING_2 ) ) ; this . put ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( ) { this . put ( VAR_1 , VAR_2 ) ; }","['Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete ThisAccess', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",813,['Delete Invocation'],"['TypeAccess', 'Invocation', 'TypeAccess', 'FieldRead', 'ThisAccess', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.09090909090909091,0.16666666666666669,1,0,10
606,606,"private TYPE_1 METHOD_1 ( ) { return METHOD_2 ( STRING_1 , new TYPE_2 ( this . VAR_1 ) ) ; }","private TYPE_1 METHOD_1 ( ) { return METHOD_2 ( STRING_1 , new TYPE_2 ( VAR_1 ) ) ; }",['Delete ThisAccess'],814,['Delete TypeAccess'],['ThisAccess'],['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
607,607,private boolean METHOD_1 ( TYPE_1 n ) { return VAR_1 . contains ( VAR_2 . getType ( ) . METHOD_2 ( ) ) ; },private boolean METHOD_1 ( TYPE_1 n ) { return VAR_1 . contains ( VAR_2 . getType ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",816,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
608,608,"public synchronized void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { this . VAR_3 . add ( 0 , VAR_1 ) ; } else { this . VAR_3 . add ( VAR_1 ) ; } }",public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_3 . add ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",817,"['Delete LocalVariable', 'Delete BinaryOperator', 'Delete Invocation']","['Invocation', 'TypeReference', 'Parameter', 'VariableRead', 'ThisAccess', 'FieldRead', 'Literal', 'VariableRead', 'Invocation', 'Block', 'Block', 'If']","['LocalVariable', 'BinaryOperator', 'Invocation']",Partial Match,0.09090909090909091,0.3333333333333333,0.08333333333333333,0.13333333333333333,1,2,11
609,609,"public static TYPE_1 METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_4 . put ( VAR_5 , VAR_2 ) ; VAR_4 . put ( VAR_6 , VAR_1 ) ; return VAR_3 ; }","public static TYPE_1 METHOD_1 ( long VAR_2 , long VAR_1 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_4 . put ( VAR_5 , VAR_2 ) ; VAR_4 . put ( VAR_6 , VAR_1 ) ; return VAR_3 ; }",['Move Parameter'],818,['Update LocalVariable'],['Parameter'],['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
610,610,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) . METHOD_3 ( null ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",819,['Delete Invocation'],"['TypeReference', 'Invocation', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
611,611,"public void METHOD_1 ( TYPE_1 context ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( 1.0 , context ) ; METHOD_5 ( 1.0 , context ) ; METHOD_6 ( 1.0 , context ) ; }",public void METHOD_1 ( TYPE_1 context ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( 1.0 ) ; METHOD_5 ( 1.0 ) ; METHOD_6 ( 1.0 ) ; },"['Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",821,"['Delete Parameter', 'Delete Parameter', 'Delete Parameter']","['VariableRead', 'VariableRead', 'VariableRead']","['Parameter', 'Parameter', 'Parameter']",Partial Match,0.0,0.0,0.0,0.0,0,3,3
612,612,public void METHOD_1 ( TYPE_1 VAR_1 ) { new TYPE_2 ( ) ; if ( ! ( TYPE_3 . METHOD_2 ( ) ) ) { TYPE_3 . METHOD_3 ( ) ; METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { new TYPE_2 ( ) ; TYPE_3 . METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",822,"['Delete Invocation', 'Delete Block']","['Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'If']","['Invocation', 'Block']",GPT Missed Nodes,0.4,1.0,0.2857142857142857,0.4444444444444445,2,0,5
613,613,"private void METHOD_1 ( java.lang.Object VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { this . stringBuilder.append ( VAR_3 ) ; this . METHOD_2 ( VAR_1 ) ; if ( VAR_2 ) this . stringBuilder.append ( STRING_1 ) ; this . stringBuilder.append ( ""\n"" ) ; }","private void METHOD_1 ( boolean VAR_2 , java.lang.Object VAR_1 , java.lang.String VAR_3 ) { this . stringBuilder.append ( VAR_3 ) ; this . METHOD_2 ( VAR_1 ) ; if ( VAR_2 ) this . stringBuilder.append ( STRING_1 ) ; this . stringBuilder.append ( ""\n"" ) ; }",['Move Parameter'],823,['Move Parameter'],['Parameter'],['Parameter'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
614,614,"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_2 ) ; if ( ! ( VAR_4 ) ) VAR_5 . METHOD_3 ( STRING_1 ) ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_2 ) ; }","['Delete FieldRead', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",824,['Delete Invocation'],"['FieldRead', 'UnaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
615,615,"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int i , long VAR_2 ) { TYPE_2 . METHOD_2 ( this ) . METHOD_3 ( VAR_3 . get ( i ) ) ; }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int i , long VAR_2 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( this , VAR_3 . get ( i ) ) ; }","['Update Invocation', 'Move Invocation', 'Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",825,"['Delete VariableRead', 'Insert VariableRead']","['Invocation', 'Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation']","['VariableRead', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,6
616,616,public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_3 . getId ( VAR_1 ) ) ; },public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",826,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
617,617,public void METHOD_1 ( int data ) { METHOD_2 ( ) ; VAR_1 [ VAR_2 ] = data ; ( size ) ++ ; ( VAR_2 ) ++ ; },public void METHOD_1 ( int data ) { VAR_1 [ VAR_2 ] = data ; ( size ) ++ ; METHOD_2 ( ) ; ( VAR_2 ) ++ ; },['Move Invocation'],828,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
618,618,public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { return VAR_2 ; },public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { return new java.util.ArrayList ( VAR_2 ) ; },"['Insert ConstructorCall', 'Move FieldRead']",829,['Insert Invocation'],"['ConstructorCall', 'FieldRead']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
619,619,protected int METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; },protected int METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; },"['Move Invocation', 'Delete Invocation']",831,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
620,620,public void METHOD_1 ( ) { if ( ( ( type ) != null ) && ( VAR_1 ) ) { TYPE_1 . METHOD_2 ( type ) ; } },public void METHOD_1 ( ) { if ( ( type ) != null ) { java.lang.System.out.println ( ) ; TYPE_1 . METHOD_2 ( type ) ; } },"['Move BinaryOperator', 'Insert Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete FieldRead', 'Delete BinaryOperator']",832,"['Insert TypeAccess', 'Insert Invocation']","['BinaryOperator', 'Invocation', 'FieldRead', 'TypeAccess', 'FieldRead', 'BinaryOperator']","['TypeAccess', 'Invocation']",GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,2,0,4
621,621,"public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { if ( ( VAR_1 ) > 1 ) { ( VAR_1 ) ++ ; VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) ; } return VAR_3 . METHOD_3 ( VAR_4 , new TYPE_2 ( VAR_5 ) ) ; }","public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { ( VAR_1 ) ++ ; VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) ; return VAR_3 . METHOD_3 ( VAR_4 , new TYPE_2 ( VAR_5 ) ) ; }","['Move UnaryOperator', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",834,['Delete UnaryOperator'],"['UnaryOperator', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['UnaryOperator'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
622,622,public void handle ( TYPE_1 event ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { VAR_3 . METHOD_1 ( VAR_4 ) ; } else { VAR_3 . METHOD_1 ( VAR_5 ) ; } },public void handle ( TYPE_1 event ) { VAR_3 . METHOD_1 ( VAR_5 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",835,['Delete If'],"['Invocation', 'FieldRead', 'FieldRead', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'Block', 'If']",['If'],GPT Missed Nodes,0.16666666666666666,1.0,0.1,0.18181818181818182,1,0,9
623,623,public void METHOD_1 ( android.view.View view ) { if ( ! ( VAR_1 ) ) { if ( ( ( VAR_2 ) < INT_1 ) & ( ( VAR_2 ) > 1 ) ) { ( VAR_2 ) ++ ; } METHOD_2 ( ) ; } },public void METHOD_1 ( android.view.View view ) { if ( ( ( VAR_2 ) < INT_1 ) & ( ( VAR_2 ) > 1 ) ) { ( VAR_2 ) ++ ; } METHOD_2 ( VAR_2 ) ; },"['Move If', 'Move Invocation', 'Insert TypeAccess', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",836,"['Delete UnaryOperator', 'Delete VariableRead', 'Update Assignment']","['If', 'Invocation', 'TypeAccess', 'FieldRead', 'UnaryOperator', 'Block', 'If']","['UnaryOperator', 'VariableRead', 'Assignment']",Partial Match,0.125,0.3333333333333333,0.14285714285714285,0.2,1,2,6
624,624,"public void METHOD_1 ( TYPE_1 data ) throws java.lang.Exception { if ( ! ( VAR_1 ) ) { VAR_2 . METHOD_2 ( VAR_3 , VAR_4 . start ) ; } }","public void METHOD_1 ( TYPE_1 data ) throws java.lang.Exception { VAR_2 . METHOD_2 ( VAR_3 , VAR_4 . start ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",838,['Delete Invocation'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,5
625,625,public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == null ) ) || ( VAR_2 . name ( ) . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ) ; },public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) == null ) || ( VAR_2 . name ( ) . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ) ; },"['Move BinaryOperator', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",839,['Delete Invocation'],"['BinaryOperator', 'Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,6
626,626,public static void METHOD_1 ( java.lang.String msg ) { TYPE_1 . METHOD_2 ( ( ) - > TYPE_2 . METHOD_1 ( new TYPE_3 ( msg ) ) ) ; },public static void METHOD_1 ( java.lang.String msg ) { TYPE_2 . METHOD_1 ( new TYPE_3 ( msg ) ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Insert ConstructorCall', 'Insert VariableRead']",841,['Delete Invocation'],"['Invocation', 'TypeAccess', 'ConstructorCall', 'VariableRead']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
627,627,"public TYPE_1 METHOD_1 ( TYPE_2 content , boolean VAR_1 ) { this . METHOD_2 ( new TYPE_3 ( this , content , VAR_1 ) ) ; return this ; }","public void METHOD_1 ( TYPE_2 content ) { this . METHOD_2 ( new TYPE_3 ( this , content , false ) ) ; }","['Update TypeReference', 'Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Return']",842,"['Update TypeReference', 'Delete Parameter', 'Update TypeReference', 'Update Invocation']","['TypeReference', 'Literal', 'TypeReference', 'Parameter', 'VariableRead', 'ThisAccess', 'Return']","['TypeReference', 'Parameter', 'TypeReference', 'Invocation']",Partial Match,0.2857142857142857,0.5,0.2857142857142857,0.36363636363636365,2,2,5
628,628,private int METHOD_1 ( ) { return java.lang.Math.abs ( ( ( VAR_1 ) - ( METHOD_2 ( ) . METHOD_3 ( ) . height ( ) ) ) ) ; },private int METHOD_1 ( ) { return ( METHOD_2 ( ) . METHOD_3 ( ) . height ( ) ) - ( VAR_1 ) ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete TypeAccess', 'Delete Invocation']",843,"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator']","['BinaryOperator', 'FieldRead', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation', 'Invocation', 'Invocation', 'UnaryOperator']",Partial Match,0.4,0.4,0.5,0.4444444444444445,2,3,2
629,629,"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 ) , VAR_3 , STRING_1 ) ; this . VAR_4 = new TYPE_3 ( ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ; }","public void METHOD_1 ( ) { this . VAR_4 = new TYPE_3 ( ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ; VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 ) , VAR_3 , STRING_1 ) ; }",['Move Assignment'],845,['Move Assignment'],['Assignment'],['Assignment'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
630,630,public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 = VAR_4 . get ( VAR_1 ) . getId ( ) ; } },public void METHOD_1 ( int VAR_1 ) { VAR_3 = VAR_4 . get ( VAR_1 ) . getId ( ) ; },"['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",846,['Delete Wra'],"['Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
631,631,"public TYPE_1 METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , null ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ( STRING_1 + STRING_3 ) , null ) ; return VAR_1 ; }","['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",848,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'FieldRead', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
632,632,public java.lang.String METHOD_1 ( ) { return STRING_1 + ( TYPE_1 . METHOD_2 ( ) . toString ( ) ) ; },public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( ) . toString ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",850,['Delete Invocation'],"['Invocation', 'FieldRead', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
633,633,public void METHOD_1 ( TYPE_1 message ) { VAR_1 . add ( message ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( this ) ; } },public void METHOD_1 ( TYPE_1 message ) { VAR_1 . add ( message ) ; VAR_2 . METHOD_2 ( this ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",851,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
634,634,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( METHOD_2 ( ) ) TYPE_1 . METHOD_3 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",852,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
635,635,public void METHOD_1 ( final int [ ] VAR_1 ) { if ( METHOD_2 ( VAR_2 ) ) { VAR_3 = VAR_4 ; VAR_5 = VAR_1 [ 0 ] ; VAR_6 = VAR_1 [ 1 ] ; TYPE_1 . METHOD_3 ( this ) ; } },public void METHOD_1 ( final int [ ] VAR_1 ) { METHOD_2 ( VAR_2 ) ; VAR_3 = VAR_4 ; VAR_5 = VAR_1 [ 0 ] ; VAR_6 = VAR_1 [ 1 ] ; TYPE_1 . METHOD_3 ( this ) ; },"['Move Invocation', 'Move Assignment', 'Move Assignment', 'Move Assignment', 'Move Invocation', 'Delete Block', 'Delete If']",853,['Delete If'],"['Invocation', 'Assignment', 'Assignment', 'Assignment', 'Invocation', 'Block', 'If']",['If'],GPT Missed Nodes,0.25,1.0,0.14285714285714285,0.25,1,0,6
636,636,"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 != null ) && ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( VAR_2 class ) ) ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( VAR_2 class ) ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",854,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,5
637,637,public void METHOD_1 ( ) { if ( ( VAR_1 ) && ( VAR_2 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_3 ( ) ; } },"['Move FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",855,['Delete Invocation'],"['FieldRead', 'TypeAccess', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.25,0.4,1,0,3
638,638,"public static void i ( java.lang.String VAR_1 , java.lang.String format , java.lang.Object ... args ) { if ( TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR_3 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 , format , args ) ) ; }","public static void i ( java.lang.String VAR_1 , java.lang.String format , java.lang.Object ... args ) { VAR_3 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 , format , args ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",856,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
639,639,public boolean METHOD_1 ( ) { return STRING_1 . METHOD_2 ( VAR_1 ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 ) == null ; },"['Insert BinaryOperator', 'Insert FieldRead', 'Insert Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",857,"['Update Invocation', 'Insert VariableRead', 'Delete Invocation']","['BinaryOperator', 'FieldRead', 'Literal', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'VariableRead', 'Invocation']",Partial Match,0.16666666666666666,0.3333333333333333,0.16666666666666666,0.2222222222222222,1,2,5
640,640,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_2 . getText ( ) . toString ( ) ) ) METHOD_3 ( ) ; else { METHOD_4 ( VAR_3 ) ; METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . getText ( ) . toString ( ) . isEmpty ( ) ) == false ) METHOD_3 ( VAR_3 ) ; },"['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Insert Literal', 'Update Invocation', 'Move Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Block']",858,"['Delete Invocation', 'Insert Invocation', 'Update Invocation', 'Delete If']","['BinaryOperator', 'Invocation', 'Invocation', 'Literal', 'Invocation', 'Invocation', 'Invocation', 'Invocation', 'Block']","['Invocation', 'Invocation', 'Invocation', 'If']",Partial Match,0.2,0.5,0.2222222222222222,0.30769230769230765,2,2,7
641,641,"public void METHOD_1 ( byte [ ] data , TYPE_1 VAR_1 ) { VAR_2 . set ( false ) ; VAR_3 . METHOD_1 ( data ) ; if ( VAR_4 ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; } }","public void METHOD_1 ( byte [ ] data , TYPE_1 VAR_1 ) { VAR_2 . set ( false ) ; VAR_3 . METHOD_1 ( data ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",860,['Delete Invocation'],"['Invocation', 'Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,5
642,642,private void METHOD_1 ( ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( ( VAR_3 ) > 0 ) ) { ( ( TYPE_1 ) ( getActivity ( ) ) ) . METHOD_3 ( VAR_3 ) ; } },private void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { ( ( TYPE_1 ) ( getActivity ( ) ) ) . METHOD_3 ( VAR_3 ) ; } },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",862,['Delete Wra'],"['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
643,643,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != 1 ) { ( VAR_2 ) -- ; VAR_3 . setText ( java.lang.Integer.toString ( VAR_2 ) ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { ( VAR_2 ) -- ; VAR_3 . setText ( java.lang.Integer.toString ( VAR_2 ) ) ; },"['Move UnaryOperator', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",863,['Delete UnaryOperator'],"['UnaryOperator', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['UnaryOperator'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
644,644,public java.lang.String getValue ( ) { return new java.lang.String ( value ) ; },public java.lang.String getValue ( ) { return value ; },"['Move FieldRead', 'Delete ConstructorCall']",864,"['Delete TypeAccess', 'Delete Literal', 'Delete TypeAccess']","['FieldRead', 'ConstructorCall']","['TypeAccess', 'Literal', 'TypeAccess']",Partial Match,0.0,0.0,0.0,0.0,0,3,2
645,645,public boolean METHOD_1 ( int VAR_1 ) { return ( ( VAR_2 . get ( VAR_1 ) ) != null ) && ( VAR_2 . get ( VAR_1 ) ) ; },public boolean METHOD_1 ( int VAR_1 ) { return ( ( VAR_2 . get ( VAR_1 ) ) != null ) && ( ( VAR_2 . get ( VAR_1 ) ) == true ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",865,['Insert BinaryOperator'],"['BinaryOperator', 'Invocation', 'Literal']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
646,646,"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { METHOD_3 ( VAR_2 , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) ; } else { METHOD_3 ( VAR_3 ) ; } }",public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",866,['Delete Invocation'],"['Invocation', 'VariableRead', 'Invocation', 'UnaryOperator', 'TypeAccess', 'VariableRead', 'Invocation', 'Invocation', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.08333333333333333,0.15384615384615385,1,0,11
647,647,public java.lang.String getName ( ) { if ( ( VAR_1 . METHOD_1 ( ) ) != null ) { return VAR_1 . METHOD_1 ( ) . toString ( ) ; } else { return STRING_1 ; } },public java.lang.String getName ( ) { return VAR_1 . METHOD_1 ( ) . toString ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",867,['Delete Invocation'],"['Return', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'FieldRead', 'Return', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.125,1.0,0.1,0.18181818181818182,1,0,9
648,648,public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_2 . isEmpty ( ) ) ) return null ; return METHOD_1 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",868,"['Delete LocalVariable', 'Delete Invocation', 'Delete Return']","['VariableRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']","['LocalVariable', 'Invocation', 'Return']",Partial Match,0.2222222222222222,0.6666666666666666,0.2,0.30769230769230765,2,1,8
649,649,public void METHOD_1 ( java.lang.String token ) { if ( null != ( VAR_1 ) ) { VAR_2 = token ; } VAR_3 = token ; },public void METHOD_1 ( java.lang.String token ) { VAR_2 = token ; VAR_3 = token ; },"['Move Assignment', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",870,['Delete Assignment'],"['Assignment', 'Literal', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['Assignment'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
650,650,private static java.lang.String METHOD_1 ( java.lang.Class VAR_1 ) { assert VAR_1 != null ; return VAR_2 . getName ( ) ; },private static java.lang.String METHOD_1 ( java.lang.Class VAR_1 ) { assert VAR_1 != null ; return VAR_2 . getClass ( ) . getName ( ) ; },"['Insert Invocation', 'Update Invocation', 'Move Invocation']",871,"['Insert Invocation', 'Insert Invocation']","['Invocation', 'Invocation', 'Invocation']","['Invocation', 'Invocation']",Exact Match,1.0,0.5,0.3333333333333333,0.4,1,1,2
651,651,public boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( VAR_1 ) ) == null ) { return false ; } else { return true ; } },public boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( VAR_1 ) ) != null ) { return true ; } else { return false ; } },"['Update BinaryOperator', 'Move Return', 'Move Return']",872,"['Update BinaryOperator', 'Update Return', 'Update Return']","['BinaryOperator', 'Return', 'Return']","['BinaryOperator', 'Return', 'Return']",Exact Match,1.0,0.3333333333333333,0.3333333333333333,0.3333333333333333,1,2,2
652,652,public void end ( ) { if ( VAR_1 ) { super . end ( ) ; } VAR_2 = null ; },public void end ( ) { super . end ( ) ; VAR_2 = null ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",873,['Delete Block'],"['Invocation', 'FieldRead', 'Block', 'If']",['Block'],GPT Missed Nodes,0.25,1.0,0.25,0.4,1,0,3
653,653,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_3 . METHOD_3 ( true ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_3 ( true ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",874,['Delete Invocation'],"['Invocation', 'VariableRead', 'Invocation', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
654,654,"public static TYPE_1 METHOD_1 ( int VAR_1 , byte VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , TYPE_2 . METHOD_3 ( VAR_3 ) . put ( VAR_2 ) . array ( ) , VAR_4 , true ) ; }","public static TYPE_1 METHOD_1 ( int VAR_1 , byte VAR_2 ) { return new TYPE_1 ( VAR_1 , TYPE_2 . METHOD_3 ( VAR_3 ) . put ( VAR_2 ) . array ( ) ) ; }","['Insert ConstructorCall', 'Move VariableRead', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",875,"['Delete Invocation', 'Insert TypeReference']","['ConstructorCall', 'VariableRead', 'Invocation', 'TypeAccess', 'TypeAccess', 'Literal', 'Invocation']","['Invocation', 'TypeReference']",Partial Match,0.16666666666666666,0.5,0.14285714285714285,0.22222222222222224,1,1,6
655,655,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ! ( VAR_2 ) ) && ( ( VAR_1 . METHOD_2 ( ) ) == INT_1 ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == INT_1 ) { METHOD_3 ( ) ; } },"['Move BinaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",876,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'UnaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
656,656,"private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 . length ( ) ) > INT_1 ) { return VAR_2 . substring ( 0 , INT_1 ) ; } else return VAR_1 ; }","private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . substring ( 0 , INT_1 ) ; }","['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",881,"['Delete Invocation', 'Delete Return']","['Return', 'TypeAccess', 'Invocation', 'FieldRead', 'BinaryOperator', 'Block', 'VariableRead', 'Return', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,2,0,8
657,657,public void METHOD_1 ( ) { if ( VAR_1 . equals ( VAR_2 ) ) { ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_2 ( ) ; } else { VAR_4 = VAR_2 ; VAR_5 . METHOD_3 ( false ) ; } },public void METHOD_1 ( ) { VAR_4 = VAR_2 ; VAR_5 . METHOD_3 ( false ) ; },"['Move Assignment', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",882,"['Delete Invocation', 'Delete Assignment', 'Delete Wra']","['Assignment', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'TypeReference', 'TypeAccess', 'Invocation', 'Block', 'Block', 'If']","['Invocation', 'Assignment', 'Wra']",Partial Match,0.2857142857142857,0.3333333333333333,0.09090909090909091,0.14285714285714288,1,2,10
658,658,public java.lang.String toString ( ) { return ( ( ( ( ( ( getId ( ) ) + STRING_1 ) + ( VAR_1 ) ) + STRING_1 ) + ( VAR_2 ) ) + STRING_1 ) + ( METHOD_1 ( ) ) ; },public java.lang.String toString ( ) { return ( ( ( ( VAR_1 ) + STRING_1 ) + ( VAR_2 ) ) + STRING_1 ) + ( METHOD_1 ( ) ) ; },"['Move BinaryOperator', 'Move Invocation', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",883,['Delete Invocation'],"['BinaryOperator', 'Invocation', 'FieldRead', 'FieldRead', 'FieldRead', 'FieldRead', 'Invocation', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.1,0.18181818181818182,1,0,9
659,659,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_2 ( ) ; } this . VAR_1 = VAR_1 ; this . VAR_1 . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 . METHOD_2 ( ) ; this . VAR_1 = VAR_1 ; this . VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",884,['Delete Invocation'],"['Invocation', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
660,660,public double METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) return VAR_1 . METHOD_3 ( ) ; else return - ( VAR_1 . METHOD_3 ( ) ) ; },public double METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",885,"['Delete Invocation', 'Delete Invocation', 'Delete Return']","['Return', 'TypeAccess', 'Invocation', 'Block', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Return', 'Block', 'If']","['Invocation', 'Invocation', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.3,0.4615384615384615,3,0,7
661,661,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { this . VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",887,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
662,662,public int METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . toUpperCase ( ) ; return ( ( VAR_3 . METHOD_1 ( ) ) * ( VAR_1 . METHOD_1 ( ) ) ) + ( id ) ; },public int METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . toUpperCase ( ) ; return ( VAR_3 . METHOD_1 ( ) ) * ( VAR_1 . METHOD_1 ( ) ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",888,"['Delete TypeAccess', 'Delete Return']","['BinaryOperator', 'FieldRead', 'BinaryOperator']","['TypeAccess', 'Return']",Partial Match,0.0,0.0,0.0,0.0,0,2,3
663,663,"public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . main ( new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_2 } ) ; assertEquals ( false , VAR_2 ) ; }","public void METHOD_1 ( ) { VAR_1 . main ( new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_2 } ) ; assertEquals ( VAR_2 , true ) ; }","['Move Literal', 'Update Literal', 'Delete Invocation']",889,"['Delete Invocation', 'Update Invocation']","['Literal', 'Literal', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.5,0.3333333333333333,0.4,1,1,2
664,664,private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; this . METHOD_4 ( VAR_2 ) ; this . METHOD_5 ( VAR_2 ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; this . METHOD_5 ( VAR_2 ) ; this . METHOD_4 ( VAR_2 ) ; },['Move Invocation'],890,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
665,665,"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; if ( VAR_3 ) { METHOD_2 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; METHOD_2 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",891,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
666,666,"public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( 0 ) ; assertEquals ( VAR_2 , VAR_4 . get ( STRING_1 ) ) ; }","public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( 0 ) ; assertEquals ( VAR_4 . get ( STRING_1 ) , VAR_2 ) ; }",['Move VariableRead'],892,"['Move VariableRead', 'Move Invocation']",['VariableRead'],"['VariableRead', 'Invocation']",GPT Hallucinated Nodes,0.5,0.5,1.0,0.6666666666666666,1,1,0
667,667,"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_1 ) . METHOD_2 ( ) ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_1 ) ; }","['Move ConstructorCall', 'Delete Invocation']",893,['Delete Invocation'],"['ConstructorCall', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
668,668,public void start ( ) { if ( ( this . VAR_1 ) != null ) { this . VAR_2 . start ( ) ; } },public void start ( ) { this . VAR_2 . start ( ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",894,['Delete Invocation'],"['Invocation', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
669,669,public boolean METHOD_1 ( android.view.View view ) { if ( VAR_1 . isEmpty ( VAR_2 . get ( METHOD_2 ( ) ) . METHOD_3 ( ) ) ) { VAR_3 . METHOD_4 ( VAR_2 . get ( METHOD_2 ( ) ) ) ; } return true ; },public boolean METHOD_1 ( android.view.View view ) { VAR_3 . METHOD_4 ( VAR_2 . get ( METHOD_2 ( ) ) ) ; return true ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",895,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation', 'Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.1111111111111111,0.19999999999999998,1,0,8
670,670,"public static void METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String VAR_3 , int VAR_4 ) { TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , true ) ; }","public static boolean METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String VAR_3 , int VAR_4 ) { return TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , true ) ; }","['Update TypeReference', 'Insert Return', 'Move Invocation']",896,"['Insert TypeAccess', 'Insert Wra']","['TypeReference', 'Return', 'Invocation']","['TypeAccess', 'Wra']",Partial Match,0.0,0.0,0.0,0.0,0,2,3
671,671,public synchronized boolean METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; return false ; } else { return true ; } },public synchronized boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; return false ; } else { return true ; } },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",897,['Delete VariableRead'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
672,672,"public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return new TYPE_1 ( 0 , VAR_2 ) ; return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return new TYPE_1 ( 0 , VAR_2 ) ; return new TYPE_1 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , VAR_2 ) ; }","['Insert ConstructorCall', 'Move Invocation', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",900,['Update Invocation'],"['ConstructorCall', 'Invocation', 'FieldRead', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,6
673,673,public void update ( float VAR_1 ) { METHOD_1 ( VAR_1 ) ; this . VAR_2 . add ( this . VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) ; METHOD_4 ( ) ; },public void update ( float VAR_1 ) { this . VAR_2 . add ( this . VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) ; METHOD_4 ( ) ; METHOD_1 ( VAR_1 ) ; },['Move Invocation'],901,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
674,674,public void METHOD_1 ( TYPE_1 response ) { VAR_1 = ( ( java.util.ArrayList < TYPE_2 > ) ( response . METHOD_2 ( ) ) ) ; if ( ( VAR_2 ) != null ) { METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 response ) { VAR_1 = ( ( java.util.ArrayList < TYPE_2 > ) ( response . METHOD_2 ( ) ) ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",902,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
675,675,public int METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) { return ( data ) == null ? 0 : data . METHOD_1 ( ) ; } else { return 0 ; } },public int METHOD_1 ( ) { return ( data ) == null ? 0 : data . METHOD_1 ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",904,"['Delete Invocation', 'Delete Return']","['Return', 'TypeAccess', 'Invocation', 'Invocation', 'Block', 'Literal', 'Return', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.2222222222222222,0.3636363636363636,2,0,7
676,676,"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( METHOD_5 ( ) , VAR_3 ) ; } else { METHOD_6 ( ) ; } }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { VAR_2 . METHOD_3 ( ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_3 . METHOD_4 ( METHOD_5 ( ) , VAR_3 ) ; } else { METHOD_6 ( ) ; } }",['Move Invocation'],905,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
677,677,public java.lang.String METHOD_1 ( ) { return METHOD_2 ( this . message ) ; },public java.lang.String METHOD_1 ( ) { return this . message ; },"['Move FieldRead', 'Delete Invocation']",906,['Delete Invocation'],"['FieldRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
678,678,TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return this ; } else if ( ( VAR_2 ) != null ) { return VAR_2 . METHOD_2 ( ) ; } else { return VAR_3 ; } },TYPE_1 METHOD_1 ( ) { if ( ( VAR_2 ) != null ) { return VAR_2 . METHOD_2 ( ) ; } else { return VAR_3 ; } },"['Move If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ThisAccess', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",907,"['Delete Return', 'Delete Invocation']","['If', 'FieldRead', 'Literal', 'BinaryOperator', 'ThisAccess', 'Return', 'Block', 'Block', 'If']","['Return', 'Invocation']",Partial Match,0.125,0.5,0.1111111111111111,0.1818181818181818,1,1,8
679,679,public void METHOD_1 ( TYPE_1 event ) { this . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 event ) { },"['Delete ThisAccess', 'Delete Invocation']",908,['Delete Invocation'],"['ThisAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
680,680,public java.lang.String toString ( ) { return ( ( ( ( ( ( STRING_1 + ( id ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ) + ( VAR_3 ) ; },public java.lang.String toString ( ) { return ( ( ( ( VAR_1 ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ) + ( VAR_3 ) ; },"['Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",911,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['FieldRead', 'FieldRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'BinaryOperator']","['Invocation', 'Invocation', 'Invocation', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,4,7
681,681,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { return VAR_3 . get ( VAR_1 ) . METHOD_1 ( ) ; } else { return false ; } },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_3 . get ( VAR_1 ) . METHOD_1 ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",912,['Delete Return'],"['Return', 'TypeAccess', 'VariableRead', 'Invocation', 'Block', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
682,682,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( VAR_3 . getText ( ) ) ; },public void METHOD_1 ( java.lang.String message ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( message ) ; },"['Update Parameter', 'Update TypeReference', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",913,"['Update Parameter', 'Update VariableRead']","['Parameter', 'TypeReference', 'VariableRead', 'TypeAccess', 'Invocation']","['Parameter', 'VariableRead']",GPT Missed Nodes,0.4,0.5,0.2,0.28571428571428575,1,1,4
683,683,"public void METHOD_1 ( ) { TYPE_1 p = VAR_1 . METHOD_2 ( 0 , ( - ( VAR_1 . METHOD_3 ( ) ) ) ) ; show ( VAR_2 , p . METHOD_4 ( ) , p . METHOD_5 ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 p = VAR_2 . METHOD_2 ( 0 , ( - ( VAR_2 . METHOD_3 ( ) ) ) ) ; show ( VAR_2 , p . METHOD_4 ( ) , p . METHOD_5 ( ) ) ; }","['Update TypeAccess', 'Update TypeAccess']",914,['Update VariableRead'],"['TypeAccess', 'TypeAccess']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
684,684,"public int delete ( int k ) { if ( ( METHOD_1 ( k ) ) != null ) return METHOD_2 ( VAR_1 , k , null ) ; return - 1 ; }","public int delete ( int k ) { return METHOD_2 ( VAR_1 , k , null ) ; }","['Move Return', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete UnaryOperator', 'Delete Return']",915,['Delete Invocation'],"['Return', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'UnaryOperator', 'Return']",['Invocation'],GPT Missed Nodes,0.125,1.0,0.1,0.18181818181818182,1,0,9
685,685,public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_4 . equals ( VAR_2 . METHOD_2 ( ) ) ) { return VAR_2 ; } } return null ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { if ( ( VAR_4 . compareTo ( VAR_2 . METHOD_2 ( ) ) ) == 0 ) { return VAR_2 ; } } return null ; },"['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Insert Literal']",916,"['Update Invocation', 'Insert Invocation']","['BinaryOperator', 'Invocation', 'Invocation', 'Literal']","['Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.5,0.25,0.3333333333333333,1,1,3
686,686,private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( true ) ) ; } },private void METHOD_1 ( ) { TYPE_1 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( true ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",919,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
687,687,public void METHOD_1 ( ) { if ( VAR_1 == null ) { } else { METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Block', 'Delete If']",920,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,7
688,688,public java.lang.String toString ( ) { return METHOD_1 ( ) ; },public java.lang.String toString ( ) { return METHOD_1 ( ) . toLowerCase ( ) ; },"['Insert Invocation', 'Move Invocation']",921,['Insert Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
689,689,protected void getData ( byte [ ] buffer ) throws java.io.IOException { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( buffer ) ; } },protected void getData ( byte [ ] buffer ) throws java.io.IOException { VAR_1 . METHOD_1 ( buffer ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",923,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
690,690,public TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) ) { i = ( i ) - 1 ; } return VAR_1 . get ( i ) ; },public TYPE_1 METHOD_1 ( ) { i = ( i ) - 1 ; return VAR_1 . get ( i ) ; },"['Move Assignment', 'Delete Invocation', 'Delete Block', 'Delete If']",924,['Delete Invocation'],"['Assignment', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.25,0.4,1,0,3
691,691,public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; if ( ( VAR_2 . size ( ) ) == 0 ) { VAR_1 . METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } },public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Invocation', 'Delete Block', 'Delete If']",925,['Delete Block'],"['TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'Invocation', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.1,0.18181818181818182,1,0,9
692,692,private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 += VAR_3 . getType ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_2 value : VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) { METHOD_1 ( value ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 += VAR_3 . getType ( ) . METHOD_3 ( ) ; for ( TYPE_2 value : VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) { METHOD_1 ( value ) ; } },"['Update Invocation', 'Move Invocation', 'Delete Invocation']",927,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.3333333333333333,0.5,1,0,2
693,693,public long getValue ( ) { return ( ( ( ( VAR_1 ) & INT_1 ) < < 0 ) | ( ( ( VAR_2 ) & 1 ) < < INT_2 ) ) | ( ( ( VAR_3 ) & 1 ) < < INT_1 ) ; },public long getValue ( ) { return ( ( VAR_1 ) & INT_1 ) < < 0 ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",928,"['Delete BinaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator']","['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'BinaryOperator']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator']",GPT Missed Nodes,0.3333333333333333,1.0,0.23076923076923078,0.375,3,0,10
694,694,private void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 = false ; java.lang.System.exit ( 0 ) ; },private void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.exit ( 0 ) ; VAR_1 = false ; },['Move Assignment'],930,['Move LocalVariable'],['Assignment'],['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
695,695,private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; },private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_7 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_8 ( ) ; },['Move Invocation'],932,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
696,696,public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; if ( null != ( VAR_2 ) ) { if ( VAR_3 ) { VAR_3 = false ; } METHOD_2 ( VAR_2 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; if ( ( VAR_3 ) && ( ( VAR_2 ) != null ) ) { VAR_3 = false ; METHOD_2 ( VAR_2 ) ; } },"['Move If', 'Insert BinaryOperator', 'Move FieldRead', 'Move BinaryOperator', 'Move Literal', 'Move Invocation', 'Delete Block', 'Delete If']",933,"['Delete Assignment', 'Delete Invocation', 'Insert Assignment', 'Insert Invocation', 'Update Assignment']","['If', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'Literal', 'Invocation', 'Block', 'If']","['Assignment', 'Invocation', 'Assignment', 'Invocation', 'Assignment']",Partial Match,0.14285714285714285,0.0,0.0,0.0,0,5,8
697,697,"public boolean METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) return VAR_2 . METHOD_1 ( view , VAR_1 ) ; return false ; }","public boolean METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { return VAR_2 . METHOD_1 ( view , VAR_1 ) ; }","['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",934,['Delete Return'],"['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
698,698,"public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( null , VAR_3 , position , 0 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( null , VAR_3 , position , 0 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",935,['Delete Wra'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
699,699,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) && ( ! ( VAR_3 ) ) ) { if ( VAR_4 . contains ( VAR_5 ) ) { VAR_5 . METHOD_2 ( VAR_1 ) ; } else VAR_6 . open ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { if ( VAR_4 . contains ( VAR_5 ) ) { VAR_5 . METHOD_2 ( VAR_1 ) ; } else VAR_6 . open ( VAR_1 ) ; } },"['Move FieldRead', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",936,"['Delete Block', 'Delete Invocation']","['FieldRead', 'FieldRead', 'UnaryOperator', 'BinaryOperator']","['Block', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,2,4
700,700,private java.lang.String METHOD_1 ( java.lang.String string ) { return ( ( string == null ) || ( VAR_1 . equals ( STRING_1 ) ) ) || ( VAR_1 . equals ( STRING_2 ) ) ? getString ( VAR_2 ) : string ; },private java.lang.String METHOD_1 ( java.lang.String string ) { return ( string == null ) || ( VAR_1 . equals ( STRING_1 ) ) ? getString ( VAR_2 ) : string ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",937,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
701,701,"protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; if ( ! ( VAR_1 ) ) { METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; } super . METHOD_1 ( ) ; }","protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; super . METHOD_1 ( ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",938,['Delete Block'],"['Invocation', 'Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
702,702,private void METHOD_1 ( final TYPE_1 < TYPE_2 > path ) { if ( path . METHOD_2 ( ) ) { this . VAR_1 . METHOD_3 ( VAR_2 . get ( ) . METHOD_4 ( ) ) ; } else { this . METHOD_5 ( ) ; } },private void METHOD_1 ( final TYPE_2 path ) { this . VAR_1 . METHOD_3 ( path . METHOD_4 ( ) ) ; },"['Move Invocation', 'Update TypeReference', 'Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",939,"['Update TypeReference', 'Delete TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']","['Invocation', 'TypeReference', 'Invocation', 'Invocation', 'TypeReference', 'TypeAccess', 'Invocation', 'Invocation', 'Block', 'ThisAccess', 'Invocation', 'Block', 'If']","['TypeReference', 'TypeReference', 'Invocation', 'TypeAccess', 'Invocation']",GPT Missed Nodes,0.5,1.0,0.38461538461538464,0.5555555555555556,5,0,8
703,703,private static void METHOD_1 ( ) { java.lang.String line ; do line = TYPE_1 . METHOD_2 ( ) ; while ( ! ( VAR_1 . trim ( ) . equals ( VAR_2 ) ) ) ; },private static void METHOD_1 ( ) { java.lang.String line ; do line = TYPE_1 . METHOD_2 ( ) ; while ( ! ( VAR_1 . equals ( VAR_2 ) ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",940,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
704,704,public void METHOD_1 ( byte VAR_1 ) { this . VAR_1 = VAR_1 ; },public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = ( ( byte ) ( VAR_1 ) ) ; },"['Update TypeReference', 'Insert TypeReference']",942,"['Update TypeAccess', 'Insert TypeAccess']","['TypeReference', 'TypeReference']","['TypeAccess', 'TypeAccess']",Partial Match,0.0,0.0,0.0,0.0,0,2,2
705,705,"public boolean METHOD_1 ( final java.lang.String VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { try { return VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } catch ( TYPE_2 VAR_5 ) { java.lang.Thread . METHOD_3 ( ) ; } return false ; }","public boolean METHOD_1 ( final java.lang.String VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { try { VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; return true ; } catch ( TYPE_2 VAR_5 ) { java.lang.Thread . METHOD_3 ( ) ; } return false ; }","['Move Invocation', 'Insert Literal']",943,"['Delete Return', 'Insert Return']","['Invocation', 'Literal']","['Return', 'Return']",Partial Match,0.0,0.0,0.0,0.0,0,2,2
706,706,public java.lang.CharSequence METHOD_1 ( int position ) { if ( null != ( VAR_1 ) ) { return VAR_2 . METHOD_2 ( ) . getString ( VAR_3 . get ( position ) ) ; } return STRING_1 ; },public java.lang.CharSequence METHOD_1 ( int position ) { return VAR_2 . METHOD_2 ( ) . getString ( VAR_3 . get ( position ) ) ; },"['Move Return', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",944,['Delete Invocation'],"['Return', 'Literal', 'FieldRead', 'BinaryOperator', 'Block', 'If', 'FieldRead', 'Return']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,8
707,707,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( ( VAR_2 ) >= INT_1 ) VAR_1 . METHOD_2 ( ) ; else VAR_3 . start ( ) ; } },public void METHOD_1 ( ) { if ( ( VAR_2 ) >= INT_1 ) VAR_1 . METHOD_2 ( ) ; else VAR_3 . start ( ) ; },"['Move If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",947,['Delete Invocation'],"['If', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
708,708,"private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( new TYPE_1 ( TYPE_2 . METHOD_5 ( VAR_3 ) ) , METHOD_6 ( ) ) ; }","private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( new TYPE_1 ( VAR_3 ) , METHOD_6 ( ) ) ; }","['Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",948,"['Delete Invocation', 'Delete TypeAccess']","['FieldRead', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess']",GPT Missed Nodes,0.6666666666666666,1.0,0.5,0.6666666666666666,2,0,2
709,709,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ! ( VAR_2 . contains ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . contains ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete UnaryOperator']",950,['Delete Invocation'],"['Invocation', 'UnaryOperator']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
710,710,"public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , android.content.Context context ) { TYPE_2 VAR_3 = METHOD_2 ( VAR_2 , context ) ; if ( VAR_3 != null ) { METHOD_1 ( VAR_1 , VAR_3 ) ; } else { METHOD_1 ( VAR_1 , VAR_2 ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , android.content.Context context ) { TYPE_2 VAR_3 = METHOD_2 ( VAR_2 , context ) ; METHOD_1 ( VAR_1 , VAR_3 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",951,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'VariableRead', 'VariableRead', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.16666666666666666,0.5,0.1,0.16666666666666669,1,1,9
711,711,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( false ) ; } METHOD_3 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",952,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Literal', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.125,0.2222222222222222,1,0,7
712,712,"private void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } TYPE_1 . METHOD_6 ( VAR_2 , STRING_1 ) ; }","private void METHOD_1 ( ) { METHOD_4 ( ) ; TYPE_1 . METHOD_6 ( VAR_2 , STRING_1 ) ; }","['Move Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete Invocation', 'Delete Block', 'Delete If']",953,"['Delete Invocation', 'Delete Block', 'Delete Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'Invocation', 'Block', 'If']","['Invocation', 'Block', 'Invocation']",GPT Missed Nodes,0.4,1.0,0.3333333333333333,0.5,3,0,6
713,713,public void METHOD_1 ( ) { try { java.lang.Thread . METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( ) ; } if ( VAR_2 ) { VAR_3 . METHOD_4 ( ) ; listener . METHOD_5 ( ) ; } },public void METHOD_1 ( ) { try { java.lang.Thread . METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( ) ; } VAR_3 . METHOD_4 ( ) ; listener . METHOD_5 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",954,['Delete Block'],"['Invocation', 'Invocation', 'FieldRead', 'Block', 'If']",['Block'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
714,714,"public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 class , VAR_3 ) ; }",public TYPE_1 METHOD_1 ( ) { return VAR_3 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",956,"['Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Update Return']","['FieldRead', 'TypeAccess', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess', 'TypeAccess', 'VariableRead', 'Return']",Partial Match,0.4,0.6,0.5,0.5454545454545454,3,2,3
715,715,"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String label , final TYPE_3 VAR_2 ) { return TYPE_1 . METHOD_1 ( VAR_1 , label , INT_1 , VAR_3 , VAR_2 ) ; }","public static TYPE_1 METHOD_1 ( java.lang.String label , java.lang.Integer size , final TYPE_3 VAR_2 ) { return TYPE_1 . METHOD_1 ( label , size , VAR_3 , VAR_2 ) ; }","['Move Parameter', 'Update Parameter', 'Update TypeReference', 'Move VariableRead', 'Update VariableRead', 'Delete TypeAccess']",958,"['Delete Parameter', 'Insert Parameter', 'Delete Parameter', 'Update TypeReference', 'Update TypeReference', 'Delete Invocation', 'Update Invocation']","['Parameter', 'Parameter', 'TypeReference', 'VariableRead', 'VariableRead', 'TypeAccess']","['Parameter', 'Parameter', 'Parameter', 'TypeReference', 'TypeReference', 'Invocation', 'Invocation']",Partial Match,0.4,0.14285714285714285,0.16666666666666666,0.15384615384615383,1,6,5
716,716,"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Exception VAR_2 ) { VAR_2 . METHOD_2 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Exception VAR_2 ) { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 != null ) { } }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal']",960,['Insert Invocation'],"['If', 'BinaryOperator', 'Block', 'VariableRead', 'Literal']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
717,717,"public static boolean METHOD_1 ( java.lang.String str ) { if ( ( str == null ) || ( VAR_1 . replaceAll ( STRING_1 , STRING_2 ) . equals ( STRING_2 ) ) ) { return true ; } return false ; }",public static boolean METHOD_1 ( java.lang.String str ) { if ( ( str == null ) || ( VAR_1 . equals ( STRING_2 ) ) ) { return true ; } return false ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",961,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
718,718,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_1 ) != VAR_1 ) { select ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { select ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",962,['Delete Wra'],"['Invocation', 'Invocation', 'ThisAccess', 'FieldRead', 'VariableRead', 'BinaryOperator', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,8
719,719,public void METHOD_1 ( java.lang.String name ) { if ( ( ! ( VAR_1 . isEmpty ( ) ) ) && ( ( VAR_1 . trim ( ) . length ( ) ) > 0 ) ) this . name = VAR_1 . trim ( ) ; },public void METHOD_1 ( java.lang.String name ) { this . name = VAR_1 . trim ( ) ; },"['Move Assignment', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",963,['Delete Invocation'],"['Assignment', 'TypeAccess', 'Invocation', 'UnaryOperator', 'TypeAccess', 'Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.125,1.0,0.08333333333333333,0.15384615384615385,1,0,11
720,720,public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) VAR_1 . handle ( ) ; else if ( ( ! ( VAR_2 . METHOD_3 ( ) ) ) && ( ! ( VAR_2 . METHOD_4 ( ) ) ) ) METHOD_5 ( ) ; },public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) VAR_1 . handle ( ) ; else if ( ! ( VAR_2 . METHOD_3 ( ) ) ) METHOD_5 ( ) ; },"['Move UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",965,['Delete Invocation'],"['UnaryOperator', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
721,721,public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; } VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; },"['Move Invocation', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",966,['Delete Invocation'],"['Invocation', 'Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
722,722,public void handle ( TYPE_1 event ) { VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; },public void handle ( TYPE_1 event ) { METHOD_2 ( ) ; },"['Delete TypeAccess', 'Delete Invocation']",967,['Delete Invocation'],"['TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
723,723,"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ? 1 : - 1 ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ? - 1 : 1 ; }",['Move Literal'],968,"['Update UnaryOperator', 'Update UnaryOperator']",['Literal'],"['UnaryOperator', 'UnaryOperator']",Partial Match,0.0,0.0,0.0,0.0,0,2,1
724,724,public void METHOD_1 ( ) { if ( ( VAR_1 ) < ( ( VAR_2 . size ( ) ) - 1 ) ) METHOD_2 ( ( ++ ( VAR_1 ) ) ) ; },public void METHOD_1 ( ) { METHOD_2 ( ( ++ ( VAR_1 ) ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",969,"['Delete UnaryOperator', 'Delete Invocation']","['Invocation', 'FieldRead', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator', 'Block', 'If']","['UnaryOperator', 'Invocation']",Partial Match,0.125,0.5,0.1111111111111111,0.1818181818181818,1,1,8
725,725,"private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) , VAR_4 ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; VAR_6 . METHOD_3 ( VAR_3 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) , VAR_4 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; VAR_6 . METHOD_3 ( VAR_3 ) ; }",['Move Invocation'],970,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
726,726,"public synchronized java.util.HashMap < TYPE_1 , TYPE_2 > METHOD_1 ( ) { return new java.util.HashMap ( VAR_1 ) ; }","public synchronized java.util.HashMap < TYPE_1 , TYPE_2 > METHOD_1 ( ) { return VAR_1 ; }","['Move FieldRead', 'Delete ConstructorCall']",971,['Delete Invocation'],"['FieldRead', 'ConstructorCall']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
727,727,"private void METHOD_1 ( int VAR_1 , boolean VAR_2 ) { if ( VAR_1 < ( VAR_3 . length ) ) { VAR_4 [ VAR_1 ] = VAR_2 ; } }","private void METHOD_1 ( int VAR_1 , boolean VAR_2 ) { if ( ( VAR_3 . length ) < VAR_1 ) { VAR_4 [ VAR_1 ] = VAR_2 ; } }",['Move VariableRead'],974,['Update Assignment'],['VariableRead'],['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
728,728,"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; VAR_1 . METHOD_3 ( VAR_3 , getIntent ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ) ; METHOD_6 ( VAR_1 ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; VAR_1 . METHOD_3 ( VAR_4 , getIntent ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ) ; METHOD_6 ( VAR_1 ) ; }","['Move TypeAccess', 'Move TypeAccess']",976,"['Update Invocation', 'Update Invocation']","['TypeAccess', 'TypeAccess']","['Invocation', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,2,2
729,729,private float METHOD_1 ( int position ) { float result = ( ( METHOD_2 ( ) ) * position ) / ( VAR_1 ) ; if ( VAR_2 ) { java.lang.System.out.println ( ( STRING_1 + result ) ) ; } return result ; },private float METHOD_1 ( int position ) { float result = ( ( METHOD_2 ( ) ) * position ) / ( VAR_1 ) ; java.lang.System.out.println ( ( STRING_1 + result ) ) ; return result ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",978,['Delete Wra'],"['Invocation', 'FieldRead', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
730,730,"public TYPE_1 [ ] METHOD_1 ( ) { return new TYPE_1 [ ] { VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 } ; }","public TYPE_1 [ ] METHOD_1 ( ) { return new TYPE_1 [ ] { VAR_1 , VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 } ; }",['Move FieldRead'],979,"['Move TypeAccess', 'Move TypeAccess']",['FieldRead'],"['TypeAccess', 'TypeAccess']",Partial Match,0.0,0.0,0.0,0.0,0,2,1
731,731,public int METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return 0 ; } return VAR_2 . length ; },public int METHOD_1 ( ) { return VAR_2 . length ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",980,['Delete Return'],"['FieldRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
732,732,private void METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) >= ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) { METHOD_4 ( ) ; } else { VAR_2 . METHOD_1 ( ) ; } } },private void METHOD_1 ( ) { VAR_2 . METHOD_1 ( ) ; if ( ( VAR_2 . METHOD_2 ( ) ) >= ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) { METHOD_4 ( ) ; } },"['Move Invocation', 'Move If', 'Delete Block', 'Delete FieldRead', 'Delete Block', 'Delete If']",981,"['Delete VariableRead', 'Delete Invocation']","['Invocation', 'If', 'Block', 'FieldRead', 'Block', 'If']","['VariableRead', 'Invocation']",Partial Match,0.2,0.0,0.0,0.0,0,2,6
733,733,public double METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ( TYPE_2 VAR_2 ) - > VAR_2 . METHOD_5 ( ) ) ) ; } else { return 0 ; } },public double METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ( TYPE_2 VAR_2 ) - > VAR_2 . METHOD_5 ( ) ) ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",982,"['Delete Return', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.16666666666666666,0.5,0.1111111111111111,0.1818181818181818,1,1,8
734,734,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( true ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( true ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",984,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.125,0.2222222222222222,1,0,7
735,735,"public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == ( TYPE_2 . METHOD_2 ( ) . VAR_2 ) ) { TYPE_2 . METHOD_2 ( ) . VAR_2 = null ; } else { TYPE_3 . METHOD_3 ( VAR_3 , STRING_1 ) ; } }",public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . VAR_2 = null ; },"['Move Assignment', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",985,"['Delete Invocation', 'Delete Assignment']","['Assignment', 'VariableRead', 'TypeAccess', 'Invocation', 'FieldRead', 'BinaryOperator', 'Block', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'Assignment']",GPT Missed Nodes,0.25,0.5,0.07692307692307693,0.13333333333333336,1,1,12
736,736,public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ( VAR_1 ) == ( VAR_2 ) ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 ) == ( VAR_2 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",986,['Delete BinaryOperator'],"['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
737,737,public boolean METHOD_1 ( java.io.File file ) { return TYPE_1 . METHOD_2 ( VAR_1 . getName ( ) ) . equals ( message . METHOD_3 ( ) ) ; },public boolean METHOD_1 ( java.io.File file ) { return VAR_1 . getName ( ) . startsWith ( message . METHOD_3 ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",987,"['Delete TypeAccess', 'Delete Invocation', 'Insert Invocation', 'Update Invocation']","['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation', 'Invocation', 'Invocation']",Exact Match,1.0,0.75,0.6,0.6666666666666665,3,1,2
738,738,public double min ( ) { if ( ! ( METHOD_1 ( ) ) ) { return data [ 0 ] ; } else { return VAR_1 . min ( getData ( ) ) ; } },public double min ( ) { if ( ! ( METHOD_1 ( ) ) ) { return data [ 0 ] ; } else { return VAR_1 . min ( data ) ; } },"['Insert FieldRead', 'Delete Invocation']",988,['Update Invocation'],"['FieldRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
739,739,public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_2 = this . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_3 . toString ( ) ) ; return VAR_4 . toString ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_2 = this . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_3 . toString ( ) ) ; java.lang.System.out.print ( VAR_4 . toString ( ) ) ; },"['Update TypeReference', 'Insert Invocation', 'Insert FieldRead', 'Move Invocation', 'Insert TypeAccess', 'Delete Return']",989,"['Update TypeAccess', 'Insert Invocation', 'Delete Return']","['TypeReference', 'Invocation', 'FieldRead', 'Invocation', 'TypeAccess', 'Return']","['TypeAccess', 'Invocation', 'Return']",GPT Missed Nodes,0.6,0.6666666666666666,0.3333333333333333,0.4444444444444444,2,1,4
740,740,"public void METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int VAR_2 , int count ) { if ( ( VAR_3 . size ( ) ) > 0 ) { this . VAR_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; } }","public void METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int VAR_2 , int count ) { this . VAR_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",990,['Delete Block'],"['Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
741,741,public TYPE_1 METHOD_1 ( java.lang.String replace ) { return this . METHOD_2 ( VAR_1 . replace ( replace ) ) ; },public TYPE_1 METHOD_1 ( java.lang.String replace ) { this . METHOD_2 ( VAR_1 . replace ( replace ) ) ; return this ; },"['Move Invocation', 'Insert ThisAccess']",991,"['Delete Return', 'Insert Invocation', 'Insert Return']","['Invocation', 'ThisAccess']","['Return', 'Invocation', 'Return']",Partial Match,0.3333333333333333,0.0,0.0,0.0,0,3,2
742,742,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) >= 1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; } else { VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_3 = null ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; } else { VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_3 = null ; } },"['Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",992,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
743,743,public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . get ( INT_1 ) ; },public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . get ( 1 ) ; },"['Insert Literal', 'Delete TypeAccess']",993,['Update VariableRead'],"['Literal', 'TypeAccess']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
744,744,"protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { final TYPE_2 < TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 , VAR_4 class , VAR_1 ) ; return VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; }","protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { final TYPE_2 < TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 , VAR_4 class , VAR_1 ) ; return VAR_2 . METHOD_3 ( ) ; }","['Move Invocation', 'Delete Invocation']",994,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
745,745,public void METHOD_1 ( ) throws java.io.IOException { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_2 ( ) ; } },public void METHOD_1 ( ) throws java.io.IOException { this . VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",996,['Delete Invocation'],"['Invocation', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
746,746,"public void METHOD_1 ( int x , int y ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { state = VAR_2 ; METHOD_3 ( x , y ) ; METHOD_4 ( ) ; } }","public void METHOD_1 ( int x , int y ) { state = VAR_2 ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { METHOD_3 ( x , y ) ; } METHOD_4 ( ) ; }","['Move Assignment', 'Move Invocation']",997,"['Move Assignment', 'Move Invocation']","['Assignment', 'Invocation']","['Assignment', 'Invocation']",Exact Match,1.0,1.0,1.0,1.0,2,0,0
747,747,"protected void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; try { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }","protected void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( ) ; try { METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }",['Move Invocation'],998,"['Delete Block', 'Delete Invocation']",['Invocation'],"['Block', 'Invocation']",GPT Hallucinated Nodes,0.5,0.0,0.0,0.0,0,2,1
748,748,public float getValue ( ) { return ( this . VAR_1 ) / ( ( float ) ( this . VAR_2 ) ) ; },public float getValue ( ) { return ( this . VAR_1 ) / ( ( float ) ( this . VAR_1 ) ) ; },['Update FieldRead'],999,['Update VariableRead'],['FieldRead'],['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
749,749,"public TYPE_1 METHOD_1 ( java.lang.String text ) { return super . METHOD_1 ( text ) . METHOD_2 ( new TYPE_2 ( VAR_1 , to ) ) ; }",public TYPE_1 METHOD_1 ( java.lang.String text ) { return super . METHOD_1 ( text ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation']",1004,['Delete Invocation'],"['Invocation', 'FieldRead', 'FieldRead', 'ConstructorCall', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
750,750,"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String [ ] args ) throws TYPE_2 { if ( VAR_2 ) { TYPE_3 . METHOD_2 ( args , false ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String [ ] args ) throws TYPE_2 { TYPE_3 . METHOD_2 ( args , false ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1005,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
751,751,void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) VAR_2 . METHOD_2 ( VAR_1 ) ; },void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1006,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
752,752,public java.lang.String toString ( ) { return ( ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( value ) ) + STRING_3 ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) + CHAR_1 ; },public java.lang.String toString ( ) { return ( ( ( ( STRING_1 + STRING_2 ) + ( value ) ) + STRING_3 ) + ( VAR_1 ) ) + CHAR_1 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1008,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['BinaryOperator', 'FieldRead', 'FieldRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'BinaryOperator']","['Invocation', 'Invocation', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,3,8
753,753,private void METHOD_1 ( int i ) { VAR_1 . METHOD_2 ( ) . add ( VAR_2 . get ( i ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; },private void METHOD_1 ( int i ) { VAR_1 . METHOD_2 ( ) . add ( VAR_2 . get ( i ) ) ; VAR_1 . METHOD_4 ( ) ; },"['Update Invocation', 'Move Invocation', 'Move Invocation', 'Delete Invocation']",1010,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.25,0.4,1,0,3
754,754,"public void METHOD_1 ( ) { VAR_1 . add ( new TYPE_1 ( VAR_2 , METHOD_2 ( VAR_3 ) , METHOD_3 ( VAR_3 ) ) ) ; VAR_4 . METHOD_4 ( ) ; }",public void METHOD_1 ( ) { VAR_4 . METHOD_4 ( ) ; },"['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Invocation']",1011,['Delete Invocation'],"['TypeAccess', 'FieldRead', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'ConstructorCall', 'Invocation']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.125,0.2222222222222222,1,0,7
755,755,"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Throwable VAR_2 ) { }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete Parameter']",1012,['Delete Parameter'],"['TypeReference', 'Parameter']",['Parameter'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
756,756,"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return new TYPE_1 ( VAR_2 , ( ( VAR_3 . start ) + 1 ) , VAR_3 . end ) ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return new TYPE_1 ( VAR_2 , ( ( VAR_3 . start ) + 1 ) , ( ( VAR_3 . end ) + 1 ) ) ; }","['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",1013,['Insert BinaryOperator'],"['BinaryOperator', 'FieldRead', 'Literal']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
757,757,"public void METHOD_1 ( android.view.View view ) { METHOD_2 ( new android.content.Intent ( METHOD_3 ( ) , VAR_1 class ) . METHOD_4 ( VAR_2 , VAR_3 ) . METHOD_4 ( VAR_4 , VAR_5 ) ) ; }","public void METHOD_1 ( android.view.View view ) { METHOD_2 ( new android.content.Intent ( METHOD_3 ( ) , VAR_1 class ) . METHOD_4 ( VAR_2 , VAR_3 ) ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1015,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
758,758,"public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , 0 ) . equals ( STRING_1 ) ) { if ( VAR_2 != 0 ) return true ; } return VAR_2 == 1 ; }","public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , 0 ) ) == STRING_1 ) { if ( VAR_2 != 0 ) return true ; } return VAR_2 == 1 ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1016,"['Delete Invocation', 'Insert BinaryOperator']","['BinaryOperator', 'Invocation', 'FieldRead', 'TypeAccess', 'Invocation']","['Invocation', 'BinaryOperator']",GPT Missed Nodes,0.5,1.0,0.4,0.5714285714285715,2,0,3
759,759,"void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( METHOD_2 ( ) ) { new TYPE_1 ( ) . execute ( VAR_1 , VAR_2 ) ; } else { TYPE_2 . METHOD_3 ( this , STRING_1 , VAR_3 ) . show ( ) ; } }","void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { new TYPE_1 ( ) . execute ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1017,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'TypeAccess', 'ThisAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.09090909090909091,0.16666666666666669,1,0,10
760,760,public void METHOD_1 ( java.lang.Object VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) > 0 ) { VAR_2 . METHOD_3 ( ) . METHOD_4 ( false ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; } },public void METHOD_1 ( java.lang.Object VAR_1 ) { VAR_2 . METHOD_5 ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",1018,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Literal', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.16666666666666666,1.0,0.18181818181818182,0.3076923076923077,2,0,9
761,761,public TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return null ; } return METHOD_2 ( ) ; },public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1019,['Delete Return'],"['FieldRead', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,1,0,4
762,762,public void METHOD_1 ( int time ) { ( this . VAR_1 ) -- ; if ( ( this . VAR_2 ) > 0 ) ( this . VAR_2 ) -- ; },public void METHOD_1 ( ) { ( this . VAR_1 ) -- ; if ( ( this . VAR_2 ) > 0 ) ( this . VAR_2 ) -- ; },"['Delete TypeReference', 'Delete Parameter']",1020,['Delete LocalVariable'],"['TypeReference', 'Parameter']",['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
763,763,public float getData ( int index ) { if ( ( data ) == null ) { TYPE_1 . METHOD_1 ( ( STRING_1 + ( size ) ) ) ; return 0 ; } return data [ index ] ; },public float getData ( int index ) { return data [ index ] ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1021,"['Delete UnaryOperator', 'Delete TypeAccess', 'Delete Literal']","['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Invocation', 'Literal', 'Return', 'Block', 'If']","['UnaryOperator', 'TypeAccess', 'Literal']",Partial Match,0.2222222222222222,0.6666666666666666,0.16666666666666666,0.26666666666666666,2,1,10
764,764,"public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_4 , VAR_1 ) ; if ( VAR_2 != null ) { return VAR_5 . getValue ( ) . toString ( ) ; } return null ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_4 , VAR_1 ) ; if ( VAR_2 != null ) { VAR_5 . getValue ( ) . toString ( ) ; } return null ; }","['Move Invocation', 'Delete Return']",1022,['Delete Invocation'],"['Invocation', 'Return']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
765,765,public int compareTo ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_1 ( ) ) - ( this . METHOD_1 ( ) ) ; },public int compareTo ( TYPE_1 VAR_1 ) { return ( this . METHOD_1 ( ) ) - ( VAR_1 . METHOD_1 ( ) ) ; },['Move Invocation'],1024,"['Move TypeAccess', 'Move Invocation']",['Invocation'],"['TypeAccess', 'Invocation']",GPT Hallucinated Nodes,0.5,0.5,1.0,0.6666666666666666,1,1,0
766,766,"public static boolean equals ( java.io.File VAR_1 , java.io.File VAR_2 ) { if ( ( VAR_1 == null ) || ( VAR_2 == null ) ) return false ; return VAR_1 . METHOD_1 ( ) . equals ( VAR_2 . METHOD_1 ( ) ) ; }","public static boolean equals ( java.io.File VAR_1 , java.io.File VAR_2 ) { return VAR_1 . METHOD_1 ( ) . equals ( VAR_2 . METHOD_1 ( ) ) ; }","['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1025,['Delete BinaryOperator'],"['VariableRead', 'Literal', 'BinaryOperator', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']",['BinaryOperator'],GPT Missed Nodes,0.16666666666666666,1.0,0.09090909090909091,0.16666666666666669,1,0,10
767,767,public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ! ( VAR_3 . contains ( VAR_4 . path ) ) ) { VAR_5 = true ; VAR_3 . add ( VAR_4 . path ) ; } } METHOD_2 ( ) ; },public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_5 = true ; VAR_3 . add ( VAR_4 . path ) ; } METHOD_2 ( ) ; },"['Move Assignment', 'Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1026,['Delete Block'],"['Assignment', 'Invocation', 'TypeAccess', 'FieldRead', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.14285714285714285,1.0,0.125,0.2222222222222222,1,0,7
768,768,public static long METHOD_1 ( long VAR_1 ) { return TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ) ; },public static long METHOD_1 ( long VAR_1 ) { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ) ; },"['Move Invocation', 'Delete Return']",1027,['Delete Return'],"['Invocation', 'Return']",['Return'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
769,769,public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return METHOD_3 ( size ) ; },public TYPE_1 METHOD_1 ( ) { return METHOD_3 ( size ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1028,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'Invocation', 'Invocation', 'Return', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.125,0.2222222222222222,1,0,7
770,770,TYPE_1 < TYPE_2 > METHOD_1 ( int id ) ;,TYPE_1 < TYPE_2 > METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",1029,['Delete Parameter'],"['TypeReference', 'Parameter']",['Parameter'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
771,771,"protected void METHOD_1 ( TYPE_1 result ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( VAR_1 , VAR_2 , result ) ; METHOD_4 ( VAR_2 ) ; }","protected void METHOD_1 ( TYPE_1 result ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_4 ( VAR_2 ) ; METHOD_3 ( result ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess']",1030,"['Update Invocation', 'Move Invocation']","['Invocation', 'TypeAccess', 'TypeAccess']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.5,0.3333333333333333,0.4,1,1,2
772,772,protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; update ( ) ; if ( ( VAR_3 ) >= INT_1 ) { TYPE_2 . METHOD_3 ( this ) ; } },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; update ( ) ; TYPE_2 . METHOD_3 ( this ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1031,['Delete Return'],"['Invocation', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
773,773,public void METHOD_1 ( java.lang.Void result ) { TYPE_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; },public void METHOD_1 ( java.lang.Void result ) { METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( ) ; },['Move Invocation'],1032,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
774,774,"public TYPE_1 METHOD_1 ( TYPE_1 p ) { if ( p == null ) { throw new java.lang.NullPointerException ( ) ; } if ( ( VAR_1 ) == null ) return null ; return METHOD_1 ( VAR_1 , p , VAR_2 . p , true ) ; }","public TYPE_1 METHOD_1 ( TYPE_1 p ) { if ( p == null ) { throw new java.lang.NullPointerException ( ) ; } if ( ( VAR_1 ) == null ) return null ; else return METHOD_1 ( VAR_1 , p , VAR_2 . p , true ) ; }","['Insert Block', 'Move Return']",1033,['Insert Wra'],"['Block', 'Return']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
775,775,"public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( STRING_1 , VAR_3 ) ; VAR_4 . commit ( ) ; super . METHOD_1 ( ) ; }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( STRING_1 , VAR_3 ) ; VAR_4 . commit ( ) ; }",['Move Invocation'],1034,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
776,776,public void METHOD_1 ( java.io.File result ) { if ( result == null ) { } else { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } },public void METHOD_1 ( java.io.File result ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Block', 'Delete If']",1035,['Delete Block'],"['Invocation', 'Invocation', 'Invocation', 'Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.1,0.18181818181818182,1,0,9
777,777,"public final java.lang.String getName ( ) { return getString ( ""name"" ) ; }",public final java.lang.String getName ( ) { return name ; },"['Insert FieldRead', 'Delete Literal', 'Delete Invocation']",1037,"['Delete Invocation', 'Insert FieldRead']","['FieldRead', 'Literal', 'Invocation']","['Invocation', 'FieldRead']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,2,0,1
778,778,public java.lang.String METHOD_1 ( ) { return ( VAR_1 ) + ( path ) ; },public java.lang.String METHOD_1 ( ) { return path ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1038,"['Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']","['FieldRead', 'FieldRead', 'BinaryOperator']","['VariableRead', 'VariableRead', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,3,3
779,779,"public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { VAR_1 = context ; METHOD_2 ( ) ; }","public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { METHOD_2 ( ) ; VAR_1 = context ; }",['Move Assignment'],1039,['Move LocalVariable'],['Assignment'],['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
780,780,"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_2 ) ; if ( ( VAR_4 ) != ( VAR_5 ) ) { VAR_6 . METHOD_3 ( VAR_4 ) ; } }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_2 ) ; }","['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1040,['Delete Invocation'],"['FieldRead', 'FieldRead', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
781,781,public TYPE_1 METHOD_1 ( int VAR_1 ) { for ( TYPE_1 VAR_2 : this . METHOD_2 ( ) . METHOD_2 ( ) ) { if ( ( VAR_2 . METHOD_3 ( ) ) == VAR_1 ) { return VAR_2 ; } } return null ; },public TYPE_1 METHOD_1 ( int VAR_1 ) { for ( TYPE_1 VAR_2 : this . METHOD_2 ( ) ) { if ( ( VAR_2 . METHOD_3 ( ) ) == VAR_1 ) { return VAR_2 ; } } return null ; },"['Move Invocation', 'Delete Invocation']",1041,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
782,782,"public static java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 ) { return VAR_3 . METHOD_2 ( STRING_1 , java.lang.String . METHOD_3 ( VAR_1 ) ) . METHOD_2 ( STRING_2 , java.lang.String . METHOD_3 ( VAR_2 ) ) ; }","public static java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_3 . METHOD_2 ( STRING_1 , java.lang.String . METHOD_3 ( VAR_1 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",1042,"['Delete Parameter', 'Delete Invocation']","['Invocation', 'TypeReference', 'Parameter', 'TypeAccess', 'TypeAccess', 'VariableRead', 'Invocation', 'Invocation']","['Parameter', 'Invocation']",GPT Missed Nodes,0.4,1.0,0.25,0.4,2,0,6
783,783,"public static java.lang.String METHOD_1 ( ) { return VAR_1 . toString ( TYPE_1 . METHOD_2 ( ( ( VAR_2 ) + ( VAR_3 ) ) , INT_1 ) ) ; }",public static java.lang.String METHOD_1 ( ) { return VAR_1 . toString ( ( ( VAR_2 ) + ( VAR_3 ) ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1044,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation']",Exact Match,1.0,1.0,0.3333333333333333,0.5,2,0,4
784,784,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; if ( ( VAR_3 . METHOD_2 ( ) ) != null ) { VAR_4 . METHOD_3 ( VAR_3 . METHOD_2 ( ) ) ; } },"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; if ( ( VAR_3 . METHOD_2 ( ) ) != null ) { java.util.Collections.sort ( VAR_4 , VAR_3 . METHOD_2 ( ) ) ; } }","['Update Invocation', 'Insert TypeAccess']",1046,"['Update Invocation', 'Insert TypeAccess']","['Invocation', 'TypeAccess']","['Invocation', 'TypeAccess']",Exact Match,1.0,1.0,1.0,1.0,2,0,0
785,785,public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; return ( id == ( VAR_1 ) ) || ( super . METHOD_1 ( item ) ) ; },public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; if ( id == ( VAR_1 ) ) { return true ; } return super . METHOD_1 ( item ) ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Move Invocation', 'Insert Return', 'Insert Literal', 'Delete BinaryOperator']",1048,"['Insert Return', 'Insert Return', 'Delete Return']","['If', 'BinaryOperator', 'Block', 'Invocation', 'Return', 'Literal', 'BinaryOperator']","['Return', 'Return', 'Return']",GPT Missed Nodes,0.16666666666666666,0.3333333333333333,0.14285714285714285,0.2,1,2,6
786,786,"public int compareTo ( TYPE_1 < TYPE_2 > VAR_1 ) { return java.lang.Integer . METHOD_1 ( VAR_2 , VAR_3 ) ; }",public int compareTo ( TYPE_1 < TYPE_2 > VAR_1 ) { return ( VAR_2 ) - ( VAR_3 ) ; },"['Insert BinaryOperator', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1049,"['Delete TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Insert BinaryOperator']","['BinaryOperator', 'FieldRead', 'FieldRead', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation']","['TypeAccess', 'TypeReference', 'TypeReference', 'TypeReference', 'TypeReference', 'BinaryOperator']",Partial Match,0.4,0.3333333333333333,0.2857142857142857,0.30769230769230765,2,4,5
787,787,"synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( VAR_3 . getClass ( ) ) ) ) { VAR_4 . put ( VAR_3 . getClass ( ) , VAR_1 ) ; } }",synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_4 . contains ( VAR_1 ) ) ) { VAR_4 . add ( VAR_1 ) ; } },"['Update Invocation', 'Update Invocation', 'Update TypeAccess', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",1050,"['Update Invocation', 'Update Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Insert Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'VariableRead', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Invocation']",GPT Missed Nodes,0.6666666666666666,0.8,0.5,0.6153846153846154,4,1,4
788,788,"private void METHOD_1 ( java.util.Date VAR_1 ) { VAR_2 = new TYPE_1 ( VAR_3 , VAR_4 , VAR_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; METHOD_2 ( ) ; VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }","private void METHOD_1 ( java.util.Date VAR_1 ) { VAR_2 = new TYPE_1 ( VAR_3 , VAR_4 , VAR_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; METHOD_2 ( ) ; }",['Move Invocation'],1051,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
789,789,"public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { java.lang.String VAR_1 = getClass ( ) . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; assertEquals ( INT_1 , VAR_2 . METHOD_6 ( ) ) ; }","public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { java.lang.String VAR_1 = getClass ( ) . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; assertEquals ( VAR_2 . METHOD_6 ( ) , INT_1 ) ; }",['Move TypeAccess'],1052,['Update Invocation'],['TypeAccess'],['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
790,790,"public static void METHOD_1 ( java.lang.String text ) { if ( ! ( TYPE_1 . METHOD_2 ( ( text + ( TYPE_2 . METHOD_3 ( ) ) ) , STRING_1 , true ) ) ) { java.lang.System.out.println ( STRING_2 ) ; } }","public static void METHOD_1 ( java.lang.String text ) { TYPE_1 . METHOD_2 ( ( text + ( TYPE_2 . METHOD_3 ( ) ) ) , STRING_1 , true ) ; }","['Move Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1054,"['Delete Block', 'Delete Invocation']","['Invocation', 'UnaryOperator', 'TypeAccess', 'FieldRead', 'TypeAccess', 'Invocation', 'Block', 'If']","['Block', 'Invocation']",GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,2,0,6
791,791,"public static long METHOD_1 ( java.util.Date VAR_1 , java.util.Date VAR_2 , TYPE_1 VAR_3 ) { long VAR_4 = ( VAR_5 . getTime ( ) ) - ( VAR_6 . getTime ( ) ) ; return VAR_3 . METHOD_2 ( VAR_4 , VAR_7 ) ; }","public static long METHOD_1 ( java.util.Date VAR_1 , java.util.Date VAR_2 , TYPE_1 VAR_3 ) { long VAR_4 = ( VAR_6 . getTime ( ) ) - ( VAR_5 . getTime ( ) ) ; return VAR_3 . METHOD_2 ( VAR_4 , VAR_7 ) ; }",['Move Invocation'],1056,"['Update VariableRead', 'Update VariableRead']",['Invocation'],"['VariableRead', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,1
792,792,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( ( VAR_1 ) == null ) ) { VAR_1 . METHOD_2 ( ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1058,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
793,793,"public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( ) , TYPE_2 . METHOD_3 ( ) , VAR_1 , VAR_3 , VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( ) , TYPE_2 . METHOD_3 ( ) , VAR_1 , VAR_3 , VAR_4 ) ; super . METHOD_1 ( VAR_1 ) ; }",['Move Invocation'],1059,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
794,794,"public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else { METHOD_4 ( new android.content.Intent ( this , VAR_2 class ) ) ; } }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_4 ( new android.content.Intent ( this , VAR_2 class ) ) ; }","['Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1060,['Delete Invocation'],"['Invocation', 'Invocation', 'UnaryOperator', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.14285714285714285,0.25,1,0,6
795,795,public void METHOD_1 ( java.lang.Object VAR_1 ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) { VAR_2 . add ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.Object VAR_1 ) { VAR_2 . add ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1061,['Delete Block'],"['Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
796,796,public int compareTo ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( ( int ) ( TYPE_2 . METHOD_1 ( ( ( VAR_3 ) - ( VAR_4 ) ) ) ) ) ; },public int compareTo ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( ( int ) ( VAR_3 ) ) - ( ( int ) ( VAR_4 ) ) ; },"['Insert BinaryOperator', 'Insert FieldRead', 'Insert FieldRead', 'Move TypeReference', 'Insert TypeReference', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",1062,"['Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Insert BinaryOperator']","['BinaryOperator', 'FieldRead', 'FieldRead', 'TypeReference', 'TypeReference', 'TypeAccess', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Invocation']","['Invocation', 'TypeAccess', 'Invocation', 'BinaryOperator', 'BinaryOperator']",GPT Missed Nodes,0.6,0.8,0.4,0.5333333333333333,4,1,6
797,797,"public void METHOD_1 ( android.content.Context context , boolean VAR_1 , TYPE_1 VAR_2 ) { if ( ! VAR_1 ) { METHOD_2 ( context , VAR_2 ) ; } else { METHOD_3 ( context , VAR_2 ) ; } }","public void METHOD_1 ( android.content.Context context , boolean VAR_1 , TYPE_1 VAR_2 ) { if ( ! VAR_1 ) { METHOD_2 ( context , VAR_2 ) ; } METHOD_3 ( context , VAR_2 ) ; }","['Move Invocation', 'Delete Block']",1063,['Delete If'],"['Invocation', 'Block']",['If'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
798,798,public void METHOD_1 ( long VAR_1 ) { this . VAR_1 = VAR_1 ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } },public void METHOD_1 ( long VAR_1 ) { if ( ( VAR_2 ) != null ) { this . VAR_1 = VAR_1 ; VAR_2 . METHOD_1 ( VAR_1 ) ; } },['Move Assignment'],1064,['Move Assignment'],['Assignment'],['Assignment'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
799,799,public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . getName ( ) ; },public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete Invocation']",1065,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
800,800,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; VAR_5 . METHOD_1 ( VAR_1 ) ; VAR_6 . end ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; VAR_5 . METHOD_1 ( VAR_1 ) ; VAR_6 . end ( ) ; },['Move Invocation'],1066,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
801,801,"public java.lang.String toString ( ) { return ( ( ( ( ( this . VAR_1 . toString ( ) ) + STRING_1 ) + ( message ) ) + ""\n"" ) + ( METHOD_1 ( ) ) ) + ""\n"" ; }","public java.lang.String toString ( ) { return ( ( ( ( this . VAR_1 . toString ( ) ) + ( message ) ) + ""\n"" ) + ( METHOD_1 ( ) ) ) + ""\n"" ; }","['Move BinaryOperator', 'Move Literal', 'Move Invocation', 'Move Literal', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1067,['Delete TypeAccess'],"['BinaryOperator', 'Literal', 'Invocation', 'Literal', 'FieldRead', 'FieldRead', 'BinaryOperator']",['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
802,802,"public int METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; else return 0 ; }","public int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; }","['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1068,['Delete Return'],"['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.1111111111111111,0.19999999999999998,1,0,8
803,803,public java.util.List < java.lang.Long > METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 ; } METHOD_2 ( ) ; return VAR_1 ; },public java.util.List < java.lang.Long > METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { METHOD_2 ( ) ; } return VAR_1 ; },"['Move Invocation', 'Delete FieldRead', 'Delete Return']",1069,['Delete Return'],"['Invocation', 'FieldRead', 'Return']",['Return'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
804,804,public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( ) . delete ( ) ; VAR_3 . remove ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) . delete ( ) ; VAR_3 . remove ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1072,['Delete Invocation'],"['Invocation', 'Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,7
805,805,public static boolean METHOD_1 ( TYPE_1 element ) { return ( element != null ) && ( ( element . METHOD_2 ( ) ) && ( element . METHOD_3 ( ) . METHOD_4 ( element ) ) ) ; },public static boolean METHOD_1 ( TYPE_1 element ) { return ( ( element != null ) && ( element . METHOD_2 ( ) ) ) && ( element . METHOD_3 ( ) . METHOD_4 ( element ) ) ; },"['Move BinaryOperator', 'Move BinaryOperator', 'Move Invocation']",1073,['Move BinaryOperator'],"['BinaryOperator', 'BinaryOperator', 'Invocation']",['BinaryOperator'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
806,806,"public TYPE_1 METHOD_1 ( int VAR_1 ) { java.lang.Float value = VAR_2 . METHOD_2 ( ) ; if ( ( value != null ) && ( value > ( this . end ) ) ) return METHOD_3 ( VAR_1 , value ) ; return null ; }","public TYPE_1 METHOD_1 ( int VAR_1 ) { java.lang.Float value = VAR_2 . METHOD_2 ( ) ; if ( value != null ) return METHOD_3 ( VAR_1 , value ) ; return null ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1075,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'ThisAccess', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
807,807,public java.lang.Class < ? > METHOD_1 ( int VAR_1 ) { if ( VAR_1 == 0 ) return VAR_2 class ; return VAR_3 class ; },public java.lang.Class < ? > METHOD_1 ( int VAR_1 ) { return VAR_3 class ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1076,['Delete Invocation'],"['VariableRead', 'Literal', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
808,808,public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 ) ; TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_4 ) ) ; },public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 ) ; TYPE_1 . METHOD_3 ( VAR_4 ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1077,['Update Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
809,809,protected void METHOD_1 ( double VAR_1 ) { double VAR_2 = ( VAR_3 ) * VAR_1 ; VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( ( VAR_2 - ( VAR_3 ) ) ) ; },protected void METHOD_1 ( double VAR_1 ) { double VAR_2 = ( VAR_3 ) * VAR_1 ; VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( ( ( VAR_3 ) - VAR_2 ) ) ; },['Move VariableRead'],1078,['Update Invocation'],['VariableRead'],['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
810,810,public boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) || ( ( ( ( VAR_1 . METHOD_3 ( ) ) - ( VAR_2 ) ) > ( VAR_3 ) ) && ( ( VAR_4 ) > 0 ) ) ; },public boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) || ( ( ( VAR_1 . METHOD_3 ( ) ) - ( VAR_2 ) ) > ( VAR_3 ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1079,['Delete BinaryOperator'],"['BinaryOperator', 'BinaryOperator', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.25,1.0,0.14285714285714285,0.25,1,0,6
811,811,"public boolean error ( final TYPE_1 message , final java.lang.Throwable VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { METHOD_1 ( VAR_1 ) ; } this . VAR_2 = false ; return false ; }","public boolean error ( final TYPE_1 message , final java.lang.Throwable VAR_1 ) { METHOD_1 ( VAR_1 ) ; this . VAR_2 = false ; return false ; }","['Move Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1080,['Delete Invocation'],"['Invocation', 'VariableRead', 'TypeAccess', 'BinaryOperator', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
812,812,private boolean METHOD_1 ( TYPE_1 build ) { return ( ( build . METHOD_2 ( ) ) == ( VAR_1 ) ) && ( ( METHOD_3 ( build ) ) == ( VAR_1 ) ) ; },private boolean METHOD_1 ( TYPE_1 build ) { if ( ( ( build . METHOD_2 ( ) ) == ( VAR_1 ) ) && ( ( METHOD_3 ( build ) ) == ( VAR_1 ) ) ) { return true ; } return false ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal']",1082,"['Insert Block', 'Insert BinaryOperator']","['If', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Literal']","['Block', 'BinaryOperator']",GPT Missed Nodes,0.4,0.5,0.16666666666666666,0.25,1,1,5
813,813,public java.lang.Void METHOD_1 ( java.lang.Void VAR_1 ) { VAR_2 += 1 ; METHOD_2 ( ) ; if ( VAR_3 ) METHOD_3 ( ) ; return null ; },public java.lang.Void METHOD_1 ( java.lang.Void VAR_1 ) { VAR_2 += 1 ; if ( VAR_3 ) METHOD_3 ( ) ; METHOD_2 ( ) ; return null ; },['Move Invocation'],1083,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
814,814,public int METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 < INT_1 ) && ( VAR_1 > 0 ) ) { return VAR_2 [ VAR_1 ] ; } else { return - 1 ; } },public int METHOD_1 ( int VAR_1 ) { if ( VAR_1 < INT_1 ) { return VAR_2 [ VAR_1 ] ; } else { return - 1 ; } },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1084,['Delete UnaryOperator'],"['BinaryOperator', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
815,815,public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; VAR_2 = VAR_1 . METHOD_4 ( ) ; VAR_3 = true ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; VAR_2 = VAR_1 . METHOD_4 ( ) ; VAR_3 = true ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move If']",1085,['Insert VariableRead'],"['If', 'BinaryOperator', 'Block', 'FieldRead', 'Literal', 'If']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
816,816,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; super . METHOD_1 ( ) ; },['Move Invocation'],1086,"['Move Invocation', 'Move Invocation']",['Invocation'],"['Invocation', 'Invocation']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
817,817,void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( new TYPE_1 ( new TYPE_2 ( VAR_3 ) ) ) ; VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; },void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; VAR_2 . METHOD_3 ( new TYPE_1 ( new TYPE_2 ( VAR_3 ) ) ) ; },['Move Invocation'],1087,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
818,818,public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { if ( VAR_2 . contains ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ) return true ; } return false ; },public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . contains ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; return true ; } return false ; },"['Move If', 'Move Invocation', 'Move Invocation', 'Delete Block', 'Delete If']",1088,['Delete Invocation'],"['If', 'Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,5
819,819,"public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_1 , STRING_1 , STRING_2 ) ; return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , false ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_1 , STRING_1 , STRING_2 ) ; TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , false ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",1089,"['Update TypeReference', 'Delete Invocation']","['TypeReference', 'Invocation', 'Return']","['TypeReference', 'Invocation']",GPT Missed Nodes,0.6666666666666666,0.5,0.3333333333333333,0.4,1,1,2
820,820,"public static void METHOD_1 ( java.lang.String msg ) { if ( ( VAR_1 ) || ( VAR_2 . isEmpty ( msg ) ) ) { return ; } TYPE_1 . METHOD_1 ( VAR_3 , msg ) ; }","public static void METHOD_1 ( java.lang.String msg ) { if ( VAR_2 . isEmpty ( msg ) ) { return ; } TYPE_1 . METHOD_1 ( VAR_3 , msg ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1090,['Delete VariableRead'],"['Invocation', 'FieldRead', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
821,821,public void METHOD_1 ( ) { if ( VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 = false ; VAR_2 . METHOD_2 ( STRING_2 ) . METHOD_3 ( true ) ; METHOD_4 ( VAR_3 ) ; } },public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 = false ; VAR_2 . METHOD_2 ( STRING_2 ) . METHOD_3 ( true ) ; METHOD_4 ( VAR_3 ) ; },"['Move Invocation', 'Move Assignment', 'Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1091,['Delete Invocation'],"['Invocation', 'Assignment', 'Invocation', 'Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,7
822,822,public int METHOD_1 ( int index ) { if ( index < ( VAR_1 . length ) ) { return num [ index ] ; } else { return 0 ; } },public int METHOD_1 ( int index ) { return num [ index ] ; },"['Move Return', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1092,['Delete Return'],"['Return', 'VariableRead', 'FieldRead', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
823,823,"public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . getText ( ) ) != null ) VAR_3 . METHOD_2 ( VAR_4 , null ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { VAR_3 . METHOD_2 ( VAR_4 , null ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1093,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
824,824,"public static int METHOD_1 ( int VAR_1 , int offset ) { return ( ( int ) ( ( java.lang.Math.random ( ) ) * VAR_1 ) ) + offset ; }","public static int METHOD_1 ( int VAR_1 , int offset ) { return ( ( int ) ( ( java.lang.Math.random ( ) ) * ( VAR_1 + 1 ) ) ) + offset ; }","['Insert BinaryOperator', 'Move VariableRead', 'Insert Literal']",1095,['Insert Invocation'],"['BinaryOperator', 'VariableRead', 'Literal']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
825,825,public TYPE_1 METHOD_1 ( int position ) { return position < ( VAR_1 . size ( ) ) ? VAR_1 . get ( position ) : null ; },public TYPE_1 METHOD_1 ( int position ) { return position < ( VAR_1 . size ( ) ) ? METHOD_1 ( position ) : null ; },"['Update Invocation', 'Update TypeAccess']",1096,['Update Invocation'],"['Invocation', 'TypeAccess']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
826,826,private void METHOD_1 ( ) { if ( ( ( VAR_1 ) >= INT_1 ) && ( ! ( TYPE_1 . METHOD_2 ( ) ) ) ) { VAR_1 = 0 ; VAR_2 . METHOD_3 ( false ) ; VAR_3 . METHOD_3 ( false ) ; } },private void METHOD_1 ( ) { if ( ( VAR_1 ) <= 0 ) { VAR_1 = 0 ; VAR_2 . METHOD_3 ( false ) ; VAR_3 . METHOD_3 ( false ) ; } },"['Update BinaryOperator', 'Move BinaryOperator', 'Insert Literal', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",1097,"['Update UnaryOperator', 'Update TypeAccess', 'Delete Invocation']","['BinaryOperator', 'BinaryOperator', 'Literal', 'FieldRead', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator']","['UnaryOperator', 'TypeAccess', 'Invocation']",GPT Missed Nodes,0.5,0.3333333333333333,0.125,0.18181818181818182,1,2,7
827,827,private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { METHOD_2 ( false ) ; } else if ( ( VAR_2 ) >= ( VAR_3 ) ) { METHOD_2 ( true ) ; } },private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { METHOD_2 ( false ) ; } if ( ( VAR_2 ) >= ( VAR_3 ) ) { METHOD_2 ( true ) ; } },"['Move If', 'Delete Block']",1098,['Delete If'],"['If', 'Block']",['If'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
828,828,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( VAR_3 . getId ( ) ) ) ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1099,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.125,0.2222222222222222,1,0,7
829,829,private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 != null ) && ( VAR_2 . toString ( ) . METHOD_2 ( STRING_1 ) ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . toString ( ) . METHOD_2 ( STRING_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1100,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,5
830,830,public double METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ( ( ( ( this . count ) * ( this . VAR_1 ) ) + ( this . METHOD_3 ( ) ) ) * FLOAT_1 ) ) ) / FLOAT_1 ; },public double METHOD_1 ( ) { return ( this . VAR_1 ) + ( this . METHOD_3 ( ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1101,"['Delete TypeAccess', 'Delete Invocation']","['BinaryOperator', 'BinaryOperator', 'Invocation', 'ThisAccess', 'FieldRead', 'TypeAccess', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'Invocation', 'FieldRead', 'BinaryOperator']","['TypeAccess', 'Invocation']",GPT Missed Nodes,0.4,1.0,0.16666666666666666,0.2857142857142857,2,0,10
831,831,"public void METHOD_1 ( ) { VAR_1 . assertEquals ( ( ( ( VAR_2 ) + STRING_1 ) + ( TYPE_1 . METHOD_2 ( STRING_2 , VAR_3 ) ) ) , TYPE_2 . METHOD_3 ( ( ( VAR_2 ) + STRING_3 ) , null , VAR_3 ) ) ; }","public void METHOD_1 ( ) { TYPE_2 . METHOD_3 ( ( ( VAR_2 ) + STRING_3 ) , null , VAR_3 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation']",1102,['Delete Invocation'],"['Invocation', 'TypeAccess', 'FieldRead', 'FieldRead', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'BinaryOperator', 'Invocation']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.09090909090909091,0.16666666666666669,1,0,10
832,832,public void METHOD_1 ( ) { height = 0 ; for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_1 . METHOD_2 ( ( ( height ) + ( VAR_3 ) ) ) ; height += VAR_1 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { height = 0 ; for ( TYPE_1 VAR_1 : VAR_2 ) { height += VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_2 ( height ) ; } },"['Move Invocation', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1103,"['Update Invocation', 'Update Invocation']","['Invocation', 'FieldRead', 'FieldRead', 'BinaryOperator']","['Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,2,4
833,833,private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { if ( ( VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) == null ) { VAR_3 . METHOD_5 ( VAR_2 ) ; } } },private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { VAR_3 . METHOD_5 ( VAR_2 ) ; } },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1104,"['Delete Block', 'Delete Invocation']","['Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']","['Block', 'Invocation']",GPT Missed Nodes,0.2857142857142857,1.0,0.2222222222222222,0.3636363636363636,2,0,7
834,834,public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ( ( ( new TYPE_1 ( ) . METHOD_2 ( ) ) * ( METHOD_3 ( ) ) ) - ( VAR_2 ) ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ( ( new TYPE_1 ( ) . METHOD_2 ( ) ) * ( METHOD_3 ( ) ) ) ) ; return VAR_1 ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1106,['Delete UnaryOperator'],"['BinaryOperator', 'FieldRead', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
835,835,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { VAR_2 . METHOD_2 ( ) ; } getActivity ( ) . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; getActivity ( ) . METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1107,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
836,836,public TYPE_1 METHOD_1 ( java.lang.Integer id ) { if ( id != null ) { return VAR_1 . METHOD_2 ( id ) ; } return null ; },public TYPE_1 METHOD_1 ( java.lang.Integer id ) { return VAR_1 . METHOD_2 ( id ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1108,['Delete If'],"['Return', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']",['If'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
837,837,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( ( ( java.lang.String . METHOD_2 ( java.lang.Math.round ( VAR_1 . METHOD_3 ( ) ) ) ) + STRING_1 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( java.lang.String . METHOD_2 ( java.lang.Math.round ( VAR_1 . METHOD_3 ( ) ) ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1109,['Delete VariableRead'],"['Invocation', 'FieldRead', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
838,838,"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { METHOD_1 ( VAR_1 ) ; if ( ! VAR_2 ) { VAR_3 . METHOD_2 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { METHOD_1 ( VAR_1 ) ; }","['Delete VariableRead', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1110,"['Delete Return', 'Delete Invocation']","['VariableRead', 'UnaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']","['Return', 'Invocation']",Partial Match,0.14285714285714285,0.5,0.16666666666666666,0.25,1,1,5
839,839,"public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { try { return new TYPE_1 < TYPE_2 > ( VAR_2 . delete ( VAR_1 ) , VAR_3 ) ; } catch ( TYPE_3 VAR_4 ) { return new TYPE_1 < TYPE_2 > ( VAR_5 ) ; } }",public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { try { VAR_2 . delete ( VAR_1 ) ; return new TYPE_1 < TYPE_2 > ( VAR_3 ) ; } catch ( TYPE_3 VAR_4 ) { return new TYPE_1 < TYPE_2 > ( VAR_5 ) ; } },['Move Invocation'],1111,['Delete Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,0.0,0.0,0.0,0,1,1
840,840,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1112,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
841,841,public TYPE_1 < TYPE_2 > open ( TYPE_1 < TYPE_3 > VAR_1 ) { TYPE_4 c = new TYPE_4 ( VAR_1 ) ; return VAR_2 . append ( c ) ; },public TYPE_1 < TYPE_2 > open ( TYPE_1 < TYPE_3 > VAR_1 ) { TYPE_4 c = new TYPE_4 ( VAR_1 ) ; VAR_2 . append ( c ) ; return c ; },"['Move Invocation', 'Insert VariableRead']",1113,['Insert Invocation'],"['Invocation', 'VariableRead']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
842,842,public static void main ( java.lang.String [ ] args ) { java.lang.String name = VAR_1 . getName ( ) ; TYPE_1 . METHOD_1 ( name ) ; },public static void main ( java.lang.String [ ] args ) { java.lang.String name ; VAR_1 . getName ( ) ; TYPE_1 . METHOD_1 ( name ) ; },['Move Invocation'],1114,"['Delete Invocation', 'Insert LocalVariable']",['Invocation'],"['Invocation', 'LocalVariable']",GPT Hallucinated Nodes,0.5,0.0,0.0,0.0,0,2,1
843,843,public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { label . METHOD_1 ( VAR_1 ) ; } else { label . METHOD_1 ( STRING_1 ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { label . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1115,"['Delete Invocation', 'Delete Invocation', 'Delete VariableRead']","['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator', 'Block', 'FieldRead', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation', 'VariableRead']",GPT Missed Nodes,0.2222222222222222,1.0,0.21428571428571427,0.35294117647058826,3,0,11
844,844,"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return java.lang.Long . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) . compareTo ( java.lang.Long . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return java.lang.Long . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . compareTo ( java.lang.Long . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) ; }",['Move Invocation'],1117,['Update Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,0.0,0.0,0.0,0,1,1
845,845,public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; } },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1118,['Delete Block'],"['Invocation', 'Invocation', 'FieldRead', 'Block', 'If']",['Block'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
846,846,public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_2 . toString ( ) ; } return STRING_1 ; },public java.lang.String METHOD_1 ( ) { return VAR_2 . toString ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",1120,"['Delete LocalVariable', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'FieldRead', 'Return']","['LocalVariable', 'Return']",Partial Match,0.14285714285714285,0.5,0.125,0.2,1,1,7
847,847,"protected void execute ( ) { if ( ! ( METHOD_1 ( ) ) ) VAR_1 . set ( VAR_2 , VAR_3 ) ; }","protected void execute ( ) { VAR_1 . set ( VAR_2 , VAR_3 ) ; }","['Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1123,['Delete Invocation'],"['Invocation', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
848,848,private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 ; VAR_2 = new TYPE_3 ( VAR_1 ) ; return new TYPE_1 ( java.lang.String . METHOD_2 ( VAR_3 . get ( STRING_1 ) ) ) ; },private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 ; VAR_2 = new TYPE_3 ( VAR_1 ) ; return new TYPE_1 ( ( ( java.lang.String ) ( VAR_3 . get ( STRING_1 ) ) ) ) ; },"['Update ConstructorCall', 'Move Invocation', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation']",1124,"['Delete Invocation', 'Insert TypeReference']","['ConstructorCall', 'Invocation', 'TypeReference', 'TypeAccess', 'Invocation']","['Invocation', 'TypeReference']",GPT Missed Nodes,0.5,1.0,0.4,0.5714285714285715,2,0,3
849,849,protected void METHOD_1 ( double output ) { if ( ! ( METHOD_2 ( ) ) ) { METHOD_3 ( output ) ; } else { METHOD_3 ( 0 ) ; } },protected void METHOD_1 ( double output ) { if ( METHOD_2 ( ) ) { METHOD_3 ( output ) ; } else { METHOD_3 ( 0 ) ; } },"['Move Invocation', 'Delete UnaryOperator']",1125,['Delete Invocation'],"['Invocation', 'UnaryOperator']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
850,850,public void METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) { if ( ( ( VAR_2 ) + 1 ) >= ( VAR_3 . length ) ) { throw new TYPE_1 ( ) ; } ( VAR_2 ) ++ ; VAR_1 = 0 ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) { if ( ( VAR_2 ) == ( VAR_3 . length ) ) { throw new TYPE_1 ( ) ; } ( VAR_2 ) ++ ; VAR_1 = 0 ; } },"['Update BinaryOperator', 'Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1126,"['Delete Assignment', 'Update Assignment']","['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator']","['Assignment', 'Assignment']",Partial Match,0.0,0.0,0.0,0.0,0,2,4
851,851,public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . setText ( VAR_1 ) ; if ( ! ( VAR_3 ) ) METHOD_2 ( ) ; VAR_4 = VAR_1 ; },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . setText ( VAR_1 ) ; METHOD_2 ( ) ; VAR_4 = VAR_1 ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1127,['Delete Invocation'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,5
852,852,"public void METHOD_1 ( ) { if ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; return ; } METHOD_3 ( ) ; METHOD_4 ( ) ; }",public void METHOD_1 ( ) { METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1128,"['Delete Block', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return']","['FieldRead', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'Return', 'Block', 'If']","['Block', 'Invocation', 'TypeAccess', 'Invocation', 'Return']",GPT Missed Nodes,0.6666666666666666,0.8,0.5,0.6153846153846154,4,1,4
853,853,public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ) ; METHOD_4 ( VAR_1 class ) ; METHOD_5 ( VAR_1 class ) ; },public void METHOD_1 ( ) { METHOD_4 ( VAR_1 class ) ; METHOD_5 ( VAR_1 class ) ; },"['Delete Invocation', 'Delete Invocation']",1131,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
854,854,public void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( false ) ; } METHOD_4 ( ) ; METHOD_3 ( true ) ; },public void METHOD_1 ( ) { METHOD_3 ( true ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Invocation']",1133,"['Delete Block', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']","['TypeAccess', 'Invocation', 'UnaryOperator', 'TypeAccess', 'Literal', 'Invocation', 'Block', 'If', 'Invocation']","['Block', 'Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation']",GPT Missed Nodes,0.5,1.0,0.6666666666666666,0.8,6,0,3
855,855,protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = false ; try { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; } } finally { VAR_2 . METHOD_4 ( ) ; } },protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = false ; try { METHOD_3 ( ) ; } finally { VAR_2 . METHOD_4 ( ) ; } },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1135,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
856,856,"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_3 ) < ( VAR_4 ) ) { return - 1 ; } else if ( ( VAR_3 ) > ( VAR_4 ) ) { return 1 ; } return 0 ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_3 ) < ( VAR_4 ) ) { return 1 ; } else if ( ( VAR_3 ) > ( VAR_4 ) ) { return - 1 ; } return 0 ; }","['Move Block', 'Move Block']",1136,"['Update UnaryOperator', 'Update UnaryOperator']","['Block', 'Block']","['UnaryOperator', 'UnaryOperator']",Partial Match,0.0,0.0,0.0,0.0,0,2,2
857,857,public static boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_1 . METHOD_2 ( STRING_1 ) ; },public static boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 . METHOD_2 ( STRING_1 ) ) { return true ; } else { return false ; } },"['Insert If', 'Move Invocation', 'Insert Block', 'Insert Block', 'Insert Return', 'Insert Return', 'Insert Literal', 'Insert Literal', 'Delete Return']",1137,"['Insert Invocation', 'Insert Return']","['If', 'Invocation', 'Block', 'Block', 'Return', 'Return', 'Literal', 'Literal', 'Return']","['Invocation', 'Return']",GPT Missed Nodes,0.4,0.5,0.1111111111111111,0.1818181818181818,1,1,8
858,858,"public java.lang.String toString ( ) { return java.lang.String.format ( STRING_1 , this . METHOD_1 ( ) , this . METHOD_2 ( ) , this . METHOD_3 ( ) , this . METHOD_4 ( ) , this . METHOD_5 ( ) ) ; }","public java.lang.String toString ( ) { return java.lang.String.format ( STRING_1 , this . METHOD_1 ( ) , this . METHOD_3 ( ) , this . METHOD_2 ( ) , this . METHOD_4 ( ) , this . METHOD_5 ( ) ) ; }",['Move Invocation'],1138,"['Move Invocation', 'Move Invocation']",['Invocation'],"['Invocation', 'Invocation']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
859,859,"public TYPE_1 METHOD_1 ( java.lang.Long VAR_1 , java.lang.String name ) { return TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( ( STRING_1 + name ) + STRING_2 ) + VAR_1 ) ) . build ( ) ; }","public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String name ) { return TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( ( STRING_1 + name ) + STRING_2 ) + VAR_1 ) ) . build ( ) ; }",['Update TypeReference'],1141,['Update TypeReference'],['TypeReference'],['TypeReference'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
860,860,public TYPE_1 METHOD_1 ( ) { return this . METHOD_2 ( ) . get ( this . METHOD_2 ( ) . size ( ) ) ; },public TYPE_1 METHOD_1 ( ) { return this . METHOD_2 ( ) . get ( ( ( this . METHOD_2 ( ) . size ( ) ) + 1 ) ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1144,"['Insert BinaryOperator', 'Insert Literal']","['BinaryOperator', 'Invocation', 'Literal']","['BinaryOperator', 'Literal']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,2,0,1
861,861,public int METHOD_1 ( int VAR_1 ) { if ( VAR_2 ) { return VAR_1 ; } if ( VAR_1 < ( VAR_3 . length ) ) { return VAR_4 [ VAR_1 ] ; } else { return 0 ; } },public int METHOD_1 ( int VAR_1 ) { if ( VAR_2 ) { return VAR_1 ; } else { if ( VAR_1 < ( VAR_3 . length ) ) { return VAR_4 [ VAR_1 ] ; } else { return 0 ; } } },"['Insert Block', 'Move If']",1145,"['Insert Return', 'Insert Return', 'Delete Return', 'Delete Return']","['Block', 'If']","['Return', 'Return', 'Return', 'Return']",Partial Match,0.0,0.0,0.0,0.0,0,4,2
862,862,public void execute ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == ( VAR_3 ) ) { TYPE_2 . METHOD_1 ( VAR_4 . remove ( value ) ) ; } else { VAR_5 . assertTrue ( VAR_4 . remove ( value ) ) ; } },public void execute ( TYPE_1 VAR_1 ) { VAR_5 . assertTrue ( VAR_4 . remove ( value ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1146,"['Delete Assignment', 'Delete Invocation']","['Invocation', 'FieldRead', 'FieldRead', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'FieldRead', 'Invocation', 'Invocation', 'Block', 'Block', 'If']","['Assignment', 'Invocation']",Partial Match,0.14285714285714285,0.5,0.08333333333333333,0.14285714285714285,1,1,11
863,863,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1147,['Delete Invocation'],"['TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
864,864,"private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( this . VAR_2 ) ) { if ( ( TYPE_2 . METHOD_2 ( this , STRING_1 ) ) == 0 ) { java.lang.System.exit ( 0 ) ; } } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . METHOD_2 ( this , STRING_1 ) ) == 0 ) { java.lang.System.exit ( 0 ) ; } }","['Move If', 'Delete ThisAccess', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1148,['Delete Invocation'],"['If', 'ThisAccess', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
865,865,"private int METHOD_1 ( ) { return VAR_1 . min ( VAR_2 , TYPE_1 . METHOD_2 ( ) ) ; }","private int METHOD_1 ( ) { return VAR_1 . min ( VAR_2 , ( ( TYPE_1 . METHOD_2 ( ) ) + 1 ) ) ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1149,['Insert UnaryOperator'],"['BinaryOperator', 'Invocation', 'Literal']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
866,866,public java.util.Set < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return new java.util.HashSet < TYPE_1 > ( ) ; return VAR_1 ; },public java.util.Set < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",1151,"['Delete LocalVariable', 'Delete Return', 'Delete Invocation', 'Delete TypeReference']","['FieldRead', 'Literal', 'BinaryOperator', 'ConstructorCall', 'Return', 'Block', 'If']","['LocalVariable', 'Return', 'Invocation', 'TypeReference']",Partial Match,0.1,0.25,0.14285714285714285,0.18181818181818182,1,3,6
867,867,"public boolean METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) { return false ; }","public boolean METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_2 == null ) return false ; return false ; }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Insert Return', 'Insert Literal']",1152,['Insert Invocation'],"['If', 'BinaryOperator', 'Block', 'VariableRead', 'Literal', 'Return', 'Literal']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
868,868,public void METHOD_1 ( android.view.View view ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( android.view.View view ) { METHOD_3 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1153,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
869,869,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) return ; VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { if ( VAR_1 ) return ; VAR_2 . METHOD_2 ( ) ; super . METHOD_1 ( ) ; },['Move Invocation'],1154,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
870,870,"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 ; int VAR_3 = METHOD_2 ( VAR_1 ) ; VAR_2 = METHOD_3 ( METHOD_4 ( VAR_3 , STRING_1 ) ) ; return VAR_2 ; }",public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 ; int VAR_3 = METHOD_2 ( VAR_1 ) ; VAR_2 = METHOD_3 ( METHOD_4 ( VAR_3 ) ) ; return VAR_2 ; },['Delete TypeAccess'],1155,['Delete VariableRead'],['TypeAccess'],['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
871,871,"public void METHOD_1 ( int index , int VAR_1 ) throws TYPE_1 , TYPE_2 { TYPE_3 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_1 ( VAR_2 . METHOD_3 ( ) . get ( index ) . VAR_4 ) ; VAR_2 . METHOD_1 ( index ) ; }","public void METHOD_1 ( int index , int VAR_1 ) throws TYPE_1 , TYPE_2 { TYPE_3 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_1 ( index ) ; VAR_3 . METHOD_1 ( VAR_2 . METHOD_3 ( ) . get ( index ) . VAR_4 ) ; }",['Move Invocation'],1156,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
872,872,public double METHOD_1 ( ) { return ( ( int ) ( java.lang.Math.round ( ( ( VAR_1 ) * ( VAR_2 ) ) ) ) ) ; },public double METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",1157,"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete VariableRead']","['FieldRead', 'TypeReference', 'TypeAccess', 'FieldRead', 'BinaryOperator', 'Invocation']","['TypeAccess', 'Invocation', 'Invocation', 'Invocation', 'VariableRead', 'VariableRead']",Partial Match,0.3333333333333333,0.3333333333333333,0.3333333333333333,0.3333333333333333,2,4,4
873,873,public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; if ( ( ( VAR_2 . p ) != null ) && ( VAR_3 . METHOD_3 ( ) ) ) { VAR_4 . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1158,['Delete Block'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']",['Block'],GPT Missed Nodes,0.14285714285714285,1.0,0.1,0.18181818181818182,1,0,9
874,874,"public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( STRING_1 , 0 ) ; VAR_3 . commit ( ) ; } VAR_4 . METHOD_3 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { VAR_4 . METHOD_3 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1159,"['Delete Invocation', 'Delete Invocation']","['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'Literal', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.14285714285714285,1.0,0.18181818181818182,0.3076923076923077,2,0,9
875,875,public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_3 . METHOD_3 ( ) ) VAR_3 . METHOD_4 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1161,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
876,876,"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_1 ) ; super . METHOD_1 ( VAR_1 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }",['Move Invocation'],1163,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
877,877,public void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { METHOD_2 ( true ) ; } VAR_2 . METHOD_3 ( this ) ; },public void METHOD_1 ( ) { METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( this ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1164,['Delete Invocation'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,5
878,878,"public void METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_1 context ) { TYPE_2 . METHOD_2 ( context . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( context , VAR_2 ) ; VAR_4 . METHOD_1 ( VAR_1 , context ) ; }","public void METHOD_1 ( int VAR_1 , TYPE_1 context ) { VAR_4 . METHOD_1 ( VAR_1 , context ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1165,"['Delete Parameter', 'Delete Parameter', 'Delete Invocation', 'Delete Invocation']","['TypeReference', 'Parameter', 'TypeAccess', 'VariableRead', 'Invocation', 'Invocation', 'TypeAccess', 'VariableRead', 'VariableRead', 'Invocation']","['Parameter', 'Parameter', 'Invocation', 'Invocation']",GPT Missed Nodes,0.4,0.75,0.3,0.4285714285714285,3,1,7
879,879,public static void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( true ) ; },public static void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) . VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( true ) ; },"['Insert FieldRead', 'Move Invocation', 'Delete VariableRead']",1166,['Insert Invocation'],"['FieldRead', 'Invocation', 'VariableRead']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
880,880,"private static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) throw new TYPE_2 ( STRING_1 ) ; VAR_2 = new TYPE_3 ( VAR_3 , VAR_4 , VAR_5 ) ; }","private static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) throw new TYPE_2 ( STRING_1 ) ; VAR_2 = new TYPE_3 ( VAR_3 , VAR_5 , VAR_4 ) ; }",['Move FieldRead'],1168,['Move VariableRead'],['FieldRead'],['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
881,881,"public TYPE_1 put ( String key , TYPE_1 value ) { ( length ) ++ ; return super . put ( key , value ) ; }","public void put ( String key , TYPE_1 value ) { ( length ) ++ ; super . put ( key , value ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",1169,"['Update TypeReference', 'Delete Assignment', 'Delete FieldWrite', 'Insert TypeAccess']","['TypeReference', 'Invocation', 'Return']","['TypeReference', 'Assignment', 'FieldWrite', 'TypeAccess']",Partial Match,0.16666666666666666,0.25,0.3333333333333333,0.28571428571428575,1,3,2
882,882,"private static void METHOD_1 ( ) { VAR_1 = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { VAR_4 . put ( VAR_5 . getName ( ) . toLowerCase ( ) , VAR_2 ) ; } }","private static void METHOD_1 ( ) { VAR_1 = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { VAR_4 . put ( VAR_5 . getName ( ) , VAR_2 ) ; } }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move VariableRead', 'Delete Invocation']",1170,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
883,883,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 != null ) && ( METHOD_2 ( VAR_1 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) METHOD_2 ( VAR_1 ) ; },"['Update TypeReference', 'Insert If', 'Move BinaryOperator', 'Insert Block', 'Move Invocation', 'Delete BinaryOperator', 'Delete Return']",1172,"['Update TypeAccess', 'Delete Return', 'Insert Invocation']","['TypeReference', 'If', 'BinaryOperator', 'Block', 'Invocation', 'BinaryOperator', 'Return']","['TypeAccess', 'Return', 'Invocation']",Partial Match,0.2857142857142857,0.3333333333333333,0.14285714285714285,0.2,1,2,6
884,884,"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = TYPE_1 . METHOD_2 ( ( ( VAR_1 ) - 1 ) , 0 ) ; if ( ( VAR_1 ) == 0 ) { this . METHOD_3 ( ) ; } }","public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ( ( VAR_1 ) - 1 ) , 0 ) ; if ( ( VAR_1 ) == 0 ) { this . METHOD_3 ( ) ; } super . METHOD_1 ( ) ; }",['Move Invocation'],1174,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
885,885,public TYPE_1 get ( java.lang.String id ) { if ( VAR_1 . startsWith ( STRING_1 ) ) { return VAR_2 . get ( id ) ; } else { return VAR_2 . get ( ( STRING_1 + id ) ) ; } },public TYPE_1 get ( java.lang.String id ) { return VAR_2 . get ( id ) ; },"['Move Return', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1175,['Delete Invocation'],"['Return', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'TypeAccess', 'FieldRead', 'VariableRead', 'BinaryOperator', 'Invocation', 'Return', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.125,1.0,0.07692307692307693,0.14285714285714288,1,0,12
886,886,"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( new android.content.Intent ( METHOD_4 ( ) , VAR_3 class ) ) ; METHOD_5 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . METHOD_2 ( ) ; METHOD_5 ( ) ; METHOD_3 ( new android.content.Intent ( METHOD_4 ( ) , VAR_3 class ) ) ; }",['Move Invocation'],1176,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
887,887,public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 != null ) { return VAR_2 . getName ( ) ; } return STRING_1 ; },public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 != null ) { VAR_2 . getName ( ) ; } return STRING_1 ; },"['Move Invocation', 'Delete Return']",1177,['Delete Return'],"['Invocation', 'Return']",['Return'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
888,888,public void METHOD_1 ( java.lang.String name ) { if ( name != null ) this . fileName = TYPE_1 . METHOD_2 ( name ) . METHOD_3 ( ) ; },public void METHOD_1 ( java.lang.String name ) { if ( name != null ) this . fileName = name . METHOD_3 ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1178,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess']",Exact Match,1.0,1.0,0.5,0.6666666666666666,2,0,2
889,889,"public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; METHOD_3 ( ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; },"['Delete ThisAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1179,['Delete Invocation'],"['ThisAccess', 'FieldRead', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
890,890,"private void METHOD_1 ( ) throws java.lang.Exception , TYPE_1 , TYPE_2 { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }","private void METHOD_1 ( ) throws java.lang.Exception , TYPE_1 , TYPE_2 { METHOD_3 ( ) ; METHOD_2 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }",['Move Invocation'],1181,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
891,891,"public void METHOD_1 ( int time ) { TYPE_1 . METHOD_2 ( STRING_1 , java.lang.Integer.toString ( time ) ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( time ) ; } }",public void METHOD_1 ( int time ) { VAR_1 . METHOD_1 ( time ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1183,"['Delete Invocation', 'Delete Invocation', 'Delete TypeAccess']","['Invocation', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'VariableRead', 'Invocation', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']","['Invocation', 'Invocation', 'TypeAccess']",GPT Missed Nodes,0.25,1.0,0.25,0.4,3,0,9
892,892,public boolean METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) > ( VAR_2 ) ) { return true ; } return false ; },public boolean METHOD_1 ( ) { if ( ( ( VAR_1 . size ( ) ) - 1 ) > ( VAR_2 ) ) { return true ; } return false ; },"['Insert BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Insert Literal']",1184,"['Insert BinaryOperator', 'Insert LocalVariable']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'Literal']","['BinaryOperator', 'LocalVariable']",Partial Match,0.25,0.5,0.2,0.28571428571428575,1,1,4
893,893,private java.lang.Object METHOD_1 ( final java.lang.String fileName ) { return this . VAR_1 [ ( ( java.lang.Math.abs ( fileName . METHOD_2 ( ) ) ) % ( VAR_2 ) ) ] ; },private java.lang.Object METHOD_1 ( final java.lang.String fileName ) { return this . VAR_1 [ ( ( fileName . METHOD_2 ( ) ) % ( VAR_2 ) ) ] ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1185,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
894,894,public void METHOD_1 ( ) { if ( null != ( VAR_1 ) ) VAR_1 . METHOD_2 ( false ) ; if ( null != ( VAR_2 ) ) VAR_2 . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Move Invocation', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1186,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'Invocation', 'Literal', 'FieldRead', 'BinaryOperator', 'Block', 'If', 'Literal', 'FieldRead', 'BinaryOperator', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,2,12
895,895,public boolean METHOD_1 ( ) { return ( super . METHOD_1 ( ) ) || ( VAR_1 . METHOD_1 ( ) ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_1 ( ) ; },"['Update TypeReference', 'Move Invocation', 'Move Invocation', 'Delete BinaryOperator', 'Delete Return']",1187,"['Update Wra', 'Update Return']","['TypeReference', 'Invocation', 'Invocation', 'BinaryOperator', 'Return']","['Wra', 'Return']",Partial Match,0.2,0.0,0.0,0.0,0,2,5
896,896,"public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_2 . METHOD_1 ( VAR_2 , VAR_1 ) ; }",public static TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_1 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1189,"['Delete Parameter', 'Delete Invocation']","['TypeReference', 'Parameter', 'VariableRead']","['Parameter', 'Invocation']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
897,897,"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_2 , STRING_2 , VAR_3 ) . show ( ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1190,"['Delete Invocation', 'Delete Invocation']","['TypeAccess', 'TypeAccess', 'VariableRead', 'Invocation', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,2,0,8
898,898,public void METHOD_1 ( float VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( float VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Invocation']",1191,['Insert Invocation'],"['If', 'BinaryOperator', 'Block', 'FieldRead', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
899,899,public TYPE_1 getView ( ) { this . METHOD_1 ( ) ; return this . VAR_1 . getView ( ) ; },public TYPE_1 getView ( ) { this . VAR_1 . start ( ) ; return this . VAR_1 . getView ( ) ; },"['Update Invocation', 'Insert FieldRead', 'Move ThisAccess']",1193,['Update Invocation'],"['Invocation', 'FieldRead', 'ThisAccess']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
900,900,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) instanceof TYPE_2 ) TYPE_3 . METHOD_2 ( new TYPE_4 ( VAR_1 ) , ( ( TYPE_2 ) ( VAR_2 ) ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_3 . METHOD_2 ( new TYPE_4 ( VAR_1 ) , ( ( TYPE_2 ) ( VAR_2 ) ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1194,['Delete Invocation'],"['Invocation', 'FieldRead', 'TypeAccess', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
901,901,"public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_3 VAR_2 = VAR_3 class . METHOD_2 ( VAR_1 ) ; return VAR_4 . METHOD_3 ( ) . METHOD_4 ( VAR_5 . get ( ) . toString ( ) , VAR_2 ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_3 VAR_2 = VAR_3 class . METHOD_2 ( VAR_1 ) ; return VAR_4 . METHOD_3 ( ) . METHOD_4 ( VAR_5 . toString ( ) , VAR_2 ) ; }","['Update Invocation', 'Move Invocation', 'Move Invocation', 'Update Invocation', 'Move VariableRead', 'Delete Invocation']",1195,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'Invocation', 'VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.16666666666666666,0.2857142857142857,1,0,5
902,902,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( ( VAR_1 == null ) || ( VAR_3 . contains ( VAR_2 ) ) ) { return false ; } VAR_3 . add ( VAR_2 ) ; return true ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( ( VAR_3 . contains ( VAR_2 ) ) || ( VAR_1 == null ) ) { return false ; } VAR_3 . add ( VAR_2 ) ; return true ; },['Move BinaryOperator'],1196,['Move Invocation'],['BinaryOperator'],['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
903,903,public void METHOD_1 ( ) { VAR_1 . setText ( STRING_1 ) ; VAR_2 . setText ( STRING_1 ) ; VAR_3 . setText ( STRING_1 ) ; VAR_4 . setText ( STRING_1 ) ; VAR_5 . setText ( STRING_1 ) ; },public void METHOD_1 ( ) { VAR_3 . setText ( STRING_1 ) ; VAR_1 . setText ( STRING_1 ) ; VAR_2 . setText ( STRING_1 ) ; VAR_4 . setText ( STRING_1 ) ; VAR_5 . setText ( STRING_1 ) ; },['Move Invocation'],1198,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
904,904,"protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 ) . METHOD_3 ( STRING_4 ) . METHOD_3 ( STRING_5 ) . METHOD_3 ( STRING_6 ) . METHOD_3 ( STRING_2 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 ) . METHOD_3 ( STRING_4 ) . METHOD_3 ( STRING_2 ) ; }","['Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1199,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,2,0,4
905,905,"public void METHOD_1 ( ) { if ( ! ( VAR_1 . equals ( VAR_2 . get ( token ) ) ) ) return ; VAR_2 . remove ( token ) ; VAR_3 . METHOD_2 ( token , VAR_4 ) ; }","public void METHOD_1 ( ) { if ( VAR_2 . get ( token ) . equals ( url ) ) return ; VAR_2 . remove ( token ) ; VAR_3 . METHOD_2 ( token , VAR_4 ) ; }","['Move Invocation', 'Insert FieldRead', 'Delete TypeAccess', 'Delete UnaryOperator']",1200,"['Delete Invocation', 'Insert Invocation']","['Invocation', 'FieldRead', 'TypeAccess', 'UnaryOperator']","['Invocation', 'Invocation']",GPT Missed Nodes,0.25,0.0,0.0,0.0,0,2,4
906,906,"public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { ( ( TYPE_2 ) ( METHOD_2 ( VAR_2 ) ) ) . show ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1201,['Delete Invocation'],"['TypeReference', 'TypeAccess', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
907,907,"public final TYPE_1 METHOD_1 ( final int VAR_1 , float VAR_2 ) { return METHOD_2 ( METHOD_3 ( ( VAR_1 + INT_1 ) ) , METHOD_4 ( VAR_2 ) ) ; }","public final TYPE_1 METHOD_1 ( final int VAR_1 , float VAR_2 ) { return METHOD_2 ( METHOD_3 ( VAR_1 ) , METHOD_4 ( VAR_2 ) ) ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",1202,"['Delete Invocation', 'Delete TypeAccess']","['VariableRead', 'FieldRead', 'BinaryOperator']","['Invocation', 'TypeAccess']",Partial Match,0.0,0.0,0.0,0.0,0,2,3
908,908,"public java.util.List < TYPE_1 > query ( TYPE_1 VAR_1 ) { try { return TYPE_2 . METHOD_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 . getName ( ) , VAR_1 . METHOD_3 ( ) ) ; } catch ( TYPE_3 VAR_4 ) { } return null ; }","public java.util.List < TYPE_1 > query ( TYPE_1 VAR_1 ) { try { TYPE_2 . METHOD_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 . getName ( ) , VAR_1 . METHOD_3 ( ) ) ; } catch ( TYPE_3 VAR_4 ) { } return null ; }","['Move Invocation', 'Delete Return']",1203,['Delete Invocation'],"['Invocation', 'Return']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
909,909,"public double METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 , METHOD_3 ( ) ) ; }",public double METHOD_1 ( ) { return ( VAR_1 ) / ( METHOD_3 ( ) ) ; },"['Insert BinaryOperator', 'Insert FieldRead', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1206,"['Delete TypeAccess', 'Delete Invocation', 'Insert VariableRead', 'Insert Invocation']","['BinaryOperator', 'FieldRead', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation', 'VariableRead', 'Invocation']",Partial Match,0.4,0.5,0.3333333333333333,0.4,2,2,4
910,910,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( 1 ) ; TYPE_2 . METHOD_4 ( STRING_1 ) ; VAR_3 . METHOD_5 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; TYPE_2 . METHOD_4 ( STRING_1 ) ; VAR_1 . METHOD_3 ( 1 ) ; VAR_3 . METHOD_5 ( ) ; },['Move Invocation'],1208,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
911,911,public void METHOD_1 ( final long VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) ; },public void METHOD_1 ( final long VAR_1 ) { VAR_2 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1209,['Delete Wra'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
912,912,"private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 . getText ( ) , VAR_4 . getText ( ) , VAR_5 . getText ( ) ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . getText ( ) , VAR_4 . getText ( ) , VAR_5 . getText ( ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1210,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
913,913,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; if ( ( VAR_3 ) == true ) { METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; METHOD_5 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1211,"['Delete Return', 'Delete Invocation']","['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Invocation', 'Block', 'Block', 'If']","['Return', 'Invocation']",Partial Match,0.14285714285714285,0.5,0.125,0.2,1,1,7
914,914,"private boolean METHOD_1 ( java.lang.String path , java.util.List < java.lang.String > list , boolean VAR_1 ) { for ( java.lang.String pattern : list ) { if ( METHOD_2 ( pattern , path , VAR_1 ) ) { return true ; } } return false ; }","private boolean METHOD_1 ( java.lang.String path , java.util.List < java.lang.String > list , boolean VAR_1 ) { for ( java.lang.String pattern : list ) { return METHOD_2 ( pattern , path , VAR_1 ) ; } return false ; }","['Insert Return', 'Move Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1212,['Delete Invocation'],"['Return', 'Invocation', 'Literal', 'Return', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,6
915,915,public void METHOD_1 ( TYPE_1 key ) { synchronized ( this ) { this . key = key ; METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 key ) { this . key = key ; synchronized ( this ) { METHOD_2 ( ) ; } },['Move Assignment'],1214,['Move Invocation'],['Assignment'],['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
916,916,protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = VAR_3 . getString ( STRING_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 . getString ( STRING_1 ) ; super . METHOD_1 ( VAR_1 ) ; },['Move Invocation'],1215,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
917,917,public static java.util.Collection < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) < 1 ) { VAR_1 . add ( VAR_2 ) ; } return TYPE_2 ; },public static java.util.Collection < TYPE_1 > METHOD_1 ( ) { return java.util.Arrays.asList ( VAR_2 ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete FieldRead']",1216,"['Delete Block', 'Delete Invocation', 'Insert Invocation']","['Invocation', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If', 'FieldRead']","['Block', 'Invocation', 'Invocation']",GPT Missed Nodes,0.2857142857142857,1.0,0.25,0.4,3,0,9
918,918,"public TYPE_1 < java.lang.Boolean > replace ( java.lang.String key , int VAR_1 , java.lang.Object VAR_2 ) { if ( METHOD_1 ( ) ) { return VAR_3 . replace ( key , VAR_1 , VAR_2 ) ; } return TYPE_2 . METHOD_2 ( false ) ; }","public TYPE_1 < java.lang.Boolean > replace ( java.lang.String key , int VAR_1 , java.lang.Object VAR_2 ) { return VAR_3 . replace ( key , VAR_1 , VAR_2 ) ; }","['Move Return', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Return']",1217,['Delete Invocation'],"['Return', 'Invocation', 'Block', 'If', 'TypeAccess', 'Literal', 'Invocation', 'Return']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
919,919,"public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 ) { java.util.Map result = METHOD_2 ( METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 ) , TYPE_1 . METHOD_4 ( VAR_2 ) , VAR_3 ) ) ; return METHOD_5 ( result ) ; }","public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 ) { java.util.Map result = METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return METHOD_5 ( result ) ; }","['Move VariableRead', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",1218,"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']","['VariableRead', 'VariableRead', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation', 'TypeAccess', 'Invocation']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,4,0,2
920,920,protected boolean METHOD_1 ( ) { java.io.File path = METHOD_2 ( VAR_1 ) ; if ( path != null ) { return path . METHOD_3 ( ) ; } else { return false ; } },protected boolean METHOD_1 ( ) { java.io.File path = METHOD_2 ( VAR_1 ) ; return path . METHOD_3 ( ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1219,['Delete Return'],"['Return', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.1111111111111111,0.19999999999999998,1,0,8
921,921,void init ( ) { if ( ( ! ( VAR_1 . METHOD_1 ( ) ) ) || ( VAR_2 ) ) { VAR_3 . METHOD_2 ( 0 ) ; VAR_4 . setText ( STRING_1 ) ; VAR_5 . setText ( STRING_1 ) ; } METHOD_3 ( ) ; },void init ( ) { VAR_3 . METHOD_2 ( 0 ) ; VAR_4 . setText ( STRING_1 ) ; VAR_5 . setText ( STRING_1 ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1220,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1,0.18181818181818182,1,0,9
922,922,public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 ) ; },['Update TypeAccess'],1224,['Delete TypeAccess'],['TypeAccess'],['TypeAccess'],Exact Match,1.0,0.0,0.0,0.0,0,1,1
923,923,private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { VAR_3 . METHOD_2 ( ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1225,['Delete Invocation'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,5
924,924,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) VAR_2 . METHOD_2 ( ) ; VAR_3 = false ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( VAR_1 ) ) { VAR_2 . METHOD_2 ( ) ; VAR_3 = false ; } },"['Insert UnaryOperator', 'Move FieldRead', 'Move Assignment']",1226,"['Insert UnaryOperator', 'Insert If', 'Delete If']","['UnaryOperator', 'FieldRead', 'Assignment']","['UnaryOperator', 'If', 'If']",Partial Match,0.25,0.3333333333333333,0.3333333333333333,0.3333333333333333,1,2,2
925,925,"TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_4 , java.lang.Long VAR_5 , int VAR_6 ) ;","TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_2 , java.lang.String VAR_1 , TYPE_3 VAR_3 , TYPE_3 VAR_4 , java.lang.Long VAR_5 , int VAR_6 ) ;",['Move Parameter'],1227,"['Move Parameter', 'Move Parameter']",['Parameter'],"['Parameter', 'Parameter']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
926,926,public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( ( VAR_2 . equals ( STRING_1 ) ) || ( VAR_2 . equals ( STRING_2 ) ) ) || ( VAR_2 . equals ( STRING_3 ) ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_2 . equals ( STRING_1 ) ) || ( VAR_2 . equals ( STRING_2 ) ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",1228,['Delete BinaryOperator'],"['BinaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
927,927,public void init ( ) throws java.lang.Exception { VAR_1 . info ( STRING_1 ) ; super . init ( ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; },public void init ( ) throws java.lang.Exception { VAR_1 . info ( STRING_1 ) ; super . init ( ) ; METHOD_4 ( ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; },['Move Invocation'],1230,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
928,928,"public void METHOD_1 ( int position , boolean VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( position ) ; METHOD_4 ( position ) ; VAR_2 = position ; if ( VAR_1 ) METHOD_5 ( position ) ; }",public void METHOD_1 ( int position ) { METHOD_2 ( ) ; METHOD_3 ( position ) ; METHOD_4 ( position ) ; VAR_2 = position ; METHOD_5 ( position ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Block', 'Delete If']",1231,"['Delete Parameter', 'Delete VariableRead']","['Invocation', 'TypeReference', 'Parameter', 'VariableRead', 'Block', 'If']","['Parameter', 'VariableRead']",GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,2,0,4
929,929,public TYPE_1 METHOD_1 ( java.lang.String title ) { return VAR_1 . METHOD_1 ( title ) ; },public void METHOD_1 ( java.lang.String title ) { VAR_1 . METHOD_1 ( title ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",1232,"['Update TypeAccess', 'Delete Return']","['TypeReference', 'Invocation', 'Return']","['TypeAccess', 'Return']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
930,930,public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . contains ( VAR_1 ) ) VAR_2 . remove ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . remove ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1233,['Delete Invocation'],"['Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
931,931,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { return false ; } return true ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) { return true ; } return false ; },"['Move Return', 'Insert UnaryOperator', 'Move Invocation', 'Move Return']",1234,"['Insert UnaryOperator', 'Update Return', 'Update Return']","['Return', 'UnaryOperator', 'Invocation', 'Return']","['UnaryOperator', 'Return', 'Return']",GPT Missed Nodes,0.6666666666666666,0.3333333333333333,0.25,0.28571428571428575,1,2,3
932,932,public java.lang.String METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { return null ; } return VAR_1 ; },public java.lang.String METHOD_1 ( ) { return VAR_1 ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1235,"['Delete If', 'Delete Return']","['TypeAccess', 'TypeAccess', 'Invocation', 'Literal', 'Return', 'Block', 'If']","['If', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.2857142857142857,0.4444444444444445,2,0,5
933,933,public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this ) ; if ( ( ! ( VAR_2 ) ) && ( ( VAR_3 ) > 0 ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this ) ; if ( ! ( VAR_2 ) ) { METHOD_3 ( ) ; } },"['Move UnaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1236,"['Delete UnaryOperator', 'Delete Invocation']","['UnaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']","['UnaryOperator', 'Invocation']",Partial Match,0.2,0.0,0.0,0.0,0,2,5
934,934,public void METHOD_1 ( ) { if ( VAR_1 . equals ( STRING_1 ) ) { VAR_2 . info ( STRING_2 ) ; } METHOD_2 ( ) . METHOD_3 ( null ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( null ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1237,['Delete Invocation'],"['TypeAccess', 'TypeAccess', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.125,0.2222222222222222,1,0,7
935,935,"public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( VAR_1 , this ) ; VAR_1 . METHOD_4 ( ) ; } VAR_2 = false ; METHOD_5 ( ) ; METHOD_6 ( ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_3 ( VAR_1 , this ) ; if ( VAR_1 . METHOD_2 ( ) ) VAR_1 . METHOD_4 ( ) ; VAR_2 = false ; METHOD_5 ( ) ; METHOD_6 ( ) ; }",['Move Invocation'],1238,"['Move Invocation', 'Move Invocation', 'Delete Block']",['Invocation'],"['Invocation', 'Invocation', 'Block']",GPT Hallucinated Nodes,0.5,0.3333333333333333,1.0,0.5,1,2,0
936,936,"private static java.lang.String METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 , java.lang.String VAR_4 ) { java.lang.String VAR_5 = STRING_1 ; return java.lang.String.format ( VAR_5 , VAR_1 , VAR_2 , VAR_3 , VAR_6 . replace ( STRING_2 , STRING_3 ) ) ; }","private static java.lang.String METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 , java.lang.String VAR_4 ) { java.lang.String VAR_5 = STRING_1 ; return java.lang.String.format ( VAR_5 , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1240,"['Update VariableRead', 'Delete Invocation']","['VariableRead', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation']","['VariableRead', 'Invocation']",GPT Missed Nodes,0.6666666666666666,0.5,0.2,0.28571428571428575,1,1,4
937,937,public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; TYPE_2 VAR_3 = METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_3 ) ; return VAR_4 . getName ( ) ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; TYPE_2 VAR_3 = METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_3 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_4 . getName ( ) ; },['Move Invocation'],1241,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
938,938,private java.lang.String METHOD_1 ( int src ) { boolean VAR_1 = src <= INT_1 ; if ( ( src % INT_2 ) == 0 ) { return STRING_1 ; } else { return VAR_2 [ ( src % INT_2 ) ] ; } },private java.lang.String METHOD_1 ( int src ) { boolean VAR_1 = src <= INT_1 ; if ( src == 0 ) { return STRING_1 ; } else { return VAR_2 [ ( src % INT_2 ) ] ; } },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Literal', 'Delete FieldRead', 'Delete BinaryOperator']",1243,['Update Invocation'],"['BinaryOperator', 'BinaryOperator', 'Literal', 'FieldRead', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
939,939,"public void METHOD_1 ( java.lang.Integer VAR_1 , java.lang.String VAR_2 ) { java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_1 ( null ) ; } }","public void METHOD_1 ( java.lang.Integer VAR_1 , java.lang.String VAR_2 ) { java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) ) ; VAR_3 . METHOD_1 ( null ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1244,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
940,940,"private void METHOD_1 ( ) { if ( METHOD_2 ( ) . METHOD_3 ( ) ) METHOD_2 ( ) . METHOD_4 ( ) . METHOD_5 ( STRING_1 , VAR_1 ) ; }","private void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_4 ( ) . METHOD_5 ( STRING_1 , VAR_1 ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1245,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
941,941,public void METHOD_1 ( TYPE_1 < java.util.List < TYPE_2 > > response ) { if ( ( response . METHOD_2 ( ) ) != null ) VAR_1 . METHOD_3 ( response . METHOD_2 ( ) ) ; else VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 < java.util.List < TYPE_2 > > response ) { VAR_1 . METHOD_3 ( response . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1246,"['Delete Return', 'Delete Invocation']","['Invocation', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'Invocation', 'Block', 'If']","['Return', 'Invocation']",Partial Match,0.125,0.5,0.1,0.16666666666666669,1,1,9
942,942,public int METHOD_1 ( ) { if ( ( METHOD_2 ( ) . length ( ) ) > 0 ) return METHOD_2 ( ) . length ( ) ; else return VAR_1 . length ( ) ; },public int METHOD_1 ( ) { return METHOD_2 ( ) . length ( ) ; },"['Move Return', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1248,"['Delete Block', 'Delete Return']","['Return', 'Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'Invocation', 'Return', 'Block', 'If']","['Block', 'Return']",GPT Missed Nodes,0.2857142857142857,1.0,0.18181818181818182,0.3076923076923077,2,0,9
943,943,public boolean METHOD_1 ( ) { if ( VAR_1 ) { return true ; } else { return false ; } },public boolean METHOD_1 ( ) { return VAR_1 ; },"['Insert Return', 'Move FieldRead', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1250,"['Delete Return', 'Delete Return', 'Delete Wra']","['Return', 'FieldRead', 'Literal', 'Return', 'Block', 'Literal', 'Return', 'Block', 'If']","['Return', 'Return', 'Wra']",Partial Match,0.16666666666666666,0.6666666666666666,0.2222222222222222,0.3333333333333333,2,1,7
944,944,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( METHOD_2 ( ) ) != ( VAR_1 ) ) { return ; } METHOD_3 ( ) ; METHOD_4 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( ) ; },"['Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Invocation']",1251,"['Delete Block', 'Delete Return', 'Delete Invocation']","['Invocation', 'FieldRead', 'BinaryOperator', 'Return', 'Block', 'If', 'Invocation']","['Block', 'Return', 'Invocation']",GPT Missed Nodes,0.5,1.0,0.42857142857142855,0.6,3,0,4
945,945,public void METHOD_1 ( final java.lang.CharSequence title ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( title ) ; } },public void METHOD_1 ( final java.lang.CharSequence title ) { VAR_1 . METHOD_1 ( title ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1254,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
946,946,public void METHOD_1 ( java.lang.Throwable VAR_1 ) { if ( ( view ) != null ) { view . METHOD_2 ( false ) ; view . METHOD_1 ( VAR_1 . METHOD_3 ( ) ) ; } },public void METHOD_1 ( java.lang.Throwable VAR_1 ) { view . METHOD_2 ( false ) ; view . METHOD_1 ( VAR_1 . METHOD_3 ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1256,['Delete Invocation'],"['Invocation', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,7
947,947,public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_1 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } },public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1257,['Delete Block'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']",['Block'],GPT Missed Nodes,0.14285714285714285,1.0,0.14285714285714285,0.25,1,0,6
948,948,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . getView ( ) . METHOD_2 ( ) ) > 0 ) { METHOD_3 ( new TYPE_2 ( ) ) ; METHOD_3 ( new TYPE_3 ( VAR_3 ) ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( new TYPE_2 ( ) ) ; METHOD_3 ( new TYPE_3 ( VAR_3 ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1258,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.1111111111111111,0.19999999999999998,1,0,8
949,949,public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) VAR_1 . METHOD_3 ( 0.0 ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_3 ( 0.0 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1259,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
950,950,public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Insert Block', 'Move Invocation']",1260,['Delete EmptyStatement'],"['Block', 'Invocation']",['EmptyStatement'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
951,951,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ( VAR_2 + VAR_3 ) ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( VAR_2 + VAR_3 ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1262,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
952,952,"public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_2 . METHOD_2 ( false , true ) ) ) { VAR_1 . METHOD_3 ( ) ; } }",public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; } },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Literal', 'Delete Invocation', 'Delete BinaryOperator']",1263,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'Literal', 'Literal', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
953,953,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( ! ( VAR_1 . METHOD_2 ( ) ) ) || ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } },"['Move UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",1264,['Delete Invocation'],"['UnaryOperator', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
954,954,"public void METHOD_1 ( int x , int y ) { TYPE_1 VAR_1 = METHOD_2 ( x , y ) ; if ( VAR_1 != null ) { if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( ) ; } } }","public void METHOD_1 ( int x , int y ) { TYPE_1 VAR_1 = METHOD_2 ( x , y ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_4 ( ) ; } }","['Move If', 'Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1266,"['Delete IfStatement', 'Delete Invocation']","['If', 'BinaryOperator', 'VariableRead', 'Invocation', 'UnaryOperator', 'Block', 'If']","['IfStatement', 'Invocation']",Partial Match,0.14285714285714285,0.5,0.14285714285714285,0.22222222222222224,1,1,6
955,955,public boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 . METHOD_2 ( ) ) { if ( VAR_2 . METHOD_3 ( ) . equals ( VAR_1 ) ) { return false ; } } return true ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 . METHOD_2 ( ) ) { if ( ( VAR_2 . METHOD_3 ( ) ) == VAR_1 ) { return false ; } } return true ; },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",1267,['Delete Invocation'],"['BinaryOperator', 'Invocation', 'VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
956,956,public java.lang.String METHOD_1 ( ) { return ( ( ( ( ( ( this . id ) + STRING_1 ) + ( this . name ) ) + STRING_1 ) + ( this . VAR_1 ) ) + STRING_1 ) + ( this . VAR_2 ) ; },public java.lang.String METHOD_1 ( ) { return ( ( ( ( this . name ) + STRING_1 ) + ( this . VAR_1 ) ) + STRING_1 ) + ( this . VAR_2 ) ; },"['Move BinaryOperator', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1268,"['Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess']","['BinaryOperator', 'FieldRead', 'FieldRead', 'FieldRead', 'FieldRead', 'ThisAccess', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']","['TypeAccess', 'TypeAccess', 'TypeAccess']",Partial Match,0.0,0.0,0.0,0.0,0,3,10
957,957,"public boolean METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ) == ( VAR_4 ) ) { VAR_5 . put ( VAR_1 , VAR_3 ) ; return true ; } return false ; }","public boolean METHOD_1 ( int VAR_1 ) { return ( VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ) == ( VAR_4 ) ; }","['Move BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",1269,"['Delete Invocation', 'Delete Return']","['BinaryOperator', 'TypeAccess', 'VariableRead', 'TypeAccess', 'Invocation', 'Literal', 'Return', 'Block', 'If', 'Literal']","['Invocation', 'Return']",GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,2,0,8
958,958,"public void set ( int y , int x , float value ) { if ( ( x <= ( VAR_1 [ 0 ] . length ) ) && ( y <= ( VAR_2 . length ) ) ) VAR_1 [ y ] [ x ] = value ; }","public void set ( int x , int y , float value ) { if ( ( x <= ( VAR_2 . length ) ) && ( y <= ( VAR_1 [ 0 ] . length ) ) ) VAR_1 [ x ] [ y ] = value ; }","['Move Parameter', 'Move BinaryOperator', 'Move VariableRead', 'Move VariableRead', 'Move VariableRead', 'Move VariableRead']",1270,"['Update LocalVariable', 'Update LocalVariable', 'Update Assignment', 'Update Assignment']","['Parameter', 'BinaryOperator', 'VariableRead', 'VariableRead', 'VariableRead', 'VariableRead']","['LocalVariable', 'LocalVariable', 'Assignment', 'Assignment']",Partial Match,0.0,0.0,0.0,0.0,0,4,6
959,959,public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( ) - > { if ( ( TYPE_1 . METHOD_3 ( ) ) != null ) TYPE_1 . METHOD_4 ( ) ; } ) ; },public void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_3 ( ) ) != null ) TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; },"['Insert Invocation', 'Update Invocation', 'Move Invocation']",1271,"['Delete Invocation', 'Insert Invocation']","['Invocation', 'Invocation', 'Invocation']","['Invocation', 'Invocation']",Exact Match,1.0,0.5,0.3333333333333333,0.4,1,1,2
960,960,"public void METHOD_1 ( TYPE_1 view , java.lang.String url ) { TYPE_2 . METHOD_2 ( VAR_1 , ( url + STRING_1 ) ) ; if ( ! ( VAR_2 ) ) view . METHOD_3 ( VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 view , java.lang.String url ) { TYPE_2 . METHOD_2 ( VAR_1 , ( url + STRING_1 ) ) ; view . METHOD_3 ( VAR_3 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1272,['Delete Invocation'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,5
961,961,public java.lang.String delete ( TYPE_1 VAR_1 ) throws TYPE_2 { return STRING_1 + ( VAR_2 . delete ( VAR_1 ) ) ; },public int delete ( TYPE_1 VAR_1 ) throws TYPE_2 { return VAR_2 . delete ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1273,"['Update TypeReference', 'Delete TypeReference', 'Delete VariableRead']","['TypeReference', 'Invocation', 'FieldRead', 'BinaryOperator']","['TypeReference', 'TypeReference', 'VariableRead']",Partial Match,0.2,0.3333333333333333,0.25,0.28571428571428575,1,2,3
962,962,public java.util.Date METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { return null ; } return new java.util.Date ( VAR_2 . getTime ( ) ) ; },public java.util.Date METHOD_1 ( ) { return VAR_1 ; },"['Insert FieldRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall']",1274,"['Delete Return', 'Delete Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']","['FieldRead', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If', 'TypeAccess', 'Invocation', 'ConstructorCall']","['Return', 'Return', 'TypeAccess', 'Invocation', 'Invocation']",GPT Missed Nodes,0.3,0.6,0.25,0.35294117647058826,3,2,9
963,963,public java.lang.String getText ( ) { if ( ! ( this . VAR_1 . getText ( ) . equals ( this . VAR_2 ) ) ) { return this . VAR_1 . getText ( ) ; } else { return STRING_1 ; } },public java.lang.String getText ( ) { return this . VAR_1 . getText ( ) ; },"['Move Return', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1275,"['Delete Return', 'Delete Return']","['Return', 'ThisAccess', 'FieldRead', 'Invocation', 'ThisAccess', 'FieldRead', 'Invocation', 'UnaryOperator', 'Block', 'FieldRead', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.14285714285714285,0.5,0.07692307692307693,0.13333333333333336,1,1,12
964,964,public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { return null ; } else { VAR_1 . METHOD_3 ( true ) ; return this . VAR_2 . METHOD_1 ( VAR_1 ) ; } },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return this . VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Return', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",1276,"['Delete Return', 'Delete Invocation']","['Return', 'VariableRead', 'Invocation', 'Literal', 'Return', 'Block', 'VariableRead', 'Literal', 'Invocation', 'Block', 'If']","['Return', 'Invocation']",GPT Missed Nodes,0.3333333333333333,1.0,0.18181818181818182,0.3076923076923077,2,0,9
965,965,public boolean METHOD_1 ( java.lang.String name ) { for ( java.lang.String n : VAR_1 ) if ( ( n != null ) && ( VAR_2 . equals ( name ) ) ) return true ; return false ; },public boolean METHOD_1 ( java.lang.String name ) { for ( java.lang.String n : VAR_1 ) if ( VAR_2 . equals ( name ) ) return true ; return false ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1277,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,5
966,966,"private static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( TYPE_2 . METHOD_2 ( ""id"" , STRING_1 , STRING_2 , STRING_3 , STRING_4 ) , STRING_5 ) ; }","private static java.lang.String METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( ""id"" , STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete FieldRead', 'Delete ConstructorCall']",1278,"['Update TypeReference', 'Delete Invocation', 'Delete TypeAccess']","['TypeReference', 'Invocation', 'FieldRead', 'ConstructorCall']","['TypeReference', 'Invocation', 'TypeAccess']",Partial Match,0.4,0.3333333333333333,0.25,0.28571428571428575,1,2,3
967,967,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; this . VAR_1 . METHOD_2 ( main . METHOD_3 ( ) ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete Invocation']",1279,"['Delete TypeAccess', 'Delete Invocation']","['TypeAccess', 'ThisAccess', 'FieldRead', 'FieldRead', 'Invocation']","['TypeAccess', 'Invocation']",GPT Missed Nodes,0.5,0.5,0.2,0.28571428571428575,1,1,4
968,968,"public void METHOD_1 ( java.lang.Object target , int VAR_1 ) { if ( VAR_1 > 0 ) { ( ( TYPE_1 ) ( target ) ) . METHOD_2 ( VAR_1 ) ; } }","public void METHOD_1 ( java.lang.Object target , int VAR_1 ) { ( ( TYPE_1 ) ( target ) ) . METHOD_2 ( VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1280,['Delete UnaryOperator'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
969,969,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { METHOD_2 ( VAR_1 ) ; VAR_2 . add ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; VAR_2 . add ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1282,['Delete Invocation'],"['Invocation', 'Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,7
970,970,"public int METHOD_1 ( java.util.Map.Entry < TYPE_1 , java.lang.Integer > VAR_1 , java.util.Map.Entry < TYPE_1 , java.lang.Integer > VAR_2 ) { return VAR_3 . getValue ( ) . compareTo ( VAR_4 . getValue ( ) ) ; }","public int METHOD_1 ( java.util.Map.Entry < TYPE_1 , java.lang.Integer > VAR_1 , java.util.Map.Entry < TYPE_1 , java.lang.Integer > VAR_2 ) { return VAR_4 . getValue ( ) . compareTo ( VAR_3 . getValue ( ) ) ; }",['Move Invocation'],1283,"['Update VariableRead', 'Update VariableRead']",['Invocation'],"['VariableRead', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,1
971,971,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_3 . METHOD_5 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_3 . METHOD_5 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1287,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.14285714285714285,0.25,1,0,6
972,972,"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { VAR_1 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 ) ) + STRING_1 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1289,['Delete Invocation'],"['TypeAccess', 'FieldRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
973,973,public TYPE_1 < java.lang.String > METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { return VAR_3 . error ( new java.lang.Exception ( STRING_1 ) ) ; } return TYPE_1 . METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; },"['Update TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Return']",1290,"['Update TypeReference', 'Delete Parameter', 'Delete Invocation', 'Delete Invocation', 'Update TypeReference']","['TypeReference', 'TypeReference', 'TypeReference', 'TypeReference', 'Parameter', 'VariableRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'FieldRead', 'ConstructorCall', 'Invocation', 'Return', 'Block', 'If', 'TypeAccess', 'VariableRead', 'Invocation', 'Return']","['TypeReference', 'Parameter', 'Invocation', 'Invocation', 'TypeReference']",GPT Missed Nodes,0.25,0.8,0.21052631578947367,0.3333333333333333,4,1,15
974,974,"private int METHOD_1 ( double element ) { return TYPE_1 . METHOD_2 ( VAR_1 , element ) ; }","private int METHOD_1 ( double element ) { return ( TYPE_1 . METHOD_2 ( VAR_1 , element ) ) - 1 ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1291,['Insert BinaryOperator'],"['BinaryOperator', 'Invocation', 'Literal']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
975,975,"public java.lang.String METHOD_1 ( TYPE_1 key ) { if ( ( VAR_1 ) == null ) { return VAR_2 . METHOD_1 ( VAR_3 ) ; } else { return VAR_2 . METHOD_1 ( VAR_3 , java.lang.String . METHOD_2 ( VAR_1 ) ) ; } }","public java.lang.String METHOD_1 ( TYPE_1 key ) { if ( ( VAR_1 ) == null ) { return VAR_2 . METHOD_1 ( VAR_3 ) ; } else { return VAR_2 . METHOD_1 ( VAR_3 , ( ( java.lang.String ) ( VAR_1 ) ) ) ; } }","['Insert TypeAccess', 'Insert TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1293,"['Delete Invocation', 'Insert TypeReference']","['TypeAccess', 'TypeReference', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'TypeReference']",GPT Missed Nodes,0.6666666666666666,1.0,0.4,0.5714285714285715,2,0,3
976,976,public double METHOD_1 ( ) { return ( this . VAR_1 ) / FLOAT_1 ; },public double METHOD_1 ( ) { return this . VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1294,"['Delete TypeAccess', 'Delete Invocation']","['FieldRead', 'FieldRead', 'BinaryOperator']","['TypeAccess', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,2,3
977,977,"public java.lang.String toString ( ) { return ( STRING_1 + ( VAR_1 . replace ( STRING_2 , STRING_3 ) . replace ( STRING_1 , STRING_4 ) ) ) + STRING_1 ; }",public java.lang.String toString ( ) { return ( STRING_1 + ( value ) ) + STRING_1 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1295,"['Delete Invocation', 'Insert VariableRead']","['FieldRead', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'VariableRead']",Partial Match,0.25,0.5,0.125,0.2,1,1,7
978,978,public void METHOD_1 ( android.view.View view ) { if ( ( view != null ) && ( ( VAR_1 ) == null ) ) { VAR_1 = view ; VAR_2 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( ) ) - 1 ) ) ; } },public void METHOD_1 ( android.view.View view ) { VAR_1 = view ; VAR_2 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( ) ) - 1 ) ) ; },"['Move Assignment', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1296,['Delete Assignment'],"['Assignment', 'Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator', 'Block', 'If']",['Assignment'],GPT Missed Nodes,0.125,0.0,0.0,0.0,0,1,11
979,979,"private void METHOD_1 ( int VAR_1 , boolean VAR_2 ) { VAR_3 [ VAR_1 ] = VAR_2 ; }","private void METHOD_1 ( int VAR_1 , boolean VAR_2 ) { if ( VAR_1 != ( - 1 ) ) { VAR_3 [ VAR_1 ] = VAR_2 ; } }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert UnaryOperator', 'Move Assignment', 'Insert Literal']",1300,"['Insert BinaryOperator', 'Insert UnaryOperator']","['If', 'BinaryOperator', 'Block', 'VariableRead', 'UnaryOperator', 'Assignment', 'Literal']","['BinaryOperator', 'UnaryOperator']",GPT Missed Nodes,0.2857142857142857,1.0,0.2857142857142857,0.4444444444444445,2,0,5
980,980,public static java.lang.String METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . info ( STRING_1 ) ; } return STRING_2 ; },public static java.lang.String METHOD_1 ( ) { VAR_2 . info ( STRING_1 ) ; return STRING_2 ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1301,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
981,981,"public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) . show ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; METHOD_4 ( ) . show ( ) ; VAR_1 . METHOD_3 ( ) ; }",['Move Invocation'],1302,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
982,982,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( VAR_3 class , VAR_2 ) ; } return null ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 { return VAR_1 . METHOD_2 ( VAR_3 class , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal']",1303,"['Delete Invocation', 'Delete Return']","['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal']","['Invocation', 'Return']",Partial Match,0.14285714285714285,0.0,0.0,0.0,0,2,7
983,983,"private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( VAR_2 , VAR_3 ) ; METHOD_2 ( ) ; }",['Move Invocation'],1305,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
984,984,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( ( VAR_1 ) != null ) && ( VAR_2 ) ) { METHOD_2 ( VAR_3 ) ; this . METHOD_3 ( ) . METHOD_4 ( VAR_4 ) ; VAR_1 = null ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { METHOD_4 ( VAR_4 ) ; VAR_1 = null ; } },"['Move BinaryOperator', 'Update Invocation', 'Move TypeAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation']",1308,"['Delete Invocation', 'Delete Invocation', 'Delete Assignment']","['BinaryOperator', 'Invocation', 'TypeAccess', 'FieldRead', 'BinaryOperator', 'TypeAccess', 'ThisAccess', 'Invocation', 'Invocation']","['Invocation', 'Invocation', 'Assignment']",Partial Match,0.16666666666666666,0.6666666666666666,0.2222222222222222,0.3333333333333333,2,1,7
985,985,"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { METHOD_2 ( ) ; } TYPE_1 . METHOD_3 ( VAR_2 , STRING_1 ) ; }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_2 , STRING_1 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1309,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
986,986,public int compareTo ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) || ( ! ( VAR_3 ) ) ) && ( ( VAR_4 ) >= ( VAR_5 ) ) ) return 1 ; return - 1 ; },public int compareTo ( TYPE_1 VAR_1 ) { if ( ( VAR_4 ) >= ( VAR_5 ) ) return 1 ; return - 1 ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator']",1314,['Delete BinaryOperator'],"['BinaryOperator', 'FieldRead', 'FieldRead', 'UnaryOperator', 'BinaryOperator', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.16666666666666666,0.2857142857142857,1,0,5
987,987,public boolean METHOD_1 ( ) { return ( VAR_1 ) < ( count ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 ) < ( ( count ) - 1 ) ; },"['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",1315,"['Insert BinaryOperator', 'Insert VariableRead']","['BinaryOperator', 'FieldRead', 'Literal']","['BinaryOperator', 'VariableRead']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
988,988,"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 result = new TYPE_3 ( ) ; METHOD_1 ( VAR_1 , result ) ; return new java.lang.String ( VAR_2 . content ( ) . METHOD_2 ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 result = new TYPE_3 ( ) ; METHOD_1 ( VAR_1 , result ) ; return VAR_2 . content ( ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete ConstructorCall']",1316,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'TypeAccess', 'Invocation', 'Invocation', 'Invocation', 'ConstructorCall']","['Invocation', 'TypeAccess']",GPT Missed Nodes,0.6666666666666666,1.0,0.3333333333333333,0.5,2,0,4
989,989,"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) { return VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead']",1317,"['Delete Invocation', 'Update Return']","['Invocation', 'VariableRead']","['Invocation', 'Return']",Partial Match,0.3333333333333333,0.0,0.0,0.0,0,2,2
990,990,public void info ( java.lang.String message ) { if ( ( ( ( VAR_1 ) != null ) && ( message != null ) ) && ( ( VAR_2 . length ( ) ) > 0 ) ) VAR_1 . METHOD_1 ( message ) ; },public void info ( java.lang.String message ) { if ( ( message != null ) && ( ( VAR_2 . length ( ) ) > 0 ) ) VAR_1 . METHOD_1 ( message ) ; },"['Move BinaryOperator', 'Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1318,['Delete VariableRead'],"['BinaryOperator', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
991,991,private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . equals ( VAR_3 ) ) { return STRING_1 ; } else if ( VAR_2 . equals ( VAR_4 ) ) { return STRING_1 ; } else { return STRING_2 ; } },private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . equals ( VAR_3 ) ) { return STRING_1 ; } else { return STRING_2 ; } },"['Move If', 'Move Invocation', 'Move Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1319,"['Delete Invocation', 'Delete Return']","['If', 'Invocation', 'Block', 'TypeAccess', 'TypeAccess', 'Invocation', 'FieldRead', 'Return', 'Block', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.18181818181818182,0.3076923076923077,2,0,9
992,992,public TYPE_1 getType ( TYPE_2 < java.lang.Object > VAR_1 ) { if ( this . METHOD_1 ( ) ) return VAR_2 ; else return VAR_3 . getType ( VAR_4 class ) ; },public TYPE_1 getType ( TYPE_2 < java.lang.Object > VAR_1 ) { return VAR_3 . getType ( VAR_4 class ) ; },"['Move Return', 'Delete ThisAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1320,['Delete Invocation'],"['Return', 'ThisAccess', 'Invocation', 'FieldRead', 'Return', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
993,993,"private void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( super . getContext ( ) , VAR_2 class ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_3 ) ; METHOD_3 ( VAR_1 ) ; getActivity ( ) . METHOD_4 ( ) ; }","private void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( super . getContext ( ) , VAR_2 class ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_3 ) ; getActivity ( ) . METHOD_4 ( ) ; METHOD_3 ( VAR_1 ) ; }",['Move Invocation'],1321,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
994,994,"public void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( true , VAR_1 , VAR_2 ) ; VAR_4 . METHOD_3 ( ) ; }","public void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_4 . METHOD_3 ( ) ; VAR_3 . METHOD_2 ( true , VAR_1 , VAR_2 ) ; }",['Move Invocation'],1322,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
995,995,public boolean METHOD_1 ( ) { boolean VAR_1 = false ; try { VAR_1 = ! ( VAR_2 . METHOD_2 ( ) ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } finally { return VAR_1 ; } },public boolean METHOD_1 ( ) { boolean VAR_1 = false ; try { VAR_1 = ! ( VAR_2 . METHOD_2 ( ) ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } return VAR_1 ; },['Move Return'],1323,"['Delete Block', 'Delete Return']",['Return'],"['Block', 'Return']",GPT Hallucinated Nodes,0.5,0.0,0.0,0.0,0,2,1
996,996,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { VAR_2 . put ( VAR_1 . METHOD_3 ( ) , VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_1 . METHOD_3 ( ) , VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1325,['Delete Invocation'],"['Invocation', 'VariableRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
997,997,private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( value ) ? value : VAR_1 ; },private java.lang.String METHOD_1 ( ) { return ( value ) != null ? value : VAR_1 ; },"['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal', 'Delete TypeAccess', 'Delete Invocation']",1326,"['Delete TypeAccess', 'Delete Invocation', 'Insert VariableRead']","['BinaryOperator', 'FieldRead', 'Literal', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation', 'VariableRead']",Partial Match,0.3333333333333333,0.6666666666666666,0.4,0.5,2,1,3
998,998,public byte METHOD_1 ( int VAR_1 ) { return ( ( byte ) ( ( ( this . METHOD_2 ( VAR_1 ) ) > > INT_1 ) & INT_2 ) ) ; },public byte METHOD_1 ( int VAR_1 ) { return ( ( byte ) ( ( this . METHOD_2 ( VAR_1 ) ) > > INT_1 ) ) ; },"['Move BinaryOperator', 'Move TypeReference', 'Delete FieldRead', 'Delete BinaryOperator']",1327,['Delete BinaryOperator'],"['BinaryOperator', 'TypeReference', 'FieldRead', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
999,999,"protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; super . METHOD_1 ( VAR_1 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; }",['Move Invocation'],1328,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1000,1000,"public void METHOD_1 ( android.view.View view , int position ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( position ) ; if ( VAR_1 != null ) { VAR_3 . get ( ) . METHOD_3 ( getContext ( ) , VAR_4 , VAR_5 . title ) ; } }","public void METHOD_1 ( android.view.View view , int position ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( position ) ; VAR_3 . get ( ) . METHOD_3 ( getContext ( ) , VAR_4 , VAR_5 . title ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1329,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1001,1001,public java.util.List < java.lang.String > METHOD_1 ( ) { return VAR_1 ; },public java.util.Set < java.lang.String > METHOD_1 ( ) { return VAR_1 ; },['Update TypeReference'],1331,['Update TypeAccess'],['TypeReference'],['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1002,1002,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . getText ( ) . equals ( STRING_1 ) ) VAR_2 . setText ( STRING_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( STRING_2 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1332,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.14285714285714285,0.25,1,0,6
1003,1003,"public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 ) , METHOD_4 ( VAR_1 ) , METHOD_5 ( VAR_1 ) , METHOD_6 ( VAR_1 ) ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 ) , METHOD_5 ( VAR_1 ) , METHOD_6 ( VAR_1 ) , METHOD_4 ( VAR_1 ) ) ; }",['Move Invocation'],1334,"['Move Invocation', 'Move Invocation']",['Invocation'],"['Invocation', 'Invocation']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
1004,1004,public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { VAR_2 . METHOD_1 ( VAR_1 ) ; return TYPE_1 . METHOD_2 ( true ) ; } catch ( java.lang.Exception VAR_3 ) { return TYPE_1 . METHOD_3 ( VAR_3 ) ; } },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { return TYPE_1 . METHOD_2 ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; } catch ( java.lang.Exception VAR_3 ) { return TYPE_1 . METHOD_3 ( VAR_3 ) ; } },"['Move Invocation', 'Delete Literal']",1335,"['Delete Invocation', 'Insert Invocation']","['Invocation', 'Literal']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.0,0.0,0.0,0,2,2
1005,1005,public void METHOD_1 ( java.lang.Integer ... VAR_1 ) { VAR_2 . info ( ( STRING_1 + ( java.util.Arrays.asList ( VAR_1 ) ) ) ) ; },public void METHOD_1 ( java.lang.Integer ... VAR_1 ) { },"['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation']",1337,['Delete Invocation'],"['TypeAccess', 'FieldRead', 'TypeAccess', 'VariableRead', 'Invocation', 'BinaryOperator', 'Invocation']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1006,1006,public void METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1338,['Delete Invocation'],"['Invocation', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
1007,1007,"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { VAR_3 . setText ( VAR_4 ) ; if ( VAR_5 . METHOD_2 ( ) ) { VAR_6 . METHOD_3 ( true ) ; } } }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { VAR_3 . setText ( VAR_4 ) ; VAR_6 . METHOD_3 ( true ) ; } }","['Move If', 'Move VariableRead', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1339,['Delete Invocation'],"['If', 'VariableRead', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1008,1008,"private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; return VAR_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; }",private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; return ( VAR_2 . METHOD_2 ( STRING_1 ) ) && ( VAR_2 . METHOD_2 ( STRING_2 ) ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Invocation', 'Insert VariableRead', 'Move TypeAccess']",1340,"['Insert BinaryOperator', 'Update Invocation']","['BinaryOperator', 'Invocation', 'Invocation', 'VariableRead', 'TypeAccess']","['BinaryOperator', 'Invocation']",GPT Missed Nodes,0.5,0.5,0.2,0.28571428571428575,1,1,4
1009,1009,public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . append ( TYPE_2 . METHOD_2 ( ) ) ; VAR_2 . append ( VAR_1 ) ; METHOD_3 ( true ) ; return this ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . append ( ( ( TYPE_2 . METHOD_2 ( ) ) + VAR_1 ) ) ; METHOD_3 ( true ) ; return this ; },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1341,"['Delete Invocation', 'Delete Invocation', 'Insert BinaryOperator']","['BinaryOperator', 'Invocation', 'VariableRead', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation', 'BinaryOperator']",GPT Missed Nodes,0.5,0.6666666666666666,0.4,0.5,2,1,3
1010,1010,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1343,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.14285714285714285,0.25,1,0,6
1011,1011,"protected void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( ) ) ) { TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; } }","protected void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1345,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1012,1012,private boolean METHOD_1 ( ) { for ( java.lang.String string : VAR_1 ) { if ( VAR_2 . toLowerCase ( ) . METHOD_1 ( string ) ) { return true ; } } return false ; },private boolean METHOD_1 ( ) { for ( java.lang.String string : VAR_1 ) { if ( ! ( VAR_2 . toLowerCase ( ) . METHOD_1 ( string ) ) ) { return true ; } } return false ; },"['Insert UnaryOperator', 'Move Invocation']",1347,['Insert Invocation'],"['UnaryOperator', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
1013,1013,public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_5 . METHOD_2 ( VAR_3 ) ; VAR_6 . METHOD_2 ( VAR_7 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_6 . METHOD_2 ( VAR_3 ) ; VAR_5 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_7 ) ; },"['Move Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess']",1349,"['Move Invocation', 'Update Invocation', 'Move Invocation', 'Update Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess']","['Invocation', 'Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.5,0.5,0.5,2,2,2
1014,1014,protected void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) > 0 ) { remove ( METHOD_3 ( ) ) ; } },protected void METHOD_1 ( ) { remove ( METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1350,['Delete Invocation'],"['Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1015,1015,public boolean METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { java.lang.System.out.println ( STRING_1 ) ; return true ; } } return false ; },public boolean METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { return true ; } } return false ; },['Move Invocation'],1351,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1016,1016,"public void METHOD_1 ( ) { VAR_1 . assertEquals ( VAR_2 class , TYPE_1 . METHOD_2 ( STRING_1 ) . getValue ( ) . getClass ( ) ) ; }","public void METHOD_1 ( ) { VAR_1 . assertEquals ( VAR_2 class , TYPE_1 . METHOD_2 ( STRING_1 ) . getClass ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Update Invocation', 'Delete Invocation']",1352,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1017,1017,public void show ( ) { VAR_1 = true ; METHOD_1 ( ) ; if ( ( ! ( VAR_2 . equals ( METHOD_2 ( ) ) ) ) && ( VAR_3 ) ) { METHOD_2 ( ) . METHOD_3 ( ) ; } },public void show ( ) { VAR_1 = true ; METHOD_1 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1354,['Delete Block'],"['TypeAccess', 'Invocation', 'Invocation', 'UnaryOperator', 'FieldRead', 'BinaryOperator', 'Invocation', 'Invocation', 'Block', 'If']",['Block'],GPT Missed Nodes,0.14285714285714285,1.0,0.1,0.18181818181818182,1,0,9
1018,1018,private java.lang.String METHOD_1 ( ) { if ( ( ! ( this . VAR_1 ) ) && ( this . VAR_2 . METHOD_2 ( ) ) ) { return ( VAR_3 ) + STRING_1 ; } else { return VAR_3 ; } },private java.lang.String METHOD_1 ( ) { if ( ! ( this . VAR_1 ) ) { return ( VAR_3 ) + STRING_1 ; } else { return VAR_3 ; } },"['Move UnaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",1356,['Delete Invocation'],"['UnaryOperator', 'ThisAccess', 'FieldRead', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,1,0,4
1019,1019,public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1357,['Delete Block'],"['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.125,0.2222222222222222,1,0,7
1020,1020,"public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( true , VAR_1 . equals ( VAR_2 , VAR_3 . METHOD_2 ( ) ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( VAR_2 , VAR_3 . METHOD_2 ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",1358,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
1021,1021,public java.lang.Double METHOD_1 ( ) { return ( java.lang.Long . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( ) ) / INT_1 ; },public java.lang.Double METHOD_1 ( ) { return java.lang.Long . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1359,['Delete UnaryOperator'],"['Invocation', 'FieldRead', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1022,1022,private void METHOD_1 ( ) { int index = VAR_1 . METHOD_2 ( ) ; if ( index >= 0 ) { METHOD_3 ( VAR_2 . METHOD_4 ( index ) ) ; } },private void METHOD_1 ( ) { int index = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 . METHOD_4 ( index ) ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1361,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1023,1023,"private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 , VAR_3 ) ; }","private void METHOD_1 ( java.lang.String VAR_2 , java.lang.String VAR_1 , java.lang.String VAR_3 ) { METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 , VAR_3 ) ; }",['Move Parameter'],1362,"['Move Parameter', 'Move Parameter']",['Parameter'],"['Parameter', 'Parameter']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
1024,1024,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; super . METHOD_1 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; return super . METHOD_1 ( VAR_1 ) ; },"['Update TypeReference', 'Insert Return', 'Move Invocation']",1363,"['Insert TypeAccess', 'Insert Invocation', 'Insert VariableRead', 'Insert LocalVariable']","['TypeReference', 'Return', 'Invocation']","['TypeAccess', 'Invocation', 'VariableRead', 'LocalVariable']",Partial Match,0.16666666666666666,0.0,0.0,0.0,0,4,3
1025,1025,"public void METHOD_1 ( android.view.View view ) { if ( VAR_1 . METHOD_2 ( ) ) { view . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ; if ( VAR_3 . METHOD_5 ( ) ) { METHOD_6 ( ) ; } } }","public void METHOD_1 ( android.view.View view ) { view . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ; if ( VAR_3 . METHOD_5 ( ) ) { METHOD_6 ( ) ; } }","['Move Invocation', 'Move Invocation', 'Move If', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1364,['Delete Invocation'],"['Invocation', 'Invocation', 'If', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.14285714285714285,0.25,1,0,6
1026,1026,public boolean METHOD_1 ( ) { return ( ( this . VAR_1 ) != null ) && ( ! ( this . VAR_2 . equals ( STRING_1 ) ) ) ; },public boolean METHOD_1 ( ) { return ! ( this . VAR_2 . equals ( STRING_1 ) ) ; },"['Move UnaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1365,['Delete BinaryOperator'],"['UnaryOperator', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1027,1027,public java.lang.String toString ( ) { return ( ( this . VAR_1 ) + STRING_1 ) + ( this . VAR_2 . toString ( ) ) ; },public java.lang.String toString ( ) { return this . VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",1366,"['Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead']","['FieldRead', 'FieldRead', 'BinaryOperator', 'ThisAccess', 'FieldRead', 'Invocation', 'BinaryOperator']","['Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'VariableRead']",Partial Match,0.16666666666666666,0.2,0.14285714285714285,0.16666666666666666,1,4,6
1028,1028,public static TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { if ( VAR_1 == null ) return null ; return new TYPE_1 ( VAR_1 ) ; },public static TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1367,['Delete Invocation'],"['VariableRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
1029,1029,public synchronized void METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) > 1 ) { this . VAR_2 . METHOD_1 ( ) ; } },public synchronized void METHOD_1 ( ) { this . VAR_2 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1368,['Delete Block'],"['Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1030,1030,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( true ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( true ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1369,['Delete Return'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1031,1031,public void METHOD_1 ( java.util.LinkedList < TYPE_1 > list ) { if ( ( view ( ) ) != null ) { view ( ) . METHOD_2 ( new TYPE_2 ( list ) ) ; } },public void METHOD_1 ( java.util.LinkedList < TYPE_1 > list ) { view ( ) . METHOD_2 ( new TYPE_2 ( list ) ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1370,['Delete Invocation'],"['Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1032,1032,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . getValue ( ) ) != null ) { VAR_3 = VAR_2 . getValue ( VAR_4 class ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 = VAR_2 . getValue ( VAR_4 class ) ; },"['Move Assignment', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1372,['Delete Invocation'],"['Assignment', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.14285714285714285,0.25,1,0,6
1033,1033,public void METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = METHOD_2 ( ) ; if ( ! ( METHOD_2 ( ) . contains ( VAR_1 ) ) ) { VAR_3 . add ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = METHOD_2 ( ) ; VAR_3 . add ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; },"['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1373,['Delete Block'],"['Invocation', 'Invocation', 'Invocation', 'VariableRead', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.125,0.2222222222222222,1,0,7
1034,1034,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) METHOD_2 ( true , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( true , VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1374,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1035,1035,public boolean METHOD_1 ( ) { return ( ( VAR_1 . equals ( status ) ) || ( VAR_2 . equals ( status ) ) ) || ( VAR_3 . equals ( status ) ) ; },public boolean METHOD_1 ( ) { return VAR_1 . equals ( status ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",1375,['Update Return'],"['Invocation', 'TypeAccess', 'FieldRead', 'Invocation', 'BinaryOperator', 'TypeAccess', 'FieldRead', 'Invocation', 'BinaryOperator']",['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,9
1036,1036,"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( 0 , VAR_3 , 0 , getString ( VAR_4 ) ) . METHOD_2 ( VAR_5 ) . METHOD_3 ( VAR_6 ) ; super . METHOD_1 ( VAR_1 ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( 0 , VAR_3 , 0 , getString ( VAR_4 ) ) . METHOD_3 ( VAR_6 ) ; super . METHOD_1 ( VAR_1 ) ; return true ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1377,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
1037,1037,public TYPE_1 < ? > METHOD_1 ( ) { return ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) ; },public java.lang.Class < ? > METHOD_1 ( ) { return VAR_2 . METHOD_4 ( ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1378,"['Update TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']","['TypeReference', 'Invocation', 'TypeReference', 'TypeAccess', 'Invocation', 'Invocation']","['TypeReference', 'TypeAccess', 'Invocation', 'Invocation']",Exact Match,1.0,1.0,0.6666666666666666,0.8,4,0,2
1038,1038,public void METHOD_1 ( ) { VAR_1 = ( ( VAR_2 ) + ( VAR_3 ) ) - 1 ; METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) - ( VAR_3 ) ) ) ; },public void METHOD_1 ( ) { VAR_1 = ( ( VAR_2 ) + ( VAR_3 ) ) - 1 ; METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; },"['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1379,['Update Invocation'],"['TypeAccess', 'FieldRead', 'FieldRead', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1039,1039,"public java.lang.String toString ( ) { return ( ( TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) + STRING_1 ) + ( VAR_6 ) ; }","public java.lang.String toString ( ) { return TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1380,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator']","['TypeAccess', 'Invocation']",Partial Match,0.25,0.0,0.0,0.0,0,2,5
1040,1040,public TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( new TYPE_3 ( TYPE_2 . METHOD_3 ( ) ) ) ; },public void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( new TYPE_3 ( TYPE_2 . METHOD_3 ( ) ) ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",1382,"['Update TypeReference', 'Delete Return']","['TypeReference', 'Invocation', 'Return']","['TypeReference', 'Return']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,2,0,1
1041,1041,public static void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } },public static void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; VAR_1 = null ; } },['Move Invocation'],1383,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1042,1042,public void METHOD_1 ( boolean VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( METHOD_2 ( ) ) VAR_2 . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( boolean VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1384,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1043,1043,public java.lang.String [ ] METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( ) ; } return VAR_1 . METHOD_3 ( ) ; },public java.lang.String [ ] METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( ) ; } return VAR_1 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1385,['Delete Invocation'],"['FieldRead', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
1044,1044,void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; },void METHOD_1 ( ) { VAR_1 = ( VAR_2 . METHOD_2 ( ) ) - 1 ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1386,['Insert UnaryOperator'],"['BinaryOperator', 'Invocation', 'Literal']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1045,1045,"public < TYPE_1 extends TYPE_2 < TYPE_3 , TYPE_4 > > TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ( ( TYPE_4 ) ( this ) ) ) ; add ( VAR_1 ) ; return VAR_1 ; }","public < TYPE_1 extends TYPE_2 < TYPE_3 , TYPE_4 > > TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { add ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ( ( TYPE_4 ) ( this ) ) ) ; return VAR_1 ; }",['Move Invocation'],1387,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1046,1046,"private double METHOD_1 ( double VAR_1 , double VAR_2 ) { return FLOAT_1 * ( VAR_1 / VAR_2 ) ; }","private double METHOD_1 ( double VAR_1 , double VAR_2 ) { return ( FLOAT_1 * VAR_1 ) * VAR_2 ; }","['Update BinaryOperator', 'Move VariableRead', 'Move FieldRead']",1388,['Update BinaryOperator'],"['BinaryOperator', 'VariableRead', 'FieldRead']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
1047,1047,protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( ( VAR_3 ) < ( VAR_4 ) ) ) { VAR_2 = VAR_1 ; return true ; } return false ; },protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( ( VAR_4 ) < ( VAR_3 ) ) ) { VAR_2 = VAR_1 ; return true ; } return false ; },['Move FieldRead'],1389,['Update VariableRead'],['FieldRead'],['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1048,1048,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_1 . METHOD_2 ( getActivity ( ) ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( getActivity ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1390,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1049,1049,public void METHOD_1 ( java.lang.String url ) { if ( VAR_1 . contains ( null ) ) VAR_1 . remove ( null ) ; VAR_1 . add ( url ) ; if ( VAR_2 ) VAR_1 . add ( null ) ; },public void METHOD_1 ( java.lang.String url ) { VAR_1 . add ( url ) ; VAR_1 . add ( null ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Block', 'Delete If']",1391,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Literal', 'Invocation', 'TypeAccess', 'Literal', 'Invocation', 'Block', 'If', 'FieldRead', 'Block', 'If']","['Invocation', 'Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.16666666666666666,0.5,0.16666666666666666,0.25,2,2,10
1050,1050,public void METHOD_1 ( ) { if ( ( ( ( VAR_1 ) == ( VAR_2 ) ) || ( ( VAR_1 ) == ( VAR_3 ) ) ) || ( VAR_4 ) ) { return ; } METHOD_2 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1392,"['Delete Block', 'Delete Return', 'Delete Invocation']","['FieldRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'Return', 'Block', 'If']","['Block', 'Return', 'Invocation']",Partial Match,0.3333333333333333,0.6666666666666666,0.16666666666666666,0.26666666666666666,2,1,10
1051,1051,public void METHOD_1 ( ) { this . sum = 0 ; if ( ! ( VAR_1 ) ) { this . VAR_2 = 0 ; } },public void METHOD_1 ( ) { this . sum = 0 ; this . VAR_2 = 0 ; },"['Move Assignment', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1393,['Delete UnaryOperator'],"['Assignment', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['UnaryOperator'],GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,1,0,4
1052,1052,"public void handle ( long VAR_1 ) { if ( ! ( VAR_2 ) ) { METHOD_1 ( VAR_3 , VAR_4 ) ; } }","public void handle ( long VAR_1 ) { METHOD_1 ( VAR_3 , VAR_4 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1395,['Delete UnaryOperator'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['UnaryOperator'],GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,1,0,4
1053,1053,"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . i ( VAR_3 , STRING_1 ) ; VAR_1 . METHOD_2 ( ) ; if ( ( ! ( VAR_4 ) ) && ( ! ( VAR_5 ) ) ) { METHOD_3 ( ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1396,"['Delete Invocation', 'Delete Invocation', 'Delete Return']","['Invocation', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'FieldRead', 'UnaryOperator', 'FieldRead', 'UnaryOperator', 'BinaryOperator', 'Block', 'If']","['Invocation', 'Invocation', 'Return']",Partial Match,0.125,0.3333333333333333,0.08333333333333333,0.13333333333333333,1,2,11
1054,1054,public void METHOD_1 ( ) { VAR_1 = true ; TYPE_1 . METHOD_2 ( ( ) - > { VAR_2 . METHOD_3 ( ) ; if ( ( VAR_3 ) == false ) { VAR_4 . show ( ) ; } } ) ; },public void METHOD_1 ( ) { VAR_1 = true ; TYPE_1 . METHOD_2 ( ( ) - > { VAR_2 . METHOD_3 ( ) ; VAR_4 . show ( ) ; } ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1397,['Delete Block'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1055,1055,public boolean METHOD_1 ( ) { if ( VAR_1 ) java.lang.System.out.println ( STRING_1 ) ; return METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; },public boolean METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; return METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1398,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
1056,1056,public void setEnabled ( boolean VAR_1 ) { VAR_2 . setEnabled ( VAR_1 ) ; if ( VAR_3 ) { METHOD_1 ( VAR_4 . METHOD_2 ( ) ) ; } },public void setEnabled ( boolean VAR_1 ) { VAR_2 . setEnabled ( VAR_1 ) ; },"['Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1399,['Delete Block'],"['FieldRead', 'TypeAccess', 'Invocation', 'Invocation', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1057,1057,"protected TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) . METHOD_4 ( METHOD_5 ( ) . METHOD_6 ( ) ) ; }","protected TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",1400,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.25,0.4,1,0,3
1058,1058,public TYPE_1 < java.lang.Boolean > delete ( java.lang.String key ) { if ( METHOD_1 ( ) ) { return VAR_1 . delete ( key ) ; } return TYPE_2 . METHOD_2 ( false ) ; },public TYPE_1 < java.lang.Boolean > delete ( java.lang.String key ) { return VAR_1 . delete ( key ) ; },"['Move Return', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Return']",1402,"['Delete Block', 'Delete Return']","['Return', 'Invocation', 'Block', 'If', 'TypeAccess', 'Literal', 'Invocation', 'Return']","['Block', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,2,0,6
1059,1059,public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_2 ) == null ) { METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1403,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1060,1060,"public void METHOD_1 ( java.util.List < TYPE_1 > list ) { VAR_1 . i ( STRING_1 , ( STRING_2 + ( VAR_2 . size ( ) ) ) ) ; VAR_3 . METHOD_1 ( list ) ; VAR_4 . METHOD_2 ( ) ; }",public void METHOD_1 ( java.util.List < TYPE_1 > list ) { VAR_4 . METHOD_2 ( ) ; VAR_3 . METHOD_1 ( list ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation']",1404,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'FieldRead', 'TypeAccess', 'Invocation', 'BinaryOperator', 'Invocation']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.125,0.2222222222222222,1,0,7
1061,1061,private void METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_1 ) { java.lang.System.out.println ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) ) ; } },private void METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_1 ) { ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) ; } },"['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",1405,['Delete Invocation'],"['Invocation', 'TypeAccess', 'FieldRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1062,1062,"public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_3 . toString ( ) , VAR_4 . toString ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_4 . toString ( ) , VAR_3 . toString ( ) ) ; }",['Move Invocation'],1406,['Update Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,0.0,0.0,0.0,0,1,1
1063,1063,private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { METHOD_3 ( VAR_3 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( VAR_3 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1407,['Delete Block'],"['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Block'],GPT Missed Nodes,0.25,1.0,0.14285714285714285,0.25,1,0,6
1064,1064,protected void METHOD_1 ( java.lang.String path ) { if ( METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; if ( ! ( VAR_2 . isEmpty ( path ) ) ) { VAR_3 . METHOD_4 ( path ) ; } } },protected void METHOD_1 ( java.lang.String path ) { VAR_1 . METHOD_3 ( ) ; if ( ! ( VAR_2 . isEmpty ( path ) ) ) { VAR_3 . METHOD_4 ( path ) ; } },"['Move Invocation', 'Move If', 'Delete Invocation', 'Delete Block', 'Delete If']",1408,['Delete Invocation'],"['Invocation', 'If', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
1065,1065,public boolean METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) ) { return ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_1 ( ) ; } return false ; },public boolean METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { return ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_1 ( ) ; } return false ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1409,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1066,1066,protected boolean METHOD_1 ( final TYPE_1 VAR_1 ) { boolean VAR_2 = ( VAR_1 . METHOD_2 ( ) ) && ( VAR_3 . equals ( VAR_4 . getType ( ) ) ) ; return VAR_2 ; },protected boolean METHOD_1 ( final TYPE_1 VAR_1 ) { boolean VAR_2 = ( VAR_1 . METHOD_2 ( ) ) && ( ( VAR_4 . getType ( ) ) != null ) ; return VAR_2 ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal', 'Delete TypeAccess', 'Delete Invocation']",1410,"['Delete Invocation', 'Insert Invocation']","['BinaryOperator', 'Invocation', 'Literal', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.25,0.5,0.2,0.28571428571428575,1,1,4
1067,1067,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } else { METHOD_3 ( VAR_1 ) ; } } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } else { METHOD_3 ( VAR_1 ) ; } },"['Move If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1411,['Delete LocalVariable'],"['If', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1068,1068,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( METHOD_2 ( ) ) != null ) { VAR_2 = METHOD_2 ( ) . getBoolean ( VAR_3 ) ; } super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( this . getActivity ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( this . getActivity ( ) ) ; if ( ( METHOD_2 ( ) ) != null ) { VAR_2 = METHOD_2 ( ) . getBoolean ( VAR_3 ) ; } },['Move If'],1412,['Move If'],['If'],['If'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1069,1069,"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( this . VAR_1 . METHOD_2 ( ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; this . METHOD_3 ( intent ) ; METHOD_4 ( ) ; } }","public void METHOD_1 ( ) { if ( this . VAR_1 . METHOD_2 ( ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; this . METHOD_3 ( intent ) ; METHOD_4 ( ) ; } super . METHOD_1 ( ) ; }",['Move Invocation'],1413,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1070,1070,"public synchronized void setText ( java.lang.String text ) { this . METHOD_1 ( 0 , this . METHOD_2 ( ) ) ; this . METHOD_3 ( text ) ; this . METHOD_4 ( 0 ) ; }","public synchronized void setText ( java.lang.String text ) { this . METHOD_1 ( 0 , ( ( this . METHOD_2 ( ) ) - 1 ) ) ; this . METHOD_3 ( text ) ; this . METHOD_4 ( 0 ) ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1414,['Insert UnaryOperator'],"['BinaryOperator', 'Invocation', 'Literal']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1071,1071,public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ( STRING_1 + ( TYPE_2 . METHOD_3 ( VAR_2 . trim ( ) ) ) ) ) ; },public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ( STRING_1 + ( VAR_2 . trim ( ) ) ) ) ; },"['Update Invocation', 'Move Invocation', 'Move BinaryOperator', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1415,['Delete TypeAccess'],"['Invocation', 'Invocation', 'BinaryOperator', 'Invocation', 'TypeAccess', 'Invocation']",['TypeAccess'],GPT Missed Nodes,0.3333333333333333,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1072,1072,"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; if ( VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_2 ) ; METHOD_3 ( ) ; VAR_3 = false ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; if ( ( VAR_3 ) || true ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_2 ) ; METHOD_3 ( ) ; VAR_3 = false ; } }","['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",1418,"['Insert UnaryOperator', 'Insert VariableRead']","['BinaryOperator', 'FieldRead', 'Literal']","['UnaryOperator', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,3
1073,1073,public int METHOD_1 ( ) { if ( this . VAR_1 ) { return this . VAR_2 ; } else if ( ( this . VAR_3 ) != null ) { return this . VAR_4 ; } else { return this . VAR_5 ; } },public int METHOD_1 ( ) { if ( ( this . VAR_3 ) != null ) { return this . VAR_2 ; } else { return this . VAR_4 ; } },"['Move If', 'Move Block', 'Move Return', 'Delete Block', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Return', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Block', 'Delete If']",1419,"['Delete Return', 'Delete Return', 'Delete Return', 'Delete Wra']","['If', 'Block', 'Return', 'Block', 'ThisAccess', 'FieldRead', 'Return', 'ThisAccess', 'FieldRead', 'Block', 'If']","['Return', 'Return', 'Return', 'Wra']",Partial Match,0.16666666666666666,0.25,0.09090909090909091,0.13333333333333333,1,3,10
1074,1074,public void METHOD_1 ( ) { ( VAR_1 ) ++ ; if ( ( VAR_1 ) > ( ( VAR_2 . size ( ) ) - 1 ) ) VAR_1 = 0 ; METHOD_2 ( ) ; },public void METHOD_1 ( ) { ( VAR_1 ) ++ ; if ( ( VAR_1 ) > ( VAR_2 . size ( ) ) ) VAR_1 = 0 ; METHOD_2 ( ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1421,['Delete UnaryOperator'],"['BinaryOperator', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1075,1075,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { if ( VAR_3 ) { VAR_4 . add ( VAR_1 ) ; } else { VAR_4 . add ( this ) ; } VAR_2 . METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_4 . add ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; } },"['Move If', 'Move BinaryOperator', 'Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1422,['Delete Invocation'],"['If', 'BinaryOperator', 'Invocation', 'FieldRead', 'TypeAccess', 'ThisAccess', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1,0.18181818181818182,1,0,9
1076,1076,private void METHOD_1 ( TYPE_1 node ) { if ( null != node ) { METHOD_1 ( node . METHOD_2 ( ) ) ; METHOD_1 ( node . METHOD_3 ( ) ) ; java.lang.System.out.print ( ( ( VAR_1 . getData ( ) ) + STRING_1 ) ) ; } },private void METHOD_1 ( TYPE_1 node ) { if ( null != node ) { METHOD_1 ( node . METHOD_2 ( ) ) ; METHOD_1 ( node . METHOD_3 ( ) ) ; java.lang.System.out.println ( VAR_1 . getData ( ) ) ; } },"['Update Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1423,"['Update Invocation', 'Delete TypeReference', 'Delete TypeAccess']","['Invocation', 'Invocation', 'FieldRead', 'BinaryOperator']","['Invocation', 'TypeReference', 'TypeAccess']",Partial Match,0.2,0.3333333333333333,0.25,0.28571428571428575,1,2,3
1077,1077,public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_2 = getIntent ( ) . METHOD_2 ( ) ; if ( VAR_2 != null ) { METHOD_3 ( VAR_2 ) ; } this . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_2 = getIntent ( ) . METHOD_2 ( ) ; METHOD_3 ( VAR_2 ) ; this . METHOD_4 ( ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1424,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1078,1078,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( true ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1426,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1079,1079,"public boolean METHOD_1 ( final android.view.View view , final TYPE_1 event ) { return VAR_1 . METHOD_2 ( event ) ; }","public boolean METHOD_1 ( final android.view.View view , final TYPE_1 event ) { VAR_1 . METHOD_2 ( event ) ; return true ; }","['Move Invocation', 'Insert Literal']",1427,"['Delete Return', 'Insert Return']","['Invocation', 'Literal']","['Return', 'Return']",Partial Match,0.0,0.0,0.0,0.0,0,2,2
1080,1080,"public void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 = null ; if ( VAR_3 ) TYPE_1 . METHOD_2 ( VAR_4 , VAR_5 ) ; }","public void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 = null ; TYPE_1 . METHOD_2 ( VAR_4 , VAR_5 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1428,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
1081,1081,"public java.lang.String toString ( ) { return ( ( ( VAR_1 ) + STRING_1 ) + ( TYPE_1 . METHOD_1 ( VAR_2 ) . substring ( 0 , INT_1 ) ) ) + STRING_2 ; }",public java.lang.String toString ( ) { return ( ( ( VAR_1 ) + STRING_1 ) + ( TYPE_1 . METHOD_1 ( VAR_2 ) ) ) + STRING_2 ; },"['Move Invocation', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation']",1429,['Delete Invocation'],"['Invocation', 'Literal', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1082,1082,"public java.lang.String METHOD_1 ( ) { int VAR_1 = VAR_2 ; if ( VAR_3 ) { VAR_1 = VAR_4 ; } return METHOD_2 ( VAR_1 , VAR_5 , ( ( ( ( VAR_6 ) + ""\t"" ) + ( VAR_7 ) ) + STRING_1 ) ) ; }","public java.lang.String METHOD_1 ( ) { int VAR_1 = VAR_2 ; if ( VAR_3 ) { VAR_1 = VAR_4 ; } return METHOD_2 ( VAR_1 , VAR_5 , ( ( ( VAR_6 ) + ""\t"" ) + ( VAR_7 ) ) ) ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1430,['Delete VariableRead'],"['BinaryOperator', 'FieldRead', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1083,1083,"public boolean METHOD_1 ( java.io.File VAR_1 , java.lang.String name ) { return ( name . METHOD_2 ( STRING_1 ) ) && ( ! ( name . METHOD_2 ( STRING_2 ) ) ) ; }","public boolean METHOD_1 ( java.io.File VAR_1 , java.lang.String name ) { return name . METHOD_2 ( STRING_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",1431,['Delete Invocation'],"['Invocation', 'VariableRead', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1084,1084,public java.util.Calendar METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( null == ( VAR_2 ) ) return VAR_3 ; else return VAR_2 ; },public java.util.Calendar METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; return VAR_2 ; },"['Move Return', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1432,"['Delete Return', 'Update Return']","['Return', 'Literal', 'FieldRead', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.16666666666666666,0.5,0.1111111111111111,0.1818181818181818,1,1,8
1085,1085,public TYPE_1 METHOD_1 ( ) { if ( this . isEmpty ( ) ) { return null ; } return this . first ( ) ; },public TYPE_1 METHOD_1 ( ) { return this . first ( ) ; },"['Delete ThisAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1434,['Delete Return'],"['ThisAccess', 'Invocation', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1086,1086,"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; return METHOD_3 ( VAR_3 . format ( VAR_4 , VAR_2 . METHOD_4 ( ) ) , java.util.Arrays.asList ( VAR_2 , VAR_1 ) , null ) ; }","private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; return METHOD_3 ( VAR_3 . format ( VAR_4 , VAR_2 ) , java.util.Arrays.asList ( VAR_2 , VAR_1 ) , null ) ; }","['Move VariableRead', 'Delete Invocation']",1435,['Delete Invocation'],"['VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1087,1087,public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) == null ) { java.lang.System.out.println ( VAR_1 ) ; } else { VAR_2 . METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) == null ) { java.lang.System.out.println ( VAR_1 ) ; } VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete Block']",1437,['Delete Invocation'],"['Invocation', 'Block']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
1088,1088,public void METHOD_1 ( TYPE_1 msg ) { if ( VAR_1 . getData ( ) . METHOD_2 ( STRING_1 ) ) { METHOD_3 ( VAR_1 . getData ( ) . getString ( STRING_1 ) ) ; } },public void METHOD_1 ( TYPE_1 msg ) { METHOD_3 ( VAR_1 . getData ( ) . getString ( STRING_1 ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1438,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.14285714285714285,0.25,1,0,6
1089,1089,private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( this ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( this ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; },['Move Invocation'],1439,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1090,1090,private static boolean METHOD_1 ( char c ) { return ( ( TYPE_1 . METHOD_2 ( c ) ) || ( TYPE_1 . METHOD_3 ( c ) ) ) || ( c == CHAR_1 ) ; },private static boolean METHOD_1 ( char c ) { return ( TYPE_1 . METHOD_2 ( c ) ) || ( TYPE_1 . METHOD_3 ( c ) ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1440,['Delete UnaryOperator'],"['BinaryOperator', 'VariableRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1091,1091,"public boolean METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , METHOD_4 ( ) , VAR_1 ) ; return TYPE_3 . METHOD_5 ( VAR_2 , type , value ) ; }","public boolean METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , METHOD_4 ( ) , VAR_1 ) ; return TYPE_3 . METHOD_5 ( value , type , VAR_2 ) ; }","['Move FieldRead', 'Move VariableRead']",1441,['Update VariableRead'],"['FieldRead', 'VariableRead']",['VariableRead'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
1092,1092,"private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ( ! ( VAR_2 ) ) ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( ) . METHOD_6 ( ) . replace ( VAR_3 , VAR_4 ) . commit ( ) ; }","private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( ) . METHOD_6 ( ) . replace ( VAR_3 , VAR_4 ) . commit ( ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete UnaryOperator']",1442,['Delete Invocation'],"['TypeAccess', 'FieldRead', 'UnaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1093,1093,public java.util.Collection < TYPE_1 > METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( VAR_2 . isEmpty ( ) ) ) { return VAR_3 < TYPE_1 > METHOD_2 ( ) ; } return VAR_1 ; },public java.util.Collection < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1443,"['Delete Block', 'Delete If', 'Delete Return']","['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'BinaryOperator', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Invocation', 'BinaryOperator', 'Return', 'Block', 'If']","['Block', 'If', 'Return']",GPT Missed Nodes,0.375,1.0,0.21428571428571427,0.35294117647058826,3,0,11
1094,1094,"public void set ( int VAR_1 , int VAR_2 , float value ) { values [ ( ( VAR_1 * ( VAR_3 ) ) + VAR_2 ) ] = value ; }","public void set ( int VAR_1 , int VAR_2 , float value ) { values [ ( VAR_1 * VAR_2 ) ] = value ; }","['Move BinaryOperator', 'Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",1444,"['Delete VariableRead', 'Delete VariableRead']","['BinaryOperator', 'VariableRead', 'FieldRead', 'BinaryOperator']","['VariableRead', 'VariableRead']",GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,2,4
1095,1095,final java.lang.String METHOD_1 ( ) { if ( this . VAR_1 ) { return STRING_1 + ( METHOD_2 ( ) ) ; } return STRING_2 ; },final java.lang.String METHOD_1 ( ) { return STRING_1 + ( METHOD_2 ( ) ) ; },"['Move Return', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",1446,"['Delete Invocation', 'Delete Return']","['Return', 'ThisAccess', 'FieldRead', 'Block', 'If', 'FieldRead', 'Return']","['Invocation', 'Return']",Partial Match,0.16666666666666666,0.5,0.14285714285714285,0.22222222222222224,1,1,6
1096,1096,public int METHOD_1 ( ) { return this . METHOD_2 ( ) . toLowerCase ( ) . METHOD_1 ( ) ; },public int METHOD_1 ( ) { return this . METHOD_2 ( ) . METHOD_1 ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete Invocation']",1451,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.3333333333333333,0.5,1,0,2
1097,1097,public boolean METHOD_1 ( ) { return ! ( ( index ) == null ) ; },public boolean METHOD_1 ( ) { return ( index ) == null ; },"['Move BinaryOperator', 'Delete UnaryOperator']",1452,['Delete UnaryOperator'],"['BinaryOperator', 'UnaryOperator']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1098,1098,"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_2 ) ; if ( ( VAR_3 . getText ( ) . length ( ) ) == 0 ) { METHOD_3 ( 1 , TYPE_1 . METHOD_4 ( this ) ) ; } }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_2 ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1453,['Delete Invocation'],"['TypeAccess', 'Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Literal', 'TypeAccess', 'ThisAccess', 'Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.08333333333333333,0.15384615384615385,1,0,11
1099,1099,"public void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { for ( TYPE_1 VAR_3 : this . VAR_4 ) { if ( VAR_5 . equals ( java.lang.Integer.toString ( VAR_3 . METHOD_2 ( ) ) ) ) { VAR_3 . METHOD_3 ( VAR_2 ) ; } } }","public void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { for ( TYPE_1 VAR_3 : this . VAR_4 ) { if ( VAR_5 . equals ( VAR_3 . METHOD_2 ( ) ) ) { VAR_3 . METHOD_3 ( VAR_2 ) ; } } }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1454,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess']",Exact Match,1.0,1.0,0.4,0.5714285714285715,2,0,3
1100,1100,public void METHOD_1 ( TYPE_1 list ) { if ( ( VAR_1 . getId ( ) ) == 0 ) { VAR_2 . METHOD_2 ( list ) ; } else { VAR_3 . update ( list ) ; } view . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 list ) { VAR_2 . METHOD_2 ( list ) ; view . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1457,"['Delete Invocation', 'Delete Return']","['Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'VariableRead', 'Invocation', 'Block', 'If']","['Invocation', 'Return']",Partial Match,0.125,0.5,0.09090909090909091,0.15384615384615385,1,1,10
1101,1101,private boolean METHOD_1 ( final java.lang.String path ) { return ( VAR_1 . equals ( this . VAR_2 ) ) || ( VAR_1 . startsWith ( ( ( this . VAR_2 ) + STRING_1 ) ) ) ; },private boolean METHOD_1 ( final java.lang.String path ) { return VAR_1 . startsWith ( this . VAR_2 ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete BinaryOperator']",1458,"['Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead']","['Invocation', 'Invocation', 'TypeAccess', 'ThisAccess', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Invocation', 'BinaryOperator']","['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'VariableRead', 'VariableRead']",Partial Match,0.3333333333333333,0.3333333333333333,0.2222222222222222,0.26666666666666666,2,4,7
1102,1102,"public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 ) != null ) { TYPE_2 . METHOD_3 ( VAR_3 , STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1459,"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']","['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']","['TypeAccess', 'Invocation', 'Invocation']",GPT Missed Nodes,0.2857142857142857,1.0,0.25,0.4,3,0,9
1103,1103,public boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) && ( VAR_1 ) ; },public boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",1460,"['Delete Invocation', 'Update Return']","['FieldRead', 'Invocation', 'BinaryOperator']","['Invocation', 'Return']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
1104,1104,protected void METHOD_1 ( ) { this . VAR_1 = TYPE_1 . METHOD_2 ( this . METHOD_3 ( ) . getValue ( ) ) ; },protected void METHOD_1 ( ) { this . VAR_1 = this . METHOD_3 ( ) . getValue ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1461,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
1105,1105,public void METHOD_1 ( ) { if ( ( VAR_1 ) != ( VAR_2 ) ) { VAR_1 = VAR_2 ; java.lang.System.out.println ( STRING_1 ) ; } VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_1 = VAR_2 ; VAR_4 . METHOD_3 ( ) ; },"['Move Assignment', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Invocation']",1462,"['Delete Assignment', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']","['Assignment', 'FieldRead', 'FieldRead', 'BinaryOperator', 'TypeAccess', 'FieldRead', 'TypeAccess', 'Invocation', 'Block', 'If', 'TypeAccess', 'Invocation']","['Assignment', 'Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'VariableRead', 'VariableRead', 'VariableRead', 'VariableRead']",Partial Match,0.375,0.4166666666666667,0.4166666666666667,0.4166666666666667,5,7,7
1106,1106,public long METHOD_1 ( ) { if ( ( this . count ) == 0 ) { return VAR_1 ; } return VAR_2 ; },public long METHOD_1 ( ) { return VAR_2 ; },"['Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1463,['Delete Return'],"['ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.14285714285714285,1.0,0.125,0.2222222222222222,1,0,7
1107,1107,public java.lang.String METHOD_1 ( ) { return output . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; },public java.io.File METHOD_1 ( ) { return new java.io.File ( output . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ) ; },"['Update TypeReference', 'Insert ConstructorCall', 'Move Invocation']",1465,"['Update TypeAccess', 'Insert Invocation']","['TypeReference', 'ConstructorCall', 'Invocation']","['TypeAccess', 'Invocation']",Partial Match,0.25,0.0,0.0,0.0,0,2,3
1108,1108,"private void METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 { if ( ! ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) { TYPE_3 . METHOD_3 ( METHOD_4 ( ) , VAR_1 ) ; } }","private void METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 { if ( TYPE_3 . METHOD_2 ( VAR_1 ) ) { TYPE_3 . METHOD_3 ( METHOD_4 ( ) , VAR_1 ) ; } }","['Move Invocation', 'Delete UnaryOperator']",1467,['Delete Invocation'],"['Invocation', 'UnaryOperator']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
1109,1109,public double METHOD_1 ( int VAR_1 ) { if ( ( ( VAR_1 == ( VAR_2 ) ) || ( VAR_1 == ( VAR_3 ) ) ) || ( VAR_1 == ( VAR_4 ) ) ) return this . METHOD_1 ( ) ; return this . VAR_5 ; },public double METHOD_1 ( int VAR_1 ) { if ( ( ( VAR_1 == ( VAR_2 ) ) || ( VAR_1 == ( VAR_3 ) ) ) || ( VAR_1 == ( VAR_4 ) ) ) return this . METHOD_1 ( ) ; else return this . VAR_5 ; },"['Insert Block', 'Move Return']",1468,['Insert Return'],"['Block', 'Return']",['Return'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
1110,1110,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1469,['Delete Assignment'],"['Assignment', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Assignment'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1111,1111,"public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 element , TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_1 ( element , null , ( ( TYPE_5 ) ( VAR_1 . METHOD_2 ( ) ) ) , VAR_1 ) ; }","public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 element , TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_1 ( element , null , null , VAR_1 ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation']",1470,"['Delete TypeAccess', 'Delete Invocation']","['Literal', 'TypeReference', 'VariableRead', 'Invocation']","['TypeAccess', 'Invocation']",Partial Match,0.2,0.5,0.25,0.3333333333333333,1,1,3
1112,1112,public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( true ) . build ( ) ; },public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) . METHOD_2 ( VAR_2 ) . build ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete Literal', 'Delete Invocation']",1471,['Delete Invocation'],"['Invocation', 'Invocation', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1113,1113,"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; if ( ( getActivity ( ) ) != null ) { TYPE_1 . METHOD_3 ( METHOD_4 ( ) . getString ( VAR_3 ) , getActivity ( ) ) ; } }","public void METHOD_1 ( ) { TYPE_1 . METHOD_3 ( METHOD_4 ( ) . getString ( VAR_3 ) , getActivity ( ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1472,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.16666666666666666,1.0,0.2222222222222222,0.3636363636363636,2,0,7
1114,1114,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ( ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ) + STRING_1 ) ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ( ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ) + STRING_1 ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1473,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
1115,1115,public void execute ( ) { if ( ( to ) == ( VAR_1 ) ) { METHOD_1 ( ) ; } VAR_2 . setState ( to ) ; },public void execute ( ) { VAR_2 . setState ( to ) ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",1474,['Delete Invocation'],"['FieldRead', 'FieldRead', 'BinaryOperator', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1116,1116,"public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 . METHOD_3 ( VAR_2 , VAR_3 . METHOD_4 ( ) ) ; } return VAR_1 . METHOD_5 ( VAR_4 , VAR_3 . METHOD_4 ( ) ) ; }","public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 . METHOD_3 ( VAR_2 , VAR_3 . METHOD_4 ( ) ) ; } else { return VAR_1 . METHOD_5 ( VAR_4 , VAR_3 . METHOD_4 ( ) ) ; } }","['Insert Block', 'Move Return']",1475,"['Insert Block', 'Insert Return']","['Block', 'Return']","['Block', 'Return']",Exact Match,1.0,0.5,0.5,0.5,1,1,1
1117,1117,public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return null ; return VAR_1 . METHOD_1 ( ) ; },public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1478,['Delete Return'],"['FieldRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1118,1118,"public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { return ( ! ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) || ( ! ( TYPE_1 . METHOD_3 ( VAR_3 ) ) ) ; }","public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( ( TYPE_1 . METHOD_2 ( VAR_2 ) ) && ( TYPE_1 . METHOD_3 ( VAR_3 ) ) ) return false ; return true ; }","['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Move Invocation', 'Move Invocation', 'Insert Return', 'Insert Literal', 'Delete UnaryOperator', 'Delete UnaryOperator']",1479,"['Delete UnaryOperator', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Return', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert Return', 'Insert Return']","['If', 'BinaryOperator', 'BinaryOperator', 'Block', 'Literal', 'Invocation', 'Invocation', 'Return', 'Literal', 'UnaryOperator', 'UnaryOperator']","['UnaryOperator', 'UnaryOperator', 'BinaryOperator', 'Return', 'BinaryOperator', 'BinaryOperator', 'Return', 'Return']",GPT Missed Nodes,0.42857142857142855,0.375,0.2727272727272727,0.3157894736842105,3,5,8
1119,1119,public java.lang.String METHOD_1 ( ) { return VAR_1 . toLowerCase ( ) ; },public java.lang.String METHOD_1 ( ) { return text ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1481,"['Update VariableRead', 'Delete Invocation']","['FieldRead', 'TypeAccess', 'Invocation']","['VariableRead', 'Invocation']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
1120,1120,private static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) . METHOD_2 ( VAR_1 class ) . METHOD_3 ( true ) ; },private static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) . METHOD_2 ( VAR_1 class ) ; },"['Move Invocation', 'Delete Literal', 'Delete Invocation']",1482,['Delete Invocation'],"['Invocation', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
1121,1121,"public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ( ( VAR_1 ) / INT_1 ) , ( ( VAR_1 ) / INT_1 ) ) ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ( ( VAR_1 ) / INT_1 ) , VAR_1 ) ; }","['Insert FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1483,['Update Invocation'],"['FieldRead', 'FieldRead', 'FieldRead', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1122,1122,"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . get ( STRING_1 ) ; java.lang.System.out.print ( new TYPE_2 ( VAR_1 , STRING_2 ) . METHOD_2 ( ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . get ( STRING_1 ) ; new TYPE_2 ( VAR_1 , STRING_2 ) . METHOD_2 ( ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",1484,['Delete Invocation'],"['Invocation', 'TypeAccess', 'FieldRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1123,1123,private int METHOD_1 ( int position ) { return ( position / INT_1 ) * ( VAR_1 ) ; },private int METHOD_1 ( int position ) { return ( VAR_1 ) + ( ( position / INT_1 ) * ( VAR_1 ) ) ; },"['Insert BinaryOperator', 'Insert FieldRead', 'Move BinaryOperator']",1485,['Insert BinaryOperator'],"['BinaryOperator', 'FieldRead', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
1124,1124,"public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , STRING_1 ) . METHOD_3 ( VAR_2 , STRING_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , STRING_1 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1486,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1125,1125,public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( 0 ) ; METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( 1 ) ; METHOD_4 ( ) ; },['Update Literal'],1487,['Update Invocation'],['Literal'],['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1126,1126,"public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , ( ( TYPE_3 . METHOD_3 ( ) ) - ( TYPE_2 . METHOD_4 ( ) ) ) ) ; }","public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , TYPE_2 . METHOD_4 ( ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",1488,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'TypeAccess', 'Invocation', 'BinaryOperator']","['Invocation', 'TypeAccess']",GPT Missed Nodes,0.6666666666666666,1.0,0.5,0.6666666666666666,2,0,2
1127,1127,public void METHOD_1 ( ) { if ( ! ( info . METHOD_2 ( ) ) ) { info . METHOD_3 ( 0 ) ; VAR_1 . start ( ) ; } else info . METHOD_4 ( ) ; },public void METHOD_1 ( ) { info . METHOD_3 ( 0 ) ; VAR_1 . start ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1489,"['Delete Block', 'Delete Invocation']","['Invocation', 'Invocation', 'FieldRead', 'Invocation', 'UnaryOperator', 'Block', 'FieldRead', 'Invocation', 'Block', 'If']","['Block', 'Invocation']",GPT Missed Nodes,0.4,1.0,0.2,0.33333333333333337,2,0,8
1128,1128,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( ) ; } },"public void METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; }","['Insert Parameter', 'Move Invocation', 'Insert TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1491,"['Insert Parameter', 'Insert TypeReference', 'Insert Parameter', 'Delete TypeReference']","['Parameter', 'Invocation', 'TypeReference', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']","['Parameter', 'TypeReference', 'Parameter', 'TypeReference']",GPT Missed Nodes,0.25,0.5,0.25,0.3333333333333333,2,2,6
1129,1129,public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( false ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; },['Update Literal'],1492,['Update Invocation'],['Literal'],['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1130,1130,public double METHOD_1 ( ) { return ( METHOD_2 ( ) ) + ( ( FLOAT_1 * ( METHOD_3 ( ) ) ) / ( TYPE_1 . METHOD_4 ( VAR_1 . length ) ) ) ; },public double METHOD_1 ( ) { return ( METHOD_2 ( ) ) + ( FLOAT_1 * ( TYPE_1 . METHOD_4 ( ( ( METHOD_3 ( ) ) / ( VAR_1 . length ) ) ) ) ) ; },"['Update BinaryOperator', 'Move FieldRead', 'Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead']",1493,"['Move Invocation', 'Move TypeAccess', 'Move BinaryOperator']","['BinaryOperator', 'FieldRead', 'BinaryOperator', 'BinaryOperator', 'FieldRead']","['Invocation', 'TypeAccess', 'BinaryOperator']",Partial Match,0.25,0.3333333333333333,0.2,0.25,1,2,4
1131,1131,public void METHOD_1 ( boolean VAR_1 ) { if ( ( METHOD_2 ( ) ) < ( METHOD_3 ( ) ) ) METHOD_4 ( VAR_1 ) ; state . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( boolean VAR_1 ) { if ( ( METHOD_2 ( ) ) < ( METHOD_3 ( ) ) ) METHOD_4 ( VAR_1 ) ; else state . METHOD_1 ( VAR_1 ) ; },"['Insert Block', 'Move Invocation']",1494,['Insert If'],"['Block', 'Invocation']",['If'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1132,1132,"private static boolean METHOD_1 ( TYPE_1 element ) { return ( ( VAR_1 . getContext ( ) ) instanceof TYPE_2 ) && ( TYPE_3 . METHOD_2 ( element . METHOD_3 ( ) , element . METHOD_4 ( ) ) ) ; }","private static boolean METHOD_1 ( TYPE_1 element ) { if ( ( VAR_1 . getContext ( ) ) instanceof TYPE_2 ) { return TYPE_3 . METHOD_2 ( element . METHOD_3 ( ) , element . METHOD_4 ( ) ) ; } return false ; }","['Insert If', 'Insert Return', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Move Return', 'Move Invocation', 'Delete BinaryOperator']",1496,"['Insert Return', 'Insert Return', 'Insert Invocation', 'Insert TypeAccess', 'Insert TypeReference', 'Delete Return']","['If', 'Return', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Invocation', 'BinaryOperator']","['Return', 'Return', 'Invocation', 'TypeAccess', 'TypeReference', 'Return']",Partial Match,0.25,0.16666666666666666,0.125,0.14285714285714288,1,5,7
1133,1133,protected void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; } },protected void METHOD_1 ( ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; },"['Move Assignment', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1497,['Delete If'],"['Assignment', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['If'],GPT Missed Nodes,0.14285714285714285,1.0,0.14285714285714285,0.25,1,0,6
1134,1134,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; },protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; super . METHOD_1 ( ) ; },['Move Invocation'],1498,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1135,1135,"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_1 instanceof TYPE_2 ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1499,['Delete Invocation'],"['Invocation', 'VariableRead', 'TypeAccess', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1136,1136,public TYPE_1 get ( int i ) { if ( ( VAR_1 . size ( ) ) > i ) return this . VAR_1 . get ( i ) ; return null ; },public TYPE_1 get ( int i ) { return this . VAR_1 . get ( i ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1501,"['Delete TypeAccess', 'Delete Assignment']","['Return', 'TypeAccess', 'Invocation', 'VariableRead', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']","['TypeAccess', 'Assignment']",Partial Match,0.1111111111111111,0.5,0.1111111111111111,0.1818181818181818,1,1,8
1137,1137,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { if ( ! ( VAR_4 ) ) { VAR_5 . i ( STRING_1 , STRING_2 ) ; return ; } METHOD_2 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_3 ( ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { METHOD_2 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_3 ( ) ) ; }","['Delete FieldRead', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1503,['Delete Invocation'],"['FieldRead', 'UnaryOperator', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'Return', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1138,1138,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != ( VAR_2 ) ) VAR_2 = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; },"['Move Assignment', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1504,['Delete Assignment'],"['Assignment', 'VariableRead', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['Assignment'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1139,1139,"public static java.lang.String METHOD_1 ( android.content.Context context ) { return VAR_1 . getString ( context , VAR_2 , java.lang.String . METHOD_2 ( new java.util.Date ( ) . getTime ( ) ) ) ; }","public static java.lang.String METHOD_1 ( android.content.Context context ) { return VAR_1 . getString ( context , VAR_2 , new java.util.Date ( ) . toString ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move VariableRead', 'Move TypeAccess', 'Update Invocation', 'Delete TypeAccess', 'Delete Invocation']",1505,"['Delete Invocation', 'Insert Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'VariableRead', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.5,0.125,0.2,1,1,7
1140,1140,public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_2 ( VAR_5 ) ; VAR_6 . METHOD_2 ( VAR_2 ) ; VAR_7 = false ; VAR_8 = false ; METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_2 ( VAR_5 ) ; VAR_6 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; VAR_7 = false ; VAR_8 = false ; },['Move Invocation'],1507,"['Move Assignment', 'Move Assignment']",['Invocation'],"['Assignment', 'Assignment']",Partial Match,0.0,0.0,0.0,0.0,0,2,1
1141,1141,"public void METHOD_1 ( java.lang.String key , TYPE_1 value ) { if ( value != null ) { VAR_1 . put ( key , value ) ; } }","public void METHOD_1 ( java.lang.String key , TYPE_1 value ) { VAR_1 . put ( key , value ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1508,['Delete Assignment'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1142,1142,public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) TYPE_1 . METHOD_2 ( new TYPE_1 ( ) ) ; return VAR_1 ; },public static synchronized TYPE_1 METHOD_1 ( ) { return VAR_1 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete ConstructorCall', 'Delete Invocation', 'Delete Block', 'Delete If']",1510,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'ConstructorCall', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.125,1.0,0.125,0.2222222222222222,1,0,7
1143,1143,public double METHOD_1 ( ) { return ( ( ( VAR_1 ) * INT_1 ) * FLOAT_1 ) * INT_2 ; },public double METHOD_1 ( ) { return ( ( VAR_1 ) * INT_1 ) * FLOAT_1 ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1511,['Delete Assignment'],"['BinaryOperator', 'FieldRead', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1144,1144,private void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 = 0 ; VAR_3 = 0 ; VAR_4 = 0 ; VAR_5 = 0 ; if ( ! ( VAR_6 . equals ( VAR_7 ) ) ) VAR_8 = 0 ; VAR_9 = 0 ; },private void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 = 0 ; VAR_3 = 0 ; VAR_4 = 0 ; VAR_5 = 0 ; VAR_8 = 0 ; VAR_9 = 0 ; },"['Move Assignment', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1512,['Delete Invocation'],"['Assignment', 'TypeAccess', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1145,1145,public boolean METHOD_1 ( ) { return VAR_1 . toString ( ) . equals ( VAR_2 . toString ( ) ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 . toString ( ) ) == ( VAR_2 . toString ( ) ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Move Invocation', 'Delete Invocation']",1513,"['Update Invocation', 'Update BinaryOperator']","['BinaryOperator', 'Invocation', 'Invocation', 'Invocation']","['Invocation', 'BinaryOperator']",Exact Match,1.0,0.0,0.0,0.0,0,2,4
1146,1146,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { VAR_2 = VAR_1 ; view . METHOD_3 ( VAR_1 ) ; view . METHOD_4 ( ) ; } else { view . METHOD_5 ( ) ; view . METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { VAR_2 = VAR_1 ; view . METHOD_3 ( VAR_1 ) ; view . METHOD_4 ( ) ; } else view . METHOD_5 ( ) ; view . METHOD_4 ( ) ; },['Move Invocation'],1515,['Delete Return'],['Invocation'],['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1147,1147,"private TYPE_1 METHOD_1 ( double VAR_1 , int i ) { return METHOD_1 ( METHOD_2 ( ) , VAR_1 , i ) ; }","private void METHOD_1 ( double VAR_1 , int i ) { METHOD_1 ( METHOD_2 ( ) , VAR_1 , i ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",1516,"['Update TypeAccess', 'Delete Return']","['TypeReference', 'Invocation', 'Return']","['TypeAccess', 'Return']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
1148,1148,public void METHOD_1 ( TYPE_1 buffer ) throws java.io.IOException { super . METHOD_1 ( buffer ) ; if ( METHOD_2 ( ) ) { VAR_1 = buffer . METHOD_3 ( ) ; VAR_2 = buffer . METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 buffer ) throws java.io.IOException { super . METHOD_1 ( buffer ) ; VAR_1 = buffer . METHOD_3 ( ) ; VAR_2 = buffer . METHOD_3 ( ) ; },"['Move Assignment', 'Move Assignment', 'Delete Invocation', 'Delete Block', 'Delete If']",1517,['Delete Block'],"['Assignment', 'Assignment', 'Invocation', 'Block', 'If']",['Block'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
1149,1149,"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( this , VAR_2 , STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_4 ( STRING_2 ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( this , VAR_2 , STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; }",['Move Invocation'],1518,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1150,1150,public void METHOD_1 ( java.lang.Throwable VAR_1 ) { if ( VAR_1 == null ) { METHOD_2 ( ) . METHOD_3 ( false ) ; } else { VAR_2 . METHOD_4 ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.Throwable VAR_1 ) { VAR_2 . METHOD_4 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1519,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Invocation', 'Literal', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.1,0.18181818181818182,1,0,9
1151,1151,"private static TYPE_1 METHOD_1 ( int VAR_1 , java.util.Scanner VAR_2 ) { if ( VAR_1 == 1 ) { return new TYPE_2 ( ) ; } else { return null ; } }",private static TYPE_2 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Update TypeReference', 'Move Return', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1520,"['Delete TypeReference', 'Delete LocalVariable', 'Delete LocalVariable', 'Update TypeReference']","['TypeReference', 'Return', 'TypeReference', 'Parameter', 'TypeReference', 'Parameter', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['TypeReference', 'LocalVariable', 'LocalVariable', 'TypeReference']",Partial Match,0.1111111111111111,0.5,0.14285714285714285,0.22222222222222224,2,2,12
1152,1152,public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 ; java.lang.String message = METHOD_2 ( ) ; if ( message != null ) return TYPE_2 . METHOD_3 ( VAR_2 . trim ( ) ) ; return null ; },public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 ; java.lang.String message = METHOD_2 ( ) ; if ( message != null ) return TYPE_2 . METHOD_3 ( message ) ; return null ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1521,['Update Invocation'],"['VariableRead', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
1153,1153,"private TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( count , VAR_2 ) ; }",private TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( count ) ; },['Delete TypeAccess'],1522,['Delete VariableRead'],['TypeAccess'],['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1154,1154,"private void METHOD_1 ( java.lang.String filePath , TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_3 . METHOD_2 ( ) , VAR_4 ) ; METHOD_3 ( filePath ) ; if ( VAR_1 != null ) METHOD_4 ( VAR_1 ) ; }","private void METHOD_1 ( java.lang.String filePath , TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_3 . METHOD_2 ( ) , VAR_4 ) ; METHOD_3 ( filePath ) ; METHOD_4 ( VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1523,"['Delete LocalVariable', 'Delete Invocation']","['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']","['LocalVariable', 'Invocation']",Partial Match,0.14285714285714285,0.0,0.0,0.0,0,2,6
1155,1155,public static boolean METHOD_1 ( java.lang.String [ ] VAR_1 ) { return new TYPE_1 ( ) . METHOD_1 ( VAR_1 ) ; },public static void METHOD_1 ( java.lang.String [ ] VAR_1 ) { new TYPE_1 ( ) . METHOD_1 ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",1524,"['Update TypeAccess', 'Delete Return']","['TypeReference', 'Invocation', 'Return']","['TypeAccess', 'Return']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
1156,1156,"private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { TYPE_3 . METHOD_2 ( ( ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) * ( - 1 ) ) , VAR_1 . METHOD_4 ( ) ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { TYPE_3 . METHOD_2 ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; } }","['Move Invocation', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator']",1525,['Delete Invocation'],"['Invocation', 'Literal', 'UnaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
1157,1157,public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return ( ( TYPE_3 ) ( TYPE_4 . METHOD_2 ( ) . METHOD_1 ( getClass ( ) ) ) ) ; },public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( ) . METHOD_1 ( getClass ( ) ) ; },['Delete TypeReference'],1527,"['Delete TypeReference', 'Delete TypeReference']",['TypeReference'],"['TypeReference', 'TypeReference']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
1158,1158,"public void METHOD_1 ( java.lang.Object result ) { METHOD_1 ( 1 , result ) ; }","public boolean METHOD_1 ( java.lang.Object result ) { return METHOD_1 ( 1 , result ) ; }","['Update TypeReference', 'Insert Return', 'Move Invocation']",1528,"['Update Wra', 'Insert Return']","['TypeReference', 'Return', 'Invocation']","['Wra', 'Return']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
1159,1159,"public double METHOD_1 ( double value ) { return TYPE_1 . METHOD_2 ( ( ( value / ( this . VAR_1 ) ) * INT_1 ) ) . METHOD_3 ( INT_2 , VAR_2 ) . METHOD_4 ( ) ; }","public double METHOD_1 ( double value ) { return new TYPE_1 ( ( ( value / ( this . VAR_1 ) ) * INT_1 ) ) . METHOD_3 ( INT_2 , VAR_2 ) . METHOD_4 ( ) ; }","['Update Invocation', 'Move Invocation', 'Update Invocation', 'Insert ConstructorCall', 'Move TypeAccess', 'Move TypeAccess', 'Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation']",1529,"['Delete TypeAccess', 'Insert Invocation']","['Invocation', 'Invocation', 'Invocation', 'ConstructorCall', 'TypeAccess', 'TypeAccess', 'BinaryOperator', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation']",GPT Missed Nodes,0.5,0.5,0.1111111111111111,0.1818181818181818,1,1,8
1160,1160,"public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 , ( ( TYPE_2 ) ( VAR_3 ) ) ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 , null ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess']",1530,"['Delete TypeReference', 'Delete TypeAccess']","['Literal', 'TypeReference', 'TypeAccess']","['TypeReference', 'TypeAccess']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,2,0,1
1161,1161,public java.lang.String METHOD_1 ( java.lang.String value ) { java.lang.String [ ] VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( value ) ) ; return METHOD_4 ( VAR_1 ) ; },public java.lang.String METHOD_1 ( java.lang.String value ) { java.lang.String [ ] VAR_1 = TYPE_1 . METHOD_2 ( value ) ; return METHOD_4 ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",1533,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1162,1162,public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_3 . getId ( ) ) ) return ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( VAR_4 ) ) ) ; return null ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( VAR_4 ) ) ) ; },"['Move Return', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1534,"['Delete Invocation', 'Delete Return']","['Return', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation', 'Block', 'If', 'Literal', 'Return']","['Invocation', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.2222222222222222,0.3636363636363636,2,0,7
1163,1163,"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( getContext ( ) , VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_3 ( getContext ( ) ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; }","public void METHOD_1 ( ) { TYPE_2 VAR_3 = new TYPE_3 ( getContext ( ) ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; VAR_1 = new TYPE_1 ( getContext ( ) , VAR_2 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }","['Move Assignment', 'Move Invocation']",1535,['Move LocalVariable'],"['Assignment', 'Invocation']",['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1164,1164,private int METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { return VAR_2 . METHOD_2 ( ) ; } else { return VAR_1 ; } },private int METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { VAR_2 . METHOD_2 ( ) ; } else { return VAR_1 ; } return - 1 ; },"['Insert Return', 'Insert UnaryOperator', 'Move Invocation', 'Insert Literal', 'Delete Return']",1537,"['Delete Return', 'Insert Return']","['Return', 'UnaryOperator', 'Invocation', 'Literal', 'Return']","['Return', 'Return']",GPT Missed Nodes,0.25,1.0,0.4,0.5714285714285715,2,0,3
1165,1165,public boolean equals ( java.lang.Object VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . equals ( ( ( TYPE_1 ) ( VAR_1 ) ) . VAR_3 ) ; } else { return false ; } },public boolean equals ( java.lang.Object VAR_1 ) { return VAR_2 . equals ( ( ( TYPE_1 ) ( VAR_1 ) ) . VAR_3 ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1538,['Delete BinaryOperator'],"['Return', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']",['BinaryOperator'],GPT Missed Nodes,0.16666666666666666,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1166,1166,"private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_4 , VAR_5 ) ; METHOD_3 ( ) . METHOD_4 ( VAR_6 , VAR_1 , this ) . METHOD_5 ( ) ; }","private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_4 , VAR_5 ) ; METHOD_3 ( ) . METHOD_4 ( VAR_6 , VAR_1 , this ) ; }","['Move Invocation', 'Delete Invocation']",1540,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1167,1167,"public boolean METHOD_1 ( TYPE_1 view , boolean VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) { if ( ( VAR_4 ) != null ) { return VAR_4 . METHOD_1 ( view , VAR_1 , VAR_2 , VAR_3 ) ; } return false ; }","public boolean METHOD_1 ( TYPE_1 view , boolean VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) { return VAR_4 . METHOD_1 ( view , VAR_1 , VAR_2 , VAR_3 ) ; }","['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1541,"['Delete Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']","['Return', 'TypeAccess', 'Invocation', 'Return']",Partial Match,0.125,0.25,0.125,0.16666666666666666,1,3,7
1168,1168,"public void METHOD_1 ( java.lang.Throwable t ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( VAR_2 , STRING_1 ) ; }","public void METHOD_1 ( java.lang.Throwable t ) { TYPE_1 . METHOD_4 ( VAR_2 , STRING_1 ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; }",['Move Invocation'],1542,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1169,1169,public TYPE_1 METHOD_1 ( int position ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 . size ( ) ) > 0 ) ) return VAR_2 . get ( position ) ; else return null ; },public TYPE_1 METHOD_1 ( int position ) { return VAR_2 . get ( position ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1543,"['Delete Assignment', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['Assignment', 'VariableRead', 'TypeAccess', 'Return']",Partial Match,0.2,0.5,0.14285714285714285,0.22222222222222224,2,2,12
1170,1170,protected java.lang.Integer METHOD_1 ( java.lang.Void ... params ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_3 ( ) ) > 0 ) ) { return 1 ; } return 0 ; },protected java.lang.Integer METHOD_1 ( java.lang.Void ... params ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { return 1 ; } return 0 ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1544,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1171,1171,"private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( TYPE_1 . METHOD_2 ( ( ( ( ( TYPE_2 . METHOD_3 ( CHAR_1 , VAR_2 . getString ( STRING_1 ) ) ) + ( VAR_3 ) ) + STRING_2 ) + VAR_1 ) ) ) ; }","private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( TYPE_1 . METHOD_2 ( ( ( ( TYPE_2 . METHOD_3 ( CHAR_1 , VAR_2 . getString ( STRING_1 ) ) ) + ( VAR_3 ) ) + VAR_1 ) ) ) ; }","['Move BinaryOperator', 'Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",1545,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'FieldRead', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1172,1172,"private void METHOD_1 ( java.lang.String VAR_1 ) { long VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; VAR_5 . setText ( ( STRING_1 + ( VAR_6 . METHOD_3 ( VAR_2 ) ) ) ) ; }","private void METHOD_1 ( java.lang.String VAR_1 ) { long VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; VAR_5 . setText ( VAR_6 . METHOD_3 ( VAR_2 ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1547,['Delete Invocation'],"['Invocation', 'FieldRead', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
1173,1173,"public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < java.lang.Void > VAR_2 ) { if ( VAR_1 != null ) { TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } }","public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < java.lang.Void > VAR_2 ) { TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1549,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1174,1174,"public void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ! ( VAR_1 ) ) { VAR_2 . METHOD_3 ( this , VAR_3 ) ; } }","public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( this , VAR_3 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1550,['Delete Invocation'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,5
1175,1175,"public void METHOD_1 ( TYPE_1 value ) { put ( STRING_1 , value . METHOD_2 ( ) ) ; }","public void METHOD_1 ( TYPE_1 value ) { put ( STRING_1 , value ) ; }","['Move VariableRead', 'Delete Invocation']",1552,['Delete Invocation'],"['VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1176,1176,public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( ! ( VAR_2 . isEmpty ( ) ) ) VAR_3 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_3 . METHOD_3 ( VAR_1 ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1553,['Delete Invocation'],"['TypeAccess', 'Invocation', 'UnaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1177,1177,"public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) return VAR_3 . METHOD_2 ( VAR_1 , STRING_1 ) ; return VAR_1 . METHOD_3 ( STRING_1 ) ; }",public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_3 ( STRING_1 ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1554,"['Delete Return', 'Delete Invocation']","['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'VariableRead', 'TypeAccess', 'Invocation', 'Return', 'Block', 'If']","['Return', 'Invocation']",GPT Missed Nodes,0.2222222222222222,1.0,0.2,0.33333333333333337,2,0,8
1178,1178,"public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; } else if ( ! ( VAR_2 ) ) { METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( VAR_3 , STRING_1 ) ; } }","public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; } else { METHOD_3 ( ) ; } TYPE_1 . METHOD_4 ( VAR_3 , STRING_1 ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1555,"['Delete If', 'Insert Block']","['Invocation', 'Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']","['If', 'Block']",GPT Missed Nodes,0.4,0.5,0.16666666666666666,0.25,1,1,5
1179,1179,"public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) . METHOD_4 ( VAR_1 , null , this ) ; } }","public void METHOD_1 ( ) { METHOD_3 ( ) . METHOD_4 ( VAR_1 , null , this ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1556,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1180,1180,public TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) + 1 ) < ( VAR_2 . size ( ) ) ) { return VAR_2 . get ( ( ( VAR_1 ) + 1 ) ) ; } return null ; },public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) < ( VAR_2 . size ( ) ) ) { return VAR_2 . get ( ( ( VAR_1 ) + 1 ) ) ; } return null ; },"['Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1557,['Delete UnaryOperator'],"['FieldRead', 'Literal', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1181,1181,public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) == null ) { this . METHOD_2 ( ) ; } VAR_3 . add ( VAR_1 ) ; },public void METHOD_1 ( int VAR_1 ) { VAR_3 . add ( VAR_1 ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1558,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'ThisAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.14285714285714285,0.25,1,0,6
1182,1182,protected static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; return VAR_1 ; },protected static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_1 . METHOD_2 ( null ) ; return VAR_1 ; },['Move Invocation'],1561,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1183,1183,"public boolean METHOD_1 ( ) { return ( ! ( VAR_1 ) ) && ( METHOD_2 ( VAR_2 , VAR_3 ) ) ; }","public boolean METHOD_1 ( ) { return METHOD_2 ( VAR_2 , VAR_3 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",1562,['Delete Invocation'],"['Invocation', 'FieldRead', 'UnaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
1184,1184,public void update ( ) { VAR_1 . METHOD_1 ( ) ; if ( ( VAR_2 ) != null ) { METHOD_2 ( ) ; } },public void update ( ) { VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1564,['Delete Block'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1185,1185,public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1565,"['Delete Block', 'Delete Invocation']","['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']","['Block', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.5,0.16666666666666666,0.25,1,1,5
1186,1186,private void METHOD_1 ( android.content.Context context ) { if ( ( VAR_1 ) != null ) { context . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; VAR_1 = null ; } context . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; },private void METHOD_1 ( android.content.Context context ) { if ( ( VAR_1 ) != null ) { context . METHOD_3 ( VAR_1 ) ; VAR_1 = null ; } context . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",1567,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1187,1187,private void METHOD_1 ( ) { new TYPE_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; },private void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; new TYPE_1 ( VAR_1 ) ; },['Move ConstructorCall'],1569,['Move Invocation'],['ConstructorCall'],['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1188,1188,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_3 ( ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1570,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1189,1189,public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( ( METHOD_2 ( ) . get ( VAR_1 ) ) != null ) { return METHOD_2 ( ) . get ( VAR_1 ) ; } return METHOD_1 ( ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . get ( VAR_1 ) ; },"['Move Return', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Invocation', 'Delete Return']",1572,"['Delete If', 'Delete Return']","['Return', 'Invocation', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If', 'Invocation', 'Return']","['If', 'Return']",GPT Missed Nodes,0.2857142857142857,1.0,0.2,0.33333333333333337,2,0,8
1190,1190,public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( ( VAR_2 . size ( ) ) - 1 ) ) { VAR_1 = 0 ; } else { ( VAR_1 ) ++ ; } VAR_3 = VAR_2 . get ( VAR_1 ) ; },public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 . size ( ) ) ) { VAR_1 = 0 ; } else { ( VAR_1 ) ++ ; } VAR_3 = VAR_2 . get ( VAR_1 ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1577,['Delete UnaryOperator'],"['BinaryOperator', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1191,1191,"public void METHOD_1 ( TYPE_1 view , java.lang.String VAR_1 ) { if ( VAR_1 != null ) { VAR_2 . state ( ) . METHOD_2 ( ) . METHOD_1 ( METHOD_3 ( VAR_1 ) ) . commit ( ) ; } }","public void METHOD_1 ( TYPE_1 view , java.lang.String VAR_1 ) { if ( VAR_1 != null ) { view . METHOD_1 ( METHOD_3 ( VAR_1 ) ) ; } }","['Move Invocation', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",1578,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'VariableRead', 'TypeAccess', 'Invocation', 'Invocation', 'Invocation']","['Invocation', 'TypeAccess']",GPT Missed Nodes,0.6666666666666666,1.0,0.3333333333333333,0.5,2,0,4
1192,1192,public int [ ] METHOD_1 ( ) { VAR_1 [ 0 ] = ( VAR_2 . METHOD_2 ( INT_1 ) ) + 1 ; VAR_1 [ 1 ] = ( VAR_2 . METHOD_2 ( INT_1 ) ) + 1 ; return VAR_1 ; },public int [ ] METHOD_1 ( ) { VAR_1 [ 0 ] = VAR_2 . METHOD_2 ( INT_1 ) ; VAR_1 [ 1 ] = VAR_2 . METHOD_2 ( INT_1 ) ; return VAR_1 ; },"['Move Invocation', 'Move Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",1579,['Delete UnaryOperator'],"['Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Literal', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1193,1193,"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( null ) ; VAR_1 . METHOD_3 ( null ) ; VAR_1 . METHOD_4 ( null , METHOD_5 ( ) ) ; METHOD_6 ( ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_4 ( null , METHOD_5 ( ) ) ; }","['Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Invocation']",1580,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['TypeAccess', 'Literal', 'Invocation', 'TypeAccess', 'Literal', 'Invocation', 'Invocation']","['Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,1.0,0.42857142857142855,0.6,3,0,4
1194,1194,public void METHOD_1 ( ) { java.lang.System.out.print ( STRING_1 ) ; java.lang.System.out.print ( ( ( ( ( ( METHOD_2 ( ) ) + STRING_2 ) + ( METHOD_3 ( ) ) ) + STRING_3 ) + ( METHOD_4 ( ) ) ) ) ; },public void METHOD_1 ( ) { java.lang.System.out.print ( STRING_1 ) ; java.lang.System.out.print ( ( ( ( ( METHOD_2 ( ) ) + ( METHOD_3 ( ) ) ) + STRING_3 ) + ( METHOD_4 ( ) ) ) ) ; },"['Move BinaryOperator', 'Move Invocation', 'Move FieldRead', 'Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1581,['Delete TypeAccess'],"['BinaryOperator', 'Invocation', 'FieldRead', 'Invocation', 'FieldRead', 'BinaryOperator']",['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1195,1195,public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_2 . METHOD_1 ( VAR_1 ) ) && ( ( VAR_3 . METHOD_2 ( VAR_1 ) ) != null ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1582,['Delete Invocation'],"['Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1196,1196,"public void METHOD_1 ( java.lang.String message , boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( message , ( VAR_1 ? VAR_3 : VAR_4 ) ) ; VAR_5 . add ( VAR_2 ) ; VAR_6 . add ( VAR_2 ) ; VAR_7 . METHOD_2 ( ) ; }","public void METHOD_1 ( java.lang.String message , boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( message , ( VAR_1 ? VAR_3 : VAR_4 ) ) ; VAR_6 . add ( VAR_2 ) ; VAR_5 . add ( VAR_2 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1583,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
1197,1197,public static int METHOD_1 ( ) { if ( ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( ) ) != null ) ) && ( VAR_1 . METHOD_2 ( ) . VAR_2 ) ) return 1 ; else return 0 ; },public static int METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) . VAR_2 ) ) return 1 ; else return 0 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1585,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1198,1198,"public void METHOD_1 ( java.lang.Throwable error , java.lang.Void result ) { if ( error != null ) { VAR_1 . error ( STRING_1 , error ) ; VAR_1 . error ( STRING_2 , VAR_2 ) ; } }","public void METHOD_1 ( java.lang.Throwable error , java.lang.Void result ) { VAR_1 . error ( STRING_1 , error ) ; VAR_1 . error ( STRING_2 , VAR_2 ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1586,['Delete Return'],"['Invocation', 'Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
1199,1199,"public void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 , final int VAR_3 , final int VAR_4 ) { this . VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 , final int VAR_3 , final int VAR_4 ) { this . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","['Move ThisAccess', 'Delete FieldRead']",1587,['Delete TypeAccess'],"['ThisAccess', 'FieldRead']",['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1200,1200,public static boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_1 ( ) ) ; },public static boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1589,"['Delete VariableRead', 'Delete TypeAccess']","['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']","['VariableRead', 'TypeAccess']",Partial Match,0.0,0.0,0.0,0.0,0,2,5
1201,1201,public void delete ( TYPE_1 VAR_1 ) { new TYPE_2 ( METHOD_1 ( ) ) . delete ( METHOD_2 ( ) ) . METHOD_3 ( METHOD_4 ( VAR_1 ) ) . METHOD_5 ( ) ; },public void delete ( TYPE_1 VAR_1 ) { new TYPE_2 ( METHOD_1 ( ) ) . delete ( METHOD_2 ( ) ) . METHOD_3 ( METHOD_4 ( VAR_1 ) ) ; },"['Move Invocation', 'Delete Invocation']",1591,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1202,1202,"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( rows ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( rows , VAR_2 ) ; }",public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( rows ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_2 ( rows ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; },"['Update Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Move TypeAccess']",1592,['Insert Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1203,1203,private TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_2 ; } else if ( ( VAR_3 ) == VAR_1 ) { return VAR_4 ; } return null ; },private TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_2 ; } return null ; },"['Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Block']",1593,['Delete Return'],"['FieldRead', 'VariableRead', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'If', 'Block']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
1204,1204,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_2 . setEnabled ( false ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 . setEnabled ( false ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1594,['Delete VariableRead'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1205,1205,public void METHOD_1 ( ) { if ( ( ( VAR_1 ) == ( - INT_1 ) ) || ( ( VAR_2 ) == true ) ) METHOD_2 ( this ) ; else { METHOD_3 ( VAR_1 ) ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( - INT_1 ) ) METHOD_2 ( this ) ; else METHOD_3 ( VAR_1 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1596,"['Delete If', 'Delete Invocation']","['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']","['If', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,2,5
1206,1206,protected boolean METHOD_1 ( java.lang.String query ) { if ( query == null ) { return true ; } return TYPE_1 . METHOD_2 ( query ) . METHOD_3 ( ) ; },protected boolean METHOD_1 ( java.lang.String query ) { if ( query == null ) { return true ; } return ! ( TYPE_1 . METHOD_2 ( query ) . METHOD_3 ( ) ) ; },"['Insert UnaryOperator', 'Move Invocation']",1597,['Insert UnaryOperator'],"['UnaryOperator', 'Invocation']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1207,1207,public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = METHOD_2 ( STRING_1 ) ; if ( VAR_1 != null ) METHOD_1 ( VAR_2 . split ( STRING_2 ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = METHOD_2 ( STRING_1 ) ; METHOD_1 ( VAR_2 . split ( STRING_2 ) ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1598,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1208,1208,"public java.lang.String METHOD_1 ( java.lang.Long VAR_1 , java.lang.String VAR_2 ) { VAR_3 . assertThat ( VAR_1 , TYPE_1 . METHOD_2 ( 1L ) ) ; VAR_3 . assertThat ( VAR_2 , TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) ; return STRING_1 ; }","public java.lang.String METHOD_1 ( java.lang.Long VAR_1 ) { VAR_3 . assertThat ( VAR_1 , TYPE_1 . METHOD_2 ( 1L ) ) ; return STRING_1 ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",1599,"['Delete Parameter', 'Delete Invocation']","['TypeReference', 'Parameter', 'TypeAccess', 'VariableRead', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation', 'Invocation']","['Parameter', 'Invocation']",GPT Missed Nodes,0.4,1.0,0.2222222222222222,0.3636363636363636,2,0,7
1209,1209,"public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( VAR_2 ) ; } else { METHOD_2 ( VAR_3 ) ; } java.lang.String VAR_4 = METHOD_3 ( ) ; METHOD_4 ( METHOD_3 ( ) , true ) ; METHOD_5 ( VAR_4 ) ; }","public void METHOD_1 ( ) { METHOD_2 ( VAR_3 ) ; java.lang.String VAR_4 = METHOD_3 ( ) ; METHOD_4 ( METHOD_3 ( ) , true ) ; METHOD_5 ( VAR_4 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1600,['Delete Invocation'],"['Invocation', 'FieldRead', 'TypeAccess', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1210,1210,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) this . VAR_2 = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 ; },"['Move Assignment', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1602,['Delete Assignment'],"['Assignment', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Assignment'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1211,1211,public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 . METHOD_2 ( ) ) == null ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( ) { if ( ( VAR_2 . METHOD_2 ( ) ) == null ) { METHOD_3 ( ) ; } },"['Move BinaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",1603,['Delete VariableRead'],"['BinaryOperator', 'FieldRead', 'UnaryOperator', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1212,1212,public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; } else if ( VAR_2 ) { METHOD_3 ( ) ; } else { super . METHOD_1 ( ) ; } },public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; } else { super . METHOD_1 ( ) ; } },"['Move If', 'Move FieldRead', 'Move Block', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1605,['Delete If'],"['If', 'FieldRead', 'Block', 'FieldRead', 'Invocation', 'Block', 'Block', 'If']",['If'],GPT Missed Nodes,0.25,1.0,0.125,0.2222222222222222,1,0,7
1213,1213,public static int METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) TYPE_1 . METHOD_2 ( ) ; return VAR_1 ; },public static int METHOD_1 ( ) { return VAR_1 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1606,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.14285714285714285,0.25,1,0,6
1214,1214,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1607,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess']",Exact Match,1.0,1.0,0.4,0.5714285714285715,2,0,3
1215,1215,public void METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) > 0 ) { throw new TYPE_1 ( ) ; } else { try { VAR_1 . remove ( 0 ) ; } catch ( TYPE_2 VAR_2 ) { throw VAR_2 ; } } },public void METHOD_1 ( ) { if ( ( VAR_1 . size ) > 0 ) { throw new TYPE_1 ( ) ; } else { try { VAR_1 . remove ( 0 ) ; } catch ( TYPE_2 VAR_2 ) { throw VAR_2 ; } } },"['Insert FieldRead', 'Move TypeAccess', 'Delete Invocation']",1608,"['Delete Invocation', 'Insert VariableRead']","['FieldRead', 'TypeAccess', 'Invocation']","['Invocation', 'VariableRead']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
1216,1216,"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_3 . METHOD_2 ( this ) ) { TYPE_2 . METHOD_3 ( this , STRING_1 , VAR_4 ) . show ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( this ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1610,['Delete Invocation'],"['Invocation', 'TypeAccess', 'ThisAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1217,1217,private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; } VAR_3 . setText ( VAR_4 . METHOD_3 ( VAR_1 ) ) ; },private void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . setText ( VAR_4 . METHOD_3 ( VAR_1 ) ) ; },"['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1612,['Delete Assignment'],"['Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Assignment'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1218,1218,protected static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . arg ( STRING_1 ) . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; },protected static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . arg ( STRING_1 ) . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1613,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1219,1219,public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ( ( VAR_2 ) + 1 ) ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ( ( VAR_2 ) - 1 ) ) ; },['Update BinaryOperator'],1614,['Update BinaryOperator'],['BinaryOperator'],['BinaryOperator'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1220,1220,public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.Integer VAR_1 ) { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Update TypeReference', 'Update TypeAccess']",1615,"['Insert Invocation', 'Insert TypeAccess', 'Update Parameter', 'Delete Invocation']","['Invocation', 'TypeReference', 'TypeAccess']","['Invocation', 'TypeAccess', 'Parameter', 'Invocation']",Partial Match,0.5,0.0,0.0,0.0,0,4,3
1221,1221,public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( getName ( ) ) ) ; },public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( getName ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1616,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess']",Exact Match,1.0,1.0,0.4,0.5714285714285715,2,0,3
1222,1222,"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { return ( ( ( ( this . VAR_3 ) + VAR_1 ) + STRING_1 ) + VAR_2 ) + STRING_1 ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { return ( ( ( this . VAR_3 ) + VAR_1 ) + STRING_1 ) + VAR_2 ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1617,['Delete VariableRead'],"['BinaryOperator', 'FieldRead', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1223,1223,private java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_2 . toString ( ) ; } else { return VAR_3 . name ( ) ; } },private java.lang.String METHOD_1 ( ) { return VAR_2 . toString ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1619,"['Delete Invocation', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'Invocation', 'Return', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,2,0,8
1224,1224,private static int METHOD_1 ( android.content.Context context ) { if ( ( VAR_1 ) && ( ( VAR_2 . length ) > 0 ) ) return VAR_3 [ ( ( VAR_2 . length ) - 1 ) ] ; return - 1 ; },private static int METHOD_1 ( android.content.Context context ) { if ( VAR_1 ) return VAR_3 [ ( ( VAR_2 . length ) - 1 ) ] ; return - 1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1620,['Delete Invocation'],"['FieldRead', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1225,1225,public void start ( ) { super . start ( ) ; METHOD_1 ( ) . start ( ) ; METHOD_2 ( ) ; VAR_1 . start ( ) ; },public void start ( ) { METHOD_1 ( ) . start ( ) ; super . start ( ) ; METHOD_2 ( ) ; VAR_1 . start ( ) ; },['Move Invocation'],1622,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1226,1226,public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 = null ; VAR_3 = null ; VAR_4 = null ; VAR_5 = null ; TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( ) ; METHOD_2 ( ) ; VAR_2 = null ; VAR_3 = null ; VAR_4 = null ; VAR_5 = null ; TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; },['Move Invocation'],1623,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1227,1227,private boolean METHOD_1 ( ) { return ! ( ( VAR_1 . METHOD_2 ( ( i ) - > { return i < ( VAR_2 ) ? ++ i : i ; } ) ) < ( VAR_2 ) ) ; },private boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ( i ) - > { return i < ( VAR_2 ) ? ++ i : i ; } ) ) < ( VAR_2 ) ; },"['Move BinaryOperator', 'Delete UnaryOperator']",1625,['Delete UnaryOperator'],"['BinaryOperator', 'UnaryOperator']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1228,1228,"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; try { new TYPE_2 ( VAR_1 , INT_1 ) . get ( ) ; } catch ( TYPE_3 VAR_2 ) { return ; } VAR_3 . fail ( ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; try { new TYPE_2 ( VAR_1 , INT_1 ) . get ( ) ; VAR_3 . fail ( ) ; } catch ( TYPE_3 VAR_2 ) { } }","['Move Invocation', 'Delete Return']",1626,['Delete Return'],"['Invocation', 'Return']",['Return'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1229,1229,public int METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_2 . length ( ) ) + ( TYPE_1 . METHOD_2 ( ) . METHOD_1 ( VAR_2 . length ( ) ) ) ; },public int METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . length ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator']",1627,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.14285714285714285,0.25,1,0,6
1230,1230,public boolean equals ( java.lang.Object obj ) { if ( obj instanceof TYPE_1 ) { return ( ( TYPE_1 ) ( obj ) ) . VAR_1 . METHOD_1 ( VAR_1 ) ; } return false ; },public boolean equals ( java.lang.Object obj ) { if ( obj instanceof TYPE_1 ) { return ( ( ( TYPE_1 ) ( obj ) ) . id ) == ( id ) ; } return false ; },"['Insert BinaryOperator', 'Update FieldRead', 'Move FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1628,"['Delete Invocation', 'Insert BinaryOperator']","['BinaryOperator', 'FieldRead', 'FieldRead', 'FieldRead', 'TypeAccess', 'Invocation']","['Invocation', 'BinaryOperator']",GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,2,0,4
1231,1231,"public static java.lang.String METHOD_1 ( double VAR_1 ) { if ( ( VAR_1 % 1 ) == 0 ) { return java.lang.String.format ( STRING_1 , VAR_1 ) ; } else { return java.lang.String.format ( STRING_2 , VAR_1 ) ; } }","public static java.lang.String METHOD_1 ( double VAR_1 ) { if ( VAR_1 == 0 ) { return ""0"" ; } else { return java.lang.String.format ( STRING_2 , VAR_1 ) ; } }","['Update BinaryOperator', 'Move BinaryOperator', 'Move Literal', 'Insert Literal', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1629,"['Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Insert VariableRead', 'Insert VariableRead', 'Insert Invocation', 'Insert TypeAccess', 'Update VariableRead']","['BinaryOperator', 'BinaryOperator', 'Literal', 'Literal', 'Literal', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'VariableRead', 'Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'VariableRead', 'VariableRead', 'VariableRead', 'VariableRead', 'Invocation', 'TypeAccess', 'VariableRead']",GPT Missed Nodes,0.6,0.36363636363636365,0.4,0.380952380952381,4,7,6
1232,1232,protected boolean METHOD_1 ( ) { return ( ( ( node ) != null ) && ( METHOD_2 ( ) ) ) && ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . contains ( fieldName ) ) ; },protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) && ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . contains ( fieldName ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1630,['Delete If'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['If'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1233,1233,"private void METHOD_1 ( TYPE_1 p , java.lang.String VAR_1 ) { p . METHOD_2 ( ( ( byte ) ( VAR_1 != null ? 1 : 0 ) ) ) ; if ( VAR_1 != null ) p . METHOD_3 ( VAR_1 ) ; }","private void METHOD_1 ( TYPE_1 p , java.lang.String VAR_1 ) { p . METHOD_2 ( ( ( byte ) ( VAR_1 != null ? 1 : 0 ) ) ) ; p . METHOD_3 ( VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1632,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1234,1234,public void METHOD_1 ( ) { METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( null ) ; if ( VAR_2 . METHOD_4 ( ) ) { VAR_2 . METHOD_5 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_3 ( null ) ; METHOD_2 ( false ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1633,"['Delete Invocation', 'Delete Invocation', 'Delete Block']","['Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation', 'Block']",GPT Missed Nodes,0.5,1.0,0.42857142857142855,0.6,3,0,4
1235,1235,"public void METHOD_1 ( android.view.View VAR_1 , long VAR_2 , long VAR_3 , TYPE_1 listener ) { VAR_4 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , METHOD_4 ( VAR_1 ) , METHOD_5 ( ) , VAR_2 , VAR_6 , VAR_7 , VAR_3 , listener ) ; }","public void METHOD_1 ( android.view.View VAR_1 , long VAR_2 , long VAR_3 , TYPE_1 listener ) { VAR_4 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( METHOD_4 ( VAR_1 ) , METHOD_5 ( ) , VAR_2 , VAR_6 , VAR_7 , VAR_3 , listener ) ; }",['Delete VariableRead'],1634,['Delete VariableRead'],['VariableRead'],['VariableRead'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1236,1236,"public TYPE_1 METHOD_1 ( int index ) { TYPE_1 VAR_1 = METHOD_2 ( index ) ; if ( VAR_1 == null ) { return null ; } METHOD_3 ( index , null ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( int index ) { TYPE_1 VAR_1 = METHOD_2 ( index ) ; if ( VAR_1 != null ) { METHOD_3 ( index , null ) ; return VAR_1 ; } return null ; }","['Move Return', 'Update BinaryOperator', 'Move Invocation', 'Move Return']",1635,"['Update UnaryOperator', 'Move Return']","['Return', 'BinaryOperator', 'Invocation', 'Return']","['UnaryOperator', 'Return']",Partial Match,0.25,0.5,0.25,0.3333333333333333,1,1,3
1237,1237,public void METHOD_1 ( final int VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) ) == VAR_1 ) ) { VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; } },public void METHOD_1 ( final int VAR_1 ) { VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1636,['Delete Invocation'],"['Invocation', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'VariableRead', 'BinaryOperator', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.125,1.0,0.08333333333333333,0.15384615384615385,1,0,11
1238,1238,private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; },private void METHOD_1 ( ) { if ( ( VAR_2 ) != null ) { VAR_1 . METHOD_2 ( VAR_2 ) ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Invocation']",1637,"['Insert Invocation', 'Insert VariableRead', 'Insert UnaryOperator']","['If', 'BinaryOperator', 'Block', 'FieldRead', 'Literal', 'Invocation']","['Invocation', 'VariableRead', 'UnaryOperator']",Partial Match,0.125,0.0,0.0,0.0,0,3,6
1239,1239,"public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { if ( METHOD_2 ( VAR_2 ) ) { buffer . METHOD_1 ( METHOD_3 ( VAR_2 ) , VAR_1 ) ; METHOD_4 ( ) ; } else { METHOD_5 ( null ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { buffer . METHOD_1 ( METHOD_3 ( VAR_2 ) , VAR_1 ) ; METHOD_4 ( ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",1638,['Delete Invocation'],"['Invocation', 'Invocation', 'VariableRead', 'Invocation', 'Block', 'Literal', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1240,1240,"private static void METHOD_1 ( TYPE_1 VAR_1 , int number ) { for ( int i = 0 ; i < number ; i ++ ) { VAR_2 . add ( new TYPE_1 ( STRING_1 , VAR_3 ) ) ; } }","private static void METHOD_1 ( TYPE_1 VAR_1 , int number ) { for ( int i = 0 ; i < number ; i ++ ) { VAR_2 . add ( new TYPE_1 ( STRING_1 ) ) ; } }",['Delete FieldRead'],1639,['Delete Parameter'],['FieldRead'],['Parameter'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1241,1241,public boolean METHOD_1 ( ) { return METHOD_1 ( null ) ; },public void METHOD_1 ( ) { METHOD_1 ( null ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",1640,"['Update Return', 'Update TypeAccess']","['TypeReference', 'Invocation', 'Return']","['Return', 'TypeAccess']",Partial Match,0.25,0.0,0.0,0.0,0,2,3
1242,1242,"protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ! ( VAR_2 ) ) VAR_3 . put ( java.lang.Thread . METHOD_2 ( ) , VAR_1 ) ; return VAR_1 ; }","protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_3 . put ( java.lang.Thread . METHOD_2 ( ) , VAR_1 ) ; return VAR_1 ; }","['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1641,['Delete Invocation'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,5
1243,1243,public TYPE_1 METHOD_1 ( java.lang.String id ) { return VAR_1 . METHOD_1 ( id ) ; },public TYPE_1 METHOD_1 ( java.lang.String id ) { VAR_1 . METHOD_1 ( id ) ; return null ; },"['Move Invocation', 'Insert Literal']",1642,"['Delete Return', 'Insert Return']","['Invocation', 'Literal']","['Return', 'Return']",Partial Match,0.0,0.0,0.0,0.0,0,2,2
1244,1244,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 ) { if ( VAR_2 . METHOD_2 ( ) . equals ( VAR_1 ) ) { return true ; } } return false ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 ) { if ( ( VAR_2 . METHOD_2 ( ) ) == VAR_1 ) { return true ; } } return false ; },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",1643,['Delete Invocation'],"['BinaryOperator', 'Invocation', 'VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1245,1245,"private void METHOD_1 ( java.util.HashMap < java.lang.String , java.lang.Integer > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { for ( java.lang.String VAR_3 : VAR_2 ) if ( ! ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) VAR_4 . put ( VAR_3 , 0 ) ; }","private void METHOD_1 ( java.util.HashMap < java.lang.String , java.lang.Integer > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { for ( java.lang.String VAR_3 : VAR_2 ) { VAR_4 . put ( VAR_3 , 0 ) ; } }","['Move Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1644,['Delete Invocation'],"['Invocation', 'VariableRead', 'VariableRead', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1246,1246,public void METHOD_1 ( ) { java.lang.String path = ( STRING_1 + STRING_2 ) + ( this . number ) ; if ( TYPE_1 . METHOD_2 ( path ) ) { java.io.File file = new java.io.File ( path ) ; VAR_1 . delete ( ) ; } },public void METHOD_1 ( ) { java.lang.String path = STRING_1 + ( this . number ) ; if ( ! ( TYPE_1 . METHOD_2 ( path ) ) ) { java.io.File file = new java.io.File ( path ) ; VAR_1 . delete ( ) ; } },"['Insert UnaryOperator', 'Move FieldRead', 'Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1646,"['Delete Invocation', 'Insert UnaryOperator', 'Update LocalVariable']","['UnaryOperator', 'FieldRead', 'Invocation', 'FieldRead', 'BinaryOperator']","['Invocation', 'UnaryOperator', 'LocalVariable']",Partial Match,0.4,0.3333333333333333,0.2,0.25,1,2,4
1247,1247,public boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; return true ; } return false ; },public boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",1647,"['Delete Invocation', 'Delete Invocation', 'Delete Return']","['Invocation', 'TypeAccess', 'Invocation', 'Literal', 'Return', 'Block', 'If', 'Literal']","['Invocation', 'Invocation', 'Return']",GPT Missed Nodes,0.3333333333333333,0.6666666666666666,0.25,0.36363636363636365,2,1,6
1248,1248,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } VAR_2 . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1649,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1249,1249,boolean METHOD_1 ( TYPE_1 key ) { return this . VAR_1 . METHOD_1 ( key ) ; },void METHOD_1 ( TYPE_1 key ) { this . VAR_1 . METHOD_1 ( key ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",1651,"['Update TypeReference', 'Delete Return']","['TypeReference', 'Invocation', 'Return']","['TypeReference', 'Return']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,2,0,1
1250,1250,public boolean METHOD_1 ( ) { return ( ( this . field ) != null ) && ( this . VAR_1 . getType ( ) . METHOD_1 ( ) ) ; },public boolean METHOD_1 ( ) { return ( this . field ) != null ; },"['Move BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator']",1653,['Delete Invocation'],"['BinaryOperator', 'ThisAccess', 'FieldRead', 'Invocation', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1251,1251,"public void METHOD_1 ( TYPE_1 out , int VAR_1 ) throws java.io.IOException { METHOD_2 ( out , VAR_1 ) ; METHOD_1 ( out ) ; }",public void METHOD_1 ( TYPE_1 out ) throws java.io.IOException { },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1655,"['Delete Parameter', 'Delete Parameter', 'Delete Invocation', 'Delete Invocation']","['TypeReference', 'Parameter', 'VariableRead', 'VariableRead', 'Invocation', 'VariableRead', 'Invocation']","['Parameter', 'Parameter', 'Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.75,0.42857142857142855,0.5454545454545454,3,1,4
1252,1252,"public boolean METHOD_1 ( java.lang.String str , java.lang.String pattern ) { return ( VAR_1 . METHOD_2 ( str , pattern ) ) && ( VAR_1 . METHOD_3 ( str , pattern ) ) ; }","public boolean METHOD_1 ( java.lang.String str , java.lang.String pattern ) { return VAR_1 . METHOD_3 ( str , pattern ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",1657,['Delete Invocation'],"['Invocation', 'TypeAccess', 'VariableRead', 'VariableRead', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1253,1253,"private void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < java.lang.String > VAR_2 , java.util.List < java.lang.Object > values ) { VAR_3 . add ( STRING_1 ) ; VAR_4 . add ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < java.lang.String > VAR_2 , java.util.List < java.lang.Object > values ) { VAR_3 . add ( STRING_1 ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1658,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
1254,1254,public boolean METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) >= ( VAR_3 ) ) { if ( VAR_1 ) { TYPE_1 . METHOD_3 ( VAR_4 . METHOD_4 ( this ) ) ; } return true ; } return false ; },public boolean METHOD_1 ( ) { if ( ( VAR_2 . METHOD_2 ( ) ) >= ( VAR_3 ) ) { TYPE_1 . METHOD_3 ( VAR_4 . METHOD_4 ( this ) ) ; return true ; } return false ; },"['Move If', 'Move BinaryOperator', 'Move Return', 'Delete VariableRead', 'Delete TypeReference', 'Delete Parameter', 'Delete Block', 'Delete If']",1659,['Delete LocalVariable'],"['If', 'BinaryOperator', 'Return', 'VariableRead', 'TypeReference', 'Parameter', 'Block', 'If']",['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,8
1255,1255,public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_2 . isEmpty ( ) ) ) { return VAR_3 ; } return VAR_4 . METHOD_2 ( VAR_1 ) ; },public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { return VAR_4 . METHOD_2 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1660,['Delete LocalVariable'],"['VariableRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'If']",['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,10
1256,1256,public int METHOD_1 ( java.lang.String fieldName ) { return this . VAR_1 . METHOD_2 ( VAR_2 . toUpperCase ( ) ) ; },public int METHOD_1 ( java.lang.String fieldName ) { return this . VAR_1 . METHOD_2 ( fieldName ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1661,['Delete Invocation'],"['VariableRead', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
1257,1257,public java.util.List < TYPE_1 > METHOD_1 ( ) { return new java.util.ArrayList < TYPE_1 > ( this . VAR_1 . values ( ) ) ; },public java.util.Collection < TYPE_1 > METHOD_1 ( ) { return this . VAR_1 . values ( ) ; },"['Update TypeReference', 'Move Invocation', 'Delete ConstructorCall']",1662,"['Update TypeReference', 'Update TypeReference', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeReference', 'Delete Invocation']","['TypeReference', 'Invocation', 'ConstructorCall']","['TypeReference', 'TypeReference', 'Invocation', 'TypeAccess', 'TypeReference', 'Invocation']",Partial Match,0.5,0.16666666666666666,0.3333333333333333,0.2222222222222222,1,5,2
1258,1258,void METHOD_1 ( final TYPE_1 view ) { VAR_1 . METHOD_2 ( view ) ; if ( ! ( view . METHOD_3 ( ) ) ) { VAR_1 . METHOD_1 ( ( ( TYPE_2 ) ( view ) ) ) ; } },void METHOD_1 ( final TYPE_2 view ) { VAR_1 . METHOD_2 ( view ) ; VAR_1 . METHOD_1 ( view ) ; },"['Update Invocation', 'Move Invocation', 'Update TypeReference', 'Move TypeAccess', 'Delete UnaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1663,"['Update TypeAccess', 'Delete UnaryOperator', 'Delete Invocation']","['Invocation', 'Invocation', 'TypeReference', 'TypeAccess', 'UnaryOperator', 'TypeReference', 'VariableRead', 'Invocation', 'Block', 'If']","['TypeAccess', 'UnaryOperator', 'Invocation']",GPT Missed Nodes,0.42857142857142855,0.6666666666666666,0.2,0.30769230769230765,2,1,8
1259,1259,public TYPE_1 show ( ) { TYPE_1 VAR_1 = VAR_2 . get ( ( ( VAR_2 . size ( ) ) - 1 ) ) ; return VAR_1 ; },public TYPE_1 show ( ) { TYPE_1 VAR_1 = VAR_2 . get ( VAR_2 . size ( ) ) ; return VAR_1 ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",1664,['Delete UnaryOperator'],"['Invocation', 'Literal', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1260,1260,public void METHOD_1 ( android.view.View view ) { if ( item . METHOD_2 ( ) ) item . METHOD_3 ( false ) ; else item . METHOD_3 ( true ) ; METHOD_4 ( ) ; },public void METHOD_1 ( android.view.View view ) { item . METHOD_3 ( true ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If', 'Delete Invocation']",1665,"['Delete If', 'Delete Invocation']","['Invocation', 'FieldRead', 'Invocation', 'FieldRead', 'Literal', 'Invocation', 'Block', 'Block', 'If', 'Invocation']","['If', 'Invocation']",GPT Missed Nodes,0.4,1.0,0.2,0.33333333333333337,2,0,8
1261,1261,"public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_2 . METHOD_3 ( ) ) VAR_2 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( new TYPE_3 ( VAR_5 ) ) ; }","public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( new TYPE_3 ( VAR_5 ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1666,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
1262,1262,public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { return STRING_1 ; } return STRING_2 ; },public java.lang.String METHOD_1 ( ) { return STRING_2 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1667,"['Delete Parameter', 'Delete Return', 'Delete LocalVariable', 'Delete Invocation']","['TypeReference', 'Parameter', 'VariableRead', 'Literal', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'If']","['Parameter', 'Return', 'LocalVariable', 'Invocation']",Partial Match,0.18181818181818182,0.5,0.2222222222222222,0.30769230769230765,2,2,7
1263,1263,"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_3 . getId ( ) , VAR_1 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; },"['Update Invocation', 'Delete TypeAccess', 'Delete Invocation']",1668,"['Update Invocation', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,1.0,0.6666666666666666,0.8,2,0,1
1264,1264,public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { new TYPE_2 ( ) . execute ( VAR_1 ) ; return STRING_1 ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return new TYPE_2 ( ) . execute ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead']",1669,['Delete Invocation'],"['Invocation', 'FieldRead']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
1265,1265,public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1672,['Delete Invocation'],"['Invocation', 'Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,7
1266,1266,"private java.lang.String METHOD_1 ( java.lang.String name ) { return VAR_1 . replace ( STRING_1 , STRING_2 ) . replace ( STRING_3 , STRING_2 ) ; }","private java.lang.String METHOD_1 ( java.lang.String name ) { return VAR_1 . replace ( STRING_1 , STRING_2 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1673,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1267,1267,void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( METHOD_2 ( ) ) == null ) && ( METHOD_3 ( ) ) ) { METHOD_4 ( VAR_1 ) ; } },void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_3 ( ) ) { METHOD_4 ( VAR_1 ) ; } },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1674,['Delete Invocation'],"['Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
1268,1268,"TYPE_1 METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; buffer . METHOD_4 ( ) ; return TYPE_2 . METHOD_5 ( VAR_3 . array ( ) . METHOD_6 ( ) , 0 , buffer . METHOD_7 ( ) ) ; }","TYPE_1 METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; buffer . METHOD_4 ( ) ; return TYPE_2 . METHOD_5 ( VAR_3 . array ( ) , 0 , buffer . METHOD_7 ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move Literal', 'Move Invocation', 'Delete Invocation']",1675,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Literal', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1269,1269,"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this . getClass ( ) . METHOD_3 ( ) , STRING_1 ) ; if ( METHOD_4 ( ) ) { METHOD_5 ( ) ; } }",public void METHOD_1 ( ) { METHOD_5 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1676,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'TypeAccess', 'ThisAccess', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,2,0,8
1270,1270,private java.lang.String METHOD_1 ( TYPE_1 type ) { if ( ( type . METHOD_2 ( ) ) == ( VAR_1 ) ) { return this . METHOD_3 ( type . METHOD_4 ( ) ) ; } return this . METHOD_5 ( type ) ; },private java.lang.String METHOD_1 ( TYPE_1 type ) { if ( ( type . METHOD_2 ( ) ) == ( VAR_1 ) ) { return this . METHOD_3 ( type . METHOD_4 ( ) ) ; } else { return this . METHOD_5 ( type ) ; } },"['Insert Block', 'Move Return']",1677,['Insert If'],"['Block', 'Return']",['If'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1271,1271,"public void METHOD_1 ( java.lang.String VAR_1 , int time ) { METHOD_2 ( VAR_1 , VAR_2 , new TYPE_1 ( time ) ) ; if ( METHOD_3 ( VAR_1 ) ) { VAR_3 = time ; } }","public void METHOD_1 ( java.lang.String VAR_1 , int time ) { METHOD_2 ( VAR_1 , VAR_2 , new TYPE_1 ( time ) ) ; VAR_3 = time ; }","['Move Assignment', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1678,['Delete Invocation'],"['Assignment', 'VariableRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,1,0,4
1272,1272,"protected int METHOD_1 ( int x , int y ) { return ( ( y * ( VAR_1 . length ) ) + x ) % ( VAR_1 . length ) ; }","protected int METHOD_1 ( int x , int y ) { return ( x * y ) % ( VAR_1 . length ) ; }","['Update BinaryOperator', 'Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",1679,"['Delete BinaryOperator', 'Delete TypeAccess']","['BinaryOperator', 'VariableRead', 'FieldRead', 'BinaryOperator']","['BinaryOperator', 'TypeAccess']",Partial Match,0.25,0.5,0.25,0.3333333333333333,1,1,3
1273,1273,public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { METHOD_3 ( ) ; } } },public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; } },"['Move If', 'Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1680,"['Delete Block', 'Delete Invocation']","['If', 'Invocation', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Block', 'If']","['Block', 'Invocation']",GPT Missed Nodes,0.4,0.5,0.14285714285714285,0.22222222222222224,1,1,6
1274,1274,"public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return ( VAR_2 == ( VAR_3 ) ) || ( VAR_2 == ( VAR_4 ) ) ; }","public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return VAR_2 == ( VAR_3 ) ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1681,['Delete BinaryOperator'],"['BinaryOperator', 'VariableRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
1275,1275,public void METHOD_1 ( java.util.Date VAR_1 ) { if ( VAR_1 != null ) { this . VAR_1 = new java.util.Date ( VAR_2 . getTime ( ) ) ; } },public void METHOD_1 ( java.util.Date VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1682,"['Delete Invocation', 'Delete TypeAccess']","['Assignment', 'VariableRead', 'TypeAccess', 'Invocation', 'ConstructorCall', 'Literal', 'BinaryOperator', 'Block', 'If']","['Invocation', 'TypeAccess']",GPT Missed Nodes,0.2222222222222222,1.0,0.2222222222222222,0.3636363636363636,2,0,7
1276,1276,public int METHOD_1 ( int position ) { return ( ( METHOD_2 ( position ) ) == ( VAR_1 ) ) || ( ( METHOD_2 ( position ) ) == ( VAR_2 ) ) ? VAR_3 . METHOD_3 ( ) : VAR_4 . METHOD_1 ( position ) ; },public int METHOD_1 ( int position ) { return ( METHOD_2 ( position ) ) == ( VAR_1 ) ? VAR_3 . METHOD_3 ( ) : VAR_4 . METHOD_1 ( position ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1683,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'Invocation', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1277,1277,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( null ) ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( new TYPE_1 ( ) ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( null ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( new TYPE_1 ( ) ) ; } },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1684,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1278,1278,private void METHOD_1 ( ) { ( ( TYPE_1 ) ( METHOD_2 ( VAR_1 ) ) ) . setText ( ( STRING_1 + ( ( VAR_2 ) - INT_1 ) ) ) ; },private void METHOD_1 ( ) { ( ( TYPE_1 ) ( METHOD_2 ( VAR_1 ) ) ) . setText ( ( STRING_1 + ( VAR_2 ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1685,['Delete Assignment'],"['BinaryOperator', 'BinaryOperator', 'FieldRead', 'FieldRead', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1279,1279,"public void remove ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_4 class , VAR_5 . getId ( ) ) ; VAR_6 . remove ( VAR_2 ) ; VAR_7 . METHOD_2 ( VAR_2 ) ; }","public void remove ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_4 class , VAR_5 . getId ( ) ) ; VAR_7 . METHOD_2 ( VAR_2 ) ; VAR_6 . remove ( VAR_2 ) ; }",['Move Invocation'],1686,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1280,1280,"public java.lang.String METHOD_1 ( java.lang.String key ) { return METHOD_2 ( METHOD_1 ( key , VAR_1 . String class , null ) ) ; }","public java.lang.String METHOD_1 ( java.lang.String key ) { return METHOD_1 ( key , VAR_1 . String class , null ) ; }","['Move Invocation', 'Delete Invocation']",1688,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1281,1281,public boolean METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) { java.lang.System.out.println ( STRING_1 ) ; return true ; } } return false ; },public boolean METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) { return true ; } } return false ; },['Move Invocation'],1689,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1282,1282,public boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( 0 ) ) == ( VAR_1 . METHOD_2 ( ( ( ( VAR_2 ) * ( VAR_2 ) ) + 1 ) ) ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( 0 ) ) == ( VAR_1 . METHOD_2 ( ( ( VAR_2 ) + 1 ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Invocation', 'Move Invocation', 'Update BinaryOperator', 'Move BinaryOperator', 'Move Literal', 'Delete FieldRead', 'Delete BinaryOperator']",1691,['Delete BinaryOperator'],"['BinaryOperator', 'BinaryOperator', 'Invocation', 'Invocation', 'BinaryOperator', 'BinaryOperator', 'Literal', 'FieldRead', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.25,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1283,1283,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_2 . setEnabled ( true ) ; VAR_1 . METHOD_2 ( false ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 . setEnabled ( true ) ; VAR_1 . METHOD_2 ( false ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1693,['Delete Invocation'],"['Invocation', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,7
1284,1284,public static java.util.List < TYPE_1 > METHOD_1 ( ) { return new java.util.ArrayList ( VAR_1 . values ( ) ) ; },public static java.util.List < TYPE_1 > METHOD_1 ( ) { return ( ( java.util.List < TYPE_1 > ) ( VAR_1 . values ( ) ) ) ; },"['Insert Invocation', 'Insert TypeReference', 'Move TypeAccess', 'Insert TypeReference', 'Delete Invocation', 'Delete ConstructorCall']",1694,"['Insert TypeReference', 'Insert TypeReference']","['Invocation', 'TypeReference', 'TypeAccess', 'TypeReference', 'Invocation', 'ConstructorCall']","['TypeReference', 'TypeReference']",GPT Missed Nodes,0.25,1.0,0.3333333333333333,0.5,2,0,4
1285,1285,public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_2 ) && ( VAR_3 . METHOD_2 ( VAR_1 ) ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1696,['Delete VariableRead'],"['Invocation', 'FieldRead', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1286,1286,"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; if ( VAR_2 ) { METHOD_3 ( ) ; } else if ( VAR_3 ) { METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; if ( VAR_2 ) { METHOD_3 ( ) ; } else { METHOD_5 ( ) ; } }","['Move If', 'Move FieldRead', 'Move Block', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1697,['Delete Invocation'],"['If', 'FieldRead', 'Block', 'FieldRead', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.125,0.2222222222222222,1,0,7
1287,1287,"protected boolean METHOD_1 ( TYPE_1 < ? > message , long VAR_1 ) { VAR_2 . set ( java.lang.Thread . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( ) ; throw new TYPE_2 ( STRING_1 ) ; }","protected boolean METHOD_1 ( TYPE_1 < ? > message , long VAR_1 ) { VAR_3 . METHOD_3 ( ) ; VAR_2 . set ( java.lang.Thread . METHOD_2 ( ) ) ; throw new TYPE_2 ( STRING_1 ) ; }",['Move Invocation'],1698,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1288,1288,public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; },"['Move TypeAccess', 'Move TypeAccess', 'Delete Literal', 'Delete Invocation']",1699,"['Delete Invocation', 'Delete Invocation', 'Update VariableRead', 'Update VariableRead']","['TypeAccess', 'TypeAccess', 'Literal', 'Invocation']","['Invocation', 'Invocation', 'VariableRead', 'VariableRead']",Partial Match,0.25,0.25,0.25,0.25,1,3,3
1289,1289,private boolean METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 class ) ; if ( VAR_1 != null ) { VAR_3 = VAR_1 . METHOD_5 ( ) ; } return ( VAR_3 ) != null ; },private boolean METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 class ) ; VAR_3 = VAR_1 . METHOD_5 ( ) ; return ( VAR_3 ) != null ; },"['Move Assignment', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1700,['Delete If'],"['Assignment', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['If'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1290,1290,"public static void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_2 . toLowerCase ( ) ) ; }","public static void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 ) ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1701,['Delete Invocation'],"['VariableRead', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
1291,1291,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) && ( TYPE_1 . METHOD_2 ( STRING_1 ) ) ) { VAR_2 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1702,['Delete Invocation'],"['FieldRead', 'TypeAccess', 'TypeAccess', 'Invocation', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1292,1292,private TYPE_1 METHOD_1 ( int id ) { java.lang.String VAR_1 = java.lang.String . METHOD_2 ( id ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_2 . METHOD_3 ( ) . equals ( VAR_1 ) ) { return VAR_2 ; } } return null ; },private TYPE_1 METHOD_1 ( int id ) { java.lang.String VAR_1 = java.lang.String . METHOD_2 ( id ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( ( VAR_2 . METHOD_3 ( ) ) == VAR_1 ) { return VAR_2 ; } } },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Return']",1703,"['Delete Return', 'Delete Return', 'Delete Invocation']","['BinaryOperator', 'Invocation', 'VariableRead', 'Invocation', 'Literal', 'Return']","['Return', 'Return', 'Invocation']",GPT Missed Nodes,0.4,0.6666666666666666,0.3333333333333333,0.4444444444444444,2,1,4
1293,1293,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { VAR_3 . METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1704,['Delete Wra'],"['Invocation', 'FieldRead', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1294,1294,protected int METHOD_1 ( int index ) { return ( VAR_1 . get ( ( ( VAR_1 . position ( ) ) + index ) ) ) & INT_1 ; },protected int METHOD_1 ( int index ) { return VAR_1 . get ( ( ( VAR_1 . position ( ) ) + index ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1705,['Delete Assignment'],"['Invocation', 'FieldRead', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1295,1295,public TYPE_1 METHOD_1 ( final java.lang.String path ) { this . VAR_1 = VAR_2 . get ( TYPE_2 . METHOD_2 ( path ) ) . METHOD_3 ( ) ; return this ; },public TYPE_1 METHOD_1 ( final java.lang.String path ) { this . VAR_1 = VAR_2 . get ( TYPE_2 . METHOD_2 ( path ) ) ; return this ; },"['Move Invocation', 'Delete Invocation']",1706,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1296,1296,"public java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) { return VAR_2 . replaceAll ( VAR_3 , STRING_1 ) . trim ( ) ; }","public java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) { return VAR_2 . replaceAll ( VAR_3 , STRING_1 ) ; }","['Move Invocation', 'Delete Invocation']",1708,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1297,1297,public boolean METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { return this . VAR_1 . METHOD_1 ( ) ; } return false ; },public boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; },"['Move Return', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1709,['Delete Return'],"['Return', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']",['Return'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1298,1298,public void METHOD_1 ( ) { this . VAR_1 = VAR_2 . getText ( ) . trim ( ) . toLowerCase ( ) ; this . VAR_3 = VAR_4 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { this . VAR_1 = VAR_2 . getText ( ) . trim ( ) ; this . VAR_3 = VAR_4 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete Invocation']",1710,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1299,1299,"public void METHOD_1 ( int position , float VAR_1 , int VAR_2 ) { if ( ( VAR_3 . METHOD_2 ( ) ) > 0 ) VAR_4 . METHOD_3 ( VAR_3 . METHOD_4 ( position ) . METHOD_5 ( ) ) ; VAR_4 . METHOD_6 ( ) ; }","public void METHOD_1 ( int position , float VAR_1 , int VAR_2 ) { VAR_4 . METHOD_3 ( VAR_3 . METHOD_4 ( position ) . METHOD_5 ( ) ) ; VAR_4 . METHOD_6 ( ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1711,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1300,1300,public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_4 ) { VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } else { VAR_3 . METHOD_5 ( ) ; VAR_1 . METHOD_5 ( ) ; } },public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_4 ) { VAR_3 . METHOD_5 ( ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Move Invocation']",1712,"['Update Invocation', 'Update Invocation']","['Invocation', 'Invocation', 'Invocation', 'Invocation']","['Invocation', 'Invocation']",Exact Match,1.0,0.0,0.0,0.0,0,2,4
1301,1301,public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_2 ) && ( ( VAR_3 ) == ( VAR_4 ) ) ) { METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_3 ) == ( VAR_4 ) ) { METHOD_2 ( ) ; } },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1714,['Delete VariableRead'],"['BinaryOperator', 'FieldRead', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1302,1302,public void METHOD_1 ( float VAR_1 ) { if ( VAR_1 != ( VAR_2 ) ) { VAR_2 = VAR_1 ; METHOD_2 ( ) ; } },public void METHOD_1 ( float VAR_1 ) { VAR_2 = VAR_1 ; },"['Move Assignment', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",1715,"['Delete Assignment', 'Delete VariableRead', 'Delete VariableRead']","['Assignment', 'VariableRead', 'FieldRead', 'BinaryOperator', 'Invocation', 'Block', 'If']","['Assignment', 'VariableRead', 'VariableRead']",GPT Missed Nodes,0.2857142857142857,0.3333333333333333,0.14285714285714285,0.2,1,2,6
1303,1303,"public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_2 . assertTrue ( VAR_3 . METHOD_3 ( VAR_1 , STRING_1 ) ) ; }","public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; assertTrue ( VAR_3 . METHOD_3 ( VAR_1 , STRING_1 ) ) ; }",['Update TypeAccess'],1716,['Delete TypeAccess'],['TypeAccess'],['TypeAccess'],Exact Match,1.0,0.0,0.0,0.0,0,1,1
1304,1304,public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 != ( target ) ) { target = VAR_1 ; METHOD_2 ( ) ; } },public void METHOD_1 ( int VAR_1 ) { target = VAR_1 ; METHOD_2 ( ) ; },"['Move Assignment', 'Move Invocation', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1717,['Delete Assignment'],"['Assignment', 'Invocation', 'VariableRead', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['Assignment'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
1305,1305,public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 != ( this . VAR_1 ) ) { this . VAR_1 = VAR_1 ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } } },public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 != ( this . VAR_1 ) ) { this . VAR_1 = VAR_1 ; VAR_2 . METHOD_2 ( VAR_1 ) ; } },"['Move If', 'Move BinaryOperator', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1718,['Delete Invocation'],"['If', 'BinaryOperator', 'Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,8
1306,1306,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 , java.lang.String . METHOD_3 ( ( ( ( float ) ( VAR_1 . METHOD_4 ( ) ) ) / INT_1 ) ) , 0 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , java.lang.String . METHOD_3 ( ( ( ( float ) ( VAR_1 . METHOD_4 ( ) ) ) / INT_1 ) ) , 0 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1720,['Delete Assignment'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1307,1307,"public void METHOD_1 ( ) { if ( VAR_1 . equals ( VAR_2 . get ( token ) ) ) { VAR_2 . remove ( token ) ; VAR_3 . METHOD_2 ( token , VAR_4 ) ; } }","public void METHOD_1 ( ) { if ( VAR_2 . get ( token ) . equals ( url ) ) { VAR_2 . remove ( token ) ; VAR_3 . METHOD_2 ( token , VAR_4 ) ; } }","['Insert FieldRead', 'Delete TypeAccess']",1722,"['Update Invocation', 'Update VariableRead']","['FieldRead', 'TypeAccess']","['Invocation', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,2
1308,1308,public int METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_2 . length ; } else { return 0 ; } },public int METHOD_1 ( ) { return VAR_2 . length ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1723,"['Delete Return', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.16666666666666666,0.5,0.1111111111111111,0.1818181818181818,1,1,8
1309,1309,"TYPE_1 < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String path ) ;","TYPE_1 < java.lang.String > METHOD_1 ( java.lang.String VAR_2 , java.lang.String VAR_1 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String path ) ;",['Move Parameter'],1724,"['Move Parameter', 'Move Parameter']",['Parameter'],"['Parameter', 'Parameter']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
1310,1310,public void METHOD_1 ( TYPE_1 response ) { java.lang.System.out.println ( STRING_1 ) ; if ( VAR_1 . get ( STRING_2 ) . toString ( ) . METHOD_2 ( STRING_3 ) ) { VAR_2 = java.lang.Integer.parseInt ( VAR_1 . get ( STRING_4 ) . toString ( ) ) ; } },public void METHOD_1 ( TYPE_1 response ) { java.lang.System.out.println ( STRING_1 ) ; if ( ( VAR_1 . get ( STRING_2 ) ) == STRING_3 ) { VAR_2 = java.lang.Integer.parseInt ( VAR_1 . get ( STRING_4 ) . toString ( ) ) ; } },"['Insert BinaryOperator', 'Move Invocation', 'Insert FieldRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",1725,"['Delete Invocation', 'Delete Invocation', 'Insert VariableRead']","['BinaryOperator', 'Invocation', 'FieldRead', 'Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation', 'VariableRead']",Partial Match,0.2,0.6666666666666666,0.3333333333333333,0.4444444444444444,2,1,4
1311,1311,public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 ) < 0 ) { return null ; } return VAR_3 . get ( VAR_2 ) ; },public TYPE_1 METHOD_1 ( ) { return VAR_3 . get ( VAR_2 ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1726,"['Delete Invocation', 'Delete Return', 'Delete LocalVariable']","['TypeAccess', 'TypeAccess', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']","['Invocation', 'Return', 'LocalVariable']",Partial Match,0.2222222222222222,0.6666666666666666,0.2,0.30769230769230765,2,1,8
1312,1312,public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . setEnabled ( false ) ; VAR_3 . setEnabled ( false ) ; if ( VAR_1 ) { VAR_4 . setEnabled ( false ) ; } VAR_5 . setEnabled ( false ) ; VAR_6 . setEnabled ( false ) ; },public void METHOD_1 ( ) { VAR_2 . setEnabled ( false ) ; VAR_3 . setEnabled ( false ) ; VAR_4 . setEnabled ( false ) ; VAR_5 . setEnabled ( false ) ; VAR_6 . setEnabled ( false ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Block', 'Delete If']",1727,"['Delete LocalVariable', 'Delete Block']","['Invocation', 'TypeReference', 'Parameter', 'VariableRead', 'Block', 'If']","['LocalVariable', 'Block']",Partial Match,0.14285714285714285,0.5,0.16666666666666666,0.25,1,1,5
1313,1313,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( ( ( java.util.Date ) ( VAR_2 . getValue ( ) ) ) , ( ( java.util.Date ) ( VAR_3 . getValue ( ) ) ) , VAR_4 ) ) { METHOD_3 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ( ( java.util.Date ) ( VAR_2 . getValue ( ) ) ) , ( ( java.util.Date ) ( VAR_3 . getValue ( ) ) ) , VAR_4 ) ; METHOD_3 ( ) ; }","['Move Invocation', 'Move Invocation', 'Delete Block', 'Delete If']",1729,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,4
1314,1314,public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_2 ( ) . METHOD_5 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_3 . METHOD_2 ( ) . METHOD_5 ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; },['Move Invocation'],1730,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1315,1315,"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) VAR_1 . METHOD_1 ( ) ; assertEquals ( VAR_1 . METHOD_2 ( ) . size ( ) , INT_2 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) VAR_1 . METHOD_1 ( ) ; assertEquals ( VAR_1 . METHOD_2 ( ) . length , INT_2 ) ; }","['Update Invocation', 'Move Invocation', 'Insert FieldRead', 'Move TypeAccess', 'Move Invocation', 'Delete Invocation']",1731,['Update Invocation'],"['Invocation', 'Invocation', 'FieldRead', 'TypeAccess', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1316,1316,protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) VAR_3 . add ( VAR_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . add ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1733,['Delete Invocation'],"['Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1317,1317,"public java.lang.String METHOD_1 ( java.lang.String name ) { return VAR_1 . replaceAll ( STRING_1 , STRING_2 ) ; }","public java.lang.String METHOD_1 ( java.lang.String name ) { return VAR_1 . replaceAll ( STRING_1 , STRING_2 ) . toLowerCase ( ) ; }","['Insert Invocation', 'Move Invocation']",1734,['Insert Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1318,1318,public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; },['Move Invocation'],1735,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1319,1319,public boolean equals ( java.lang.Object obj ) { if ( obj instanceof TYPE_1 ) return ( ( ( TYPE_1 ) ( obj ) ) . METHOD_1 ( ) ) == ( METHOD_1 ( ) ) ; else return false ; },public boolean equals ( java.lang.Object obj ) { return ( ( ( TYPE_1 ) ( obj ) ) . METHOD_1 ( ) ) == ( METHOD_1 ( ) ) ; },"['Move Return', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1736,['Delete BinaryOperator'],"['Return', 'VariableRead', 'TypeAccess', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']",['BinaryOperator'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1320,1320,"public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , INT_1 ) ; update ( ) ; VAR_1 . METHOD_3 ( ) ; }","public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , INT_1 ) ; VAR_1 . METHOD_3 ( ) ; update ( ) ; }",['Move Invocation'],1737,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1321,1321,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { METHOD_3 ( ) ; } else if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_3 ) ) { METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If']",1738,['Delete Block'],"['VariableRead', 'Invocation', 'FieldRead', 'BinaryOperator', 'Invocation', 'Block', 'VariableRead', 'Invocation', 'FieldRead', 'BinaryOperator', 'Invocation', 'Block', 'If', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.06666666666666667,0.125,1,0,14
1322,1322,public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_5 . METHOD_5 ( ) ) ; } },public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_5 . METHOD_5 ( ) ) ; VAR_2 . METHOD_2 ( ) ; } },['Move Invocation'],1739,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1323,1323,public int METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) . size ( ) ) == 0 ) { return 0 ; } return ( METHOD_3 ( ) ) + 1 ; },public int METHOD_1 ( ) { return ( METHOD_3 ( ) ) + 1 ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1740,['Delete Return'],"['TypeAccess', 'Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1324,1324,protected TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { VAR_2 = METHOD_2 ( ) ; VAR_1 = true ; } return VAR_2 ; },protected TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { VAR_1 = true ; VAR_2 = METHOD_2 ( ) ; } return METHOD_1 ( ) ; },"['Move Assignment', 'Insert Invocation', 'Delete FieldRead']",1741,"['Update Return', 'Update Return', 'Update Invocation']","['Assignment', 'Invocation', 'FieldRead']","['Return', 'Return', 'Invocation']",Partial Match,0.25,0.0,0.0,0.0,0,3,3
1325,1325,public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 = VAR_2 . getValue ( METHOD_3 ( ) ) ; } },public void METHOD_1 ( ) { VAR_1 = VAR_2 . getValue ( METHOD_3 ( ) ) ; },"['Move Assignment', 'Delete Invocation', 'Delete Block', 'Delete If']",1742,['Delete Invocation'],"['Assignment', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.25,0.4,1,0,3
1326,1326,"public void METHOD_1 ( java.lang.Exception VAR_1 , java.lang.String message ) { this . METHOD_1 ( TYPE_1 . METHOD_2 ( VAR_1 , message , 1 ) ) ; }",public void METHOD_1 ( java.lang.Exception VAR_1 ) { this . METHOD_1 ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Literal']",1747,"['Delete Parameter', 'Delete Invocation']","['TypeReference', 'Parameter', 'VariableRead', 'Literal']","['Parameter', 'Invocation']",Partial Match,0.2,0.5,0.25,0.3333333333333333,1,1,3
1327,1327,private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) VAR_2 . METHOD_3 ( VAR_1 ) ; },private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",1748,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1328,1328,"public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) < ( VAR_3 ) ) { TYPE_1 . METHOD_2 ( VAR_4 , ( STRING_1 + ( VAR_2 ) ) ) ; return ; } VAR_5 . METHOD_3 ( VAR_1 ) ; }",public void METHOD_1 ( boolean VAR_1 ) { VAR_5 . METHOD_3 ( VAR_1 ) ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1749,"['Delete Invocation', 'Delete Return']","['FieldRead', 'FieldRead', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Invocation', 'Return', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.2857142857142857,1.0,0.16666666666666666,0.2857142857142857,2,0,10
1329,1329,public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) && ( ( VAR_2 ) != null ) ) { return VAR_2 . METHOD_1 ( ) ; } else { return null ; } },public TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return VAR_2 . METHOD_1 ( ) ; } else { return null ; } },"['Move FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1750,['Delete Invocation'],"['FieldRead', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1330,1330,"public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_3 . show ( METHOD_3 ( ) , STRING_1 ) ; } }","public void METHOD_1 ( android.view.View VAR_1 ) { VAR_3 . show ( METHOD_3 ( ) , STRING_1 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1751,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
1331,1331,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( VAR_2 ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1752,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1332,1332,public void METHOD_1 ( TYPE_1 VAR_1 ) { main . METHOD_2 ( ) . METHOD_3 ( ) ; main . METHOD_4 ( ) . METHOD_5 ( ) ; main . METHOD_6 ( ) ; new TYPE_2 ( new TYPE_3 ( null ) ) . start ( false ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { main . METHOD_2 ( ) . METHOD_3 ( ) ; main . METHOD_4 ( ) . METHOD_5 ( ) ; main . METHOD_6 ( ) ; new TYPE_2 ( new TYPE_3 ( null ) ) ; },"['Move ConstructorCall', 'Delete Literal', 'Delete Invocation']",1753,['Delete Invocation'],"['ConstructorCall', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
1333,1333,private void METHOD_1 ( TYPE_1 field ) { if ( ( field != null ) && ( ! ( VAR_1 ) ) ) { field . METHOD_2 ( VAR_2 ) ; } VAR_3 = false ; METHOD_3 ( ) ; },private void METHOD_1 ( ) { VAR_3 = false ; METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1755,"['Delete LocalVariable', 'Delete Invocation']","['TypeReference', 'Parameter', 'VariableRead', 'Literal', 'BinaryOperator', 'FieldRead', 'UnaryOperator', 'BinaryOperator', 'VariableRead', 'TypeAccess', 'Invocation', 'Block', 'If']","['LocalVariable', 'Invocation']",Partial Match,0.08333333333333333,0.5,0.07692307692307693,0.13333333333333336,1,1,12
1334,1334,"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( ! VAR_2 ) && ( VAR_1 . METHOD_2 ( ) ) ) { METHOD_3 ( VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ! VAR_2 ) { METHOD_3 ( VAR_1 ) ; } }","['Move UnaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",1756,['Delete Invocation'],"['UnaryOperator', 'VariableRead', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.25,0.4,1,0,3
1335,1335,public java.util.List < java.util.Set < TYPE_1 > > METHOD_1 ( ) { return new java.util.ArrayList < java.util.Set < TYPE_1 > > ( VAR_1 ) ; },public java.util.List < java.util.Set < TYPE_1 > > METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete ConstructorCall']",1757,['Delete Invocation'],"['FieldRead', 'ConstructorCall']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1336,1336,"public void METHOD_1 ( TYPE_1 p , TYPE_2 target ) { if ( ( VAR_1 ) != null ) { TYPE_3 . METHOD_2 ( p ) ; } else { java.lang.System.err.println ( STRING_1 ) ; } }","public void METHOD_1 ( TYPE_1 p , TYPE_2 target ) { TYPE_3 . METHOD_2 ( p ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1758,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'FieldRead', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.09090909090909091,0.16666666666666669,1,0,10
1337,1337,public void METHOD_1 ( TYPE_1 listener ) { if ( VAR_1 . METHOD_2 ( ) ) listener . METHOD_3 ( VAR_1 ) ; listener . METHOD_4 ( VAR_1 ) ; listener . METHOD_5 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 listener ) { listener . METHOD_3 ( VAR_1 ) ; listener . METHOD_4 ( VAR_1 ) ; listener . METHOD_5 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1759,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
1338,1338,"public static TYPE_1 start ( TYPE_2 VAR_1 , boolean VAR_2 ) throws TYPE_3 { return VAR_3 . start ( VAR_1 , null , VAR_2 ) . METHOD_1 ( ) ; }","public static TYPE_1 start ( TYPE_2 VAR_1 , boolean VAR_2 ) throws TYPE_3 { return VAR_3 . start ( VAR_1 , null , VAR_2 ) ; }","['Move Invocation', 'Delete Invocation']",1760,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1339,1339,"public void METHOD_1 ( ) { assertEquals ( false , c . METHOD_2 ( null ) ) ; }",public void METHOD_1 ( ) { c . METHOD_2 ( null ) ; },"['Move Invocation', 'Delete Literal', 'Delete Invocation']",1761,['Delete Invocation'],"['Invocation', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
1340,1340,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 ) ) { METHOD_2 ( ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1762,['Delete Invocation'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,5
1341,1341,public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) == VAR_1 ) { return ; } VAR_2 = VAR_1 ; if ( ( ! VAR_1 ) && ( ( VAR_3 ) != null ) ) { VAR_3 . METHOD_2 ( false ) ; } },public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) == VAR_1 ) { return ; } VAR_2 = VAR_1 ; if ( ! VAR_1 ) { VAR_3 . METHOD_2 ( false ) ; } },"['Move UnaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1763,"['Delete Invocation', 'Delete VariableRead']","['UnaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']","['Invocation', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,5
1342,1342,"public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( this , 1 ) ; VAR_2 . METHOD_3 ( this ) ; } else { } }","public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( this , 1 ) ; VAR_2 . METHOD_3 ( this ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete Block', 'Delete If']",1765,['Delete Invocation'],"['Invocation', 'Invocation', 'FieldRead', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,6
1343,1343,public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 ; } else { METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; } return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return VAR_1 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1766,"['Delete Invocation', 'Delete Return']","['FieldRead', 'Literal', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'TypeAccess', 'Invocation', 'Invocation', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.25,1.0,0.18181818181818182,0.3076923076923077,2,0,9
1344,1344,"public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { return VAR_1 . equals ( VAR_2 ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { return ( VAR_1 . getId ( ) ) == ( ( ( TYPE_1 ) ( VAR_2 ) ) . getId ( ) ) ; }","['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Insert Invocation', 'Insert VariableRead', 'Insert TypeReference', 'Delete VariableRead']",1767,"['Insert BinaryOperator', 'Insert Invocation', 'Insert Invocation', 'Insert TypeReference', 'Insert TypeReference']","['BinaryOperator', 'Invocation', 'Invocation', 'Invocation', 'VariableRead', 'TypeReference', 'VariableRead']","['BinaryOperator', 'Invocation', 'Invocation', 'TypeReference', 'TypeReference']",GPT Missed Nodes,0.75,0.6,0.42857142857142855,0.5,3,2,4
1345,1345,"public void METHOD_1 ( ) { if ( ( getContext ( ) ) != null ) { TYPE_1 . METHOD_2 ( getContext ( ) , VAR_1 , VAR_2 ) . show ( ) ; } }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( getContext ( ) , VAR_1 , VAR_2 ) . show ( ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1769,['Delete Invocation'],"['Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1346,1346,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 ) { VAR_4 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 ) { VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_2 , VAR_3 ) ; }",['Move Invocation'],1771,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1347,1347,public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( ( VAR_1 . METHOD_2 ( ) ) == null ) { VAR_1 . METHOD_3 ( this ) ; } VAR_2 . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_1 . METHOD_3 ( this ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1772,['Delete Invocation'],"['Invocation', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1348,1348,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setEnabled ( VAR_3 . METHOD_2 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_3 . METHOD_2 ( ) ) { VAR_2 . setEnabled ( true ) ; } else { VAR_2 . setEnabled ( false ) ; } },"['Insert If', 'Move Invocation', 'Insert Block', 'Insert Block', 'Insert Invocation', 'Insert Invocation', 'Move TypeAccess', 'Insert Literal', 'Insert TypeAccess', 'Insert Literal', 'Delete Invocation']",1774,"['Insert Invocation', 'Insert Invocation', 'Insert Invocation']","['If', 'Invocation', 'Block', 'Block', 'Invocation', 'Invocation', 'TypeAccess', 'Literal', 'TypeAccess', 'Literal', 'Invocation']","['Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.2,0.6666666666666666,0.18181818181818182,0.28571428571428575,2,1,9
1349,1349,"public static final boolean METHOD_1 ( float position , float VAR_1 , float VAR_2 , float VAR_3 ) { return TYPE_1 . METHOD_2 ( position , ( VAR_2 + VAR_1 ) , ( VAR_3 - VAR_1 ) ) ; }","public static final boolean METHOD_1 ( float VAR_2 , float VAR_3 , float position , float VAR_1 ) { return TYPE_1 . METHOD_2 ( position , ( VAR_2 + VAR_1 ) , ( VAR_3 - VAR_1 ) ) ; }","['Move Parameter', 'Move Parameter']",1775,"['Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable']","['Parameter', 'Parameter']","['LocalVariable', 'LocalVariable', 'LocalVariable', 'LocalVariable']",Partial Match,0.0,0.0,0.0,0.0,0,4,2
1350,1350,public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 > 1 ) { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1776,['Delete Assignment'],"['Assignment', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Assignment'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1351,1351,private boolean METHOD_1 ( final int VAR_1 ) { VAR_2 &= ~ VAR_1 ; return ( VAR_2 ) != 0 ; },private boolean METHOD_1 ( final int VAR_1 ) { VAR_2 &= ~ VAR_1 ; if ( ( VAR_2 ) == 0 ) { return false ; } return true ; },"['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal']",1777,"['Insert BinaryOperator', 'Insert UnaryOperator']","['If', 'BinaryOperator', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Literal']","['BinaryOperator', 'UnaryOperator']",Partial Match,0.16666666666666666,0.0,0.0,0.0,0,2,7
1352,1352,private java.util.Set < TYPE_1 > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( VAR_1 . values ( ) ) ; },private java.util.Set < TYPE_1 > METHOD_1 ( ) { return ( ( java.util.Set < TYPE_1 > ) ( VAR_1 . values ( ) ) ) ; },"['Update Invocation', 'Insert TypeReference', 'Move TypeAccess', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation']",1778,"['Delete Invocation', 'Insert TypeReference']","['Invocation', 'TypeReference', 'TypeAccess', 'TypeReference', 'TypeAccess', 'Invocation']","['Invocation', 'TypeReference']",GPT Missed Nodes,0.6666666666666666,1.0,0.3333333333333333,0.5,2,0,4
1353,1353,public java.lang.String METHOD_1 ( ) { return label ; },public java.util.List < java.lang.String > METHOD_1 ( ) { return label ; },"['Update TypeReference', 'Insert TypeReference']",1779,['Update TypeAccess'],"['TypeReference', 'TypeReference']",['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1354,1354,public boolean METHOD_1 ( java.lang.Object VAR_1 ) { return ( VAR_1 instanceof java.lang.String ) || ( VAR_1 == null ) ; },public boolean METHOD_1 ( java.lang.Object VAR_1 ) { return VAR_1 instanceof java.lang.String ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1780,['Delete UnaryOperator'],"['BinaryOperator', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1355,1355,private void METHOD_1 ( java.io.File VAR_1 ) { VAR_2 . info ( ( STRING_1 + ( java.lang.String . METHOD_2 ( VAR_3 . delete ( ) ) ) ) ) ; },private void METHOD_1 ( java.io.File VAR_1 ) { VAR_3 . delete ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation']",1781,"['Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead']","['Invocation', 'TypeAccess', 'FieldRead', 'TypeAccess', 'Invocation', 'BinaryOperator', 'Invocation']","['Invocation', 'TypeAccess', 'Invocation', 'VariableRead']",Partial Match,0.4,0.75,0.42857142857142855,0.5454545454545454,3,1,4
1356,1356,private boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_2 . equals ( VAR_3 ) ) || ( VAR_2 . equals ( VAR_4 ) ) ; },private boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . equals ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",1782,['Delete BinaryOperator'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
1357,1357,public java.lang.String METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return STRING_1 ; } else { return STRING_2 ; } },public java.lang.String METHOD_1 ( ) { return STRING_1 ; },"['Move Return', 'Delete Invocation', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1783,"['Delete Block', 'Delete Invocation', 'Delete Return']","['Return', 'Invocation', 'Block', 'FieldRead', 'Return', 'Block', 'If']","['Block', 'Invocation', 'Return']",GPT Missed Nodes,0.6,1.0,0.42857142857142855,0.6,3,0,4
1358,1358,public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_2 = VAR_1 ; return this ; },public void METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_2 = VAR_1 ; },"['Update TypeReference', 'Delete ThisAccess', 'Delete Return']",1784,"['Update TypeAccess', 'Delete ReturnStatement']","['TypeReference', 'ThisAccess', 'Return']","['TypeAccess', 'ReturnStatement']",Partial Match,0.0,0.0,0.0,0.0,0,2,3
1359,1359,"public TYPE_1 < java.lang.Integer > METHOD_1 ( java.lang.Integer VAR_1 ) { return METHOD_2 ( ( ( int ) ( VAR_1 ) ) , ( ( length ) - ( offset ) ) ) ; }","public TYPE_1 < java.lang.Integer > METHOD_1 ( java.lang.Integer VAR_1 ) { return METHOD_2 ( ( ( int ) ( VAR_1 ) ) , length ) ; }","['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1785,['Delete UnaryOperator'],"['FieldRead', 'FieldRead', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1360,1360,public void METHOD_1 ( ) { METHOD_2 ( ) ; try { METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } catch ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_7 ( ) ; } },public void METHOD_1 ( ) { try { METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_2 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } catch ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_7 ( ) ; } },['Move Invocation'],1786,"['Delete Invocation', 'Move Invocation']",['Invocation'],"['Invocation', 'Invocation']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
1361,1361,"public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 , VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . execute ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 , VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; }","['Move Invocation', 'Delete Invocation']",1787,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1362,1362,public void METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 ) { for ( java.lang.Integer VAR_2 : VAR_1 ) { VAR_3 . delete ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 . get ( VAR_2 ) . METHOD_3 ( ) ) ; } },public void METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 ) { for ( java.lang.Integer VAR_2 : VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_3 . get ( VAR_2 ) . METHOD_3 ( ) ) ; VAR_3 . delete ( VAR_2 ) ; } },['Move Invocation'],1789,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1363,1363,private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this ) . METHOD_1 ( ) ; METHOD_3 ( ) ; },private void METHOD_1 ( ) { METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( this ) . METHOD_1 ( ) ; },['Move Invocation'],1790,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1364,1364,"public static void METHOD_1 ( int [ ] a , int [ ] p ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 . METHOD_2 ( p ) ; VAR_2 . METHOD_3 ( a , p ) ; VAR_3 . METHOD_4 ( a , p ) ; }","public static void METHOD_1 ( int [ ] a , int [ ] p ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_3 ( a , p ) ; VAR_3 . METHOD_4 ( a , p ) ; VAR_1 . METHOD_2 ( p ) ; }",['Move Invocation'],1791,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1365,1365,public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { if ( VAR_2 . equals ( VAR_3 ) ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } },public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1792,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1366,1366,public boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) . METHOD_3 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; } return false ; },public boolean METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; },"['Move Return', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1793,"['Delete Block', 'Delete Return']","['Return', 'Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']","['Block', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.2222222222222222,0.3636363636363636,2,0,7
1367,1367,public void METHOD_1 ( TYPE_1 error ) { METHOD_2 ( false ) ; METHOD_3 ( error ) ; VAR_1 . setEnabled ( false ) ; },public void METHOD_1 ( TYPE_1 error ) { METHOD_3 ( error ) ; METHOD_2 ( false ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",1796,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1368,1368,public int getId ( ) { if ( ( VAR_1 ) != null ) { return VAR_2 . getId ( ) ; } return - 1 ; },public int getId ( ) { return VAR_2 . getId ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete UnaryOperator', 'Delete Return']",1797,['Delete Return'],"['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'UnaryOperator', 'Return']",['Return'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1369,1369,"public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_1 ( new TYPE_1 ( VAR_1 , VAR_3 ) ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_3 ) { VAR_2 . METHOD_1 ( new TYPE_1 ( VAR_1 , VAR_3 ) ) ; }","['Insert Parameter', 'Insert TypeReference', 'Update ConstructorCall', 'Insert VariableRead', 'Delete FieldRead']",1798,['Insert Parameter'],"['Parameter', 'TypeReference', 'ConstructorCall', 'VariableRead', 'FieldRead']",['Parameter'],GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,1,0,4
1370,1370,public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; METHOD_5 ( ) . METHOD_6 ( ) ; },"['Move Invocation', 'Delete Invocation']",1799,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1371,1371,"public final void METHOD_1 ( java.lang.Throwable t ) { VAR_1 . error ( STRING_1 , t ) ; VAR_2 . METHOD_2 ( t ) ; }","public final void METHOD_1 ( java.lang.Throwable t ) { VAR_1 . error ( STRING_1 , t ) ; if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( t ) ; }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Invocation']",1800,"['Insert Invocation', 'Insert VariableRead']","['If', 'BinaryOperator', 'Block', 'FieldRead', 'Literal', 'Invocation']","['Invocation', 'VariableRead']",Partial Match,0.14285714285714285,0.0,0.0,0.0,0,2,6
1372,1372,public int METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 ; },public int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1801,['Delete Invocation'],"['Invocation', 'FieldRead', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
1373,1373,"public TYPE_1 replace ( TYPE_2 key , TYPE_1 value ) { if ( VAR_1 . METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( STRING_1 , key , value ) ; } return super . replace ( key , value ) ; }","public TYPE_1 replace ( TYPE_2 key , TYPE_1 value ) { VAR_1 . METHOD_2 ( STRING_1 , key , value ) ; return super . replace ( key , value ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1802,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
1374,1374,"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( ( VAR_3 ) == null ) || ( ( VAR_4 ) == null ) ) return 0 ; else return VAR_5 . compareTo ( VAR_4 ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_5 . compareTo ( VAR_4 ) ; }","['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1803,['Delete Invocation'],"['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator', 'Literal', 'Return', 'Block', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,13
1375,1375,"public static long METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) , ( ( ( TYPE_2 . METHOD_4 ( VAR_1 ) ) - ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) / INT_1 ) ) ; }",public static long METHOD_1 ( TYPE_1 VAR_1 ) { return ( TYPE_2 . METHOD_3 ( VAR_1 ) ) + ( ( ( TYPE_2 . METHOD_4 ( VAR_1 ) ) - ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) / INT_1 ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation']",1806,"['Delete Invocation', 'Insert BinaryOperator']","['BinaryOperator', 'Invocation', 'BinaryOperator', 'TypeAccess', 'Invocation']","['Invocation', 'BinaryOperator']",GPT Missed Nodes,0.6666666666666666,1.0,0.4,0.5714285714285715,2,0,3
1376,1376,"public void METHOD_1 ( long VAR_1 ) { this . VAR_1 = TYPE_1 . METHOD_2 ( ( ( this . VAR_2 ) - ( this . startTime ) ) , 0 ) ; }",public void METHOD_1 ( long VAR_1 ) { this . VAR_1 = ( this . VAR_2 ) - ( this . startTime ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",1807,"['Delete Invocation', 'Delete TypeAccess']","['BinaryOperator', 'TypeAccess', 'Literal', 'Invocation']","['Invocation', 'TypeAccess']",GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,2,0,2
1377,1377,public java.util.Set < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },public java.util.Set < TYPE_1 > METHOD_1 ( ) { return new java.util.HashSet < TYPE_1 > ( VAR_1 ) ; },"['Insert ConstructorCall', 'Move FieldRead']",1809,['Insert Invocation'],"['ConstructorCall', 'FieldRead']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1378,1378,protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) ; },"['Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1811,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
1379,1379,public java.lang.String getText ( ) { return VAR_1 . getText ( ) . toString ( ) . trim ( ) ; },public java.lang.String getText ( ) { return VAR_1 . getText ( ) . toString ( ) ; },"['Move Invocation', 'Delete Invocation']",1812,['Delete MethodInvocation'],"['Invocation', 'Invocation']",['MethodInvocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1380,1380,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } VAR_2 . METHOD_1 ( ) ; },public void METHOD_1 ( ) { VAR_2 . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1815,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.14285714285714285,0.25,1,0,6
1381,1381,public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; TYPE_1 . METHOD_4 ( VAR_2 . METHOD_3 ( ) ) ; METHOD_5 ( VAR_2 . METHOD_3 ( ) ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( position ) ; TYPE_1 . METHOD_4 ( position ) ; METHOD_5 ( position ) ; },"['Insert Invocation', 'Insert Invocation', 'Insert Invocation', 'Move TypeAccess', 'Insert FieldRead', 'Move TypeAccess', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1817,"['Update Invocation', 'Update Invocation', 'Update Invocation']","['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'FieldRead', 'TypeAccess', 'FieldRead', 'FieldRead', 'TypeAccess', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Invocation']","['Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,3,17
1382,1382,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1819,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1383,1383,private void METHOD_1 ( ) { if ( ( p ) != null ) p . METHOD_2 ( ) ; },private void METHOD_1 ( ) { p . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1820,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1384,1384,public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; },public void METHOD_1 ( ) { VAR_2 . METHOD_3 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_6 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1821,"['Delete Invocation', 'Delete Invocation', 'Move Invocation']","['Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.6666666666666666,0.6666666666666666,0.6666666666666666,2,1,1
1385,1385,public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 != null ) { if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_2 ) ) { VAR_1 . METHOD_3 ( ) ; } } } },public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_2 ) ) { VAR_1 . METHOD_3 ( ) ; } } },"['Move If', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1822,['Delete Block'],"['If', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1386,1386,"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws java.io.IOException { return TYPE_4 . METHOD_2 ( TYPE_5 , VAR_1 , VAR_2 ) ; }","public static TYPE_1 METHOD_1 ( java.io.InputStream VAR_1 , TYPE_3 VAR_2 ) throws java.io.IOException { return TYPE_5 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Update TypeReference', 'Update Invocation', 'Delete TypeAccess']",1823,"['Update Parameter', 'Update TypeAccess', 'Update Invocation']","['TypeReference', 'Invocation', 'TypeAccess']","['Parameter', 'TypeAccess', 'Invocation']",Partial Match,0.5,0.3333333333333333,0.3333333333333333,0.3333333333333333,1,2,2
1387,1387,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setEnabled ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_4 . setEnabled ( VAR_3 . METHOD_4 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . setEnabled ( VAR_3 . METHOD_4 ( ) ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",1824,['Delete Invocation'],"['TypeAccess', 'TypeAccess', 'Invocation', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
1388,1388,protected boolean METHOD_1 ( ) { return ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( ! ( ( VAR_2 . get ( ) ) && ( VAR_3 ) ) ) ; },protected boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) ) && ( ! ( ( VAR_2 . get ( ) ) && ( VAR_3 ) ) ) ; },"['Move Invocation', 'Delete UnaryOperator']",1825,['Delete Invocation'],"['Invocation', 'UnaryOperator']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
1389,1389,private void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_2 ) ) ) { VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( ( ( TYPE_1 . METHOD_5 ( ) ) + INT_1 ) ) ; } },private void METHOD_1 ( ) { VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( ( ( TYPE_1 . METHOD_5 ( ) ) + INT_1 ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1829,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1390,1390,"private void METHOD_1 ( TYPE_1 VAR_1 , char VAR_2 ) { if ( ( ( VAR_3 . start ) < ( VAR_4 . length ) ) && ( ( VAR_1 . METHOD_2 ( ) ) == VAR_2 ) ) { ( VAR_3 . start ) ++ ; } }","private void METHOD_1 ( TYPE_1 VAR_1 , char VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == VAR_2 ) { ( VAR_3 . start ) ++ ; } }","['Move BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1831,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1391,1391,"public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { return VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",1833,"['Update TypeAccess', 'Delete TypeAccess', 'Insert TypeAccess']","['TypeReference', 'Invocation', 'Return']","['TypeAccess', 'TypeAccess', 'TypeAccess']",Partial Match,0.0,0.0,0.0,0.0,0,3,3
1392,1392,"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { METHOD_2 ( ( ( VAR_3 ) && ( VAR_2 != null ) ? VAR_4 . replace ( VAR_5 , VAR_6 ) : VAR_2 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { METHOD_2 ( ( VAR_3 ? VAR_4 . replace ( VAR_5 , VAR_6 ) : VAR_2 ) ) ; }","['Move FieldRead', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1834,['Delete UnaryOperator'],"['FieldRead', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1393,1393,"private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_6 ( ) . toString ( ) ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_5 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_6 ( ) . toString ( ) ) ; METHOD_4 ( VAR_1 ) ; }",['Move Invocation'],1835,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1394,1394,"public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( ) ) != null ) ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( false , false ) ; } }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( false , false ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1836,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.09090909090909091,0.16666666666666669,1,0,10
1395,1395,"private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 context ) { VAR_2 . setState ( VAR_3 ) ; return METHOD_2 ( context ) ; }",private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { VAR_2 . setState ( VAR_3 ) ; return METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1838,"['Delete Parameter', 'Update Invocation']","['TypeReference', 'Parameter', 'VariableRead']","['Parameter', 'Invocation']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
1396,1396,public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; if ( METHOD_3 ( ) ) { METHOD_4 ( ) ; METHOD_5 ( ) ; } else { java.lang.System.err.println ( STRING_1 ) ; java.lang.System.err.println ( STRING_2 ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1839,['Delete Block'],"['Invocation', 'Invocation', 'Invocation', 'Block', 'TypeAccess', 'FieldRead', 'TypeAccess', 'Invocation', 'TypeAccess', 'FieldRead', 'TypeAccess', 'Invocation', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.07142857142857142,0.13333333333333333,1,0,13
1397,1397,public void METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) <= INT_1 ) { VAR_2 = ( VAR_2 ) + 1 ; } else { VAR_2 = 1 ; } } },public void METHOD_1 ( ) { if ( ( VAR_2 ) <= INT_1 ) { VAR_2 = ( VAR_2 ) + 1 ; } else { VAR_2 = 1 ; } },"['Move If', 'Delete FieldRead', 'Delete Block', 'Delete If']",1840,['Delete BinaryOperator'],"['If', 'FieldRead', 'Block', 'If']",['BinaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1398,1398,public java.util.ArrayList < TYPE_1 > METHOD_1 ( java.lang.String type ) { if ( this . VAR_1 . METHOD_2 ( type ) ) return this . VAR_2 . get ( type ) ; else return new java.util.ArrayList < TYPE_1 > ( ) ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( java.lang.String type ) { return this . VAR_2 . get ( type ) ; },"['Move Return', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",1841,['Delete Invocation'],"['Return', 'ThisAccess', 'FieldRead', 'VariableRead', 'Invocation', 'Block', 'ConstructorCall', 'Return', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.125,1.0,0.1,0.18181818181818182,1,0,9
1399,1399,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( ! ( VAR_2 ) ) { VAR_1 . METHOD_2 ( ) ; } } METHOD_3 ( ) ; super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } METHOD_3 ( ) ; super . METHOD_1 ( ) ; },"['Move If', 'Move BinaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1842,['Delete Invocation'],"['If', 'BinaryOperator', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1400,1400,"public void METHOD_1 ( TYPE_1 date ) { if ( date == null ) METHOD_2 ( STRING_1 , STRING_2 ) ; else METHOD_2 ( STRING_1 , VAR_1 . toString ( ) ) ; }","public void METHOD_1 ( TYPE_1 date ) { if ( date == null ) METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_2 ( STRING_1 , VAR_1 . toString ( ) ) ; }","['Move Invocation', 'Delete Block']",1843,['Delete Invocation'],"['Invocation', 'Block']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
1401,1401,"public boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { return VAR_3 . getBoolean ( VAR_1 , VAR_2 ) ; } else { return true ; } }","public boolean METHOD_1 ( ) { return VAR_3 . getBoolean ( VAR_1 , VAR_2 ) ; }","['Move Return', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1844,"['Delete Invocation', 'Delete Return']","['Return', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'Literal', 'Return', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.2222222222222222,0.3636363636363636,2,0,7
1402,1402,public java.awt.Color METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 . METHOD_1 ( ) ; else return null ; },public java.awt.Color METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1845,"['Delete LocalVariable', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['LocalVariable', 'Return']",Partial Match,0.14285714285714285,0.5,0.1111111111111111,0.1818181818181818,1,1,8
1403,1403,"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( new android.content.Intent ( this , VAR_2 class ) ) ; METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( ) ; },"['Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1847,"['Delete Invocation', 'Delete Invocation']","['ThisAccess', 'FieldRead', 'ConstructorCall', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.2,1.0,0.2857142857142857,0.4444444444444445,2,0,5
1404,1404,"public boolean METHOD_1 ( final int VAR_1 , final TYPE_1 VAR_2 , final TYPE_2 VAR_3 ) { return ( this . METHOD_2 ( VAR_1 , VAR_2 ) ) && ( VAR_1 <= INT_1 ) ; }","public boolean METHOD_1 ( final int VAR_1 , final TYPE_1 VAR_2 , final TYPE_2 VAR_3 ) { return this . METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1849,['Delete Invocation'],"['Invocation', 'VariableRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,5
1405,1405,"public void error ( java.lang.String VAR_1 , java.lang.Object ... VAR_2 ) throws java.lang.Exception { throw new TYPE_1 ( ( ( VAR_3 ) + 1 ) , java.lang.String.format ( VAR_1 , VAR_2 ) , VAR_4 ) ; }","public void error ( java.lang.String VAR_1 , java.lang.Object ... VAR_2 ) throws java.lang.Exception { throw new TYPE_1 ( VAR_3 , java.lang.String.format ( VAR_1 , VAR_2 ) , VAR_4 ) ; }","['Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1850,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1406,1406,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_2 = this . VAR_3 . METHOD_2 ( java.util.Arrays.asList ( VAR_4 . split ( STRING_1 ) ) ) ; } },public void METHOD_1 ( ) { VAR_2 = this . VAR_3 . METHOD_2 ( java.util.Arrays.asList ( VAR_4 . split ( STRING_1 ) ) ) ; },"['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1851,['Delete Invocation'],"['Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1407,1407,public boolean METHOD_1 ( ) { return ( type . METHOD_1 ( ) ) && ( ! ( VAR_1 ) ) ; },public boolean METHOD_1 ( ) { return ( type . METHOD_1 ( ) ) && ( VAR_1 ) ; },"['Move FieldRead', 'Delete UnaryOperator']",1852,['Delete Invocation'],"['FieldRead', 'UnaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1408,1408,public boolean METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) != null ) && ( METHOD_2 ( ) . METHOD_1 ( ) ) ; },public boolean METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_1 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1853,"['Delete BinaryOperator', 'Delete Invocation']","['Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']","['BinaryOperator', 'Invocation']",GPT Missed Nodes,0.6666666666666666,1.0,0.4,0.5714285714285715,2,0,3
1409,1409,public void METHOD_1 ( TYPE_1 state ) { super . METHOD_1 ( state ) ; VAR_1 = false ; VAR_2 = false ; VAR_3 . result = STRING_1 ; VAR_4 = new TYPE_2 ( this ) ; METHOD_2 ( VAR_4 ) ; },public void METHOD_1 ( TYPE_1 state ) { super . METHOD_1 ( state ) ; VAR_4 = new TYPE_2 ( this ) ; METHOD_2 ( VAR_4 ) ; VAR_1 = false ; VAR_2 = false ; VAR_3 . result = STRING_1 ; },"['Move Assignment', 'Move Invocation']",1856,"['Move LocalVariable', 'Move LocalVariable', 'Move LocalVariable']","['Assignment', 'Invocation']","['LocalVariable', 'LocalVariable', 'LocalVariable']",Partial Match,0.0,0.0,0.0,0.0,0,3,2
1410,1410,"public void METHOD_1 ( ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_1 . METHOD_2 ( INT_1 , INT_2 , INT_3 ) ) ) ) ; }","public void METHOD_1 ( ) { java.lang.System.out.println ( VAR_1 . METHOD_2 ( INT_1 , INT_2 , INT_3 ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1857,['Delete Invocation'],"['Invocation', 'FieldRead', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
1411,1411,public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) . get ( ) . METHOD_3 ( ) . METHOD_4 ( this ) ; },public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move ThisAccess', 'Delete Invocation']",1858,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'ThisAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
1412,1412,public java.lang.Boolean METHOD_1 ( final java.lang.Integer source ) { if ( null == source ) { return VAR_1 ; } return TYPE_1 . METHOD_2 ( source ) ; },public java.lang.Boolean METHOD_1 ( final java.lang.Integer source ) { return TYPE_1 . METHOD_2 ( source ) ; },"['Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1859,['Delete Invocation'],"['Literal', 'VariableRead', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
1413,1413,"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( size ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; TYPE_1 . METHOD_4 ( VAR_2 . METHOD_5 ( 0 ) , VAR_2 . METHOD_5 ( 1 ) ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( size ) ; TYPE_1 . METHOD_4 ( VAR_2 . METHOD_5 ( 0 ) , VAR_2 . METHOD_5 ( 1 ) ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; }",['Move Invocation'],1860,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1414,1414,"public TYPE_1 METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 ) { return new TYPE_1 ( filename , VAR_2 , VAR_3 , method , VAR_4 , className , context , args , VAR_1 ) ; }","public TYPE_1 METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 ) { return new TYPE_1 ( filename , VAR_2 , VAR_3 , method , VAR_4 , context , args , VAR_1 ) ; }",['Delete FieldRead'],1861,['Delete TypeAccess'],['FieldRead'],['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1415,1415,private boolean METHOD_1 ( TYPE_1 path ) { if ( ( METHOD_2 ( path . METHOD_3 ( ) ) ) && ( TYPE_2 . METHOD_4 ( path ) . startsWith ( STRING_1 ) ) ) { return true ; } return false ; },private boolean METHOD_1 ( TYPE_1 path ) { if ( METHOD_2 ( path . METHOD_3 ( ) ) ) { if ( TYPE_2 . METHOD_4 ( path ) . startsWith ( STRING_1 ) ) { return true ; } } return false ; },"['Move Invocation', 'Insert Block', 'Insert If', 'Move Invocation', 'Move Block', 'Delete BinaryOperator']",1863,['Insert If'],"['Invocation', 'Block', 'If', 'Invocation', 'Block', 'BinaryOperator']",['If'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1416,1416,public java.lang.String toString ( ) { return ( ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( info ) ) + STRING_3 ) + ( position ) ) + STRING_4 ) + ( VAR_2 ) ; },public java.lang.String toString ( ) { return ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( info ) ) + STRING_3 ) + ( position ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1864,['Delete Assignment'],"['BinaryOperator', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1417,1417,public void METHOD_1 ( TYPE_1 response ) { if ( this . VAR_1 ) this . VAR_2 . METHOD_2 ( response ) ; },public void METHOD_1 ( TYPE_1 response ) { this . VAR_2 . METHOD_2 ( response ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Block', 'Delete If']",1865,['Delete Invocation'],"['Invocation', 'ThisAccess', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,5
1418,1418,"public static java.lang.Boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.ClassNotFoundException , TYPE_1 { java.lang.String query = ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ; return VAR_3 . METHOD_2 ( query , STRING_4 ) ; }","public static java.lang.Boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.ClassNotFoundException , TYPE_1 { java.lang.String query = ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ; return ( VAR_3 . METHOD_2 ( query ) ) == 1 ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal', 'Delete TypeAccess']",1869,"['Delete Invocation', 'Insert BinaryOperator', 'Insert Invocation', 'Insert Return']","['BinaryOperator', 'Invocation', 'Literal', 'TypeAccess']","['Invocation', 'BinaryOperator', 'Invocation', 'Return']",Partial Match,0.4,0.25,0.25,0.25,1,3,3
1419,1419,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_2 ( false ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( false ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1870,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1420,1420,public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { java.util.Collections.sort ( VAR_1 ) ; return this . toString ( ) ; } return STRING_1 ; },public java.lang.String METHOD_1 ( ) { java.util.Collections.sort ( VAR_1 ) ; return this . toString ( ) ; },"['Move Invocation', 'Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",1871,"['Delete Return', 'Delete TypeAccess']","['Invocation', 'Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'FieldRead', 'Return']","['Return', 'TypeAccess']",Partial Match,0.125,0.5,0.1111111111111111,0.1818181818181818,1,1,8
1421,1421,public TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) != ( VAR_2 ) ) && ( ( VAR_1 ) < ( METHOD_2 ( ) ) ) ) { return METHOD_3 ( VAR_1 ) ; } return null ; },public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) < ( METHOD_2 ( ) ) ) { return METHOD_3 ( VAR_1 ) ; } return null ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1873,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1422,1422,"private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) ; VAR_2 = null ; } }","private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 = null ; }","['Move Invocation', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1877,['Delete Invocation'],"['Invocation', 'Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
1423,1423,"public double METHOD_1 ( double n ) { if ( n > 0 ) { return METHOD_2 ( n , ( n / INT_1 ) ) ; } return 0 ; }","public double METHOD_1 ( double n ) { return METHOD_2 ( n , ( n / INT_1 ) ) ; }","['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1878,['Delete Return'],"['Return', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
1424,1424,"public java.lang.String toString ( ) { return TYPE_1 . METHOD_1 ( METHOD_2 ( ) . toString ( ) ) . add ( STRING_1 , VAR_1 . intValue ( ) ) . toString ( ) ; }","public java.lang.String toString ( ) { return TYPE_1 . METHOD_1 ( type ( ) . toString ( ) ) . add ( STRING_1 , VAR_1 . intValue ( ) ) . toString ( ) ; }",['Update Invocation'],1879,['Update Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1425,1425,"protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.util.Collection < TYPE_4 > VAR_3 ) throws TYPE_5 { return METHOD_1 ( VAR_1 , VAR_2 , null , VAR_3 , null ) ; }","protected TYPE_1 METHOD_1 ( ) throws TYPE_5 { return METHOD_1 ( null , null , null , null ) ; }","['Insert Literal', 'Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",1880,"['Delete Parameter', 'Delete Parameter', 'Delete Parameter', 'Update Invocation']","['Literal', 'Literal', 'TypeReference', 'Parameter', 'TypeReference', 'Parameter', 'TypeReference', 'TypeReference', 'Parameter', 'VariableRead', 'VariableRead', 'VariableRead']","['Parameter', 'Parameter', 'Parameter', 'Invocation']",Partial Match,0.2,0.75,0.25,0.375,3,1,9
1426,1426,public void METHOD_1 ( android.view.View view ) { if ( ( TYPE_1 . METHOD_2 ( this ) . METHOD_3 ( ) ) != ( VAR_1 ) ) { METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; } },public void METHOD_1 ( android.view.View view ) { METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1881,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'ThisAccess', 'Invocation', 'Invocation', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1,0.18181818181818182,1,0,9
1427,1427,public boolean METHOD_1 ( ) { return ( ( this . index ) >= ( this . VAR_1 . size ( ) ) ) && ( ( this . VAR_1 . size ( ) ) != 0 ) ; },public boolean METHOD_1 ( ) { return ( this . index ) >= ( this . VAR_1 . size ( ) ) ; },"['Move BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1882,['Delete Invocation'],"['BinaryOperator', 'ThisAccess', 'FieldRead', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1428,1428,public void METHOD_1 ( ) { VAR_1 = ( ( int ) ( ( ( new java.util.Date ( ) . getTime ( ) ) / INT_1 ) - ( VAR_2 ) ) ) ; },public void METHOD_1 ( ) { VAR_1 = ( ( int ) ( ( new java.util.Date ( ) . getTime ( ) ) - ( VAR_2 ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move TypeReference', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1883,['Delete Assignment'],"['BinaryOperator', 'BinaryOperator', 'TypeReference', 'FieldRead', 'FieldRead', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1429,1429,public void show ( ) { super . show ( ) ; if ( ( VAR_1 ) != null ) { VAR_2 = ( ( ( TYPE_1 ) ( VAR_3 [ 0 ] ) ) . VAR_4 ) + 1 ; VAR_5 . METHOD_1 ( ) ; } },public void show ( ) { super . show ( ) ; if ( ( VAR_1 ) != null ) { VAR_2 = ( ( TYPE_1 ) ( VAR_3 [ 0 ] ) ) . VAR_4 ; VAR_5 . METHOD_1 ( ) ; } },"['Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1886,['Delete Assignment'],"['FieldRead', 'Literal', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1430,1430,public TYPE_1 METHOD_1 ( java.lang.Integer id ) { for ( TYPE_1 VAR_1 : VAR_2 ) if ( VAR_1 . METHOD_2 ( ) . equals ( id ) ) return VAR_1 ; return null ; },public TYPE_1 METHOD_1 ( java.lang.Integer id ) { for ( TYPE_1 VAR_1 : VAR_2 ) if ( ( VAR_1 . METHOD_2 ( ) ) == id ) return VAR_1 ; return null ; },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",1887,['Delete Invocation'],"['BinaryOperator', 'Invocation', 'VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1431,1431,"public double METHOD_1 ( ) { return - ( TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) , FLOAT_1 , 0 ) ) ; }","public double METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) , FLOAT_1 , 0 ) ; }","['Move Invocation', 'Delete UnaryOperator']",1888,['Delete UnaryOperator'],"['Invocation', 'UnaryOperator']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1432,1432,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; VAR_2 = VAR_1 . METHOD_4 ( ) ; } } },public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; VAR_2 = VAR_1 . METHOD_4 ( ) ; } },"['Move If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1891,"['Delete Invocation', 'Delete TypeAccess']","['If', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']","['Invocation', 'TypeAccess']",Partial Match,0.0,0.0,0.0,0.0,0,2,6
1433,1433,"public void METHOD_1 ( TYPE_1 p ) { if ( ( ( METHOD_2 ( ) ) == 0 ) || ( ( METHOD_3 ( p ) ) == null ) ) { return ; } METHOD_1 ( p , METHOD_3 ( p ) ) ; }","public void METHOD_1 ( TYPE_1 p ) { if ( ( METHOD_2 ( ) ) == 0 ) { return ; } METHOD_1 ( p , METHOD_3 ( p ) ) ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1893,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1434,1434,"public void METHOD_1 ( int VAR_1 ) { if ( TYPE_1 . METHOD_2 ( getContext ( ) , VAR_2 ) ) { if ( VAR_3 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( ) ; VAR_4 . open ( ) ; } } }","public void METHOD_1 ( int VAR_1 ) { if ( TYPE_1 . METHOD_2 ( getContext ( ) , VAR_2 ) ) { VAR_3 . METHOD_4 ( ) ; VAR_4 . open ( ) ; } }","['Move If', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1894,['Delete Invocation'],"['If', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1435,1435,"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return ( VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) <= ( this . VAR_3 ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return ( VAR_1 . METHOD_2 ( VAR_2 ) ) <= ( this . VAR_3 ) ; }","['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",1895,['Delete Invocation'],"['Invocation', 'Invocation', 'VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1436,1436,"TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( VAR_2 . startsWith ( STRING_1 ) ) { return METHOD_1 ( path ) ; } else { return METHOD_1 ( ( ( VAR_1 + CHAR_1 ) + path ) ) ; } }","TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { return METHOD_1 ( ( ( VAR_1 + CHAR_1 ) + path ) ) ; }","['Move Return', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1896,['Delete Invocation'],"['Return', 'TypeAccess', 'TypeAccess', 'Invocation', 'VariableRead', 'Invocation', 'Return', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.1,0.18181818181818182,1,0,9
1437,1437,public static int METHOD_1 ( int VAR_1 ) { return ( VAR_1 > > INT_1 ) & INT_2 ; },public static int METHOD_1 ( int VAR_1 ) { return VAR_1 > > INT_1 ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1897,['Delete BinaryOperator'],"['BinaryOperator', 'FieldRead', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
1438,1438,public int METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; },public int METHOD_1 ( ) { return ( METHOD_2 ( VAR_1 ) ) - 1 ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1900,['Insert UnaryOperator'],"['BinaryOperator', 'Invocation', 'Literal']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1439,1439,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 = java.lang.Integer . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_4 = VAR_1 . METHOD_4 ( ) ; VAR_5 = VAR_1 . METHOD_5 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 = new java.lang.Integer ( VAR_1 . METHOD_3 ( ) ) ; VAR_4 = VAR_1 . METHOD_4 ( ) ; VAR_5 = VAR_1 . METHOD_5 ( ) ; },"['Insert ConstructorCall', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1904,['Update Invocation'],"['ConstructorCall', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,4
1440,1440,public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; if ( this . VAR_2 ) { this . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; if ( ( this . VAR_2 ) == true ) { this . METHOD_3 ( ) ; } },"['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",1906,['Insert BinaryOperator'],"['BinaryOperator', 'FieldRead', 'Literal']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
1441,1441,public void METHOD_1 ( ) { if ( VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; } TYPE_2 . METHOD_3 ( ) ; super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { TYPE_2 . METHOD_3 ( ) ; super . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1907,['Delete Invocation'],"['FieldRead', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1442,1442,protected int METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( VAR_1 . METHOD_2 ( STRING_1 ) ) { return VAR_1 . METHOD_3 ( STRING_1 ) . getInt ( STRING_2 ) ; } else { return 0 ; } },protected int METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { return VAR_1 . METHOD_3 ( STRING_1 ) . getInt ( STRING_2 ) ; },"['Move Return', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1908,"['Delete Return', 'Delete Invocation']","['Return', 'VariableRead', 'TypeAccess', 'Invocation', 'Block', 'Literal', 'Return', 'Block', 'If']","['Return', 'Invocation']",GPT Missed Nodes,0.2857142857142857,1.0,0.2222222222222222,0.3636363636363636,2,0,7
1443,1443,public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ! ( VAR_2 . equals ( STRING_1 ) ) ) && ( ! ( VAR_2 . equals ( STRING_2 ) ) ) ) { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1909,['Delete Invocation'],"['Assignment', 'TypeAccess', 'TypeAccess', 'Invocation', 'UnaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.08333333333333333,0.15384615384615385,1,0,11
1444,1444,"private java.lang.String METHOD_1 ( java.lang.String path ) { return VAR_1 . substring ( ( ( ( path . METHOD_2 ( TYPE_1 ) ) + ( VAR_2 . length ( ) ) ) + 1 ) , path . METHOD_3 ( STRING_1 ) ) ; }","private java.lang.String METHOD_1 ( java.lang.String path ) { return VAR_1 . substring ( ( ( path . METHOD_2 ( TYPE_1 ) ) + ( VAR_2 . length ( ) ) ) , path . METHOD_3 ( STRING_1 ) ) ; }","['Move BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",1910,['Delete ParenthesizedExpression'],"['BinaryOperator', 'Literal', 'BinaryOperator']",['ParenthesizedExpression'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1445,1445,protected void METHOD_1 ( android.content.Intent intent ) { super . METHOD_1 ( intent ) ; if ( ! ( METHOD_2 ( intent ) ) ) { METHOD_3 ( intent . METHOD_4 ( ) ) ; } },protected void METHOD_1 ( android.content.Intent intent ) { super . METHOD_1 ( intent ) ; METHOD_3 ( intent . METHOD_4 ( ) ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1911,['Delete Block'],"['Invocation', 'VariableRead', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1446,1446,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_2 . size ( ) ) > 0 ) { METHOD_2 ( VAR_1 ) ; } this . VAR_2 . put ( VAR_3 . getName ( ) , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . put ( VAR_3 . getName ( ) , VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }","['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1912,['Delete Invocation'],"['Invocation', 'ThisAccess', 'FieldRead', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.125,0.2222222222222222,1,0,7
1447,1447,public boolean METHOD_1 ( TYPE_1 obj ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( obj ) ) ; if ( ( VAR_1 . METHOD_2 ( ) ) != null ) VAR_1 . METHOD_3 ( VAR_2 ) ; return true ; },public boolean METHOD_1 ( TYPE_1 obj ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( obj ) ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; return true ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1913,['Delete Invocation'],"['Invocation', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1448,1448,int METHOD_1 ( ) { return ( VAR_1 . size ( ) ) - 1 ; },int METHOD_1 ( ) { return VAR_1 . size ( ) ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",1914,['Delete UnaryOperator'],"['Invocation', 'Literal', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1449,1449,public java.lang.String METHOD_1 ( ) { return ( ( VAR_1 ) == null ) || ( ! ( VAR_1 ) ) ? VAR_2 . toString ( ) : null ; },public java.lang.String METHOD_1 ( ) { return ( ( VAR_1 ) == null ) || ( ! ( VAR_1 ) ) ? value : null ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1915,['Update VariableRead'],"['FieldRead', 'TypeAccess', 'Invocation']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1450,1450,"private static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 , ""true"" , ""false"" , ""0"" , STRING_3 , STRING_4 ) , STRING_5 ) ; }","private static java.lang.String METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 , ""true"" , ""false"" , ""0"" , STRING_3 , STRING_4 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete FieldRead', 'Delete ConstructorCall']",1916,"['Update TypeReference', 'Delete Invocation', 'Delete TypeAccess']","['TypeReference', 'Invocation', 'FieldRead', 'ConstructorCall']","['TypeReference', 'Invocation', 'TypeAccess']",Partial Match,0.4,0.3333333333333333,0.25,0.28571428571428575,1,2,3
1451,1451,public int METHOD_1 ( ) { int i = 0 ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ! ( VAR_3 . isEmpty ( ) ) ) { i ++ ; } } return i ; },public int METHOD_1 ( ) { int i = 0 ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_3 . isEmpty ( ) ) { i ++ ; } } return i ; },"['Move Invocation', 'Delete UnaryOperator']",1917,['Delete UnaryOperator'],"['Invocation', 'UnaryOperator']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1452,1452,public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) . getValue ( ) ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( java.lang.String ) ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) ; },"['Move Invocation', 'Update TypeReference', 'Delete Invocation']",1918,"['Update TypeReference', 'Delete Invocation']","['Invocation', 'TypeReference', 'Invocation']","['TypeReference', 'Invocation']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
1453,1453,public byte METHOD_1 ( ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { return ( ( byte ) ( super . VAR_3 [ ( ( VAR_4 ) + INT_1 ) ] ) ) ; } else { return - 1 ; } },public byte METHOD_1 ( ) { return ( ( byte ) ( super . VAR_3 [ ( ( VAR_4 ) + INT_1 ) ] ) ) ; },"['Move Return', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1920,"['Delete Return', 'Delete Return', 'Delete UnaryOperator']","['Return', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Block', 'Literal', 'UnaryOperator', 'Return', 'Block', 'If']","['Return', 'Return', 'UnaryOperator']",GPT Missed Nodes,0.2857142857142857,0.6666666666666666,0.2,0.30769230769230765,2,1,8
1454,1454,public int METHOD_1 ( ) { if ( ( VAR_1 ) != 0 ) { return ( ( int ) ( ( INT_1 * ( VAR_2 ) ) / ( VAR_1 ) ) ) ; } else { return 0 ; } },public int METHOD_1 ( ) { return ( ( int ) ( ( INT_1 * ( VAR_2 ) ) / ( VAR_1 ) ) ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1921,"['Delete Return', 'Delete Return']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.16666666666666666,0.5,0.1111111111111111,0.1818181818181818,1,1,8
1455,1455,"private void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_3 [ ( VAR_1 * ( VAR_4 ) ) ] = VAR_2 ; }","private void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_1 != ( - 1 ) ) { VAR_3 [ ( VAR_1 * ( VAR_4 ) ) ] = VAR_2 ; } }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert UnaryOperator', 'Move Assignment', 'Insert Literal']",1923,"['Insert UnaryOperator', 'Insert Assignment']","['If', 'BinaryOperator', 'Block', 'VariableRead', 'UnaryOperator', 'Assignment', 'Literal']","['UnaryOperator', 'Assignment']",GPT Missed Nodes,0.2857142857142857,0.5,0.14285714285714285,0.22222222222222224,1,1,6
1456,1456,public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; },public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move TypeAccess', 'Delete Invocation']",1924,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
1457,1457,public void METHOD_1 ( ) throws java.lang.Exception { this . VAR_1 . METHOD_2 ( VAR_2 . get ( STRING_1 ) . METHOD_3 ( VAR_3 ) ) . METHOD_4 ( VAR_4 . status ( ) . METHOD_5 ( ) ) . METHOD_6 ( METHOD_7 ( STRING_2 ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { this . VAR_1 . METHOD_2 ( VAR_2 . get ( STRING_1 ) . METHOD_3 ( VAR_3 ) ) . METHOD_4 ( VAR_4 . status ( ) . METHOD_5 ( ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1925,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1458,1458,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_2 = java.util.Calendar.getInstance ( ) ; METHOD_5 ( VAR_2 ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_4 ( ) ; VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_2 = java.util.Calendar.getInstance ( ) ; METHOD_5 ( VAR_2 ) ; },['Move Assignment'],1926,['Move Invocation'],['Assignment'],['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1459,1459,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1927,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
1460,1460,public void METHOD_1 ( ) { ( VAR_1 ) -- ; METHOD_2 ( ) ; },public void METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) { ( VAR_1 ) -- ; METHOD_2 ( ) ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move UnaryOperator', 'Move Invocation']",1928,"['Insert Invocation', 'Insert VariableRead']","['If', 'BinaryOperator', 'Block', 'FieldRead', 'Literal', 'UnaryOperator', 'Invocation']","['Invocation', 'VariableRead']",Partial Match,0.125,0.0,0.0,0.0,0,2,7
1461,1461,private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_1 = true ; } METHOD_4 ( ) ; },private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_1 = true ; METHOD_4 ( ) ; } },['Move Invocation'],1930,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1462,1462,private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) == null ) || ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == null ) { return true ; } return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Move Invocation', 'Insert Return', 'Insert Literal', 'Delete BinaryOperator']",1931,"['Insert Return', 'Insert Return']","['If', 'BinaryOperator', 'Block', 'Invocation', 'Return', 'Literal', 'BinaryOperator']","['Return', 'Return']",GPT Missed Nodes,0.16666666666666666,0.5,0.14285714285714285,0.22222222222222224,1,1,6
1463,1463,public boolean METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { return true ; } return false ; },public boolean METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { return true ; } else { return false ; } },"['Insert Block', 'Move Return']",1933,['Insert If'],"['Block', 'Return']",['If'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1464,1464,public void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) VAR_2 . METHOD_2 ( ) ; else VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_2 ( ) ; METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_4 . METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1935,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.14285714285714285,0.6666666666666666,0.2,0.30769230769230765,2,1,8
1465,1465,public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ! ( VAR_1 ) ) VAR_2 . METHOD_2 ( STRING_1 ) ; return VAR_3 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_3 ; },"['Delete FieldRead', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1936,['Delete Invocation'],"['FieldRead', 'UnaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1466,1466,public java.lang.String METHOD_1 ( ) { return ( VAR_1 ) + ( toString ( ) ) ; },public java.lang.String METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",1937,"['Delete Invocation', 'Delete VariableRead']","['FieldRead', 'Invocation', 'BinaryOperator']","['Invocation', 'VariableRead']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
1467,1467,protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; METHOD_5 ( ) ; },['Move Invocation'],1939,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1468,1468,public java.lang.String METHOD_1 ( java.lang.String path ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_2 . append ( VAR_3 ) ; VAR_2 . append ( path ) ; VAR_2 . append ( VAR_4 ) ; return VAR_2 . toString ( ) ; },public java.lang.String METHOD_1 ( java.lang.String path ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_2 . append ( VAR_3 ) ; VAR_2 . append ( VAR_4 ) ; VAR_2 . append ( path ) ; return VAR_2 . toString ( ) ; },['Move Invocation'],1941,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1469,1469,"public void METHOD_1 ( android.view.View VAR_1 ) { new TYPE_1 ( ) . execute ( ) ; TYPE_2 . METHOD_2 ( this , STRING_1 , VAR_2 ) . show ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { new TYPE_1 ( ) . execute ( ) ; },"['Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1942,['Delete Invocation'],"['TypeAccess', 'ThisAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1470,1470,public java.lang.String METHOD_1 ( java.lang.String id ) { if ( id != null ) { return VAR_1 . get ( id ) ; } else { return null ; } },public java.lang.String METHOD_1 ( java.lang.String id ) { return VAR_1 . get ( id ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1943,"['Delete Return', 'Delete Return']","['Return', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.16666666666666666,0.5,0.1111111111111111,0.1818181818181818,1,1,8
1471,1471,"public void METHOD_1 ( byte first , byte VAR_1 ) { VAR_2 = ( ( short ) ( ( ( first & INT_1 ) + ( INT_2 * ( VAR_1 & INT_1 ) ) ) - 1 ) ) ; }","public void METHOD_1 ( byte first , byte VAR_1 ) { VAR_2 = ( ( short ) ( ( first + ( INT_2 * VAR_1 ) ) - 1 ) ) ; }","['Update BinaryOperator', 'Move BinaryOperator', 'Move TypeReference', 'Update BinaryOperator', 'Move Literal', 'Move VariableRead', 'Update BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1944,"['Delete BinaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator']","['BinaryOperator', 'BinaryOperator', 'TypeReference', 'BinaryOperator', 'Literal', 'VariableRead', 'BinaryOperator', 'FieldRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator']",GPT Missed Nodes,0.2,0.5,0.16666666666666666,0.25,2,2,10
1472,1472,public java.lang.Void METHOD_1 ( java.lang.Void VAR_1 ) { METHOD_2 ( ) ; if ( VAR_2 ) METHOD_3 ( ) ; return null ; },public java.lang.Void METHOD_1 ( java.lang.Void VAR_1 ) { if ( VAR_2 ) METHOD_3 ( ) ; METHOD_2 ( ) ; return null ; },['Move Invocation'],1945,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1473,1473,public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) VAR_2 . METHOD_2 ( ) ; return VAR_2 ; },public static TYPE_1 METHOD_1 ( ) { return VAR_2 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1946,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.14285714285714285,0.25,1,0,6
1474,1474,public boolean METHOD_1 ( TYPE_1 endTime ) { if ( ( ( startTime ) == null ) || ( endTime . METHOD_2 ( startTime ) ) ) { this . endTime = endTime ; return true ; } return false ; },public boolean METHOD_1 ( TYPE_1 endTime ) { if ( endTime . METHOD_2 ( startTime ) ) { this . endTime = endTime ; return true ; } return false ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1948,['Delete BinaryOperator'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
1475,1475,"private boolean METHOD_1 ( TYPE_1 item , java.lang.String type ) { if ( VAR_1 . equals ( item . METHOD_2 ( ) ) ) return true ; return false ; }","private boolean METHOD_1 ( TYPE_1 item , java.lang.String type ) { if ( item . METHOD_2 ( ) . equals ( type ) ) return true ; return false ; }","['Insert VariableRead', 'Delete TypeAccess']",1949,['Update TypeAccess'],"['VariableRead', 'TypeAccess']",['TypeAccess'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
1476,1476,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( VAR_1 . METHOD_3 ( ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1952,"['Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Return']","['Invocation', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']","['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'VariableRead', 'Return']",Partial Match,0.3333333333333333,0.3333333333333333,0.3333333333333333,0.3333333333333333,2,4,4
1477,1477,private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . add ( VAR_3 ) ; VAR_2 . add ( VAR_4 ) ; VAR_2 . add ( VAR_5 ) ; VAR_2 . add ( VAR_6 ) ; return VAR_1 ; },private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . add ( VAR_4 ) ; VAR_2 . add ( VAR_5 ) ; VAR_2 . add ( VAR_3 ) ; VAR_2 . add ( VAR_6 ) ; return VAR_1 ; },['Move Invocation'],1953,"['Move Invocation', 'Move Invocation']",['Invocation'],"['Invocation', 'Invocation']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
1478,1478,private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; if ( VAR_2 . METHOD_3 ( ) ) { VAR_2 . METHOD_2 ( ) ; } } },private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; VAR_2 . METHOD_2 ( ) ; } },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1954,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'TypeAccess']",GPT Missed Nodes,0.5,1.0,0.4,0.5714285714285715,2,0,3
1479,1479,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.util.HashMap < java.lang.String , java.lang.String > parameters , TYPE_3 VAR_3 ) { METHOD_1 ( VAR_4 . toString ( ) , VAR_2 , parameters , VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 ) { METHOD_1 ( VAR_4 . toString ( ) , VAR_2 , VAR_3 ) ; }","['Update TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1956,"['Delete Parameter', 'Delete Parameter']","['TypeReference', 'TypeReference', 'TypeReference', 'TypeReference', 'Parameter', 'VariableRead']","['Parameter', 'Parameter']",GPT Missed Nodes,0.3333333333333333,0.5,0.16666666666666666,0.25,1,1,5
1480,1480,"public void METHOD_1 ( TYPE_1 result ) { if ( ( VAR_1 ) != ( VAR_2 ) ) VAR_3 . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_4 , ( STRING_1 + ( VAR_1 ) ) ) ) ; }","public void METHOD_1 ( TYPE_1 result ) { if ( ( VAR_1 ) != ( VAR_2 ) ) VAR_3 . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_4 , ( STRING_1 + result ) ) ) ; }","['Insert VariableRead', 'Delete FieldRead']",1957,['Update VariableRead'],"['VariableRead', 'FieldRead']",['VariableRead'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
1481,1481,private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; java.util.Set < java.lang.Object > VAR_3 = TYPE_3 . METHOD_3 ( VAR_4 . iterator ( ) ) ; return TYPE_4 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; },private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; java.util.Set < java.lang.Object > VAR_3 = TYPE_3 . METHOD_3 ( VAR_1 ) ; return TYPE_4 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1959,['Update Invocation'],"['VariableRead', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
1482,1482,"public void update ( TYPE_1 VAR_1 , double VAR_2 ) { x += ( VAR_3 ) * VAR_2 ; y += ( VAR_4 ) * VAR_2 ; super . update ( VAR_1 , VAR_2 ) ; }","public void update ( TYPE_1 VAR_1 , double VAR_2 ) { x += VAR_3 ; y += VAR_4 ; super . update ( VAR_1 , VAR_2 ) ; }","['Move FieldRead', 'Move FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator']",1960,"['Delete BinaryOperator', 'Delete VariableRead']","['FieldRead', 'FieldRead', 'VariableRead', 'BinaryOperator', 'VariableRead', 'BinaryOperator']","['BinaryOperator', 'VariableRead']",GPT Missed Nodes,0.6666666666666666,1.0,0.3333333333333333,0.5,2,0,4
1483,1483,"protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_2 , METHOD_2 ( ) , VAR_3 , METHOD_3 ( ) , VAR_1 ) ; }","protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , METHOD_2 ( ) , METHOD_3 ( ) , VAR_1 ) ; }",['Move Invocation'],1961,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1484,1484,public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 node : nodes ) { if ( ! ( VAR_1 . METHOD_2 ( ) . contains ( node ) ) ) { VAR_1 . METHOD_2 ( ) . add ( node ) ; } } },public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 node : nodes ) { VAR_1 . METHOD_2 ( ) . add ( node ) ; } },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1962,['Delete Block'],"['Invocation', 'VariableRead', 'Invocation', 'VariableRead', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.125,0.2222222222222222,1,0,7
1485,1485,"public static java.lang.String toString ( TYPE_1 VAR_1 ) { return ( TYPE_2 . METHOD_1 ( java.lang.String . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) , INT_1 , ""0"" ) ) + ( java.lang.String . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ) ; }","public static java.lang.String toString ( TYPE_1 VAR_1 ) { return ( TYPE_2 . METHOD_1 ( java.lang.String . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) , INT_1 , ""0"" ) ) + ( java.lang.String . METHOD_2 ( VAR_1 ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",1963,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1486,1486,public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( ( ( ( fileName ) + STRING_1 ) + ( VAR_2 . toString ( ) ) ) ) ; },public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( VAR_2 . toString ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1964,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']","['TypeAccess', 'Invocation']",Partial Match,0.25,0.0,0.0,0.0,0,2,5
1487,1487,public void info ( java.lang.Object msg ) { if ( VAR_1 . METHOD_1 ( TYPE_1 ) ) { java.lang.System.out.println ( ( STRING_1 + ( METHOD_2 ( msg ) ) ) ) ; } },public void info ( java.lang.Object msg ) { if ( TYPE_1 . METHOD_1 ( VAR_1 ) ) { java.lang.System.out.println ( ( STRING_1 + ( METHOD_2 ( msg ) ) ) ) ; } },['Move TypeAccess'],1966,"['Update Invocation', 'Update TypeAccess']",['TypeAccess'],"['Invocation', 'TypeAccess']",GPT Hallucinated Nodes,0.5,0.0,0.0,0.0,0,2,1
1488,1488,public final void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { return ; } METHOD_3 ( ) ; } },public final void METHOD_1 ( ) { synchronized ( VAR_1 ) { METHOD_3 ( ) ; } },"['Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1967,"['Delete Invocation', 'Delete Return']","['TypeAccess', 'Invocation', 'Return', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.4,1.0,0.4,0.5714285714285715,2,0,3
1489,1489,"public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; VAR_2 = new TYPE_2 ( STRING_2 , VAR_3 , VAR_4 , date , VAR_1 , VAR_5 , VAR_6 , VAR_7 , STRING_3 , STRING_4 , 1 ) ; }","public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; VAR_2 = new TYPE_2 ( STRING_2 , VAR_3 , VAR_4 , date , VAR_1 , VAR_5 , VAR_6 , VAR_7 , STRING_3 , STRING_4 ) ; }",['Delete Literal'],1968,['Delete TypeAccess'],['Literal'],['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1490,1490,"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_3 ( new TYPE_1 ( INT_1 , INT_2 , INT_3 ) ) ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; assertEquals ( VAR_1 . METHOD_3 ( new TYPE_1 ( INT_1 , INT_2 , INT_3 ) ) , VAR_2 ) ; }",['Move TypeAccess'],1969,"['Move VariableRead', 'Move Invocation']",['TypeAccess'],"['VariableRead', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,2,1
1491,1491,public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( VAR_1 ) ; },public boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1970,"['Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator']","['FieldRead', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']","['Invocation', 'Invocation', 'UnaryOperator']",Partial Match,0.0,0.0,0.0,0.0,0,3,5
1492,1492,public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; if ( ( listener ) != null ) { listener . METHOD_1 ( VAR_2 . getText ( ) . toString ( ) ) ; } } },public void METHOD_1 ( ) { if ( ( ( listener ) != null ) && ( METHOD_2 ( ) ) ) { listener . METHOD_1 ( VAR_2 . getText ( ) . toString ( ) ) ; } VAR_1 . METHOD_3 ( ) ; },"['Move If', 'Move Invocation', 'Insert BinaryOperator', 'Move BinaryOperator', 'Move Invocation', 'Delete Block', 'Delete If']",1971,"['Move Invocation', 'Move Invocation']","['If', 'Invocation', 'BinaryOperator', 'BinaryOperator', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.25,1.0,0.2857142857142857,0.4444444444444445,2,0,5
1493,1493,public void METHOD_1 ( boolean VAR_1 ) { if ( ! VAR_1 ) { METHOD_2 ( true ) ; setValue ( STRING_1 ) ; } else { METHOD_2 ( false ) ; } setState ( ) ; },public void METHOD_1 ( boolean VAR_1 ) { METHOD_2 ( ( ! VAR_1 ) ) ; if ( ! VAR_1 ) { setValue ( STRING_1 ) ; } },"['Move If', 'Update Invocation', 'Insert UnaryOperator', 'Insert VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Block']",1972,"['Delete Invocation', 'Delete Invocation', 'Delete Return']","['If', 'Invocation', 'UnaryOperator', 'VariableRead', 'Literal', 'Invocation', 'Literal', 'Invocation', 'Block']","['Invocation', 'Invocation', 'Return']",Partial Match,0.14285714285714285,0.6666666666666666,0.2222222222222222,0.3333333333333333,2,1,7
1494,1494,public java.lang.Boolean [ ] [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },public java.lang.Boolean [ ] [ ] METHOD_1 ( ) { return VAR_1 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1973,['Delete Invocation'],"['FieldRead', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
1495,1495,public TYPE_1 METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return null ; } else { return VAR_2 . METHOD_3 ( ) ; } },public TYPE_1 METHOD_1 ( ) { return VAR_2 . METHOD_3 ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1974,"['Delete Return', 'Delete Return', 'Delete Invocation']","['Return', 'TypeAccess', 'Invocation', 'Literal', 'Return', 'Block', 'Block', 'If']","['Return', 'Return', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.6666666666666666,0.25,0.36363636363636365,2,1,6
1496,1496,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_1 ( VAR_1 ) ; if ( ( METHOD_2 ( ) ) != null ) METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1975,['Delete Invocation'],"['Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1497,1497,public void handle ( TYPE_1 event ) { TYPE_2 node = event . METHOD_1 ( ) . METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_1 . delete ( ) ; },public void handle ( TYPE_1 event ) { TYPE_2 node = event . METHOD_1 ( ) . METHOD_2 ( ) ; VAR_1 . delete ( ) ; METHOD_3 ( ) ; },['Move Invocation'],1979,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1498,1498,public void METHOD_1 ( ) { try { if ( null != ( VAR_1 ) ) { VAR_1 . METHOD_2 ( ) ; } } catch ( TYPE_1 VAR_2 ) { } VAR_3 = null ; VAR_1 = null ; VAR_4 = null ; },public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { } VAR_3 = null ; VAR_1 = null ; VAR_4 = null ; },"['Move Invocation', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1981,['Delete TypeAccess'],"['Invocation', 'Literal', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1499,1499,"private void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { if ( ( ( VAR_1 ) && ( VAR_2 ) ) && ( ( VAR_3 ) != null ) ) { VAR_4 . start ( VAR_5 . METHOD_2 ( ) ) ; VAR_1 = false ; } }","private void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { if ( ( VAR_1 ) && ( VAR_2 ) ) { VAR_4 . start ( VAR_5 . METHOD_2 ( ) ) ; VAR_1 = false ; } }","['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1983,['Delete Block'],"['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Block'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1500,1500,"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Boolean VAR_2 ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( VAR_4 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Boolean VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1984,['Delete Block'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1501,1501,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; return false ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return false ; },"['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1987,['Delete Invocation'],"['TypeAccess', 'FieldRead', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1502,1502,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_3 . add ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . add ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1988,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1503,1503,public int METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 && ( ! ( VAR_2 ) ) ) return INT_1 ; if ( ( getType ( ) . VAR_3 ) == VAR_4 ) { return VAR_5 ; } return getType ( ) . VAR_3 ; },public int METHOD_1 ( ) { if ( ! ( VAR_2 ) ) return INT_1 ; if ( ( getType ( ) . VAR_3 ) == VAR_4 ) { return VAR_5 ; } return getType ( ) . VAR_3 ; },"['Move UnaryOperator', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete BinaryOperator']",1989,['Delete LocalVariable'],"['UnaryOperator', 'TypeReference', 'Parameter', 'VariableRead', 'BinaryOperator']",['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1504,1504,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_1 ( VAR_2 ) ; if ( ( VAR_3 ) != null ) VAR_3 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { VAR_3 . METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) VAR_1 . METHOD_1 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1990,"['Delete Invocation', 'Insert Invocation']","['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,2,6
1505,1505,public void METHOD_1 ( android.view.View view ) { VAR_1 += VAR_2 ; VAR_2 = 0 ; METHOD_2 ( 0 ) ; if ( ! ( METHOD_3 ( ) ) ) { METHOD_4 ( ) ; } },public void METHOD_1 ( android.view.View view ) { VAR_1 += VAR_2 ; VAR_2 = 0 ; METHOD_2 ( 0 ) ; METHOD_4 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1991,"['Delete UnaryOperator', 'Delete Invocation']","['Invocation', 'Invocation', 'UnaryOperator', 'Block', 'If']","['UnaryOperator', 'Invocation']",GPT Missed Nodes,0.5,1.0,0.4,0.5714285714285715,2,0,3
1506,1506,"public static int METHOD_1 ( int x , int y ) { if ( y == 0 ) { return 0 ; } else { return x / y ; } }","public static int METHOD_1 ( int x , int y ) { return x / y ; }","['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1993,"['Delete Return', 'Delete BinaryOperator']","['Return', 'VariableRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'Block', 'If']","['Return', 'BinaryOperator']",GPT Missed Nodes,0.3333333333333333,1.0,0.2222222222222222,0.3636363636363636,2,0,7
1507,1507,public void METHOD_1 ( ) { METHOD_1 ( VAR_1 . size ( ) ) ; },public void METHOD_1 ( ) { METHOD_1 ( ( ( VAR_1 . size ( ) ) - 1 ) ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1994,['Insert UnaryOperator'],"['BinaryOperator', 'Invocation', 'Literal']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1508,1508,"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; METHOD_3 ( VAR_4 ) ; METHOD_4 ( VAR_4 ) ; return VAR_4 ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; METHOD_3 ( VAR_4 ) ; if ( VAR_3 == null ) METHOD_4 ( VAR_4 ) ; return VAR_4 ; }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Move Invocation']",1995,"['Insert Invocation', 'Insert VariableRead']","['If', 'BinaryOperator', 'Block', 'VariableRead', 'Literal', 'Invocation']","['Invocation', 'VariableRead']",GPT Missed Nodes,0.3333333333333333,0.5,0.16666666666666666,0.25,1,1,5
1509,1509,public double [ ] METHOD_1 ( ) { if ( ( VAR_1 ) instanceof TYPE_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return TYPE_2 . METHOD_2 ( VAR_2 . METHOD_1 ( ) ) ; } return null ; },public double [ ] METHOD_1 ( ) { if ( ( VAR_1 ) instanceof TYPE_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; TYPE_2 . METHOD_2 ( VAR_2 . METHOD_1 ( ) ) ; } return null ; },"['Move Invocation', 'Delete Return']",1997,['Delete Return'],"['Invocation', 'Return']",['Return'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1510,1510,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; super . METHOD_1 ( VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; super . METHOD_1 ( VAR_1 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1998,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1511,1511,public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeAccess', 'Delete Invocation']",1999,['Delete Invocation'],"['TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1512,1512,"public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { this . METHOD_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ) ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { this . METHOD_2 ( ( ( ( VAR_1 + STRING_2 ) + VAR_2 ) + STRING_3 ) ) ; }","['Move BinaryOperator', 'Move FieldRead', 'Move VariableRead', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2001,"['Delete VariableRead', 'Delete VariableRead']","['BinaryOperator', 'FieldRead', 'VariableRead', 'FieldRead', 'FieldRead', 'BinaryOperator']","['VariableRead', 'VariableRead']",GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,2,6
1513,1513,public void METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { VAR_2 = 0 ; VAR_3 = true ; VAR_4 = true ; VAR_5 = VAR_6 ; } else { VAR_7 . add ( VAR_8 . METHOD_2 ( ) ) ; } },public void METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { VAR_2 = 0 ; VAR_3 = true ; VAR_4 = true ; VAR_5 = VAR_6 ; } VAR_7 . add ( VAR_8 . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete Block']",2002,['Delete Block'],"['Invocation', 'Block']",['Block'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1514,1514,private void METHOD_1 ( ) { if ( ( VAR_1 ) > INT_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } },private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2004,['Delete Block'],"['Invocation', 'Invocation', 'Invocation', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.125,0.2222222222222222,1,0,7
1515,1515,"public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { METHOD_2 ( ( ( VAR_3 . toString ( ) ) + STRING_1 ) ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { METHOD_2 ( VAR_3 . toString ( ) ) ; return true ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2005,['Delete Invocation'],"['Invocation', 'FieldRead', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
1516,1516,public java.lang.String METHOD_1 ( ) { return ( STRING_1 + ( TYPE_1 . METHOD_2 ( name ) ) ) + STRING_1 ; },public java.lang.String METHOD_1 ( ) { return ( STRING_1 + ( name ) ) + STRING_1 ; },"['Move FieldRead', 'Delete TypeAccess', 'Delete Invocation']",2010,['Delete Invocation'],"['FieldRead', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
1517,1517,"public void METHOD_1 ( ) { for ( TYPE_1 t : VAR_1 ) { if ( t instanceof TYPE_2 ) METHOD_2 ( t , true , false ) ; VAR_1 . METHOD_3 ( t , false ) ; t = null ; } java.lang.System.out.println ( STRING_1 ) ; }","public void METHOD_1 ( ) { for ( TYPE_1 t : VAR_1 ) { if ( t instanceof TYPE_2 ) VAR_1 . METHOD_3 ( t , false ) ; t = null ; } java.lang.System.out.println ( STRING_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Literal', 'Delete Invocation']",2011,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
1518,1518,"public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < TYPE_2 > VAR_1 ) { return TYPE_3 . METHOD_2 ( new TYPE_4 ( VAR_1 , context , VAR_2 , id , VAR_3 ) ) . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < TYPE_2 > VAR_1 ) { return TYPE_3 . METHOD_2 ( new TYPE_4 ( VAR_1 , context , VAR_2 , id , VAR_3 ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2012,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1519,1519,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String ... args ) { return this . METHOD_2 ( VAR_2 . replace ( VAR_1 , args ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String ... args ) { this . METHOD_2 ( VAR_2 . replace ( VAR_1 , args ) ) ; return this ; }","['Move Invocation', 'Insert ThisAccess']",2013,"['Delete Invocation', 'Insert Invocation']","['Invocation', 'ThisAccess']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.0,0.0,0.0,0,2,2
1520,1520,public void METHOD_1 ( ) { if ( ( getActivity ( ) ) != null ) { ( ( TYPE_1 ) ( getActivity ( ) ) ) . METHOD_2 ( ) ; } },public void METHOD_1 ( ) { ( ( TYPE_1 ) ( getActivity ( ) ) ) . METHOD_2 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2016,['Delete Invocation'],"['Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1521,1521,public TYPE_1 METHOD_1 ( int index ) { if ( ( ( VAR_1 ) != null ) && ( index < ( VAR_2 . size ( ) ) ) ) { return VAR_2 . get ( index ) ; } return null ; },public TYPE_1 METHOD_1 ( int index ) { if ( ( VAR_1 ) != null ) { return VAR_2 . get ( index ) ; } return null ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete BinaryOperator']",2017,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'TypeAccess', 'Invocation', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1522,1522,public boolean METHOD_1 ( java.lang.Object VAR_1 ) { return ( METHOD_2 ( ) ) > 0 ; },public boolean METHOD_1 ( java.lang.Object VAR_1 ) { return ( this . METHOD_2 ( ) ) > 0 ; },['Insert ThisAccess'],2018,['Insert TypeAccess'],['ThisAccess'],['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1523,1523,public TYPE_1 METHOD_1 ( java.lang.Integer t ) { throw new TYPE_2 ( ) ; },public void METHOD_1 ( java.lang.Integer t ) { throw new TYPE_2 ( ) ; },['Update TypeReference'],2020,['Update TypeReference'],['TypeReference'],['TypeReference'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1524,1524,public boolean METHOD_1 ( TYPE_1 item ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . remove ( VAR_3 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( VAR_3 . METHOD_3 ( ) ) ; return true ; },public boolean METHOD_1 ( TYPE_1 item ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . remove ( position ) ; METHOD_5 ( position ) ; VAR_1 . METHOD_4 ( ) ; return true ; },"['Insert Invocation', 'Insert Invocation', 'Move TypeAccess', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2021,"['Update Invocation', 'Update Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'FieldRead', 'FieldRead', 'TypeAccess', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,2,11
1525,1525,"public static boolean METHOD_1 ( java.io.File file ) { return new java.io.File ( file , STRING_1 ) . METHOD_2 ( ) ; }","public static boolean METHOD_1 ( java.io.File file ) { return ! ( new java.io.File ( file , STRING_1 ) . METHOD_2 ( ) ) ; }","['Insert UnaryOperator', 'Move Invocation']",2022,['Insert UnaryOperator'],"['UnaryOperator', 'Invocation']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1526,1526,"public void start ( ) { if ( ( this . VAR_1 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 , VAR_3 ) ; } }","public void start ( ) { VAR_2 . METHOD_1 ( VAR_1 , VAR_3 ) ; }","['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2023,['Delete Invocation'],"['Invocation', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
1527,1527,public void METHOD_1 ( ) { if ( ( getView ( ) ) != null ) { getView ( ) . METHOD_2 ( ) ; METHOD_3 ( ) ; } },public void METHOD_1 ( ) { getView ( ) . METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2024,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1528,1528,public java.lang.String METHOD_1 ( ) { return ( VAR_1 ) + ( name ( ) ) ; },public java.lang.String METHOD_1 ( ) { return name ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2025,"['Delete TypeAccess', 'Delete LocalVariable']","['Invocation', 'FieldRead', 'BinaryOperator']","['TypeAccess', 'LocalVariable']",Partial Match,0.0,0.0,0.0,0.0,0,2,3
1529,1529,public boolean METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) + ( ( VAR_1 . METHOD_3 ( ) ) * ( METHOD_4 ( ) ) ) ) > ( VAR_1 . METHOD_5 ( ) ) ; },public boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) > ( ( VAR_1 . METHOD_5 ( ) ) + ( ( VAR_1 . METHOD_3 ( ) ) * ( METHOD_4 ( ) ) ) ) ; },"['Move Invocation', 'Move Invocation']",2026,['Move BinaryOperator'],"['Invocation', 'Invocation']",['BinaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1530,1530,protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = VAR_1 ; METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; },protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_2 = VAR_1 ; METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; super . METHOD_1 ( VAR_1 ) ; },['Move Invocation'],2027,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1531,1531,public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 . length ( ) ) > 0 ) { this . METHOD_1 ( java.lang.Float . METHOD_2 ( VAR_1 ) ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( java.lang.Float . METHOD_2 ( VAR_1 ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2028,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1532,1532,private boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) ) ) && ( ! ( METHOD_2 ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) ) ; },private boolean METHOD_1 ( ) { return ( METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) ) && ( METHOD_2 ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete UnaryOperator', 'Delete UnaryOperator']",2029,"['Delete UnaryOperator', 'Delete UnaryOperator']","['Invocation', 'Invocation', 'UnaryOperator', 'UnaryOperator']","['UnaryOperator', 'UnaryOperator']",GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,2,0,2
1533,1533,"public void remove ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . remove ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_4 . METHOD_1 ( STRING_1 , VAR_1 ) ; } else { VAR_2 . METHOD_2 ( ) . METHOD_3 ( true ) ; } }",public void remove ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . remove ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( true ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2035,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'VariableRead', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.09090909090909091,0.16666666666666669,1,0,10
1534,1534,"public TYPE_1 METHOD_1 ( final TYPE_2 id ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) . get ( this . VAR_2 , id ) ; if ( VAR_1 != null ) VAR_1 . METHOD_3 ( ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( final TYPE_2 id ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) . get ( this . VAR_2 , id ) ; VAR_1 . METHOD_3 ( ) ; return VAR_1 ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2036,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1535,1535,public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; while ( true ) { VAR_1 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { METHOD_2 ( ) ; while ( true ) { METHOD_3 ( ) ; } },"['Update TypeAccess', 'Update TypeAccess']",2037,"['Delete TypeAccess', 'Delete TypeAccess']","['TypeAccess', 'TypeAccess']","['TypeAccess', 'TypeAccess']",Exact Match,1.0,0.0,0.0,0.0,0,2,2
1536,1536,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 , java.lang.String token ) { return METHOD_2 ( token ) . METHOD_3 ( VAR_1 , ( VAR_2 * INT_1 ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { return METHOD_2 ( ) . METHOD_3 ( VAR_1 , ( VAR_2 * INT_1 ) ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2038,['Delete Parameter'],"['TypeReference', 'Parameter', 'VariableRead']",['Parameter'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
1537,1537,"private static java.lang.String METHOD_1 ( java.lang.String text ) { return TYPE_1 . METHOD_2 ( VAR_1 . remove ( TYPE_2 . METHOD_3 ( text , CHAR_1 ) , STRING_1 ) ) ; }","private static java.lang.String METHOD_1 ( java.lang.String text ) { return VAR_1 . remove ( TYPE_2 . METHOD_3 ( text , CHAR_1 ) , STRING_1 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2039,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
1538,1538,public void METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_2 ) { METHOD_2 ( ( ( TYPE_1 ) ( VAR_1 ) ) ) ; } else TYPE_2 . METHOD_3 ( ( ( TYPE_1 ) ( VAR_1 ) ) ) ; },public void METHOD_1 ( java.lang.Object VAR_1 ) { METHOD_2 ( ( ( TYPE_1 ) ( VAR_1 ) ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete TypeAccess', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2040,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'FieldRead', 'Block', 'TypeAccess', 'TypeReference', 'VariableRead', 'Invocation', 'Block', 'If']","['Invocation', 'TypeAccess']",GPT Missed Nodes,0.2857142857142857,1.0,0.2222222222222222,0.3636363636363636,2,0,7
1539,1539,"private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( TYPE_3 . METHOD_2 ( ( ( VAR_2 ) + ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ) ) , ( STRING_1 + ( VAR_3 . toString ( ) ) ) ) ; }","private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) ) , ( STRING_1 + ( VAR_3 . toString ( ) ) ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2041,['Delete Invocation'],"['Invocation', 'FieldRead', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
1540,1540,"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { final TYPE_3 VAR_2 = METHOD_2 ( VAR_3 ) ; VAR_4 . assertThat ( TYPE_4 . METHOD_3 ( VAR_5 . toString ( VAR_2 ) ) , TYPE_5 . METHOD_4 ( VAR_1 ) ) ; return this ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { final TYPE_3 VAR_2 = METHOD_2 ( VAR_3 ) ; VAR_4 . assertThat ( VAR_5 . toString ( VAR_2 ) , TYPE_5 . METHOD_4 ( VAR_1 ) ) ; return this ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2042,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess']",Exact Match,1.0,1.0,0.3333333333333333,0.5,2,0,4
1541,1541,"private TYPE_1 METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , TYPE_2 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ) ; }","private TYPE_1 METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) ; }","['Insert ConstructorCall', 'Insert FieldRead', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2046,['Update Invocation'],"['ConstructorCall', 'FieldRead', 'FieldRead', 'FieldRead', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,9
1542,1542,public boolean METHOD_1 ( ) { return ( ( this . METHOD_2 ( ) ) != null ) && ( ! ( this . METHOD_2 ( ) . equals ( STRING_1 ) ) ) ; },public boolean METHOD_1 ( ) { return ( this . METHOD_2 ( ) ) != null ; },"['Move BinaryOperator', 'Delete ThisAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",2047,"['Delete BinaryOperator', 'Delete UnaryOperator', 'Delete Invocation']","['BinaryOperator', 'ThisAccess', 'Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator']","['BinaryOperator', 'UnaryOperator', 'Invocation']",GPT Missed Nodes,0.6,1.0,0.42857142857142855,0.6,3,0,4
1543,1543,"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( ( - 1L ) ) ; if ( METHOD_3 ( ) ) METHOD_4 ( VAR_1 , VAR_2 ) ; }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( ( - 1L ) ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",2048,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1544,1544,private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_3 . METHOD_3 ( ) ) { java.util.Collections.sort ( VAR_1 ) ; } METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; },private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; java.util.Collections.sort ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2049,['Delete Block'],"['Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Block'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
1545,1545,public boolean METHOD_1 ( ) { return ( ( VAR_1 . METHOD_1 ( ) ) && ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ; },public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",2050,"['Delete UnaryOperator', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator']","['UnaryOperator', 'Invocation', 'UnaryOperator', 'Invocation']",GPT Missed Nodes,0.5,1.0,0.4444444444444444,0.6153846153846153,4,0,5
1546,1546,"public boolean METHOD_1 ( java.io.File VAR_1 , java.lang.String name ) { return ( name . METHOD_2 ( VAR_2 ) ) || ( name . METHOD_2 ( VAR_3 ) ) ; }","public boolean METHOD_1 ( java.io.File VAR_1 , java.lang.String name ) { return name . METHOD_2 ( VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",2051,['Delete Invocation'],"['Invocation', 'VariableRead', 'TypeAccess', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
1547,1547,"public void METHOD_1 ( ) { if ( ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( ) ) ) VAR_3 . show ( ) ; VAR_4 . i ( STRING_1 , STRING_2 ) ; }","public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) VAR_3 . show ( ) ; VAR_4 . i ( STRING_1 , STRING_2 ) ; }","['Move UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",2052,['Delete Invocation'],"['UnaryOperator', 'TypeAccess', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.25,0.4,1,0,3
1548,1548,private boolean METHOD_1 ( java.lang.String title ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 . METHOD_2 ( METHOD_3 ( title ) ) . METHOD_4 ( ) ) { return true ; } } return false ; },private boolean METHOD_1 ( java.lang.String title ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 . METHOD_2 ( title ) . METHOD_4 ( ) ) { return true ; } } return false ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move VariableRead', 'Delete Invocation']",2053,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
1549,1549,public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_3 . toString ( VAR_4 . METHOD_2 ( ) ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_4 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2054,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
1550,1550,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( - 1 ) != ( TYPE_2 . METHOD_2 ( ) ) ) { VAR_2 = TYPE_3 . METHOD_3 ( TYPE_2 . METHOD_2 ( ) ) . toString ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = TYPE_3 . METHOD_3 ( TYPE_2 . METHOD_2 ( ) ) . toString ( ) ; },"['Move Assignment', 'Delete Literal', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2055,['Delete Invocation'],"['Assignment', 'Literal', 'UnaryOperator', 'TypeAccess', 'Invocation', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.125,1.0,0.125,0.2222222222222222,1,0,7
1551,1551,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { this . VAR_1 = VAR_1 ; this . VAR_2 = true ; } else { this . VAR_2 = false ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { this . VAR_1 = VAR_1 ; this . VAR_2 = true ; } this . VAR_2 = false ; },"['Move Assignment', 'Delete Block']",2056,['Delete Assignment'],"['Assignment', 'Block']",['Assignment'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
1552,1552,public void METHOD_1 ( ) { while ( true ) { synchronized ( VAR_1 ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { return ; } VAR_3 . METHOD_3 ( ) ; } } },public void METHOD_1 ( ) { while ( true ) { synchronized ( VAR_1 ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { return ; } } VAR_3 . METHOD_3 ( ) ; } },['Move Invocation'],2057,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1553,1553,public int METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) return METHOD_2 ( ) . size ( ) ; return 0 ; },public int METHOD_1 ( ) { return METHOD_2 ( ) . size ( ) ; },"['Move Return', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",2058,"['Delete UnaryOperator', 'Delete Invocation', 'Delete Return']","['Return', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']","['UnaryOperator', 'Invocation', 'Return']",Partial Match,0.2857142857142857,0.6666666666666666,0.25,0.36363636363636365,2,1,6
1554,1554,public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ( VAR_2 . size ( ) ) > 0 ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 ) != null ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2059,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1555,1555,"public TYPE_1 execute ( ) { java.lang.System.out.println ( ( STRING_1 + ( message ) ) ) ; if ( VAR_1 ) { return new TYPE_1 ( 0L , STRING_2 ) ; } else { return new TYPE_1 ( INT_1 , STRING_3 ) ; } }",public boolean execute ( ) { java.lang.System.out.println ( ( STRING_1 + ( message ) ) ) ; return VAR_1 ; },"['Update TypeReference', 'Insert Return', 'Move FieldRead', 'Delete Literal', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",2060,"['Update Return', 'Delete Return', 'Delete Return', 'Delete BinaryOperator', 'Delete Invocation']","['TypeReference', 'Return', 'FieldRead', 'Literal', 'FieldRead', 'ConstructorCall', 'Return', 'Block', 'FieldRead', 'FieldRead', 'ConstructorCall', 'Return', 'Block', 'If']","['Return', 'Return', 'Return', 'BinaryOperator', 'Invocation']",Partial Match,0.1111111111111111,0.4,0.14285714285714285,0.21052631578947364,2,3,12
1556,1556,"public boolean METHOD_1 ( TYPE_1 event , float x , float y , int VAR_1 , int VAR_2 ) { if ( VAR_3 ) VAR_4 . METHOD_2 ( ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 event , float x , float y , int VAR_1 , int VAR_2 ) { VAR_4 . METHOD_2 ( ) ; return true ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2062,['Delete Wra'],"['Invocation', 'FieldRead', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1557,1557,"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 . setValue ( TYPE_2 . METHOD_2 ( VAR_4 , getValue ( ) ) ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_2 . METHOD_4 ( VAR_6 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 . setValue ( TYPE_2 . METHOD_2 ( getValue ( ) , VAR_4 ) ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_2 . METHOD_4 ( VAR_6 ) ; }",['Move TypeAccess'],2063,"['Move VariableRead', 'Move VariableRead']",['TypeAccess'],"['VariableRead', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,1
1558,1558,public java.lang.Double getValue ( ) { try { return METHOD_1 ( java.lang.Double . METHOD_2 ( getText ( ) ) ) ; } catch ( TYPE_1 VAR_1 ) { return 0.0 ; } },public java.lang.Double getValue ( ) { try { return java.lang.Double . METHOD_2 ( getText ( ) ) ; } catch ( TYPE_1 VAR_1 ) { return 0.0 ; } },"['Move Invocation', 'Delete Invocation']",2064,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1559,1559,public < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( final TYPE_2 < TYPE_1 > VAR_1 ) { return VAR_2 . METHOD_2 ( super . METHOD_1 ( VAR_1 ) ) ; },public < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( final TYPE_2 < TYPE_1 > VAR_1 ) { return super . METHOD_1 ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; },"['Move Invocation', 'Move Invocation', 'Move VariableRead']",2067,"['Move TypeAccess', 'Move Invocation']","['Invocation', 'Invocation', 'VariableRead']","['TypeAccess', 'Invocation']",Partial Match,0.3333333333333333,0.5,0.3333333333333333,0.4,1,1,2
1560,1560,"public void METHOD_1 ( byte [ ] data , int offset , int count ) { if ( ( VAR_1 ) > 0 ) VAR_2 . METHOD_1 ( data , offset , count ) ; }","public void METHOD_1 ( byte [ ] data , int offset , int count ) { VAR_2 . METHOD_1 ( data , offset , count ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2068,['Delete Block'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1561,1561,boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ) . equals ( VAR_1 ) ) && ( VAR_2 ) ; },boolean METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) . equals ( VAR_1 ) ) { return VAR_2 ; } return false ; },"['Insert If', 'Move Invocation', 'Insert Block', 'Insert Literal', 'Insert Return', 'Move FieldRead', 'Delete BinaryOperator']",2070,"['Insert Invocation', 'Insert Return', 'Delete BinaryOperator', 'Update Return']","['If', 'Invocation', 'Block', 'Literal', 'Return', 'FieldRead', 'BinaryOperator']","['Invocation', 'Return', 'BinaryOperator', 'Return']",GPT Missed Nodes,0.42857142857142855,0.5,0.2857142857142857,0.36363636363636365,2,2,5
1562,1562,"public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { VAR_1 . assertTrue ( ( ( TYPE_2 . METHOD_2 ( VAR_2 class . METHOD_3 ( STRING_1 ) ) ) == 0 ) ) ; }","public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { TYPE_2 . METHOD_2 ( VAR_2 class . METHOD_3 ( STRING_1 ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation']",2072,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Literal', 'BinaryOperator', 'Invocation']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
1563,1563,public int METHOD_1 ( ) { return ( VAR_1 . size ( ) ) + ( VAR_2 ) ; },public int METHOD_1 ( ) { return VAR_1 . size ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2073,['Delete VariableRead'],"['Invocation', 'FieldRead', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1564,1564,public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . add ( VAR_1 ) ; if ( ( VAR_3 . length ( ) ) > ( VAR_4 ) ) { this . VAR_4 = length ( ) ; } ( this . VAR_5 ) ++ ; },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . add ( VAR_1 ) ; this . VAR_4 = length ( ) ; ( this . VAR_5 ) ++ ; },"['Move Assignment', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2074,['Delete Assignment'],"['Assignment', 'TypeAccess', 'Invocation', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['Assignment'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
1565,1565,public static void METHOD_1 ( TYPE_1 obj ) { for ( int i = 0 ; i < ( ( VAR_1 ) + 1 ) ; i ++ ) { VAR_2 [ i ] = VAR_3 ; } },public static void METHOD_1 ( TYPE_1 obj ) { for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) { VAR_2 [ i ] = VAR_3 ; } },"['Update BinaryOperator', 'Move BinaryOperator', 'Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",2075,['Delete Assignment'],"['BinaryOperator', 'BinaryOperator', 'VariableRead', 'Literal', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1566,1566,"private void init ( ) throws java.io.IOException , TYPE_1 { this . data = TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( file ) ) ) ; }","private void init ( ) throws java.io.IOException , TYPE_1 { this . data = TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_3 ( file ) ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2076,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1567,1567,"public void METHOD_1 ( TYPE_1 < java.lang.String , java.lang.String > VAR_1 ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) { VAR_2 . add ( VAR_1 ) ; } METHOD_2 ( ) ; }","public void METHOD_1 ( TYPE_1 < java.lang.String , java.lang.String > VAR_1 ) { VAR_2 . add ( VAR_1 ) ; METHOD_2 ( ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2077,['Delete Invocation'],"['Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1568,1568,"public void METHOD_1 ( int count ) { assertThat ( METHOD_2 ( METHOD_3 ( STRING_1 ) , java.lang.Integer.toString ( count ) ) ) ; }","public void METHOD_1 ( int count ) { METHOD_2 ( METHOD_3 ( STRING_1 ) , java.lang.Integer.toString ( count ) ) ; }","['Move Invocation', 'Delete Invocation']",2078,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1569,1569,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( ( VAR_1 ) != null ) && ( VAR_2 ) ) { VAR_1 . METHOD_1 ( ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_2 ) VAR_1 . METHOD_1 ( ) ; },"['Move FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2079,"['Delete VariableRead', 'Delete TypeAccess']","['FieldRead', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']","['VariableRead', 'TypeAccess']",Partial Match,0.0,0.0,0.0,0.0,0,2,5
1570,1570,"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( INT_1 , 1 , STRING_1 ) ; if ( VAR_2 ) METHOD_3 ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 ) METHOD_2 ( INT_1 , 1 , STRING_1 ) ; }","['Move Invocation', 'Delete Invocation']",2080,"['Delete Invocation', 'Move Invocation']","['Invocation', 'Invocation']","['Invocation', 'Invocation']",Exact Match,1.0,1.0,1.0,1.0,2,0,0
1571,1571,"public boolean update ( TYPE_1 VAR_1 ) { return VAR_2 . update ( VAR_3 , VAR_1 ) ; }","public void update ( TYPE_1 VAR_1 ) { VAR_2 . update ( VAR_3 , VAR_1 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",2081,"['Update TypeAccess', 'Delete VariableRead']","['TypeReference', 'Invocation', 'Return']","['TypeAccess', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,3
1572,1572,public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_1 = VAR_1 ; return this ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 != null ) { this . VAR_1 = VAR_1 ; } return this ; },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Move Assignment']",2083,"['Insert Invocation', 'Insert TypeAccess']","['If', 'BinaryOperator', 'Block', 'VariableRead', 'Literal', 'Assignment']","['Invocation', 'TypeAccess']",Partial Match,0.0,0.0,0.0,0.0,0,2,6
1573,1573,"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; if ( VAR_2 ) { VAR_3 . METHOD_3 ( ) ; } }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_3 . METHOD_3 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2084,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
1574,1574,public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2085,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1575,1575,"public void METHOD_1 ( long VAR_1 , long VAR_2 ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } }","public void METHOD_1 ( long VAR_1 , long VAR_2 ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2087,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1576,1576,public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ( ( VAR_3 . getId ( ) ) + 1 ) ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . getId ( ) ) ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",2088,['Delete UnaryOperator'],"['Invocation', 'Literal', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1577,1577,public TYPE_1 < TYPE_2 > METHOD_1 ( ) { if ( ! ( VAR_1 ) ) VAR_2 = true ; return this ; },public TYPE_1 < TYPE_2 > METHOD_1 ( ) { VAR_2 = true ; return this ; },"['Move Assignment', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2089,['Delete UnaryOperator'],"['Assignment', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['UnaryOperator'],GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,1,0,4
1578,1578,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_1 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2090,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1579,1579,public boolean METHOD_1 ( ) { return ! ( VAR_1 . get ( ) ) ; },public boolean METHOD_1 ( ) { return VAR_1 . get ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",2091,['Delete UnaryOperator'],"['Invocation', 'UnaryOperator']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1580,1580,private static java.lang.String METHOD_1 ( android.content.Context context ) { if ( VAR_1 . isEmpty ( VAR_2 ) ) { VAR_2 = ( context . METHOD_2 ( ) ) + STRING_1 ; } return VAR_2 ; },private static java.lang.String METHOD_1 ( android.content.Context context ) { if ( VAR_1 . isEmpty ( VAR_2 ) ) { VAR_2 = context . METHOD_2 ( ) ; } return VAR_2 ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2092,"['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']","['Invocation', 'FieldRead', 'BinaryOperator']","['TypeAccess', 'VariableRead', 'Invocation']",Partial Match,0.2,0.0,0.0,0.0,0,3,3
1581,1581,"public TYPE_1 < ? , java.lang.String > METHOD_1 ( ) { this . METHOD_2 ( ) ; return VAR_1 . assertThat ( ( STRING_1 + ( VAR_2 . getName ( ) ) ) ) . METHOD_3 ( ) ; }","public TYPE_1 < ? , java.lang.String > METHOD_1 ( ) { this . METHOD_2 ( ) ; return VAR_1 . assertThat ( VAR_2 . getName ( ) ) . METHOD_3 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2093,['Delete Invocation'],"['Invocation', 'FieldRead', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
1582,1582,public long getId ( ) { return VAR_1 ; },public long getId ( ) { return this . getId ( ) ; },"['Insert Invocation', 'Insert ThisAccess', 'Delete FieldRead']",2094,"['Insert TypeAccess', 'Insert Invocation']","['Invocation', 'ThisAccess', 'FieldRead']","['TypeAccess', 'Invocation']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
1583,1583,private void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( this ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_1 . METHOD_2 ( this ) ; METHOD_4 ( VAR_1 ) ; VAR_1 . METHOD_3 ( this ) ; METHOD_5 ( ) ; } },['Move Invocation'],2095,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1584,1584,public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { VAR_2 = VAR_1 ; } return TYPE_1 . METHOD_3 ( ) ; },public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = VAR_1 ; return TYPE_1 . METHOD_3 ( ) ; },"['Move Assignment', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2096,['Delete Invocation'],"['Assignment', 'TypeAccess', 'VariableRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1585,1585,public TYPE_1 [ ] METHOD_1 ( ) { if ( VAR_1 ) METHOD_2 ( ) ; return VAR_2 ; },public TYPE_1 [ ] METHOD_1 ( ) { METHOD_2 ( ) ; return VAR_2 ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2098,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
1586,1586,"public boolean METHOD_1 ( int VAR_1 , java.lang.Object item ) { if ( VAR_2 . METHOD_1 ( VAR_1 , item ) ) { METHOD_2 ( item ) ; return true ; } return false ; }","public boolean METHOD_1 ( int VAR_1 , java.lang.Object item ) { return ( VAR_2 . METHOD_1 ( VAR_1 , item ) ) && ( METHOD_2 ( item ) ) ; }","['Insert BinaryOperator', 'Move Invocation', 'Move Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",2099,"['Delete Invocation', 'Delete Return', 'Delete Return', 'Insert BinaryOperator']","['BinaryOperator', 'Invocation', 'Invocation', 'Literal', 'Return', 'Block', 'If', 'Literal']","['Invocation', 'Return', 'Return', 'BinaryOperator']",GPT Missed Nodes,0.5,0.5,0.25,0.3333333333333333,2,2,6
1587,1587,public int METHOD_1 ( ) { if ( ( data ) != null ) { return VAR_1 . length ; } return 0 ; },public int METHOD_1 ( ) { return VAR_1 . length ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",2100,['Delete Return'],"['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
1588,1588,"public void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ( ( VAR_4 ) + ( VAR_5 ) ) , VAR_6 ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_7 , VAR_1 ) . METHOD_5 ( ) ; }","public void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , VAR_6 ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_7 , VAR_1 ) . METHOD_5 ( ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2101,['Delete UnaryOperator'],"['TypeAccess', 'FieldRead', 'FieldRead', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1589,1589,"protected synchronized void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_2 == ( VAR_3 ) ) { VAR_4 = true ; response = VAR_1 ; if ( ( VAR_5 ) != null ) VAR_5 . METHOD_2 ( ) ; } }","protected synchronized void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_2 == ( VAR_3 ) ) { VAR_4 = true ; response = VAR_1 ; VAR_5 . METHOD_2 ( ) ; } }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2102,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1590,1590,public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + ( VAR_1 . METHOD_1 ( ) ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ; },public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",2104,['Delete Invocation'],"['FieldRead', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
1591,1591,public float METHOD_1 ( ) { return ( VAR_1 ) * ( METHOD_2 ( ) ) ; },public float METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",2105,['Delete Invocation'],"['FieldRead', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
1592,1592,"public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) { VAR_2 = VAR_3 . METHOD_3 ( ) . METHOD_1 ( line , this ) ; } }","public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 = VAR_3 . METHOD_3 ( ) . METHOD_1 ( line , this ) ; } }","['Move UnaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2107,['Delete VariableRead'],"['UnaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1593,1593,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . equals ( VAR_1 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 == null ) || ( VAR_2 . equals ( VAR_1 ) ) ; },"['Insert BinaryOperator', 'Insert BinaryOperator', 'Move Invocation', 'Insert VariableRead', 'Insert Literal']",2108,"['Insert Invocation', 'Insert VariableRead']","['BinaryOperator', 'BinaryOperator', 'Invocation', 'VariableRead', 'Literal']","['Invocation', 'VariableRead']",GPT Missed Nodes,0.5,0.5,0.2,0.28571428571428575,1,1,4
1594,1594,public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_1 ( ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { try { VAR_3 . METHOD_1 ( ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Move Invocation']",2109,"['Move Invocation', 'Move Invocation']","['Invocation', 'Invocation']","['Invocation', 'Invocation']",Exact Match,1.0,1.0,1.0,1.0,2,0,0
1595,1595,"public void METHOD_1 ( TYPE_1 message , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { if ( VAR_3 ) { TYPE_4 . METHOD_2 ( ) . METHOD_3 ( message ) ; } }","public void METHOD_1 ( TYPE_1 message , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 . METHOD_2 ( ) . METHOD_3 ( message ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2110,['Delete Wra'],"['Invocation', 'FieldRead', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1596,1596,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( STRING_1 , STRING_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( STRING_1 , STRING_2 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2111,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1597,1597,public java.lang.Float METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return 0.0F ; else return VAR_1 ; },public float METHOD_1 ( ) { return VAR_1 ; },"['Update TypeReference', 'Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",2112,"['Delete TypeAccess', 'Delete Return', 'Update Wra', 'Update Return']","['TypeReference', 'Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'Block', 'If']","['TypeAccess', 'Return', 'Wra', 'Return']",Partial Match,0.1111111111111111,0.25,0.1,0.14285714285714288,1,3,9
1598,1598,public void METHOD_1 ( TYPE_1 event ) { if ( ( ( VAR_1 ) != null ) && ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) ) METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 event ) { if ( ( ( VAR_1 ) == null ) || ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) == null ) ) return ; METHOD_4 ( ) ; },"['Move Invocation', 'Update BinaryOperator', 'Update BinaryOperator', 'Update BinaryOperator', 'Insert Return']",2113,"['Update If', 'Insert Return']","['Invocation', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'Return']","['If', 'Return']",Partial Match,0.25,0.5,0.2,0.28571428571428575,1,1,4
1599,1599,private boolean METHOD_1 ( java.lang.String key ) { return ( ( ( TYPE_1 . METHOD_2 ( key ) ) == null ) && ( ( context ) != null ) ) && ( ( context . METHOD_3 ( key ) ) == null ) ; },private boolean METHOD_1 ( java.lang.String key ) { return ( ( TYPE_1 . METHOD_2 ( key ) ) == null ) && ( ( context . METHOD_3 ( key ) ) == null ) ; },"['Move BinaryOperator', 'Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2115,['Delete TypeAccess'],"['BinaryOperator', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1600,1600,"public boolean METHOD_1 ( int VAR_1 , int VAR_2 , boolean VAR_3 ) { return METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( int VAR_1 , int VAR_2 , boolean VAR_3 ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",2116,"['Update TypeAccess', 'Delete Return']","['TypeReference', 'Invocation', 'Return']","['TypeAccess', 'Return']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
1601,1601,public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { METHOD_3 ( 0 ) ; } else { METHOD_4 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) ; METHOD_4 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2118,"['Delete Return', 'Delete Invocation']","['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Literal', 'Invocation', 'Block', 'Block', 'If']","['Return', 'Invocation']",Partial Match,0.14285714285714285,0.5,0.1111111111111111,0.1818181818181818,1,1,8
1602,1602,"public void METHOD_1 ( TYPE_1 key , java.lang.Object VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_1 ( key , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 key , java.lang.Object VAR_1 ) { VAR_2 . METHOD_1 ( key , VAR_1 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2119,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1603,1603,"private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = VAR_1 . METHOD_2 ( METHOD_3 ( ) , false , VAR_3 ) ; METHOD_4 ( ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 . METHOD_2 ( METHOD_3 ( ) , false , VAR_3 ) ; METHOD_4 ( ) ; }","['Move Assignment', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2120,['Delete Invocation'],"['Assignment', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
1604,1604,"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( this ) . METHOD_3 ( VAR_1 , new TYPE_2 ( STRING_1 ) ) ; METHOD_4 ( ) ; if ( VAR_2 ) { METHOD_5 ( ) ; VAR_2 = false ; } }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( this ) . METHOD_3 ( VAR_1 , new TYPE_2 ( STRING_1 ) ) ; if ( VAR_2 ) { METHOD_5 ( ) ; VAR_2 = false ; } }",['Delete Invocation'],2121,['Delete Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1605,1605,public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( ) ; } return VAR_2 . getValue ( ) ; },public java.lang.String METHOD_1 ( ) { return VAR_2 . getValue ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",2122,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1606,1606,"public void METHOD_1 ( TYPE_1 VAR_1 , int error ) { if ( ( VAR_1 != null ) && ( ( VAR_2 ) != null ) ) { VAR_2 . METHOD_2 ( ) ; } VAR_2 = null ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int error ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2123,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,10
1607,1607,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2124,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If', 'Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.14285714285714285,0.75,0.2727272727272727,0.39999999999999997,3,1,8
1608,1608,public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; if ( null != ( this . VAR_2 ) ) { this . VAR_2 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; },"['Delete Literal', 'Delete ThisAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2126,['Delete Invocation'],"['Literal', 'ThisAccess', 'FieldRead', 'BinaryOperator', 'ThisAccess', 'FieldRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1609,1609,"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , false ) ; VAR_1 = true ; if ( ! ( VAR_2 ) ) { METHOD_4 ( ) ; METHOD_5 ( true ) ; } if ( VAR_3 ) VAR_4 . METHOD_6 ( ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , false ) ; VAR_1 = true ; if ( ! ( VAR_2 ) ) { METHOD_4 ( ) ; METHOD_5 ( true ) ; } VAR_4 . METHOD_6 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2127,['Delete Block'],"['Invocation', 'FieldRead', 'Block', 'If']",['Block'],GPT Missed Nodes,0.25,1.0,0.25,0.4,1,0,3
1610,1610,"public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( value ) ) ) { VAR_1 . put ( VAR_2 , value ) ; } else { VAR_1 . put ( VAR_2 , null ) ; } }","public void METHOD_1 ( java.lang.String value ) { VAR_1 . put ( VAR_2 , value ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",2128,"['Delete Assignment', 'Delete Invocation']","['Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'UnaryOperator', 'Block', 'TypeAccess', 'TypeAccess', 'Literal', 'Invocation', 'Block', 'If']","['Assignment', 'Invocation']",Partial Match,0.125,0.5,0.08333333333333333,0.14285714285714285,1,1,11
1611,1611,"public double [ ] METHOD_1 ( long offset , double [ ] data ) { return METHOD_1 ( offset , ( ( int ) ( ( METHOD_2 ( ) ) - offset ) ) , data ) ; }","public double [ ] METHOD_1 ( long offset , double [ ] data ) { return METHOD_1 ( offset , ( ( int ) ( ( ( METHOD_2 ( ) ) - offset ) + 1 ) ) , data ) ; }","['Insert BinaryOperator', 'Move TypeReference', 'Move BinaryOperator', 'Insert Literal']",2129,['Insert BinaryOperator'],"['BinaryOperator', 'TypeReference', 'BinaryOperator', 'Literal']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1612,1612,public void METHOD_1 ( android.view.View view ) { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { METHOD_4 ( VAR_1 ) ; } else { if ( VAR_2 ) { METHOD_4 ( VAR_3 ) ; } else { METHOD_4 ( VAR_4 ) ; } } },public void METHOD_1 ( android.view.View view ) { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { METHOD_4 ( VAR_3 ) ; } else { METHOD_4 ( VAR_4 ) ; } },"['Move If', 'Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2132,['Delete Block'],"['If', 'Invocation', 'FieldRead', 'TypeAccess', 'Invocation', 'Block', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.125,0.2222222222222222,1,0,7
1613,1613,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; },['Move Invocation'],2133,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1614,1614,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { } else if ( ( VAR_3 ) == ""\n"" ) { VAR_4 = true ; } else { TYPE_2 . METHOD_2 ( VAR_3 ) ; VAR_5 += VAR_3 ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) == ""\n"" ) { VAR_4 = true ; } else { TYPE_2 . METHOD_2 ( VAR_3 ) ; VAR_5 += VAR_3 ; } }","['Move If', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete Block', 'Delete If']",2134,['Delete Block'],"['If', 'FieldRead', 'UnaryOperator', 'Block', 'Block', 'If']",['Block'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1615,1615,public java.lang.Boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; },public java.lang.Boolean METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_1 ( VAR_1 . METHOD_3 ( ) ) ; },"['Update Invocation', 'Update TypeAccess']",2135,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'TypeAccess']","['TypeAccess', 'Invocation']",Exact Match,1.0,0.0,0.0,0.0,0,2,2
1616,1616,public TYPE_1 update ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_1 ( ) . equals ( VAR_2 ) ) { } return VAR_3 . METHOD_2 ( VAR_1 ) ; },public TYPE_1 update ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_1 ( ) ) == ( VAR_2 ) ) { } return VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",2136,"['Delete Invocation', 'Insert VariableRead']","['BinaryOperator', 'Invocation', 'FieldRead', 'TypeAccess', 'Invocation']","['Invocation', 'VariableRead']",Partial Match,0.2,0.5,0.2,0.28571428571428575,1,1,4
1617,1617,private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; METHOD_4 ( ) ; },['Delete Invocation'],2137,['Delete Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1618,1618,public static void main ( java.lang.String [ ] VAR_1 ) { TYPE_1 . METHOD_1 ( ) ; VAR_2 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; },public static void main ( java.lang.String [ ] VAR_1 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; TYPE_1 . METHOD_1 ( ) ; VAR_2 = TYPE_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Move Assignment']",2138,"['Move Invocation', 'Move Assignment']","['Invocation', 'Assignment']","['Invocation', 'Assignment']",Exact Match,1.0,1.0,1.0,1.0,2,0,0
1619,1619,void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ) ; } },void METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2139,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1620,1620,public int METHOD_1 ( ) { return ( VAR_1 ) || ( VAR_2 ) ? VAR_3 : VAR_4 ; },public int METHOD_1 ( ) { return VAR_1 ? VAR_3 : VAR_4 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2142,['Delete UnaryOperator'],"['FieldRead', 'FieldRead', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1621,1621,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_1 = null ; } },public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_1 = null ; },"['Move Invocation', 'Move Invocation', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2145,['Delete Invocation'],"['Invocation', 'Invocation', 'Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,8
1622,1622,private synchronized void METHOD_1 ( ) { synchronized ( VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { if ( VAR_2 != null ) VAR_2 . METHOD_2 ( ) ; } } },private synchronized void METHOD_1 ( ) { synchronized ( VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { VAR_2 . METHOD_2 ( ) ; } } },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2146,['Delete Block'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1623,1623,private java.lang.Object METHOD_1 ( ) { return java.lang.String . METHOD_2 ( VAR_1 . METHOD_1 ( VAR_2 ) ) ; },private java.lang.Object METHOD_1 ( ) { return VAR_1 . METHOD_1 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2147,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
1624,1624,public void METHOD_1 ( java.lang.String url ) { TYPE_1 . METHOD_2 ( VAR_1 . getContext ( ) ) . METHOD_3 ( url ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) . METHOD_6 ( TYPE_3 . METHOD_7 ( ) ) . METHOD_8 ( VAR_2 ) ; },public void METHOD_1 ( java.lang.String url ) { TYPE_1 . METHOD_2 ( VAR_1 . getContext ( ) ) . METHOD_3 ( url ) . METHOD_6 ( TYPE_3 . METHOD_7 ( ) ) . METHOD_8 ( VAR_2 ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2149,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.125,0.2222222222222222,1,0,7
1625,1625,public void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ) ; } VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2150,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1626,1626,public void METHOD_1 ( java.lang.String name ) { this . VAR_1 = name ; },public void METHOD_1 ( java.lang.String name ) { VAR_1 = name ; },['Delete ThisAccess'],2151,['Delete FieldWrite'],['ThisAccess'],['FieldWrite'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1627,1627,"public void METHOD_1 ( ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ; VAR_1 . METHOD_2 ( false ) ; }","public void METHOD_1 ( ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( false ) ; }","['Move Invocation', 'Update Invocation']",2152,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,0.0,0.0,0.0,0,1,2
1628,1628,public TYPE_1 METHOD_1 ( ) throws java.lang.Throwable { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) . METHOD_4 ( this ) ; return this ; } else { return VAR_2 . METHOD_1 ( ) ; } },public TYPE_1 METHOD_1 ( ) throws java.lang.Throwable { if ( VAR_1 . METHOD_2 ( ) ) VAR_1 . METHOD_3 ( ) . METHOD_4 ( this ) ; return VAR_2 . METHOD_1 ( ) ; },"['Move Return', 'Delete ThisAccess', 'Delete Return', 'Delete Block']",2153,['Delete Return'],"['Return', 'ThisAccess', 'Return', 'Block']",['Return'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1629,1629,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = java.lang.Double . METHOD_2 ( VAR_3 . getValue ( ) . toString ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = ( ( double ) ( VAR_3 . getValue ( ) ) ) ; },"['Move Invocation', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2154,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'TypeReference', 'TypeAccess', 'Invocation', 'Invocation']","['TypeAccess', 'Invocation']",GPT Missed Nodes,0.6666666666666666,1.0,0.4,0.5714285714285715,2,0,3
1630,1630,"private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { return STRING_1 + ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ; }","private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2155,['Delete Invocation'],"['Invocation', 'FieldRead', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
1631,1631,"private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) new TYPE_1 ( getActivity ( ) , this ) . execute ( VAR_2 . toString ( ) , VAR_1 . METHOD_2 ( ) ) ; }",private void METHOD_1 ( ) { new TYPE_1 ( this ) . execute ( VAR_1 . METHOD_2 ( ) ) ; },"['Move Invocation', 'Update ConstructorCall', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2156,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'ConstructorCall', 'Invocation', 'TypeAccess', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']","['Invocation', 'TypeAccess']",GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,2,0,8
1632,1632,public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; super . METHOD_1 ( ) ; },"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , this ) ; }","['Move Invocation', 'Insert ThisAccess']",2158,"['Move Invocation', 'Update Invocation']","['Invocation', 'ThisAccess']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.5,0.5,0.5,1,1,1
1633,1633,public TYPE_1 < java.lang.Integer > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return TYPE_1 . METHOD_2 ( ) ; } return TYPE_1 . METHOD_3 ( VAR_1 . METHOD_1 ( ) ) ; },public int METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return - 1 ; } return VAR_1 . METHOD_1 ( ) ; },"['Update TypeReference', 'Move Invocation', 'Insert UnaryOperator', 'Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2160,"['Update TypeAccess', 'Update Return', 'Update Return', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']","['TypeReference', 'Invocation', 'UnaryOperator', 'Literal', 'TypeReference', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation']","['TypeAccess', 'Return', 'Return', 'Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation']",Partial Match,0.3333333333333333,0.5,0.4444444444444444,0.47058823529411764,4,4,5
1634,1634,"public void METHOD_1 ( int position , int VAR_1 ) { if ( ( VAR_2 ) == null ) return ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; }","public void METHOD_1 ( int position , int VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; }","['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",2161,['Delete Assignment'],"['FieldRead', 'Literal', 'BinaryOperator', 'Return', 'Block', 'If']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1635,1635,"public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_2 ( STRING_1 ) ; VAR_2 . assertEquals ( VAR_1 . METHOD_2 ( ) . getValue ( ) , STRING_1 ) ; }","public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_2 ( STRING_1 ) ; VAR_2 . assertEquals ( VAR_1 . METHOD_2 ( ) , STRING_1 ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Delete Invocation']",2163,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
1636,1636,public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( getString ( VAR_1 ) ) ; } },public void METHOD_1 ( ) { METHOD_3 ( getString ( VAR_1 ) ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",2164,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1637,1637,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) != null ) || ( ( VAR_2 . METHOD_2 ( ) ) == true ) ) { VAR_2 . METHOD_3 ( ) ; } VAR_2 = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) ; } VAR_2 = VAR_1 ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2165,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1638,1638,public void METHOD_1 ( java.util.Set < java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; },public void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; },['Update TypeReference'],2167,['Update TypeAccess'],['TypeReference'],['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1639,1639,public boolean METHOD_1 ( ) { return ( this . VAR_1 ) < INT_1 ; },public boolean METHOD_1 ( ) { if ( ( this . VAR_1 ) > INT_1 ) return false ; else return true ; },"['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Insert Block', 'Insert Return', 'Insert Return', 'Insert Literal', 'Insert Literal', 'Delete Return']",2168,"['Insert BinaryOperator', 'Insert Return', 'Insert Return']","['If', 'BinaryOperator', 'BinaryOperator', 'Block', 'Block', 'Return', 'Return', 'Literal', 'Literal', 'Return']","['BinaryOperator', 'Return', 'Return']",GPT Missed Nodes,0.4,0.6666666666666666,0.2,0.30769230769230765,2,1,8
1640,1640,"public int METHOD_1 ( TYPE_1 handle , double VAR_1 , TYPE_2 listener ) throws TYPE_3 { return METHOD_2 ( handle , VAR_2 , VAR_1 , listener ) ; }","public int METHOD_1 ( TYPE_1 handle , double VAR_1 , TYPE_2 listener ) throws TYPE_3 { return METHOD_2 ( handle , VAR_1 , VAR_2 , listener ) ; }",['Move TypeAccess'],2170,['Move VariableRead'],['TypeAccess'],['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1641,1641,public void METHOD_1 ( ) { VAR_1 = true ; if ( ( ! ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ) { VAR_4 = INT_1 * ( VAR_5 ) ; } METHOD_2 ( ) ; },public void METHOD_1 ( ) { VAR_1 = true ; if ( ! ( VAR_2 ) ) { VAR_4 = INT_1 * ( VAR_5 ) ; } METHOD_2 ( ) ; },"['Move UnaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",2171,['Delete Assignment'],"['UnaryOperator', 'FieldRead', 'UnaryOperator', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1642,1642,public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_2 . equals ( VAR_3 ) ) ) { VAR_4 . setText ( getString ( VAR_5 ) ) ; } else { VAR_4 . setText ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_4 . setText ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2172,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation', 'BinaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.06666666666666667,0.125,1,0,14
1643,1643,public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return false ; } return VAR_1 . METHOD_2 ( ) ; },public boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2174,['Delete Return'],"['FieldRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1644,1644,"public void METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int VAR_2 , int count ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; }","public void METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int VAR_2 , int count ) { METHOD_3 ( ) ; }","['Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2175,"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']","['TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation', 'Invocation']",Exact Match,1.0,1.0,0.5,0.6666666666666666,3,0,3
1645,1645,protected void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } super . METHOD_1 ( ) ; METHOD_3 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2176,"['Delete Block', 'Delete Invocation']","['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']","['Block', 'Invocation']",GPT Missed Nodes,0.2857142857142857,1.0,0.2857142857142857,0.4444444444444445,2,0,5
1646,1646,"private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( ( VAR_3 ) > INT_1 ) || ( ( VAR_4 ) > INT_1 ) ) { return true ; } return METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) ; }","private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) ; }","['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2178,"['Delete IfStatement', 'Delete Return']","['FieldRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']","['IfStatement', 'Return']",Partial Match,0.14285714285714285,0.5,0.09090909090909091,0.15384615384615385,1,1,10
1647,1647,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { METHOD_2 ( ) ; } else { METHOD_3 ( VAR_2 ) ; } METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2179,"['Delete Block', 'Delete Invocation']","['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'Invocation', 'Block', 'If']","['Block', 'Invocation']",GPT Missed Nodes,0.2857142857142857,1.0,0.2222222222222222,0.3636363636363636,2,0,7
1648,1648,"public TYPE_1 METHOD_1 ( ) { try { return VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_2 VAR_2 ) { VAR_3 . error ( VAR_2 , STRING_1 ) ; METHOD_3 ( ) ; } return null ; }","public TYPE_1 METHOD_1 ( ) { try { return VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_2 VAR_2 ) { VAR_3 . error ( VAR_2 , STRING_1 ) ; } finally { METHOD_3 ( ) ; } return null ; }",['Move Invocation'],2180,"['Insert Block', 'Move Invocation']",['Invocation'],"['Block', 'Invocation']",GPT Hallucinated Nodes,0.5,0.5,1.0,0.6666666666666666,1,1,0
1649,1649,"public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( STRING_1 , ( STRING_2 + ( VAR_1 . METHOD_1 ( ) ) ) ) ; return VAR_1 . METHOD_1 ( ) ; } else { return STRING_3 ; } }","public java.lang.String METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , ( STRING_2 + ( VAR_1 . METHOD_1 ( ) ) ) ) ; return VAR_1 . METHOD_1 ( ) ; }","['Move Invocation', 'Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",2181,"['Delete Return', 'Delete Return']","['Invocation', 'Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'FieldRead', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.14285714285714285,0.5,0.1,0.16666666666666669,1,1,9
1650,1650,"protected TYPE_1 METHOD_1 ( ) { try { return VAR_1 . open ( VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_4 , VAR_3 ) ; return null ; } }",protected TYPE_1 METHOD_1 ( ) { try { if ( ( VAR_2 ) >= 0 ) { return VAR_1 . open ( VAR_2 ) ; } else { return null ; } } catch ( java.lang.Exception VAR_3 ) { return null ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Return', 'Insert Return', 'Insert Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2182,"['Insert Invocation', 'Delete Invocation', 'Insert Return', 'Delete Return']","['If', 'BinaryOperator', 'Block', 'Block', 'FieldRead', 'Literal', 'Return', 'Return', 'Literal', 'TypeAccess', 'TypeAccess', 'VariableRead', 'Invocation']","['Invocation', 'Invocation', 'Return', 'Return']",GPT Missed Nodes,0.2222222222222222,0.5,0.15384615384615385,0.23529411764705882,2,2,11
1651,1651,"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 , VAR_3 ) . show ( ) ; TYPE_3 . METHOD_3 ( STRING_2 , STRING_3 ) ; }","public void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 , VAR_3 ) . show ( ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2183,"['Delete Parameter', 'Delete Invocation']","['TypeReference', 'Parameter', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation']","['Parameter', 'Invocation']",GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,2,0,4
1652,1652,public TYPE_1 METHOD_1 ( ) { return date . METHOD_2 ( ) ; },public java.lang.String METHOD_1 ( ) { return date . METHOD_2 ( ) . toString ( ) ; },"['Update TypeReference', 'Insert Invocation', 'Move Invocation']",2184,"['Update TypeReference', 'Insert TypeAccess', 'Insert Invocation']","['TypeReference', 'Invocation', 'Invocation']","['TypeReference', 'TypeAccess', 'Invocation']",GPT Hallucinated Nodes,0.6666666666666666,0.6666666666666666,0.6666666666666666,0.6666666666666666,2,1,1
1653,1653,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , new java.lang.Object [ ] { VAR_4 } ) ) TYPE_2 . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , new java.lang.Object [ ] { VAR_4 } ) ; TYPE_2 . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) ; }","['Move Invocation', 'Move Invocation', 'Delete Block', 'Delete If']",2185,['Delete Invocation'],"['Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,4
1654,1654,"public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String value ) { VAR_1 . add ( java.lang.String.format ( STRING_1 , name , value ) ) ; return this ; }","public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String value ) { VAR_1 . put ( name , value ) ; return this ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2186,"['Delete Invocation', 'Insert Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.5,0.16666666666666666,0.25,1,1,5
1655,1655,public boolean METHOD_1 ( ) { return ( ! ( VAR_1 ) ) && ( ( ( VAR_2 . isEmpty ( ) ) || ( VAR_2 . contains ( VAR_3 ) ) ) || ( VAR_2 . contains ( VAR_4 ) ) ) ; },public boolean METHOD_1 ( ) { return ( ( VAR_2 . isEmpty ( ) ) || ( VAR_2 . contains ( VAR_3 ) ) ) || ( VAR_2 . contains ( VAR_4 ) ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",2189,['Delete BinaryOperator'],"['BinaryOperator', 'FieldRead', 'UnaryOperator', 'BinaryOperator']",['BinaryOperator'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1656,1656,"public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . METHOD_2 ( VAR_1 ) ) || ( ! ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) ) ) return ; TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) return ; TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",2190,['Delete Invocation'],"['Invocation', 'TypeAccess', 'VariableRead', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1657,1657,"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . delete ( VAR_3 , ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_1 . METHOD_2 ( ) ) ) , null ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; },"['Update Invocation', 'Update TypeAccess', 'Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Literal']",2192,"['Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead']","['Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator', 'Literal']","['Invocation', 'TypeAccess', 'VariableRead']",Partial Match,0.3333333333333333,0.3333333333333333,0.1111111111111111,0.16666666666666666,1,2,8
1658,1658,"public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { if ( VAR_2 != null ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; VAR_2 . METHOD_2 ( this ) ; } }","public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2193,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'VariableRead', 'ThisAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1659,1659,"public void METHOD_1 ( final java.lang.String VAR_1 ) { METHOD_2 ( false , ( ) - > VAR_2 . METHOD_3 ( VAR_1 ) ) ; }",public void METHOD_1 ( final java.lang.String VAR_1 ) { VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Insert VariableRead']",2194,['Delete Invocation'],"['Invocation', 'TypeAccess', 'VariableRead']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
1660,1660,protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . METHOD_3 ( TYPE_1 . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( VAR_2 class ) . METHOD_6 ( VAR_3 class ) ; },protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . METHOD_3 ( TYPE_1 . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( VAR_2 class ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2195,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
1661,1661,"public static java.io.File METHOD_1 ( ) { return new java.io.File ( VAR_1 , ( ( ( VAR_2 ) + ( TYPE_1 . METHOD_2 ( new java.util.Date ( TYPE_2 . METHOD_3 ( ) ) ) ) ) + ( VAR_3 ) ) ) ; }","public static java.io.File METHOD_1 ( ) { return new java.io.File ( VAR_1 , ( ( VAR_2 ) + ( TYPE_1 . METHOD_2 ( new java.util.Date ( TYPE_2 . METHOD_3 ( ) ) ) ) ) ) ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",2196,['Delete ParenthesizedExpression'],"['BinaryOperator', 'FieldRead', 'BinaryOperator']",['ParenthesizedExpression'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1662,1662,public int METHOD_1 ( ) { return ( VAR_1 ) - INT_1 ; },public int METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2197,"['Delete TypeAccess', 'Delete VariableRead']","['FieldRead', 'FieldRead', 'BinaryOperator']","['TypeAccess', 'VariableRead']",Partial Match,0.0,0.0,0.0,0.0,0,2,3
1663,1663,private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_4 ( ) ; },private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_1 . METHOD_3 ( ) . METHOD_5 ( ) . METHOD_4 ( ) ; },"['Move Invocation', 'Update Invocation', 'Update Invocation', 'Delete Invocation', 'Delete Invocation']",2199,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'Invocation', 'Invocation', 'Invocation', 'Invocation']","['Invocation', 'Invocation']",Exact Match,1.0,1.0,0.4,0.5714285714285715,2,0,3
1664,1664,public boolean METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return false ; } METHOD_3 ( ) ; METHOD_4 ( ) ; return true ; },public boolean METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return false ; } METHOD_4 ( ) ; METHOD_3 ( ) ; return true ; },['Move Invocation'],2200,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1665,1665,"public float METHOD_1 ( ) { return VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 , VAR_4 . height ) ; }","public float METHOD_1 ( ) { return VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_4 . height , VAR_3 ) ; }",['Move TypeAccess'],2201,"['Move VariableRead', 'Move TypeAccess']",['TypeAccess'],"['VariableRead', 'TypeAccess']",GPT Hallucinated Nodes,0.5,0.5,1.0,0.6666666666666666,1,1,0
1666,1666,public TYPE_1 METHOD_1 ( java.lang.String title ) { this . title = title ; if ( ( VAR_1 ) != null ) { VAR_2 . setText ( title ) ; } return this ; },public TYPE_1 METHOD_1 ( java.lang.String title ) { this . title = title ; VAR_2 . setText ( title ) ; return this ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2202,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1667,1667,public double METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; return METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( METHOD_6 ( ) ) . METHOD_7 ( VAR_1 ) ; },public long METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; return java.lang.Math.round ( METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( METHOD_6 ( ) ) . METHOD_7 ( VAR_1 ) ) ; },"['Update TypeReference', 'Insert Invocation', 'Insert TypeAccess', 'Move Invocation']",2203,"['Update TypeAccess', 'Insert TypeAccess', 'Insert Invocation']","['TypeReference', 'Invocation', 'TypeAccess', 'Invocation']","['TypeAccess', 'TypeAccess', 'Invocation']",GPT Missed Nodes,0.6666666666666666,0.6666666666666666,0.5,0.5714285714285715,2,1,2
1668,1668,public double METHOD_1 ( ) { if ( ( ( position ) > ( VAR_1 ) ) || ( ( position ) < ( ( - 1 ) * ( VAR_1 ) ) ) ) { return super . METHOD_1 ( ) ; } return 0 ; },public double METHOD_1 ( ) { return super . METHOD_1 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",2204,"['Delete Return', 'Delete Return']","['Return', 'FieldRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'Literal', 'UnaryOperator', 'FieldRead', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']","['Return', 'Return']",GPT Missed Nodes,0.14285714285714285,0.5,0.06666666666666667,0.11764705882352941,1,1,14
1669,1669,protected void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 ) . equals ( VAR_1 ) ) ) { VAR_2 . METHOD_3 ( VAR_1 ) ; } },protected void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2205,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'VariableRead', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1670,1670,"public java.io.File METHOD_1 ( ) { java.lang.String VAR_1 = new TYPE_1 ( STRING_1 ) . format ( new java.util.Date ( ) ) ; java.io.File VAR_2 = new java.io.File ( VAR_3 , ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ; return VAR_2 ; }",public java.io.File METHOD_1 ( ) { java.lang.String VAR_1 = new TYPE_1 ( STRING_1 ) . format ( new java.util.Date ( ) ) ; java.io.File VAR_2 = new java.io.File ( ( ( ( ( VAR_3 ) + VAR_1 ) + STRING_2 ) + STRING_3 ) ) ; return VAR_2 ; },"['Update ConstructorCall', 'Insert BinaryOperator', 'Move FieldRead', 'Move VariableRead']",2207,['Update Invocation'],"['ConstructorCall', 'BinaryOperator', 'FieldRead', 'VariableRead']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1671,1671,public boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return true ; } return true ; },public boolean METHOD_1 ( ) { return true ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2208,"['Delete Invocation', 'Delete Return']","['TypeAccess', 'Invocation', 'Literal', 'Return', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,2,0,4
1672,1672,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; this . METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( false ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; this . METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",2209,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Literal', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.125,0.2222222222222222,1,0,7
1673,1673,public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; java.lang.System.out.println ( VAR_1 ) ; ( VAR_2 ) ++ ; if ( ( VAR_3 . expr ) != null ) VAR_4 . METHOD_3 ( this ) ; ( VAR_2 ) -- ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; java.lang.System.out.println ( VAR_1 ) ; ( VAR_2 ) ++ ; VAR_4 . METHOD_3 ( this ) ; ( VAR_2 ) -- ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2210,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1674,1674,"public void METHOD_1 ( android.view.View view ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { METHOD_2 ( ) ; } else { TYPE_1 . METHOD_3 ( this , STRING_1 , VAR_2 ) . show ( ) ; } }",public void METHOD_1 ( android.view.View view ) { METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",2211,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'TypeAccess', 'ThisAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation', 'Block', 'If']","['Invocation', 'TypeAccess']",GPT Missed Nodes,0.3333333333333333,1.0,0.15384615384615385,0.2666666666666667,2,0,11
1675,1675,private void METHOD_1 ( TYPE_1 result ) { VAR_1 = result ; if ( result . METHOD_2 ( ) ) return ; if ( VAR_2 ) VAR_3 = result . METHOD_3 ( ) ; else VAR_4 = result . METHOD_3 ( ) ; },private void METHOD_1 ( TYPE_1 result ) { VAR_1 = result ; if ( result . METHOD_2 ( ) ) return ; if ( VAR_2 ) VAR_3 = result . METHOD_3 ( ) ; VAR_4 = result . METHOD_3 ( ) ; },"['Move Assignment', 'Delete Block']",2213,['Delete Block'],"['Assignment', 'Block']",['Block'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1676,1676,public void METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } else if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) ; } } },public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( ) ; } },"['Move Block', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If', 'Delete Block']",2214,"['Delete Invocation', 'Delete Invocation', 'Delete VariableRead']","['Block', 'FieldRead', 'Literal', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If', 'Block', 'If', 'Block']","['Invocation', 'Invocation', 'VariableRead']",Partial Match,0.125,0.3333333333333333,0.07142857142857142,0.11764705882352941,1,2,13
1677,1677,private void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( true ) ; METHOD_4 ( ) ; } METHOD_5 ( VAR_1 ) ; },private void METHOD_1 ( ) { METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",2215,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Block']","['Invocation', 'Invocation', 'Literal', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation', 'Invocation', 'Block']",GPT Missed Nodes,0.5,0.75,0.5,0.6,3,1,3
1678,1678,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) { METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } VAR_1 . METHOD_5 ( this ) ; this . VAR_3 . add ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( this ) ; this . VAR_3 . add ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",2217,['Delete Invocation'],"['Invocation', 'TypeAccess', 'VariableRead', 'Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1679,1679,"private void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) != null ) { TYPE_2 . METHOD_2 ( VAR_2 . getType ( ) , VAR_1 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; } }","private void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) != null ) { VAR_3 . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_2 . getType ( ) , VAR_1 . METHOD_3 ( ) ) ; } }",['Move Invocation'],2218,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1680,1680,"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_2 , VAR_1 ) ; return STRING_1 ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_2 ) ; return STRING_1 ; }",['Delete VariableRead'],2219,"['Delete LocalVariable', 'Delete Invocation']",['VariableRead'],"['LocalVariable', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,2,1
1681,1681,boolean METHOD_1 ( ) { return ! ( VAR_1 ) ; },boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete UnaryOperator']",2220,['Delete UnaryOperator'],"['FieldRead', 'UnaryOperator']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1682,1682,"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_3 . id ( ) . toLowerCase ( ) , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_3 . id ( ) , VAR_1 ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move VariableRead', 'Delete Invocation']",2221,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
1683,1683,"public static TYPE_1 METHOD_1 ( final long VAR_1 , final int VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; return new TYPE_3 ( VAR_1 , VAR_2 ) . METHOD_3 ( ) ; }","public static TYPE_1 METHOD_1 ( final long VAR_1 , final int VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; return new TYPE_3 ( VAR_1 , VAR_2 ) ; }","['Move ConstructorCall', 'Delete Invocation']",2223,['Delete Invocation'],"['ConstructorCall', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1684,1684,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 ) ) { if ( VAR_3 ) { METHOD_2 ( ) ; } METHOD_3 ( STRING_1 ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 ) ) { METHOD_3 ( STRING_1 ) ; } },"['Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2224,['Delete Invocation'],"['FieldRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.25,0.4,1,0,3
1685,1685,"private void METHOD_1 ( ) { METHOD_2 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_3 ( ( ( ( VAR_2 ) | ( VAR_3 ) ) | ( VAR_4 ) ) ) ; METHOD_4 ( intent ) ; }","private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; METHOD_4 ( intent ) ; METHOD_2 ( ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",2225,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'VariableRead', 'FieldRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.25,0.5,0.125,0.2,1,1,7
1686,1686,"public boolean METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { return METHOD_2 ( VAR_1 , VAR_3 , VAR_2 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { METHOD_2 ( VAR_1 , VAR_3 , VAR_2 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",2228,"['Update Wra', 'Delete Return', 'Insert Invocation']","['TypeReference', 'Invocation', 'Return']","['Wra', 'Return', 'Invocation']",Partial Match,0.5,0.3333333333333333,0.3333333333333333,0.3333333333333333,1,2,2
1687,1687,"private void set ( ) { if ( ( VAR_1 [ 0 ] ) != ( - 1 ) ) { VAR_2 . METHOD_1 ( VAR_3 , VAR_4 , ( ( VAR_5 ) - 1 ) , VAR_6 , VAR_1 ) ; } }","private void set ( ) { if ( ( VAR_1 [ 0 ] ) != ( - 1 ) ) { VAR_2 . METHOD_1 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_1 ) ; } }","['Insert TypeAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator']",2229,['Delete Assignment'],"['TypeAccess', 'FieldRead', 'Literal', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1688,1688,protected boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 != null ) && ( VAR_1 == ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; },protected boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return VAR_1 == ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2231,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1689,1689,public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = VAR_1 ; if ( ( VAR_3 ) == null ) { METHOD_2 ( ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = VAR_1 ; METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2232,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1690,1690,public void METHOD_1 ( ) { if ( ( ( state ) == ( VAR_1 ) ) || ( ( state ) == ( VAR_2 ) ) ) { if ( METHOD_2 ( ) ) { state = VAR_3 ; } else { state = VAR_4 ; } } },public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { state = VAR_3 ; } else { state = VAR_4 ; } },"['Move If', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2234,['Delete Block'],"['If', 'FieldRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.25,1.0,0.1,0.18181818181818182,1,0,9
1691,1691,public java.lang.String METHOD_1 ( ) { return ( ( number ) + STRING_1 ) + ( name ) ; },public java.lang.String METHOD_1 ( ) { return ( ( name ) + STRING_1 ) + ( number ) ; },"['Move BinaryOperator', 'Move BinaryOperator', 'Move FieldRead']",2236,"['Update Invocation', 'Update Invocation']","['BinaryOperator', 'BinaryOperator', 'FieldRead']","['Invocation', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,2,3
1692,1692,public boolean METHOD_1 ( ) { return ( ( this . VAR_1 ) != null ) && ( this . VAR_1 . METHOD_1 ( ) ) ; },public boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2237,['Delete UnaryOperator'],"['Invocation', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1693,1693,public void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) != FLOAT_1 ) { VAR_2 = event . METHOD_2 ( ) ; VAR_3 = event . METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 event ) { VAR_2 = event . METHOD_2 ( ) ; VAR_3 = event . METHOD_3 ( ) ; },"['Move Assignment', 'Move Assignment', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2238,['Delete Invocation'],"['Assignment', 'Assignment', 'FieldRead', 'FieldRead', 'BinaryOperator', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
1694,1694,"private void METHOD_1 ( ) { if ( ! ( VAR_1 . getText ( ) . toString ( ) . trim ( ) . isEmpty ( ) ) ) { VAR_2 = true ; VAR_3 . METHOD_2 ( 0 , 0 , VAR_4 , 0 ) ; } }","private void METHOD_1 ( ) { VAR_2 = true ; VAR_3 . METHOD_2 ( 0 , 0 , VAR_4 , 0 ) ; }","['Move Assignment', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2239,['Delete Invocation'],"['Assignment', 'Invocation', 'TypeAccess', 'Invocation', 'Invocation', 'Invocation', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.1,0.18181818181818182,1,0,9
1695,1695,public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { METHOD_3 ( VAR_1 ) ; } },public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2240,['Delete Block'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1696,1696,public void execute ( TYPE_1 param ) { item . METHOD_1 ( param ) ; VAR_1 . add ( item ) ; if ( ( VAR_2 ) instanceof TYPE_2 ) ( ( TYPE_2 ) ( VAR_2 ) ) . METHOD_2 ( ) ; },public void execute ( TYPE_1 param ) { item . METHOD_1 ( param ) ; VAR_1 . add ( item ) ; ( ( TYPE_2 ) ( VAR_2 ) ) . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2241,['Delete BinaryOperator'],"['Invocation', 'FieldRead', 'TypeAccess', 'BinaryOperator', 'Block', 'If']",['BinaryOperator'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1697,1697,public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( ) ) != 0 ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) ) != 0 ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2242,['Delete UnaryOperator'],"['BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1698,1698,"public boolean METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( java.lang.Double . METHOD_2 ( ( ( VAR_2 ) - ( VAR_3 ) ) , VAR_4 ) ) >= 0 ) ) { return false ; } return true ; }","public boolean METHOD_1 ( ) { if ( ( ( java.lang.Double . METHOD_2 ( ( ( VAR_2 ) + ( VAR_3 ) ) , VAR_4 ) ) > 0 ) || ( ( VAR_1 ) == null ) ) { return false ; } return true ; }","['Move BinaryOperator', 'Update BinaryOperator', 'Update BinaryOperator']",2243,"['Update BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator']",Exact Match,1.0,1.0,1.0,1.0,3,0,0
1699,1699,public void METHOD_1 ( ) { try { if ( ! ( VAR_1 ) ) { c . METHOD_2 ( ) ; } } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { try { c . METHOD_2 ( ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } super . METHOD_1 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2244,['Delete Block'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,1,0,4
1700,1700,public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ( ( VAR_2 ) + STRING_1 ) ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",2246,['Delete VariableRead'],"['BinaryOperator', 'FieldRead', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1701,1701,public void METHOD_1 ( ) { if ( ( ( this . startTime ) > 0 ) && ( ( VAR_1 ) <= ( - 1 ) ) ) { this . VAR_1 = TYPE_1 . METHOD_2 ( ) ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) <= ( - 1 ) ) { this . VAR_1 = TYPE_1 . METHOD_2 ( ) ; } },"['Move BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2247,['Delete TypeAccess'],"['BinaryOperator', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1702,1702,public java.lang.Boolean METHOD_1 ( ) { if ( null == ( VAR_1 ) ) { return false ; } return VAR_1 ; },public java.lang.Boolean METHOD_1 ( ) { return VAR_1 ; },"['Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2248,['Delete Return'],"['Literal', 'FieldRead', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1703,1703,"private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , ( ( java.lang.Long . METHOD_4 ( VAR_2 . getText ( ) . toString ( ) ) . METHOD_5 ( ) ) * INT_1 ) ) . METHOD_6 ( ) ; }","private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , java.lang.Long . METHOD_4 ( VAR_2 . getText ( ) . toString ( ) ) . METHOD_5 ( ) ) . METHOD_6 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2250,['Delete Invocation'],"['Invocation', 'FieldRead', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
1704,1704,"public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String format , java.lang.Object ... args ) { if ( TYPE_1 . METHOD_2 ( VAR_2 ) ) VAR_3 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 , STRING_1 , format , args ) ) ; }","public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String format , java.lang.Object ... args ) { VAR_3 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 , STRING_1 , format , args ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2251,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1705,1705,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_1 . METHOD_3 ( ) . METHOD_2 ( ) ) ) { return ; } else { METHOD_4 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_4 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",2252,"['Delete Return', 'Delete Invocation']","['Invocation', 'VariableRead', 'Invocation', 'VariableRead', 'Invocation', 'Invocation', 'BinaryOperator', 'Return', 'Block', 'Block', 'If']","['Return', 'Invocation']",GPT Missed Nodes,0.3333333333333333,1.0,0.18181818181818182,0.3076923076923077,2,0,9
1706,1706,"public void METHOD_1 ( TYPE_1 context ) { if ( ( METHOD_2 ( context , true ) ) == ( VAR_1 ) ) { context . METHOD_3 ( false ) ; } else { context . METHOD_3 ( true ) ; } }","public void METHOD_1 ( TYPE_1 context ) { METHOD_2 ( context , true ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",2254,['Delete Block'],"['Invocation', 'FieldRead', 'BinaryOperator', 'VariableRead', 'Literal', 'Invocation', 'Block', 'VariableRead', 'Literal', 'Invocation', 'Block', 'If']",['Block'],GPT Missed Nodes,0.14285714285714285,1.0,0.08333333333333333,0.15384615384615385,1,0,11
1707,1707,java.lang.String METHOD_1 ( ) { return this . VAR_1 ; },java.lang.String METHOD_1 ( ) { return this . METHOD_1 ( ) ; },"['Insert Invocation', 'Move ThisAccess', 'Delete FieldRead']",2255,"['Update VariableRead', 'Insert Invocation']","['Invocation', 'ThisAccess', 'FieldRead']","['VariableRead', 'Invocation']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
1708,1708,public java.util.Set < java.lang.String > METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) return new java.util.HashSet < java.lang.String > ( ) ; return VAR_1 ; },public java.util.Set < java.lang.String > METHOD_1 ( ) { return VAR_1 ; },"['Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",2256,"['Delete Invocation', 'Delete Return']","['ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'ConstructorCall', 'Return', 'Block', 'If']","['Invocation', 'Return']",Partial Match,0.1111111111111111,0.5,0.125,0.2,1,1,7
1709,1709,"public java.lang.String toString ( ) { return new java.lang.StringBuilder ( super . toString ( ) ) . append ( STRING_1 ) . append ( STRING_2 ) . append ( ""\n"" ) . toString ( ) ; }",public java.lang.String toString ( ) { return new java.lang.StringBuilder ( super . toString ( ) ) . append ( STRING_1 ) . append ( STRING_2 ) . toString ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete Literal', 'Delete Invocation']",2259,['Delete Invocation'],"['Invocation', 'Invocation', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1710,1710,public void METHOD_1 ( ) throws TYPE_1 { java.lang.System.out.println ( STRING_1 ) ; VAR_1 = METHOD_2 ( ) ; VAR_2 = METHOD_3 ( ) ; },public void METHOD_1 ( ) throws TYPE_1 { java.lang.System.out.println ( STRING_1 ) ; VAR_2 = METHOD_3 ( ) ; VAR_1 = METHOD_2 ( ) ; },['Move Assignment'],2261,['Move LocalVariable'],['Assignment'],['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1711,1711,public static TYPE_1 METHOD_1 ( java.util.Date date ) { return new TYPE_1 ( ( ( VAR_1 . getTime ( ) ) - ( INT_1 * INT_2 ) ) ) ; },public static TYPE_1 METHOD_1 ( java.util.Date date ) { return new TYPE_1 ( VAR_1 . getTime ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",2263,['Delete UnaryOperator'],"['Invocation', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1712,1712,private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; return VAR_1 ; },private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( VAR_2 . METHOD_3 ( ) ) ; } return VAR_1 ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2264,"['Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess', 'Invocation']",Exact Match,1.0,0.6666666666666666,0.6666666666666666,0.6666666666666666,2,1,1
1713,1713,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( this . VAR_1 ) ) this . VAR_2 . METHOD_2 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; this . VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2266,['Delete Invocation'],"['Invocation', 'ThisAccess', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1714,1714,"public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException { return TYPE_1 . METHOD_2 ( METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) , VAR_3 , VAR_4 class ) ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException { return TYPE_1 . METHOD_2 ( METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 , VAR_3 ) , VAR_4 class ) ) ; }",['Move VariableRead'],2267,"['Delete LocalVariable', 'Insert LocalVariable']",['VariableRead'],"['LocalVariable', 'LocalVariable']",Partial Match,0.0,0.0,0.0,0.0,0,2,1
1715,1715,public void METHOD_1 ( ) { if ( ! ( VAR_1 . get ( ) ) ) { VAR_2 . METHOD_2 ( ) ; } },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2268,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1716,1716,"public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_2 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( intent ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2269,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1717,1717,"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 a = VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; return TYPE_1 . METHOD_5 ( ( STRING_1 + ( a . METHOD_6 ( ) ) ) ) ; }","public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 a = VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; return TYPE_1 . METHOD_5 ( a . METHOD_6 ( ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2271,"['Delete TypeAccess', 'Delete TypeAccess']","['Invocation', 'FieldRead', 'BinaryOperator']","['TypeAccess', 'TypeAccess']",Partial Match,0.0,0.0,0.0,0.0,0,2,3
1718,1718,public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_2 ) VAR_3 . METHOD_2 ( VAR_4 ) ; else VAR_3 . METHOD_2 ( VAR_5 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_5 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2273,['Delete Invocation'],"['Invocation', 'FieldRead', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.125,0.2222222222222222,1,0,7
1719,1719,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) == null ) { METHOD_2 ( STRING_1 ) ; } else { VAR_3 . METHOD_3 ( ) ; METHOD_4 ( true ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_3 . METHOD_3 ( ) ; METHOD_4 ( true ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2274,['Delete Invocation'],"['Invocation', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1,0.18181818181818182,1,0,9
1720,1720,public TYPE_1 METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) return null ; return ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ; },public TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ; },"['Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2275,['Delete Return'],"['Invocation', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1721,1721,"public void METHOD_1 ( ) { this . VAR_1 = METHOD_2 ( new TYPE_1 ( ) , VAR_2 ) . build ( ) ; }",public void METHOD_1 ( ) { this . VAR_1 = METHOD_2 ( new TYPE_1 ( ) ) . build ( ) ; },['Delete TypeAccess'],2277,['Delete Invocation'],['TypeAccess'],['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1722,1722,public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) . length ) > 0 ) { return ( VAR_1 . METHOD_2 ( ) [ 0 ] ) instanceof TYPE_2 ; } return false ; },public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) [ 0 ] ) instanceof TYPE_2 ; },"['Move Return', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",2278,"['Delete If', 'Delete Return']","['Return', 'VariableRead', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']","['If', 'Return']",GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,2,0,8
1723,1723,public int METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( this ) ; return VAR_1 . remove ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) ; },public int METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( this ) ; return VAR_1 . remove ( TYPE_1 . METHOD_3 ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2279,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
1724,1724,"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( VAR_4 , STRING_1 ) ; }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( VAR_4 , STRING_1 ) ; }",['Move Invocation'],2280,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1725,1725,public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( VAR_1 . getName ( ) ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2282,['Delete Invocation'],"['TypeAccess', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.3333333333333333,0.5,1,0,2
1726,1726,public void METHOD_1 ( TYPE_1 event ) { if ( event . METHOD_2 ( ) . equals ( VAR_1 ) ) METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 event ) { METHOD_3 ( ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2284,['Delete Invocation'],"['Invocation', 'VariableRead', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1727,1727,private boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; return ! ( VAR_3 . METHOD_4 ( VAR_2 ) . isEmpty ( ) ) ; },private boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; return VAR_3 . METHOD_4 ( VAR_2 ) . isEmpty ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",2286,['Delete Invocation'],"['Invocation', 'UnaryOperator']",['Invocation'],GPT Missed Nodes,0.5,0.0,0.0,0.0,0,1,2
1728,1728,"public java.util.ArrayList < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) throws java.io.IOException , TYPE_1 , TYPE_2 , TYPE_3 { if ( VAR_2 ) METHOD_2 ( ) ; java.util.ArrayList < java.lang.String > results = METHOD_3 ( VAR_1 ) ; java.lang.System.out.print ( VAR_2 ) ; return results ; }","public java.util.ArrayList < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 , TYPE_2 , TYPE_3 { METHOD_2 ( ) ; java.util.ArrayList < java.lang.String > results = METHOD_3 ( VAR_1 ) ; return results ; }","['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",2287,"['Delete Parameter', 'Delete Block', 'Insert Invocation']","['Invocation', 'TypeReference', 'Parameter', 'VariableRead', 'Block', 'If', 'TypeAccess', 'FieldRead', 'VariableRead', 'Invocation']","['Parameter', 'Block', 'Invocation']",GPT Missed Nodes,0.375,0.6666666666666666,0.2,0.30769230769230765,2,1,8
1729,1729,private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( VAR_1 . METHOD_2 ( ) . equals ( VAR_2 ) ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2288,['Delete Invocation'],"['Invocation', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1730,1730,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( getActivity ( ) ) ) ) { TYPE_1 . METHOD_3 ( getActivity ( ) ) ; return ; } METHOD_4 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_4 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",2290,"['Delete Invocation', 'Delete Return']","['TypeAccess', 'Invocation', 'Invocation', 'UnaryOperator', 'TypeAccess', 'Invocation', 'Invocation', 'Return', 'Block', 'If']","['Invocation', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,2,0,8
1731,1731,"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return METHOD_2 ( VAR_1 , VAR_2 , CHAR_1 ) ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , CHAR_1 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2291,"['Delete Parameter', 'Delete VariableRead']","['TypeReference', 'Parameter', 'VariableRead']","['Parameter', 'VariableRead']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,2,0,1
1732,1732,"public void METHOD_1 ( final TYPE_1 p , final TYPE_2 c ) throws java.io.IOException { assertEquals ( ( ( VAR_1 . length ) + INT_1 ) , VAR_2 . getData ( ) . length ) ; }","public void METHOD_1 ( final TYPE_1 p , final TYPE_2 c ) throws java.io.IOException { assertEquals ( VAR_1 . length , VAR_2 . getData ( ) . length ) ; }","['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2292,['Delete Invocation'],"['FieldRead', 'FieldRead', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1733,1733,"public TYPE_1 build ( ) { return new TYPE_1 ( this . first , this . VAR_1 , this . VAR_2 , this . VAR_3 , this . count ) ; }","public TYPE_1 build ( ) { return new TYPE_1 ( this . first , this . VAR_2 , this . VAR_1 , this . VAR_3 , this . count ) ; }",['Move FieldRead'],2293,"['Move TypeReference', 'Move TypeReference']",['FieldRead'],"['TypeReference', 'TypeReference']",Partial Match,0.0,0.0,0.0,0.0,0,2,1
1734,1734,public void METHOD_1 ( TYPE_1 listener ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( listener ) ; } },public void METHOD_1 ( TYPE_1 listener ) { VAR_1 . METHOD_1 ( listener ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2295,['Delete UnaryOperator'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1735,1735,public boolean equals ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) return ( this . getColor ( ) ) == ( VAR_2 . getColor ( ) ) ; return false ; },public boolean equals ( TYPE_1 VAR_1 ) { return ( this . getColor ( ) ) == ( VAR_2 . getColor ( ) ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",2296,['Delete Assignment'],"['Return', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,8
1736,1736,"public void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( true ) . equals ( STRING_1 ) ) { METHOD_3 ( STRING_2 ) ; } else { new TYPE_2 ( ) . show ( METHOD_4 ( ) , STRING_3 ) ; } }","public void METHOD_1 ( ) { new TYPE_2 ( ) . show ( METHOD_4 ( ) , STRING_3 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2297,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Literal', 'Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.09090909090909091,0.16666666666666669,1,0,10
1737,1737,public void METHOD_1 ( android.view.View view ) { VAR_1 = true ; if ( ! ( VAR_2 ) ) METHOD_2 ( ) ; VAR_1 = false ; },public void METHOD_1 ( android.view.View view ) { VAR_1 = true ; METHOD_2 ( ) ; VAR_1 = false ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2298,['Delete UnaryOperator'],"['Invocation', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['UnaryOperator'],GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,1,0,4
1738,1738,private void METHOD_1 ( ) { if ( ( ! ( METHOD_2 ( ) ) ) && ( ! ( METHOD_3 ( ) ) ) ) { if ( ( getActivity ( ) ) != null ) { getActivity ( ) . METHOD_4 ( ) ; } } },private void METHOD_1 ( ) { if ( ( ! ( METHOD_2 ( ) ) ) && ( ! ( METHOD_3 ( ) ) ) ) { getActivity ( ) . METHOD_4 ( ) ; } },"['Move If', 'Move BinaryOperator', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2299,['Delete If'],"['If', 'BinaryOperator', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['If'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1739,1739,protected java.lang.Void METHOD_1 ( java.lang.Void ... params ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 . size ( ) ) > 0 ) ) { METHOD_2 ( VAR_1 ) ; } return null ; },protected java.lang.Void METHOD_1 ( java.lang.Void ... params ) { METHOD_2 ( VAR_1 ) ; return null ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2303,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.09090909090909091,0.16666666666666669,1,0,10
1740,1740,public java.lang.String METHOD_1 ( java.lang.String id ) { VAR_1 . METHOD_2 ( java.lang.Long . METHOD_3 ( id ) . METHOD_4 ( ) ) ; return STRING_1 ; },public java.lang.String METHOD_1 ( java.lang.String id ) { VAR_1 . METHOD_2 ( java.lang.Long.parseLong ( id ) ) ; return STRING_1 ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Update Invocation', 'Delete Invocation']",2304,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.5,0.2,0.28571428571428575,1,1,4
1741,1741,"public void METHOD_1 ( java.util.List < TYPE_1 > data ) { METHOD_1 ( VAR_1 . size ( ) , data ) ; }","public void METHOD_1 ( java.util.List < TYPE_1 > data ) { METHOD_1 ( ( ( VAR_1 . size ( ) ) - 1 ) , data ) ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",2305,['Insert UnaryOperator'],"['BinaryOperator', 'Invocation', 'Literal']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1742,1742,"public void METHOD_1 ( TYPE_1 p , TYPE_2 VAR_1 ) { VAR_2 = p ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( ( VAR_4 ) - > VAR_4 . METHOD_4 ( VAR_1 , p ) ) ; }",public void METHOD_1 ( TYPE_1 p ) { VAR_2 = p ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( ( VAR_4 ) - > VAR_4 . METHOD_4 ( p ) ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2309,"['Delete Parameter', 'Delete VariableRead']","['TypeReference', 'Parameter', 'VariableRead']","['Parameter', 'VariableRead']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,2,0,1
1743,1743,private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == 1 ) { VAR_3 . setText ( java.lang.Integer.toString ( VAR_4 . METHOD_2 ( ) ) ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . setText ( java.lang.Integer.toString ( VAR_4 . METHOD_2 ( ) ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2310,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1744,1744,private TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( java.lang.Math.abs ( ( ( TYPE_2 . METHOD_2 ( ) ) % ( VAR_1 . size ( ) ) ) ) ) ; },private TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ( ( TYPE_2 . METHOD_2 ( ) ) % ( VAR_1 . size ( ) ) ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2311,['Delete TypeAccess'],"['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['TypeAccess'],GPT Missed Nodes,0.5,1.0,0.2,0.33333333333333337,1,0,4
1745,1745,public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; } },public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2312,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
1746,1746,public static java.lang.Long METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( STRING_1 . equals ( VAR_1 ) ) ) return VAR_2 ; return java.lang.Long.parseLong ( VAR_1 ) ; },public static java.lang.Long METHOD_1 ( java.lang.String VAR_1 ) { if ( STRING_1 . equals ( VAR_1 ) ) return - 1L ; return java.lang.Long.parseLong ( VAR_1 ) ; },"['Move Invocation', 'Insert UnaryOperator', 'Insert Literal', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete FieldRead']",2314,"['Delete UnaryOperator', 'Delete VariableRead', 'Delete Literal', 'Update Literal']","['Invocation', 'UnaryOperator', 'Literal', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator', 'FieldRead']","['UnaryOperator', 'VariableRead', 'Literal', 'Literal']",GPT Missed Nodes,0.5,0.5,0.25,0.3333333333333333,2,2,6
1747,1747,private void METHOD_1 ( final java.lang.String info ) { VAR_1 . METHOD_2 ( ( ) - > VAR_1 . METHOD_3 ( info ) ) ; },private void METHOD_1 ( final java.lang.String info ) { VAR_1 . METHOD_2 ( ( ) - > { VAR_1 . METHOD_3 ( info ) ; } ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Insert VariableRead']",2315,['Insert Block'],"['Invocation', 'TypeAccess', 'VariableRead']",['Block'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1748,1748,"public java.lang.String getContext ( ) { return VAR_1 . trim ( ) . replaceAll ( STRING_1 , STRING_2 ) ; }",public java.lang.String getContext ( ) { return context ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2316,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Update VariableRead']","['FieldRead', 'TypeAccess', 'Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation', 'Invocation', 'VariableRead']",Partial Match,0.25,0.5,0.3333333333333333,0.4,2,2,4
1749,1749,public boolean delete ( ) { return VAR_1 . delete ( ) ; },public void delete ( ) { VAR_1 . delete ( ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",2317,['Update Wra'],"['TypeReference', 'Invocation', 'Return']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1750,1750,public void METHOD_1 ( TYPE_1 event ) { if ( METHOD_2 ( event . METHOD_3 ( ) ) ) { if ( ( event . METHOD_4 ( ) ) == ( VAR_1 ) ) { event . METHOD_5 ( METHOD_6 ( STRING_1 ) ) ; } } },public void METHOD_1 ( TYPE_1 event ) { if ( ( event . METHOD_4 ( ) ) == ( VAR_1 ) ) { event . METHOD_5 ( METHOD_6 ( STRING_1 ) ) ; } },"['Move If', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",2318,['Delete Invocation'],"['If', 'VariableRead', 'Invocation', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1751,1751,"private static void METHOD_1 ( int VAR_1 ) { TYPE_1 . METHOD_2 ( java.lang.Math.abs ( VAR_1 ) , STRING_1 , VAR_2 , VAR_3 ) ; }","private static void METHOD_1 ( int VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 , VAR_2 , VAR_3 ) ; }","['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2319,['Delete Invocation'],"['VariableRead', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
1752,1752,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 . start ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . start ( ) ; },"['Insert Invocation', 'Insert ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2320,"['Delete LocalVariable', 'Delete Invocation']","['Invocation', 'ThisAccess', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']","['LocalVariable', 'Invocation']",Partial Match,0.1111111111111111,0.5,0.1111111111111111,0.1818181818181818,1,1,8
1753,1753,public static boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 type : VAR_2 . values ( ) ) { if ( VAR_3 . name ( ) . METHOD_2 ( VAR_1 ) ) { return true ; } } return false ; },public static boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 type : VAR_2 . values ( ) ) { return VAR_3 . name ( ) . METHOD_2 ( VAR_1 ) ; } return false ; },"['Insert Return', 'Move Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2321,['Delete Invocation'],"['Return', 'Invocation', 'Literal', 'Return', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,0.0,0.0,0.0,0,1,6
1754,1754,private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { METHOD_3 ( ) . info ( STRING_1 ) ; } if ( VAR_2 . METHOD_2 ( ) ) { METHOD_3 ( ) . info ( STRING_2 ) ; } },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2322,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,2,0,10
1755,1755,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } this . METHOD_3 ( ) ; super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; this . METHOD_3 ( ) ; super . METHOD_1 ( ) ; },"['Move Invocation', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2323,['Delete Invocation'],"['Invocation', 'Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,1,7
1756,1756,"public void METHOD_1 ( java.util.Map < ? extends TYPE_1 , ? extends TYPE_2 > VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( STRING_1 , VAR_1 ) ; } super . METHOD_1 ( VAR_1 ) ; }","public void METHOD_1 ( java.util.Map < ? extends TYPE_1 , ? extends TYPE_2 > VAR_1 ) { VAR_2 . METHOD_3 ( STRING_1 , VAR_1 ) ; super . METHOD_1 ( VAR_1 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2324,['Delete Invocation'],"['Invocation', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
1757,1757,public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . remove ( VAR_1 . METHOD_2 ( ) ) ; this . VAR_3 . remove ( VAR_1 . METHOD_2 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . remove ( VAR_1 ) ; this . VAR_3 . remove ( VAR_1 ) ; },"['Move VariableRead', 'Move VariableRead', 'Delete Invocation', 'Delete Invocation']",2325,['Delete Invocation'],"['VariableRead', 'VariableRead', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1758,1758,public long METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return 0 ; } return VAR_1 . METHOD_1 ( ) ; },public long METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2326,['Delete Return'],"['FieldRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1759,1759,"public java.lang.Object METHOD_1 ( java.lang.Object VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 type , java.lang.Class < ? extends TYPE_4 < ? > > VAR_4 ) { if ( VAR_5 ) { VAR_6 = TYPE_5 . METHOD_2 ( VAR_1 ) ; } return VAR_1 ; }","public java.lang.Object METHOD_1 ( java.lang.Object VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 type , java.lang.Class < ? extends TYPE_4 < ? > > VAR_4 ) { VAR_6 = TYPE_5 . METHOD_2 ( VAR_1 ) ; return VAR_1 ; }","['Move Assignment', 'Delete FieldRead', 'Delete Block', 'Delete If']",2327,['Delete Invocation'],"['Assignment', 'FieldRead', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1760,1760,public int METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) if ( VAR_3 . equals ( VAR_2 . get ( i ) ) ) return i ; return - 1 ; },public int METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) if ( VAR_1 == ( VAR_2 . get ( i ) ) ) return i ; return - 1 ; },"['Insert BinaryOperator', 'Insert VariableRead', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2328,"['Delete Invocation', 'Insert VariableRead']","['BinaryOperator', 'VariableRead', 'Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'VariableRead']",GPT Missed Nodes,0.5,1.0,0.4,0.5714285714285715,2,0,3
1761,1761,"public void METHOD_1 ( double VAR_1 , double VAR_2 ) { if ( ( VAR_3 ) != null ) VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( double VAR_1 , double VAR_2 ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2330,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1762,1762,public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) . METHOD_6 ( TYPE_4 . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) . METHOD_6 ( TYPE_4 . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ) ; },"['Update Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2333,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1763,1763,"public void METHOD_1 ( TYPE_1 error ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 , java.lang.String.format ( STRING_2 , VAR_2 , error . METHOD_3 ( ) ) ) ; }","public void METHOD_1 ( TYPE_1 error ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 , error . METHOD_3 ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2334,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.125,0.2222222222222222,1,0,7
1764,1764,"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; if ( VAR_2 ) { intent . METHOD_2 ( 1 ) ; METHOD_3 ( intent ) ; } else { METHOD_3 ( intent ) ; } }","public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( 1 ) ; METHOD_3 ( intent ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2335,['Delete If'],"['Invocation', 'Invocation', 'FieldRead', 'Block', 'VariableRead', 'Invocation', 'Block', 'If']",['If'],GPT Missed Nodes,0.2,1.0,0.125,0.2222222222222222,1,0,7
1765,1765,public double METHOD_1 ( int VAR_1 ) { return TYPE_1 . METHOD_2 ( ( ( ( this . VAR_2 [ VAR_1 ] . VAR_3 ) - ( ( ( VAR_4 ) / INT_1 ) - FLOAT_1 ) ) / ( VAR_5 ) ) ) ; },public double METHOD_1 ( int VAR_1 ) { return TYPE_1 . METHOD_2 ( ( ( ( ( this . VAR_2 [ VAR_1 ] . VAR_3 ) - ( ( VAR_4 ) / INT_1 ) ) - FLOAT_1 ) / ( VAR_5 ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Move BinaryOperator']",2336,['Move Invocation'],"['BinaryOperator', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
1766,1766,public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; ( ( android.widget.Button ) ( METHOD_2 ( VAR_2 ) ) ) . setText ( STRING_1 ) ; },public void METHOD_1 ( ) { METHOD_2 ( VAR_2 ) . setEnabled ( true ) ; ( ( android.widget.Button ) ( METHOD_2 ( VAR_2 ) ) ) . setText ( STRING_1 ) ; },"['Update Invocation', 'Insert Invocation', 'Insert Literal', 'Insert TypeAccess', 'Delete TypeAccess']",2337,"['Delete Invocation', 'Insert Invocation']","['Invocation', 'Invocation', 'Literal', 'TypeAccess', 'TypeAccess']","['Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.5,0.2,0.28571428571428575,1,1,4
1767,1767,"protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( VAR_1 != null ) { METHOD_2 ( VAR_1 ) ; } else { TYPE_2 . METHOD_3 ( this , VAR_2 , VAR_3 ) ; } }",protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2338,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'ThisAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'TypeAccess']",GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,2,0,10
1768,1768,"public double METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 . format ( STRING_2 , VAR_2 ) ; return VAR_2 ; }",public double METHOD_1 ( ) { return VAR_2 ; },"['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2339,"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']","['TypeAccess', 'FieldRead', 'TypeAccess', 'Invocation', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation', 'Invocation']",GPT Missed Nodes,0.6666666666666666,1.0,0.375,0.5454545454545454,3,0,5
1769,1769,"private void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 ) VAR_3 . i ( VAR_4 , VAR_1 ) ; }","private void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 . i ( VAR_4 , VAR_1 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2340,['Delete VariableRead'],"['Invocation', 'FieldRead', 'Block', 'If']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1770,1770,"private static java.lang.String METHOD_1 ( java.lang.Object id ) throws TYPE_1 { if ( id == null ) { return null ; } else { return TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( id ) . replace ( STRING_1 , STRING_2 ) ) ; } }","private static java.lang.String METHOD_1 ( java.lang.Object id ) throws TYPE_1 { if ( id == null ) { return null ; } else { return VAR_1 . METHOD_3 ( id ) . replace ( STRING_1 , STRING_2 ) ; } }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2341,"['Delete Invocation', 'Delete TypeAccess']","['Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
1771,1771,"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) . compareTo ( VAR_3 . get ( VAR_2 . METHOD_2 ( ) ) ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_3 . get ( VAR_1 . METHOD_2 ( ) . toString ( ) ) . compareTo ( VAR_3 . get ( VAR_2 . METHOD_2 ( ) . toString ( ) ) ) ; }","['Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Move Invocation']",2344,['Insert Invocation'],"['Invocation', 'Invocation', 'Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.25,0.4,1,0,3
1772,1772,"private java.util.Calendar METHOD_1 ( ) { java.util.Calendar VAR_1 = java.util.Calendar.getInstance ( ) ; VAR_2 . set ( VAR_2 . get ( VAR_3 ) , ( ( VAR_2 . get ( VAR_4 ) ) + 1 ) , VAR_2 . get ( VAR_5 ) ) ; return VAR_1 ; }","private java.util.Calendar METHOD_1 ( ) { java.util.Calendar VAR_1 = java.util.Calendar.getInstance ( ) ; VAR_2 . set ( VAR_2 . get ( VAR_3 ) , VAR_2 . get ( VAR_4 ) , VAR_2 . get ( VAR_5 ) ) ; return VAR_1 ; }","['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",2346,['Delete Invocation'],"['Invocation', 'Literal', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
1773,1773,"public final boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 position , TYPE_3 VAR_2 ) { if ( METHOD_2 ( VAR_1 , position , VAR_2 ) ) { return VAR_3 . METHOD_1 ( position , VAR_2 ) ; } else { return false ; } }","public final boolean METHOD_1 ( TYPE_2 position , TYPE_3 VAR_2 ) { return VAR_3 . METHOD_1 ( position , VAR_2 ) ; }","['Move Return', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2347,"['Delete LocalVariable', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Return']","['Return', 'TypeReference', 'Parameter', 'VariableRead', 'VariableRead', 'VariableRead', 'Invocation', 'Block', 'Literal', 'Return', 'Block', 'If']","['LocalVariable', 'Invocation', 'BinaryOperator', 'Return']",Partial Match,0.2,0.5,0.16666666666666666,0.25,2,2,10
1774,1774,public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; return STRING_1 ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; return STRING_1 ; },['Update TypeAccess'],2348,['Delete TypeAccess'],['TypeAccess'],['TypeAccess'],Exact Match,1.0,0.0,0.0,0.0,0,1,1
1775,1775,"private static TYPE_1 METHOD_1 ( TYPE_2 path ) { return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) , path . METHOD_4 ( ) ) ; }","private static TYPE_1 METHOD_1 ( TYPE_2 path ) { return TYPE_3 . METHOD_2 ( VAR_1 , path . METHOD_4 ( ) ) ; }","['Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2349,"['Delete Invocation', 'Delete TypeAccess']","['TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess']",Exact Match,1.0,1.0,0.6666666666666666,0.8,2,0,1
1776,1776,"private void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( VAR_2 , new TYPE_2 ( VAR_2 , VAR_3 . METHOD_3 ( VAR_4 , VAR_5 . getText ( ) . trim ( ) ) , VAR_6 ) ) ; }","private void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( VAR_2 , new TYPE_2 ( VAR_2 , ( ! ( VAR_3 . METHOD_3 ( VAR_4 , VAR_5 . getText ( ) . trim ( ) ) ) ) , VAR_6 ) ) ; }","['Insert UnaryOperator', 'Move Invocation']",2351,['Insert UnaryOperator'],"['UnaryOperator', 'Invocation']",['UnaryOperator'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1777,1777,public TYPE_1 METHOD_1 ( java.lang.Integer id ) { if ( ( id - 1 ) < ( this . VAR_1 . size ( ) ) ) { return this . VAR_1 . get ( ( id - 1 ) ) ; } else { return null ; } },public TYPE_1 METHOD_1 ( java.lang.Integer id ) { return this . VAR_1 . get ( id ) ; },"['Move Return', 'Move VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2352,"['Delete LocalVariable', 'Delete Invocation', 'Delete VariableRead']","['Return', 'VariableRead', 'Literal', 'BinaryOperator', 'VariableRead', 'Literal', 'BinaryOperator', 'ThisAccess', 'FieldRead', 'Invocation', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['LocalVariable', 'Invocation', 'VariableRead']",Partial Match,0.2,0.6666666666666666,0.125,0.21052631578947367,2,1,14
1778,1778,public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . equals ( VAR_1 ) ) return true ; if ( ( VAR_3 ) != null ) return VAR_4 . contains ( VAR_1 ) ; return VAR_5 . contains ( VAR_1 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_5 . contains ( VAR_1 ) ) || ( VAR_2 . equals ( VAR_1 ) ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Move Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",2353,"['Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Return', 'Delete Return', 'Insert Invocation', 'Insert Invocation', 'Insert Return']","['BinaryOperator', 'Invocation', 'Invocation', 'Literal', 'Return', 'Block', 'If', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'VariableRead', 'Invocation', 'Return', 'Block', 'If']","['Invocation', 'Invocation', 'Return', 'Return', 'Return', 'Invocation', 'Invocation', 'Return']",GPT Missed Nodes,0.2222222222222222,0.375,0.1875,0.25,3,5,13
1779,1779,public java.lang.String getId ( ) { return STRING_1 + ( id ) ; },public long getId ( ) { return id ; },"['Update TypeReference', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2354,"['Update TypeReference', 'Delete Invocation', 'Delete TypeReference']","['TypeReference', 'FieldRead', 'FieldRead', 'BinaryOperator']","['TypeReference', 'Invocation', 'TypeReference']",Partial Match,0.25,0.3333333333333333,0.25,0.28571428571428575,1,2,3
1780,1780,"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ( ( VAR_1 . METHOD_5 ( ) ) + STRING_1 ) ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2356,"['Delete Invocation', 'Delete VariableRead']","['Invocation', 'FieldRead', 'BinaryOperator']","['Invocation', 'VariableRead']",Partial Match,0.25,0.0,0.0,0.0,0,2,3
1781,1781,"public TYPE_1 METHOD_1 ( final TYPE_2 t ) { return ( ( TYPE_3 ) ( function . METHOD_1 ( t ) ) ) . METHOD_1 ( t , VAR_1 ) ; }","public TYPE_1 METHOD_1 ( final TYPE_2 t ) { return ( ( TYPE_3 ) ( function ) ) . METHOD_1 ( t , VAR_1 ) ; }","['Insert FieldRead', 'Move TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",2357,['Delete Invocation'],"['FieldRead', 'TypeReference', 'FieldRead', 'VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
1782,1782,public void start ( ) { VAR_1 = VAR_2 . METHOD_1 ( TYPE_1 . METHOD_2 ( ) ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_2 ( ) ) . METHOD_5 ( this ) ; },public void start ( ) { VAR_1 = VAR_2 . METHOD_1 ( TYPE_1 . METHOD_2 ( ) ) . METHOD_4 ( TYPE_1 . METHOD_2 ( ) ) . METHOD_5 ( this ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move ThisAccess', 'Move Invocation', 'Delete Invocation']",2359,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'ThisAccess', 'Invocation', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1783,1783,public boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) > 0 ) { return ! ( VAR_1 . get ( METHOD_2 ( ) ) . VAR_2 . isEmpty ( ) ) ; } else { return false ; } },public boolean METHOD_1 ( ) { return ! ( VAR_1 . isEmpty ( ) ) ; },"['Insert Return', 'Insert UnaryOperator', 'Insert Invocation', 'Move TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2361,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete UnaryOperator', 'Delete VariableRead', 'Delete Return']","['Return', 'UnaryOperator', 'Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Invocation', 'Invocation', 'FieldRead', 'Invocation', 'UnaryOperator', 'Return', 'Block', 'Literal', 'Return', 'Block', 'If']","['Invocation', 'Invocation', 'Invocation', 'Return', 'UnaryOperator', 'VariableRead', 'Return']",Partial Match,0.3,0.8571428571428571,0.3333333333333333,0.48,6,1,12
1784,1784,protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; },protected void METHOD_1 ( java.lang.Void VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; super . METHOD_1 ( VAR_1 ) ; },['Move Invocation'],2362,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1785,1785,"private TYPE_1 METHOD_1 ( TYPE_1 key , TYPE_1 message ) { return message . METHOD_2 ( key , METHOD_3 ( ) ) ; }","private TYPE_1 METHOD_1 ( TYPE_1 message , TYPE_1 key ) { return message . METHOD_2 ( key , METHOD_3 ( ) ) ; }",['Move Parameter'],2363,"['Update Parameter', 'Move Parameter']",['Parameter'],"['Parameter', 'Parameter']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
1786,1786,public void METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_3 . error ( VAR_2 . METHOD_2 ( ) ) ; } TYPE_2 . METHOD_3 ( this ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_3 . error ( VAR_2 ) ; } TYPE_2 . METHOD_3 ( this ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",2364,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1787,1787,public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) < INT_1 ) return INT_2 ; return INT_3 ; },public int METHOD_1 ( TYPE_1 VAR_1 ) { return INT_3 ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",2365,"['Delete Return', 'Delete Return']","['FieldRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.2,0.5,0.14285714285714285,0.22222222222222224,1,1,6
1788,1788,private boolean METHOD_1 ( ) { return ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ; },private boolean METHOD_1 ( ) { return ( ( VAR_2 ) != null ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ; },"['Move BinaryOperator', 'Move UnaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2366,['Delete VariableRead'],"['BinaryOperator', 'UnaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1789,1789,public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return this . VAR_2 . get ( VAR_3 . toLowerCase ( ) ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return this . VAR_2 . get ( VAR_1 ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2367,['Delete Invocation'],"['VariableRead', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.3333333333333333,0.5,1,0,2
1790,1790,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_3 > listener , TYPE_4 VAR_2 , TYPE_5 VAR_3 , TYPE_6 VAR_4 ) { TYPE_7 . METHOD_2 ( VAR_5 , VAR_1 , listener , VAR_2 , VAR_3 , this . VAR_6 , VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_3 > listener , TYPE_4 VAR_2 , TYPE_5 VAR_3 , TYPE_6 VAR_4 ) { TYPE_7 . METHOD_2 ( VAR_5 , VAR_1 , listener , VAR_2 , this . VAR_6 , VAR_3 , VAR_4 ) ; }",['Move VariableRead'],2368,['Move Invocation'],['VariableRead'],['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1791,1791,public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + STRING_2 ) + ( id ) ) + CHAR_1 ) + STRING_3 ) + ( VAR_1 ) ) + CHAR_2 ; },public java.lang.String toString ( ) { return ( ( ( STRING_1 + STRING_2 ) + ( id ) ) + CHAR_1 ) + CHAR_2 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",2369,['Delete LocalVariable'],"['BinaryOperator', 'FieldRead', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']",['LocalVariable'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1792,1792,"public int METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getString ( VAR_3 , null ) ; if ( VAR_1 == null ) return VAR_4 ; return java.lang.Integer.parseInt ( VAR_5 . trim ( ) ) ; }","public int METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getString ( VAR_3 , null ) ; if ( VAR_1 == null ) return VAR_4 ; return java.lang.Integer.parseInt ( VAR_1 ) ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2370,['Update VariableRead'],"['VariableRead', 'TypeAccess', 'Invocation']",['VariableRead'],GPT Missed Nodes,0.3333333333333333,0.0,0.0,0.0,0,1,3
1793,1793,public void METHOD_1 ( int VAR_1 ) { VAR_2 . setText ( ( ( ( ( getString ( VAR_3 ) ) + STRING_1 ) + VAR_1 ) + STRING_2 ) ) ; },public void METHOD_1 ( int VAR_1 ) { VAR_2 . setText ( ( ( ( getString ( VAR_3 ) ) + STRING_1 ) + VAR_1 ) ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",2371,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1794,1794,private static TYPE_1 METHOD_1 ( java.lang.String className ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( className ) ) ) { return VAR_2 . get ( className ) ; } return VAR_3 ; },private static TYPE_1 METHOD_1 ( java.lang.String className ) { if ( VAR_1 . METHOD_2 ( className ) ) { return VAR_2 . get ( className ) ; } return VAR_3 ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2372,['Delete VariableRead'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1795,1795,private boolean METHOD_1 ( ) { return ( listener . METHOD_2 ( ) ) || ( ( ( listener . METHOD_3 ( ) ) != null ) && ( ( VAR_1 ) > 0 ) ) ; },private boolean METHOD_1 ( ) { return ( ( listener . METHOD_3 ( ) ) != null ) && ( ( VAR_1 ) > 0 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",2373,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1796,1796,public TYPE_1 METHOD_1 ( java.lang.String value ) { if ( ( value == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ) { return VAR_2 . error ( STRING_1 ) ; } else { return TYPE_1 . METHOD_2 ( ) ; } },public TYPE_1 METHOD_1 ( java.lang.String value ) { if ( ( value == null ) || ( VAR_1 . isEmpty ( ) ) ) { return VAR_2 . error ( STRING_1 ) ; } else { return TYPE_1 . METHOD_2 ( ) ; } },"['Update BinaryOperator', 'Move BinaryOperator', 'Move BinaryOperator', 'Update Invocation', 'Delete Literal', 'Delete BinaryOperator']",2374,"['Delete Literal', 'Delete VariableRead', 'Insert VariableRead']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'Invocation', 'Literal', 'BinaryOperator']","['Literal', 'VariableRead', 'VariableRead']",Partial Match,0.25,0.3333333333333333,0.16666666666666666,0.2222222222222222,1,2,5
1797,1797,public void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 ) TYPE_2 . METHOD_2 ( ) . METHOD_1 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . METHOD_2 ( ) . METHOD_1 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2376,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
1798,1798,public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_4 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2377,['Delete Return'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1799,1799,public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( status ) ) { VAR_2 . METHOD_1 ( ) ; for ( TYPE_1 VAR_3 : VAR_4 ) { VAR_3 . METHOD_1 ( ) ; } status = VAR_5 ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( status ) ) { status = VAR_5 ; VAR_2 . METHOD_1 ( ) ; for ( TYPE_1 VAR_3 : VAR_4 ) { VAR_3 . METHOD_1 ( ) ; } } },['Move Assignment'],2378,['Move Invocation'],['Assignment'],['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1800,1800,private static java.lang.String METHOD_1 ( TYPE_1 source ) { return source . METHOD_2 ( ) . METHOD_3 ( ) . toLowerCase ( ) ; },private static java.lang.String METHOD_1 ( TYPE_1 source ) { return source . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete Invocation']",2379,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1801,1801,public void METHOD_1 ( float VAR_1 ) { VAR_2 = ( ( int ) ( ( VAR_1 * INT_1 ) / ( VAR_3 ) ) ) ; METHOD_2 ( ) ; },public void METHOD_1 ( float VAR_1 ) { VAR_2 = ( ( int ) ( ( ( ( - 1 ) * VAR_1 ) * INT_1 ) / ( VAR_3 ) ) ) ; METHOD_2 ( ) ; },"['Insert BinaryOperator', 'Insert UnaryOperator', 'Move VariableRead', 'Insert Literal']",2380,"['Insert UnaryOperator', 'Insert Assignment', 'Insert VariableRead']","['BinaryOperator', 'UnaryOperator', 'VariableRead', 'Literal']","['UnaryOperator', 'Assignment', 'VariableRead']",Partial Match,0.4,0.3333333333333333,0.25,0.28571428571428575,1,2,3
1802,1802,private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 . METHOD_2 ( ) ) { VAR_3 . delete ( VAR_2 ) ; METHOD_1 ( VAR_2 ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 . METHOD_2 ( ) ) { METHOD_1 ( VAR_2 ) ; VAR_3 . delete ( VAR_1 ) ; } },"['Move Invocation', 'Update VariableRead']",2381,"['Update Invocation', 'Update Invocation']","['Invocation', 'VariableRead']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.0,0.0,0.0,0,2,2
1803,1803,"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 type , java.lang.Object VAR_2 ) { if ( VAR_3 . getValue ( type ) . equals ( VAR_2 ) ) { return TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 type , java.lang.Object VAR_2 ) { if ( ( VAR_3 . get ( type ) . getValue ( ) ) == VAR_2 ) { return TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } return true ; }","['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Move VariableRead', 'Update Invocation']",2383,"['Insert Invocation', 'Delete Invocation', 'Update Invocation']","['BinaryOperator', 'Invocation', 'Invocation', 'VariableRead', 'Invocation']","['Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,0.3333333333333333,0.2,0.25,1,2,4
1804,1804,"public void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_1 . METHOD_4 ( VAR_1 ) ; } }","public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_1 . METHOD_4 ( VAR_1 ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2385,['Delete Invocation'],"['Invocation', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,7
1805,1805,public boolean METHOD_1 ( java.lang.Object VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; return true ; } else return false ; },public void METHOD_1 ( java.lang.Object VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2386,"['Delete Return', 'Delete Return']","['TypeReference', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'Literal', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.125,1.0,0.16666666666666666,0.2857142857142857,2,0,10
1806,1806,public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return false ; } else { return true ; } },public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return true ; } else { return false ; } },"['Move Return', 'Move Return']",2390,"['Update Return', 'Update Return']","['Return', 'Return']","['Return', 'Return']",Exact Match,1.0,0.0,0.0,0.0,0,2,2
1807,1807,public boolean METHOD_1 ( ) { return ( ( this . VAR_1 ) > 0.0F ) || ( this . METHOD_2 ( ) ) ; },public boolean METHOD_1 ( ) { return ( this . VAR_1 ) > 0.0F ; },"['Move BinaryOperator', 'Delete ThisAccess', 'Delete Invocation', 'Delete BinaryOperator']",2393,['Delete Invocation'],"['BinaryOperator', 'ThisAccess', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1808,1808,"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_3 ) - ( VAR_4 ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_4 ) - ( VAR_3 ) ; }",['Move FieldRead'],2394,['Update VariableRead'],['FieldRead'],['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1809,1809,public java.lang.String getName ( ) { if ( ! ( VAR_1 ) ) METHOD_1 ( ) ; return name ; },public java.lang.String getName ( ) { return name ; },"['Delete FieldRead', 'Delete UnaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",2396,['Delete Invocation'],"['FieldRead', 'UnaryOperator', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.2,0.33333333333333337,1,0,4
1810,1810,"public void METHOD_1 ( TYPE_1 message , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { if ( VAR_3 ) { TYPE_4 . METHOD_2 ( ) . METHOD_1 ( VAR_1 , message ) ; } }","public void METHOD_1 ( TYPE_1 message , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 . METHOD_2 ( ) . METHOD_1 ( VAR_1 , message ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2397,['Delete Invocation'],"['Invocation', 'FieldRead', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,4
1811,1811,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( ! ( VAR_2 ) ) ) handle ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) handle ( ) ; },"['Move UnaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",2398,['Delete Invocation'],"['UnaryOperator', 'FieldRead', 'UnaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1812,1812,public java.lang.String METHOD_1 ( ) { return ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) + ( VAR_2 ) ; },public java.lang.String METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",2400,['Update Return'],"['Literal', 'FieldRead', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator', 'FieldRead', 'BinaryOperator']",['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,10
1813,1813,"public void METHOD_1 ( java.lang.Throwable t ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; if ( VAR_4 != null ) { TYPE_1 . METHOD_3 ( VAR_4 , STRING_1 , VAR_5 ) . show ( ) ; } }","public void METHOD_1 ( java.lang.Throwable t ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_3 ( VAR_4 , STRING_1 , VAR_5 ) . show ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2401,['Delete Return'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1814,1814,"public void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( new TYPE_3 ( VAR_3 ) . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , METHOD_5 ( ) , VAR_2 ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_3 , VAR_1 . METHOD_4 ( ) , METHOD_5 ( ) , VAR_2 ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation']",2402,['Delete Invocation'],"['TypeAccess', 'FieldRead', 'ConstructorCall', 'Invocation']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.25,0.4,1,0,3
1815,1815,public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2404,['Delete Invocation'],"['Invocation', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,7
1816,1816,private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; VAR_2 = null ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; VAR_2 = null ; try { VAR_1 . METHOD_3 ( ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } },"['Move Assignment', 'Move Assignment']",2405,['Delete Invocation'],"['Assignment', 'Assignment']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1817,1817,public static TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 = new TYPE_1 ( ) ; } return VAR_1 ; },public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } return VAR_1 ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",2406,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1818,1818,"protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; view . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 ) ; view . METHOD_3 ( ) ; }",protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; },"['Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Invocation']",2407,"['Delete Invocation', 'Delete Invocation']","['FieldRead', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'FieldRead', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.3333333333333333,1.0,0.13333333333333333,0.23529411764705882,2,0,13
1819,1819,"public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . put ( VAR_4 . toLowerCase ( ) , VAR_2 ) ; METHOD_2 ( ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; METHOD_2 ( ) ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2408,"['Delete Invocation', 'Insert VariableRead']","['VariableRead', 'TypeAccess', 'Invocation']","['Invocation', 'VariableRead']",GPT Missed Nodes,0.6666666666666666,1.0,0.6666666666666666,0.8,2,0,1
1820,1820,"public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { if ( ! ( VAR_2 . equals ( STRING_1 ) ) ) VAR_3 . METHOD_2 ( string ) ; VAR_4 . setState ( new TYPE_2 ( VAR_3 , VAR_5 ) ) ; }","public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { VAR_3 . METHOD_2 ( string ) ; VAR_4 . setState ( new TYPE_2 ( VAR_3 , VAR_5 ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2409,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1821,1821,"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; TYPE_2 . METHOD_2 ( VAR_3 , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) ; METHOD_3 ( VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_3 , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) ; }",['Move Invocation'],2410,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1822,1822,public java.lang.String METHOD_1 ( int position ) { return VAR_1 . get ( position ) . getString ( ) ; },public java.lang.String METHOD_1 ( int position ) { return VAR_1 . get ( position ) ; },"['Move Invocation', 'Delete Invocation']",2411,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1823,1823,"public java.lang.Integer METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_3 . equals ( STRING_1 ) ) { return ( start ) + VAR_2 ; } else { return ( end ) + VAR_1 ; } }","public java.lang.Integer METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_3 . equals ( STRING_1 ) ) { return start ; } else { return ( end ) + VAR_2 ; } }","['Insert Return', 'Move Return', 'Move FieldRead', 'Move FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Return']",2412,"['Update VariableRead', 'Update VariableRead']","['Return', 'Return', 'FieldRead', 'FieldRead', 'VariableRead', 'BinaryOperator', 'Return']","['VariableRead', 'VariableRead']",GPT Missed Nodes,0.25,0.0,0.0,0.0,0,2,7
1824,1824,"public void METHOD_1 ( final TYPE_1 VAR_1 , java.lang.String source ) { if ( source == null ) { return ; } VAR_1 . METHOD_1 ( source ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 , java.lang.String source ) { VAR_1 . METHOD_1 ( source ) ; }","['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",2413,['Delete Invocation'],"['VariableRead', 'Literal', 'BinaryOperator', 'Return', 'Block', 'If']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1825,1825,public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( VAR_1 ) != null ) { VAR_2 = 0 ; VAR_1 . METHOD_4 ( VAR_3 ) ; } },public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_2 = 0 ; VAR_1 . METHOD_4 ( VAR_3 ) ; },"['Move Assignment', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2414,['Delete Return'],"['Assignment', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,7
1826,1826,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( ( VAR_2 ) >= 0 ) && ( ( VAR_2 ) < ( VAR_3 . size ( ) ) ) ) { TYPE_1 . METHOD_2 ( VAR_2 ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2415,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'FieldRead', 'TypeAccess', 'Invocation', 'BinaryOperator', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.09090909090909091,0.16666666666666669,1,0,10
1827,1827,"public int compareTo ( final TYPE_1 VAR_1 ) { return java.lang.Double . METHOD_1 ( VAR_2 , this . VAR_3 ) ; }",public int compareTo ( final TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == ( this . VAR_3 ) ) return 0 ; if ( ( VAR_2 ) < ( this . VAR_3 ) ) return - 1 ; return 1 ; },"['Insert If', 'Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert FieldRead', 'Move FieldRead', 'Insert Return', 'Insert FieldRead', 'Insert FieldRead', 'Insert Return', 'Insert Literal', 'Insert ThisAccess', 'Insert UnaryOperator', 'Insert Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2416,"['Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeReference', 'Delete TypeReference', 'Delete BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert BinaryOperator']","['If', 'If', 'BinaryOperator', 'Block', 'BinaryOperator', 'Block', 'Literal', 'FieldRead', 'FieldRead', 'Return', 'FieldRead', 'FieldRead', 'Return', 'Literal', 'ThisAccess', 'UnaryOperator', 'Literal', 'TypeAccess', 'TypeAccess', 'Invocation']","['TypeAccess', 'TypeAccess', 'TypeReference', 'TypeReference', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator']",Partial Match,0.18181818181818182,0.23529411764705882,0.2,0.2162162162162162,4,13,16
1828,1828,protected java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 ) ; },protected java.lang.String METHOD_1 ( ) { return new java.lang.String ( VAR_1 ) ; },"['Insert ConstructorCall', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2418,"['Delete TypeAccess', 'Delete Invocation', 'Insert Invocation']","['ConstructorCall', 'FieldRead', 'TypeAccess', 'TypeAccess', 'Invocation']","['TypeAccess', 'Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.6666666666666666,0.4,0.5,2,1,3
1829,1829,public void METHOD_1 ( ) { super . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( false ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( ) ; } VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { super . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( false ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Invocation']",2419,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.1111111111111111,0.19999999999999998,1,0,8
1830,1830,public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( ) ) { METHOD_4 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",2420,['Delete Block'],"['TypeAccess', 'Invocation', 'Invocation', 'Block', 'If']",['Block'],GPT Missed Nodes,0.25,1.0,0.2,0.33333333333333337,1,0,4
1831,1831,"private void METHOD_1 ( ) { if ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; final TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( ) ; VAR_3 . METHOD_1 ( VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; VAR_1 = false ; } }","private void METHOD_1 ( ) { if ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; final TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( ) ; VAR_3 . METHOD_1 ( VAR_4 ) ; VAR_1 = false ; } }",['Move Invocation'],2421,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1832,1832,"public void METHOD_1 ( ) throws TYPE_1 { if ( ! ( VAR_1 . METHOD_1 ( INT_1 , VAR_2 ) ) ) fail ( STRING_1 ) ; }",public void METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_1 ( ) ; },"['Insert Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2422,"['Delete Return', 'Update Invocation']","['Invocation', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'UnaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']","['Return', 'Invocation']",Partial Match,0.16666666666666666,0.0,0.0,0.0,0,2,10
1833,1833,"public static TYPE_1 METHOD_1 ( double VAR_1 , double VAR_2 ) { double VAR_3 = ( ( INT_1 * VAR_1 ) * ( 1 - VAR_1 ) ) / VAR_2 ; return TYPE_1 . METHOD_1 ( VAR_3 ) ; }","public static TYPE_1 METHOD_1 ( double VAR_1 , double VAR_2 ) { double VAR_3 = ( VAR_1 * ( 1 - VAR_1 ) ) / VAR_2 ; return TYPE_1 . METHOD_1 ( VAR_3 ) ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",2423,"['Delete VariableRead', 'Delete BinaryOperator']","['VariableRead', 'FieldRead', 'BinaryOperator']","['VariableRead', 'BinaryOperator']",GPT Missed Nodes,0.6666666666666666,0.5,0.3333333333333333,0.4,1,1,2
1834,1834,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( ) ) { METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ; } TYPE_4 . METHOD_5 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2424,"['Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Invocation', 'Block', 'If', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'TypeAccess', 'Invocation', 'TypeAccess', 'Invocation']",GPT Missed Nodes,0.5,0.8,0.5,0.6153846153846154,4,1,4
1835,1835,"public static java.lang.String METHOD_1 ( android.content.Context context ) { if ( ( context != null ) && ( ( context . METHOD_2 ( ) ) != null ) ) { return TYPE_1 . METHOD_3 ( context ) . getString ( VAR_1 , VAR_2 ) ; } return VAR_2 ; }","public static java.lang.String METHOD_1 ( android.content.Context context ) { if ( context != null ) { return TYPE_1 . METHOD_3 ( context ) . getString ( VAR_1 , VAR_2 ) ; } return VAR_2 ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2425,['Delete Invocation'],"['BinaryOperator', 'VariableRead', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1836,1836,"public void METHOD_1 ( float x , float y ) { super . METHOD_1 ( x , y ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( x , y ) ; } }","public void METHOD_1 ( float x , float y ) { super . METHOD_1 ( x , y ) ; VAR_1 . METHOD_1 ( x , y ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2427,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1837,1837,"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 . getType ( ) ) != null ) { METHOD_2 ( VAR_1 . getType ( ) . METHOD_3 ( ) , METHOD_4 ( ) ) ; } }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 . getType ( ) . METHOD_3 ( ) , METHOD_4 ( ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2428,['Delete Block'],"['Invocation', 'TypeAccess', 'Invocation', 'Literal', 'BinaryOperator', 'Block', 'If']",['Block'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1838,1838,public void METHOD_1 ( TYPE_1 i ) { if ( METHOD_2 ( ) ) METHOD_3 ( STRING_1 ) ; else { METHOD_4 ( 0 ) ; new TYPE_2 ( ) . execute ( ) ; } },public void METHOD_1 ( TYPE_1 i ) { METHOD_4 ( 0 ) ; new TYPE_2 ( ) . execute ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2429,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation', 'TypeAccess', 'Invocation', 'Block', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.125,0.2222222222222222,1,0,7
1839,1839,public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; VAR_1 . METHOD_2 ( ) ; assert ! ( VAR_1 . METHOD_3 ( ) ) ; },public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; VAR_1 . METHOD_2 ( ) ; assert VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",2430,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'UnaryOperator']","['TypeAccess', 'Invocation']",Partial Match,0.3333333333333333,0.0,0.0,0.0,0,2,2
1840,1840,public TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return TYPE_2 . METHOD_2 ( ) ; } else { return TYPE_2 . METHOD_3 ( ) ; } },public TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_3 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",2431,"['Delete Invocation', 'Delete TypeAccess', 'Delete Return']","['Return', 'FieldRead', 'TypeAccess', 'Invocation', 'Return', 'Block', 'Block', 'If']","['Invocation', 'TypeAccess', 'Return']",GPT Missed Nodes,0.5,1.0,0.375,0.5454545454545454,3,0,5
1841,1841,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ! ( VAR_1 instanceof TYPE_3 ) ) { METHOD_2 ( VAR_2 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Move VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2432,"['Delete Invocation', 'Insert Invocation']","['Invocation', 'VariableRead', 'TypeAccess', 'BinaryOperator', 'UnaryOperator', 'Block', 'If']","['Invocation', 'Invocation']",GPT Missed Nodes,0.14285714285714285,0.0,0.0,0.0,0,2,7
1842,1842,public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return VAR_2 . METHOD_2 ( ) ; } else { return VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ; } },public TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_1 ( ) ) != null ) ) { return VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ; } else { return null ; } },"['Insert BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert BinaryOperator', 'Move Return', 'Insert Return', 'Insert Invocation', 'Insert Literal', 'Insert Literal', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return']",2433,"['Update Invocation', 'Update Return', 'Insert Invocation', 'Insert Invocation', 'Insert UnaryOperator', 'Insert UnaryOperator', 'Delete TypeAccess']","['BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'Return', 'Return', 'Invocation', 'Literal', 'Literal', 'TypeAccess', 'TypeAccess', 'Invocation', 'Return']","['Invocation', 'Return', 'Invocation', 'Invocation', 'UnaryOperator', 'UnaryOperator', 'TypeAccess']",Partial Match,0.5,0.2857142857142857,0.15384615384615385,0.2,2,5,11
1843,1843,"public boolean METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( context , VAR_1 . METHOD_3 ( context ) ) ; return ( VAR_2 != null ) && ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ; }","public boolean METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( context , VAR_1 . METHOD_3 ( context ) ) ; return TYPE_2 . METHOD_4 ( VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2434,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,0.0,0.0,0.0,0,1,5
1844,1844,"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < java.lang.String > VAR_2 ) { if ( ( VAR_3 . METHOD_2 ( VAR_1 ) ) == ( VAR_4 ) ) { return METHOD_1 ( VAR_3 . METHOD_3 ( ) , VAR_2 ) ; } return false ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < java.lang.String > VAR_2 ) { if ( ( VAR_3 . METHOD_2 ( VAR_1 ) ) == ( VAR_4 ) ) { METHOD_1 ( VAR_3 . METHOD_3 ( ) , VAR_2 ) ; } }","['Update TypeReference', 'Move Invocation', 'Delete Return', 'Delete Literal', 'Delete Return']",2435,"['Update TypeAccess', 'Delete Return', 'Update Wra', 'Insert Invocation']","['TypeReference', 'Invocation', 'Return', 'Literal', 'Return']","['TypeAccess', 'Return', 'Wra', 'Invocation']",Partial Match,0.3333333333333333,0.25,0.2,0.22222222222222224,1,3,4
1845,1845,private void METHOD_1 ( int VAR_1 ) { VAR_2 . remove ( VAR_1 ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } },private void METHOD_1 ( int VAR_1 ) { VAR_2 . remove ( VAR_1 ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2436,['Delete Invocation'],"['FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'VariableRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.125,1.0,0.125,0.2222222222222222,1,0,7
1846,1846,public void METHOD_1 ( boolean show ) { VAR_1 = show ; if ( ( VAR_1 ) && ( ( ( VAR_2 ) == null ) || ( ( VAR_3 ) == null ) ) ) { METHOD_2 ( ) ; } },public void METHOD_1 ( boolean show ) { VAR_1 = show ; METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2437,['Delete If'],"['Invocation', 'FieldRead', 'FieldRead', 'Literal', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator', 'BinaryOperator', 'Block', 'If']",['If'],GPT Missed Nodes,0.16666666666666666,1.0,0.08333333333333333,0.15384615384615385,1,0,11
1847,1847,private void METHOD_1 ( java.lang.String message ) { if ( ( ( VAR_1 ) != null ) && ( ! ( VAR_2 . equals ( STRING_1 ) ) ) ) { VAR_1 . METHOD_2 ( message ) ; } },private void METHOD_1 ( java.lang.String message ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( message ) ; } },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",2438,['Delete Invocation'],"['BinaryOperator', 'TypeAccess', 'TypeAccess', 'Invocation', 'UnaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1848,1848,"public static void METHOD_1 ( java.lang.String type , java.lang.String msg ) { if ( VAR_1 . equals ( STRING_1 ) ) TYPE_1 . METHOD_2 ( type , msg , INT_1 ) ; }","public static void METHOD_1 ( java.lang.String type , java.lang.String msg ) { TYPE_1 . METHOD_2 ( type , msg , INT_1 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2439,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.25,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1849,1849,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_6 ( ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; },"['Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2440,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['Invocation', 'Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.14285714285714285,0.75,0.3333333333333333,0.46153846153846156,3,1,6
1850,1850,"public static java.lang.String METHOD_1 ( java.lang.String value ) { if ( ! ( value . METHOD_2 ( STRING_1 ) ) ) { value = VAR_1 . toUpperCase ( ) ; value = VAR_1 . replaceAll ( STRING_2 , STRING_3 ) ; } return value ; }","public static java.lang.String METHOD_1 ( java.lang.String value ) { value = VAR_1 . toUpperCase ( ) ; value = VAR_1 . replaceAll ( STRING_2 , STRING_3 ) ; return value ; }","['Move Assignment', 'Move Assignment', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2441,['Delete Invocation'],"['Assignment', 'Assignment', 'VariableRead', 'TypeAccess', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.125,0.2222222222222222,1,0,7
1851,1851,"public void update ( TYPE_1 VAR_1 , int VAR_2 ) throws TYPE_2 { synchronized ( VAR_3 ) { for ( TYPE_3 VAR_4 : VAR_5 . values ( ) ) { VAR_6 . update ( VAR_1 , VAR_2 ) ; } } }","public void update ( TYPE_1 VAR_1 , int VAR_2 ) throws TYPE_2 { synchronized ( VAR_3 ) { for ( TYPE_3 VAR_4 : VAR_3 ) { VAR_6 . update ( VAR_1 , VAR_2 ) ; } } }","['Insert FieldRead', 'Move FieldRead', 'Delete TypeAccess', 'Delete Invocation']",2443,['Update VariableRead'],"['FieldRead', 'FieldRead', 'TypeAccess', 'Invocation']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1852,1852,public int METHOD_1 ( ) { return ( VAR_1 . size ( ) ) - 1 ; },public int METHOD_1 ( ) { return VAR_1 . size ( ) ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",2444,['Delete UnaryOperator'],"['Invocation', 'Literal', 'BinaryOperator']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1853,1853,private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( ) ) ) && ( VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_3 ( ) ) && ( VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; },"['Move BinaryOperator', 'Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",2445,['Delete Invocation'],"['BinaryOperator', 'Invocation', 'VariableRead', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
1854,1854,public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 . size ( ) ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ; },public java.lang.String toString ( ) { return ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 . size ( ) ) ) + STRING_3 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",2446,"['Delete Invocation', 'Delete Invocation']","['BinaryOperator', 'FieldRead', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']","['Invocation', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,2,6
1855,1855,"public boolean contains ( TYPE_1 p ) { if ( p == null ) throw new java.lang.NullPointerException ( ) ; return contains ( p , VAR_1 , true ) ; }","public boolean contains ( TYPE_1 p ) { if ( p == null ) throw new java.lang.NullPointerException ( ) ; return ( contains ( p , VAR_1 , true ) ) != null ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",2447,"['Insert Literal', 'Insert TypeReference']","['BinaryOperator', 'Invocation', 'Literal']","['Literal', 'TypeReference']",Partial Match,0.25,0.5,0.3333333333333333,0.4,1,1,2
1856,1856,public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_1 ( ) ; },public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_1 ( ) ; return null ; },"['Move Invocation', 'Insert Literal']",2448,['Insert Return'],"['Invocation', 'Literal']",['Return'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1857,1857,"public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( METHOD_2 ( VAR_1 , null ) ) != null ; }","public boolean METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 , null ) ; }","['Update Invocation', 'Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",2449,['Update Invocation'],"['Invocation', 'Invocation', 'Literal', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,1,0,3
1858,1858,"public long METHOD_1 ( ) throws TYPE_1 { if ( ( obj ) != null ) { return obj . METHOD_2 ( STRING_1 ) ; } else { TYPE_2 . METHOD_3 ( VAR_1 , STRING_2 , VAR_2 ) . show ( ) ; return - 1 ; } }",public long METHOD_1 ( ) throws TYPE_1 { return obj . METHOD_2 ( STRING_1 ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",2450,"['Delete Return', 'Delete Invocation']","['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation', 'Invocation', 'Literal', 'UnaryOperator', 'Return', 'Block', 'If']","['Return', 'Invocation']",GPT Missed Nodes,0.2222222222222222,1.0,0.125,0.2222222222222222,2,0,14
1859,1859,public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_1 ( ) { if ( ! ( VAR_2 ) ) VAR_3 . METHOD_3 ( ) ; } } ) ; },public void METHOD_1 ( ) { if ( ! ( VAR_2 ) ) { VAR_1 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_1 ( ) { VAR_3 . METHOD_3 ( ) ; } } ) ; } },['Move Invocation'],2451,"['Insert Block', 'Delete Invocation']",['Invocation'],"['Block', 'Invocation']",GPT Hallucinated Nodes,0.5,0.0,0.0,0.0,0,2,1
1860,1860,public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 . METHOD_1 ( ) ; return null ; },public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",2452,['Delete Return'],"['Return', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If', 'Literal', 'Return']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.125,0.2222222222222222,1,0,7
1861,1861,"public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( VAR_2 , this , VAR_1 . METHOD_3 ( ) ) ; } this . METHOD_4 ( ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_2 , this , VAR_1 . METHOD_3 ( ) ) ; this . METHOD_4 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2453,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1862,1862,"public void METHOD_1 ( java.util.Date VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 , VAR_1 ) . METHOD_4 ( ) ; }","public void METHOD_1 ( java.util.Date VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 , VAR_1 ) ; }","['Move Invocation', 'Delete Invocation']",2454,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1863,1863,"public void METHOD_1 ( TYPE_1 view , TYPE_2 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( view , VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 view , TYPE_2 VAR_1 ) { VAR_2 . METHOD_1 ( view , VAR_1 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2455,['Delete Wra'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1864,1864,public static boolean METHOD_1 ( int [ ] [ ] VAR_1 ) { if ( ( TYPE_1 . METHOD_2 ( VAR_1 ) . i ) == ( - 1 ) ) { return true ; } return false ; },public static boolean METHOD_1 ( int [ ] [ ] VAR_1 ) { if ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) == ( - 1 ) ) { return true ; } return false ; },"['Move Invocation', 'Delete FieldRead']",2456,['Delete VariableRead'],"['Invocation', 'FieldRead']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1865,1865,"public boolean METHOD_1 ( TYPE_1 item ) { TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_3 ( VAR_3 ) ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 item ) { VAR_4 . METHOD_2 ( VAR_3 ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_3 ( VAR_3 ) ) ; return true ; }",['Move Invocation'],2457,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1866,1866,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( false ) ; super . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2459,"['Delete Invocation', 'Delete Invocation']","['Invocation', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.5,0.5,0.3333333333333333,0.4,1,1,2
1867,1867,"public static boolean METHOD_1 ( final java.lang.String VAR_1 ) { return ( TYPE_1 . METHOD_1 ( VAR_1 , null ) ) || ( TYPE_1 . METHOD_1 ( VAR_1 , STRING_1 , true ) ) ; }","public static boolean METHOD_1 ( final java.lang.String VAR_1 ) { return TYPE_1 . METHOD_1 ( VAR_1 , null ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete BinaryOperator']",2460,['Delete Invocation'],"['Invocation', 'TypeAccess', 'VariableRead', 'TypeAccess', 'Literal', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.14285714285714285,0.25,1,0,6
1868,1868,"public java.lang.String toString ( TYPE_1 message ) { if ( message == null ) return null ; return message . METHOD_1 ( ) . replace ( STRING_1 , STRING_2 ) ; }",public java.lang.String toString ( TYPE_1 message ) { if ( message == null ) return null ; return message . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2461,['Delete Invocation'],"['Invocation', 'TypeAccess', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1869,1869,"TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String > id ) { return METHOD_2 ( METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( METHOD_5 ( ) ) ) , VAR_1 . set ( METHOD_6 ( ) ) , METHOD_7 ( ) ) ; }","TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String > id ) { return METHOD_2 ( METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( METHOD_5 ( ) ) , VAR_1 . set ( METHOD_6 ( ) ) ) , METHOD_7 ( ) ) ; }",['Move Invocation'],2464,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1870,1870,public java.lang.String METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) return STRING_1 ; return VAR_1 ; },public java.lang.String METHOD_1 ( ) { return STRING_1 ; },"['Move Return', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",2467,"['Delete Invocation', 'Delete Return']","['Return', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If', 'FieldRead', 'Return']","['Invocation', 'Return']",GPT Missed Nodes,0.3333333333333333,1.0,0.25,0.4,2,0,6
1871,1871,public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.System.out.println ( STRING_1 ) ; },public void METHOD_1 ( TYPE_1 b ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Invocation', 'Update Parameter']",2468,"['Update Parameter', 'Move Invocation']","['Invocation', 'Parameter']","['Parameter', 'Invocation']",Exact Match,1.0,1.0,1.0,1.0,2,0,0
1872,1872,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2469,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1873,1873,public void METHOD_1 ( java.lang.Boolean VAR_1 ) { VAR_2 = VAR_1 ; },public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; },['Update TypeReference'],2471,['Update Wra'],['TypeReference'],['Wra'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1874,1874,public void METHOD_1 ( TYPE_1 event ) { if ( ( event . METHOD_2 ( ) ) == true ) { VAR_1 . info ( STRING_1 ) ; TYPE_2 . METHOD_3 ( ( ) - > VAR_2 . METHOD_4 ( ) ) ; } },public void METHOD_1 ( TYPE_1 event ) { if ( ( event . METHOD_2 ( ) ) == true ) { VAR_2 . METHOD_4 ( ) ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Invocation', 'Insert Literal', 'Insert Invocation', 'Insert VariableRead', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2472,"['Delete Invocation', 'Delete Invocation']","['If', 'BinaryOperator', 'Block', 'Invocation', 'Literal', 'Invocation', 'VariableRead', 'TypeAccess', 'TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'Invocation']",GPT Missed Nodes,0.14285714285714285,0.5,0.09090909090909091,0.15384615384615385,1,1,10
1875,1875,"public void METHOD_1 ( android.view.View VAR_1 ) { long result = VAR_2 . METHOD_2 ( VAR_3 , null , METHOD_3 ( ) . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( getContext ( ) , ( result + STRING_1 ) , VAR_4 ) . show ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { long result = VAR_2 . METHOD_2 ( VAR_3 , null , METHOD_3 ( ) . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( getContext ( ) , ( result + STRING_1 ) , VAR_4 ) ; }","['Move Invocation', 'Delete Invocation']",2474,['Delete Invocation'],"['Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.5,0.6666666666666666,1,0,1
1876,1876,public void init ( ) { if ( ( VAR_1 ) != null ) VAR_2 . init ( ) ; },public void init ( ) { VAR_2 . init ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2475,['Delete VariableRead'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,6
1877,1877,public double METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) return VAR_1 ; return METHOD_2 ( ) . METHOD_1 ( ) ; },public double METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_1 ( ) ; },"['Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",2477,['Delete Return'],"['Invocation', 'Literal', 'BinaryOperator', 'FieldRead', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.14285714285714285,1.0,0.14285714285714285,0.25,1,0,6
1878,1878,"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_4 ) { VAR_3 . METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_4 ) { VAR_3 . METHOD_2 ( new TYPE_2 ( ) ) ; } }",['Delete FieldRead'],2478,['Delete TypeReference'],['FieldRead'],['TypeReference'],Partial Match,0.0,0.0,0.0,0.0,0,1,1
1879,1879,"public void METHOD_1 ( int VAR_1 , java.lang.String message ) { if ( ( ( VAR_2 ) == VAR_1 ) && ( ( view ) != null ) ) { view . METHOD_2 ( ) ; } VAR_3 . METHOD_1 ( VAR_1 , message ) ; }","public void METHOD_1 ( int VAR_1 , java.lang.String message ) { VAR_3 . METHOD_1 ( VAR_1 , message ) ; }","['Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2479,['Delete Invocation'],"['FieldRead', 'VariableRead', 'BinaryOperator', 'FieldRead', 'Literal', 'BinaryOperator', 'BinaryOperator', 'FieldRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.09090909090909091,0.16666666666666669,1,0,10
1880,1880,public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( TYPE_1 . METHOD_1 ( ) ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",2480,"['Delete TypeAccess', 'Delete Invocation']","['Invocation', 'TypeAccess', 'FieldRead', 'Invocation']","['TypeAccess', 'Invocation']",GPT Missed Nodes,0.6666666666666666,1.0,0.5,0.6666666666666666,2,0,2
1881,1881,public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; } else { VAR_3 . METHOD_3 ( VAR_2 ) ; } METHOD_4 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; METHOD_4 ( ) ; },"['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2481,"['Delete Assignment', 'Delete Invocation']","['Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'TypeAccess', 'TypeAccess', 'Invocation', 'Block', 'If']","['Assignment', 'Invocation']",GPT Missed Nodes,0.25,0.5,0.1,0.16666666666666669,1,1,9
1882,1882,"public void METHOD_1 ( int VAR_1 , int height ) { if ( ( ( VAR_2 ) != null ) && ( ! ( VAR_3 ) ) ) VAR_2 . METHOD_1 ( VAR_1 , height ) ; VAR_4 . METHOD_1 ( VAR_1 , height ) ; }","public void METHOD_1 ( int VAR_1 , int height ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_1 ( VAR_1 , height ) ; VAR_4 . METHOD_1 ( VAR_1 , height ) ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",2484,['Delete Invocation'],"['BinaryOperator', 'FieldRead', 'UnaryOperator', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1883,1883,public java.lang.String getValue ( TYPE_1 VAR_1 ) { java.lang.Integer VAR_2 = VAR_1 . METHOD_1 ( ) ; return ( VAR_3 . toString ( ) ) + STRING_1 ; },public java.lang.String getValue ( TYPE_1 VAR_1 ) { java.lang.Integer VAR_2 = VAR_1 . METHOD_1 ( ) ; return VAR_3 . toString ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2487,['Delete Assignment'],"['Invocation', 'FieldRead', 'BinaryOperator']",['Assignment'],Partial Match,0.0,0.0,0.0,0.0,0,1,3
1884,1884,public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 . values ( ) ) ; VAR_3 . METHOD_3 ( ) ; },public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) ; },"['Insert TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2488,"['Delete Invocation', 'Insert VariableRead']","['TypeAccess', 'TypeAccess', 'Invocation']","['Invocation', 'VariableRead']",Partial Match,0.3333333333333333,0.5,0.3333333333333333,0.4,1,1,2
1885,1885,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 ( ) ) ; VAR_1 . METHOD_2 ( ) ; },['Move Invocation'],2490,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1886,1886,"public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_2 ) != null ) VAR_1 . METHOD_2 ( STRING_1 , VAR_3 . getId ( ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_3 . getId ( ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2491,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1887,1887,protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; },protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; super . METHOD_1 ( ) ; },['Move Invocation'],2492,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1888,1888,public int METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) < INT_1 ) { return VAR_1 . size ( ) ; } else { return INT_1 ; } },public int METHOD_1 ( ) { return VAR_1 . size ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",2493,"['Delete Return', 'Delete Return']","['Return', 'TypeAccess', 'Invocation', 'FieldRead', 'BinaryOperator', 'Block', 'FieldRead', 'Return', 'Block', 'If']","['Return', 'Return']",GPT Missed Nodes,0.14285714285714285,0.5,0.1,0.16666666666666669,1,1,9
1889,1889,"public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_3 ) ; } }","public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , ( ( VAR_3 ) - 1 ) ) ; } }","['Insert BinaryOperator', 'Insert FieldRead', 'Insert Literal', 'Delete TypeAccess']",2494,['Insert UnaryOperator'],"['BinaryOperator', 'FieldRead', 'Literal', 'TypeAccess']",['UnaryOperator'],Partial Match,0.0,0.0,0.0,0.0,0,1,4
1890,1890,public void METHOD_1 ( TYPE_1 value ) { METHOD_2 ( value ) ; },public void METHOD_1 ( TYPE_1 value ) { if ( value != null ) METHOD_2 ( value ) ; },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Move Invocation']",2495,['Insert Invocation'],"['If', 'BinaryOperator', 'Block', 'VariableRead', 'Literal', 'Invocation']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1891,1891,"public TYPE_1 < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { if ( ( this . VAR_3 ) != null ) { return this . VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } return null ; }","public TYPE_1 < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { if ( ( this . VAR_3 ) != null ) { this . VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } return null ; }","['Move Invocation', 'Delete Return']",2496,['Delete Return'],"['Invocation', 'Return']",['Return'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1892,1892,public void METHOD_1 ( boolean VAR_1 ) { if ( ! ( this . VAR_1 ) ) { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( boolean VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Delete ThisAccess', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2498,['Delete UnaryOperator'],"['Assignment', 'ThisAccess', 'FieldRead', 'UnaryOperator', 'Block', 'If']",['UnaryOperator'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1893,1893,public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( VAR_1 ) ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_2 ( ) ; } else { java.lang.System.out.println ( STRING_2 ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_2 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2500,"['Delete Invocation', 'Delete Invocation', 'Delete Invocation']","['Invocation', 'Invocation', 'FieldRead', 'UnaryOperator', 'TypeAccess', 'FieldRead', 'TypeAccess', 'Invocation', 'Block', 'TypeAccess', 'FieldRead', 'TypeAccess', 'Invocation', 'Block', 'If']","['Invocation', 'Invocation', 'Invocation']",GPT Missed Nodes,0.16666666666666666,0.6666666666666666,0.13333333333333333,0.2222222222222222,2,1,13
1894,1894,"public boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < TYPE_2 , java.util.List < TYPE_1 > > VAR_2 , java.util.List < TYPE_3 > VAR_3 ) { return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_3 > VAR_3 ) { return true ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter']",2501,"['Delete Parameter', 'Delete TypeReference']","['TypeReference', 'TypeReference', 'TypeReference', 'TypeReference', 'Parameter']","['Parameter', 'TypeReference']",Exact Match,1.0,1.0,0.4,0.5714285714285715,2,0,3
1895,1895,public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == true ) { VAR_2 = true ; } else if ( ( VAR_1 ) == false ) { VAR_2 = false ; } return VAR_2 ; },public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == true ) { VAR_2 = true ; } else { VAR_2 = false ; } return VAR_2 ; },"['Move If', 'Move BinaryOperator', 'Move Block', 'Move Block', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2502,['Delete If'],"['If', 'BinaryOperator', 'Block', 'Block', 'Assignment', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['If'],GPT Missed Nodes,0.16666666666666666,1.0,0.1,0.18181818181818182,1,0,9
1896,1896,public TYPE_1 METHOD_1 ( int position ) { if ( position > ( METHOD_2 ( ) ) ) return VAR_1 . get ( ( position % ( METHOD_2 ( ) ) ) ) ; else return VAR_1 . get ( position ) ; },public TYPE_1 METHOD_1 ( int position ) { return VAR_1 . get ( position ) ; },"['Move Return', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",2503,"['Delete Assignment', 'Delete TypeAccess', 'Delete Return']","['Return', 'VariableRead', 'Invocation', 'BinaryOperator', 'TypeAccess', 'VariableRead', 'Invocation', 'BinaryOperator', 'Invocation', 'Return', 'Block', 'Block', 'If']","['Assignment', 'TypeAccess', 'Return']",Partial Match,0.25,0.6666666666666666,0.15384615384615385,0.25,2,1,11
1897,1897,public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return new TYPE_1 ( file . METHOD_2 ( ) . METHOD_3 ( ) ) ; },public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return new TYPE_1 ( file . METHOD_3 ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Delete Invocation']",2504,['Delete Invocation'],"['Invocation', 'Invocation', 'Invocation']",['Invocation'],Exact Match,1.0,1.0,0.3333333333333333,0.5,1,0,2
1898,1898,public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( content ) ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ; },public java.lang.String toString ( ) { return ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( content ) ) + STRING_4 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",2505,"['Delete Invocation', 'Delete Invocation']","['BinaryOperator', 'FieldRead', 'FieldRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator']","['Invocation', 'Invocation']",Partial Match,0.0,0.0,0.0,0.0,0,2,6
1899,1899,public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) . list ( ) ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . list ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2506,['Delete Invocation'],"['Invocation', 'Invocation', 'TypeAccess', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.25,0.4,1,0,3
1900,1900,public boolean METHOD_1 ( java.lang.Class VAR_1 ) { return ( this . VAR_2 . METHOD_2 ( VAR_1 ) ) || ( this . VAR_3 . METHOD_2 ( VAR_1 ) ) ; },public boolean METHOD_1 ( java.lang.Class VAR_1 ) { return this . VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",2507,['Delete Invocation'],"['Invocation', 'ThisAccess', 'FieldRead', 'VariableRead', 'Invocation', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.2,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1901,1901,public void METHOD_1 ( TYPE_1 node ) { METHOD_1 ( node . METHOD_2 ( ) ) ; METHOD_1 ( node . METHOD_3 ( ) ) ; },public void METHOD_1 ( TYPE_1 node ) { METHOD_1 ( node . METHOD_3 ( ) ) ; METHOD_1 ( node . METHOD_2 ( ) ) ; },['Move Invocation'],2510,"['Move Invocation', 'Move Invocation']",['Invocation'],"['Invocation', 'Invocation']",Exact Match,1.0,0.5,1.0,0.6666666666666666,1,1,0
1902,1902,"public void METHOD_1 ( int i , java.lang.String VAR_1 ) { if ( ! ( this . VAR_2 . isEmpty ( ) ) ) { this . VAR_2 . set ( i , VAR_1 ) ; } }","public void METHOD_1 ( int i , java.lang.String VAR_1 ) { this . VAR_2 . set ( i , VAR_1 ) ; }","['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2512,['Delete Invocation'],"['Invocation', 'ThisAccess', 'FieldRead', 'Invocation', 'UnaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1903,1903,"private void METHOD_1 ( double VAR_1 , double VAR_2 ) { METHOD_2 ( 1 ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_1 ) ; }","private void METHOD_1 ( double VAR_1 , double VAR_2 ) { METHOD_2 ( 1 ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( ) ; METHOD_6 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; }",['Move Invocation'],2514,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1904,1904,public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( INT_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( INT_3 ) ; java.lang.System.out.println ( VAR_1 . METHOD_1 ( ) ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( INT_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( INT_3 ) ; java.lang.System.out.println ( VAR_1 ) ; },"['Move VariableRead', 'Delete Invocation']",2515,['Delete Invocation'],"['VariableRead', 'Invocation']",['Invocation'],GPT Missed Nodes,0.5,1.0,0.5,0.6666666666666666,1,0,1
1905,1905,public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2516,['Delete Invocation'],"['Assignment', 'TypeAccess', 'VariableRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,1.0,0.16666666666666666,0.2857142857142857,1,0,5
1906,1906,"public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { if ( VAR_1 != null ) METHOD_2 ( new TYPE_2 ( getActivity ( ) , VAR_2 , VAR_1 ) ) ; }","public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { METHOD_2 ( new TYPE_2 ( getActivity ( ) , VAR_2 , VAR_1 ) ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2517,['Delete Invocation'],"['Invocation', 'VariableRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1907,1907,"public boolean METHOD_1 ( int x , int y ) { if ( ( y < ( size ) ) && ( x < ( size ) ) ) return VAR_1 [ METHOD_2 ( y ) ] [ METHOD_3 ( x ) ] ; else return false ; }","public boolean METHOD_1 ( int x , int y ) { return VAR_1 [ METHOD_2 ( y ) ] [ METHOD_3 ( x ) ] ; }","['Move Return', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2518,"['Delete BinaryOperator', 'Delete Return']","['Return', 'VariableRead', 'FieldRead', 'BinaryOperator', 'VariableRead', 'FieldRead', 'BinaryOperator', 'BinaryOperator', 'Block', 'Literal', 'Return', 'Block', 'If']","['BinaryOperator', 'Return']",GPT Missed Nodes,0.2857142857142857,1.0,0.15384615384615385,0.2666666666666667,2,0,11
1908,1908,public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( 0 ) ; VAR_2 . METHOD_4 ( 0 ) ; VAR_2 . METHOD_5 ( 0 ) ; VAR_3 . METHOD_6 ( ) ; VAR_3 . METHOD_7 ( 0 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( 0 ) ; VAR_2 . METHOD_4 ( 0 ) ; VAR_2 . METHOD_5 ( 0 ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_6 ( ) ; VAR_3 . METHOD_7 ( 0 ) ; },['Move Invocation'],2519,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1909,1909,public static TYPE_1 [ ] METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return null ; } return VAR_1 . METHOD_3 ( ) ; },public static TYPE_1 [ ] METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( VAR_1 . METHOD_2 ( ) ) { return null ; } return VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",2520,['Delete TypeAccess'],"['Invocation', 'UnaryOperator']",['TypeAccess'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1910,1910,"TYPE_1 METHOD_1 ( ) { return METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) , METHOD_5 ( ) ) ; }","TYPE_1 METHOD_1 ( ) { return METHOD_2 ( METHOD_5 ( ) , METHOD_4 ( ) , METHOD_3 ( ) ) ; }","['Move Invocation', 'Move Invocation']",2521,"['Move Invocation', 'Move Invocation', 'Move Invocation']","['Invocation', 'Invocation']","['Invocation', 'Invocation', 'Invocation']",Exact Match,1.0,0.6666666666666666,1.0,0.8,2,1,0
1911,1911,private void METHOD_1 ( ) { METHOD_2 ( VAR_1 . get ( 0 ) ) ; },private void METHOD_1 ( ) { METHOD_2 ( VAR_1 . get ( i ) ) ; },"['Insert FieldRead', 'Delete Literal']",2522,['Update VariableRead'],"['FieldRead', 'Literal']",['VariableRead'],Partial Match,0.0,0.0,0.0,0.0,0,1,2
1912,1912,"public boolean METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) TYPE_1 . METHOD_3 ( ) . METHOD_4 ( METHOD_5 ( ) , METHOD_6 ( ) ) ; return true ; }","public boolean METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_3 ( ) . METHOD_4 ( METHOD_5 ( ) , METHOD_6 ( ) ) ; return true ; }","['Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2523,"['Delete UnaryOperator', 'Delete Invocation']","['Invocation', 'Invocation', 'UnaryOperator', 'Block', 'If']","['UnaryOperator', 'Invocation']",GPT Missed Nodes,0.5,1.0,0.4,0.5714285714285715,2,0,3
1913,1913,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != ( this ) ) { VAR_1 . METHOD_2 ( this ) ; VAR_2 . add ( VAR_1 ) ; } else { VAR_2 . add ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( this ) ; VAR_2 . add ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete ThisAccess', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2525,['Delete Invocation'],"['Invocation', 'Invocation', 'VariableRead', 'ThisAccess', 'BinaryOperator', 'Block', 'TypeAccess', 'VariableRead', 'Invocation', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.14285714285714285,1.0,0.09090909090909091,0.16666666666666669,1,0,10
1914,1914,public void METHOD_1 ( ) { java.lang.System.out.println ( ( ( ( value ) + STRING_1 ) + ( VAR_1 ) ) ) ; },public java.lang.String METHOD_1 ( ) { return ( ( value ) + STRING_1 ) + ( VAR_1 ) ; },"['Update TypeReference', 'Insert Return', 'Move BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",2526,"['Insert Return', 'Delete Invocation', 'Update Wra', 'Insert TypeAccess']","['TypeReference', 'Return', 'BinaryOperator', 'TypeAccess', 'FieldRead', 'Invocation']","['Return', 'Invocation', 'Wra', 'TypeAccess']",Partial Match,0.42857142857142855,0.5,0.3333333333333333,0.4,2,2,4
1915,1915,public TYPE_1 METHOD_1 ( ) { if ( ( ( length ( ) ) > 0 ) && ( ( METHOD_2 ( ) ) < ( VAR_1 ) ) ) { ( VAR_2 ) ++ ; METHOD_1 ( ) ; } return this ; },public TYPE_1 METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) < ( VAR_1 ) ) { ( VAR_2 ) ++ ; METHOD_1 ( ) ; } return this ; },"['Move BinaryOperator', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2527,['Delete Invocation'],"['BinaryOperator', 'Invocation', 'Literal', 'BinaryOperator', 'BinaryOperator']",['Invocation'],GPT Missed Nodes,0.3333333333333333,1.0,0.2,0.33333333333333337,1,0,4
1916,1916,"public static double METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { return 1.0 / ( ( TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_1 , VAR_7 ) ) - 1 ) ; }","public static double METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { return 1.0 / ( TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_1 , VAR_7 ) ) ; }","['Update BinaryOperator', 'Move BinaryOperator', 'Move Literal', 'Delete Literal', 'Delete BinaryOperator']",2528,['Delete Invocation'],"['BinaryOperator', 'BinaryOperator', 'Literal', 'Literal', 'BinaryOperator']",['Invocation'],Partial Match,0.0,0.0,0.0,0.0,0,1,5
1917,1917,public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 . METHOD_2 ( ) ; } else { METHOD_3 ( ) ; java.lang.System.exit ( 0 ) ; } METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 . METHOD_2 ( ) ; } else { METHOD_3 ( ) ; METHOD_4 ( ) ; java.lang.System.exit ( 0 ) ; } },['Move Invocation'],2529,['Move Invocation'],['Invocation'],['Invocation'],Exact Match,1.0,1.0,1.0,1.0,1,0,0
1918,1918,public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return null ; } return VAR_1 . METHOD_2 ( ) ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2530,['Delete Return'],"['VariableRead', 'Literal', 'BinaryOperator', 'Literal', 'Return', 'Block', 'If']",['Return'],GPT Missed Nodes,0.16666666666666666,1.0,0.14285714285714285,0.25,1,0,6
1919,1919,private void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( VAR_2 ) ; VAR_1 = false ; } if ( ( VAR_3 ) != null ) { VAR_4 . METHOD_3 ( ) ; } },private void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( VAR_2 ) ; VAR_1 = false ; } VAR_4 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2532,['Delete Invocation'],"['Invocation', 'FieldRead', 'Literal', 'BinaryOperator', 'Block', 'If']",['Invocation'],GPT Missed Nodes,0.16666666666666666,0.0,0.0,0.0,0,1,6
1920,1920,public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ( VAR_2 ) != null ) { VAR_1 = VAR_3 ; } METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; } ,public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ( VAR_2 ) != null ) { VAR_1 = VAR_4 ; } else { } METHOD_1 ( VAR_1 ) ; } ,"['Insert Block', 'Update FieldRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2486,"['Update VariableRead', 'Insert Wra', 'Delete Invocation']","['Block', 'FieldRead', 'TypeAccess', 'VariableRead', 'Invocation']","['VariableRead', 'Wra', 'Invocation']",Partial Match,0.3333333333333333,0.3333333333333333,0.2,0.25,1,2,4
