fixed,buggy,baseline_ast_gumtree,line_id_tp_dataset
"private void METHOD_1 ( java.lang.String msg , int VAR_1 ) { java.lang.System.out.println ( ( ( ( VAR_1 + STRING_1 ) + STRING_2 ) + msg ) ) ; }","private void METHOD_1 ( java.lang.String msg , int VAR_1 ) { java.lang.System.out.println ( ( ( VAR_1 + STRING_1 ) + msg ) ) ; }","['Move BinaryOperator', 'Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",1
"private static float METHOD_1 ( float VAR_1 , float VAR_2 ) { return ( VAR_1 == 0 ) || ( VAR_1 != VAR_1 ) ? VAR_2 : VAR_1 ; }","private static float METHOD_1 ( float VAR_1 , float VAR_2 ) { return VAR_1 == 0 ? VAR_2 : VAR_1 ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",2
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_1 ( ) ; TYPE_1 . METHOD_1 ( ) ; TYPE_2 . METHOD_1 ( ) ; VAR_2 . info ( STRING_1 ) ; },public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( ) ; TYPE_2 . METHOD_1 ( ) ; VAR_1 . METHOD_1 ( ) ; VAR_2 . info ( STRING_1 ) ; },['Move Invocation'],4
"public int METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( new java.lang.Object [ ] { type , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 } ) ; }","public int METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( new java.lang.Object [ ] { VAR_3 , VAR_4 , VAR_2 , VAR_6 , VAR_9 , VAR_8 , VAR_10 , type , VAR_5 , VAR_7 , VAR_11 , VAR_12 , VAR_13 , VAR_1 } ) ; }","['Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead']",6
public void METHOD_1 ( ) { if ( ( this . METHOD_2 ( ) ) != null ) { this . METHOD_2 ( ) . METHOD_3 ( this ) ; } this . VAR_1 = true ; this . VAR_2 = null ; },public void METHOD_1 ( ) { this . METHOD_2 ( ) . METHOD_3 ( this ) ; this . VAR_1 = true ; this . VAR_2 = null ; },"['Move Invocation', 'Delete ThisAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",7
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_2 ) != null ) && ( ( VAR_3 ) != null ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_2 ) != null ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",8
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { VAR_3 . message ( STRING_1 , false ) ; throw new TYPE_2 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { VAR_3 . message ( STRING_1 , false ) ; throw new TYPE_2 ( ) ; } }","['Move FieldRead', 'Delete UnaryOperator']",9
"void start ( ) { try { if ( ! ( VAR_1 . METHOD_1 ( ) ) ) { VAR_2 . start ( ) ; } } catch ( TYPE_1 VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_4 , STRING_1 ) ; } }","void start ( ) { try { VAR_2 . start ( ) ; } catch ( TYPE_1 VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_4 , STRING_1 ) ; } }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",11
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( this ) ; VAR_1 . METHOD_4 ( this ) ; VAR_1 . METHOD_1 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( this ) ; VAR_1 . METHOD_4 ( this ) ; },['Move Invocation'],13
public void show ( ) { if ( ( VAR_1 ) != null ) { VAR_2 . update ( TYPE_1 . METHOD_1 ( ) ) ; } },public void show ( ) { VAR_2 . update ( TYPE_1 . METHOD_1 ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",14
"public boolean METHOD_1 ( TYPE_1 event , java.lang.String VAR_1 ) { return ( ( event . METHOD_2 ( STRING_1 ) ) != null ) && ( event . METHOD_2 ( STRING_1 ) . contains ( VAR_1 ) ) ; }","public boolean METHOD_1 ( TYPE_1 event , java.lang.String VAR_1 ) { return ( event . METHOD_2 ( STRING_1 ) . contains ( VAR_1 ) ) && ( ( event . METHOD_2 ( STRING_1 ) ) != null ) ; }",['Move BinaryOperator'],15
"public double METHOD_1 ( int VAR_1 , int VAR_2 ) { return ( ( ( double ) ( VAR_1 ) ) / ( VAR_1 + VAR_2 ) ) * INT_1 ; }","public double METHOD_1 ( int VAR_1 , int VAR_2 ) { return VAR_1 / ( VAR_1 + VAR_2 ) ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete FieldRead', 'Delete BinaryOperator']",18
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( this , VAR_1 ) ; }",public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( this ) . METHOD_1 ( VAR_1 ) ; },"['Insert Invocation', 'Update ConstructorCall', 'Move ConstructorCall', 'Move VariableRead']",20
public synchronized boolean METHOD_1 ( ) { return ( java.lang.Math.abs ( ( ( VAR_1 ) - ( VAR_2 ) ) ) ) <= FLOAT_1 ; },public synchronized boolean METHOD_1 ( ) { if ( ( java.lang.Math.abs ( ( ( VAR_1 ) - ( VAR_2 ) ) ) ) > FLOAT_1 ) { return false ; } return true ; },"['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal']",23
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; if ( ! ( VAR_3 ) ) { VAR_4 = false ; TYPE_2 . METHOD_4 ( VAR_5 , VAR_6 . getValue ( ) . toString ( ) ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_4 = false ; TYPE_2 . METHOD_4 ( VAR_5 , VAR_6 . getValue ( ) . toString ( ) ) ; }","['Move Assignment', 'Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",25
"public void METHOD_1 ( int temp ) { VAR_1 = TYPE_1 . METHOD_2 ( ( temp - INT_1 ) , INT_2 ) ; }",public void METHOD_1 ( int temp ) { VAR_1 = temp - INT_1 ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",26
"public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { listener . METHOD_3 ( STRING_1 , this ) ; listener . METHOD_4 ( this ) ; } }","public void METHOD_1 ( ) { listener . METHOD_3 ( STRING_1 , this ) ; listener . METHOD_4 ( this ) ; }","['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",28
protected void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) > 0 ) { remove ( 0 ) ; } },protected void METHOD_1 ( ) { remove ( 0 ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",30
public void METHOD_1 ( java.lang.Throwable VAR_1 ) { if ( VAR_1 instanceof TYPE_1 ) { VAR_2 . METHOD_2 ( true ) ; } else { super . METHOD_1 ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.Throwable VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",31
"public java.lang.String METHOD_1 ( ) { return java.lang.String.format ( STRING_1 , METHOD_2 ( ) ) . replaceAll ( STRING_2 , STRING_3 ) ; }","public java.lang.String METHOD_1 ( ) { return java.lang.String.format ( STRING_1 , METHOD_2 ( ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",32
"public TYPE_1 METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) ) ) return null ; else return VAR_1 . METHOD_4 ( ( ( VAR_2 ) + 1 ) , ( ( VAR_3 ) - 1 ) ) ; }","public TYPE_1 METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) ) ) return null ; else return VAR_1 . METHOD_4 ( ( ( VAR_2 ) - 1 ) , ( ( VAR_3 ) + 1 ) ) ; }","['Update BinaryOperator', 'Update BinaryOperator']",33
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return ( VAR_2 == null ) || ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",34
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; },"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_1 . METHOD_1 ( VAR_1 , 1 ) ; }","['Insert Invocation', 'Insert TypeAccess', 'Move VariableRead', 'Insert Literal', 'Delete ConstructorCall']",37
public boolean isEmpty ( ) { return VAR_1 . isEmpty ( ) ; },public boolean isEmpty ( ) { return ( VAR_1 . size ( ) ) == 1 ; },"['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Insert Literal']",38
"private void METHOD_1 ( TYPE_1 out ) throws java.io.IOException , java.lang.ClassNotFoundException { VAR_1 = VAR_2 . getClass ( ) . getName ( ) ; if ( METHOD_2 ( ) ) java.lang.System.err.println ( ( STRING_1 + ( VAR_1 ) ) ) ; out . METHOD_3 ( ) ; }","private void METHOD_1 ( TYPE_1 out ) throws java.io.IOException , java.lang.ClassNotFoundException { out . METHOD_3 ( ) ; VAR_1 = VAR_2 . getClass ( ) . getName ( ) ; if ( METHOD_2 ( ) ) java.lang.System.err.println ( ( STRING_1 + ( VAR_1 ) ) ) ; }",['Move Invocation'],39
public static java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 ; if ( TYPE_1 . METHOD_2 ( ) ) { VAR_1 = VAR_2 ; } else { VAR_1 = VAR_3 ; } return ( VAR_4 ) + VAR_1 ; },public static java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 ; if ( TYPE_1 . METHOD_2 ( ) ) { VAR_1 = VAR_2 ; } else { VAR_1 = VAR_3 ; } return VAR_1 + ( VAR_4 ) ; },['Move FieldRead'],40
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; super . METHOD_1 ( ) ; }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; }",['Move Invocation'],41
public void METHOD_1 ( ) { if ( ( this . VAR_1 . size ( ) ) > 0 ) { this . index = - 1 ; } },public void METHOD_1 ( ) { this . index = - 1 ; },"['Move Assignment', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",43
"public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return TYPE_2 . METHOD_2 ( VAR_1 , 0 , VAR_2 . length ) ; return null ; }","public TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( VAR_1 , 0 , VAR_2 . length ) ; }","['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",44
"public java.util.Map < TYPE_1 , TYPE_2 > METHOD_1 ( ) { return new java.util.HashMap ( VAR_1 ) ; }","public java.util.Map < TYPE_1 , TYPE_2 > METHOD_1 ( ) { return VAR_1 ; }","['Move FieldRead', 'Delete ConstructorCall']",45
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },protected void METHOD_1 ( TYPE_2 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",46
public double METHOD_1 ( java.lang.String VAR_1 ) { if ( ( TYPE_1 . METHOD_2 ( VAR_1 ) . getString ( STRING_1 ) ) != null ) { return TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( STRING_1 ) ; } return 0 ; },public double METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( STRING_1 ) ; },"['Move Return', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",48
private void METHOD_1 ( java.lang.String VAR_1 ) { assert VAR_1 != null ; java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_3 . METHOD_3 ( ) . VAR_4 . select ( VAR_2 ) ; VAR_5 . select ( VAR_1 ) ; } },private void METHOD_1 ( java.lang.String VAR_1 ) { assert VAR_1 != null ; java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) . VAR_4 . select ( VAR_2 ) ; VAR_5 . select ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",49
public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . getName ( ) ; },"['Insert Invocation', 'Move Invocation']",50
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_2 . METHOD_2 ( VAR_1 ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",51
public boolean METHOD_1 ( ) { return ( VAR_1 . equals ( response ) ) && ( ( VAR_2 ) != null ) ; },public boolean METHOD_1 ( ) { return VAR_1 . equals ( response ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",52
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , int start , int VAR_2 ) { return java.lang.String.format ( VAR_1 , ( start + VAR_2 ) , start ) ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 , int start , int VAR_2 ) { return java.lang.String.format ( VAR_1 , ( ( start + VAR_2 ) - 1 ) , start ) ; }","['Insert BinaryOperator', 'Move BinaryOperator', 'Insert Literal']",53
private void METHOD_1 ( ) { if ( ( ( VAR_1 ) % INT_1 ) == 1 ) { if ( VAR_2 . METHOD_2 ( VAR_3 ) ) { METHOD_3 ( ) ; } else { } } },private void METHOD_1 ( ) { if ( VAR_2 . METHOD_2 ( VAR_3 ) ) { METHOD_3 ( ) ; } else { } },"['Move If', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",55
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . get ( ( ( VAR_1 . METHOD_2 ( ) ) - 1 ) ) . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",56
"public TYPE_1 METHOD_1 ( java.lang.Integer VAR_1 ) { return new TYPE_1 ( filename , VAR_2 , VAR_1 , method , VAR_3 , className , context , args , VAR_4 ) ; }","public TYPE_1 METHOD_1 ( java.lang.Integer VAR_1 ) { return new TYPE_1 ( filename , VAR_2 , VAR_1 , method , VAR_3 , context , args , VAR_4 ) ; }",['Delete FieldRead'],59
public boolean METHOD_1 ( ) { return ( ( ( type ) == null ) && ( ( VAR_1 ) != null ) ) || ( ( ( type ) != null ) && ( VAR_2 . toLowerCase ( ) . startsWith ( VAR_3 ) ) ) ; },public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) || ( ( ( type ) != null ) && ( VAR_2 . toLowerCase ( ) . startsWith ( VAR_3 ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",60
public double METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) ) / ( VAR_2 ) ; },public double METHOD_1 ( ) { return java.lang.Math.abs ( ( ( VAR_1 . METHOD_2 ( ) ) / ( VAR_2 ) ) ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Move BinaryOperator']",61
public java.lang.String METHOD_1 ( ) { return ( ( name ) + STRING_1 ) + ( VAR_1 ) ; },public java.lang.String METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",62
"public void set ( int VAR_1 , TYPE_1 VAR_2 ) { METHOD_1 ( ) ; append ( VAR_1 , VAR_2 ) ; }",public void set ( TYPE_1 VAR_2 ) { METHOD_1 ( ) ; append ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",63
public boolean isEmpty ( ) { return ( ( ( value ) == null ) || ( ( key ) == null ) ) || ( ( VAR_1 . trim ( ) . length ( ) ) == 0 ) ; },public boolean isEmpty ( ) { return ( ( value ) == null ) || ( ( key ) == null ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",64
public java.lang.String METHOD_1 ( java.lang.String name ) { return ( METHOD_2 ( name ) ) + STRING_1 ; },public java.lang.String METHOD_1 ( java.lang.String name ) { return METHOD_2 ( name ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",65
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( ""id"" , ( ( VAR_3 . id ) + STRING_1 ) ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; intent . METHOD_2 ( ""id"" , VAR_3 . id ) ; METHOD_3 ( intent ) ; }","['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",67
"public void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ( VAR_3 ) == ( VAR_4 ) ) { METHOD_2 ( ) ; } else { METHOD_3 ( VAR_1 , VAR_2 ) ; } }","public void METHOD_1 ( int VAR_1 , int VAR_2 ) { METHOD_3 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",69
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = event . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( ( VAR_3 ) && ( VAR_2 instanceof TYPE_4 ) ) event . METHOD_5 ( true ) ; },public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = event . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; event . METHOD_5 ( true ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",70
"public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_2 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; METHOD_4 ( 1 , VAR_4 ) ; execute ( ) ; METHOD_5 ( VAR_3 , INT_1 ) ; }","public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; METHOD_4 ( 1 , VAR_4 ) ; execute ( ) ; METHOD_5 ( VAR_3 , INT_1 ) ; }",['Move Invocation'],71
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { return VAR_1 . METHOD_2 ( new TYPE_3 ( ) ) . METHOD_3 ( ) ; },public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { return VAR_1 . METHOD_2 ( new TYPE_3 ( ) ) ; },"['Move Invocation', 'Delete Invocation']",73
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . remove ( VAR_1 ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . remove ( VAR_1 ) ) return true ; else return false ; },"['Insert If', 'Move Invocation', 'Insert Block', 'Insert Block', 'Insert Return', 'Insert Return', 'Insert Literal', 'Insert Literal', 'Delete Return']",74
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( METHOD_2 ( ) ) VAR_1 . METHOD_3 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",75
"protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { if ( ! ( VAR_2 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 ) . METHOD_3 ( ) ) ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ) ; } }","protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { if ( ! ( VAR_2 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 ) . METHOD_3 ( ) ) ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; } }","['Move VariableRead', 'Delete Invocation']",76
"public void METHOD_1 ( ) { if ( VAR_1 ) METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) ) ; }","public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",78
"private TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( TYPE_3 . METHOD_2 ( STRING_1 , STRING_2 ) , INT_1 ) . build ( ) ; }","private TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( new java.util.HashSet < > ( java.util.Arrays.asList ( STRING_1 , STRING_2 ) ) , INT_1 ) . build ( ) ; }","['Insert ConstructorCall', 'Update ConstructorCall', 'Move ConstructorCall', 'Move FieldRead', 'Update Invocation', 'Update TypeAccess']",79
private double METHOD_1 ( ) { double VAR_1 = ( VAR_2 ) * INT_1 ; double VAR_3 = ( ( VAR_4 ) * ( VAR_4 ) ) * ( ( VAR_5 ) - ( TYPE_1 . METHOD_2 ( VAR_5 ) ) ) ; return VAR_1 / VAR_3 ; },private double METHOD_1 ( ) { double VAR_1 = ( VAR_2 ) * INT_1 ; double VAR_3 = ( VAR_4 ) * ( ( VAR_5 ) - ( TYPE_1 . METHOD_2 ( VAR_5 ) ) ) ; return VAR_1 / VAR_3 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",80
"public static int METHOD_1 ( int [ ] VAR_1 ) { return TYPE_1 . METHOD_1 ( VAR_1 , CHAR_1 ) ; }","public static int METHOD_1 ( int [ ] VAR_1 ) { TYPE_1 . METHOD_1 ( VAR_1 , CHAR_1 ) ; }","['Move Invocation', 'Delete Return']",81
"public void METHOD_1 ( ) { METHOD_2 ( ) ; super . METHOD_1 ( ) ; VAR_1 . METHOD_3 ( STRING_1 , this , VAR_2 ) ; }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 , this , VAR_2 ) ; }",['Move Invocation'],82
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( METHOD_2 ( ) ) METHOD_3 ( ) ; return VAR_1 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },"['Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",84
public float METHOD_1 ( java.lang.Float VAR_1 ) { return 1.0F / ( ( ( float ) ( TYPE_1 . METHOD_2 ( ( ( - VAR_1 ) + 1 ) ) ) ) + 1 ) ; },public float METHOD_1 ( java.lang.Float VAR_1 ) { return 1.0F / ( ( float ) ( TYPE_1 . METHOD_2 ( ( ( - VAR_1 ) + 1 ) ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Literal', 'Delete Literal', 'Delete BinaryOperator']",85
public java.lang.String METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return this . METHOD_3 ( ) . METHOD_1 ( ) ; } return STRING_1 + ( getName ( ) ) ; },public java.lang.String METHOD_1 ( ) { return STRING_1 + ( getName ( ) ) ; },"['Delete Invocation', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",86
protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( VAR_4 ) ; } },protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",87
"private int METHOD_1 ( int number , int VAR_1 ) { int result = ( ( number - 1 ) / ( VAR_2 ) ) - ( VAR_1 / ( VAR_2 ) ) ; return result > 0 ? result : - result ; }","private int METHOD_1 ( int number , int VAR_1 ) { int result = ( number / ( VAR_2 ) ) - ( VAR_1 / ( VAR_2 ) ) ; return result > 0 ? result : - result ; }","['Update BinaryOperator', 'Move BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",88
public java.lang.String METHOD_1 ( java.lang.String query ) { return this . VAR_1 . METHOD_2 ( query ) ; },public java.lang.String METHOD_1 ( java.lang.String query ) { return this . VAR_1 . METHOD_2 ( query ) . toString ( ) ; },"['Insert Invocation', 'Move Invocation']",89
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_4 = true ; VAR_5 = this ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_4 = true ; if ( ( VAR_5 ) == null ) { VAR_5 = this ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Assignment']",91
"public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 ; if ( VAR_3 . contains ( VAR_2 ) ) { METHOD_2 ( 0 ) ; } else { VAR_3 . add ( 0 , VAR_1 ) ; METHOD_3 ( 0 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 ; VAR_3 . add ( 0 , VAR_1 ) ; METHOD_3 ( 0 ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",93
public void METHOD_1 ( int value ) { VAR_1 = value ; METHOD_2 ( ) ; },public void METHOD_1 ( int value ) { METHOD_2 ( ) ; VAR_1 = value ; },['Move Assignment'],94
"public java.lang.String toString ( ) { return TYPE_1 . METHOD_1 ( this ) . add ( STRING_1 , VAR_1 ) . add ( STRING_2 , VAR_2 ) . add ( STRING_3 , id ) . toString ( ) ; }","public java.lang.String toString ( ) { return TYPE_1 . METHOD_1 ( this ) . add ( STRING_1 , VAR_1 ) . add ( STRING_2 , VAR_2 ) . toString ( ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",95
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_2 ) ) { return ; } if ( VAR_3 . equals ( VAR_1 ) ) { VAR_4 . setEnabled ( true ) ; } else { VAR_4 . setText ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_2 ) ) { return ; } if ( VAR_3 . equals ( VAR_1 ) ) { VAR_4 . setEnabled ( true ) ; } VAR_4 . setText ( VAR_1 ) ; },"['Move Invocation', 'Delete Block']",100
"public java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return this . METHOD_1 ( VAR_1 , VAR_2 , STRING_1 , java.lang.String . METHOD_2 ( VAR_3 ) , ""0"" ) ; }","public java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return this . METHOD_1 ( VAR_1 , VAR_2 , STRING_1 , ""0"" , java.lang.String . METHOD_2 ( VAR_3 ) ) ; }",['Move Invocation'],101
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 != null ) { VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Assignment', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",103
"public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( ( ++ ( VAR_3 ) ) ) ; METHOD_3 ( ) ; VAR_4 . METHOD_4 ( this , VAR_5 ) ; } }","public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ( ++ ( VAR_3 ) ) ) ; METHOD_3 ( ) ; VAR_4 . METHOD_4 ( this , VAR_5 ) ; }","['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",104
public void execute ( TYPE_1 VAR_1 ) { for ( java.lang.Object VAR_2 : VAR_3 ) { TYPE_2 . METHOD_1 ( VAR_4 . remove ( VAR_2 ) ) ; } },public void execute ( TYPE_1 VAR_1 ) { for ( java.lang.Object VAR_2 : VAR_3 ) { VAR_4 . remove ( VAR_2 ) ; } },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",105
public void METHOD_1 ( boolean VAR_1 ) { if ( ! ( this . VAR_2 ) ) { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( boolean VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Delete ThisAccess', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",106
public boolean METHOD_1 ( ) { return ( ( java.lang.Math.abs ( METHOD_2 ( ) ) ) <= ( VAR_1 ) ) && ( super . METHOD_1 ( ) ) ; },public boolean METHOD_1 ( ) { if ( ( java.lang.Math.abs ( METHOD_2 ( ) ) ) > ( VAR_1 ) ) { return false ; } return super . METHOD_1 ( ) ; },"['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Move Invocation', 'Insert Return', 'Insert Literal', 'Delete BinaryOperator']",109
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",111
"public void METHOD_1 ( android.content.Intent intent ) { TYPE_1 f = METHOD_2 ( VAR_1 , VAR_2 class ) ; if ( f != null ) { ( ( TYPE_2 ) ( f ) ) . METHOD_1 ( intent , true ) ; } }","public void METHOD_1 ( android.content.Intent intent ) { TYPE_1 f = METHOD_2 ( VAR_1 , VAR_2 class ) ; if ( f != null ) { ( ( TYPE_2 ) ( f ) ) . METHOD_1 ( intent ) ; } }",['Delete Literal'],112
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",113
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) . startsWith ( STRING_1 ) ) || ( VAR_1 . METHOD_2 ( ) . equals ( STRING_2 ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . startsWith ( STRING_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",115
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( VAR_1 ) ) || ( METHOD_3 ( VAR_1 ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( METHOD_2 ( VAR_1 ) ) || ( METHOD_3 ( VAR_1 ) ) ) { return true ; } else { return false ; } },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Insert Block', 'Insert Return', 'Insert Return', 'Insert Literal', 'Insert Literal', 'Delete Return']",116
"public static double METHOD_1 ( double n ) { if ( n <= 0 ) { throw new TYPE_1 ( STRING_1 ) ; } return TYPE_2 . METHOD_2 ( n , 1.0 ) ; }","public static double METHOD_1 ( double n ) { if ( n <= 0 ) { throw new TYPE_1 ( STRING_1 ) ; } TYPE_2 . METHOD_2 ( n , 1.0 ) ; }","['Move Invocation', 'Delete Return']",118
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; return VAR_2 ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) return VAR_2 ; return null ; },"['Insert If', 'Insert Return', 'Insert BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert VariableRead', 'Insert Literal', 'Move Return']",119
public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; } VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",120
"java.lang.String METHOD_1 ( java.lang.String file ) { int VAR_1 = ( file . METHOD_2 ( STRING_1 , 0 ) ) + INT_1 ; java.lang.String output ; output = VAR_2 . substring ( VAR_1 , ( VAR_1 + INT_2 ) ) . trim ( ) ; return output ; }","java.lang.String METHOD_1 ( java.lang.String file ) { int VAR_1 = ( file . METHOD_2 ( STRING_1 , 0 ) ) + INT_1 ; java.lang.String output ; output = VAR_2 . substring ( VAR_1 , ( VAR_1 + INT_2 ) ) ; return output ; }","['Move Invocation', 'Delete Invocation']",121
"private int METHOD_1 ( TYPE_1 node , int VAR_1 ) { return ( ( node . METHOD_2 ( ) ) * ( VAR_2 ) ) + ( VAR_1 + 1 ) ; }","private int METHOD_1 ( TYPE_1 node , int VAR_1 ) { return ( ( node . METHOD_2 ( ) ) * ( VAR_2 ) ) + VAR_1 ; }","['Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",122
public boolean METHOD_1 ( ) { return ( ( this . VAR_1 ) != null ) && ( ( this . VAR_1 . METHOD_2 ( ) ) != null ) ; },public boolean METHOD_1 ( ) { return ( this . VAR_1 . METHOD_2 ( ) ) != null ; },"['Move BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",123
"private boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { if ( METHOD_3 ( VAR_1 ) ) { return true ; } return false ; } return METHOD_1 ( VAR_1 , VAR_2 ) ; }","private boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return false ; } return METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",125
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { this . VAR_1 . METHOD_1 ( ) ; } },public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",126
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . length ( ) ) > 0 ) VAR_3 [ VAR_4 ] = java.lang.Double . METHOD_2 ( VAR_2 . toString ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 [ VAR_4 ] = java.lang.Double . METHOD_2 ( VAR_2 . toString ( ) ) ; },"['Move Assignment', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",128
"private void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { return ; } METHOD_2 ( 1 , size ) ; VAR_1 = false ; }","private void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { return ; } METHOD_2 ( 1 , ( ( size ) - 1 ) ) ; VAR_1 = false ; }","['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",129
public void METHOD_1 ( ) { remove ( VAR_1 ) ; add ( VAR_1 ) ; METHOD_2 ( ) ; },public void METHOD_1 ( ) { remove ( VAR_1 ) ; METHOD_2 ( ) ; },"['Delete TypeAccess', 'Delete Invocation']",130
public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( null != VAR_1 ) && ( ! ( VAR_2 . equals ( VAR_1 ) ) ) ) { VAR_3 . add ( VAR_1 ) ; } },public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ! ( VAR_2 . equals ( VAR_1 ) ) ) { VAR_3 . add ( VAR_1 ) ; } },"['Move UnaryOperator', 'Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",131
"public void METHOD_1 ( TYPE_1 < java.lang.Void > VAR_1 , TYPE_2 < java.lang.Void > response ) { if ( response . METHOD_2 ( ) ) { VAR_2 . setText ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; } }","public void METHOD_1 ( TYPE_1 < java.lang.Void > VAR_1 , TYPE_2 < java.lang.Void > response ) { VAR_2 . setText ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",132
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = null ; VAR_2 = null ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 = null ; VAR_1 = null ; },['Move Assignment'],133
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( ) ; } METHOD_4 ( VAR_1 ) ; this . VAR_3 = VAR_1 ; },public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_2 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; this . VAR_3 = VAR_1 ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",134
"public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( VAR_2 . getContext ( ) , VAR_3 , VAR_4 , VAR_1 . METHOD_3 ( ) , VAR_5 ) ; } }","public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( VAR_2 . getContext ( ) , VAR_3 , VAR_4 , VAR_1 , VAR_5 ) ; } }","['Move TypeAccess', 'Delete Invocation']",135
public int METHOD_1 ( ) { final int result = METHOD_2 ( ) ; if ( result != ( - 1 ) ) { VAR_1 . add ( result ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } return result ; },public int METHOD_1 ( ) { final int result = METHOD_2 ( ) ; VAR_1 . add ( result ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; return result ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",136
private void METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_3 . add ( METHOD_2 ( ) ) ; } },private void METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } VAR_3 . add ( METHOD_2 ( ) ) ; },['Move Invocation'],137
public float METHOD_1 ( int VAR_1 ) { synchronized ( VAR_2 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { return VAR_3 . get ( VAR_1 ) ; } return 0 ; } },public float METHOD_1 ( int VAR_1 ) { synchronized ( VAR_2 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { VAR_3 . get ( VAR_1 ) ; } return 0 ; } },"['Move Invocation', 'Delete Return']",138
public void METHOD_1 ( final long VAR_1 ) { if ( ! ( ( VAR_1 >= 0L ) && ( VAR_1 < ( VAR_2 ) ) ) ) { VAR_3 . METHOD_2 ( STRING_1 ) ; throw new TYPE_1 ( ) ; } VAR_4 = 1 ; },public void METHOD_1 ( final long VAR_1 ) { if ( ( VAR_1 >= 0L ) && ( VAR_1 < ( VAR_2 ) ) ) { VAR_3 . METHOD_2 ( STRING_1 ) ; throw new TYPE_1 ( ) ; } VAR_4 = 1 ; },"['Move BinaryOperator', 'Delete UnaryOperator']",140
"public TYPE_1 METHOD_1 ( java.lang.String key , java.lang.String value ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( key , value ) ; } return this ; }","public TYPE_1 METHOD_1 ( java.lang.String key , java.lang.String value ) { this . VAR_1 . METHOD_1 ( key , value ) ; return this ; }","['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",141
private boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) == ( VAR_1 ) ; },private boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == ( VAR_1 ) ) { return true ; } return false ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal']",143
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 class ) ; TYPE_1 . METHOD_3 ( STRING_1 , TYPE_2 . METHOD_4 ( VAR_3 ) ) ; }",public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 class ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",145
public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 ) != null ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",146
"public int METHOD_1 ( ) { return ( ( int ) ( TYPE_1 . METHOD_2 ( ( ( element . METHOD_3 ( ) ) + ( element . METHOD_4 ( ) ) ) , 0 ) ) ) ; }","public int METHOD_1 ( ) { return ( ( int ) ( TYPE_1 . METHOD_2 ( ( ( ( element . METHOD_3 ( ) ) + ( element . METHOD_4 ( ) ) ) - ( element . METHOD_3 ( ) ) ) , 0 ) ) ) ; }","['Insert BinaryOperator', 'Move BinaryOperator', 'Insert Invocation', 'Insert FieldRead']",147
"public void METHOD_1 ( android.view.View view ) { if ( view == ( VAR_1 ) ) { METHOD_2 ( ) ; } else if ( view == ( VAR_2 ) ) { METHOD_3 ( ) ; METHOD_4 ( new android.content.Intent ( this , VAR_3 class ) ) ; } }","public void METHOD_1 ( android.view.View view ) { if ( view == ( VAR_1 ) ) { METHOD_2 ( ) ; } if ( view == ( VAR_2 ) ) { METHOD_3 ( ) ; METHOD_4 ( new android.content.Intent ( this , VAR_3 class ) ) ; } }","['Move If', 'Delete Block']",148
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_3 . getName ( ) . compareTo ( VAR_4 . getName ( ) ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_3 . getName ( ) . toString ( ) . compareTo ( VAR_4 . getName ( ) . toString ( ) ) ; }","['Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Move Invocation']",149
"public void METHOD_1 ( float x , float y ) { if ( ( VAR_1 ) != ( VAR_2 ) ) { VAR_3 . METHOD_2 ( ) . METHOD_3 ( new TYPE_1 ( x , y ) ) ; } }","public void METHOD_1 ( float x , float y ) { VAR_3 . METHOD_2 ( ) . METHOD_3 ( new TYPE_1 ( x , y ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",150
"public static void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < java.lang.String > VAR_2 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; } VAR_3 . put ( VAR_1 , VAR_2 ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < java.lang.String > VAR_2 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; }","['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",151
"public java.lang.String toString ( ) { if ( VAR_1 ) { return java.lang.String.format ( STRING_1 , VAR_2 , VAR_3 . substring ( 0 , INT_1 ) , VAR_3 . substring ( INT_1 ) ) ; } else { return value ; } }","public java.lang.String toString ( ) { return java.lang.String.format ( STRING_1 , VAR_2 , VAR_3 . substring ( 0 , INT_1 ) , VAR_3 . substring ( INT_1 ) ) ; }","['Move Return', 'Delete FieldRead', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",152
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) . size ( ) ) != VAR_2 ) { VAR_1 . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) . size ( ) ) != VAR_2 ) { METHOD_4 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; } }",['Move Invocation'],153
public TYPE_1 METHOD_1 ( ) { if ( ( this . METHOD_2 ( ) ) != null ) return this . METHOD_2 ( ) . METHOD_3 ( ) ; return null ; },public TYPE_1 METHOD_1 ( ) { return this . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Return', 'Delete ThisAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",154
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 data ) { if ( ( data . METHOD_2 ( ) ) > 0 ) { VAR_2 . METHOD_3 ( data ) ; } else { METHOD_4 ( VAR_3 ) ; } }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 data ) { VAR_2 . METHOD_3 ( data ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",155
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) ) ) { VAR_2 . show ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_3 ( ) ) { VAR_2 . show ( ) ; } },"['Move Invocation', 'Delete Invocation', 'Delete BinaryOperator']",156
public boolean add ( TYPE_1 VAR_1 ) { boolean result = false ; if ( ( ( size ( ) ) < ( VAR_2 ) ) && ( super . add ( VAR_1 ) ) ) { result = true ; } return result ; },public boolean add ( TYPE_1 VAR_1 ) { boolean result = false ; if ( ( ! ( ( size ( ) ) > ( VAR_2 ) ) ) && ( super . add ( VAR_1 ) ) ) { result = true ; } return result ; },"['Insert UnaryOperator', 'Update BinaryOperator', 'Move BinaryOperator']",157
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ! ( METHOD_2 ( ) ) ) && ( VAR_1 instanceof TYPE_2 ) ) { VAR_1 . METHOD_3 ( this ) ; METHOD_4 ( true ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( this ) ; METHOD_4 ( true ) ; } },"['Move UnaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete BinaryOperator']",158
public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( null ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( null ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",159
"public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.Throwable VAR_2 ) { if ( ( ( VAR_3 ) != null ) && ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 ) ) ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } }","public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.Throwable VAR_2 ) { if ( ( VAR_3 ) != null ) VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",160
public java.lang.Class < ? > METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( STRING_1 ) ) != null ) { return VAR_2 class ; } else { return VAR_3 class ; } },public java.lang.Class < ? > METHOD_1 ( ) { return VAR_2 class ; },"['Move Return', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",161
public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ( VAR_2 . size ( ) ) > 1 ) ; },public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move BinaryOperator', 'Insert UnaryOperator', 'Update Invocation', 'Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",162
public void METHOD_1 ( int VAR_1 ) { if ( ( ( VAR_2 ) + VAR_1 ) > ( METHOD_2 ( ) ) ) { VAR_2 = METHOD_2 ( ) ; } else { VAR_2 += VAR_1 ; } },public void METHOD_1 ( int VAR_1 ) { if ( ( ( VAR_2 ) + VAR_1 ) > ( this . VAR_1 ) ) { VAR_2 = METHOD_2 ( ) ; } else { VAR_2 += VAR_1 ; } },"['Insert FieldRead', 'Insert ThisAccess', 'Delete Invocation']",163
"public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object a ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 . get ( 0 ) , a ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; return null ; }","public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object a ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 , a ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; return null ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",164
public void METHOD_1 ( ) { if ( ( VAR_1 != null ) && ( VAR_2 != null ) ) { VAR_1 . METHOD_2 ( VAR_2 ) ; } VAR_3 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",167
public void METHOD_1 ( TYPE_1 buffer ) { if ( ( buffer == null ) || ( ( buffer . METHOD_2 ( ) ) == null ) ) return ; super . METHOD_1 ( buffer ) ; },public void METHOD_1 ( TYPE_1 buffer ) { if ( ( buffer . METHOD_2 ( ) ) == null ) return ; super . METHOD_1 ( buffer ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",168
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 = false ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( ) . METHOD_5 ( ) ; },private void METHOD_1 ( ) { VAR_2 = false ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( ) . METHOD_5 ( ) ; VAR_1 . METHOD_2 ( ) ; },['Move Invocation'],169
"public void METHOD_1 ( double VAR_1 , double VAR_2 ) { VAR_3 = 0.0 ; TYPE_1 . METHOD_2 ( ( ( VAR_3 ) * VAR_1 ) , ( ( - ( VAR_3 ) ) * VAR_2 ) , false ) ; }","public void METHOD_1 ( double VAR_1 , double VAR_2 ) { VAR_3 = 0.0 ; TYPE_1 . METHOD_2 ( ( ( VAR_3 ) * VAR_1 ) , ( ( VAR_3 ) * VAR_2 ) , false ) ; }","['Move FieldRead', 'Delete UnaryOperator']",170
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( this . VAR_2 ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( this . VAR_2 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",171
"private int METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } return TYPE_1 . METHOD_4 ( VAR_2 ) . getInt ( VAR_3 , VAR_4 ) ; }",private int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return']",172
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . assertTrue ( new TYPE_1 ( VAR_2 [ INT_1 ] ) . METHOD_2 ( ) . METHOD_3 ( ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { java.lang.System.out.println ( new TYPE_1 ( VAR_2 [ INT_1 ] ) . METHOD_2 ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",174
"TYPE_1 < TYPE_2 > METHOD_1 ( long VAR_1 , java.lang.String VAR_2 ) ;","TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_2 , long VAR_1 ) ;",['Move Parameter'],175
public java.lang.String METHOD_1 ( ) { return java.lang.String . METHOD_2 ( VAR_1 ) ; },public int METHOD_1 ( ) { return VAR_1 ; },"['Update TypeReference', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",177
"private static void METHOD_1 ( ) { if ( ! ( VAR_1 . get ( ) . isEmpty ( ) ) ) { VAR_2 = new TYPE_1 ( ) . METHOD_2 ( VAR_3 class , VAR_1 . getString ( STRING_1 ) ) ; } }","private static void METHOD_1 ( ) { if ( ( VAR_1 . getString ( STRING_1 ) ) != null ) { VAR_2 = new TYPE_1 ( ) . METHOD_2 ( VAR_3 class , VAR_1 . getString ( STRING_1 ) ) ; } }","['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Insert Literal', 'Insert TypeAccess', 'Delete Invocation', 'Delete UnaryOperator']",179
public void METHOD_1 ( ) { if ( ( this ) != null ) { TYPE_1 . METHOD_2 ( this ) ; VAR_1 . show ( ) ; } },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this ) ; VAR_1 . show ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete ThisAccess', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",180
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 VAR_2 ) { if ( VAR_2 != null ) { VAR_3 . info ( STRING_1 , VAR_4 . getName ( ) ) ; VAR_5 . METHOD_2 ( VAR_4 . getName ( ) ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , TYPE_3 VAR_2 ) { VAR_3 . info ( STRING_1 , VAR_4 . getName ( ) ) ; VAR_5 . METHOD_2 ( VAR_4 . getName ( ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",183
"public void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String ... VAR_2 ) { for ( final java.lang.String label : VAR_2 ) VAR_1 . METHOD_2 ( ) . METHOD_3 ( label , this . METHOD_2 ( ) ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String ... VAR_2 ) { for ( final java.lang.String label : VAR_2 ) this . METHOD_2 ( ) . METHOD_3 ( label , VAR_1 . METHOD_2 ( ) , null ) ; }","['Move VariableRead', 'Move Invocation', 'Insert Literal']",185
public java.lang.Object METHOD_1 ( ) { synchronized ( VAR_1 ) { METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_2 . isEmpty ( ) ) ; return VAR_2 . get ( 0 ) ; } },public java.lang.Object METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( VAR_2 . isEmpty ( ) ) { METHOD_2 ( ) ; } TYPE_1 . METHOD_3 ( VAR_2 . isEmpty ( ) ) ; return VAR_2 . get ( 0 ) ; } },"['Insert If', 'Insert Invocation', 'Insert Block', 'Insert TypeAccess', 'Move Invocation']",190
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( ( ! ( METHOD_3 ( ) ) ) && ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) { METHOD_5 ( ) ; } },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) { METHOD_5 ( ) ; } },"['Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",191
"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( INT_1 , 1 , 0 ) ; VAR_2 . METHOD_2 ( 0 , 0 ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) ; }","public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( INT_1 , 1 , 0 ) ; VAR_2 . METHOD_2 ( 0 , 0 ) . METHOD_3 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_4 ( ) ; }",['Move Invocation'],192
public void add ( TYPE_1 c ) { if ( ! ( VAR_1 . contains ( c ) ) ) { VAR_1 . add ( c ) ; } METHOD_1 ( ) ; },public void add ( TYPE_1 c ) { VAR_1 . add ( c ) ; METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",193
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { METHOD_2 ( ) ; } else { if ( ( VAR_2 ) != null ) { METHOD_3 ( ) ; } else { METHOD_2 ( ) ; } } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { METHOD_2 ( ) ; } else { METHOD_2 ( ) ; } },"['Move If', 'Move FieldRead', 'Move Block', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",194
public TYPE_1 METHOD_1 ( final java.lang.String fileName ) { assert null != ( this . path ) ; return TYPE_1 . METHOD_1 ( ( ( ( this . VAR_1 . toString ( ) ) + STRING_1 ) + fileName ) ) ; },public TYPE_1 METHOD_1 ( final java.lang.String fileName ) { assert null != ( this . path ) ; return TYPE_1 . METHOD_1 ( ( ( this . VAR_1 . toString ( ) ) + fileName ) ) ; },"['Move BinaryOperator', 'Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",195
public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { getActivity ( ) . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { getActivity ( ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",197
protected void METHOD_1 ( TYPE_1 result ) { if ( result != null ) { VAR_1 . METHOD_2 ( result ) ; } else { VAR_1 . METHOD_3 ( VAR_2 ) ; } },protected void METHOD_1 ( TYPE_1 result ) { VAR_1 . METHOD_2 ( result ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",198
public void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",199
public java.lang.Boolean METHOD_1 ( ) { return ( ( VAR_1 ) && ( ( VAR_2 ) != null ) ) && ( VAR_2 . METHOD_1 ( ) ) ; },public java.lang.Boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",200
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { java.lang.String VAR_3 = METHOD_2 ( STRING_1 ) ; if ( VAR_3 != null ) METHOD_1 ( VAR_4 . split ( STRING_2 ) , VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { java.lang.String VAR_3 = METHOD_2 ( STRING_1 ) ; METHOD_1 ( VAR_4 . split ( STRING_2 ) , VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",201
"public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { remove ( VAR_1 ) ; } TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_1 = new TYPE_2 ( VAR_2 ) ; add ( VAR_1 , VAR_4 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { remove ( VAR_1 ) ; } VAR_1 = new TYPE_2 ( VAR_2 ) ; add ( VAR_1 , VAR_4 ) ; }",['Move If'],202
"private boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return ( VAR_3 ) || ( ( ( ( 0 <= VAR_1 ) && ( VAR_1 < INT_1 ) ) && ( 0 <= VAR_2 ) ) && ( VAR_2 < INT_1 ) ) ; }","private boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return ( ( ( 0 <= VAR_1 ) && ( VAR_1 < INT_1 ) ) && ( 0 <= VAR_2 ) ) && ( VAR_2 < INT_1 ) ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",203
public java.lang.String toString ( ) { return ( ( java.lang.Integer.toString ( ( ( VAR_1 ) / INT_1 ) ) ) + STRING_1 ) + ( VAR_2 ) ; },public java.lang.String toString ( ) { return java.lang.Integer.toString ( ( ( VAR_1 ) / INT_1 ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",204
private boolean METHOD_1 ( java.lang.String path ) { return ( ( VAR_1 ) != null ) && ( VAR_2 . contains ( path ) ) ; },private boolean METHOD_1 ( java.lang.String path ) { return VAR_2 . contains ( path ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",205
public void METHOD_1 ( ) throws java.lang.Throwable { try { VAR_1 . METHOD_1 ( ) ; } finally { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } } },public void METHOD_1 ( ) throws java.lang.Throwable { try { VAR_1 . METHOD_1 ( ) ; } finally { VAR_2 . METHOD_2 ( ) ; } },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",206
public static int METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = java.lang.Integer.parseInt ( VAR_3 . trim ( ) ) ; return VAR_2 ; },public static int METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = java.lang.Integer.parseInt ( VAR_1 ) ; return VAR_2 ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",207
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { new TYPE_2 ( java.lang.Integer.toString ( VAR_3 ) ) . execute ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { }","['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Invocation']",208
"public void METHOD_1 ( java.lang.String type , TYPE_1 message ) { switch ( type ) { case STRING_1 : METHOD_2 ( message ) ; default : java.lang.System.err.println ( ( STRING_2 + ( TYPE_2 . METHOD_3 ( message . METHOD_4 ( ) ) ) ) ) ; } }","public void METHOD_1 ( java.lang.String type , TYPE_1 message ) { switch ( type ) { case STRING_1 : METHOD_2 ( message ) ; default : java.lang.System.err.println ( ( STRING_2 + ( message . METHOD_4 ( ) ) ) ) ; } }","['Update Invocation', 'Move Invocation', 'Move FieldRead', 'Move BinaryOperator', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",209
public void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ( listener ) != null ) { listener . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete If']",210
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( ! ( VAR_3 . getText ( ) . equals ( STRING_1 ) ) ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { METHOD_3 ( ) ; } },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",211
boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) || ( new java.lang.Double ( VAR_1 ) . equals ( VAR_2 ) ) ; },boolean METHOD_1 ( ) { return new java.lang.Double ( VAR_1 ) . equals ( VAR_2 ) ; },"['Move Invocation', 'Delete Invocation', 'Delete BinaryOperator']",212
public java.lang.String METHOD_1 ( ) { return ( ( ( METHOD_2 ( VAR_1 ) ) + ( METHOD_2 ( VAR_2 ) ) ) + ( METHOD_2 ( VAR_3 ) ) ) + ( METHOD_3 ( ) ) ; },public java.lang.String METHOD_1 ( ) { return ( ( METHOD_2 ( VAR_1 ) ) + ( METHOD_2 ( VAR_2 ) ) ) + ( METHOD_2 ( VAR_3 ) ) ; },"['Move BinaryOperator', 'Delete Invocation', 'Delete BinaryOperator']",213
"public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { if ( ( ( VAR_4 ) == 1 ) && ( VAR_1 > INT_1 ) ) { VAR_5 . METHOD_2 ( ) ; new TYPE_1 ( ) . execute ( VAR_1 ) ; } }","public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { if ( ( VAR_4 ) == 1 ) { VAR_5 . METHOD_2 ( ) ; new TYPE_1 ( ) . execute ( VAR_1 ) ; } }","['Move BinaryOperator', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",214
public boolean METHOD_1 ( TYPE_1 item ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_1 ( item ) ) ) { return true ; } return super . METHOD_1 ( item ) ; },public boolean METHOD_1 ( TYPE_1 item ) { if ( VAR_1 . METHOD_1 ( item ) ) { return true ; } return super . METHOD_1 ( item ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",216
"public TYPE_1 METHOD_1 ( ) { return ( ( content ) == null ) || ( VAR_1 . trim ( ) . equals ( STRING_1 ) ) ? null : TYPE_1 . METHOD_2 ( content , METHOD_3 ( ) ) ; }","public TYPE_1 METHOD_1 ( ) { return ( content ) == null ? null : TYPE_1 . METHOD_2 ( content , METHOD_3 ( ) ) ; }","['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",218
public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( STRING_1 ) ; },public java.lang.String METHOD_1 ( ) { return STRING_1 ; },"['Update TypeReference', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",221
public void METHOD_1 ( ) { this . METHOD_2 ( 0.0F ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) ; },public void METHOD_1 ( ) { this . METHOD_2 ( 0.0F ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",222
public void METHOD_1 ( TYPE_1 node ) throws TYPE_2 { if ( TYPE_3 . METHOD_2 ( node ) ) { node . METHOD_3 ( TYPE_4 . METHOD_4 ( node ) ) ; } super . METHOD_1 ( node ) ; },public void METHOD_1 ( TYPE_1 node ) throws TYPE_2 { node . METHOD_3 ( TYPE_4 . METHOD_4 ( node ) ) ; super . METHOD_1 ( node ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",223
"public java.awt.Color [ ] METHOD_1 ( ) { return new java.awt.Color [ ] { VAR_1 , VAR_2 } ; }","public java.awt.Color [ ] METHOD_1 ( ) { return new java.awt.Color [ ] { VAR_2 , VAR_1 } ; }",['Move FieldRead'],224
public void METHOD_1 ( java.lang.String filename ) { if ( ! ( this . VAR_1 . METHOD_2 ( filename ) ) ) { METHOD_3 ( filename ) ; METHOD_4 ( filename ) ; METHOD_5 ( VAR_2 ) ; } },public void METHOD_1 ( java.lang.String filename ) { METHOD_3 ( filename ) ; METHOD_4 ( filename ) ; METHOD_5 ( VAR_2 ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",225
public java.lang.String METHOD_1 ( ) { return ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) . getValue ( ) ; },public java.lang.String METHOD_1 ( ) { return ( ( java.lang.String ) ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) ; },"['Move Invocation', 'Update TypeReference', 'Delete Invocation']",226
public void handle ( TYPE_1 event ) { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_1 ( ) ; init ( ) ; },public void handle ( TYPE_1 event ) { VAR_1 . METHOD_1 ( ) ; init ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",227
public void setValue ( final java.lang.Object value ) throws java.lang.Exception { throw new TYPE_1 ( ( STRING_1 + ( name ) ) ) ; },public void setValue ( final java.lang.Object value ) throws java.lang.Exception { throw new TYPE_1 ( ( STRING_1 + ( getName ( ) ) ) ) ; },"['Insert Invocation', 'Delete FieldRead']",228
"public java.lang.Object METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { return ( ( java.lang.String ) ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) + ( ( java.lang.String ) ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) ; }","public java.lang.Object METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { return ( TYPE_1 . METHOD_2 ( VAR_1 ) . toString ( ) ) + ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ; }","['Insert Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete TypeReference']",229
void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = VAR_2 ; VAR_3 . METHOD_2 ( VAR_2 ) ; } },void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_1 = VAR_2 ; } },['Move Assignment'],230
"public < TYPE_1 > boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_1 > VAR_2 ) { return ( VAR_1 != null ) && ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; }","public < TYPE_1 > boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_1 > VAR_2 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",231
"public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = null ; METHOD_2 ( true ) ; if ( ! VAR_1 ) TYPE_1 . METHOD_3 ( this , STRING_1 , VAR_3 ) . show ( ) ; }","public void METHOD_1 ( ) { VAR_2 = null ; METHOD_2 ( true ) ; TYPE_1 . METHOD_3 ( this , STRING_1 , VAR_3 ) . show ( ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",233
"public boolean startsWith ( java.lang.String VAR_1 ) { return startsWith ( VAR_2 , VAR_1 , 0 ) ; }",public boolean startsWith ( java.lang.String VAR_1 ) { return false ; },"['Insert Literal', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",234
"public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . replace ( STRING_1 , STRING_2 ) . replace ( STRING_3 , STRING_4 ) . replace ( STRING_5 , STRING_6 ) . replace ( STRING_7 , STRING_8 ) . replace ( STRING_9 , STRING_8 ) ; }","public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . replace ( STRING_1 , STRING_2 ) . replace ( STRING_3 , STRING_4 ) . replace ( STRING_5 , STRING_6 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",235
"protected final java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String name = VAR_1 ; if ( VAR_2 . contains ( VAR_3 ) ) { name = VAR_2 . substring ( 0 , VAR_1 . METHOD_2 ( VAR_3 ) ) ; } return name ; }","protected final java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String name = VAR_1 ; if ( ( VAR_1 . METHOD_2 ( VAR_3 ) ) >= 0 ) { name = VAR_2 . substring ( 0 , VAR_1 . METHOD_2 ( VAR_3 ) ) ; } return name ; }","['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Insert Literal', 'Insert VariableRead', 'Delete TypeAccess']",236
"public java.util.Collection < TYPE_1 > METHOD_1 ( final java.lang.Long VAR_1 ) throws TYPE_2 { try { return VAR_2 . get ( VAR_1 ) . values ( ) ; } catch ( TYPE_3 VAR_3 ) { throw new TYPE_2 ( null , VAR_3 . METHOD_2 ( ) ) ; } }","public java.util.List < TYPE_1 > METHOD_1 ( final java.lang.Long VAR_1 ) throws TYPE_2 { try { return VAR_2 . get ( VAR_1 ) ; } catch ( TYPE_3 VAR_3 ) { throw new TYPE_2 ( null , VAR_3 . METHOD_2 ( ) ) ; } }","['Update TypeReference', 'Move Invocation', 'Delete Invocation']",237
public boolean METHOD_1 ( ) { if ( ( VAR_1 . get ( ) ) == 0 ) { return VAR_2 ; } else { return VAR_3 . get ( ) ; } },public boolean METHOD_1 ( ) { return VAR_3 . get ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",238
"public void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ( VAR_2 * INT_1 ) <= ( VAR_3 . size ( ) ) ) { METHOD_2 ( VAR_1 ) ; } }","public void METHOD_1 ( int VAR_1 , int VAR_2 ) { METHOD_2 ( VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",240
"public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { final TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; return TYPE_3 . METHOD_4 ( VAR_3 , VAR_1 ) . METHOD_5 ( VAR_2 ) . toString ( ) ; }","public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { final TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; return TYPE_3 . METHOD_4 ( VAR_3 , VAR_1 ) . METHOD_5 ( VAR_2 ) ; }","['Move Invocation', 'Delete Invocation']",241
public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete UnaryOperator']",242
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String text ) { if ( VAR_2 ) { return TYPE_2 . METHOD_2 ( VAR_1 , TYPE_2 . METHOD_3 ( VAR_1 , text ) ) ; } else { return text ; } }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String text ) { if ( VAR_2 ) { return TYPE_2 . METHOD_2 ( VAR_1 , text ) ; } else { return text ; } }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",244
static java.lang.String toString ( java.lang.Exception VAR_1 ) { TYPE_1 . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( new TYPE_3 ( VAR_2 ) ) ; return VAR_3 . toString ( ) ; },static java.lang.String toString ( java.lang.Exception VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_1 . METHOD_1 ( VAR_1 ) . METHOD_2 ( new TYPE_3 ( VAR_2 ) ) ; return VAR_3 . toString ( ) ; },"['Move Invocation', 'Delete VariableRead']",245
public void METHOD_1 ( TYPE_1 VAR_1 ) { float VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ( ( ( ( 1 - VAR_2 ) * VAR_5 ) + VAR_6 ) - INT_1 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { float VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ( ( ( 1 - VAR_2 ) * VAR_5 ) + VAR_6 ) ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",247
"public void METHOD_1 ( TYPE_1 result ) { VAR_1 . assertEquals ( 1 , ( ( TYPE_2 ) ( VAR_2 . get ( STRING_1 ) ) ) . size ( ) ) ; }","public void METHOD_1 ( TYPE_1 result ) { VAR_1 . assertEquals ( 1 , ( ( long [ ] ) ( VAR_2 . get ( STRING_1 ) ) ) . length ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move Literal', 'Insert FieldRead', 'Move Invocation', 'Update TypeReference', 'Delete Invocation']",248
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_3 = false ; } else { VAR_3 = true ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_3 = true ; } else { VAR_3 = false ; } },"['Move Assignment', 'Move Assignment']",249
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 msg ) throws java.lang.Exception { if ( ! ( TYPE_3 . METHOD_2 ( VAR_2 ) ) ) { TYPE_3 . METHOD_3 ( VAR_2 , TYPE_4 . METHOD_4 ( VAR_3 ) ) ; } }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 msg ) throws java.lang.Exception { if ( ! ( TYPE_3 . METHOD_2 ( VAR_2 ) ) ) { TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ; } }","['Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",250
"public java.util.HashMap < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }","public java.util.HashMap < java.lang.String , java.lang.String > METHOD_1 ( ) { return METHOD_1 ( ) ; }","['Insert Invocation', 'Delete FieldRead']",251
public java.lang.String METHOD_1 ( ) { this . VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; return STRING_1 ; },public java.lang.String METHOD_1 ( java.lang.String VAR_3 ) { this . VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; return STRING_1 ; },"['Insert Parameter', 'Insert TypeReference', 'Insert VariableRead', 'Delete TypeAccess']",252
public boolean METHOD_1 ( ) throws TYPE_1 { ( position ) ++ ; if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; return true ; } return false ; },public boolean METHOD_1 ( ) throws TYPE_1 { if ( METHOD_2 ( ) ) { ( position ) ++ ; METHOD_3 ( ) ; return true ; } return false ; },['Move UnaryOperator'],253
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { VAR_3 . setText ( TYPE_2 . METHOD_2 ( ( ( TYPE_3 ) ( VAR_3 . getContext ( ) ) ) ) ) ; } VAR_2 = ! ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { VAR_3 . setText ( TYPE_2 . METHOD_2 ( ( ( TYPE_3 ) ( VAR_3 . getContext ( ) ) ) ) ) ; } VAR_2 = ! ( VAR_2 ) ; },"['Move FieldRead', 'Delete UnaryOperator']",255
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ! ( VAR_2 . isEmpty ( VAR_1 ) ) ) && ( ! ( VAR_3 . equals ( STRING_1 ) ) ) ) { VAR_4 = VAR_1 ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( VAR_2 . isEmpty ( VAR_1 ) ) ) { VAR_4 = VAR_1 ; } },"['Move UnaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",257
public void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ( ( ( VAR_1 ) != true ) && ( ( VAR_2 ) != true ) ) && ( ( VAR_3 ) != true ) ) { ( VAR_4 . time ) ++ ; } },public void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ( ( VAR_1 ) != true ) && ( ( VAR_2 ) != true ) ) { ( VAR_4 . time ) ++ ; } },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",258
"void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 , STRING_1 , null ) ; VAR_1 . METHOD_4 ( true ) ; }","void METHOD_1 ( ) { TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 , STRING_1 , null ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_4 ( true ) ; }",['Move Invocation'],259
public java.lang.Integer METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; int VAR_2 = METHOD_3 ( ) ; return ( ( ( getType ( ) . METHOD_1 ( ) ) * INT_1 ) + ( VAR_1 * INT_2 ) ) + VAR_2 ; },public java.lang.Integer METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; int VAR_2 = METHOD_3 ( ) ; return ( ( ( type . METHOD_1 ( ) ) * INT_1 ) + ( VAR_1 * INT_2 ) ) + VAR_2 ; },"['Insert FieldRead', 'Delete Invocation']",260
public final TYPE_1 < TYPE_2 > get ( int key ) { return METHOD_1 ( TYPE_3 . METHOD_2 ( key ) ) ; },public final TYPE_1 < TYPE_2 > get ( int key ) { return METHOD_1 ( key ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",261
public boolean METHOD_1 ( ) { return ( this . VAR_1 ) || ( java.lang.Thread . METHOD_2 ( ) . METHOD_3 ( ) ) ; },public boolean METHOD_1 ( ) { return this . VAR_1 ; },"['Move FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator']",262
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( VAR_3 ) ; METHOD_2 ( ) ; },['Move Invocation'],263
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( FLOAT_1 ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( FLOAT_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",264
public void METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) METHOD_2 ( ( -- ( VAR_1 ) ) ) ; },public void METHOD_1 ( ) { METHOD_2 ( ( -- ( VAR_1 ) ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",266
private void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; },private void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Delete Invocation']",268
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { VAR_2 . METHOD_2 ( getActivity ( ) ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( ( VAR_2 ) == null ) ) { VAR_2 . METHOD_2 ( getActivity ( ) ) ; } },"['Insert UnaryOperator', 'Insert BinaryOperator', 'Insert FieldRead', 'Insert Literal', 'Delete FieldRead']",269
public boolean METHOD_1 ( ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) != 0 ) && ( ( VAR_2 . METHOD_3 ( ) ) == true ) ) { return true ; } else { return false ; } },public boolean METHOD_1 ( ) { VAR_2 . METHOD_3 ( ) ; return false ; },"['Move Invocation', 'Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",270
public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == 0 ) { return STRING_1 ; } return STRING_2 ; },public java.lang.String METHOD_1 ( ) { return STRING_2 ; },"['Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",272
public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) METHOD_3 ( ) ; else if ( ! ( METHOD_4 ( ) ) ) METHOD_5 ( ) ; METHOD_6 ( ) ; return METHOD_7 ( ) ; },public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) METHOD_3 ( ) ; else if ( ! ( METHOD_4 ( ) ) ) METHOD_5 ( ) ; else METHOD_6 ( ) ; return METHOD_7 ( ) ; },"['Insert Block', 'Move Invocation']",273
public double METHOD_1 ( ) { double VAR_1 = ( ( ( double ) ( VAR_2 ) ) / INT_1 ) / ( ( double ) ( length ) ) ; return VAR_1 ; },public double METHOD_1 ( ) { double VAR_1 = ( ( double ) ( VAR_2 ) ) / ( ( double ) ( length ) ) ; return VAR_1 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",274
public java.lang.String toString ( ) { return ( ( ( ( time ) + STRING_1 ) + ( VAR_1 . id ) ) + STRING_1 ) + ( VAR_2 . id ) ; },public java.lang.String toString ( ) { return ( ( ( ( ( ( time ) + STRING_1 ) + ( type ) ) + STRING_1 ) + ( VAR_1 . id ) ) + STRING_1 ) + ( VAR_2 . id ) ; },"['Insert BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Move FieldRead', 'Insert BinaryOperator', 'Move FieldRead', 'Move BinaryOperator', 'Insert FieldRead', 'Insert FieldRead']",276
public java.lang.Integer METHOD_1 ( ) { return VAR_1 ; },public int METHOD_1 ( ) { return VAR_1 ; },['Update TypeReference'],277
protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == VAR_1 ) VAR_2 = null ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = null ; },"['Move Assignment', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",279
"public TYPE_1 METHOD_1 ( int VAR_1 ) { return new TYPE_2 ( VAR_2 , VAR_3 , VAR_1 , VAR_4 ) ; }","public TYPE_1 METHOD_1 ( int VAR_1 ) { return new TYPE_2 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ; }",['Move FieldRead'],280
protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( false ) ; super . METHOD_1 ( ) ; },protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( false ) ; },['Move Invocation'],281
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) VAR_2 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",283
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ; METHOD_5 ( STRING_3 ) . to ( STRING_4 ) . to ( STRING_5 ) ; },public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) . METHOD_4 ( STRING_2 ) ; METHOD_5 ( STRING_3 ) . to ( STRING_4 ) . to ( STRING_5 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",284
"public static java.lang.String METHOD_1 ( java.lang.String str , java.lang.Object ... args ) { if ( ( args == null ) || ( ( args.length ) == 0 ) ) { return str ; } else { return java.lang.String.format ( str , args ) ; } }","public static java.lang.String METHOD_1 ( java.lang.String str , java.lang.Object ... args ) { if ( args != null ) { return java.lang.String.format ( str , args ) ; } else { return str ; } }","['Update BinaryOperator', 'Move BinaryOperator', 'Move Return', 'Move Return', 'Delete VariableRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",285
"TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_4 VAR_3 , TYPE_4 VAR_4 , TYPE_4 VAR_5 ) ;","TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_4 VAR_2 , TYPE_4 VAR_3 , TYPE_4 VAR_4 , TYPE_4 VAR_5 , TYPE_3 VAR_1 ) ;",['Move Parameter'],286
public void METHOD_1 ( java.lang.Throwable VAR_1 ) { if ( VAR_2 == 1 ) { VAR_3 . METHOD_2 ( ) ; } },public void METHOD_1 ( java.lang.Throwable VAR_1 ) { VAR_3 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",287
public boolean METHOD_1 ( ) { return super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",289
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) < INT_1 ) { VAR_2 = INT_1 ; } VAR_3 [ INT_2 ] = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) >= INT_1 ) { VAR_3 [ INT_2 ] = VAR_1 ; } if ( ( VAR_2 ) < INT_1 ) { VAR_2 = INT_1 ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert FieldRead', 'Move Assignment']",290
public void METHOD_1 ( ) { if ( ( VAR_1 != null ) && ( ( VAR_2 . data ) != null ) ) { VAR_3 . METHOD_2 ( VAR_4 . list ) ; if ( VAR_5 == 1 ) { VAR_3 . METHOD_3 ( ) ; } } },public void METHOD_1 ( ) { if ( ( VAR_1 != null ) && ( ( VAR_2 . data ) != null ) ) { VAR_3 . METHOD_2 ( VAR_4 . list ) ; VAR_3 . METHOD_3 ( ) ; } },"['Move Block', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete If', 'Delete Block']",291
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 ) { TYPE_3 . METHOD_3 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == false ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; } else { TYPE_3 . METHOD_3 ( VAR_1 ) ; } },"['Insert BinaryOperator', 'Insert Block', 'Move FieldRead', 'Insert Literal', 'Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Invocation']",292
public void METHOD_1 ( int offset ) { VAR_1 = offset ; if ( ( VAR_2 ) != null ) { METHOD_2 ( ) ; } },public void METHOD_1 ( int offset ) { VAR_1 = offset ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",293
public java.lang.String METHOD_1 ( ) { return java.lang.Integer.toString ( VAR_1 . METHOD_1 ( ) ) ; },public java.lang.String METHOD_1 ( ) { return new java.lang.Integer ( VAR_1 . METHOD_1 ( ) ) . toString ( ) ; },"['Insert ConstructorCall', 'Move Invocation', 'Delete TypeAccess']",294
"private double METHOD_1 ( double VAR_1 , double VAR_2 , double x ) { if ( x < VAR_1 ) return 0.0 ; else if ( x > VAR_2 ) return 1.0 ; else return ( x - VAR_1 ) / ( VAR_1 - VAR_2 ) ; }","private double METHOD_1 ( double VAR_1 , double VAR_2 , double x ) { if ( x < VAR_2 ) return 1.0 ; else if ( x < VAR_1 ) return ( VAR_1 - x ) / ( VAR_1 - VAR_2 ) ; else return 0.0 ; }","['Move If', 'Update BinaryOperator', 'Move If', 'Move Return', 'Move Return', 'Move VariableRead']",295
public final TYPE_1 < TYPE_2 > get ( java.lang.String key ) { return METHOD_1 ( TYPE_3 . METHOD_2 ( key ) ) ; },public final TYPE_1 < TYPE_2 > get ( java.lang.String key ) { return METHOD_1 ( key ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",296
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) { VAR_2 . add ( VAR_1 ) ; return true ; } return false ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) { VAR_2 . add ( VAR_1 ) ; return true ; } else return false ; },"['Insert Block', 'Move Return']",297
public final boolean METHOD_1 ( ) { return ( ( ( VAR_1 ) >= ( VAR_2 ) ) && ( METHOD_2 ( ) ) ) && ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; },public final boolean METHOD_1 ( ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { return ( METHOD_2 ( ) ) && ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; } return false ; },"['Insert If', 'Insert Return', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Move Return', 'Move BinaryOperator', 'Move Invocation', 'Delete BinaryOperator']",298
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_1 = VAR_1 ; if ( ( this . VAR_2 ) != null ) { return this . VAR_2 . METHOD_1 ( VAR_1 ) ; } else { return null ; } },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_1 = VAR_1 ; return this . VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Return', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",299
public void show ( ) { VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; if ( VAR_3 ) VAR_4 . METHOD_3 ( ) ; },public void show ( ) { VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",300
public void METHOD_1 ( int VAR_1 ) { final TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . remove ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; } },public void METHOD_1 ( int VAR_1 ) { final TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { METHOD_3 ( VAR_2 ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 . remove ( VAR_1 ) ; } },['Move Invocation'],302
private int METHOD_1 ( int count ) throws TYPE_1 { VAR_1 += count ; return METHOD_2 ( VAR_1 ) ; },private void METHOD_1 ( int count ) throws TYPE_1 { VAR_1 += count ; METHOD_2 ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",303
public java.lang.Double METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . getConfig ( ) . METHOD_1 ( VAR_1 ) ; },public java.lang.Double METHOD_1 ( java.lang.String VAR_1 ) { return getConfig ( ) . METHOD_1 ( VAR_1 ) ; },['Update TypeAccess'],304
protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( java.lang.String . METHOD_3 ( VAR_2 . getValue ( ) ) ) ) { return false ; } return true ; },protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return true ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",305
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_2 == null ) { METHOD_2 ( ) ; } if ( ( VAR_3 ) != null ) { METHOD_3 ( VAR_3 , false ) ; } VAR_4 . METHOD_4 ( METHOD_5 ( ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( ) ; if ( ( VAR_3 ) != null ) { METHOD_3 ( VAR_3 , false ) ; } VAR_4 . METHOD_4 ( METHOD_5 ( ) ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",306
"public boolean METHOD_1 ( TYPE_1 key , TYPE_1 VAR_1 ) { return this . VAR_2 . METHOD_1 ( key , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 key , TYPE_1 VAR_1 ) { this . VAR_2 . METHOD_1 ( key , VAR_1 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",307
"private boolean METHOD_1 ( ) throws java.io.IOException , TYPE_1 { boolean VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { ( VAR_3 ) ++ ; VAR_4 = METHOD_3 ( VAR_2 ) . METHOD_4 ( VAR_2 ) ; } return VAR_1 ; }","private boolean METHOD_1 ( ) throws java.io.IOException , TYPE_1 { boolean VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { ( VAR_3 ) ++ ; VAR_4 = METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; } return VAR_1 ; }","['Update Invocation', 'Move Invocation', 'Insert Invocation', 'Delete TypeAccess', 'Delete Invocation']",309
"public void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; if ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == false ) { METHOD_4 ( ) ; } }","public void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; METHOD_4 ( ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",310
public void METHOD_1 ( ) { VAR_1 = false ; VAR_2 = true ; if ( ( METHOD_2 ( ) ) > ( METHOD_3 ( ) . METHOD_4 ( ) ) ) METHOD_5 ( ( - INT_1 ) ) ; },public void METHOD_1 ( ) { VAR_1 = false ; VAR_2 = true ; METHOD_5 ( ( - INT_1 ) ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",311
public static boolean METHOD_1 ( java.lang.String string ) { if ( ( string == null ) && ( STRING_1 . equals ( string ) ) ) { return true ; } return false ; },public static boolean METHOD_1 ( java.lang.String string ) { if ( ( string == null ) && ( STRING_1 . equals ( string ) ) ) { return false ; } return true ; },"['Move Return', 'Move Return']",312
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 == VAR_2 ) || ( VAR_1 instanceof TYPE_2 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 == VAR_2 ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete BinaryOperator']",313
"public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( 0 , 0 , ( ( VAR_1 . METHOD_2 ( ) ) - 1 ) , ( ( VAR_1 . METHOD_3 ( ) ) - 1 ) ) ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( 0 , 0 , VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",315
public double METHOD_1 ( ) { double answer = ( java.lang.Math.abs ( VAR_1 . METHOD_2 ( ) ) ) + ( java.lang.Math.abs ( VAR_2 . METHOD_2 ( ) ) ) ; answer /= FLOAT_1 ; return answer ; },public double METHOD_1 ( ) { double answer = ( VAR_1 . METHOD_2 ( ) ) + ( VAR_2 . METHOD_2 ( ) ) ; answer /= FLOAT_1 ; return answer ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",316
public boolean METHOD_1 ( ) { if ( ( VAR_1 . c ) == null ) { return false ; } else { return VAR_2 . METHOD_1 ( ) ; } },public boolean METHOD_1 ( ) { return c . METHOD_1 ( ) ; },"['Insert Return', 'Insert Invocation', 'Insert FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",317
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( 0 , 0 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; },"['Delete Literal', 'Delete Literal', 'Delete Invocation']",318
public boolean METHOD_1 ( ) { return ( position ) < ( size ) ; },public boolean METHOD_1 ( ) { return ( position ) < ( ( size ) - 1 ) ; },"['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",319
public void METHOD_1 ( TYPE_1 error ) { if ( error . METHOD_2 ( ) . toString ( ) . equals ( VAR_1 ) ) { VAR_2 . METHOD_3 ( ) ; } else { VAR_2 . METHOD_4 ( STRING_1 ) ; } },public void METHOD_1 ( TYPE_1 error ) { if ( error . METHOD_2 ( ) . equals ( VAR_1 ) ) { VAR_2 . METHOD_3 ( ) ; } else { VAR_2 . METHOD_4 ( STRING_1 ) ; } },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",320
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.System.out.println ( STRING_1 ) ; if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_3 ) ) { METHOD_3 ( VAR_1 , VAR_2 ) ; } return false ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_3 ) ) { METHOD_3 ( VAR_1 , VAR_2 ) ; } return false ; }","['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",322
"public void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; if ( ( ( VAR_3 ) != null ) && ( VAR_4 ) ) { VAR_3 . METHOD_2 ( ) ; } super . METHOD_1 ( ) ; }","public void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) ; } super . METHOD_1 ( ) ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",323
"protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( super . METHOD_1 ( VAR_1 , VAR_2 ) ) { VAR_3 = VAR_4 ; METHOD_2 ( VAR_5 . METHOD_3 ( VAR_6 ) ) ; return true ; } return false ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 = VAR_4 ; super . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Update TypeReference', 'Move Assignment', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",324
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) { METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",325
public boolean METHOD_1 ( ) { if ( VAR_1 ) { return true ; } return false ; },public boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",328
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = VAR_1 ; if ( ( VAR_2 ) != null ) METHOD_2 ( STRING_1 ) ; else METHOD_2 ( STRING_2 ) ; METHOD_3 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = VAR_1 ; METHOD_2 ( STRING_1 ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",329
public java.util.LinkedList < TYPE_1 > METHOD_1 ( ) { return ( ( java.util.LinkedList < TYPE_1 > ) ( VAR_1 . METHOD_2 ( ) ) ) ; },public java.util.LinkedList < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },"['Insert FieldRead', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation']",331
"public java.util.Map < TYPE_1 , java.util.List < java.lang.String > > METHOD_1 ( ) { return VAR_1 ; }","public java.util.Map < TYPE_1 , java.util.List < java.lang.String > > METHOD_1 ( ) { return METHOD_1 ( ) ; }","['Insert Invocation', 'Delete FieldRead']",332
"private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( new TYPE_3 ( new java.lang.Object [ ] { VAR_1 } ) , true ) ; METHOD_3 ( VAR_1 , true ) ; METHOD_4 ( ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { METHOD_3 ( VAR_1 , true ) ; VAR_2 . METHOD_2 ( new TYPE_3 ( new java.lang.Object [ ] { VAR_1 } ) , true ) ; METHOD_4 ( ) ; }",['Move Invocation'],333
"public static void i ( java.lang.String VAR_1 , java.lang.Throwable t ) { if ( TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR_3 . i ( VAR_1 , TYPE_2 . METHOD_2 ( t ) ) ; }","public static void i ( java.lang.String VAR_1 , java.lang.Throwable t ) { VAR_3 . i ( VAR_1 , TYPE_2 . METHOD_2 ( t ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",334
protected boolean METHOD_1 ( ) { if ( VAR_1 ) { return ( VAR_2 . METHOD_1 ( ) ) && ( ! ( VAR_3 . isEmpty ( ) ) ) ; } else { return true ; } },protected boolean METHOD_1 ( ) { if ( VAR_1 ) { return ( VAR_2 . METHOD_1 ( ) ) && ( isEmpty ( VAR_2 ) ) ; } else { return true ; } },"['Insert Invocation', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator']",335
public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { METHOD_2 ( ) ; } VAR_3 . setState ( VAR_1 ) ; },public void METHOD_1 ( ) { VAR_3 . setState ( VAR_1 ) ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",336
public TYPE_1 METHOD_1 ( TYPE_1 msg ) throws TYPE_2 { if ( msg instanceof TYPE_3 ) { METHOD_2 ( ( ( TYPE_3 ) ( msg ) ) ) ; } return msg ; },public TYPE_1 METHOD_1 ( TYPE_1 msg ) throws TYPE_2 { return msg ; },"['Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",338
public void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",341
"public static < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String name ) { TYPE_3 . METHOD_1 ( VAR_1 , name ) ; return VAR_1 ; }","public static < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String name ) { return TYPE_3 . METHOD_1 ( VAR_1 , name ) ; }","['Move Invocation', 'Delete VariableRead']",342
void METHOD_1 ( ) { try { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } } catch ( TYPE_1 VAR_2 ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; } },void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; } },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",343
"public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = STRING_1 ; VAR_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; if ( VAR_5 ) TYPE_1 . METHOD_4 ( VAR_5 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = STRING_1 ; VAR_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; if ( VAR_5 ) TYPE_1 . METHOD_4 ( true ) ; }","['Insert Literal', 'Delete TypeAccess']",344
public boolean METHOD_1 ( ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( ) ; } else { return false ; } },public boolean METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",346
public java.lang.String METHOD_1 ( java.lang.String type ) { return this . type = type ; },public void METHOD_1 ( java.lang.String type ) { this . type = type ; },"['Update TypeReference', 'Move Assignment', 'Delete Return']",348
public void METHOD_1 ( ) { METHOD_1 ( null ) ; },public boolean METHOD_1 ( ) { return METHOD_1 ( null ) ; },"['Update TypeReference', 'Insert Return', 'Move Invocation']",349
public java.lang.Boolean METHOD_1 ( ) { return ( ( VAR_1 . get ( STRING_1 ) ) != null ) && ( VAR_1 . get ( STRING_1 ) . equals ( STRING_2 ) ) ? true : false ; },public java.lang.Boolean METHOD_1 ( ) { return VAR_1 . get ( STRING_1 ) . equals ( STRING_2 ) ? true : false ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",350
public void METHOD_1 ( float VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( ) ; VAR_3 . METHOD_1 ( ) ; VAR_4 . METHOD_1 ( ) ; if ( VAR_5 ) VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( float VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_1 ( ) ; VAR_2 . METHOD_1 ( ) ; VAR_4 . METHOD_1 ( ) ; if ( VAR_5 ) VAR_2 . METHOD_2 ( ) ; },['Move Invocation'],351
public void METHOD_1 ( float VAR_1 ) { this . VAR_1 = VAR_1 ; },public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; },['Update TypeReference'],352
"public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_3 , STRING_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_4 ( VAR_3 , STRING_1 ) ; METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }",['Move Invocation'],353
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( METHOD_3 ( ) , new TYPE_1 ( VAR_2 . METHOD_4 ( ) ) ) ; VAR_3 . METHOD_5 ( this ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( METHOD_3 ( ) , new TYPE_1 ( VAR_2 . METHOD_4 ( ) ) ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_5 ( this ) ; } }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Invocation']",354
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return java.lang.Long . METHOD_2 ( METHOD_3 ( VAR_1 ) ) . compareTo ( METHOD_3 ( VAR_2 ) ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return java.lang.Long . METHOD_1 ( METHOD_3 ( VAR_1 ) , METHOD_3 ( VAR_2 ) ) ; }","['Update Invocation', 'Move Invocation', 'Move Invocation', 'Delete Invocation']",355
public int METHOD_1 ( ) { return ( ( this . METHOD_2 ( ) ) - ( this . METHOD_3 ( ) ) ) + 1 ; },public int METHOD_1 ( ) { return ( this . METHOD_2 ( ) ) - ( this . METHOD_3 ( ) ) ; },"['Move BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",356
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( STRING_1 + ( METHOD_1 ( ) ) ) + STRING_2 ) + ( name ) ) + STRING_3 ) + ( VAR_1 ) ) + STRING_4 ) + ( VAR_2 ) ) + STRING_5 ; },public java.lang.String toString ( ) { return ( ( ( ( ( name ) + STRING_3 ) + ( VAR_1 ) ) + STRING_4 ) + ( VAR_2 ) ) + STRING_5 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",358
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . append ( STRING_1 ) ; VAR_3 . setText ( VAR_2 . toString ( ) ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { if ( true ) { VAR_2 . append ( STRING_1 ) ; VAR_3 . setText ( VAR_2 . toString ( ) ) ; } },"['Insert If', 'Insert Literal', 'Insert Block', 'Move Invocation', 'Move Invocation']",361
"private void METHOD_1 ( ) { assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_2 ( ) ) == null ) ) ; }","private void METHOD_1 ( ) { assertTrue ( STRING_1 , ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == null ) ) ) ; }","['Insert BinaryOperator', 'Insert BinaryOperator', 'Move BinaryOperator', 'Insert FieldRead', 'Insert Literal']",362
public double METHOD_1 ( double VAR_1 ) { return ( ( ( min ) * ( FLOAT_1 - VAR_1 ) ) + ( ( VAR_2 ) * ( VAR_1 - FLOAT_2 ) ) ) / FLOAT_3 ; },public double METHOD_1 ( double VAR_1 ) { return ( min ) + ( ( ( VAR_1 * ( ( VAR_2 ) - ( min ) ) ) - FLOAT_2 ) / FLOAT_3 ) ; },"['Update BinaryOperator', 'Insert FieldRead', 'Update BinaryOperator', 'Update BinaryOperator', 'Move FieldRead', 'Move BinaryOperator', 'Move FieldRead', 'Move VariableRead', 'Move FieldRead', 'Move FieldRead', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator']",363
"public void METHOD_1 ( ) { long n = 1 ; long VAR_1 = 0 ; long result = TYPE_1 . METHOD_2 ( n ) ; assertEquals ( VAR_1 , result ) ; }","public void METHOD_1 ( ) { int n = 1 ; int VAR_1 = 0 ; int result = TYPE_1 . METHOD_2 ( n ) ; assertEquals ( VAR_1 , result ) ; }","['Update TypeReference', 'Update TypeReference', 'Update TypeReference']",364
public void METHOD_1 ( TYPE_1 item ) { if ( ( item . METHOD_2 ( ) ) > 1 ) { item . METHOD_3 ( ) ; } else { VAR_1 . remove ( item ) ; } },public void METHOD_1 ( TYPE_1 item ) { item . METHOD_3 ( ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",367
public boolean METHOD_1 ( TYPE_1 element ) { return element == ( VAR_1 . get ( 0 ) ) ; },public boolean METHOD_1 ( TYPE_1 element ) { if ( ( VAR_1 . get ( 0 ) ) == element ) { return true ; } else { return false ; } },"['Insert If', 'Move BinaryOperator', 'Move VariableRead', 'Insert Block', 'Insert Block', 'Insert Return', 'Insert Return', 'Insert Literal', 'Insert Literal', 'Delete Return']",369
"public void info ( java.lang.Object msg , java.lang.Throwable t ) { if ( VAR_1 . METHOD_1 ( TYPE_1 ) ) { java.lang.System.out.println ( ( STRING_1 + ( METHOD_2 ( msg ) ) ) ) ; t . METHOD_3 ( ) ; } }","public void info ( java.lang.Object msg , java.lang.Throwable t ) { if ( TYPE_1 . METHOD_1 ( VAR_1 ) ) { java.lang.System.out.println ( ( STRING_1 + ( METHOD_2 ( msg ) ) ) ) ; t . METHOD_3 ( ) ; } }",['Move TypeAccess'],371
public java.lang.String getText ( java.lang.Object element ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( element ) ) ; if ( ( VAR_1 . METHOD_1 ( ) ) != null ) return VAR_2 . format ( VAR_1 . METHOD_1 ( ) ) ; else return STRING_1 ; },public java.lang.String getText ( java.lang.Object element ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( element ) ) ; return VAR_2 . format ( VAR_1 . METHOD_1 ( ) ) ; },"['Move Return', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",372
public long METHOD_1 ( ) { return ( VAR_1 . getTime ( ) ) / INT_1 ; },public long METHOD_1 ( ) { return VAR_1 . getTime ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",375
public java.lang.String METHOD_1 ( ) { METHOD_2 ( ) ; return STRING_1 + ( VAR_1 ) ; },public java.lang.String METHOD_1 ( ) { return STRING_1 + ( VAR_1 ) ; },['Delete Invocation'],376
protected void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; super . METHOD_1 ( VAR_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; },['Move Invocation'],377
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; if ( ( VAR_3 ) == null ) { VAR_3 = METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 = METHOD_2 ( ) ; },"['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",379
public void METHOD_1 ( boolean VAR_1 ) { java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_2 . getText ( ) ) ) + STRING_2 ) + VAR_1 ) ) ; },public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . setText ( ( ( ( VAR_2 . getText ( ) ) + STRING_2 ) + VAR_1 ) ) ; },"['Update Invocation', 'Insert TypeAccess', 'Move BinaryOperator', 'Move VariableRead', 'Move FieldRead', 'Delete FieldRead', 'Delete TypeAccess', 'Delete FieldRead', 'Delete BinaryOperator']",381
public synchronized TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return this . VAR_2 . get ( VAR_1 ) . METHOD_2 ( ) ; },public synchronized TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_2 . get ( VAR_1 ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Return']",383
public void handle ( java.util.Map data ) { VAR_1 . remove ( VAR_2 ) ; METHOD_1 ( ) ; VAR_3 . METHOD_2 ( ) ; },public void handle ( java.util.Map data ) { METHOD_1 ( ) ; VAR_1 . remove ( VAR_2 ) ; VAR_3 . METHOD_2 ( ) ; },['Move Invocation'],384
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 . getData ( ) ) ; VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_1 ( ) ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 . getData ( ) ) ; VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; } },['Move Invocation'],386
"public static TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 c = null ; try { c = VAR_2 . open ( VAR_1 ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_4 , STRING_1 ) ; } return c ; }",public static TYPE_1 METHOD_1 ( ) { TYPE_1 c = null ; try { c = VAR_2 . open ( ) ; } catch ( java.lang.Exception VAR_3 ) { } return c ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",387
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 , METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 , METHOD_3 ( ( ( VAR_3 . METHOD_4 ( ) ) + 1 ) ) ) ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",388
protected TYPE_1 METHOD_1 ( ) { if ( TYPE_2 . METHOD_2 ( buffer ) ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_3 ( buffer . METHOD_4 ( ) ) ; VAR_2 . put ( buffer ) . METHOD_5 ( ) ; return VAR_1 ; } return null ; },protected TYPE_1 METHOD_1 ( ) { if ( TYPE_2 . METHOD_2 ( buffer ) ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_3 ( buffer . METHOD_4 ( ) ) ; VAR_2 . put ( buffer ) ; return VAR_1 ; } return null ; },"['Move Invocation', 'Delete Invocation']",390
protected void METHOD_1 ( ) { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( this . VAR_2 . getText ( ) ) ; } },protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this . VAR_2 . getText ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",391
public int METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return 0 ; } else { return VAR_2 . size ( ) ; } },public int METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return 0 ; } else { return VAR_2 . size ( ) ; } },"['Move Invocation', 'Delete UnaryOperator']",392
"public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ! ( VAR_2 . equals ( VAR_3 , VAR_1 ) ) ) && ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) ) { VAR_3 = VAR_1 ; METHOD_3 ( STRING_1 , VAR_1 ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( VAR_2 . equals ( VAR_3 , VAR_1 ) ) ) { VAR_3 = VAR_1 ; METHOD_3 ( STRING_1 , VAR_1 ) ; } }","['Move UnaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",393
public java.util.ArrayList < java.lang.String > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return VAR_2 . METHOD_2 ( ) ; } else { return VAR_1 ; } },public java.util.ArrayList < java.lang.String > METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",394
"public void update ( TYPE_1 VAR_1 , float VAR_2 ) { counter -= VAR_2 ; if ( ( ( counter ) <= 0 ) || ( ( VAR_1 . METHOD_1 ( ) ) == 0 ) ) METHOD_2 ( VAR_1 ) ; }","public void update ( TYPE_1 VAR_1 , float VAR_2 ) { counter -= VAR_2 ; if ( ( counter ) <= 0 ) METHOD_2 ( VAR_1 ) ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",395
"boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( METHOD_4 ( ) , this . METHOD_5 ( ) ) ) ; }","boolean METHOD_1 ( ) { return VAR_1 . METHOD_3 ( METHOD_4 ( ) , this . METHOD_5 ( ) ) ; }","['Move Invocation', 'Delete Invocation', 'Delete BinaryOperator']",397
"public void METHOD_1 ( TYPE_1 VAR_1 , int position , java.lang.Object VAR_2 ) { if ( ( VAR_3 . size ( ) ) < ( VAR_4 ) ) { VAR_1 . METHOD_2 ( VAR_3 . get ( ( position % ( size ) ) ) ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int position , java.lang.Object VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 . get ( ( position % ( size ) ) ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",398
public int METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) + ( METHOD_3 ( ) ) ) - ( VAR_1 . METHOD_4 ( ) ) ; },public int METHOD_1 ( ) { return ( ( ( METHOD_2 ( ) ) + ( METHOD_3 ( ) ) ) + 1 ) - ( VAR_1 . METHOD_4 ( ) ) ; },"['Insert BinaryOperator', 'Move BinaryOperator', 'Insert Literal']",399
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return null ; } return VAR_2 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_2 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",401
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 == ( VAR_2 ) ) && ( VAR_1 instanceof TYPE_2 ) ) return false ; else return super . METHOD_1 ( VAR_1 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) return false ; else return super . METHOD_1 ( VAR_1 ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete BinaryOperator']",402
public java.lang.String METHOD_1 ( ) { if ( VAR_1 ) { return VAR_2 ; } else { return getText ( ) . toString ( ) ; } },public java.lang.String METHOD_1 ( ) { return VAR_2 ; },"['Move Return', 'Delete FieldRead', 'Delete Block', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",403
"public boolean METHOD_1 ( TYPE_1 type , java.lang.String VAR_1 , java.lang.Object VAR_2 ) { return this . METHOD_1 ( type , VAR_1 , VAR_2 , null ) ; }","public void METHOD_1 ( TYPE_1 type , java.lang.String VAR_1 , java.lang.Object VAR_2 ) { this . METHOD_1 ( type , VAR_1 , VAR_2 , null ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",405
"public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) . getText ( ) , VAR_1 . METHOD_4 ( ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) . getText ( ) , VAR_1 . METHOD_4 ( ) . getText ( ) ) ; }","['Insert Invocation', 'Move Invocation']",406
public TYPE_1 METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 < 0 ) || ( VAR_1 >= ( VAR_2 . size ( ) ) ) ) return null ; return VAR_2 . get ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",407
public java.lang.Object METHOD_1 ( int VAR_1 ) { return new java.lang.Integer ( java.lang.Math.abs ( ( ( int ) ( FLOAT_1 * ( VAR_2 ) ) ) ) ) ; },public java.lang.Object METHOD_1 ( int VAR_1 ) { return new java.lang.Integer ( ( ( int ) ( FLOAT_1 * ( VAR_2 ) ) ) ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation']",408
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; if ( ( ! ( VAR_4 ) ) && ( VAR_5 ) ) VAR_1 . METHOD_4 ( VAR_6 , VAR_7 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_4 ) return ; TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; if ( VAR_5 ) VAR_1 . METHOD_4 ( VAR_6 , VAR_7 ) ; }","['Insert If', 'Move FieldRead', 'Insert Block', 'Move FieldRead', 'Insert Return', 'Delete UnaryOperator', 'Delete BinaryOperator']",409
"public void METHOD_1 ( TYPE_1 target ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 , VAR_6 ) ; VAR_7 . METHOD_2 ( VAR_8 ) ; VAR_4 . METHOD_4 ( VAR_6 ) ; }","public void METHOD_1 ( TYPE_1 target ) { VAR_4 . METHOD_3 ( VAR_5 , VAR_6 ) ; VAR_4 . METHOD_4 ( VAR_6 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_7 . METHOD_2 ( VAR_8 ) ; }","['Move Invocation', 'Move Invocation', 'Delete TypeAccess']",411
"public TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String > error , TYPE_3 VAR_1 ) { if ( error . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( STRING_1 , STRING_2 ) ; } return new TYPE_1 ( STRING_3 , STRING_4 , error ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String > error ) { return new TYPE_1 ( STRING_3 , STRING_4 , error ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",412
"public void METHOD_1 ( TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 ) { if ( VAR_1 != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",413
public void METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { out . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { METHOD_1 ( VAR_1 ) ; },['Delete FieldRead'],416
"private void METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) return ; VAR_1 . i ( VAR_2 , STRING_1 ) ; if ( VAR_3 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( ) ; VAR_4 = true ; } }","private void METHOD_1 ( ) { VAR_1 . i ( VAR_2 , STRING_1 ) ; VAR_3 . METHOD_4 ( ) ; VAR_4 = true ; }","['Move Invocation', 'Move Assignment', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",417
public void METHOD_1 ( ) { VAR_1 = null ; if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { VAR_1 = null ; VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",418
"public boolean delete ( final TYPE_1 < TYPE_2 > VAR_1 , final TYPE_2 key ) { return delete ( VAR_1 , key , null ) ; }","public void delete ( final TYPE_1 < TYPE_2 > VAR_1 , final TYPE_2 key ) { delete ( VAR_1 , key , null ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",419
"public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( null , METHOD_3 ( ) ) ; return VAR_2 . get ( ) ; }",public TYPE_1 METHOD_1 ( ) { if ( ( VAR_2 . get ( ) ) == null ) { VAR_2 . set ( METHOD_3 ( ) ) ; } return VAR_2 . get ( ) ; },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Invocation', 'Move Literal', 'Update Invocation', 'Move Invocation', 'Insert TypeAccess', 'Update TypeAccess']",420
"public int METHOD_1 ( ) { int VAR_1 = VAR_2 . get ( this . METHOD_2 ( 0 , ( ( VAR_2 . size ( ) ) - 1 ) ) ) ; VAR_2 . remove ( VAR_3 . METHOD_3 ( VAR_1 ) ) ; return VAR_1 ; }","public int METHOD_1 ( ) { int VAR_1 = VAR_2 . get ( this . METHOD_2 ( 0 , VAR_2 . size ( ) ) ) ; VAR_2 . remove ( VAR_3 . METHOD_3 ( VAR_1 ) ) ; return VAR_1 ; }","['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",421
public void METHOD_1 ( android.view.View VAR_1 ) { if ( listener != null ) { listener . METHOD_2 ( VAR_2 ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { listener . METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",422
"public double METHOD_1 ( double VAR_1 , double ... param ) { switch ( VAR_2 ) { case VAR_3 : return METHOD_2 ( VAR_1 , VAR_4 ) ; default : return VAR_1 ; } }","public double METHOD_1 ( double VAR_1 , double ... param ) { switch ( this ) { case VAR_3 : return METHOD_2 ( VAR_1 , VAR_4 ) ; default : return VAR_1 ; } }","['Insert ThisAccess', 'Delete FieldRead']",423
"private boolean METHOD_1 ( double VAR_1 , double VAR_2 , double VAR_3 ) { return ( VAR_2 == 0 ) || ( ( VAR_2 >= VAR_1 ) && ( VAR_2 <= VAR_3 ) ) ; }","private boolean METHOD_1 ( double VAR_1 , double VAR_2 , double VAR_3 ) { return ( VAR_2 >= VAR_1 ) && ( VAR_2 <= VAR_3 ) ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",425
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_3 . METHOD_2 ( VAR_1 ) ) { VAR_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; } else { } VAR_2 . METHOD_3 ( STRING_3 , VAR_1 ) ; return STRING_4 ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_2 . METHOD_3 ( STRING_3 , VAR_1 ) ; return STRING_4 ; }","['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",426
"protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_1 , ( ( VAR_2 ) | ( VAR_3 ) ) ) ; }","protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }","['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",428
public final void METHOD_1 ( TYPE_1 position ) { if ( ! ( VAR_1 ) ) { if ( ! ( VAR_2 . equals ( this . position ) ) ) { VAR_1 = true ; } } this . position = position ; },public final void METHOD_1 ( TYPE_1 position ) { this . position = position ; if ( ! ( VAR_1 ) ) { if ( ! ( VAR_2 . equals ( new TYPE_1 ( ) ) ) ) { VAR_1 = true ; } } },"['Move If', 'Insert ConstructorCall', 'Delete ThisAccess', 'Delete FieldRead']",430
"public void METHOD_1 ( short [ ] data ) { if ( ( VAR_1 ) != null ) { VAR_2 = METHOD_2 ( VAR_1 , data , VAR_2 ) ; } }","public void METHOD_1 ( short [ ] data ) { VAR_2 = METHOD_2 ( VAR_1 , data , VAR_2 ) ; }","['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",431
public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ; },public java.lang.String toString ( ) { return ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",432
public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( VAR_1 != null ) ) VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",433
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; if ( VAR_2 ) { METHOD_3 ( ) ; } }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; METHOD_3 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",434
public java.lang.String METHOD_1 ( ) { return ( ( ( ( ( ( ( ( x ) + STRING_1 ) + ( y ) ) + STRING_1 ) + ( VAR_1 ) ) + STRING_1 ) + ( name ) ) + STRING_1 ) + ( index ) ; },public java.lang.String METHOD_1 ( ) { return ( ( ( ( ( ( x ) + STRING_1 ) + ( y ) ) + STRING_1 ) + ( VAR_1 ) ) + STRING_1 ) + ( name ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",435
public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 = VAR_2 ; select ( VAR_2 ) ; } },public void METHOD_1 ( ) { VAR_1 = VAR_2 ; select ( VAR_2 ) ; },"['Move Assignment', 'Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",436
public TYPE_1 METHOD_1 ( java.lang.String name ) { for ( TYPE_1 c : VAR_1 ) { if ( c . METHOD_2 ( ) . toLowerCase ( ) . equals ( VAR_2 . toLowerCase ( ) ) ) { return c ; } } return null ; },public TYPE_1 METHOD_1 ( java.lang.String name ) { for ( TYPE_1 c : VAR_1 ) { if ( c . METHOD_2 ( ) . equals ( name ) ) { return c ; } } return null ; },"['Update Invocation', 'Move Invocation', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",437
"private java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_2 . replace ( STRING_1 , STRING_2 ) . trim ( ) ; } return null ; }","private java.lang.String METHOD_1 ( ) { return VAR_2 . replace ( STRING_1 , STRING_2 ) . trim ( ) ; }","['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",438
public void commit ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { commit ( TYPE_1 . METHOD_1 ( ) ) ; } },public void commit ( ) { commit ( TYPE_1 . METHOD_1 ( ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",440
"public void METHOD_1 ( ) throws java.lang.Exception { if ( ( METHOD_2 ( ) ) || ( METHOD_3 ( INT_1 , INT_2 ) ) ) { METHOD_4 ( STRING_1 ) ; } }","public void METHOD_1 ( ) throws java.lang.Exception { if ( ( ! ( METHOD_2 ( ) ) ) || ( METHOD_3 ( INT_1 , INT_2 ) ) ) { METHOD_4 ( STRING_1 ) ; } }","['Insert UnaryOperator', 'Move Invocation']",441
"public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; if ( ( value ) != null ) VAR_4 . value = value . METHOD_2 ( ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_4 . value = value . METHOD_2 ( ) ; return VAR_1 ; }","['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",442
"private static boolean METHOD_1 ( double VAR_1 ) { return TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) * ( TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ) , VAR_1 ) ; }",private static boolean METHOD_1 ( java.lang.Double VAR_1 ) { return ( ( TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) * ( TYPE_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ) == VAR_1 ; },"['Update TypeReference', 'Insert BinaryOperator', 'Move BinaryOperator', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",443
public void METHOD_1 ( ) { state = VAR_1 ; METHOD_2 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; state = VAR_1 ; },['Move Assignment'],444
"private double METHOD_1 ( double x , double y ) { if ( ( x == 0 ) || ( x == 0.0 ) ) { return ( VAR_1 ) / INT_1 ; } return TYPE_1 . METHOD_2 ( ( y / x ) ) ; }","private double METHOD_1 ( double x , double y ) { if ( x == 0 ) { return 1.0 ; } return TYPE_1 . METHOD_2 ( ( y / x ) ) ; }","['Move BinaryOperator', 'Insert Literal', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",447
public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . append ( STRING_1 ) . append ( METHOD_2 ( VAR_1 ) ) . append ( CHAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . append ( ( ( STRING_1 + ( METHOD_2 ( VAR_1 ) ) ) + CHAR_1 ) ) ; },"['Move Invocation', 'Move TypeAccess', 'Insert BinaryOperator', 'Insert BinaryOperator', 'Insert FieldRead', 'Insert FieldRead', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",448
public void METHOD_1 ( java.lang.String VAR_1 ) { ( ( TYPE_1 ) ( this . VAR_2 ) ) . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { ( ( TYPE_1 ) ( this ) ) . METHOD_1 ( VAR_1 ) ; },"['Update ThisAccess', 'Move ThisAccess', 'Move TypeReference', 'Delete FieldRead']",450
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_3 ( VAR_3 , VAR_4 ) . VAR_5 ) ; assertEquals ( VAR_6 , VAR_1 . METHOD_4 ( VAR_3 , VAR_4 ) . VAR_5 ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_3 ( VAR_3 , VAR_4 ) ) ; assertEquals ( VAR_6 , VAR_1 . METHOD_4 ( VAR_3 , VAR_4 ) ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete FieldRead']",451
"public void METHOD_1 ( final java.lang.String VAR_1 ) throws java.lang.Throwable { VAR_2 . assertEquals ( VAR_1 , VAR_3 ) ; }","public void METHOD_1 ( final java.lang.String VAR_1 ) throws java.lang.Throwable { VAR_2 . assertEquals ( VAR_3 , VAR_1 ) ; }",['Move VariableRead'],453
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . equals ( this . VAR_1 , VAR_1 ) ) ) { this . VAR_1 = VAR_1 ; this . VAR_3 = null ; this . VAR_4 = null ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . equals ( this . VAR_1 , VAR_1 ) ) { this . VAR_1 = VAR_1 ; this . VAR_3 = null ; this . VAR_4 = null ; } }","['Move Invocation', 'Delete UnaryOperator']",456
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; return true ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 . METHOD_2 ( ) ) ; return true ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",458
"public void METHOD_1 ( ) { assertEquals ( ( ( STRING_1 + ( fileName ) ) + STRING_2 ) , TYPE_1 . METHOD_2 ( STRING_3 ) ) ; }","public void METHOD_1 ( ) { assertEquals ( TYPE_1 . METHOD_2 ( STRING_3 ) , ( ( STRING_1 + ( fileName ) ) + STRING_2 ) ) ; }",['Move BinaryOperator'],460
public void error ( final java.lang.Exception VAR_1 ) { VAR_2 . error ( VAR_1 ) ; VAR_3 . add ( VAR_1 ) ; VAR_4 . METHOD_1 ( ) ; },public void error ( final java.lang.Exception VAR_1 ) { VAR_3 . add ( VAR_1 ) ; VAR_4 . METHOD_1 ( ) ; },"['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",461
"public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final TYPE_1 VAR_3 = super . METHOD_1 ( VAR_1 , VAR_2 ) ; if ( TYPE_3 . METHOD_2 ( VAR_3 ) ) { this . METHOD_3 ( ) ; } return VAR_3 ; }","public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final TYPE_1 VAR_3 = super . METHOD_1 ( VAR_1 , VAR_2 ) ; if ( VAR_3 != null ) { this . METHOD_3 ( ) ; return VAR_3 ; } return VAR_3 ; }","['Insert BinaryOperator', 'Move VariableRead', 'Insert Literal', 'Insert Return', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",462
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( this , ( ( VAR_2 . getId ( ) ) + STRING_1 ) , VAR_3 ) . show ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( this , VAR_2 . getText ( ) , VAR_3 ) . show ( ) ; }","['Update Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",463
public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_1 ( ) ) || ( VAR_2 ) ) ; },public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_1 ( ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",464
"public void show ( ) { VAR_1 . METHOD_1 ( new TYPE_1 ( VAR_2 , VAR_3 ) ) ; }",public void show ( ) { VAR_1 . METHOD_1 ( VAR_3 ) ; },"['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall']",465
public final TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) METHOD_2 ( ) ; return VAR_1 . METHOD_3 ( ) ; },public final TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) METHOD_2 ( ) ; return VAR_1 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",466
public java.lang.Integer METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_2 ( ) ; } else { return null ; } },public java.lang.Integer METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",467
private void METHOD_1 ( TYPE_1 event ) { if ( ( event . METHOD_2 ( ) ) == 1 ) { VAR_1 = false ; VAR_2 = false ; VAR_3 = event . METHOD_3 ( ) ; } },private void METHOD_1 ( TYPE_1 event ) { VAR_1 = false ; VAR_2 = false ; VAR_3 = event . METHOD_3 ( ) ; },"['Move Assignment', 'Move Assignment', 'Move Assignment', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",468
public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 > ( VAR_2 ) ) { this . VAR_1 = METHOD_2 ( ) ; } else { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 > ( METHOD_2 ( ) ) ) { this . VAR_1 = METHOD_2 ( ) ; } else { this . VAR_1 = VAR_1 ; } },"['Insert Invocation', 'Delete FieldRead']",473
"public boolean isEmpty ( int x , int y , int VAR_1 ) { return ( isEmpty ( x , y ) ) || ( ! ( get ( x , y ) . METHOD_1 ( VAR_1 ) ) ) ; }","public boolean isEmpty ( int x , int y , int VAR_1 ) { return ( isEmpty ( x , y ) ) || ( get ( x , y ) . METHOD_1 ( VAR_1 ) ) ; }","['Move Invocation', 'Delete UnaryOperator']",474
"public void METHOD_1 ( java.io.File VAR_1 , java.util.Properties VAR_2 ) { METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; }","public void METHOD_1 ( java.io.File VAR_1 , java.util.Properties VAR_2 ) { METHOD_2 ( VAR_1 , VAR_2 ) ; this . VAR_2 . METHOD_4 ( VAR_2 ) ; }","['Insert FieldRead', 'Insert ThisAccess', 'Delete Invocation']",475
"public static boolean METHOD_1 ( ) { long VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , ( - 1L ) ) ; return ( VAR_1 == ( - 1 ) ) || ( ! ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ; }","public static boolean METHOD_1 ( ) { long VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , ( - 1L ) ) ; return ( VAR_1 == ( - 1 ) ) || ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; }","['Move Invocation', 'Delete UnaryOperator']",476
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) METHOD_2 ( ) . METHOD_3 ( ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) METHOD_2 ( ) . show ( ) ; },['Update Invocation'],479
public boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( ) . METHOD_3 ( ( p ) - > ( VAR_3 . startsWith ( ( p + ( VAR_4 ) ) ) ) || ( VAR_3 . equals ( p ) ) ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( ) . METHOD_3 ( ( p ) - > VAR_3 . startsWith ( ( p + ( VAR_4 ) ) ) ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",484
"public java.lang.String METHOD_1 ( int id , java.lang.Integer VAR_1 , java.lang.String VAR_2 ) { this . VAR_3 . METHOD_2 ( id ) ; return ( ( ( STRING_1 + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ; }","public java.lang.String METHOD_1 ( int id , java.lang.Integer VAR_1 ) { this . VAR_3 . METHOD_2 ( id ) ; return ( STRING_1 + STRING_2 ) + VAR_1 ; }","['Move BinaryOperator', 'Delete TypeReference', 'Delete Parameter', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator']",485
public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) return false ; VAR_1 = VAR_2 ; return true ; },public void METHOD_1 ( ) { VAR_1 = VAR_2 ; },"['Update TypeReference', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",486
public static boolean METHOD_1 ( java.lang.Object obj ) { return ( ( TYPE_1 ) != null ) && ( TYPE_1 . METHOD_2 ( VAR_1 . getClass ( ) ) ) ; },public static boolean METHOD_1 ( java.lang.Object obj ) { return TYPE_1 . METHOD_2 ( VAR_1 . getClass ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",487
public boolean METHOD_1 ( ) { return ( this . VAR_1 ) == ( this ) ; },public boolean METHOD_1 ( ) { if ( ( this . VAR_1 ) == ( this ) ) { return true ; } else return false ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Insert Block', 'Insert Return', 'Insert Return', 'Insert Literal', 'Insert Literal', 'Delete Return']",488
public int METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) == ( ( METHOD_2 ( ) ) - 1 ) ) { return METHOD_3 ( ) ; } return - 1 ; },public int METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) == ( METHOD_2 ( ) ) ) { return METHOD_3 ( ) ; } return - 1 ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",489
"protected void add ( java.util.List list , TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) , this , list ) ; } }","protected void add ( java.util.List list , TYPE_1 VAR_1 ) { VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) , this , list ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",491
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( getContext ( ) ) ; if ( ( VAR_2 ) != null ) { VAR_1 . METHOD_2 ( VAR_2 ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( getContext ( ) ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",493
"protected void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; }","protected void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 , VAR_4 ) ; }",['Move TypeAccess'],494
public short getData ( ) { return data . METHOD_1 ( ) ; },public short getData ( ) { return data ; },"['Move FieldRead', 'Delete Invocation']",495
public void METHOD_1 ( java.lang.String name ) { if ( VAR_1 . contains ( STRING_1 ) ) METHOD_2 ( name ) ; else this . name = name ; },public void METHOD_1 ( java.lang.String name ) { this . name = name ; },"['Move Assignment', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",496
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . getText ( ) . isEmpty ( ) ) { VAR_2 . setText ( STRING_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( STRING_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",497
public void METHOD_1 ( ) { VAR_1 . remove ( VAR_2 ) ; },public void METHOD_1 ( ) { VAR_1 . remove ( p ) ; },"['Insert FieldRead', 'Delete TypeAccess']",499
public boolean METHOD_1 ( java.util.List nodes ) { return ( ( VAR_1 . size ( ) ) - 1 ) <= ( this . VAR_2 ) ; },public boolean METHOD_1 ( java.util.List nodes ) { if ( ( ( VAR_1 . size ( ) ) - 1 ) <= ( this . VAR_2 ) ) return true ; return false ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal']",500
"public void METHOD_1 ( TYPE_1 response ) { TYPE_2 . METHOD_2 ( STRING_1 , ( STRING_2 + ( VAR_1 . toString ( ) ) ) ) ; }","public void METHOD_1 ( TYPE_1 response ) { TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 . toString ( ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",501
public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { offset = 0 ; VAR_2 = false ; VAR_3 = VAR_1 ; METHOD_2 ( ) ; VAR_4 = new boolean [ VAR_5 . size ( ) ] ; },public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { offset = 0 ; VAR_2 = false ; METHOD_2 ( ) ; VAR_3 = VAR_1 ; VAR_4 = new boolean [ VAR_5 . size ( ) ] ; },['Move Assignment'],502
"public static void METHOD_1 ( android.content.Context context , java.lang.String message ) { if ( context != null ) { TYPE_1 . METHOD_2 ( context . METHOD_3 ( ) , message , VAR_1 ) . show ( ) ; } }","public static void METHOD_1 ( android.content.Context context , java.lang.String message ) { TYPE_1 . METHOD_2 ( context . METHOD_3 ( ) , message , VAR_1 ) . show ( ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",506
protected void METHOD_1 ( java.lang.Integer ... values ) { super . METHOD_1 ( values ) ; VAR_1 . METHOD_2 ( values [ 0 ] ) ; VAR_1 . METHOD_3 ( values [ 1 ] ) ; },protected void METHOD_1 ( java.lang.Integer ... values ) { super . METHOD_1 ( values ) ; METHOD_2 ( values [ 0 ] ) ; VAR_1 . METHOD_2 ( values [ 0 ] ) ; },"['Move Invocation', 'Update Invocation', 'Update TypeAccess', 'Update Literal']",507
public boolean METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) { return false ; } return ( VAR_2 . METHOD_2 ( ) . contains ( VAR_3 ) ) && ( ! ( METHOD_3 ( VAR_3 ) ) ) ; },public boolean METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) { return false ; } return VAR_2 . METHOD_2 ( ) . contains ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",508
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_2 . toString ( ) ; } else { return null ; } },public java.lang.String METHOD_1 ( ) { return VAR_2 . toString ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",509
"public static java.lang.String METHOD_1 ( java.lang.String key ) { if ( VAR_1 ) return TYPE_1 . METHOD_2 ( ( STRING_1 + ( VAR_2 ) ) , TYPE_2 . METHOD_3 ( ) ) . getString ( key ) ; else return VAR_3 . getString ( key ) ; }","public static java.lang.String METHOD_1 ( java.lang.String key ) { if ( VAR_1 ) return TYPE_1 . METHOD_2 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) . getString ( key ) ; else return VAR_3 . getString ( key ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",510
public TYPE_1 METHOD_1 ( TYPE_2 message ) throws java.io.IOException { return VAR_1 . METHOD_2 ( message ) ; },public TYPE_1 METHOD_1 ( TYPE_2 message ) throws java.io.IOException { VAR_1 . METHOD_2 ( message ) ; return new TYPE_1 ( ) ; },"['Move Invocation', 'Insert ConstructorCall']",511
"public void METHOD_1 ( TYPE_1 [ ] VAR_1 , int VAR_2 ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public TYPE_1 [ ] METHOD_1 ( TYPE_1 [ ] VAR_1 , int VAR_2 ) { return VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Update TypeReference', 'Insert Return', 'Move Invocation']",512
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ( ( VAR_1 . getId ( ) ) - 1 ) ) ; METHOD_3 ( ) ; VAR_2 . METHOD_4 ( new TYPE_2 ( VAR_2 ) ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . getId ( ) ) ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation']",515
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; start . METHOD_3 ( true ) ; VAR_3 . METHOD_3 ( false ) ; VAR_4 . setText ( STRING_1 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",516
"public int METHOD_1 ( TYPE_1 < java.lang.String , java.lang.Integer > VAR_1 , TYPE_1 < java.lang.String , java.lang.Integer > VAR_2 ) { return ( VAR_2 . METHOD_2 ( ) ) - ( VAR_1 . METHOD_2 ( ) ) ; }","public int METHOD_1 ( TYPE_1 < java.lang.String , java.lang.Integer > VAR_1 , TYPE_1 < java.lang.String , java.lang.Integer > VAR_2 ) { return ( VAR_1 . METHOD_2 ( ) ) - ( VAR_2 . METHOD_2 ( ) ) ; }",['Move Invocation'],517
public java.lang.Void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . contains ( VAR_3 . id ) ) ) { VAR_4 . add ( VAR_3 . id ) ; } return null ; },public java.lang.Void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . add ( VAR_3 . id ) ; return null ; },"['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",519
public void METHOD_1 ( TYPE_1 event ) { if ( METHOD_2 ( ) ) { if ( ( ( event . METHOD_3 ( ) ) != null ) && ( event . METHOD_3 ( ) . equals ( VAR_1 ) ) ) { VAR_2 = true ; } } },public void METHOD_1 ( TYPE_1 event ) { if ( METHOD_2 ( ) ) { if ( event . METHOD_3 ( ) . equals ( VAR_1 ) ) { VAR_2 = true ; } } },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",520
protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; if ( ! ( METHOD_3 ( ) ) ) { VAR_3 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ; } },protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",521
public void METHOD_1 ( ) { VAR_1 . setText ( ( ( VAR_2 . size ( ) ) + STRING_1 ) ) ; },public void METHOD_1 ( ) { VAR_1 . setText ( ( ( ( VAR_2 . size ( ) ) - 1 ) + STRING_1 ) ) ; },"['Insert BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Insert Literal']",523
public int METHOD_1 ( ) { return INT_1 + ( ( int ) ( ( java.lang.Math.random ( ) ) * ( INT_2 + 1 ) ) ) ; },public int METHOD_1 ( ) { return INT_1 + ( ( int ) ( ( java.lang.Math.random ( ) ) * INT_2 ) ) ; },"['Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",524
public void METHOD_1 ( TYPE_1 node ) { node . METHOD_2 ( ) . METHOD_3 ( this ) ; node . METHOD_4 ( ) . METHOD_3 ( this ) ; VAR_1 . add ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 node ) { node . METHOD_4 ( ) . METHOD_3 ( this ) ; node . METHOD_2 ( ) . METHOD_3 ( this ) ; VAR_1 . add ( VAR_2 ) ; },['Move Invocation'],526
public synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } },public synchronized void METHOD_1 ( ) { VAR_1 = null ; },"['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",527
public void METHOD_1 ( TYPE_1 a ) { VAR_1 . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( ) ) { VAR_1 . METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 a ) { VAR_1 . METHOD_2 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",528
public void handle ( TYPE_1 event ) { METHOD_1 ( ) ; METHOD_2 ( ) ; },public void handle ( TYPE_1 event ) { METHOD_1 ( ) ; java.lang.System.out.println ( METHOD_2 ( ) ) ; },"['Insert Invocation', 'Insert FieldRead', 'Move Invocation', 'Insert TypeAccess']",531
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return new TYPE_1 ( ( ( ( ( STRING_1 + ( TYPE_1 . METHOD_2 ( path ) ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) ) ; },public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return new TYPE_1 ( ( ( ( ( STRING_1 + ( path ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) ) ; },"['Move FieldRead', 'Delete TypeAccess', 'Delete Invocation']",533
public int METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { return ( TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) . size ( ) ) + ( TYPE_1 . METHOD_2 ( METHOD_4 ( VAR_1 ) ) . size ( ) ) ; },public int METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { return TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) . size ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator']",537
public static long METHOD_1 ( double a ) { return ( ( long ) ( a + ( ( TYPE_1 . METHOD_2 ( a ) ) * FLOAT_1 ) ) ) ; },public static long METHOD_1 ( double a ) { return ( ( long ) ( a + FLOAT_1 ) ) ; },"['Move FieldRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",538
public TYPE_1 METHOD_1 ( java.lang.Long id ) { return METHOD_2 ( id ) . METHOD_1 ( ) ; },public TYPE_1 METHOD_1 ( java.lang.Long id ) { return METHOD_2 ( id ) ; },"['Move Invocation', 'Delete Invocation']",539
public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( METHOD_3 ( ) ) ; } },public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",540
public boolean METHOD_1 ( int VAR_1 ) { return ! ( VAR_2 . get ( VAR_1 ) . METHOD_2 ( ) ) ; },public boolean METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) . METHOD_2 ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",541
private static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; if ( VAR_3 ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_2 . size ( ) ) ) ) ; } },private static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; java.lang.System.out.println ( VAR_2 . size ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Block', 'Delete If']",542
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( null , ( - 1 ) ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_3 ) ; VAR_1 . METHOD_4 ( STRING_2 , VAR_4 ) ; super . METHOD_1 ( VAR_1 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_3 ) ; VAR_1 . METHOD_4 ( STRING_2 , VAR_4 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Literal', 'Delete UnaryOperator', 'Delete Invocation']",543
private void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { VAR_2 = null ; VAR_1 = true ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) ; } } },private void METHOD_1 ( ) { VAR_2 = null ; VAR_1 = true ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) ; } },"['Move Assignment', 'Move Assignment', 'Move If', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",547
protected java.util.Collection < TYPE_1 > METHOD_1 ( java.net.URL url ) { METHOD_2 ( url ) ; METHOD_3 ( ) ; METHOD_4 ( true ) ; METHOD_4 ( false ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; return this . VAR_1 . values ( ) ; },protected java.util.Collection < TYPE_1 > METHOD_1 ( java.net.URL url ) { index ( ) ; return this . VAR_1 . values ( ) ; },"['Update Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",548
public void METHOD_1 ( java.lang.String msg ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) VAR_2 . METHOD_3 ( msg ) ; },public void METHOD_1 ( java.lang.String msg ) { VAR_2 . METHOD_3 ( msg ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",551
"public synchronized void setValue ( java.lang.String key , java.lang.Object value ) { if ( value != null ) { METHOD_1 ( VAR_1 . getClass ( ) ) ; } VAR_2 . put ( key , TYPE_1 . METHOD_2 ( value ) ) ; }","public synchronized void setValue ( java.lang.String key , java.lang.Object value ) { if ( value != null ) { METHOD_1 ( VAR_1 . getClass ( ) ) ; } VAR_2 . put ( key , value ) ; }","['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",552
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) VAR_1 . METHOD_3 ( ) ; super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",553
"public void METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { METHOD_3 ( METHOD_4 ( ) , METHOD_5 ( ) ) ; remove ( ) ; this . remove ( ) ; } else { new TYPE_1 ( VAR_1 , STRING_1 ) ; } }","public void METHOD_1 ( ) { METHOD_3 ( METHOD_4 ( ) , METHOD_5 ( ) ) ; remove ( ) ; this . remove ( ) ; }","['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Block', 'Delete If']",554
boolean METHOD_1 ( java.lang.Long id ) { return ( id != null ) && ( VAR_1 . METHOD_2 ( id ) ) ; },boolean METHOD_1 ( java.lang.Long id ) { return VAR_1 . METHOD_2 ( id ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",555
public void METHOD_1 ( int VAR_1 ) { id = new int [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { id [ i ] = i ; VAR_2 [ i ] = 1 ; } },public METHOD_1 ( int VAR_1 ) { id = new int [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) id [ i ] = i ; VAR_2 [ i ] = 1 ; },"['Move Assignment', 'Insert FieldRead', 'Delete TypeReference', 'Delete VariableRead']",556
"public void METHOD_1 ( float VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( ) ; if ( VAR_5 ) VAR_4 . METHOD_5 ( 0 , ( VAR_1 / INT_1 ) , 0 ) ; }","public void METHOD_1 ( float VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( 0 , ( VAR_1 / INT_1 ) , 0 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",557
public double METHOD_1 ( ) { return METHOD_2 ( ) ; },public double METHOD_1 ( ) { return 0 ; },"['Insert Literal', 'Delete Invocation']",558
"public void METHOD_1 ( java.lang.Object VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , TYPE_1 VAR_5 ) { if ( ( this ) == VAR_1 ) return ; TYPE_2 . METHOD_2 ( STRING_1 ) ; }","public void METHOD_1 ( java.lang.Object VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , TYPE_1 VAR_5 ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; }","['Delete ThisAccess', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",559
protected void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; } } super . METHOD_1 ( ) ; },protected void METHOD_1 ( ) { VAR_1 . METHOD_3 ( ) ; super . METHOD_1 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If']",564
"public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; if ( VAR_2 ) VAR_3 . format ( STRING_1 , VAR_4 , VAR_5 , VAR_6 ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; VAR_3 . format ( STRING_1 , VAR_4 , VAR_5 , VAR_6 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",565
public java.lang.String toString ( ) { return ( ( ( ( ( ( VAR_1 ) + STRING_1 ) + ( VAR_2 ) ) + STRING_1 ) + ( VAR_3 ) ) + STRING_2 ) + ( VAR_4 ) ; },public java.lang.String toString ( ) { return ( ( ( ( VAR_1 ) + STRING_1 ) + ( VAR_2 ) ) + STRING_1 ) + ( VAR_3 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",566
"public boolean METHOD_1 ( int i , TYPE_1 VAR_1 , int j ) { return ( ( VAR_2 ) == ( VAR_3 ) ) && ( j == ( METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; }","public boolean METHOD_1 ( int i , TYPE_1 VAR_1 , int j ) { return ( VAR_2 ) == ( VAR_3 ) ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator', 'Delete BinaryOperator']",567
public void METHOD_1 ( android.view.View view ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; } },public void METHOD_1 ( android.view.View view ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",568
public java.lang.Object execute ( TYPE_1 event ) throws TYPE_2 { final java.lang.String VAR_1 = event . METHOD_1 ( STRING_1 ) ; if ( METHOD_2 ( VAR_1 ) ) { TYPE_3 . METHOD_3 ( VAR_2 ) ; } return null ; },public java.lang.Object execute ( TYPE_1 event ) throws TYPE_2 { final java.lang.String VAR_1 = event . METHOD_1 ( STRING_1 ) ; METHOD_2 ( VAR_1 ) ; TYPE_3 . METHOD_3 ( VAR_2 ) ; return null ; },"['Move Invocation', 'Move Invocation', 'Delete Block', 'Delete If']",569
"private static boolean METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { return ( ( VAR_4 - VAR_1 ) >= 0 ) && ( ( VAR_2 - VAR_3 ) >= 0 ) ; }","private static boolean METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { return ( VAR_1 <= VAR_4 ) && ( VAR_2 >= VAR_3 ) ; }","['Update BinaryOperator', 'Move BinaryOperator', 'Update BinaryOperator', 'Move VariableRead', 'Update BinaryOperator', 'Move BinaryOperator', 'Delete Literal', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",571
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) . replace ( VAR_3 , VAR_1 ) . METHOD_3 ( null ) . commit ( ) ; VAR_2 . METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) . replace ( VAR_3 , VAR_1 ) . commit ( ) ; VAR_2 . METHOD_4 ( ) ; }","['Update Invocation', 'Move Invocation', 'Delete Literal', 'Delete Invocation']",573
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return ; } VAR_1 . METHOD_2 ( ) ; },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",575
public void METHOD_1 ( ) { if ( VAR_1 . contains ( VAR_2 ) ) { METHOD_2 ( VAR_2 ) ; } },public void METHOD_1 ( ) { METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",576
public void METHOD_1 ( android.view.View view ) { if ( VAR_1 ) { METHOD_2 ( VAR_2 ) ; } else { METHOD_2 ( VAR_3 ) ; } },public void METHOD_1 ( android.view.View view ) { METHOD_2 ( VAR_3 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",577
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( ( VAR_2 . getText ( ) . toString ( ) ) != null ) && ( ( VAR_3 . getText ( ) . toString ( ) ) != null ) ) { METHOD_2 ( ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( ( VAR_2 . getText ( ) ) != null ) && ( ( VAR_3 . getText ( ) ) != null ) ) { METHOD_2 ( ) ; } },"['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete Invocation']",578
"public TYPE_1 METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int end ) { append ( VAR_1 , start , end ) ; stringBuilder.append ( ""\n"" ) ; return this ; }","public TYPE_1 METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int end ) { return append ( VAR_1 , start , end ) . append ( ""\n"" ) ; }","['Insert Invocation', 'Move Invocation', 'Move Literal', 'Delete FieldRead', 'Delete Invocation', 'Delete ThisAccess']",580
"protected void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { if ( METHOD_2 ( VAR_1 , VAR_2 ) ) { if ( VAR_3 == null ) { METHOD_3 ( VAR_1 , VAR_2 ) ; } } else { METHOD_4 ( VAR_2 ) ; } }","protected void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { if ( ! ( METHOD_2 ( VAR_1 , VAR_2 ) ) ) { METHOD_4 ( VAR_2 ) ; } }","['Insert UnaryOperator', 'Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Block']",581
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( init ( ) ) VAR_3 . METHOD_2 ( VAR_2 , VAR_1 , null ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_2 , VAR_1 , null ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",584
"public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Throwable VAR_2 ) { return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , null ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Throwable VAR_2 ) { TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , null ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",585
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) != null ) { return ; } METHOD_3 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",586
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_1 . METHOD_3 ( ) ) ) && ( super . METHOD_1 ( VAR_1 ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_1 . METHOD_3 ( ) ) ) { return false ; } return super . METHOD_1 ( VAR_1 ) ; },"['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Move Invocation', 'Insert Return', 'Insert Literal', 'Delete BinaryOperator']",587
public void METHOD_1 ( java.lang.String time ) { TYPE_1 VAR_1 ; if ( ( getView ( ) ) != null ) { VAR_1 = ( ( TYPE_1 ) ( getView ( ) . METHOD_2 ( VAR_2 ) ) ) ; VAR_3 . setText ( time ) ; } },public void METHOD_1 ( java.lang.String time ) { TYPE_1 VAR_1 ; if ( ( VAR_1 = ( ( TYPE_1 ) ( getView ( ) . METHOD_2 ( VAR_2 ) ) ) ) == null ) return ; VAR_3 . setText ( time ) ; },"['Move Invocation', 'Update BinaryOperator', 'Move Assignment', 'Insert Return', 'Delete Invocation']",589
"public void METHOD_1 ( TYPE_1 < TYPE_2 > result , boolean VAR_1 ) { if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; } TYPE_3 . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 ( VAR_3 , result , VAR_4 ) ) ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 > result , boolean VAR_1 ) { TYPE_3 . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 ( VAR_3 , result , VAR_4 ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; } }",['Move If'],590
public boolean METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) != ( ( VAR_2 ) - 1 ) ) { return false ; } return true ; },public boolean METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) < ( VAR_2 ) ) { return false ; } return true ; },"['Update BinaryOperator', 'Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",592
"public TYPE_1 METHOD_1 ( java.lang.String name ) { if ( ( VAR_1 . get ( name ) ) != null ) return VAR_1 . get ( name ) ; else return new TYPE_1 ( METHOD_2 ( STRING_1 ) , name ) ; }",public TYPE_1 METHOD_1 ( java.lang.String name ) { return VAR_1 . get ( name ) ; },"['Move Return', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",593
public java.lang.String toString ( ) { return ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) + ( VAR_3 ) ; },public java.lang.String toString ( ) { return ( ( STRING_1 + ( VAR_2 ) ) + STRING_3 ) + ( VAR_3 ) ; },"['Move BinaryOperator', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",594
public boolean METHOD_1 ( ) { return ( ( this ) instanceof TYPE_1 ) || ( ( this ) instanceof TYPE_2 ) ; },public boolean METHOD_1 ( ) { if ( ( ( this ) instanceof TYPE_1 ) || ( ( this ) instanceof TYPE_2 ) ) { return true ; } return false ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal']",595
"public boolean METHOD_1 ( ) { return ""0"" . equals ( result ) ; }",public boolean METHOD_1 ( ) { return ( result ) == 0 ; },"['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal', 'Delete Literal', 'Delete Invocation']",596
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_2 . getType ( ) . equals ( VAR_3 ) ) && ( ! ( METHOD_2 ( ) ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_2 . getType ( ) ) == ( VAR_3 ) ) && ( ! ( METHOD_2 ( ) ) ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",597
public void execute ( java.lang.String VAR_1 ) { VAR_2 = true ; VAR_3 . METHOD_1 ( VAR_1 ) ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_2 ( ) ; } },public void execute ( java.lang.String VAR_1 ) { VAR_2 = true ; VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",601
"void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) ;",void METHOD_1 ( java.lang.String VAR_1 ) ;,"['Delete TypeReference', 'Delete Parameter']",602
public java.lang.Object get ( int index ) { if ( ( index < 0 ) || ( index > ( ( size ) - 1 ) ) ) return null ; return VAR_1 [ index ] ; },public java.lang.Object get ( int index ) { if ( index > ( size ) ) return null ; return VAR_1 [ index ] ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move VariableRead', 'Delete Literal', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator']",603
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) == null ) { if ( ( VAR_3 ) != null ) VAR_3 . METHOD_2 ( VAR_4 ) ; } else { METHOD_3 ( VAR_5 ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_3 ) != null ) VAR_3 . METHOD_2 ( VAR_4 ) ; },"['Move If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",604
public boolean METHOD_1 ( int [ ] context ) { if ( ( VAR_1 . length ) == 0 ) return true ; else return VAR_2 . contains ( new TYPE_1 ( TYPE_2 . METHOD_2 ( context ) ) ) ; },public boolean METHOD_1 ( int [ ] context ) { return VAR_2 . contains ( new TYPE_1 ( TYPE_2 . METHOD_2 ( context ) ) ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",606
public void METHOD_1 ( TYPE_1 event ) { super . METHOD_1 ( event ) ; TYPE_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_3 . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 event ) { super . METHOD_1 ( event ) ; TYPE_3 . METHOD_2 ( ) ; TYPE_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; },['Move Invocation'],607
"public boolean METHOD_1 ( android.view.View VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( this , VAR_1 , ( ( VAR_2 . METHOD_4 ( ) ) - ( METHOD_5 ( ) ) ) ) ; }","public boolean METHOD_1 ( android.view.View VAR_1 ) { return ( ( METHOD_2 ( ) ) != null ) && ( METHOD_2 ( ) . METHOD_3 ( this , VAR_1 , ( ( VAR_2 . METHOD_4 ( ) ) - ( METHOD_5 ( ) ) ) ) ) ; }","['Insert BinaryOperator', 'Insert BinaryOperator', 'Move Invocation', 'Insert Invocation', 'Insert Literal']",608
"public static java.util.List < java.io.File > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { return TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , false ) ; }","public static java.util.List < java.io.File > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { return TYPE_1 . METHOD_1 ( VAR_1 , true , true , VAR_2 ) ; }","['Move VariableRead', 'Update Literal', 'Insert Literal']",609
public void METHOD_1 ( int VAR_1 ) { if ( ( response ) != null ) response . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( int VAR_1 ) { response . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",610
"public void METHOD_1 ( java.lang.String VAR_1 ) { METHOD_2 ( ( STRING_1 + VAR_1 ) , VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 . METHOD_3 ( VAR_1 ) ; },"['Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation']",611
protected boolean METHOD_1 ( ) { return ( ( ( VAR_1 ) != null ) && ( ( VAR_2 . getValue ( ) ) != null ) ) && ( ! ( VAR_2 . getValue ( ) . isEmpty ( ) ) ) ; },protected boolean METHOD_1 ( ) { return ( ( ( VAR_1 ) != null ) && ( ( VAR_2 . getValue ( ) ) != null ) ) && ( VAR_2 . getValue ( ) . isEmpty ( ) ) ; },"['Move Invocation', 'Delete UnaryOperator']",612
"public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( VAR_2 ) ; intent . METHOD_2 ( STRING_1 ) ; METHOD_3 ( intent , VAR_3 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = new android.content.Intent ( VAR_2 ) ; intent . METHOD_2 ( STRING_1 ) ; getActivity ( ) . METHOD_3 ( intent , VAR_3 ) ; }",['Insert Invocation'],613
"public static void main ( java.lang.String [ ] args ) throws TYPE_1 , java.io.IOException , TYPE_2 , TYPE_3 { TYPE_4 . METHOD_1 ( new TYPE_5 ( TYPE_6 . METHOD_2 ( args ) ) ) ; }","public static void main ( java.lang.String [ ] args ) throws TYPE_1 , java.io.IOException { new TYPE_5 ( TYPE_6 . METHOD_2 ( args ) ) ; }","['Move ConstructorCall', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation']",614
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 p : VAR_2 ) { if ( p . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) return p ; } return null ; },private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 p : VAR_2 ) { if ( ( p . METHOD_2 ( ) ) == VAR_1 ) return p ; } return null ; },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",616
"public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; } VAR_3 . put ( VAR_1 , VAR_2 ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; }","['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",618
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . getId ( ) ) == ( VAR_3 ) ) { VAR_4 . setText ( STRING_1 ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . getId ( ) ) == ( VAR_3 ) ) ; VAR_4 . setText ( STRING_1 ) ; },"['Move Invocation', 'Delete Block']",619
public double METHOD_1 ( ) { if ( ( VAR_1 ) != 0 ) { return ( ( int ) ( ( INT_1 * ( VAR_2 ) ) / ( VAR_1 ) ) ) ; } else { return 0 ; } },public double METHOD_1 ( ) { return ( ( int ) ( ( INT_1 * ( VAR_2 ) ) / ( VAR_1 ) ) ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",620
"public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( this ) ; if ( VAR_1 ) VAR_2 . METHOD_3 ( this , METHOD_4 ( ) ) ; }","public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( this ) ; VAR_2 . METHOD_3 ( this , METHOD_4 ( ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Block', 'Delete If']",622
"protected void METHOD_1 ( ) { METHOD_2 ( ) ; if ( METHOD_3 ( ) ) { METHOD_4 ( new android.content.Intent ( this , VAR_1 class ) ) ; TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) ; } super . METHOD_1 ( ) ; }","protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_4 ( new android.content.Intent ( this , VAR_1 class ) ) ; TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) ; super . METHOD_1 ( ) ; }","['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",623
public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_1 ( ) ; } status = VAR_2 ; },public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; status = VAR_2 ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",624
"public void METHOD_1 ( java.lang.String path ) { if ( ( this . path ) != null ) this . path = TYPE_1 . METHOD_2 ( path , this . path ) ; }","public void METHOD_1 ( java.lang.String path ) { this . path = TYPE_1 . METHOD_2 ( path , this . path ) ; }","['Move Assignment', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",625
"private void METHOD_1 ( ) { VAR_1 = VAR_2 . getString ( STRING_1 , VAR_3 ) ; getActivity ( ) . METHOD_2 ( VAR_4 . toUpperCase ( ) . replace ( STRING_2 , STRING_3 ) ) ; }","private void METHOD_1 ( ) { VAR_1 = VAR_2 . getString ( STRING_1 , VAR_3 ) . toUpperCase ( ) . replace ( STRING_2 , STRING_3 ) ; getActivity ( ) . METHOD_2 ( VAR_1 ) ; }","['Insert Invocation', 'Update Invocation', 'Move Invocation', 'Move Invocation', 'Insert TypeAccess', 'Update Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",626
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 ; } else { return TYPE_1 . METHOD_2 ( parameters ) ; } },public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( parameters ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",627
public static java.lang.String METHOD_1 ( final TYPE_1 field ) { if ( field == null ) { throw new TYPE_2 ( STRING_1 ) ; } return TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ; },public static java.lang.String METHOD_1 ( final TYPE_1 field ) { if ( field == null ) { throw new TYPE_2 ( STRING_1 ) ; } return TYPE_3 . METHOD_2 ( java.util.Arrays.asList ( VAR_1 . getName ( ) ) ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Move Invocation']",629
public static java.util.List < TYPE_1 > METHOD_1 ( ) { return java.util.Arrays.asList ( VAR_1 ) ; },public static TYPE_1 [ ] METHOD_1 ( ) { return VAR_1 ; },"['Update TypeReference', 'Insert FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",630
public void METHOD_1 ( java.lang.Integer VAR_1 ) throws java.lang.Exception { if ( ( this . VAR_1 ) != null ) if ( ! ( this . VAR_2 . equals ( VAR_1 ) ) ) throw new java.lang.Exception ( STRING_1 ) ; this . VAR_1 = VAR_1 ; },public void METHOD_1 ( java.lang.Integer VAR_1 ) throws java.lang.Exception { if ( ( this . VAR_1 ) != null ) if ( ( this . VAR_1 ) != VAR_1 ) throw new java.lang.Exception ( STRING_1 ) ; this . VAR_1 = VAR_1 ; },"['Insert BinaryOperator', 'Update FieldRead', 'Move FieldRead', 'Move VariableRead', 'Delete Invocation', 'Delete UnaryOperator']",631
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",634
public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) && ( ( VAR_2 ) != ( VAR_3 ) ) ) { TYPE_1 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( ) ; } },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",635
"public TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( this . VAR_1 . METHOD_1 ( ) . toString ( ) . replaceAll ( STRING_1 , VAR_2 ) ) ; }",public TYPE_1 METHOD_1 ( ) { return VAR_2 ; },"['Insert FieldRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall']",636
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { char first = VAR_1 . METHOD_2 ( 0 ) ; if ( ( first < CHAR_1 ) || ( CHAR_2 < first ) ) { VAR_1 = VAR_2 . substring ( 1 ) ; } return VAR_1 ; },public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { char first = VAR_1 . METHOD_2 ( 0 ) ; if ( ( first < CHAR_1 ) && ( CHAR_2 < first ) ) { VAR_1 = VAR_2 . substring ( 1 ) ; } return VAR_1 ; },['Update BinaryOperator'],637
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( getContext ( ) ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( false ) ; if ( ! ( getActivity ( ) . METHOD_4 ( ) ) ) VAR_2 . show ( ) ; },public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( getContext ( ) ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( false ) ; VAR_2 . show ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",638
public boolean METHOD_1 ( ) { return java.lang.Boolean . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) . toString ( ) ) ; },public boolean METHOD_1 ( ) { return ( ( boolean ) ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) ; },"['Move Invocation', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",640
public void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { VAR_3 = 0 ; METHOD_3 ( ) ; } },public void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 = 0 ; METHOD_3 ( ) ; },"['Move Assignment', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",642
public double [ ] position ( ) { return position . METHOD_1 ( ) ; },public double [ ] position ( ) { return position ; },"['Move FieldRead', 'Delete Invocation']",643
"public void METHOD_1 ( final int VAR_1 , final int VAR_2 , final android.content.Intent data ) { if ( VAR_1 == ( TYPE_1 . METHOD_2 ( ) ) ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 , data ) ; } }","public void METHOD_1 ( final int VAR_1 , final int VAR_2 , final android.content.Intent data ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 , data ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",644
public java.lang.String getName ( ) { return VAR_1 . get ( ) ; },public java.lang.String getName ( ) { return name ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",645
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( VAR_3 . METHOD_2 ( ) ) ) VAR_4 . METHOD_3 ( true ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_3 . METHOD_2 ( ) ) VAR_4 . METHOD_3 ( true ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",646
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( ) ) METHOD_3 ( ) ; return ( VAR_2 ) == null ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; return ( VAR_2 ) == null ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",647
public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",648
public java.util.List < TYPE_1 > METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; if ( VAR_1 ) { return VAR_2 ; } else { return VAR_3 ; } },public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_3 ) == null ) { METHOD_2 ( STRING_1 ) ; if ( VAR_1 ) { return VAR_2 ; } else { return VAR_3 ; } } else { return VAR_3 ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Invocation', 'Move If', 'Insert Return', 'Insert FieldRead']",649
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == 1 ) { VAR_2 = INT_1 ; } VAR_3 [ 1 ] = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) >= INT_1 ) { VAR_3 [ 1 ] = VAR_1 ; } if ( ( VAR_2 ) < INT_1 ) { VAR_2 = INT_1 ; } },"['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Insert BinaryOperator', 'Insert FieldRead', 'Move Assignment', 'Insert FieldRead', 'Insert FieldRead', 'Delete Literal']",651
public void METHOD_1 ( ) { if ( ( ( key ) == ( VAR_1 ) ) && ( ( VAR_2 . size ( ) ) != 0 ) ) VAR_3 = ( ++ ( VAR_3 ) ) % ( VAR_2 . size ( ) ) ; },public void METHOD_1 ( ) { if ( ( key ) == ( VAR_1 ) ) VAR_3 = ( ++ ( VAR_3 ) ) % ( VAR_2 . size ( ) ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",652
public void METHOD_1 ( boolean VAR_1 ) { if ( ! ( VAR_2 ) ) { setState ( ( VAR_1 ? VAR_3 : VAR_4 ) ) ; } super . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( boolean VAR_1 ) { setState ( ( VAR_1 ? VAR_3 : VAR_4 ) ) ; super . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",654
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",655
public int METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return 0 ; } else { return VAR_2 . size ( ) ; } },public int METHOD_1 ( ) { return VAR_2 . size ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",656
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) return VAR_3 . get ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( ) ; else return false ; },public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_3 . get ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",657
"public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { METHOD_1 ( METHOD_2 ( ) . getName ( ) , VAR_1 ) ; }","public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { METHOD_1 ( METHOD_2 ( ) , VAR_1 ) ; }","['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",658
java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 . METHOD_2 ( ) ; else return null ; },java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",659
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; this . METHOD_4 ( true ) ; VAR_1 . METHOD_5 ( ) . METHOD_6 ( STRING_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; this . METHOD_4 ( true ) ; VAR_1 . METHOD_6 ( STRING_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",660
public void update ( ) throws TYPE_1 { METHOD_1 ( ) ; if ( ( state ) != ( VAR_1 ) ) { VAR_2 = METHOD_2 ( ) ; VAR_3 = new java.util.Date ( ) ; } METHOD_3 ( ) ; },public void update ( ) throws TYPE_1 { METHOD_1 ( ) ; if ( ( state ) != ( VAR_1 ) ) { VAR_2 = METHOD_2 ( ) ; VAR_3 = new java.util.Date ( ) ; METHOD_3 ( ) ; } },['Move Invocation'],661
public static boolean METHOD_1 ( int VAR_1 ) { return ( VAR_1 < 0 ) || ( VAR_1 >= ( VAR_2 ) ) ; },public static boolean METHOD_1 ( int VAR_1 ) { return VAR_1 >= ( VAR_2 ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",662
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( STRING_1 ) ) { return ( VAR_1 . METHOD_3 ( STRING_2 ) ) != null ; } return false ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_3 ( STRING_2 ) ) != null ; },"['Move Return', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",663
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_4 . getName ( ) . equals ( VAR_1 ) ) { return VAR_2 ; } } return null ; },public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { if ( ( VAR_4 . getName ( ) ) == VAR_1 ) { return VAR_2 ; } } return null ; },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",664
"public static void METHOD_1 ( android.content.Context content , java.lang.CharSequence text ) { TYPE_1 . METHOD_2 ( content . METHOD_3 ( ) , text ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_3 . show ( ) ; }","public static void METHOD_1 ( android.content.Context content , java.lang.CharSequence text ) { TYPE_1 . METHOD_2 ( content , text ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_3 . show ( ) ; }","['Move VariableRead', 'Delete Invocation']",665
private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; METHOD_2 ( VAR_2 ) ; },['Move Invocation'],666
"public int METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( ( ( VAR_1 ) - ( VAR_2 ) ) , VAR_3 ) ; }",public int METHOD_1 ( ) { return ( VAR_1 ) - ( VAR_2 ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",667
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { ( this . VAR_3 [ ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) - 1 ) ] [ ( ( TYPE_1 . METHOD_2 ( VAR_2 ) ) - 1 ) ] ) ++ ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { ( this . VAR_3 [ ( ( TYPE_1 . METHOD_2 ( VAR_2 ) ) - 1 ) ] [ ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) - 1 ) ] ) ++ ; }","['Move BinaryOperator', 'Move BinaryOperator']",668
"public boolean METHOD_1 ( java.lang.String data ) { return METHOD_1 ( data , null ) ; }","public void METHOD_1 ( java.lang.String data ) { METHOD_1 ( data , null ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",669
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 ) . METHOD_3 ( VAR_5 ) ; TYPE_5 VAR_6 = METHOD_4 ( VAR_1 ) ; return METHOD_5 ( VAR_7 . build ( ) , VAR_6 , VAR_8 ) ; }","public void METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 ) . METHOD_3 ( VAR_5 ) ; TYPE_5 VAR_6 = METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_7 . build ( ) , VAR_6 , VAR_8 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",670
"private java.lang.Integer METHOD_1 ( TYPE_1 VAR_1 , java.lang.String key ) { return java.lang.Integer.parseInt ( ( ( java.lang.String ) ( VAR_2 . get ( key ) ) ) ) ; }","private java.lang.Integer METHOD_1 ( TYPE_1 VAR_1 , java.lang.String key ) { return ( ( java.lang.Integer ) ( VAR_2 . get ( key ) ) ) ; }","['Move Invocation', 'Update TypeReference', 'Delete TypeAccess', 'Delete Invocation']",671
public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 = false ; return true ; } else { return METHOD_3 ( ) . METHOD_1 ( ) ; } },public boolean METHOD_1 ( ) { VAR_1 = false ; return true ; },"['Move Assignment', 'Move Return', 'Delete Invocation', 'Delete Block', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",672
public int METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_2 ( ) ; } else { return INT_1 ; } },public int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",673
"public void METHOD_1 ( java.lang.String message , TYPE_1 VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { java.lang.System.out.println ( message ) ; } }","public void METHOD_1 ( java.lang.String message , TYPE_1 VAR_1 ) { java.lang.System.out.println ( message ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",674
protected boolean METHOD_1 ( ) { return ( ( VAR_1 . METHOD_2 ( ) ) || ( VAR_1 . METHOD_3 ( ) ) ) || ( VAR_1 . METHOD_4 ( ) ) ; },protected boolean METHOD_1 ( ) { return VAR_1 . METHOD_4 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete BinaryOperator']",675
"public static TYPE_1 METHOD_1 ( java.lang.String id ) { if ( TYPE_2 . METHOD_2 ( ) ) { return VAR_1 . METHOD_3 ( VAR_2 class , id ) ; } else { return VAR_1 . METHOD_3 ( VAR_2 class , java.lang.Integer . METHOD_4 ( id ) ) ; } }","public static TYPE_1 METHOD_1 ( java.lang.String id ) { return VAR_1 . METHOD_3 ( VAR_2 class , id ) ; }","['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",676
"private void METHOD_1 ( int position ) { if ( ( VAR_1 ) != null ) { METHOD_1 ( position , VAR_2 . id ) ; } else { METHOD_1 ( position , ( - 1 ) ) ; } }","private void METHOD_1 ( int position ) { METHOD_1 ( position , VAR_2 . id ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete VariableRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",677
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; if ( ( VAR_3 ) != null ) VAR_3 . METHOD_3 ( VAR_4 ) ; if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_4 ( VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_4 ( VAR_1 ) ; } }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",678
private void METHOD_1 ( ) { if ( ( ( ( VAR_1 ) != null ) && ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) && ( ( VAR_3 ) <= 0 ) ) { VAR_1 . METHOD_4 ( VAR_4 ) ; } },private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) { VAR_1 . METHOD_4 ( VAR_4 ) ; } },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",680
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { new TYPE_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { new TYPE_2 ( ) ; },"['Move ConstructorCall', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",681
public double [ ] METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_1 ( ) ; return VAR_2 . METHOD_1 ( ) ; },public double [ ] METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_1 ( ) ; return VAR_1 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",683
"public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) == ( VAR_3 ) ) { METHOD_2 ( ) ; } else { TYPE_1 . METHOD_3 ( VAR_4 , ( STRING_1 + ( VAR_2 ) ) ) ; } }",public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( this . VAR_2 ) == ( VAR_3 ) ) { METHOD_2 ( ) ; } },"['Insert ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block']",684
public void init ( android.content.Context context ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( context ) ; } if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_2 ( context ) ; } },public void init ( android.content.Context context ) { VAR_1 = new TYPE_1 ( context ) ; VAR_2 = new TYPE_2 ( context ) ; },"['Move Assignment', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",685
private boolean METHOD_1 ( ) { return ( ( VAR_1 ) == ( VAR_2 ) ) && ( ( VAR_3 ) != null ) ; },private boolean METHOD_1 ( ) { return ( VAR_1 ) == ( VAR_2 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",686
"public TYPE_1 METHOD_1 ( boolean VAR_1 , boolean VAR_2 ) { return VAR_3 . METHOD_1 ( ( ( VAR_4 ) || VAR_1 ) , ( ( VAR_5 ) || VAR_2 ) ) ; }","public TYPE_1 METHOD_1 ( ) { return METHOD_1 ( VAR_4 , VAR_5 ) ; }","['Update TypeAccess', 'Insert TypeAccess', 'Insert TypeAccess', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator']",688
"public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == STRING_1 ) { return VAR_2 ; } else if ( VAR_1 == STRING_2 ) { return VAR_3 ; } else { throw new TYPE_4 ( ) ; } }","public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == STRING_1 ) { return VAR_2 ; } else { throw new TYPE_4 ( ) ; } }","['Move If', 'Move BinaryOperator', 'Move Block', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",689
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",690
protected void execute ( ) { VAR_1 . METHOD_1 ( ( ( ( ( ( VAR_2 ) + ( VAR_3 ) ) + INT_1 ) % INT_1 ) - INT_2 ) ) ; },protected void execute ( ) { VAR_1 . METHOD_1 ( ( ( ( ( VAR_2 ) + ( VAR_3 ) ) + INT_1 ) % INT_1 ) ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",691
private void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) != ( - 1 ) ) { VAR_2 . remove ( VAR_1 ) ; VAR_1 = - 1 ; METHOD_2 ( ) ; } },private void METHOD_1 ( TYPE_1 event ) { VAR_2 . remove ( VAR_1 ) ; VAR_1 = - 1 ; METHOD_2 ( ) ; },"['Move Invocation', 'Move Assignment', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",692
"public void METHOD_1 ( java.lang.Exception VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; }","public void METHOD_1 ( java.lang.Exception VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; if ( null != ( VAR_3 ) ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert FieldRead', 'Move Invocation']",693
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) return ; if ( METHOD_2 ( VAR_2 , ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ) { VAR_3 . METHOD_4 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) return ; METHOD_2 ( VAR_2 , ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",694
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( ) ) ) && ( ( VAR_1 . METHOD_4 ( ) ) == null ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( ) ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",695
"public java.lang.String METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; return METHOD_4 ( VAR_2 , TYPE_1 . METHOD_5 ( ) ) ; } catch ( TYPE_2 VAR_3 ) { VAR_3 . METHOD_6 ( ) ; return null ; } }","public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_2 , TYPE_1 . METHOD_5 ( ) ) ; } catch ( TYPE_2 VAR_3 ) { VAR_3 . METHOD_6 ( ) ; } }","['Update TypeReference', 'Move Invocation', 'Delete Return', 'Delete Literal', 'Delete Return']",696
public void METHOD_1 ( TYPE_1 event ) { if ( ! ( event . METHOD_2 ( ) . VAR_1 ) ) TYPE_2 . METHOD_3 ( event . METHOD_2 ( ) ) . METHOD_4 ( event ) ; },public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . METHOD_3 ( event . METHOD_2 ( ) ) . METHOD_4 ( event ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",698
public void METHOD_1 ( ) { java.lang.System.out.println ( this . name ) ; if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( ) ; } },public void METHOD_1 ( ) { java.lang.System.out.println ( this . name ) ; this . VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",699
public static void METHOD_1 ( ) { if ( VAR_1 ) VAR_2 . METHOD_2 ( STRING_1 ) ; },public static void METHOD_1 ( ) { VAR_2 . METHOD_2 ( STRING_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",701
public void METHOD_1 ( ) { METHOD_2 ( buffer ) ; },public void METHOD_1 ( ) { if ( status >= 0 ) { METHOD_2 ( buffer ) ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Invocation']",702
public void METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",705
public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( ) . toString ( ) ; },public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete Invocation']",707
public void METHOD_1 ( android.view.View view ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; } },public void METHOD_1 ( android.view.View view ) { VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",710
"private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . name ( ) . substring ( 0 , 1 ) . toLowerCase ( ) ; }","private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . name ( ) . substring ( 0 , 1 ) ; }","['Move Invocation', 'Delete Invocation']",712
"public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 , VAR_4 . id ) , METHOD_4 ( VAR_1 ) ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , METHOD_4 ( VAR_1 ) ) ; return VAR_1 ; }","['Move TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",713
private void METHOD_1 ( ) { if ( ( VAR_1 ) != 0L ) { METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 ) ; METHOD_3 ( 0L ) ; VAR_3 = true ; } },private void METHOD_1 ( ) { METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 ) ; METHOD_3 ( 0L ) ; VAR_3 = true ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",714
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return output ; },public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return METHOD_1 ( ) ; },"['Insert Invocation', 'Delete FieldRead']",715
public void start ( ) { if ( ! ( state ) ) startTime = TYPE_1 . METHOD_1 ( ) ; state = true ; },public void start ( ) { startTime = TYPE_1 . METHOD_1 ( ) ; state = true ; },"['Move Assignment', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",716
protected void METHOD_1 ( TYPE_1 < ? super TYPE_2 > VAR_1 ) { VAR_2 . to ( VAR_3 class ) . METHOD_2 ( ) ; },protected void METHOD_1 ( TYPE_1 < ? super TYPE_2 > VAR_1 ) { VAR_2 . to ( VAR_3 class ) ; },"['Move Invocation', 'Delete Invocation']",717
public java.lang.String toString ( ) { return ( ( ( ( ( ( STRING_1 + ( n ) ) + STRING_2 ) + ( c ) ) + STRING_3 ) + ( VAR_1 ) ) + STRING_4 ) + ( f ) ; },public java.lang.String toString ( ) { return ( ( ( ( STRING_1 + ( n ) ) + STRING_2 ) + ( c ) ) + STRING_3 ) + ( VAR_1 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",718
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 . start ( ) ; } } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 . start ( ) ; } },"['Move If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",719
public boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_1 ( ) ) && ( ! ( VAR_1 . METHOD_2 ( ) ) ) ; },public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",720
private void METHOD_1 ( ) { if ( ( VAR_1 ) == INT_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 . setText ( VAR_2 . METHOD_2 ( ) ) ; VAR_4 . setText ( VAR_2 . METHOD_3 ( ) ) ; } } },private void METHOD_1 ( ) { if ( ( VAR_1 ) == INT_1 ) { VAR_3 . setText ( VAR_2 . METHOD_2 ( ) ) ; VAR_4 . setText ( VAR_2 . METHOD_3 ( ) ) ; } },"['Move If', 'Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",721
public void execute ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_1 ( list . METHOD_2 ( VAR_2 ) ) ; },public void execute ( TYPE_1 VAR_1 ) { list . METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",723
public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) && ( ( VAR_2 . METHOD_3 ( ) ) != null ) ) { VAR_2 . METHOD_4 ( VAR_3 ) ; } },public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_4 ( VAR_3 ) ; } },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",724
public int METHOD_1 ( ) { return ( ( INT_1 + ( java.lang.Long . METHOD_2 ( VAR_1 ) . METHOD_1 ( ) ) ) * INT_1 ) + ( java.lang.Long . METHOD_2 ( VAR_2 ) . METHOD_1 ( ) ) ; },public int METHOD_1 ( ) { return ( ( INT_1 + ( java.lang.Long . METHOD_1 ( VAR_1 ) ) ) * INT_1 ) + ( java.lang.Long . METHOD_1 ( VAR_2 ) ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move Invocation', 'Delete Invocation', 'Delete Invocation']",725
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( name ) ) + CHAR_1 ) + STRING_3 ) + ( size ) ) + STRING_4 ) + ( VAR_1 ) ) + CHAR_2 ; },public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + STRING_2 ) + ( name ) ) + CHAR_1 ) + STRING_3 ) + ( size ) ) + CHAR_2 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",726
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) ) { VAR_1 . METHOD_3 ( ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",727
private boolean METHOD_1 ( ) { if ( ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) != null ) && ( ! ( VAR_3 . METHOD_3 ( STRING_1 ) ) ) ) { return true ; } return false ; },private boolean METHOD_1 ( ) { if ( ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) != null ) && ( ( VAR_3 ) != STRING_1 ) ) { return true ; } return false ; },"['Insert BinaryOperator', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator']",728
"public java.lang.Object [ ] get ( ) { return new java.lang.Object [ ] { this . VAR_1 , this . VAR_2 , this . VAR_3 , this . VAR_4 } ; }","public java.lang.Object [ ] get ( ) { return new java.lang.Object [ ] { this . VAR_1 , this . VAR_3 , this . VAR_2 , this . VAR_4 } ; }",['Move FieldRead'],729
"private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ) { VAR_3 = VAR_1 ; } else { VAR_2 . METHOD_5 ( VAR_1 ) ; VAR_3 = VAR_1 ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_1 ) ) { VAR_3 = VAR_1 ; } else { VAR_2 . METHOD_5 ( VAR_1 ) ; VAR_3 = VAR_1 ; } }","['Move VariableRead', 'Delete Invocation']",730
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 . size ( ) ) < ( VAR_3 ) ) && ( ( VAR_1 . METHOD_2 ( ) ) == ( this . name ) ) ) { VAR_2 . add ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . size ( ) ) < ( VAR_3 ) ) { VAR_2 . add ( VAR_1 ) ; } },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",732
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; return true ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; return true ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation']",734
"private void METHOD_1 ( ) { int VAR_1 = VAR_2 . x ; int VAR_3 = VAR_2 . y ; if ( ! ( METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ) ) { VAR_3 ++ ; } METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; }","private void METHOD_1 ( ) { int VAR_1 = VAR_2 . x ; int VAR_3 = VAR_2 . y ; if ( ! ( METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ) ) ; { VAR_3 ++ ; } METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; }","['Move UnaryOperator', 'Delete Block']",735
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; METHOD_4 ( ) . METHOD_5 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_4 ( ) . METHOD_5 ( ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",736
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( VAR_1 . size ( ) ) > 0 ) METHOD_4 ( ) ; if ( ( VAR_2 ) != null ) { METHOD_5 ( ) ; METHOD_6 ( ) ; } },public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",738
"public void METHOD_1 ( java.lang.String string ) { if ( VAR_1 ) java.lang.System.out.println ( string ) ; VAR_2 = ( ( VAR_2 ) + ""\n"" ) + string ; if ( VAR_3 ) VAR_4 . getView ( ) . METHOD_2 ( string ) ; }","public void METHOD_1 ( java.lang.String string ) { if ( VAR_1 ) java.lang.System.out.println ( string ) ; VAR_2 = ( ( VAR_2 ) + ""\n"" ) + string ; VAR_4 . getView ( ) . METHOD_2 ( string ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",739
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . add ( STRING_1 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",740
"public void METHOD_1 ( java.lang.String id ) { if ( ( VAR_1 ) && ( VAR_2 ) ) VAR_3 . i ( STRING_1 , ( STRING_2 + id ) ) ; VAR_4 . METHOD_2 ( ( STRING_3 + id ) ) ; }",public void METHOD_1 ( java.lang.String id ) { VAR_4 . METHOD_2 ( ( STRING_3 + id ) ) ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",741
"public TYPE_1 add ( TYPE_2 VAR_1 ) { if ( METHOD_1 ( VAR_1 ) ) { if ( ( VAR_2 ) != null ) { VAR_3 . add ( this , VAR_1 ) ; } else { METHOD_2 ( ) ; } } return this ; }","public TYPE_1 add ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 . add ( this , VAR_1 ) ; } else { METHOD_1 ( VAR_1 ) ; } return this ; }","['Move If', 'Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",742
public java.lang.String toString ( ) { return ( ( ( ( ( type ) + STRING_1 ) + ( name ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ; },public java.lang.String toString ( ) { return ( ( type ) + STRING_1 ) + ( name ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",744
public boolean METHOD_1 ( ) { return ! ( this . VAR_1 . METHOD_2 ( ) ) ; },public boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",745
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 . toString ( ) ) ; METHOD_3 ( VAR_3 . toString ( ) ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . toString ( ) ) ; METHOD_3 ( VAR_3 . toString ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",746
public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 ) ) ; },public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( false ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 ) ) ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Move Invocation']",748
public boolean METHOD_1 ( java.lang.String str ) { return ! ( VAR_1 . contains ( STRING_1 ) ) ; },public boolean METHOD_1 ( java.lang.String str ) { if ( VAR_1 . contains ( STRING_1 ) ) { return false ; } return true ; },"['Insert If', 'Move Invocation', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal', 'Delete UnaryOperator']",749
public java.lang.Boolean METHOD_1 ( ) { return ( this . VAR_1 . getBoolean ( VAR_2 ) ) && ( this . METHOD_2 ( ) ) ; },public java.lang.Boolean METHOD_1 ( ) { return ( this . VAR_1 . getBoolean ( VAR_2 ) ) && ( ! ( this . METHOD_2 ( ) ) ) ; },"['Insert UnaryOperator', 'Move Invocation']",750
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( VAR_2 . METHOD_2 ( ) . isEmpty ( ) ) ) { return false ; } return METHOD_1 ( VAR_2 . METHOD_2 ( ) , VAR_1 ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( VAR_2 . METHOD_2 ( ) . isEmpty ( ) ) ) { return false ; } METHOD_1 ( VAR_2 . METHOD_2 ( ) , VAR_1 ) ; return false ; }","['Move Invocation', 'Insert Literal']",752
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 ) != ( VAR_2 . out ) ) ) VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { if ( ( VAR_1 ) != ( VAR_2 . out ) ) VAR_1 . METHOD_2 ( ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",753
public static < TYPE_1 > boolean isEmpty ( TYPE_2 < TYPE_1 > VAR_1 ) { return ! ( VAR_2 . iterator ( ) . METHOD_1 ( ) ) ; },public static < TYPE_1 > boolean isEmpty ( TYPE_2 < TYPE_1 > VAR_1 ) { return VAR_2 . iterator ( ) . METHOD_1 ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",754
public void update ( ) { METHOD_1 ( ) ; METHOD_2 ( ) ; execute ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; java.lang.System.out.println ( STRING_1 ) ; },public void update ( ) { METHOD_1 ( ) ; execute ( ) ; METHOD_3 ( ) ; METHOD_2 ( ) ; METHOD_4 ( ) ; java.lang.System.out.println ( STRING_1 ) ; },['Move Invocation'],756
public final void METHOD_1 ( TYPE_1 listener ) { if ( listener != null ) { VAR_1 . remove ( listener ) ; } },public final void METHOD_1 ( TYPE_1 listener ) { VAR_1 . remove ( listener ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",757
"public void i ( java.lang.Throwable VAR_1 ) { METHOD_1 ( VAR_2 , VAR_1 , null ) ; }","public void i ( java.lang.Throwable VAR_1 ) { METHOD_1 ( VAR_2 , null , VAR_1 ) ; }",['Move VariableRead'],758
public android.view.View METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_1 ( ) ; } return null ; },public android.view.View METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",759
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; if ( ! ( VAR_3 ) ) { VAR_1 . METHOD_1 ( ) ; } VAR_3 = true ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_1 ( ) ; VAR_3 = true ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",760
public boolean METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_4 ( ) ; return true ; },public boolean METHOD_1 ( ) { TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_4 ( ) ; VAR_1 . METHOD_2 ( ) ; return true ; },['Move Invocation'],762
"public TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 , true ) ; METHOD_3 ( VAR_1 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; METHOD_3 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 , true ) ; return VAR_1 ; }",['Move Invocation'],763
"public static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < java.util.List < TYPE_2 > > VAR_2 ) { if ( VAR_1 != null ) { TYPE_3 . METHOD_2 ( VAR_1 , null , VAR_2 ) ; } }","public static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < java.util.List < TYPE_2 > > VAR_2 ) { TYPE_3 . METHOD_2 ( VAR_1 , null , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",766
public void METHOD_1 ( ) { ( VAR_1 ) ++ ; if ( ( VAR_1 ) >= ( VAR_2 . size ( ) ) ) { VAR_1 = 0 ; } },public void METHOD_1 ( ) { ( VAR_1 ) ++ ; if ( ( ( VAR_1 ) + 1 ) >= ( VAR_2 . size ( ) ) ) { VAR_1 = 0 ; } },"['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",768
public TYPE_1 METHOD_1 ( int position ) { return VAR_1 . get ( position ) ; },public TYPE_1 METHOD_1 ( int position ) { if ( ( VAR_1 . size ( ) ) > 0 ) return VAR_1 . get ( position ) ; else return null ; },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Block', 'Insert Invocation', 'Insert Literal', 'Move Return', 'Insert Return', 'Insert TypeAccess', 'Insert Literal']",769
public static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . field ( VAR_4 ) ; if ( VAR_2 != null ) return TYPE_1 . METHOD_2 ( VAR_2 ) ; return null ; },public static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_3 . field ( VAR_4 ) ; return TYPE_1 . METHOD_2 ( VAR_2 ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",770
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . to ( VAR_2 class ) ; METHOD_3 ( VAR_1 class ) ; METHOD_2 ( VAR_2 class ) ; },public void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . to ( VAR_2 class ) ; METHOD_3 ( VAR_1 class ) ; },"['Delete TypeAccess', 'Delete Invocation']",771
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 ; } else return null ; },public TYPE_1 METHOD_1 ( ) { return VAR_1 ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",772
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( VAR_4 ) . toUpperCase ( ) ; VAR_5 = TYPE_1 . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_5 ) ; METHOD_5 ( STRING_1 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 = TYPE_1 . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_5 ) ; METHOD_5 ( STRING_1 ) ; },"['Move Invocation', 'Delete Invocation']",773
"java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) ;",java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_2 ) ;,"['Delete TypeReference', 'Delete Parameter']",774
public long getTime ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_1 ( VAR_1 ) ) { return VAR_3 . get ( VAR_1 ) ; } return 0L ; },public long getTime ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_1 ( VAR_1 ) ) { return VAR_3 . get ( VAR_1 ) ; } else { return 0L ; } },"['Insert Block', 'Move Return']",775
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String value ) throws TYPE_1 { writer . METHOD_1 ( VAR_1 , VAR_2 , TYPE_2 . METHOD_2 ( value ) ) ; }","public void METHOD_1 ( java.lang.String VAR_2 , java.lang.String value ) throws TYPE_1 { writer . METHOD_1 ( VAR_2 , METHOD_2 ( value ) ) ; }","['Update TypeAccess', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",776
"public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) != VAR_1 ) { if ( TYPE_1 . METHOD_2 ( getActivity ( ) , this ) ) { VAR_2 = VAR_1 ; } } }","public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) != VAR_1 ) { VAR_2 = VAR_1 ; TYPE_1 . METHOD_2 ( getActivity ( ) , this ) ; } }","['Move If', 'Move BinaryOperator', 'Move Invocation', 'Delete Block', 'Delete If']",777
public java.lang.String toString ( ) { return ( ( VAR_1 ) + STRING_1 ) + ( VAR_2 ) ; },public java.lang.String toString ( ) { return new java.lang.StringBuilder ( ) . append ( VAR_1 ) . append ( STRING_1 ) . append ( VAR_2 ) . toString ( ) ; },"['Insert Invocation', 'Insert Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Insert Invocation', 'Insert TypeAccess', 'Insert ConstructorCall', 'Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",778
public boolean METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( METHOD_3 ( VAR_1 ) ) != null ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal', 'Delete TypeAccess', 'Delete Invocation']",780
private int METHOD_1 ( ) { int count = 0 ; for ( TYPE_1 VAR_1 : TYPE_2 ) if ( ( VAR_1 instanceof TYPE_3 ) || ( VAR_1 instanceof TYPE_4 ) ) count ++ ; return count ; },private int METHOD_1 ( ) { int count = 0 ; for ( TYPE_1 VAR_1 : TYPE_2 ) if ( VAR_1 instanceof TYPE_3 ) count ++ ; return count ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete BinaryOperator']",781
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { METHOD_2 ( VAR_2 , java.lang.String . METHOD_3 ( VAR_1 ) ) ; return this ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { METHOD_2 ( VAR_2 , VAR_1 ) ; return this ; }","['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",783
public boolean METHOD_1 ( ) { return ( VAR_1 ) && ( ( VAR_2 ) != null ) ; },public boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",786
"public void METHOD_1 ( int position , java.util.Collection < TYPE_1 > VAR_1 ) { VAR_2 . METHOD_2 ( position , VAR_1 ) ; TYPE_2 . METHOD_3 ( position , VAR_3 . size ( ) ) ; TYPE_2 . METHOD_4 ( position , METHOD_5 ( ) ) ; }","public void METHOD_1 ( int position , java.util.Collection < TYPE_1 > VAR_1 ) { TYPE_2 . METHOD_3 ( position , VAR_3 . size ( ) ) ; VAR_2 . METHOD_2 ( position , VAR_1 ) ; TYPE_2 . METHOD_4 ( position , METHOD_5 ( ) ) ; }",['Move Invocation'],787
public static java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { return ( STRING_1 + STRING_2 ) + ( VAR_1 . METHOD_2 ( ) . getValue ( ) ) ; },public static java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { return new java.lang.String ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 . METHOD_2 ( ) . getValue ( ) ) ) ) ; },"['Insert ConstructorCall', 'Move BinaryOperator']",788
public double METHOD_1 ( double y ) { return ( ( ( y - ( c ) ) * ( b ) ) / ( VAR_1 ) ) + ( a ) ; },public double METHOD_1 ( double y ) { return ( ( ( ( y - ( c ) ) + 0.0 ) * ( b ) ) / ( VAR_1 ) ) + ( a ) ; },"['Insert BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Update BinaryOperator', 'Move FieldRead', 'Update BinaryOperator', 'Move FieldRead', 'Insert Literal']",790
public int METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 . isEmpty ( ) ) { return 0 ; } else { return VAR_3 . get ( 0 ) . METHOD_3 ( ) ; } },public int METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = METHOD_2 ( VAR_1 ) ; return VAR_3 . get ( 0 ) . METHOD_3 ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",791
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; if ( VAR_2 ) { METHOD_3 ( ) ; } }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; METHOD_3 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",793
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; VAR_3 . METHOD_3 ( VAR_4 , VAR_1 , VAR_5 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_6 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; VAR_3 . METHOD_3 ( VAR_5 , VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_6 ) ; }","['Move VariableRead', 'Delete TypeAccess']",794
protected TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_2 . METHOD_2 ( ) . contains ( VAR_1 ) ) ) { return VAR_1 ; } else { return null ; } },protected TYPE_1 METHOD_1 ( ) { return VAR_1 ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",797
"protected java.lang.String METHOD_1 ( java.lang.String content ) { return VAR_1 . replace ( ""\t"" , STRING_1 ) . replace ( ""\n"" , STRING_2 ) . replace ( STRING_3 , STRING_1 ) . replace ( STRING_4 , STRING_5 ) ; }","protected java.lang.String METHOD_1 ( java.lang.String content ) { return VAR_1 . replace ( ""\t"" , STRING_1 ) . replace ( ""\n"" , STRING_2 ) . replace ( STRING_4 , STRING_5 ) ; }","['Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",798
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; } this . VAR_1 = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; this . VAR_1 = VAR_1 ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",799
"public void METHOD_1 ( TYPE_1 event , float x , float y ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 = VAR_4 ; VAR_5 . METHOD_3 ( VAR_6 ) ; VAR_7 . METHOD_4 ( ) ; }","public void METHOD_1 ( TYPE_1 event , float x , float y ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 = VAR_4 ; VAR_5 . METHOD_3 ( VAR_6 ) ; }","['Delete TypeAccess', 'Delete Invocation']",801
public TYPE_1 METHOD_1 ( ) { if ( this . VAR_1 ) { return this . VAR_2 . METHOD_2 ( ) ; } return this . VAR_3 ; },public TYPE_1 METHOD_1 ( ) { if ( this . VAR_1 ) { this . VAR_2 . METHOD_2 ( ) ; } return this . VAR_3 ; },"['Move Invocation', 'Delete Return']",802
private static void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) return ; VAR_2 . remove ( VAR_1 ) . end ( ) ; },private static void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) return ; VAR_2 . get ( VAR_1 ) . end ( ) ; VAR_2 . remove ( VAR_1 ) ; },"['Move Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Insert VariableRead']",804
"protected void add ( java.lang.String name , java.lang.String value ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } if ( value != null ) { VAR_1 = VAR_2 . add ( name , value ) ; } }","protected void add ( java.lang.String name , java.lang.String value ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } VAR_1 = VAR_2 . add ( name , value ) ; }","['Move Assignment', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",805
"public boolean METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return false ; }","public boolean METHOD_1 ( float x , float y , int VAR_3 , int VAR_4 ) { return false ; }","['Update Parameter', 'Update Parameter', 'Update TypeReference', 'Update TypeReference']",806
public TYPE_1 METHOD_1 ( TYPE_1 node ) { if ( node != null ) return METHOD_2 ( ( ( VAR_1 . key ) + 1 ) ) ; else return null ; },public TYPE_1 METHOD_1 ( TYPE_1 node ) { return METHOD_2 ( ( ( VAR_1 . key ) + 1 ) ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",807
public boolean METHOD_1 ( ) { return ( VAR_1 ) && ( ( VAR_2 . size ( ) ) == 0 ) ; },public boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",808
"public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( INT_1 ) ; assertEquals ( VAR_2 , VAR_4 . get ( INT_1 ) ) ; }","public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( INT_1 ) ; assertEquals ( VAR_4 . get ( INT_1 ) , VAR_2 ) ; }",['Move VariableRead'],809
"public void METHOD_1 ( TYPE_1 key , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) , VAR_2 . getString ( key ) ) ; VAR_3 . METHOD_1 ( key , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 key , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( STRING_1 , key , VAR_2 . getString ( key ) ) ; VAR_3 . METHOD_1 ( key , VAR_1 ) ; }","['Insert VariableRead', 'Delete VariableRead', 'Delete Invocation']",810
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return java.lang.String . METHOD_2 ( VAR_2 . get ( VAR_1 ) ) ; },public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",812
"public void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) TYPE_1 . METHOD_3 ( ( ( STRING_1 + ( this ) ) + STRING_2 ) ) ; this . put ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( ) { this . put ( VAR_1 , VAR_2 ) ; }","['Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete ThisAccess', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",813
"private TYPE_1 METHOD_1 ( ) { return METHOD_2 ( STRING_1 , new TYPE_2 ( this . VAR_1 ) ) ; }","private TYPE_1 METHOD_1 ( ) { return METHOD_2 ( STRING_1 , new TYPE_2 ( VAR_1 ) ) ; }",['Delete ThisAccess'],814
private boolean METHOD_1 ( TYPE_1 n ) { return VAR_1 . contains ( VAR_2 . getType ( ) . METHOD_2 ( ) ) ; },private boolean METHOD_1 ( TYPE_1 n ) { return VAR_1 . contains ( VAR_2 . getType ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",816
"public synchronized void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { this . VAR_3 . add ( 0 , VAR_1 ) ; } else { this . VAR_3 . add ( VAR_1 ) ; } }",public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_3 . add ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",817
"public static TYPE_1 METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_4 . put ( VAR_5 , VAR_2 ) ; VAR_4 . put ( VAR_6 , VAR_1 ) ; return VAR_3 ; }","public static TYPE_1 METHOD_1 ( long VAR_2 , long VAR_1 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_4 . put ( VAR_5 , VAR_2 ) ; VAR_4 . put ( VAR_6 , VAR_1 ) ; return VAR_3 ; }",['Move Parameter'],818
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) . METHOD_3 ( null ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeReference', 'Delete Invocation', 'Delete Literal', 'Delete Invocation']",819
"public void METHOD_1 ( TYPE_1 context ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( 1.0 , context ) ; METHOD_5 ( 1.0 , context ) ; METHOD_6 ( 1.0 , context ) ; }",public void METHOD_1 ( TYPE_1 context ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( 1.0 ) ; METHOD_5 ( 1.0 ) ; METHOD_6 ( 1.0 ) ; },"['Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",821
public void METHOD_1 ( TYPE_1 VAR_1 ) { new TYPE_2 ( ) ; if ( ! ( TYPE_3 . METHOD_2 ( ) ) ) { TYPE_3 . METHOD_3 ( ) ; METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { new TYPE_2 ( ) ; TYPE_3 . METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",822
"private void METHOD_1 ( java.lang.Object VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { this . stringBuilder.append ( VAR_3 ) ; this . METHOD_2 ( VAR_1 ) ; if ( VAR_2 ) this . stringBuilder.append ( STRING_1 ) ; this . stringBuilder.append ( ""\n"" ) ; }","private void METHOD_1 ( boolean VAR_2 , java.lang.Object VAR_1 , java.lang.String VAR_3 ) { this . stringBuilder.append ( VAR_3 ) ; this . METHOD_2 ( VAR_1 ) ; if ( VAR_2 ) this . stringBuilder.append ( STRING_1 ) ; this . stringBuilder.append ( ""\n"" ) ; }",['Move Parameter'],823
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_2 ) ; if ( ! ( VAR_4 ) ) VAR_5 . METHOD_3 ( STRING_1 ) ; }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_2 ) ; }","['Delete FieldRead', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",824
"public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int i , long VAR_2 ) { TYPE_2 . METHOD_2 ( this ) . METHOD_3 ( VAR_3 . get ( i ) ) ; }","public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View view , int i , long VAR_2 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( this , VAR_3 . get ( i ) ) ; }","['Update Invocation', 'Move Invocation', 'Insert Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",825
public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_3 . getId ( VAR_1 ) ) ; },public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",826
public void METHOD_1 ( int data ) { METHOD_2 ( ) ; VAR_1 [ VAR_2 ] = data ; ( size ) ++ ; ( VAR_2 ) ++ ; },public void METHOD_1 ( int data ) { VAR_1 [ VAR_2 ] = data ; ( size ) ++ ; METHOD_2 ( ) ; ( VAR_2 ) ++ ; },['Move Invocation'],828
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { return VAR_2 ; },public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { return new java.util.ArrayList ( VAR_2 ) ; },"['Insert ConstructorCall', 'Move FieldRead']",829
protected int METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; },protected int METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; },"['Move Invocation', 'Delete Invocation']",831
public void METHOD_1 ( ) { if ( ( ( type ) != null ) && ( VAR_1 ) ) { TYPE_1 . METHOD_2 ( type ) ; } },public void METHOD_1 ( ) { if ( ( type ) != null ) { java.lang.System.out.println ( ) ; TYPE_1 . METHOD_2 ( type ) ; } },"['Move BinaryOperator', 'Insert Invocation', 'Insert FieldRead', 'Insert TypeAccess', 'Delete FieldRead', 'Delete BinaryOperator']",832
"public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { if ( ( VAR_1 ) > 1 ) { ( VAR_1 ) ++ ; VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) ; } return VAR_3 . METHOD_3 ( VAR_4 , new TYPE_2 ( VAR_5 ) ) ; }","public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { ( VAR_1 ) ++ ; VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) ; return VAR_3 . METHOD_3 ( VAR_4 , new TYPE_2 ( VAR_5 ) ) ; }","['Move UnaryOperator', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",834
public void handle ( TYPE_1 event ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { VAR_3 . METHOD_1 ( VAR_4 ) ; } else { VAR_3 . METHOD_1 ( VAR_5 ) ; } },public void handle ( TYPE_1 event ) { VAR_3 . METHOD_1 ( VAR_5 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",835
public void METHOD_1 ( android.view.View view ) { if ( ! ( VAR_1 ) ) { if ( ( ( VAR_2 ) < INT_1 ) & ( ( VAR_2 ) > 1 ) ) { ( VAR_2 ) ++ ; } METHOD_2 ( ) ; } },public void METHOD_1 ( android.view.View view ) { if ( ( ( VAR_2 ) < INT_1 ) & ( ( VAR_2 ) > 1 ) ) { ( VAR_2 ) ++ ; } METHOD_2 ( VAR_2 ) ; },"['Move If', 'Move Invocation', 'Insert TypeAccess', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",836
"public void METHOD_1 ( TYPE_1 data ) throws java.lang.Exception { if ( ! ( VAR_1 ) ) { VAR_2 . METHOD_2 ( VAR_3 , VAR_4 . start ) ; } }","public void METHOD_1 ( TYPE_1 data ) throws java.lang.Exception { VAR_2 . METHOD_2 ( VAR_3 , VAR_4 . start ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",838
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == null ) ) || ( VAR_2 . name ( ) . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ) ; },public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) == null ) || ( VAR_2 . name ( ) . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ) ; },"['Move BinaryOperator', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",839
public static void METHOD_1 ( java.lang.String msg ) { TYPE_1 . METHOD_2 ( ( ) - > TYPE_2 . METHOD_1 ( new TYPE_3 ( msg ) ) ) ; },public static void METHOD_1 ( java.lang.String msg ) { TYPE_2 . METHOD_1 ( new TYPE_3 ( msg ) ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Insert ConstructorCall', 'Insert VariableRead']",841
"public TYPE_1 METHOD_1 ( TYPE_2 content , boolean VAR_1 ) { this . METHOD_2 ( new TYPE_3 ( this , content , VAR_1 ) ) ; return this ; }","public void METHOD_1 ( TYPE_2 content ) { this . METHOD_2 ( new TYPE_3 ( this , content , false ) ) ; }","['Update TypeReference', 'Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Return']",842
private int METHOD_1 ( ) { return java.lang.Math.abs ( ( ( VAR_1 ) - ( METHOD_2 ( ) . METHOD_3 ( ) . height ( ) ) ) ) ; },private int METHOD_1 ( ) { return ( METHOD_2 ( ) . METHOD_3 ( ) . height ( ) ) - ( VAR_1 ) ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete TypeAccess', 'Delete Invocation']",843
"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 ) , VAR_3 , STRING_1 ) ; this . VAR_4 = new TYPE_3 ( ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ; }","public void METHOD_1 ( ) { this . VAR_4 = new TYPE_3 ( ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ; VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 ) , VAR_3 , STRING_1 ) ; }",['Move Assignment'],845
public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 = VAR_4 . get ( VAR_1 ) . getId ( ) ; } },public void METHOD_1 ( int VAR_1 ) { VAR_3 = VAR_4 . get ( VAR_1 ) . getId ( ) ; },"['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",846
"public TYPE_1 METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , null ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ( STRING_1 + STRING_3 ) , null ) ; return VAR_1 ; }","['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",848
public java.lang.String METHOD_1 ( ) { return STRING_1 + ( TYPE_1 . METHOD_2 ( ) . toString ( ) ) ; },public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( ) . toString ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",850
public void METHOD_1 ( TYPE_1 message ) { VAR_1 . add ( message ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( this ) ; } },public void METHOD_1 ( TYPE_1 message ) { VAR_1 . add ( message ) ; VAR_2 . METHOD_2 ( this ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",851
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( METHOD_2 ( ) ) TYPE_1 . METHOD_3 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",852
public void METHOD_1 ( final int [ ] VAR_1 ) { if ( METHOD_2 ( VAR_2 ) ) { VAR_3 = VAR_4 ; VAR_5 = VAR_1 [ 0 ] ; VAR_6 = VAR_1 [ 1 ] ; TYPE_1 . METHOD_3 ( this ) ; } },public void METHOD_1 ( final int [ ] VAR_1 ) { METHOD_2 ( VAR_2 ) ; VAR_3 = VAR_4 ; VAR_5 = VAR_1 [ 0 ] ; VAR_6 = VAR_1 [ 1 ] ; TYPE_1 . METHOD_3 ( this ) ; },"['Move Invocation', 'Move Assignment', 'Move Assignment', 'Move Assignment', 'Move Invocation', 'Delete Block', 'Delete If']",853
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 != null ) && ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( VAR_2 class ) ) ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( VAR_2 class ) ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",854
public void METHOD_1 ( ) { if ( ( VAR_1 ) && ( VAR_2 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_3 ( ) ; } },"['Move FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",855
"public static void i ( java.lang.String VAR_1 , java.lang.String format , java.lang.Object ... args ) { if ( TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR_3 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 , format , args ) ) ; }","public static void i ( java.lang.String VAR_1 , java.lang.String format , java.lang.Object ... args ) { VAR_3 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 , format , args ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",856
public boolean METHOD_1 ( ) { return STRING_1 . METHOD_2 ( VAR_1 ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 ) == null ; },"['Insert BinaryOperator', 'Insert FieldRead', 'Insert Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",857
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_2 . getText ( ) . toString ( ) ) ) METHOD_3 ( ) ; else { METHOD_4 ( VAR_3 ) ; METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . getText ( ) . toString ( ) . isEmpty ( ) ) == false ) METHOD_3 ( VAR_3 ) ; },"['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Insert Literal', 'Update Invocation', 'Move Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Block']",858
"public void METHOD_1 ( byte [ ] data , TYPE_1 VAR_1 ) { VAR_2 . set ( false ) ; VAR_3 . METHOD_1 ( data ) ; if ( VAR_4 ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; } }","public void METHOD_1 ( byte [ ] data , TYPE_1 VAR_1 ) { VAR_2 . set ( false ) ; VAR_3 . METHOD_1 ( data ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",860
private void METHOD_1 ( ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( ( VAR_3 ) > 0 ) ) { ( ( TYPE_1 ) ( getActivity ( ) ) ) . METHOD_3 ( VAR_3 ) ; } },private void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { ( ( TYPE_1 ) ( getActivity ( ) ) ) . METHOD_3 ( VAR_3 ) ; } },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",862
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != 1 ) { ( VAR_2 ) -- ; VAR_3 . setText ( java.lang.Integer.toString ( VAR_2 ) ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { ( VAR_2 ) -- ; VAR_3 . setText ( java.lang.Integer.toString ( VAR_2 ) ) ; },"['Move UnaryOperator', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",863
public java.lang.String getValue ( ) { return new java.lang.String ( value ) ; },public java.lang.String getValue ( ) { return value ; },"['Move FieldRead', 'Delete ConstructorCall']",864
public boolean METHOD_1 ( int VAR_1 ) { return ( ( VAR_2 . get ( VAR_1 ) ) != null ) && ( VAR_2 . get ( VAR_1 ) ) ; },public boolean METHOD_1 ( int VAR_1 ) { return ( ( VAR_2 . get ( VAR_1 ) ) != null ) && ( ( VAR_2 . get ( VAR_1 ) ) == true ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",865
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { METHOD_3 ( VAR_2 , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) ; } else { METHOD_3 ( VAR_3 ) ; } }",public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",866
public java.lang.String getName ( ) { if ( ( VAR_1 . METHOD_1 ( ) ) != null ) { return VAR_1 . METHOD_1 ( ) . toString ( ) ; } else { return STRING_1 ; } },public java.lang.String getName ( ) { return VAR_1 . METHOD_1 ( ) . toString ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",867
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_2 . isEmpty ( ) ) ) return null ; return METHOD_1 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",868
public void METHOD_1 ( java.lang.String token ) { if ( null != ( VAR_1 ) ) { VAR_2 = token ; } VAR_3 = token ; },public void METHOD_1 ( java.lang.String token ) { VAR_2 = token ; VAR_3 = token ; },"['Move Assignment', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",870
private static java.lang.String METHOD_1 ( java.lang.Class VAR_1 ) { assert VAR_1 != null ; return VAR_2 . getName ( ) ; },private static java.lang.String METHOD_1 ( java.lang.Class VAR_1 ) { assert VAR_1 != null ; return VAR_2 . getClass ( ) . getName ( ) ; },"['Insert Invocation', 'Update Invocation', 'Move Invocation']",871
public boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( VAR_1 ) ) == null ) { return false ; } else { return true ; } },public boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( VAR_1 ) ) != null ) { return true ; } else { return false ; } },"['Update BinaryOperator', 'Move Return', 'Move Return']",872
public void end ( ) { if ( VAR_1 ) { super . end ( ) ; } VAR_2 = null ; },public void end ( ) { super . end ( ) ; VAR_2 = null ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",873
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_3 . METHOD_3 ( true ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_3 ( true ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",874
"public static TYPE_1 METHOD_1 ( int VAR_1 , byte VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , TYPE_2 . METHOD_3 ( VAR_3 ) . put ( VAR_2 ) . array ( ) , VAR_4 , true ) ; }","public static TYPE_1 METHOD_1 ( int VAR_1 , byte VAR_2 ) { return new TYPE_1 ( VAR_1 , TYPE_2 . METHOD_3 ( VAR_3 ) . put ( VAR_2 ) . array ( ) ) ; }","['Insert ConstructorCall', 'Move VariableRead', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",875
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ! ( VAR_2 ) ) && ( ( VAR_1 . METHOD_2 ( ) ) == INT_1 ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == INT_1 ) { METHOD_3 ( ) ; } },"['Move BinaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",876
"private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 . length ( ) ) > INT_1 ) { return VAR_2 . substring ( 0 , INT_1 ) ; } else return VAR_1 ; }","private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . substring ( 0 , INT_1 ) ; }","['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete VariableRead', 'Delete Return', 'Delete Block', 'Delete If']",881
public void METHOD_1 ( ) { if ( VAR_1 . equals ( VAR_2 ) ) { ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_2 ( ) ; } else { VAR_4 = VAR_2 ; VAR_5 . METHOD_3 ( false ) ; } },public void METHOD_1 ( ) { VAR_4 = VAR_2 ; VAR_5 . METHOD_3 ( false ) ; },"['Move Assignment', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",882
public java.lang.String toString ( ) { return ( ( ( ( ( ( getId ( ) ) + STRING_1 ) + ( VAR_1 ) ) + STRING_1 ) + ( VAR_2 ) ) + STRING_1 ) + ( METHOD_1 ( ) ) ; },public java.lang.String toString ( ) { return ( ( ( ( VAR_1 ) + STRING_1 ) + ( VAR_2 ) ) + STRING_1 ) + ( METHOD_1 ( ) ) ; },"['Move BinaryOperator', 'Move Invocation', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",883
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_2 ( ) ; } this . VAR_1 = VAR_1 ; this . VAR_1 . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 . METHOD_2 ( ) ; this . VAR_1 = VAR_1 ; this . VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",884
public double METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) return VAR_1 . METHOD_3 ( ) ; else return - ( VAR_1 . METHOD_3 ( ) ) ; },public double METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",885
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { this . VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",887
public int METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . toUpperCase ( ) ; return ( ( VAR_3 . METHOD_1 ( ) ) * ( VAR_1 . METHOD_1 ( ) ) ) + ( id ) ; },public int METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . toUpperCase ( ) ; return ( VAR_3 . METHOD_1 ( ) ) * ( VAR_1 . METHOD_1 ( ) ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",888
"public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . main ( new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_2 } ) ; assertEquals ( false , VAR_2 ) ; }","public void METHOD_1 ( ) { VAR_1 . main ( new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_2 } ) ; assertEquals ( VAR_2 , true ) ; }","['Move Literal', 'Update Literal', 'Delete Invocation']",889
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; this . METHOD_4 ( VAR_2 ) ; this . METHOD_5 ( VAR_2 ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; this . METHOD_5 ( VAR_2 ) ; this . METHOD_4 ( VAR_2 ) ; },['Move Invocation'],890
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; if ( VAR_3 ) { METHOD_2 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; METHOD_2 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",891
"public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( 0 ) ; assertEquals ( VAR_2 , VAR_4 . get ( STRING_1 ) ) ; }","public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( 0 ) ; assertEquals ( VAR_4 . get ( STRING_1 ) , VAR_2 ) ; }",['Move VariableRead'],892
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_1 ) . METHOD_2 ( ) ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_1 ) ; }","['Move ConstructorCall', 'Delete Invocation']",893
public void start ( ) { if ( ( this . VAR_1 ) != null ) { this . VAR_2 . start ( ) ; } },public void start ( ) { this . VAR_2 . start ( ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",894
public boolean METHOD_1 ( android.view.View view ) { if ( VAR_1 . isEmpty ( VAR_2 . get ( METHOD_2 ( ) ) . METHOD_3 ( ) ) ) { VAR_3 . METHOD_4 ( VAR_2 . get ( METHOD_2 ( ) ) ) ; } return true ; },public boolean METHOD_1 ( android.view.View view ) { VAR_3 . METHOD_4 ( VAR_2 . get ( METHOD_2 ( ) ) ) ; return true ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",895
"public static void METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String VAR_3 , int VAR_4 ) { TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , true ) ; }","public static boolean METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String VAR_3 , int VAR_4 ) { return TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , true ) ; }","['Update TypeReference', 'Insert Return', 'Move Invocation']",896
public synchronized boolean METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; return false ; } else { return true ; } },public synchronized boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; return false ; } else { return true ; } },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",897
"public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return new TYPE_1 ( 0 , VAR_2 ) ; return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , VAR_2 ) ; }","public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return new TYPE_1 ( 0 , VAR_2 ) ; return new TYPE_1 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , VAR_2 ) ; }","['Insert ConstructorCall', 'Move Invocation', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",900
public void update ( float VAR_1 ) { METHOD_1 ( VAR_1 ) ; this . VAR_2 . add ( this . VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) ; METHOD_4 ( ) ; },public void update ( float VAR_1 ) { this . VAR_2 . add ( this . VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) ; METHOD_4 ( ) ; METHOD_1 ( VAR_1 ) ; },['Move Invocation'],901
public void METHOD_1 ( TYPE_1 response ) { VAR_1 = ( ( java.util.ArrayList < TYPE_2 > ) ( response . METHOD_2 ( ) ) ) ; if ( ( VAR_2 ) != null ) { METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 response ) { VAR_1 = ( ( java.util.ArrayList < TYPE_2 > ) ( response . METHOD_2 ( ) ) ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",902
public int METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) { return ( data ) == null ? 0 : data . METHOD_1 ( ) ; } else { return 0 ; } },public int METHOD_1 ( ) { return ( data ) == null ? 0 : data . METHOD_1 ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",904
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( METHOD_5 ( ) , VAR_3 ) ; } else { METHOD_6 ( ) ; } }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { VAR_2 . METHOD_3 ( ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_3 . METHOD_4 ( METHOD_5 ( ) , VAR_3 ) ; } else { METHOD_6 ( ) ; } }",['Move Invocation'],905
public java.lang.String METHOD_1 ( ) { return METHOD_2 ( this . message ) ; },public java.lang.String METHOD_1 ( ) { return this . message ; },"['Move FieldRead', 'Delete Invocation']",906
TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return this ; } else if ( ( VAR_2 ) != null ) { return VAR_2 . METHOD_2 ( ) ; } else { return VAR_3 ; } },TYPE_1 METHOD_1 ( ) { if ( ( VAR_2 ) != null ) { return VAR_2 . METHOD_2 ( ) ; } else { return VAR_3 ; } },"['Move If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ThisAccess', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",907
public void METHOD_1 ( TYPE_1 event ) { this . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 event ) { },"['Delete ThisAccess', 'Delete Invocation']",908
public java.lang.String toString ( ) { return ( ( ( ( ( ( STRING_1 + ( id ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ) + ( VAR_3 ) ; },public java.lang.String toString ( ) { return ( ( ( ( VAR_1 ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ) + ( VAR_3 ) ; },"['Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",911
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { return VAR_3 . get ( VAR_1 ) . METHOD_1 ( ) ; } else { return false ; } },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_3 . get ( VAR_1 ) . METHOD_1 ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",912
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( VAR_3 . getText ( ) ) ; },public void METHOD_1 ( java.lang.String message ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( message ) ; },"['Update Parameter', 'Update TypeReference', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",913
"public void METHOD_1 ( ) { TYPE_1 p = VAR_1 . METHOD_2 ( 0 , ( - ( VAR_1 . METHOD_3 ( ) ) ) ) ; show ( VAR_2 , p . METHOD_4 ( ) , p . METHOD_5 ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 p = VAR_2 . METHOD_2 ( 0 , ( - ( VAR_2 . METHOD_3 ( ) ) ) ) ; show ( VAR_2 , p . METHOD_4 ( ) , p . METHOD_5 ( ) ) ; }","['Update TypeAccess', 'Update TypeAccess']",914
"public int delete ( int k ) { if ( ( METHOD_1 ( k ) ) != null ) return METHOD_2 ( VAR_1 , k , null ) ; return - 1 ; }","public int delete ( int k ) { return METHOD_2 ( VAR_1 , k , null ) ; }","['Move Return', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete UnaryOperator', 'Delete Return']",915
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_4 . equals ( VAR_2 . METHOD_2 ( ) ) ) { return VAR_2 ; } } return null ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { if ( ( VAR_4 . compareTo ( VAR_2 . METHOD_2 ( ) ) ) == 0 ) { return VAR_2 ; } } return null ; },"['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Insert Literal']",916
private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( true ) ) ; } },private void METHOD_1 ( ) { TYPE_1 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( true ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",919
public void METHOD_1 ( ) { if ( VAR_1 == null ) { } else { METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Block', 'Delete If']",920
public java.lang.String toString ( ) { return METHOD_1 ( ) ; },public java.lang.String toString ( ) { return METHOD_1 ( ) . toLowerCase ( ) ; },"['Insert Invocation', 'Move Invocation']",921
protected void getData ( byte [ ] buffer ) throws java.io.IOException { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( buffer ) ; } },protected void getData ( byte [ ] buffer ) throws java.io.IOException { VAR_1 . METHOD_1 ( buffer ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",923
public TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) ) { i = ( i ) - 1 ; } return VAR_1 . get ( i ) ; },public TYPE_1 METHOD_1 ( ) { i = ( i ) - 1 ; return VAR_1 . get ( i ) ; },"['Move Assignment', 'Delete Invocation', 'Delete Block', 'Delete If']",924
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; if ( ( VAR_2 . size ( ) ) == 0 ) { VAR_1 . METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } },public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Invocation', 'Delete Block', 'Delete If']",925
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 += VAR_3 . getType ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_2 value : VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) { METHOD_1 ( value ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 += VAR_3 . getType ( ) . METHOD_3 ( ) ; for ( TYPE_2 value : VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) { METHOD_1 ( value ) ; } },"['Update Invocation', 'Move Invocation', 'Delete Invocation']",927
public long getValue ( ) { return ( ( ( ( VAR_1 ) & INT_1 ) < < 0 ) | ( ( ( VAR_2 ) & 1 ) < < INT_2 ) ) | ( ( ( VAR_3 ) & 1 ) < < INT_1 ) ; },public long getValue ( ) { return ( ( VAR_1 ) & INT_1 ) < < 0 ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",928
private void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 = false ; java.lang.System.exit ( 0 ) ; },private void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.exit ( 0 ) ; VAR_1 = false ; },['Move Assignment'],930
private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; },private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_7 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_8 ( ) ; },['Move Invocation'],932
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; if ( null != ( VAR_2 ) ) { if ( VAR_3 ) { VAR_3 = false ; } METHOD_2 ( VAR_2 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; if ( ( VAR_3 ) && ( ( VAR_2 ) != null ) ) { VAR_3 = false ; METHOD_2 ( VAR_2 ) ; } },"['Move If', 'Insert BinaryOperator', 'Move FieldRead', 'Move BinaryOperator', 'Move Literal', 'Move Invocation', 'Delete Block', 'Delete If']",933
"public boolean METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) return VAR_2 . METHOD_1 ( view , VAR_1 ) ; return false ; }","public boolean METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { return VAR_2 . METHOD_1 ( view , VAR_1 ) ; }","['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",934
"public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( null , VAR_3 , position , 0 ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( null , VAR_3 , position , 0 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",935
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) && ( ! ( VAR_3 ) ) ) { if ( VAR_4 . contains ( VAR_5 ) ) { VAR_5 . METHOD_2 ( VAR_1 ) ; } else VAR_6 . open ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { if ( VAR_4 . contains ( VAR_5 ) ) { VAR_5 . METHOD_2 ( VAR_1 ) ; } else VAR_6 . open ( VAR_1 ) ; } },"['Move FieldRead', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",936
private java.lang.String METHOD_1 ( java.lang.String string ) { return ( ( string == null ) || ( VAR_1 . equals ( STRING_1 ) ) ) || ( VAR_1 . equals ( STRING_2 ) ) ? getString ( VAR_2 ) : string ; },private java.lang.String METHOD_1 ( java.lang.String string ) { return ( string == null ) || ( VAR_1 . equals ( STRING_1 ) ) ? getString ( VAR_2 ) : string ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",937
"protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; if ( ! ( VAR_1 ) ) { METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; } super . METHOD_1 ( ) ; }","protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; super . METHOD_1 ( ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",938
private void METHOD_1 ( final TYPE_1 < TYPE_2 > path ) { if ( path . METHOD_2 ( ) ) { this . VAR_1 . METHOD_3 ( VAR_2 . get ( ) . METHOD_4 ( ) ) ; } else { this . METHOD_5 ( ) ; } },private void METHOD_1 ( final TYPE_2 path ) { this . VAR_1 . METHOD_3 ( path . METHOD_4 ( ) ) ; },"['Move Invocation', 'Update TypeReference', 'Update Invocation', 'Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",939
private static void METHOD_1 ( ) { java.lang.String line ; do line = TYPE_1 . METHOD_2 ( ) ; while ( ! ( VAR_1 . trim ( ) . equals ( VAR_2 ) ) ) ; },private static void METHOD_1 ( ) { java.lang.String line ; do line = TYPE_1 . METHOD_2 ( ) ; while ( ! ( VAR_1 . equals ( VAR_2 ) ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",940
public void METHOD_1 ( byte VAR_1 ) { this . VAR_1 = VAR_1 ; },public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = ( ( byte ) ( VAR_1 ) ) ; },"['Update TypeReference', 'Insert TypeReference']",942
"public boolean METHOD_1 ( final java.lang.String VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { try { return VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } catch ( TYPE_2 VAR_5 ) { java.lang.Thread . METHOD_3 ( ) ; } return false ; }","public boolean METHOD_1 ( final java.lang.String VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { try { VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; return true ; } catch ( TYPE_2 VAR_5 ) { java.lang.Thread . METHOD_3 ( ) ; } return false ; }","['Move Invocation', 'Insert Literal']",943
public java.lang.CharSequence METHOD_1 ( int position ) { if ( null != ( VAR_1 ) ) { return VAR_2 . METHOD_2 ( ) . getString ( VAR_3 . get ( position ) ) ; } return STRING_1 ; },public java.lang.CharSequence METHOD_1 ( int position ) { return VAR_2 . METHOD_2 ( ) . getString ( VAR_3 . get ( position ) ) ; },"['Move Return', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",944
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( ( VAR_2 ) >= INT_1 ) VAR_1 . METHOD_2 ( ) ; else VAR_3 . start ( ) ; } },public void METHOD_1 ( ) { if ( ( VAR_2 ) >= INT_1 ) VAR_1 . METHOD_2 ( ) ; else VAR_3 . start ( ) ; },"['Move If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",947
"private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( new TYPE_1 ( TYPE_2 . METHOD_5 ( VAR_3 ) ) , METHOD_6 ( ) ) ; }","private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( new TYPE_1 ( VAR_3 ) , METHOD_6 ( ) ) ; }","['Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",948
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ! ( VAR_2 . contains ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . contains ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete UnaryOperator']",950
"public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , android.content.Context context ) { TYPE_2 VAR_3 = METHOD_2 ( VAR_2 , context ) ; if ( VAR_3 != null ) { METHOD_1 ( VAR_1 , VAR_3 ) ; } else { METHOD_1 ( VAR_1 , VAR_2 ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , android.content.Context context ) { TYPE_2 VAR_3 = METHOD_2 ( VAR_2 , context ) ; METHOD_1 ( VAR_1 , VAR_3 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",951
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( false ) ; } METHOD_3 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",952
"private void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } TYPE_1 . METHOD_6 ( VAR_2 , STRING_1 ) ; }","private void METHOD_1 ( ) { METHOD_4 ( ) ; TYPE_1 . METHOD_6 ( VAR_2 , STRING_1 ) ; }","['Move Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete Invocation', 'Delete Block', 'Delete If']",953
public void METHOD_1 ( ) { try { java.lang.Thread . METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( ) ; } if ( VAR_2 ) { VAR_3 . METHOD_4 ( ) ; listener . METHOD_5 ( ) ; } },public void METHOD_1 ( ) { try { java.lang.Thread . METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( ) ; } VAR_3 . METHOD_4 ( ) ; listener . METHOD_5 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",954
"public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 class , VAR_3 ) ; }",public TYPE_1 METHOD_1 ( ) { return VAR_3 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",956
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String label , final TYPE_3 VAR_2 ) { return TYPE_1 . METHOD_1 ( VAR_1 , label , INT_1 , VAR_3 , VAR_2 ) ; }","public static TYPE_1 METHOD_1 ( java.lang.String label , java.lang.Integer size , final TYPE_3 VAR_2 ) { return TYPE_1 . METHOD_1 ( label , size , VAR_3 , VAR_2 ) ; }","['Move Parameter', 'Update Parameter', 'Update TypeReference', 'Move VariableRead', 'Update VariableRead', 'Delete TypeAccess']",958
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Exception VAR_2 ) { VAR_2 . METHOD_2 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Exception VAR_2 ) { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 != null ) { } }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal']",960
"public static boolean METHOD_1 ( java.lang.String str ) { if ( ( str == null ) || ( VAR_1 . replaceAll ( STRING_1 , STRING_2 ) . equals ( STRING_2 ) ) ) { return true ; } return false ; }",public static boolean METHOD_1 ( java.lang.String str ) { if ( ( str == null ) || ( VAR_1 . equals ( STRING_2 ) ) ) { return true ; } return false ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",961
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_1 ) != VAR_1 ) { select ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { select ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",962
public void METHOD_1 ( java.lang.String name ) { if ( ( ! ( VAR_1 . isEmpty ( ) ) ) && ( ( VAR_1 . trim ( ) . length ( ) ) > 0 ) ) this . name = VAR_1 . trim ( ) ; },public void METHOD_1 ( java.lang.String name ) { this . name = VAR_1 . trim ( ) ; },"['Move Assignment', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",963
public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) VAR_1 . handle ( ) ; else if ( ( ! ( VAR_2 . METHOD_3 ( ) ) ) && ( ! ( VAR_2 . METHOD_4 ( ) ) ) ) METHOD_5 ( ) ; },public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) VAR_1 . handle ( ) ; else if ( ! ( VAR_2 . METHOD_3 ( ) ) ) METHOD_5 ( ) ; },"['Move UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",965
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; } VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; },"['Move Invocation', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",966
public void handle ( TYPE_1 event ) { VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; },public void handle ( TYPE_1 event ) { METHOD_2 ( ) ; },"['Delete TypeAccess', 'Delete Invocation']",967
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ? 1 : - 1 ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ? - 1 : 1 ; }",['Move Literal'],968
public void METHOD_1 ( ) { if ( ( VAR_1 ) < ( ( VAR_2 . size ( ) ) - 1 ) ) METHOD_2 ( ( ++ ( VAR_1 ) ) ) ; },public void METHOD_1 ( ) { METHOD_2 ( ( ++ ( VAR_1 ) ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",969
"private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) , VAR_4 ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; VAR_6 . METHOD_3 ( VAR_3 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) , VAR_4 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; VAR_6 . METHOD_3 ( VAR_3 ) ; }",['Move Invocation'],970
"public synchronized java.util.HashMap < TYPE_1 , TYPE_2 > METHOD_1 ( ) { return new java.util.HashMap ( VAR_1 ) ; }","public synchronized java.util.HashMap < TYPE_1 , TYPE_2 > METHOD_1 ( ) { return VAR_1 ; }","['Move FieldRead', 'Delete ConstructorCall']",971
"private void METHOD_1 ( int VAR_1 , boolean VAR_2 ) { if ( VAR_1 < ( VAR_3 . length ) ) { VAR_4 [ VAR_1 ] = VAR_2 ; } }","private void METHOD_1 ( int VAR_1 , boolean VAR_2 ) { if ( ( VAR_3 . length ) < VAR_1 ) { VAR_4 [ VAR_1 ] = VAR_2 ; } }",['Move VariableRead'],974
"public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; VAR_1 . METHOD_3 ( VAR_3 , getIntent ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ) ; METHOD_6 ( VAR_1 ) ; }","public void METHOD_1 ( android.view.View view ) { android.content.Intent VAR_1 = new android.content.Intent ( METHOD_2 ( ) , VAR_2 class ) ; VAR_1 . METHOD_3 ( VAR_4 , getIntent ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ) ; METHOD_6 ( VAR_1 ) ; }","['Move TypeAccess', 'Move TypeAccess']",976
private float METHOD_1 ( int position ) { float result = ( ( METHOD_2 ( ) ) * position ) / ( VAR_1 ) ; if ( VAR_2 ) { java.lang.System.out.println ( ( STRING_1 + result ) ) ; } return result ; },private float METHOD_1 ( int position ) { float result = ( ( METHOD_2 ( ) ) * position ) / ( VAR_1 ) ; java.lang.System.out.println ( ( STRING_1 + result ) ) ; return result ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",978
"public TYPE_1 [ ] METHOD_1 ( ) { return new TYPE_1 [ ] { VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 } ; }","public TYPE_1 [ ] METHOD_1 ( ) { return new TYPE_1 [ ] { VAR_1 , VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 } ; }",['Move FieldRead'],979
public int METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return 0 ; } return VAR_2 . length ; },public int METHOD_1 ( ) { return VAR_2 . length ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",980
private void METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) >= ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) { METHOD_4 ( ) ; } else { VAR_2 . METHOD_1 ( ) ; } } },private void METHOD_1 ( ) { VAR_2 . METHOD_1 ( ) ; if ( ( VAR_2 . METHOD_2 ( ) ) >= ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) { METHOD_4 ( ) ; } },"['Move Invocation', 'Move If', 'Delete Block', 'Delete FieldRead', 'Delete Block', 'Delete If']",981
public double METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ( TYPE_2 VAR_2 ) - > VAR_2 . METHOD_5 ( ) ) ) ; } else { return 0 ; } },public double METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ( TYPE_2 VAR_2 ) - > VAR_2 . METHOD_5 ( ) ) ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",982
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( true ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( true ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",984
"public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == ( TYPE_2 . METHOD_2 ( ) . VAR_2 ) ) { TYPE_2 . METHOD_2 ( ) . VAR_2 = null ; } else { TYPE_3 . METHOD_3 ( VAR_3 , STRING_1 ) ; } }",public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . VAR_2 = null ; },"['Move Assignment', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",985
public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ( VAR_1 ) == ( VAR_2 ) ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 ) == ( VAR_2 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",986
public boolean METHOD_1 ( java.io.File file ) { return TYPE_1 . METHOD_2 ( VAR_1 . getName ( ) ) . equals ( message . METHOD_3 ( ) ) ; },public boolean METHOD_1 ( java.io.File file ) { return VAR_1 . getName ( ) . startsWith ( message . METHOD_3 ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",987
public double min ( ) { if ( ! ( METHOD_1 ( ) ) ) { return data [ 0 ] ; } else { return VAR_1 . min ( getData ( ) ) ; } },public double min ( ) { if ( ! ( METHOD_1 ( ) ) ) { return data [ 0 ] ; } else { return VAR_1 . min ( data ) ; } },"['Insert FieldRead', 'Delete Invocation']",988
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_2 = this . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_3 . toString ( ) ) ; return VAR_4 . toString ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_2 = this . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_3 . toString ( ) ) ; java.lang.System.out.print ( VAR_4 . toString ( ) ) ; },"['Update TypeReference', 'Insert Invocation', 'Insert FieldRead', 'Move Invocation', 'Insert TypeAccess', 'Delete Return']",989
"public void METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int VAR_2 , int count ) { if ( ( VAR_3 . size ( ) ) > 0 ) { this . VAR_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; } }","public void METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int VAR_2 , int count ) { this . VAR_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",990
public TYPE_1 METHOD_1 ( java.lang.String replace ) { return this . METHOD_2 ( VAR_1 . replace ( replace ) ) ; },public TYPE_1 METHOD_1 ( java.lang.String replace ) { this . METHOD_2 ( VAR_1 . replace ( replace ) ) ; return this ; },"['Move Invocation', 'Insert ThisAccess']",991
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) >= 1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; } else { VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_3 = null ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; } else { VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_3 = null ; } },"['Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",992
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . get ( INT_1 ) ; },public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . get ( 1 ) ; },"['Insert Literal', 'Delete TypeAccess']",993
"protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { final TYPE_2 < TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 , VAR_4 class , VAR_1 ) ; return VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; }","protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { final TYPE_2 < TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 , VAR_4 class , VAR_1 ) ; return VAR_2 . METHOD_3 ( ) ; }","['Move Invocation', 'Delete Invocation']",994
public void METHOD_1 ( ) throws java.io.IOException { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_2 ( ) ; } },public void METHOD_1 ( ) throws java.io.IOException { this . VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",996
"public void METHOD_1 ( int x , int y ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { state = VAR_2 ; METHOD_3 ( x , y ) ; METHOD_4 ( ) ; } }","public void METHOD_1 ( int x , int y ) { state = VAR_2 ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { METHOD_3 ( x , y ) ; } METHOD_4 ( ) ; }","['Move Assignment', 'Move Invocation']",997
"protected void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; try { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }","protected void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( ) ; try { METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }",['Move Invocation'],998
public float getValue ( ) { return ( this . VAR_1 ) / ( ( float ) ( this . VAR_2 ) ) ; },public float getValue ( ) { return ( this . VAR_1 ) / ( ( float ) ( this . VAR_1 ) ) ; },['Update FieldRead'],999
"public TYPE_1 METHOD_1 ( java.lang.String text ) { return super . METHOD_1 ( text ) . METHOD_2 ( new TYPE_2 ( VAR_1 , to ) ) ; }",public TYPE_1 METHOD_1 ( java.lang.String text ) { return super . METHOD_1 ( text ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation']",1004
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String [ ] args ) throws TYPE_2 { if ( VAR_2 ) { TYPE_3 . METHOD_2 ( args , false ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String [ ] args ) throws TYPE_2 { TYPE_3 . METHOD_2 ( args , false ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1005
void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) VAR_2 . METHOD_2 ( VAR_1 ) ; },void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1006
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( value ) ) + STRING_3 ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) + CHAR_1 ; },public java.lang.String toString ( ) { return ( ( ( ( STRING_1 + STRING_2 ) + ( value ) ) + STRING_3 ) + ( VAR_1 ) ) + CHAR_1 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1008
private void METHOD_1 ( int i ) { VAR_1 . METHOD_2 ( ) . add ( VAR_2 . get ( i ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; },private void METHOD_1 ( int i ) { VAR_1 . METHOD_2 ( ) . add ( VAR_2 . get ( i ) ) ; VAR_1 . METHOD_4 ( ) ; },"['Update Invocation', 'Move Invocation', 'Move Invocation', 'Delete Invocation']",1010
"public void METHOD_1 ( ) { VAR_1 . add ( new TYPE_1 ( VAR_2 , METHOD_2 ( VAR_3 ) , METHOD_3 ( VAR_3 ) ) ) ; VAR_4 . METHOD_4 ( ) ; }",public void METHOD_1 ( ) { VAR_4 . METHOD_4 ( ) ; },"['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Invocation']",1011
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Throwable VAR_2 ) { }",public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete TypeReference', 'Delete Parameter']",1012
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return new TYPE_1 ( VAR_2 , ( ( VAR_3 . start ) + 1 ) , VAR_3 . end ) ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return new TYPE_1 ( VAR_2 , ( ( VAR_3 . start ) + 1 ) , ( ( VAR_3 . end ) + 1 ) ) ; }","['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",1013
"public void METHOD_1 ( android.view.View view ) { METHOD_2 ( new android.content.Intent ( METHOD_3 ( ) , VAR_1 class ) . METHOD_4 ( VAR_2 , VAR_3 ) . METHOD_4 ( VAR_4 , VAR_5 ) ) ; }","public void METHOD_1 ( android.view.View view ) { METHOD_2 ( new android.content.Intent ( METHOD_3 ( ) , VAR_1 class ) . METHOD_4 ( VAR_2 , VAR_3 ) ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1015
"public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , 0 ) . equals ( STRING_1 ) ) { if ( VAR_2 != 0 ) return true ; } return VAR_2 == 1 ; }","public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , 0 ) ) == STRING_1 ) { if ( VAR_2 != 0 ) return true ; } return VAR_2 == 1 ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1016
"void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( METHOD_2 ( ) ) { new TYPE_1 ( ) . execute ( VAR_1 , VAR_2 ) ; } else { TYPE_2 . METHOD_3 ( this , STRING_1 , VAR_3 ) . show ( ) ; } }","void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { new TYPE_1 ( ) . execute ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1017
public void METHOD_1 ( java.lang.Object VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) > 0 ) { VAR_2 . METHOD_3 ( ) . METHOD_4 ( false ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; } },public void METHOD_1 ( java.lang.Object VAR_1 ) { VAR_2 . METHOD_5 ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",1018
public TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return null ; } return METHOD_2 ( ) ; },public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1019
public void METHOD_1 ( int time ) { ( this . VAR_1 ) -- ; if ( ( this . VAR_2 ) > 0 ) ( this . VAR_2 ) -- ; },public void METHOD_1 ( ) { ( this . VAR_1 ) -- ; if ( ( this . VAR_2 ) > 0 ) ( this . VAR_2 ) -- ; },"['Delete TypeReference', 'Delete Parameter']",1020
public float getData ( int index ) { if ( ( data ) == null ) { TYPE_1 . METHOD_1 ( ( STRING_1 + ( size ) ) ) ; return 0 ; } return data [ index ] ; },public float getData ( int index ) { return data [ index ] ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1021
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_4 , VAR_1 ) ; if ( VAR_2 != null ) { return VAR_5 . getValue ( ) . toString ( ) ; } return null ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_4 , VAR_1 ) ; if ( VAR_2 != null ) { VAR_5 . getValue ( ) . toString ( ) ; } return null ; }","['Move Invocation', 'Delete Return']",1022
public int compareTo ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_1 ( ) ) - ( this . METHOD_1 ( ) ) ; },public int compareTo ( TYPE_1 VAR_1 ) { return ( this . METHOD_1 ( ) ) - ( VAR_1 . METHOD_1 ( ) ) ; },['Move Invocation'],1024
"public static boolean equals ( java.io.File VAR_1 , java.io.File VAR_2 ) { if ( ( VAR_1 == null ) || ( VAR_2 == null ) ) return false ; return VAR_1 . METHOD_1 ( ) . equals ( VAR_2 . METHOD_1 ( ) ) ; }","public static boolean equals ( java.io.File VAR_1 , java.io.File VAR_2 ) { return VAR_1 . METHOD_1 ( ) . equals ( VAR_2 . METHOD_1 ( ) ) ; }","['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1025
public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ! ( VAR_3 . contains ( VAR_4 . path ) ) ) { VAR_5 = true ; VAR_3 . add ( VAR_4 . path ) ; } } METHOD_2 ( ) ; },public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_5 = true ; VAR_3 . add ( VAR_4 . path ) ; } METHOD_2 ( ) ; },"['Move Assignment', 'Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1026
public static long METHOD_1 ( long VAR_1 ) { return TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ) ; },public static long METHOD_1 ( long VAR_1 ) { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ) ; },"['Move Invocation', 'Delete Return']",1027
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return METHOD_3 ( size ) ; },public TYPE_1 METHOD_1 ( ) { return METHOD_3 ( size ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1028
TYPE_1 < TYPE_2 > METHOD_1 ( int id ) ;,TYPE_1 < TYPE_2 > METHOD_1 ( ) ;,"['Delete TypeReference', 'Delete Parameter']",1029
"protected void METHOD_1 ( TYPE_1 result ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( VAR_1 , VAR_2 , result ) ; METHOD_4 ( VAR_2 ) ; }","protected void METHOD_1 ( TYPE_1 result ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_4 ( VAR_2 ) ; METHOD_3 ( result ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess']",1030
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; update ( ) ; if ( ( VAR_3 ) >= INT_1 ) { TYPE_2 . METHOD_3 ( this ) ; } },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; update ( ) ; TYPE_2 . METHOD_3 ( this ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1031
public void METHOD_1 ( java.lang.Void result ) { TYPE_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; },public void METHOD_1 ( java.lang.Void result ) { METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( ) ; },['Move Invocation'],1032
"public TYPE_1 METHOD_1 ( TYPE_1 p ) { if ( p == null ) { throw new java.lang.NullPointerException ( ) ; } if ( ( VAR_1 ) == null ) return null ; return METHOD_1 ( VAR_1 , p , VAR_2 . p , true ) ; }","public TYPE_1 METHOD_1 ( TYPE_1 p ) { if ( p == null ) { throw new java.lang.NullPointerException ( ) ; } if ( ( VAR_1 ) == null ) return null ; else return METHOD_1 ( VAR_1 , p , VAR_2 . p , true ) ; }","['Insert Block', 'Move Return']",1033
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( STRING_1 , VAR_3 ) ; VAR_4 . commit ( ) ; super . METHOD_1 ( ) ; }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( STRING_1 , VAR_3 ) ; VAR_4 . commit ( ) ; }",['Move Invocation'],1034
public void METHOD_1 ( java.io.File result ) { if ( result == null ) { } else { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } },public void METHOD_1 ( java.io.File result ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Block', 'Delete If']",1035
"public final java.lang.String getName ( ) { return getString ( ""name"" ) ; }",public final java.lang.String getName ( ) { return name ; },"['Insert FieldRead', 'Delete Literal', 'Delete Invocation']",1037
public java.lang.String METHOD_1 ( ) { return ( VAR_1 ) + ( path ) ; },public java.lang.String METHOD_1 ( ) { return path ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1038
"public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { VAR_1 = context ; METHOD_2 ( ) ; }","public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { METHOD_2 ( ) ; VAR_1 = context ; }",['Move Assignment'],1039
"public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_2 ) ; if ( ( VAR_4 ) != ( VAR_5 ) ) { VAR_6 . METHOD_3 ( VAR_4 ) ; } }","public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_2 ) ; }","['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1040
public TYPE_1 METHOD_1 ( int VAR_1 ) { for ( TYPE_1 VAR_2 : this . METHOD_2 ( ) . METHOD_2 ( ) ) { if ( ( VAR_2 . METHOD_3 ( ) ) == VAR_1 ) { return VAR_2 ; } } return null ; },public TYPE_1 METHOD_1 ( int VAR_1 ) { for ( TYPE_1 VAR_2 : this . METHOD_2 ( ) ) { if ( ( VAR_2 . METHOD_3 ( ) ) == VAR_1 ) { return VAR_2 ; } } return null ; },"['Move Invocation', 'Delete Invocation']",1041
"public static java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 ) { return VAR_3 . METHOD_2 ( STRING_1 , java.lang.String . METHOD_3 ( VAR_1 ) ) . METHOD_2 ( STRING_2 , java.lang.String . METHOD_3 ( VAR_2 ) ) ; }","public static java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_3 . METHOD_2 ( STRING_1 , java.lang.String . METHOD_3 ( VAR_1 ) ) ; }","['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation']",1042
"public static java.lang.String METHOD_1 ( ) { return VAR_1 . toString ( TYPE_1 . METHOD_2 ( ( ( VAR_2 ) + ( VAR_3 ) ) , INT_1 ) ) ; }",public static java.lang.String METHOD_1 ( ) { return VAR_1 . toString ( ( ( VAR_2 ) + ( VAR_3 ) ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1044
public TYPE_1 < java.util.List < TYPE_2 > > execute ( ) { return VAR_1 . METHOD_1 ( VAR_2 ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) ; },public TYPE_1 < java.util.List < TYPE_2 > > execute ( ) { return VAR_1 . METHOD_1 ( VAR_2 ) . METHOD_2 ( VAR_4 ) . METHOD_3 ( VAR_3 ) ; },"['Move TypeAccess', 'Move TypeAccess']",1045
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; if ( ( VAR_3 . METHOD_2 ( ) ) != null ) { VAR_4 . METHOD_3 ( VAR_3 . METHOD_2 ( ) ) ; } },"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; if ( ( VAR_3 . METHOD_2 ( ) ) != null ) { java.util.Collections.sort ( VAR_4 , VAR_3 . METHOD_2 ( ) ) ; } }","['Update Invocation', 'Insert TypeAccess']",1046
public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; return ( id == ( VAR_1 ) ) || ( super . METHOD_1 ( item ) ) ; },public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; if ( id == ( VAR_1 ) ) { return true ; } return super . METHOD_1 ( item ) ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Move Invocation', 'Insert Return', 'Insert Literal', 'Delete BinaryOperator']",1048
"public int compareTo ( TYPE_1 < TYPE_2 > VAR_1 ) { return java.lang.Integer . METHOD_1 ( VAR_2 , VAR_3 ) ; }",public int compareTo ( TYPE_1 < TYPE_2 > VAR_1 ) { return ( VAR_2 ) - ( VAR_3 ) ; },"['Insert BinaryOperator', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1049
"synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( VAR_3 . getClass ( ) ) ) ) { VAR_4 . put ( VAR_3 . getClass ( ) , VAR_1 ) ; } }",synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_4 . contains ( VAR_1 ) ) ) { VAR_4 . add ( VAR_1 ) ; } },"['Update Invocation', 'Update Invocation', 'Update TypeAccess', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",1050
"private void METHOD_1 ( java.util.Date VAR_1 ) { VAR_2 = new TYPE_1 ( VAR_3 , VAR_4 , VAR_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; METHOD_2 ( ) ; VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }","private void METHOD_1 ( java.util.Date VAR_1 ) { VAR_2 = new TYPE_1 ( VAR_3 , VAR_4 , VAR_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; METHOD_2 ( ) ; }",['Move Invocation'],1051
"public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { java.lang.String VAR_1 = getClass ( ) . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; assertEquals ( INT_1 , VAR_2 . METHOD_6 ( ) ) ; }","public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { java.lang.String VAR_1 = getClass ( ) . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; assertEquals ( VAR_2 . METHOD_6 ( ) , INT_1 ) ; }",['Move TypeAccess'],1052
"public static void METHOD_1 ( java.lang.String text ) { if ( ! ( TYPE_1 . METHOD_2 ( ( text + ( TYPE_2 . METHOD_3 ( ) ) ) , STRING_1 , true ) ) ) { java.lang.System.out.println ( STRING_2 ) ; } }","public static void METHOD_1 ( java.lang.String text ) { TYPE_1 . METHOD_2 ( ( text + ( TYPE_2 . METHOD_3 ( ) ) ) , STRING_1 , true ) ; }","['Move Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1054
"public static long METHOD_1 ( java.util.Date VAR_1 , java.util.Date VAR_2 , TYPE_1 VAR_3 ) { long VAR_4 = ( VAR_5 . getTime ( ) ) - ( VAR_6 . getTime ( ) ) ; return VAR_3 . METHOD_2 ( VAR_4 , VAR_7 ) ; }","public static long METHOD_1 ( java.util.Date VAR_1 , java.util.Date VAR_2 , TYPE_1 VAR_3 ) { long VAR_4 = ( VAR_6 . getTime ( ) ) - ( VAR_5 . getTime ( ) ) ; return VAR_3 . METHOD_2 ( VAR_4 , VAR_7 ) ; }",['Move Invocation'],1056
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( ( VAR_1 ) == null ) ) { VAR_1 . METHOD_2 ( ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1058
"public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( ) , TYPE_2 . METHOD_3 ( ) , VAR_1 , VAR_3 , VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( ) , TYPE_2 . METHOD_3 ( ) , VAR_1 , VAR_3 , VAR_4 ) ; super . METHOD_1 ( VAR_1 ) ; }",['Move Invocation'],1059
"public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else { METHOD_4 ( new android.content.Intent ( this , VAR_2 class ) ) ; } }","public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_4 ( new android.content.Intent ( this , VAR_2 class ) ) ; }","['Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1060
public void METHOD_1 ( java.lang.Object VAR_1 ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) { VAR_2 . add ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.Object VAR_1 ) { VAR_2 . add ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1061
public int compareTo ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( ( int ) ( TYPE_2 . METHOD_1 ( ( ( VAR_3 ) - ( VAR_4 ) ) ) ) ) ; },public int compareTo ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( ( int ) ( VAR_3 ) ) - ( ( int ) ( VAR_4 ) ) ; },"['Insert BinaryOperator', 'Insert FieldRead', 'Insert FieldRead', 'Move TypeReference', 'Insert TypeReference', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",1062
"public void METHOD_1 ( android.content.Context context , boolean VAR_1 , TYPE_1 VAR_2 ) { if ( ! VAR_1 ) { METHOD_2 ( context , VAR_2 ) ; } else { METHOD_3 ( context , VAR_2 ) ; } }","public void METHOD_1 ( android.content.Context context , boolean VAR_1 , TYPE_1 VAR_2 ) { if ( ! VAR_1 ) { METHOD_2 ( context , VAR_2 ) ; } METHOD_3 ( context , VAR_2 ) ; }","['Move Invocation', 'Delete Block']",1063
public void METHOD_1 ( long VAR_1 ) { this . VAR_1 = VAR_1 ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } },public void METHOD_1 ( long VAR_1 ) { if ( ( VAR_2 ) != null ) { this . VAR_1 = VAR_1 ; VAR_2 . METHOD_1 ( VAR_1 ) ; } },['Move Assignment'],1064
public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . getName ( ) ; },public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete Invocation']",1065
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; VAR_5 . METHOD_1 ( VAR_1 ) ; VAR_6 . end ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_1 ) ; VAR_5 . METHOD_1 ( VAR_1 ) ; VAR_6 . end ( ) ; },['Move Invocation'],1066
"public java.lang.String toString ( ) { return ( ( ( ( ( this . VAR_1 . toString ( ) ) + STRING_1 ) + ( message ) ) + ""\n"" ) + ( METHOD_1 ( ) ) ) + ""\n"" ; }","public java.lang.String toString ( ) { return ( ( ( ( this . VAR_1 . toString ( ) ) + ( message ) ) + ""\n"" ) + ( METHOD_1 ( ) ) ) + ""\n"" ; }","['Move BinaryOperator', 'Move Literal', 'Move Invocation', 'Move Literal', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1067
"public int METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; else return 0 ; }","public int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; }","['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1068
public java.util.List < java.lang.Long > METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 ; } METHOD_2 ( ) ; return VAR_1 ; },public java.util.List < java.lang.Long > METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { METHOD_2 ( ) ; } return VAR_1 ; },"['Move Invocation', 'Delete FieldRead', 'Delete Return']",1069
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( ) . delete ( ) ; VAR_3 . remove ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) . delete ( ) ; VAR_3 . remove ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1072
public static boolean METHOD_1 ( TYPE_1 element ) { return ( element != null ) && ( ( element . METHOD_2 ( ) ) && ( element . METHOD_3 ( ) . METHOD_4 ( element ) ) ) ; },public static boolean METHOD_1 ( TYPE_1 element ) { return ( ( element != null ) && ( element . METHOD_2 ( ) ) ) && ( element . METHOD_3 ( ) . METHOD_4 ( element ) ) ; },"['Move BinaryOperator', 'Move BinaryOperator', 'Move Invocation']",1073
"public TYPE_1 METHOD_1 ( int VAR_1 ) { java.lang.Float value = VAR_2 . METHOD_2 ( ) ; if ( ( value != null ) && ( value > ( this . end ) ) ) return METHOD_3 ( VAR_1 , value ) ; return null ; }","public TYPE_1 METHOD_1 ( int VAR_1 ) { java.lang.Float value = VAR_2 . METHOD_2 ( ) ; if ( value != null ) return METHOD_3 ( VAR_1 , value ) ; return null ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1075
public java.lang.Class < ? > METHOD_1 ( int VAR_1 ) { if ( VAR_1 == 0 ) return VAR_2 class ; return VAR_3 class ; },public java.lang.Class < ? > METHOD_1 ( int VAR_1 ) { return VAR_3 class ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1076
public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 ) ; TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_4 ) ) ; },public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 ) ; TYPE_1 . METHOD_3 ( VAR_4 ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1077
protected void METHOD_1 ( double VAR_1 ) { double VAR_2 = ( VAR_3 ) * VAR_1 ; VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( ( VAR_2 - ( VAR_3 ) ) ) ; },protected void METHOD_1 ( double VAR_1 ) { double VAR_2 = ( VAR_3 ) * VAR_1 ; VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( ( ( VAR_3 ) - VAR_2 ) ) ; },['Move VariableRead'],1078
public boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) || ( ( ( ( VAR_1 . METHOD_3 ( ) ) - ( VAR_2 ) ) > ( VAR_3 ) ) && ( ( VAR_4 ) > 0 ) ) ; },public boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) || ( ( ( VAR_1 . METHOD_3 ( ) ) - ( VAR_2 ) ) > ( VAR_3 ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1079
"public boolean error ( final TYPE_1 message , final java.lang.Throwable VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { METHOD_1 ( VAR_1 ) ; } this . VAR_2 = false ; return false ; }","public boolean error ( final TYPE_1 message , final java.lang.Throwable VAR_1 ) { METHOD_1 ( VAR_1 ) ; this . VAR_2 = false ; return false ; }","['Move Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1080
private boolean METHOD_1 ( TYPE_1 build ) { return ( ( build . METHOD_2 ( ) ) == ( VAR_1 ) ) && ( ( METHOD_3 ( build ) ) == ( VAR_1 ) ) ; },private boolean METHOD_1 ( TYPE_1 build ) { if ( ( ( build . METHOD_2 ( ) ) == ( VAR_1 ) ) && ( ( METHOD_3 ( build ) ) == ( VAR_1 ) ) ) { return true ; } return false ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal']",1082
public java.lang.Void METHOD_1 ( java.lang.Void VAR_1 ) { VAR_2 += 1 ; METHOD_2 ( ) ; if ( VAR_3 ) METHOD_3 ( ) ; return null ; },public java.lang.Void METHOD_1 ( java.lang.Void VAR_1 ) { VAR_2 += 1 ; if ( VAR_3 ) METHOD_3 ( ) ; METHOD_2 ( ) ; return null ; },['Move Invocation'],1083
public int METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 < INT_1 ) && ( VAR_1 > 0 ) ) { return VAR_2 [ VAR_1 ] ; } else { return - 1 ; } },public int METHOD_1 ( int VAR_1 ) { if ( VAR_1 < INT_1 ) { return VAR_2 [ VAR_1 ] ; } else { return - 1 ; } },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1084
public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; VAR_2 = VAR_1 . METHOD_4 ( ) ; VAR_3 = true ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; VAR_2 = VAR_1 . METHOD_4 ( ) ; VAR_3 = true ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move If']",1085
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; super . METHOD_1 ( ) ; },['Move Invocation'],1086
void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( new TYPE_1 ( new TYPE_2 ( VAR_3 ) ) ) ; VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; },void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; VAR_2 . METHOD_3 ( new TYPE_1 ( new TYPE_2 ( VAR_3 ) ) ) ; },['Move Invocation'],1087
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { if ( VAR_2 . contains ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ) return true ; } return false ; },public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . contains ( ( ( TYPE_2 ) ( VAR_1 ) ) ) ; return true ; } return false ; },"['Move If', 'Move Invocation', 'Move Invocation', 'Delete Block', 'Delete If']",1088
"public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_1 , STRING_1 , STRING_2 ) ; return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , false ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_1 , STRING_1 , STRING_2 ) ; TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , false ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",1089
"public static void METHOD_1 ( java.lang.String msg ) { if ( ( VAR_1 ) || ( VAR_2 . isEmpty ( msg ) ) ) { return ; } TYPE_1 . METHOD_1 ( VAR_3 , msg ) ; }","public static void METHOD_1 ( java.lang.String msg ) { if ( VAR_2 . isEmpty ( msg ) ) { return ; } TYPE_1 . METHOD_1 ( VAR_3 , msg ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1090
public void METHOD_1 ( ) { if ( VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 = false ; VAR_2 . METHOD_2 ( STRING_2 ) . METHOD_3 ( true ) ; METHOD_4 ( VAR_3 ) ; } },public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 = false ; VAR_2 . METHOD_2 ( STRING_2 ) . METHOD_3 ( true ) ; METHOD_4 ( VAR_3 ) ; },"['Move Invocation', 'Move Assignment', 'Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1091
public int METHOD_1 ( int index ) { if ( index < ( VAR_1 . length ) ) { return num [ index ] ; } else { return 0 ; } },public int METHOD_1 ( int index ) { return num [ index ] ; },"['Move Return', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1092
"public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 . getText ( ) ) != null ) VAR_3 . METHOD_2 ( VAR_4 , null ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { VAR_3 . METHOD_2 ( VAR_4 , null ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1093
"public static int METHOD_1 ( int VAR_1 , int offset ) { return ( ( int ) ( ( java.lang.Math.random ( ) ) * VAR_1 ) ) + offset ; }","public static int METHOD_1 ( int VAR_1 , int offset ) { return ( ( int ) ( ( java.lang.Math.random ( ) ) * ( VAR_1 + 1 ) ) ) + offset ; }","['Insert BinaryOperator', 'Move VariableRead', 'Insert Literal']",1095
public TYPE_1 METHOD_1 ( int position ) { return position < ( VAR_1 . size ( ) ) ? VAR_1 . get ( position ) : null ; },public TYPE_1 METHOD_1 ( int position ) { return position < ( VAR_1 . size ( ) ) ? METHOD_1 ( position ) : null ; },"['Update Invocation', 'Update TypeAccess']",1096
private void METHOD_1 ( ) { if ( ( ( VAR_1 ) >= INT_1 ) && ( ! ( TYPE_1 . METHOD_2 ( ) ) ) ) { VAR_1 = 0 ; VAR_2 . METHOD_3 ( false ) ; VAR_3 . METHOD_3 ( false ) ; } },private void METHOD_1 ( ) { if ( ( VAR_1 ) <= 0 ) { VAR_1 = 0 ; VAR_2 . METHOD_3 ( false ) ; VAR_3 . METHOD_3 ( false ) ; } },"['Update BinaryOperator', 'Move BinaryOperator', 'Insert Literal', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",1097
private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { METHOD_2 ( false ) ; } else if ( ( VAR_2 ) >= ( VAR_3 ) ) { METHOD_2 ( true ) ; } },private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { METHOD_2 ( false ) ; } if ( ( VAR_2 ) >= ( VAR_3 ) ) { METHOD_2 ( true ) ; } },"['Move If', 'Delete Block']",1098
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( VAR_3 . getId ( ) ) ) ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1099
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 != null ) && ( VAR_2 . toString ( ) . METHOD_2 ( STRING_1 ) ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . toString ( ) . METHOD_2 ( STRING_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1100
public double METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ( ( ( ( this . count ) * ( this . VAR_1 ) ) + ( this . METHOD_3 ( ) ) ) * FLOAT_1 ) ) ) / FLOAT_1 ; },public double METHOD_1 ( ) { return ( this . VAR_1 ) + ( this . METHOD_3 ( ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1101
"public void METHOD_1 ( ) { VAR_1 . assertEquals ( ( ( ( VAR_2 ) + STRING_1 ) + ( TYPE_1 . METHOD_2 ( STRING_2 , VAR_3 ) ) ) , TYPE_2 . METHOD_3 ( ( ( VAR_2 ) + STRING_3 ) , null , VAR_3 ) ) ; }","public void METHOD_1 ( ) { TYPE_2 . METHOD_3 ( ( ( VAR_2 ) + STRING_3 ) , null , VAR_3 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation']",1102
public void METHOD_1 ( ) { height = 0 ; for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_1 . METHOD_2 ( ( ( height ) + ( VAR_3 ) ) ) ; height += VAR_1 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { height = 0 ; for ( TYPE_1 VAR_1 : VAR_2 ) { height += VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_2 ( height ) ; } },"['Move Invocation', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1103
private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { if ( ( VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) == null ) { VAR_3 . METHOD_5 ( VAR_2 ) ; } } },private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { VAR_3 . METHOD_5 ( VAR_2 ) ; } },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1104
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ( ( ( new TYPE_1 ( ) . METHOD_2 ( ) ) * ( METHOD_3 ( ) ) ) - ( VAR_2 ) ) ) ; return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ( ( new TYPE_1 ( ) . METHOD_2 ( ) ) * ( METHOD_3 ( ) ) ) ) ; return VAR_1 ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1106
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { VAR_2 . METHOD_2 ( ) ; } getActivity ( ) . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; getActivity ( ) . METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1107
public TYPE_1 METHOD_1 ( java.lang.Integer id ) { if ( id != null ) { return VAR_1 . METHOD_2 ( id ) ; } return null ; },public TYPE_1 METHOD_1 ( java.lang.Integer id ) { return VAR_1 . METHOD_2 ( id ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1108
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( ( ( java.lang.String . METHOD_2 ( java.lang.Math.round ( VAR_1 . METHOD_3 ( ) ) ) ) + STRING_1 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( java.lang.String . METHOD_2 ( java.lang.Math.round ( VAR_1 . METHOD_3 ( ) ) ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1109
"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { METHOD_1 ( VAR_1 ) ; if ( ! VAR_2 ) { VAR_3 . METHOD_2 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { METHOD_1 ( VAR_1 ) ; }","['Delete VariableRead', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1110
"public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { try { return new TYPE_1 < TYPE_2 > ( VAR_2 . delete ( VAR_1 ) , VAR_3 ) ; } catch ( TYPE_3 VAR_4 ) { return new TYPE_1 < TYPE_2 > ( VAR_5 ) ; } }",public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { try { VAR_2 . delete ( VAR_1 ) ; return new TYPE_1 < TYPE_2 > ( VAR_3 ) ; } catch ( TYPE_3 VAR_4 ) { return new TYPE_1 < TYPE_2 > ( VAR_5 ) ; } },['Move Invocation'],1111
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) VAR_1 . METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1112
public TYPE_1 < TYPE_2 > open ( TYPE_1 < TYPE_3 > VAR_1 ) { TYPE_4 c = new TYPE_4 ( VAR_1 ) ; return VAR_2 . append ( c ) ; },public TYPE_1 < TYPE_2 > open ( TYPE_1 < TYPE_3 > VAR_1 ) { TYPE_4 c = new TYPE_4 ( VAR_1 ) ; VAR_2 . append ( c ) ; return c ; },"['Move Invocation', 'Insert VariableRead']",1113
public static void main ( java.lang.String [ ] args ) { java.lang.String name = VAR_1 . getName ( ) ; TYPE_1 . METHOD_1 ( name ) ; },public static void main ( java.lang.String [ ] args ) { java.lang.String name ; VAR_1 . getName ( ) ; TYPE_1 . METHOD_1 ( name ) ; },['Move Invocation'],1114
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { label . METHOD_1 ( VAR_1 ) ; } else { label . METHOD_1 ( STRING_1 ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { label . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1115
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return java.lang.Long . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) . compareTo ( java.lang.Long . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return java.lang.Long . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . compareTo ( java.lang.Long . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) ; }",['Move Invocation'],1117
public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; } },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1118
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_2 . toString ( ) ; } return STRING_1 ; },public java.lang.String METHOD_1 ( ) { return VAR_2 . toString ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",1120
"protected void execute ( ) { if ( ! ( METHOD_1 ( ) ) ) VAR_1 . set ( VAR_2 , VAR_3 ) ; }","protected void execute ( ) { VAR_1 . set ( VAR_2 , VAR_3 ) ; }","['Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1123
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 ; VAR_2 = new TYPE_3 ( VAR_1 ) ; return new TYPE_1 ( java.lang.String . METHOD_2 ( VAR_3 . get ( STRING_1 ) ) ) ; },private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 ; VAR_2 = new TYPE_3 ( VAR_1 ) ; return new TYPE_1 ( ( ( java.lang.String ) ( VAR_3 . get ( STRING_1 ) ) ) ) ; },"['Update ConstructorCall', 'Move Invocation', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation']",1124
protected void METHOD_1 ( double output ) { if ( ! ( METHOD_2 ( ) ) ) { METHOD_3 ( output ) ; } else { METHOD_3 ( 0 ) ; } },protected void METHOD_1 ( double output ) { if ( METHOD_2 ( ) ) { METHOD_3 ( output ) ; } else { METHOD_3 ( 0 ) ; } },"['Move Invocation', 'Delete UnaryOperator']",1125
public void METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) { if ( ( ( VAR_2 ) + 1 ) >= ( VAR_3 . length ) ) { throw new TYPE_1 ( ) ; } ( VAR_2 ) ++ ; VAR_1 = 0 ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) { if ( ( VAR_2 ) == ( VAR_3 . length ) ) { throw new TYPE_1 ( ) ; } ( VAR_2 ) ++ ; VAR_1 = 0 ; } },"['Update BinaryOperator', 'Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1126
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . setText ( VAR_1 ) ; if ( ! ( VAR_3 ) ) METHOD_2 ( ) ; VAR_4 = VAR_1 ; },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . setText ( VAR_1 ) ; METHOD_2 ( ) ; VAR_4 = VAR_1 ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1127
"public void METHOD_1 ( ) { if ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; return ; } METHOD_3 ( ) ; METHOD_4 ( ) ; }",public void METHOD_1 ( ) { METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1128
public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ) ; METHOD_4 ( VAR_1 class ) ; METHOD_5 ( VAR_1 class ) ; },public void METHOD_1 ( ) { METHOD_4 ( VAR_1 class ) ; METHOD_5 ( VAR_1 class ) ; },"['Delete Invocation', 'Delete Invocation']",1131
public void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( false ) ; } METHOD_4 ( ) ; METHOD_3 ( true ) ; },public void METHOD_1 ( ) { METHOD_3 ( true ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Invocation']",1133
protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = false ; try { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; } } finally { VAR_2 . METHOD_4 ( ) ; } },protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = false ; try { METHOD_3 ( ) ; } finally { VAR_2 . METHOD_4 ( ) ; } },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1135
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_3 ) < ( VAR_4 ) ) { return - 1 ; } else if ( ( VAR_3 ) > ( VAR_4 ) ) { return 1 ; } return 0 ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_3 ) < ( VAR_4 ) ) { return 1 ; } else if ( ( VAR_3 ) > ( VAR_4 ) ) { return - 1 ; } return 0 ; }","['Move Block', 'Move Block']",1136
public static boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_1 . METHOD_2 ( STRING_1 ) ; },public static boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 . METHOD_2 ( STRING_1 ) ) { return true ; } else { return false ; } },"['Insert If', 'Move Invocation', 'Insert Block', 'Insert Block', 'Insert Return', 'Insert Return', 'Insert Literal', 'Insert Literal', 'Delete Return']",1137
"public java.lang.String toString ( ) { return java.lang.String.format ( STRING_1 , this . METHOD_1 ( ) , this . METHOD_2 ( ) , this . METHOD_3 ( ) , this . METHOD_4 ( ) , this . METHOD_5 ( ) ) ; }","public java.lang.String toString ( ) { return java.lang.String.format ( STRING_1 , this . METHOD_1 ( ) , this . METHOD_3 ( ) , this . METHOD_2 ( ) , this . METHOD_4 ( ) , this . METHOD_5 ( ) ) ; }",['Move Invocation'],1138
"public TYPE_1 METHOD_1 ( java.lang.Long VAR_1 , java.lang.String name ) { return TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( ( STRING_1 + name ) + STRING_2 ) + VAR_1 ) ) . build ( ) ; }","public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String name ) { return TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( ( STRING_1 + name ) + STRING_2 ) + VAR_1 ) ) . build ( ) ; }",['Update TypeReference'],1141
public TYPE_1 METHOD_1 ( ) { return this . METHOD_2 ( ) . get ( this . METHOD_2 ( ) . size ( ) ) ; },public TYPE_1 METHOD_1 ( ) { return this . METHOD_2 ( ) . get ( ( ( this . METHOD_2 ( ) . size ( ) ) + 1 ) ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1144
public int METHOD_1 ( int VAR_1 ) { if ( VAR_2 ) { return VAR_1 ; } if ( VAR_1 < ( VAR_3 . length ) ) { return VAR_4 [ VAR_1 ] ; } else { return 0 ; } },public int METHOD_1 ( int VAR_1 ) { if ( VAR_2 ) { return VAR_1 ; } else { if ( VAR_1 < ( VAR_3 . length ) ) { return VAR_4 [ VAR_1 ] ; } else { return 0 ; } } },"['Insert Block', 'Move If']",1145
public void execute ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == ( VAR_3 ) ) { TYPE_2 . METHOD_1 ( VAR_4 . remove ( value ) ) ; } else { VAR_5 . assertTrue ( VAR_4 . remove ( value ) ) ; } },public void execute ( TYPE_1 VAR_1 ) { VAR_5 . assertTrue ( VAR_4 . remove ( value ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1146
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1147
"private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( this . VAR_2 ) ) { if ( ( TYPE_2 . METHOD_2 ( this , STRING_1 ) ) == 0 ) { java.lang.System.exit ( 0 ) ; } } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . METHOD_2 ( this , STRING_1 ) ) == 0 ) { java.lang.System.exit ( 0 ) ; } }","['Move If', 'Delete ThisAccess', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1148
"private int METHOD_1 ( ) { return VAR_1 . min ( VAR_2 , TYPE_1 . METHOD_2 ( ) ) ; }","private int METHOD_1 ( ) { return VAR_1 . min ( VAR_2 , ( ( TYPE_1 . METHOD_2 ( ) ) + 1 ) ) ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1149
public java.util.Set < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return new java.util.HashSet < TYPE_1 > ( ) ; return VAR_1 ; },public java.util.Set < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",1151
"public boolean METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) { return false ; }","public boolean METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_2 == null ) return false ; return false ; }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Insert Return', 'Insert Literal']",1152
public void METHOD_1 ( android.view.View view ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( android.view.View view ) { METHOD_3 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1153
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) return ; VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { if ( VAR_1 ) return ; VAR_2 . METHOD_2 ( ) ; super . METHOD_1 ( ) ; },['Move Invocation'],1154
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 ; int VAR_3 = METHOD_2 ( VAR_1 ) ; VAR_2 = METHOD_3 ( METHOD_4 ( VAR_3 , STRING_1 ) ) ; return VAR_2 ; }",public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 ; int VAR_3 = METHOD_2 ( VAR_1 ) ; VAR_2 = METHOD_3 ( METHOD_4 ( VAR_3 ) ) ; return VAR_2 ; },['Delete TypeAccess'],1155
"public void METHOD_1 ( int index , int VAR_1 ) throws TYPE_1 , TYPE_2 { TYPE_3 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_1 ( VAR_2 . METHOD_3 ( ) . get ( index ) . VAR_4 ) ; VAR_2 . METHOD_1 ( index ) ; }","public void METHOD_1 ( int index , int VAR_1 ) throws TYPE_1 , TYPE_2 { TYPE_3 VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_1 ( index ) ; VAR_3 . METHOD_1 ( VAR_2 . METHOD_3 ( ) . get ( index ) . VAR_4 ) ; }",['Move Invocation'],1156
public double METHOD_1 ( ) { return ( ( int ) ( java.lang.Math.round ( ( ( VAR_1 ) * ( VAR_2 ) ) ) ) ) ; },public double METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete TypeReference', 'Delete TypeAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",1157
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; if ( ( ( VAR_2 . p ) != null ) && ( VAR_3 . METHOD_3 ( ) ) ) { VAR_4 . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1158
"public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( STRING_1 , 0 ) ; VAR_3 . commit ( ) ; } VAR_4 . METHOD_3 ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { VAR_4 . METHOD_3 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1159
public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_3 . METHOD_3 ( ) ) VAR_3 . METHOD_4 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1161
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_1 ) ; super . METHOD_1 ( VAR_1 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }",['Move Invocation'],1163
public void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { METHOD_2 ( true ) ; } VAR_2 . METHOD_3 ( this ) ; },public void METHOD_1 ( ) { METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( this ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1164
"public void METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_1 context ) { TYPE_2 . METHOD_2 ( context . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( context , VAR_2 ) ; VAR_4 . METHOD_1 ( VAR_1 , context ) ; }","public void METHOD_1 ( int VAR_1 , TYPE_1 context ) { VAR_4 . METHOD_1 ( VAR_1 , context ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation']",1165
public static void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( true ) ; },public static void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) . VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( true ) ; },"['Insert FieldRead', 'Move Invocation', 'Delete VariableRead']",1166
"private static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) throw new TYPE_2 ( STRING_1 ) ; VAR_2 = new TYPE_3 ( VAR_3 , VAR_4 , VAR_5 ) ; }","private static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) throw new TYPE_2 ( STRING_1 ) ; VAR_2 = new TYPE_3 ( VAR_3 , VAR_5 , VAR_4 ) ; }",['Move FieldRead'],1168
"public TYPE_1 put ( String key , TYPE_1 value ) { ( length ) ++ ; return super . put ( key , value ) ; }","public void put ( String key , TYPE_1 value ) { ( length ) ++ ; super . put ( key , value ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",1169
"private static void METHOD_1 ( ) { VAR_1 = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { VAR_4 . put ( VAR_5 . getName ( ) . toLowerCase ( ) , VAR_2 ) ; } }","private static void METHOD_1 ( ) { VAR_1 = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { VAR_4 . put ( VAR_5 . getName ( ) , VAR_2 ) ; } }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move VariableRead', 'Delete Invocation']",1170
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 != null ) && ( METHOD_2 ( VAR_1 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) METHOD_2 ( VAR_1 ) ; },"['Update TypeReference', 'Insert If', 'Move BinaryOperator', 'Insert Block', 'Move Invocation', 'Delete BinaryOperator', 'Delete Return']",1172
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = TYPE_1 . METHOD_2 ( ( ( VAR_1 ) - 1 ) , 0 ) ; if ( ( VAR_1 ) == 0 ) { this . METHOD_3 ( ) ; } }","public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ( ( VAR_1 ) - 1 ) , 0 ) ; if ( ( VAR_1 ) == 0 ) { this . METHOD_3 ( ) ; } super . METHOD_1 ( ) ; }",['Move Invocation'],1174
public TYPE_1 get ( java.lang.String id ) { if ( VAR_1 . startsWith ( STRING_1 ) ) { return VAR_2 . get ( id ) ; } else { return VAR_2 . get ( ( STRING_1 + id ) ) ; } },public TYPE_1 get ( java.lang.String id ) { return VAR_2 . get ( id ) ; },"['Move Return', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1175
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( new android.content.Intent ( METHOD_4 ( ) , VAR_3 class ) ) ; METHOD_5 ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . METHOD_2 ( ) ; METHOD_5 ( ) ; METHOD_3 ( new android.content.Intent ( METHOD_4 ( ) , VAR_3 class ) ) ; }",['Move Invocation'],1176
public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 != null ) { return VAR_2 . getName ( ) ; } return STRING_1 ; },public java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 != null ) { VAR_2 . getName ( ) ; } return STRING_1 ; },"['Move Invocation', 'Delete Return']",1177
public void METHOD_1 ( java.lang.String name ) { if ( name != null ) this . fileName = TYPE_1 . METHOD_2 ( name ) . METHOD_3 ( ) ; },public void METHOD_1 ( java.lang.String name ) { if ( name != null ) this . fileName = name . METHOD_3 ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1178
"public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; METHOD_3 ( ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; },"['Delete ThisAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1179
"private void METHOD_1 ( ) throws java.lang.Exception , TYPE_1 , TYPE_2 { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }","private void METHOD_1 ( ) throws java.lang.Exception , TYPE_1 , TYPE_2 { METHOD_3 ( ) ; METHOD_2 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }",['Move Invocation'],1181
"public void METHOD_1 ( int time ) { TYPE_1 . METHOD_2 ( STRING_1 , java.lang.Integer.toString ( time ) ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( time ) ; } }",public void METHOD_1 ( int time ) { VAR_1 . METHOD_1 ( time ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1183
public boolean METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) > ( VAR_2 ) ) { return true ; } return false ; },public boolean METHOD_1 ( ) { if ( ( ( VAR_1 . size ( ) ) - 1 ) > ( VAR_2 ) ) { return true ; } return false ; },"['Insert BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Insert Literal']",1184
private java.lang.Object METHOD_1 ( final java.lang.String fileName ) { return this . VAR_1 [ ( ( java.lang.Math.abs ( fileName . METHOD_2 ( ) ) ) % ( VAR_2 ) ) ] ; },private java.lang.Object METHOD_1 ( final java.lang.String fileName ) { return this . VAR_1 [ ( ( fileName . METHOD_2 ( ) ) % ( VAR_2 ) ) ] ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1185
public void METHOD_1 ( ) { if ( null != ( VAR_1 ) ) VAR_1 . METHOD_2 ( false ) ; if ( null != ( VAR_2 ) ) VAR_2 . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Move Invocation', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1186
public boolean METHOD_1 ( ) { return ( super . METHOD_1 ( ) ) || ( VAR_1 . METHOD_1 ( ) ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_1 ( ) ; },"['Update TypeReference', 'Move Invocation', 'Move Invocation', 'Delete BinaryOperator', 'Delete Return']",1187
"public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_2 . METHOD_1 ( VAR_2 , VAR_1 ) ; }",public static TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_1 ( VAR_2 ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1189
"public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_2 , STRING_2 , VAR_3 ) . show ( ) ; }",public void METHOD_1 ( java.lang.String VAR_1 ) { },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1190
public void METHOD_1 ( float VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( float VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Invocation']",1191
public TYPE_1 getView ( ) { this . METHOD_1 ( ) ; return this . VAR_1 . getView ( ) ; },public TYPE_1 getView ( ) { this . VAR_1 . start ( ) ; return this . VAR_1 . getView ( ) ; },"['Update Invocation', 'Insert FieldRead', 'Move ThisAccess']",1193
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) instanceof TYPE_2 ) TYPE_3 . METHOD_2 ( new TYPE_4 ( VAR_1 ) , ( ( TYPE_2 ) ( VAR_2 ) ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_3 . METHOD_2 ( new TYPE_4 ( VAR_1 ) , ( ( TYPE_2 ) ( VAR_2 ) ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1194
"public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_3 VAR_2 = VAR_3 class . METHOD_2 ( VAR_1 ) ; return VAR_4 . METHOD_3 ( ) . METHOD_4 ( VAR_5 . get ( ) . toString ( ) , VAR_2 ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_3 VAR_2 = VAR_3 class . METHOD_2 ( VAR_1 ) ; return VAR_4 . METHOD_3 ( ) . METHOD_4 ( VAR_5 . toString ( ) , VAR_2 ) ; }","['Update Invocation', 'Move Invocation', 'Move Invocation', 'Update Invocation', 'Move VariableRead', 'Delete Invocation']",1195
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( ( VAR_1 == null ) || ( VAR_3 . contains ( VAR_2 ) ) ) { return false ; } VAR_3 . add ( VAR_2 ) ; return true ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( ( VAR_3 . contains ( VAR_2 ) ) || ( VAR_1 == null ) ) { return false ; } VAR_3 . add ( VAR_2 ) ; return true ; },['Move BinaryOperator'],1196
public void METHOD_1 ( ) { VAR_1 . setText ( STRING_1 ) ; VAR_2 . setText ( STRING_1 ) ; VAR_3 . setText ( STRING_1 ) ; VAR_4 . setText ( STRING_1 ) ; VAR_5 . setText ( STRING_1 ) ; },public void METHOD_1 ( ) { VAR_3 . setText ( STRING_1 ) ; VAR_1 . setText ( STRING_1 ) ; VAR_2 . setText ( STRING_1 ) ; VAR_4 . setText ( STRING_1 ) ; VAR_5 . setText ( STRING_1 ) ; },['Move Invocation'],1198
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 ) . METHOD_3 ( STRING_4 ) . METHOD_3 ( STRING_5 ) . METHOD_3 ( STRING_6 ) . METHOD_3 ( STRING_2 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 ) . METHOD_3 ( STRING_4 ) . METHOD_3 ( STRING_2 ) ; }","['Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1199
"public void METHOD_1 ( ) { if ( ! ( VAR_1 . equals ( VAR_2 . get ( token ) ) ) ) return ; VAR_2 . remove ( token ) ; VAR_3 . METHOD_2 ( token , VAR_4 ) ; }","public void METHOD_1 ( ) { if ( VAR_2 . get ( token ) . equals ( url ) ) return ; VAR_2 . remove ( token ) ; VAR_3 . METHOD_2 ( token , VAR_4 ) ; }","['Move Invocation', 'Insert FieldRead', 'Delete TypeAccess', 'Delete UnaryOperator']",1200
"public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { ( ( TYPE_2 ) ( METHOD_2 ( VAR_2 ) ) ) . show ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { }","['Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1201
"public final TYPE_1 METHOD_1 ( final int VAR_1 , float VAR_2 ) { return METHOD_2 ( METHOD_3 ( ( VAR_1 + INT_1 ) ) , METHOD_4 ( VAR_2 ) ) ; }","public final TYPE_1 METHOD_1 ( final int VAR_1 , float VAR_2 ) { return METHOD_2 ( METHOD_3 ( VAR_1 ) , METHOD_4 ( VAR_2 ) ) ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",1202
"public java.util.List < TYPE_1 > query ( TYPE_1 VAR_1 ) { try { return TYPE_2 . METHOD_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 . getName ( ) , VAR_1 . METHOD_3 ( ) ) ; } catch ( TYPE_3 VAR_4 ) { } return null ; }","public java.util.List < TYPE_1 > query ( TYPE_1 VAR_1 ) { try { TYPE_2 . METHOD_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 . getName ( ) , VAR_1 . METHOD_3 ( ) ) ; } catch ( TYPE_3 VAR_4 ) { } return null ; }","['Move Invocation', 'Delete Return']",1203
"public double METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 , METHOD_3 ( ) ) ; }",public double METHOD_1 ( ) { return ( VAR_1 ) / ( METHOD_3 ( ) ) ; },"['Insert BinaryOperator', 'Insert FieldRead', 'Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1206
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( 1 ) ; TYPE_2 . METHOD_4 ( STRING_1 ) ; VAR_3 . METHOD_5 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; TYPE_2 . METHOD_4 ( STRING_1 ) ; VAR_1 . METHOD_3 ( 1 ) ; VAR_3 . METHOD_5 ( ) ; },['Move Invocation'],1208
public void METHOD_1 ( final long VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) ; },public void METHOD_1 ( final long VAR_1 ) { VAR_2 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1209
"private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 . getText ( ) , VAR_4 . getText ( ) , VAR_5 . getText ( ) ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . getText ( ) , VAR_4 . getText ( ) , VAR_5 . getText ( ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1210
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; if ( ( VAR_3 ) == true ) { METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; METHOD_5 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1211
"private boolean METHOD_1 ( java.lang.String path , java.util.List < java.lang.String > list , boolean VAR_1 ) { for ( java.lang.String pattern : list ) { if ( METHOD_2 ( pattern , path , VAR_1 ) ) { return true ; } } return false ; }","private boolean METHOD_1 ( java.lang.String path , java.util.List < java.lang.String > list , boolean VAR_1 ) { for ( java.lang.String pattern : list ) { return METHOD_2 ( pattern , path , VAR_1 ) ; } return false ; }","['Insert Return', 'Move Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1212
public void METHOD_1 ( TYPE_1 key ) { synchronized ( this ) { this . key = key ; METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 key ) { this . key = key ; synchronized ( this ) { METHOD_2 ( ) ; } },['Move Assignment'],1214
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = VAR_3 . getString ( STRING_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 . getString ( STRING_1 ) ; super . METHOD_1 ( VAR_1 ) ; },['Move Invocation'],1215
public static java.util.Collection < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) < 1 ) { VAR_1 . add ( VAR_2 ) ; } return TYPE_2 ; },public static java.util.Collection < TYPE_1 > METHOD_1 ( ) { return java.util.Arrays.asList ( VAR_2 ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete FieldRead']",1216
"public TYPE_1 < java.lang.Boolean > replace ( java.lang.String key , int VAR_1 , java.lang.Object VAR_2 ) { if ( METHOD_1 ( ) ) { return VAR_3 . replace ( key , VAR_1 , VAR_2 ) ; } return TYPE_2 . METHOD_2 ( false ) ; }","public TYPE_1 < java.lang.Boolean > replace ( java.lang.String key , int VAR_1 , java.lang.Object VAR_2 ) { return VAR_3 . replace ( key , VAR_1 , VAR_2 ) ; }","['Move Return', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Return']",1217
"public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 ) { java.util.Map result = METHOD_2 ( METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 ) , TYPE_1 . METHOD_4 ( VAR_2 ) , VAR_3 ) ) ; return METHOD_5 ( result ) ; }","public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 ) { java.util.Map result = METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return METHOD_5 ( result ) ; }","['Move VariableRead', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",1218
protected boolean METHOD_1 ( ) { java.io.File path = METHOD_2 ( VAR_1 ) ; if ( path != null ) { return path . METHOD_3 ( ) ; } else { return false ; } },protected boolean METHOD_1 ( ) { java.io.File path = METHOD_2 ( VAR_1 ) ; return path . METHOD_3 ( ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1219
void init ( ) { if ( ( ! ( VAR_1 . METHOD_1 ( ) ) ) || ( VAR_2 ) ) { VAR_3 . METHOD_2 ( 0 ) ; VAR_4 . setText ( STRING_1 ) ; VAR_5 . setText ( STRING_1 ) ; } METHOD_3 ( ) ; },void init ( ) { VAR_3 . METHOD_2 ( 0 ) ; VAR_4 . setText ( STRING_1 ) ; VAR_5 . setText ( STRING_1 ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1220
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 ) ; },['Update TypeAccess'],1224
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { VAR_3 . METHOD_2 ( ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1225
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) VAR_2 . METHOD_2 ( ) ; VAR_3 = false ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( VAR_1 ) ) { VAR_2 . METHOD_2 ( ) ; VAR_3 = false ; } },"['Insert UnaryOperator', 'Move FieldRead', 'Move Assignment']",1226
"TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_4 , java.lang.Long VAR_5 , int VAR_6 ) ;","TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_2 , java.lang.String VAR_1 , TYPE_3 VAR_3 , TYPE_3 VAR_4 , java.lang.Long VAR_5 , int VAR_6 ) ;",['Move Parameter'],1227
public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( ( VAR_2 . equals ( STRING_1 ) ) || ( VAR_2 . equals ( STRING_2 ) ) ) || ( VAR_2 . equals ( STRING_3 ) ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_2 . equals ( STRING_1 ) ) || ( VAR_2 . equals ( STRING_2 ) ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",1228
public void init ( ) throws java.lang.Exception { VAR_1 . info ( STRING_1 ) ; super . init ( ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; },public void init ( ) throws java.lang.Exception { VAR_1 . info ( STRING_1 ) ; super . init ( ) ; METHOD_4 ( ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; },['Move Invocation'],1230
"public void METHOD_1 ( int position , boolean VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( position ) ; METHOD_4 ( position ) ; VAR_2 = position ; if ( VAR_1 ) METHOD_5 ( position ) ; }",public void METHOD_1 ( int position ) { METHOD_2 ( ) ; METHOD_3 ( position ) ; METHOD_4 ( position ) ; VAR_2 = position ; METHOD_5 ( position ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Block', 'Delete If']",1231
public TYPE_1 METHOD_1 ( java.lang.String title ) { return VAR_1 . METHOD_1 ( title ) ; },public void METHOD_1 ( java.lang.String title ) { VAR_1 . METHOD_1 ( title ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",1232
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . contains ( VAR_1 ) ) VAR_2 . remove ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . remove ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1233
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { return false ; } return true ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) { return true ; } return false ; },"['Move Return', 'Insert UnaryOperator', 'Move Invocation', 'Move Return']",1234
public java.lang.String METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { return null ; } return VAR_1 ; },public java.lang.String METHOD_1 ( ) { return VAR_1 ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1235
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this ) ; if ( ( ! ( VAR_2 ) ) && ( ( VAR_3 ) > 0 ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this ) ; if ( ! ( VAR_2 ) ) { METHOD_3 ( ) ; } },"['Move UnaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1236
public void METHOD_1 ( ) { if ( VAR_1 . equals ( STRING_1 ) ) { VAR_2 . info ( STRING_2 ) ; } METHOD_2 ( ) . METHOD_3 ( null ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( null ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1237
"public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( VAR_1 , this ) ; VAR_1 . METHOD_4 ( ) ; } VAR_2 = false ; METHOD_5 ( ) ; METHOD_6 ( ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_3 ( VAR_1 , this ) ; if ( VAR_1 . METHOD_2 ( ) ) VAR_1 . METHOD_4 ( ) ; VAR_2 = false ; METHOD_5 ( ) ; METHOD_6 ( ) ; }",['Move Invocation'],1238
"private static java.lang.String METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 , java.lang.String VAR_4 ) { java.lang.String VAR_5 = STRING_1 ; return java.lang.String.format ( VAR_5 , VAR_1 , VAR_2 , VAR_3 , VAR_6 . replace ( STRING_2 , STRING_3 ) ) ; }","private static java.lang.String METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 , java.lang.String VAR_4 ) { java.lang.String VAR_5 = STRING_1 ; return java.lang.String.format ( VAR_5 , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1240
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; TYPE_2 VAR_3 = METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_3 ) ; return VAR_4 . getName ( ) ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; TYPE_2 VAR_3 = METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_3 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_4 . getName ( ) ; },['Move Invocation'],1241
private java.lang.String METHOD_1 ( int src ) { boolean VAR_1 = src <= INT_1 ; if ( ( src % INT_2 ) == 0 ) { return STRING_1 ; } else { return VAR_2 [ ( src % INT_2 ) ] ; } },private java.lang.String METHOD_1 ( int src ) { boolean VAR_1 = src <= INT_1 ; if ( src == 0 ) { return STRING_1 ; } else { return VAR_2 [ ( src % INT_2 ) ] ; } },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Literal', 'Delete FieldRead', 'Delete BinaryOperator']",1243
"public void METHOD_1 ( java.lang.Integer VAR_1 , java.lang.String VAR_2 ) { java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_1 ( null ) ; } }","public void METHOD_1 ( java.lang.Integer VAR_1 , java.lang.String VAR_2 ) { java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) ) ; VAR_3 . METHOD_1 ( null ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1244
"private void METHOD_1 ( ) { if ( METHOD_2 ( ) . METHOD_3 ( ) ) METHOD_2 ( ) . METHOD_4 ( ) . METHOD_5 ( STRING_1 , VAR_1 ) ; }","private void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_4 ( ) . METHOD_5 ( STRING_1 , VAR_1 ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1245
public void METHOD_1 ( TYPE_1 < java.util.List < TYPE_2 > > response ) { if ( ( response . METHOD_2 ( ) ) != null ) VAR_1 . METHOD_3 ( response . METHOD_2 ( ) ) ; else VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 < java.util.List < TYPE_2 > > response ) { VAR_1 . METHOD_3 ( response . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1246
public int METHOD_1 ( ) { if ( ( METHOD_2 ( ) . length ( ) ) > 0 ) return METHOD_2 ( ) . length ( ) ; else return VAR_1 . length ( ) ; },public int METHOD_1 ( ) { return METHOD_2 ( ) . length ( ) ; },"['Move Return', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1248
public boolean METHOD_1 ( ) { if ( VAR_1 ) { return true ; } else { return false ; } },public boolean METHOD_1 ( ) { return VAR_1 ; },"['Insert Return', 'Move FieldRead', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1250
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( METHOD_2 ( ) ) != ( VAR_1 ) ) { return ; } METHOD_3 ( ) ; METHOD_4 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( ) ; },"['Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Invocation']",1251
public void METHOD_1 ( final java.lang.CharSequence title ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( title ) ; } },public void METHOD_1 ( final java.lang.CharSequence title ) { VAR_1 . METHOD_1 ( title ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1254
public void METHOD_1 ( java.lang.Throwable VAR_1 ) { if ( ( view ) != null ) { view . METHOD_2 ( false ) ; view . METHOD_1 ( VAR_1 . METHOD_3 ( ) ) ; } },public void METHOD_1 ( java.lang.Throwable VAR_1 ) { view . METHOD_2 ( false ) ; view . METHOD_1 ( VAR_1 . METHOD_3 ( ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1256
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_1 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } },public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1257
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . getView ( ) . METHOD_2 ( ) ) > 0 ) { METHOD_3 ( new TYPE_2 ( ) ) ; METHOD_3 ( new TYPE_3 ( VAR_3 ) ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( new TYPE_2 ( ) ) ; METHOD_3 ( new TYPE_3 ( VAR_3 ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1258
public void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) VAR_1 . METHOD_3 ( 0.0 ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_3 ( 0.0 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1259
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Insert Block', 'Move Invocation']",1260
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ( VAR_2 + VAR_3 ) ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( VAR_2 + VAR_3 ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1262
"public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_2 . METHOD_2 ( false , true ) ) ) { VAR_1 . METHOD_3 ( ) ; } }",public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; } },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Literal', 'Delete Invocation', 'Delete BinaryOperator']",1263
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( ! ( VAR_1 . METHOD_2 ( ) ) ) || ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } },"['Move UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",1264
"public void METHOD_1 ( int x , int y ) { TYPE_1 VAR_1 = METHOD_2 ( x , y ) ; if ( VAR_1 != null ) { if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( ) ; } } }","public void METHOD_1 ( int x , int y ) { TYPE_1 VAR_1 = METHOD_2 ( x , y ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_4 ( ) ; } }","['Move If', 'Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1266
public boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 . METHOD_2 ( ) ) { if ( VAR_2 . METHOD_3 ( ) . equals ( VAR_1 ) ) { return false ; } } return true ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 . METHOD_2 ( ) ) { if ( ( VAR_2 . METHOD_3 ( ) ) == VAR_1 ) { return false ; } } return true ; },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",1267
public java.lang.String METHOD_1 ( ) { return ( ( ( ( ( ( this . id ) + STRING_1 ) + ( this . name ) ) + STRING_1 ) + ( this . VAR_1 ) ) + STRING_1 ) + ( this . VAR_2 ) ; },public java.lang.String METHOD_1 ( ) { return ( ( ( ( this . name ) + STRING_1 ) + ( this . VAR_1 ) ) + STRING_1 ) + ( this . VAR_2 ) ; },"['Move BinaryOperator', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Move FieldRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1268
"public boolean METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ) == ( VAR_4 ) ) { VAR_5 . put ( VAR_1 , VAR_3 ) ; return true ; } return false ; }","public boolean METHOD_1 ( int VAR_1 ) { return ( VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ) == ( VAR_4 ) ; }","['Move BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",1269
"public void set ( int y , int x , float value ) { if ( ( x <= ( VAR_1 [ 0 ] . length ) ) && ( y <= ( VAR_2 . length ) ) ) VAR_1 [ y ] [ x ] = value ; }","public void set ( int x , int y , float value ) { if ( ( x <= ( VAR_2 . length ) ) && ( y <= ( VAR_1 [ 0 ] . length ) ) ) VAR_1 [ x ] [ y ] = value ; }","['Move Parameter', 'Move BinaryOperator', 'Move VariableRead', 'Move VariableRead', 'Move VariableRead', 'Move VariableRead']",1270
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( ) - > { if ( ( TYPE_1 . METHOD_3 ( ) ) != null ) TYPE_1 . METHOD_4 ( ) ; } ) ; },public void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_3 ( ) ) != null ) TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; },"['Insert Invocation', 'Update Invocation', 'Move Invocation']",1271
"public void METHOD_1 ( TYPE_1 view , java.lang.String url ) { TYPE_2 . METHOD_2 ( VAR_1 , ( url + STRING_1 ) ) ; if ( ! ( VAR_2 ) ) view . METHOD_3 ( VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 view , java.lang.String url ) { TYPE_2 . METHOD_2 ( VAR_1 , ( url + STRING_1 ) ) ; view . METHOD_3 ( VAR_3 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1272
public java.lang.String delete ( TYPE_1 VAR_1 ) throws TYPE_2 { return STRING_1 + ( VAR_2 . delete ( VAR_1 ) ) ; },public int delete ( TYPE_1 VAR_1 ) throws TYPE_2 { return VAR_2 . delete ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1273
public java.util.Date METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { return null ; } return new java.util.Date ( VAR_2 . getTime ( ) ) ; },public java.util.Date METHOD_1 ( ) { return VAR_1 ; },"['Insert FieldRead', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall']",1274
public java.lang.String getText ( ) { if ( ! ( this . VAR_1 . getText ( ) . equals ( this . VAR_2 ) ) ) { return this . VAR_1 . getText ( ) ; } else { return STRING_1 ; } },public java.lang.String getText ( ) { return this . VAR_1 . getText ( ) ; },"['Move Return', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1275
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { return null ; } else { VAR_1 . METHOD_3 ( true ) ; return this . VAR_2 . METHOD_1 ( VAR_1 ) ; } },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return this . VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Return', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",1276
public boolean METHOD_1 ( java.lang.String name ) { for ( java.lang.String n : VAR_1 ) if ( ( n != null ) && ( VAR_2 . equals ( name ) ) ) return true ; return false ; },public boolean METHOD_1 ( java.lang.String name ) { for ( java.lang.String n : VAR_1 ) if ( VAR_2 . equals ( name ) ) return true ; return false ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1277
"private static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( TYPE_2 . METHOD_2 ( ""id"" , STRING_1 , STRING_2 , STRING_3 , STRING_4 ) , STRING_5 ) ; }","private static java.lang.String METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( ""id"" , STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete FieldRead', 'Delete ConstructorCall']",1278
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; this . VAR_1 . METHOD_2 ( main . METHOD_3 ( ) ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; },"['Insert TypeAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete Invocation']",1279
"public void METHOD_1 ( java.lang.Object target , int VAR_1 ) { if ( VAR_1 > 0 ) { ( ( TYPE_1 ) ( target ) ) . METHOD_2 ( VAR_1 ) ; } }","public void METHOD_1 ( java.lang.Object target , int VAR_1 ) { ( ( TYPE_1 ) ( target ) ) . METHOD_2 ( VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1280
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { METHOD_2 ( VAR_1 ) ; VAR_2 . add ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; VAR_2 . add ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1282
"public int METHOD_1 ( java.util.Map.Entry < TYPE_1 , java.lang.Integer > VAR_1 , java.util.Map.Entry < TYPE_1 , java.lang.Integer > VAR_2 ) { return VAR_3 . getValue ( ) . compareTo ( VAR_4 . getValue ( ) ) ; }","public int METHOD_1 ( java.util.Map.Entry < TYPE_1 , java.lang.Integer > VAR_1 , java.util.Map.Entry < TYPE_1 , java.lang.Integer > VAR_2 ) { return VAR_4 . getValue ( ) . compareTo ( VAR_3 . getValue ( ) ) ; }",['Move Invocation'],1283
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_3 . METHOD_5 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_3 . METHOD_5 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1287
"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { VAR_1 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 ) ) + STRING_1 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1289
public TYPE_1 < java.lang.String > METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { return VAR_3 . error ( new java.lang.Exception ( STRING_1 ) ) ; } return TYPE_1 . METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; },"['Update TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Return']",1290
"private int METHOD_1 ( double element ) { return TYPE_1 . METHOD_2 ( VAR_1 , element ) ; }","private int METHOD_1 ( double element ) { return ( TYPE_1 . METHOD_2 ( VAR_1 , element ) ) - 1 ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1291
"public java.lang.String METHOD_1 ( TYPE_1 key ) { if ( ( VAR_1 ) == null ) { return VAR_2 . METHOD_1 ( VAR_3 ) ; } else { return VAR_2 . METHOD_1 ( VAR_3 , java.lang.String . METHOD_2 ( VAR_1 ) ) ; } }","public java.lang.String METHOD_1 ( TYPE_1 key ) { if ( ( VAR_1 ) == null ) { return VAR_2 . METHOD_1 ( VAR_3 ) ; } else { return VAR_2 . METHOD_1 ( VAR_3 , ( ( java.lang.String ) ( VAR_1 ) ) ) ; } }","['Insert TypeAccess', 'Insert TypeReference', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1293
public double METHOD_1 ( ) { return ( this . VAR_1 ) / FLOAT_1 ; },public double METHOD_1 ( ) { return this . VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1294
"public java.lang.String toString ( ) { return ( STRING_1 + ( VAR_1 . replace ( STRING_2 , STRING_3 ) . replace ( STRING_1 , STRING_4 ) ) ) + STRING_1 ; }",public java.lang.String toString ( ) { return ( STRING_1 + ( value ) ) + STRING_1 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1295
public void METHOD_1 ( android.view.View view ) { if ( ( view != null ) && ( ( VAR_1 ) == null ) ) { VAR_1 = view ; VAR_2 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( ) ) - 1 ) ) ; } },public void METHOD_1 ( android.view.View view ) { VAR_1 = view ; VAR_2 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( ) ) - 1 ) ) ; },"['Move Assignment', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1296
"private void METHOD_1 ( int VAR_1 , boolean VAR_2 ) { VAR_3 [ VAR_1 ] = VAR_2 ; }","private void METHOD_1 ( int VAR_1 , boolean VAR_2 ) { if ( VAR_1 != ( - 1 ) ) { VAR_3 [ VAR_1 ] = VAR_2 ; } }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert UnaryOperator', 'Move Assignment', 'Insert Literal']",1300
public static java.lang.String METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . info ( STRING_1 ) ; } return STRING_2 ; },public static java.lang.String METHOD_1 ( ) { VAR_2 . info ( STRING_1 ) ; return STRING_2 ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1301
"public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) . show ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int i ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; METHOD_4 ( ) . show ( ) ; VAR_1 . METHOD_3 ( ) ; }",['Move Invocation'],1302
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( VAR_3 class , VAR_2 ) ; } return null ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 { return VAR_1 . METHOD_2 ( VAR_3 class , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal']",1303
"private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( VAR_2 , VAR_3 ) ; METHOD_2 ( ) ; }",['Move Invocation'],1305
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( ( VAR_1 ) != null ) && ( VAR_2 ) ) { METHOD_2 ( VAR_3 ) ; this . METHOD_3 ( ) . METHOD_4 ( VAR_4 ) ; VAR_1 = null ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { METHOD_4 ( VAR_4 ) ; VAR_1 = null ; } },"['Move BinaryOperator', 'Update Invocation', 'Move TypeAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation']",1308
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { METHOD_2 ( ) ; } TYPE_1 . METHOD_3 ( VAR_2 , STRING_1 ) ; }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_2 , STRING_1 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1309
public int compareTo ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) || ( ! ( VAR_3 ) ) ) && ( ( VAR_4 ) >= ( VAR_5 ) ) ) return 1 ; return - 1 ; },public int compareTo ( TYPE_1 VAR_1 ) { if ( ( VAR_4 ) >= ( VAR_5 ) ) return 1 ; return - 1 ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator']",1314
public boolean METHOD_1 ( ) { return ( VAR_1 ) < ( count ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 ) < ( ( count ) - 1 ) ; },"['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",1315
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 result = new TYPE_3 ( ) ; METHOD_1 ( VAR_1 , result ) ; return new java.lang.String ( VAR_2 . content ( ) . METHOD_2 ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 result = new TYPE_3 ( ) ; METHOD_1 ( VAR_1 , result ) ; return VAR_2 . content ( ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete ConstructorCall']",1316
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.Long VAR_2 ) { return VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead']",1317
public void info ( java.lang.String message ) { if ( ( ( ( VAR_1 ) != null ) && ( message != null ) ) && ( ( VAR_2 . length ( ) ) > 0 ) ) VAR_1 . METHOD_1 ( message ) ; },public void info ( java.lang.String message ) { if ( ( message != null ) && ( ( VAR_2 . length ( ) ) > 0 ) ) VAR_1 . METHOD_1 ( message ) ; },"['Move BinaryOperator', 'Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1318
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . equals ( VAR_3 ) ) { return STRING_1 ; } else if ( VAR_2 . equals ( VAR_4 ) ) { return STRING_1 ; } else { return STRING_2 ; } },private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 . equals ( VAR_3 ) ) { return STRING_1 ; } else { return STRING_2 ; } },"['Move If', 'Move Invocation', 'Move Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1319
public TYPE_1 getType ( TYPE_2 < java.lang.Object > VAR_1 ) { if ( this . METHOD_1 ( ) ) return VAR_2 ; else return VAR_3 . getType ( VAR_4 class ) ; },public TYPE_1 getType ( TYPE_2 < java.lang.Object > VAR_1 ) { return VAR_3 . getType ( VAR_4 class ) ; },"['Move Return', 'Delete ThisAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1320
"private void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( super . getContext ( ) , VAR_2 class ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_3 ) ; METHOD_3 ( VAR_1 ) ; getActivity ( ) . METHOD_4 ( ) ; }","private void METHOD_1 ( ) { android.content.Intent VAR_1 = new android.content.Intent ( super . getContext ( ) , VAR_2 class ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_3 ) ; getActivity ( ) . METHOD_4 ( ) ; METHOD_3 ( VAR_1 ) ; }",['Move Invocation'],1321
"public void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( true , VAR_1 , VAR_2 ) ; VAR_4 . METHOD_3 ( ) ; }","public void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_4 . METHOD_3 ( ) ; VAR_3 . METHOD_2 ( true , VAR_1 , VAR_2 ) ; }",['Move Invocation'],1322
public boolean METHOD_1 ( ) { boolean VAR_1 = false ; try { VAR_1 = ! ( VAR_2 . METHOD_2 ( ) ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } finally { return VAR_1 ; } },public boolean METHOD_1 ( ) { boolean VAR_1 = false ; try { VAR_1 = ! ( VAR_2 . METHOD_2 ( ) ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } return VAR_1 ; },['Move Return'],1323
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { VAR_2 . put ( VAR_1 . METHOD_3 ( ) , VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_1 . METHOD_3 ( ) , VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1325
private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( value ) ? value : VAR_1 ; },private java.lang.String METHOD_1 ( ) { return ( value ) != null ? value : VAR_1 ; },"['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal', 'Delete TypeAccess', 'Delete Invocation']",1326
public byte METHOD_1 ( int VAR_1 ) { return ( ( byte ) ( ( ( this . METHOD_2 ( VAR_1 ) ) > > INT_1 ) & INT_2 ) ) ; },public byte METHOD_1 ( int VAR_1 ) { return ( ( byte ) ( ( this . METHOD_2 ( VAR_1 ) ) > > INT_1 ) ) ; },"['Move BinaryOperator', 'Move TypeReference', 'Delete FieldRead', 'Delete BinaryOperator']",1327
"protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; super . METHOD_1 ( VAR_1 ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; }",['Move Invocation'],1328
"public void METHOD_1 ( android.view.View view , int position ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( position ) ; if ( VAR_1 != null ) { VAR_3 . get ( ) . METHOD_3 ( getContext ( ) , VAR_4 , VAR_5 . title ) ; } }","public void METHOD_1 ( android.view.View view , int position ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( position ) ; VAR_3 . get ( ) . METHOD_3 ( getContext ( ) , VAR_4 , VAR_5 . title ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1329
public java.util.List < java.lang.String > METHOD_1 ( ) { return VAR_1 ; },public java.util.Set < java.lang.String > METHOD_1 ( ) { return VAR_1 ; },['Update TypeReference'],1331
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . getText ( ) . equals ( STRING_1 ) ) VAR_2 . setText ( STRING_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setText ( STRING_2 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1332
"public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 ) , METHOD_4 ( VAR_1 ) , METHOD_5 ( VAR_1 ) , METHOD_6 ( VAR_1 ) ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 ) , METHOD_5 ( VAR_1 ) , METHOD_6 ( VAR_1 ) , METHOD_4 ( VAR_1 ) ) ; }",['Move Invocation'],1334
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { VAR_2 . METHOD_1 ( VAR_1 ) ; return TYPE_1 . METHOD_2 ( true ) ; } catch ( java.lang.Exception VAR_3 ) { return TYPE_1 . METHOD_3 ( VAR_3 ) ; } },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { return TYPE_1 . METHOD_2 ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; } catch ( java.lang.Exception VAR_3 ) { return TYPE_1 . METHOD_3 ( VAR_3 ) ; } },"['Move Invocation', 'Delete Literal']",1335
public void METHOD_1 ( java.lang.Integer ... VAR_1 ) { VAR_2 . info ( ( STRING_1 + ( java.util.Arrays.asList ( VAR_1 ) ) ) ) ; },public void METHOD_1 ( java.lang.Integer ... VAR_1 ) { },"['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation']",1337
public void METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1338
"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { VAR_3 . setText ( VAR_4 ) ; if ( VAR_5 . METHOD_2 ( ) ) { VAR_6 . METHOD_3 ( true ) ; } } }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { VAR_3 . setText ( VAR_4 ) ; VAR_6 . METHOD_3 ( true ) ; } }","['Move If', 'Move VariableRead', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1339
"private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; return VAR_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; }",private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; return ( VAR_2 . METHOD_2 ( STRING_1 ) ) && ( VAR_2 . METHOD_2 ( STRING_2 ) ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Invocation', 'Insert VariableRead', 'Move TypeAccess']",1340
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . append ( TYPE_2 . METHOD_2 ( ) ) ; VAR_2 . append ( VAR_1 ) ; METHOD_3 ( true ) ; return this ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . append ( ( ( TYPE_2 . METHOD_2 ( ) ) + VAR_1 ) ) ; METHOD_3 ( true ) ; return this ; },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1341
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1343
"protected void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( ) ) ) { TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; } }","protected void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1345
private boolean METHOD_1 ( ) { for ( java.lang.String string : VAR_1 ) { if ( VAR_2 . toLowerCase ( ) . METHOD_1 ( string ) ) { return true ; } } return false ; },private boolean METHOD_1 ( ) { for ( java.lang.String string : VAR_1 ) { if ( ! ( VAR_2 . toLowerCase ( ) . METHOD_1 ( string ) ) ) { return true ; } } return false ; },"['Insert UnaryOperator', 'Move Invocation']",1347
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_5 . METHOD_2 ( VAR_3 ) ; VAR_6 . METHOD_2 ( VAR_7 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_6 . METHOD_2 ( VAR_3 ) ; VAR_5 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_7 ) ; },"['Move Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess']",1349
protected void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) > 0 ) { remove ( METHOD_3 ( ) ) ; } },protected void METHOD_1 ( ) { remove ( METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1350
public boolean METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { java.lang.System.out.println ( STRING_1 ) ; return true ; } } return false ; },public boolean METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { return true ; } } return false ; },['Move Invocation'],1351
"public void METHOD_1 ( ) { VAR_1 . assertEquals ( VAR_2 class , TYPE_1 . METHOD_2 ( STRING_1 ) . getValue ( ) . getClass ( ) ) ; }","public void METHOD_1 ( ) { VAR_1 . assertEquals ( VAR_2 class , TYPE_1 . METHOD_2 ( STRING_1 ) . getClass ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Update Invocation', 'Delete Invocation']",1352
public void show ( ) { VAR_1 = true ; METHOD_1 ( ) ; if ( ( ! ( VAR_2 . equals ( METHOD_2 ( ) ) ) ) && ( VAR_3 ) ) { METHOD_2 ( ) . METHOD_3 ( ) ; } },public void show ( ) { VAR_1 = true ; METHOD_1 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1354
private java.lang.String METHOD_1 ( ) { if ( ( ! ( this . VAR_1 ) ) && ( this . VAR_2 . METHOD_2 ( ) ) ) { return ( VAR_3 ) + STRING_1 ; } else { return VAR_3 ; } },private java.lang.String METHOD_1 ( ) { if ( ! ( this . VAR_1 ) ) { return ( VAR_3 ) + STRING_1 ; } else { return VAR_3 ; } },"['Move UnaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",1356
public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } },public void METHOD_1 ( ) { VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1357
"public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( true , VAR_1 . equals ( VAR_2 , VAR_3 . METHOD_2 ( ) ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( VAR_2 , VAR_3 . METHOD_2 ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",1358
public java.lang.Double METHOD_1 ( ) { return ( java.lang.Long . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( ) ) / INT_1 ; },public java.lang.Double METHOD_1 ( ) { return java.lang.Long . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1359
private void METHOD_1 ( ) { int index = VAR_1 . METHOD_2 ( ) ; if ( index >= 0 ) { METHOD_3 ( VAR_2 . METHOD_4 ( index ) ) ; } },private void METHOD_1 ( ) { int index = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 . METHOD_4 ( index ) ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1361
"private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 , VAR_3 ) ; }","private void METHOD_1 ( java.lang.String VAR_2 , java.lang.String VAR_1 , java.lang.String VAR_3 ) { METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 , VAR_3 ) ; }",['Move Parameter'],1362
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; super . METHOD_1 ( VAR_1 ) ; },public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; return super . METHOD_1 ( VAR_1 ) ; },"['Update TypeReference', 'Insert Return', 'Move Invocation']",1363
"public void METHOD_1 ( android.view.View view ) { if ( VAR_1 . METHOD_2 ( ) ) { view . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ; if ( VAR_3 . METHOD_5 ( ) ) { METHOD_6 ( ) ; } } }","public void METHOD_1 ( android.view.View view ) { view . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ; if ( VAR_3 . METHOD_5 ( ) ) { METHOD_6 ( ) ; } }","['Move Invocation', 'Move Invocation', 'Move If', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1364
public boolean METHOD_1 ( ) { return ( ( this . VAR_1 ) != null ) && ( ! ( this . VAR_2 . equals ( STRING_1 ) ) ) ; },public boolean METHOD_1 ( ) { return ! ( this . VAR_2 . equals ( STRING_1 ) ) ; },"['Move UnaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1365
public java.lang.String toString ( ) { return ( ( this . VAR_1 ) + STRING_1 ) + ( this . VAR_2 . toString ( ) ) ; },public java.lang.String toString ( ) { return this . VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",1366
public static TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { if ( VAR_1 == null ) return null ; return new TYPE_1 ( VAR_1 ) ; },public static TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1367
public synchronized void METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) > 1 ) { this . VAR_2 . METHOD_1 ( ) ; } },public synchronized void METHOD_1 ( ) { this . VAR_2 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1368
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( true ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( true ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1369
public void METHOD_1 ( java.util.LinkedList < TYPE_1 > list ) { if ( ( view ( ) ) != null ) { view ( ) . METHOD_2 ( new TYPE_2 ( list ) ) ; } },public void METHOD_1 ( java.util.LinkedList < TYPE_1 > list ) { view ( ) . METHOD_2 ( new TYPE_2 ( list ) ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1370
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . getValue ( ) ) != null ) { VAR_3 = VAR_2 . getValue ( VAR_4 class ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 = VAR_2 . getValue ( VAR_4 class ) ; },"['Move Assignment', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1372
public void METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = METHOD_2 ( ) ; if ( ! ( METHOD_2 ( ) . contains ( VAR_1 ) ) ) { VAR_3 . add ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = METHOD_2 ( ) ; VAR_3 . add ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; },"['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1373
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) METHOD_2 ( true , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( true , VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1374
public boolean METHOD_1 ( ) { return ( ( VAR_1 . equals ( status ) ) || ( VAR_2 . equals ( status ) ) ) || ( VAR_3 . equals ( status ) ) ; },public boolean METHOD_1 ( ) { return VAR_1 . equals ( status ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",1375
"public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( 0 , VAR_3 , 0 , getString ( VAR_4 ) ) . METHOD_2 ( VAR_5 ) . METHOD_3 ( VAR_6 ) ; super . METHOD_1 ( VAR_1 ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( 0 , VAR_3 , 0 , getString ( VAR_4 ) ) . METHOD_3 ( VAR_6 ) ; super . METHOD_1 ( VAR_1 ) ; return true ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1377
public TYPE_1 < ? > METHOD_1 ( ) { return ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) ; },public java.lang.Class < ? > METHOD_1 ( ) { return VAR_2 . METHOD_4 ( ) ; },"['Update TypeReference', 'Move Invocation', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1378
public void METHOD_1 ( ) { VAR_1 = ( ( VAR_2 ) + ( VAR_3 ) ) - 1 ; METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) - ( VAR_3 ) ) ) ; },public void METHOD_1 ( ) { VAR_1 = ( ( VAR_2 ) + ( VAR_3 ) ) - 1 ; METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; },"['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1379
"public java.lang.String toString ( ) { return ( ( TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) + STRING_1 ) + ( VAR_6 ) ; }","public java.lang.String toString ( ) { return TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1380
public TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( new TYPE_3 ( TYPE_2 . METHOD_3 ( ) ) ) ; },public void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( new TYPE_3 ( TYPE_2 . METHOD_3 ( ) ) ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",1382
public static void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } },public static void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; VAR_1 = null ; } },['Move Invocation'],1383
public void METHOD_1 ( boolean VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( METHOD_2 ( ) ) VAR_2 . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( boolean VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1384
public java.lang.String [ ] METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( ) ; } return VAR_1 . METHOD_3 ( ) ; },public java.lang.String [ ] METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( ) ; } return VAR_1 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1385
void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; },void METHOD_1 ( ) { VAR_1 = ( VAR_2 . METHOD_2 ( ) ) - 1 ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1386
"public < TYPE_1 extends TYPE_2 < TYPE_3 , TYPE_4 > > TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ( ( TYPE_4 ) ( this ) ) ) ; add ( VAR_1 ) ; return VAR_1 ; }","public < TYPE_1 extends TYPE_2 < TYPE_3 , TYPE_4 > > TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { add ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ( ( TYPE_4 ) ( this ) ) ) ; return VAR_1 ; }",['Move Invocation'],1387
"private double METHOD_1 ( double VAR_1 , double VAR_2 ) { return FLOAT_1 * ( VAR_1 / VAR_2 ) ; }","private double METHOD_1 ( double VAR_1 , double VAR_2 ) { return ( FLOAT_1 * VAR_1 ) * VAR_2 ; }","['Update BinaryOperator', 'Move VariableRead', 'Move FieldRead']",1388
protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( ( VAR_3 ) < ( VAR_4 ) ) ) { VAR_2 = VAR_1 ; return true ; } return false ; },protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( ( VAR_4 ) < ( VAR_3 ) ) ) { VAR_2 = VAR_1 ; return true ; } return false ; },['Move FieldRead'],1389
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_1 . METHOD_2 ( getActivity ( ) ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( getActivity ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1390
public void METHOD_1 ( java.lang.String url ) { if ( VAR_1 . contains ( null ) ) VAR_1 . remove ( null ) ; VAR_1 . add ( url ) ; if ( VAR_2 ) VAR_1 . add ( null ) ; },public void METHOD_1 ( java.lang.String url ) { VAR_1 . add ( url ) ; VAR_1 . add ( null ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Block', 'Delete If']",1391
public void METHOD_1 ( ) { if ( ( ( ( VAR_1 ) == ( VAR_2 ) ) || ( ( VAR_1 ) == ( VAR_3 ) ) ) || ( VAR_4 ) ) { return ; } METHOD_2 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1392
public void METHOD_1 ( ) { this . sum = 0 ; if ( ! ( VAR_1 ) ) { this . VAR_2 = 0 ; } },public void METHOD_1 ( ) { this . sum = 0 ; this . VAR_2 = 0 ; },"['Move Assignment', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1393
"public void handle ( long VAR_1 ) { if ( ! ( VAR_2 ) ) { METHOD_1 ( VAR_3 , VAR_4 ) ; } }","public void handle ( long VAR_1 ) { METHOD_1 ( VAR_3 , VAR_4 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1395
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . i ( VAR_3 , STRING_1 ) ; VAR_1 . METHOD_2 ( ) ; if ( ( ! ( VAR_4 ) ) && ( ! ( VAR_5 ) ) ) { METHOD_3 ( ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1396
public void METHOD_1 ( ) { VAR_1 = true ; TYPE_1 . METHOD_2 ( ( ) - > { VAR_2 . METHOD_3 ( ) ; if ( ( VAR_3 ) == false ) { VAR_4 . show ( ) ; } } ) ; },public void METHOD_1 ( ) { VAR_1 = true ; TYPE_1 . METHOD_2 ( ( ) - > { VAR_2 . METHOD_3 ( ) ; VAR_4 . show ( ) ; } ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1397
public boolean METHOD_1 ( ) { if ( VAR_1 ) java.lang.System.out.println ( STRING_1 ) ; return METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; },public boolean METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; return METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1398
public void setEnabled ( boolean VAR_1 ) { VAR_2 . setEnabled ( VAR_1 ) ; if ( VAR_3 ) { METHOD_1 ( VAR_4 . METHOD_2 ( ) ) ; } },public void setEnabled ( boolean VAR_1 ) { VAR_2 . setEnabled ( VAR_1 ) ; },"['Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1399
"protected TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) . METHOD_4 ( METHOD_5 ( ) . METHOD_6 ( ) ) ; }","protected TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",1400
public TYPE_1 < java.lang.Boolean > delete ( java.lang.String key ) { if ( METHOD_1 ( ) ) { return VAR_1 . delete ( key ) ; } return TYPE_2 . METHOD_2 ( false ) ; },public TYPE_1 < java.lang.Boolean > delete ( java.lang.String key ) { return VAR_1 . delete ( key ) ; },"['Move Return', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Return']",1402
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_2 ) == null ) { METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1403
"public void METHOD_1 ( java.util.List < TYPE_1 > list ) { VAR_1 . i ( STRING_1 , ( STRING_2 + ( VAR_2 . size ( ) ) ) ) ; VAR_3 . METHOD_1 ( list ) ; VAR_4 . METHOD_2 ( ) ; }",public void METHOD_1 ( java.util.List < TYPE_1 > list ) { VAR_4 . METHOD_2 ( ) ; VAR_3 . METHOD_1 ( list ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation']",1404
private void METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_1 ) { java.lang.System.out.println ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) ) ; } },private void METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_1 ) { ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) ; } },"['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",1405
"public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_3 . toString ( ) , VAR_4 . toString ( ) ) ; }","public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_4 . toString ( ) , VAR_3 . toString ( ) ) ; }",['Move Invocation'],1406
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { METHOD_3 ( VAR_3 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( VAR_3 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1407
protected void METHOD_1 ( java.lang.String path ) { if ( METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; if ( ! ( VAR_2 . isEmpty ( path ) ) ) { VAR_3 . METHOD_4 ( path ) ; } } },protected void METHOD_1 ( java.lang.String path ) { VAR_1 . METHOD_3 ( ) ; if ( ! ( VAR_2 . isEmpty ( path ) ) ) { VAR_3 . METHOD_4 ( path ) ; } },"['Move Invocation', 'Move If', 'Delete Invocation', 'Delete Block', 'Delete If']",1408
public boolean METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) ) { return ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_1 ( ) ; } return false ; },public boolean METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { return ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_1 ( ) ; } return false ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1409
protected boolean METHOD_1 ( final TYPE_1 VAR_1 ) { boolean VAR_2 = ( VAR_1 . METHOD_2 ( ) ) && ( VAR_3 . equals ( VAR_4 . getType ( ) ) ) ; return VAR_2 ; },protected boolean METHOD_1 ( final TYPE_1 VAR_1 ) { boolean VAR_2 = ( VAR_1 . METHOD_2 ( ) ) && ( ( VAR_4 . getType ( ) ) != null ) ; return VAR_2 ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal', 'Delete TypeAccess', 'Delete Invocation']",1410
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } else { METHOD_3 ( VAR_1 ) ; } } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } else { METHOD_3 ( VAR_1 ) ; } },"['Move If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1411
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( METHOD_2 ( ) ) != null ) { VAR_2 = METHOD_2 ( ) . getBoolean ( VAR_3 ) ; } super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( this . getActivity ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( this . getActivity ( ) ) ; if ( ( METHOD_2 ( ) ) != null ) { VAR_2 = METHOD_2 ( ) . getBoolean ( VAR_3 ) ; } },['Move If'],1412
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( this . VAR_1 . METHOD_2 ( ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; this . METHOD_3 ( intent ) ; METHOD_4 ( ) ; } }","public void METHOD_1 ( ) { if ( this . VAR_1 . METHOD_2 ( ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; this . METHOD_3 ( intent ) ; METHOD_4 ( ) ; } super . METHOD_1 ( ) ; }",['Move Invocation'],1413
"public synchronized void setText ( java.lang.String text ) { this . METHOD_1 ( 0 , this . METHOD_2 ( ) ) ; this . METHOD_3 ( text ) ; this . METHOD_4 ( 0 ) ; }","public synchronized void setText ( java.lang.String text ) { this . METHOD_1 ( 0 , ( ( this . METHOD_2 ( ) ) - 1 ) ) ; this . METHOD_3 ( text ) ; this . METHOD_4 ( 0 ) ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1414
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ( STRING_1 + ( TYPE_2 . METHOD_3 ( VAR_2 . trim ( ) ) ) ) ) ; },public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ( STRING_1 + ( VAR_2 . trim ( ) ) ) ) ; },"['Update Invocation', 'Move Invocation', 'Move BinaryOperator', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1415
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; if ( VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_2 ) ; METHOD_3 ( ) ; VAR_3 = false ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; if ( ( VAR_3 ) || true ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_2 ) ; METHOD_3 ( ) ; VAR_3 = false ; } }","['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",1418
public int METHOD_1 ( ) { if ( this . VAR_1 ) { return this . VAR_2 ; } else if ( ( this . VAR_3 ) != null ) { return this . VAR_4 ; } else { return this . VAR_5 ; } },public int METHOD_1 ( ) { if ( ( this . VAR_3 ) != null ) { return this . VAR_2 ; } else { return this . VAR_4 ; } },"['Move If', 'Move Block', 'Move Return', 'Delete Block', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Return', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Block', 'Delete If']",1419
public void METHOD_1 ( ) { ( VAR_1 ) ++ ; if ( ( VAR_1 ) > ( ( VAR_2 . size ( ) ) - 1 ) ) VAR_1 = 0 ; METHOD_2 ( ) ; },public void METHOD_1 ( ) { ( VAR_1 ) ++ ; if ( ( VAR_1 ) > ( VAR_2 . size ( ) ) ) VAR_1 = 0 ; METHOD_2 ( ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1421
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { if ( VAR_3 ) { VAR_4 . add ( VAR_1 ) ; } else { VAR_4 . add ( this ) ; } VAR_2 . METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_4 . add ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; } },"['Move If', 'Move BinaryOperator', 'Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1422
private void METHOD_1 ( TYPE_1 node ) { if ( null != node ) { METHOD_1 ( node . METHOD_2 ( ) ) ; METHOD_1 ( node . METHOD_3 ( ) ) ; java.lang.System.out.print ( ( ( VAR_1 . getData ( ) ) + STRING_1 ) ) ; } },private void METHOD_1 ( TYPE_1 node ) { if ( null != node ) { METHOD_1 ( node . METHOD_2 ( ) ) ; METHOD_1 ( node . METHOD_3 ( ) ) ; java.lang.System.out.println ( VAR_1 . getData ( ) ) ; } },"['Update Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1423
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_2 = getIntent ( ) . METHOD_2 ( ) ; if ( VAR_2 != null ) { METHOD_3 ( VAR_2 ) ; } this . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_2 = getIntent ( ) . METHOD_2 ( ) ; METHOD_3 ( VAR_2 ) ; this . METHOD_4 ( ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1424
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( true ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1426
"public boolean METHOD_1 ( final android.view.View view , final TYPE_1 event ) { return VAR_1 . METHOD_2 ( event ) ; }","public boolean METHOD_1 ( final android.view.View view , final TYPE_1 event ) { VAR_1 . METHOD_2 ( event ) ; return true ; }","['Move Invocation', 'Insert Literal']",1427
"public void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 = null ; if ( VAR_3 ) TYPE_1 . METHOD_2 ( VAR_4 , VAR_5 ) ; }","public void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 = null ; TYPE_1 . METHOD_2 ( VAR_4 , VAR_5 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1428
"public java.lang.String toString ( ) { return ( ( ( VAR_1 ) + STRING_1 ) + ( TYPE_1 . METHOD_1 ( VAR_2 ) . substring ( 0 , INT_1 ) ) ) + STRING_2 ; }",public java.lang.String toString ( ) { return ( ( ( VAR_1 ) + STRING_1 ) + ( TYPE_1 . METHOD_1 ( VAR_2 ) ) ) + STRING_2 ; },"['Move Invocation', 'Delete Literal', 'Delete TypeAccess', 'Delete Invocation']",1429
"public java.lang.String METHOD_1 ( ) { int VAR_1 = VAR_2 ; if ( VAR_3 ) { VAR_1 = VAR_4 ; } return METHOD_2 ( VAR_1 , VAR_5 , ( ( ( ( VAR_6 ) + ""\t"" ) + ( VAR_7 ) ) + STRING_1 ) ) ; }","public java.lang.String METHOD_1 ( ) { int VAR_1 = VAR_2 ; if ( VAR_3 ) { VAR_1 = VAR_4 ; } return METHOD_2 ( VAR_1 , VAR_5 , ( ( ( VAR_6 ) + ""\t"" ) + ( VAR_7 ) ) ) ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1430
"public boolean METHOD_1 ( java.io.File VAR_1 , java.lang.String name ) { return ( name . METHOD_2 ( STRING_1 ) ) && ( ! ( name . METHOD_2 ( STRING_2 ) ) ) ; }","public boolean METHOD_1 ( java.io.File VAR_1 , java.lang.String name ) { return name . METHOD_2 ( STRING_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",1431
public java.util.Calendar METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( null == ( VAR_2 ) ) return VAR_3 ; else return VAR_2 ; },public java.util.Calendar METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; return VAR_2 ; },"['Move Return', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1432
public TYPE_1 METHOD_1 ( ) { if ( this . isEmpty ( ) ) { return null ; } return this . first ( ) ; },public TYPE_1 METHOD_1 ( ) { return this . first ( ) ; },"['Delete ThisAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1434
"private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; return METHOD_3 ( VAR_3 . format ( VAR_4 , VAR_2 . METHOD_4 ( ) ) , java.util.Arrays.asList ( VAR_2 , VAR_1 ) , null ) ; }","private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; return METHOD_3 ( VAR_3 . format ( VAR_4 , VAR_2 ) , java.util.Arrays.asList ( VAR_2 , VAR_1 ) , null ) ; }","['Move VariableRead', 'Delete Invocation']",1435
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) == null ) { java.lang.System.out.println ( VAR_1 ) ; } else { VAR_2 . METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) == null ) { java.lang.System.out.println ( VAR_1 ) ; } VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete Block']",1437
public void METHOD_1 ( TYPE_1 msg ) { if ( VAR_1 . getData ( ) . METHOD_2 ( STRING_1 ) ) { METHOD_3 ( VAR_1 . getData ( ) . getString ( STRING_1 ) ) ; } },public void METHOD_1 ( TYPE_1 msg ) { METHOD_3 ( VAR_1 . getData ( ) . getString ( STRING_1 ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1438
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( this ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( this ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; },['Move Invocation'],1439
private static boolean METHOD_1 ( char c ) { return ( ( TYPE_1 . METHOD_2 ( c ) ) || ( TYPE_1 . METHOD_3 ( c ) ) ) || ( c == CHAR_1 ) ; },private static boolean METHOD_1 ( char c ) { return ( TYPE_1 . METHOD_2 ( c ) ) || ( TYPE_1 . METHOD_3 ( c ) ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1440
"public boolean METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , METHOD_4 ( ) , VAR_1 ) ; return TYPE_3 . METHOD_5 ( VAR_2 , type , value ) ; }","public boolean METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , METHOD_4 ( ) , VAR_1 ) ; return TYPE_3 . METHOD_5 ( value , type , VAR_2 ) ; }","['Move FieldRead', 'Move VariableRead']",1441
"private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ( ! ( VAR_2 ) ) ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( ) . METHOD_6 ( ) . replace ( VAR_3 , VAR_4 ) . commit ( ) ; }","private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( ) . METHOD_6 ( ) . replace ( VAR_3 , VAR_4 ) . commit ( ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete UnaryOperator']",1442
public java.util.Collection < TYPE_1 > METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( VAR_2 . isEmpty ( ) ) ) { return VAR_3 < TYPE_1 > METHOD_2 ( ) ; } return VAR_1 ; },public java.util.Collection < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1443
"public void set ( int VAR_1 , int VAR_2 , float value ) { values [ ( ( VAR_1 * ( VAR_3 ) ) + VAR_2 ) ] = value ; }","public void set ( int VAR_1 , int VAR_2 , float value ) { values [ ( VAR_1 * VAR_2 ) ] = value ; }","['Move BinaryOperator', 'Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",1444
final java.lang.String METHOD_1 ( ) { if ( this . VAR_1 ) { return STRING_1 + ( METHOD_2 ( ) ) ; } return STRING_2 ; },final java.lang.String METHOD_1 ( ) { return STRING_1 + ( METHOD_2 ( ) ) ; },"['Move Return', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",1446
public int METHOD_1 ( ) { return this . METHOD_2 ( ) . toLowerCase ( ) . METHOD_1 ( ) ; },public int METHOD_1 ( ) { return this . METHOD_2 ( ) . METHOD_1 ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete Invocation']",1451
public boolean METHOD_1 ( ) { return ! ( ( index ) == null ) ; },public boolean METHOD_1 ( ) { return ( index ) == null ; },"['Move BinaryOperator', 'Delete UnaryOperator']",1452
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_2 ) ; if ( ( VAR_3 . getText ( ) . length ( ) ) == 0 ) { METHOD_3 ( 1 , TYPE_1 . METHOD_4 ( this ) ) ; } }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( VAR_2 ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1453
"public void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { for ( TYPE_1 VAR_3 : this . VAR_4 ) { if ( VAR_5 . equals ( java.lang.Integer.toString ( VAR_3 . METHOD_2 ( ) ) ) ) { VAR_3 . METHOD_3 ( VAR_2 ) ; } } }","public void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { for ( TYPE_1 VAR_3 : this . VAR_4 ) { if ( VAR_5 . equals ( VAR_3 . METHOD_2 ( ) ) ) { VAR_3 . METHOD_3 ( VAR_2 ) ; } } }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1454
public void METHOD_1 ( TYPE_1 list ) { if ( ( VAR_1 . getId ( ) ) == 0 ) { VAR_2 . METHOD_2 ( list ) ; } else { VAR_3 . update ( list ) ; } view . METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 list ) { VAR_2 . METHOD_2 ( list ) ; view . METHOD_3 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1457
private boolean METHOD_1 ( final java.lang.String path ) { return ( VAR_1 . equals ( this . VAR_2 ) ) || ( VAR_1 . startsWith ( ( ( this . VAR_2 ) + STRING_1 ) ) ) ; },private boolean METHOD_1 ( final java.lang.String path ) { return VAR_1 . startsWith ( this . VAR_2 ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete BinaryOperator']",1458
"public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 ) != null ) { TYPE_2 . METHOD_3 ( VAR_3 , STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; } }",public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1459
public boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) && ( VAR_1 ) ; },public boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",1460
protected void METHOD_1 ( ) { this . VAR_1 = TYPE_1 . METHOD_2 ( this . METHOD_3 ( ) . getValue ( ) ) ; },protected void METHOD_1 ( ) { this . VAR_1 = this . METHOD_3 ( ) . getValue ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1461
public void METHOD_1 ( ) { if ( ( VAR_1 ) != ( VAR_2 ) ) { VAR_1 = VAR_2 ; java.lang.System.out.println ( STRING_1 ) ; } VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_1 = VAR_2 ; VAR_4 . METHOD_3 ( ) ; },"['Move Assignment', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Invocation']",1462
public long METHOD_1 ( ) { if ( ( this . count ) == 0 ) { return VAR_1 ; } return VAR_2 ; },public long METHOD_1 ( ) { return VAR_2 ; },"['Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1463
public java.lang.String METHOD_1 ( ) { return output . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; },public java.io.File METHOD_1 ( ) { return new java.io.File ( output . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ) ; },"['Update TypeReference', 'Insert ConstructorCall', 'Move Invocation']",1465
"private void METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 { if ( ! ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) { TYPE_3 . METHOD_3 ( METHOD_4 ( ) , VAR_1 ) ; } }","private void METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 { if ( TYPE_3 . METHOD_2 ( VAR_1 ) ) { TYPE_3 . METHOD_3 ( METHOD_4 ( ) , VAR_1 ) ; } }","['Move Invocation', 'Delete UnaryOperator']",1467
public double METHOD_1 ( int VAR_1 ) { if ( ( ( VAR_1 == ( VAR_2 ) ) || ( VAR_1 == ( VAR_3 ) ) ) || ( VAR_1 == ( VAR_4 ) ) ) return this . METHOD_1 ( ) ; return this . VAR_5 ; },public double METHOD_1 ( int VAR_1 ) { if ( ( ( VAR_1 == ( VAR_2 ) ) || ( VAR_1 == ( VAR_3 ) ) ) || ( VAR_1 == ( VAR_4 ) ) ) return this . METHOD_1 ( ) ; else return this . VAR_5 ; },"['Insert Block', 'Move Return']",1468
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1469
"public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 element , TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_1 ( element , null , ( ( TYPE_5 ) ( VAR_1 . METHOD_2 ( ) ) ) , VAR_1 ) ; }","public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 element , TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_1 ( element , null , null , VAR_1 ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation']",1470
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( true ) . build ( ) ; },public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) . METHOD_2 ( VAR_2 ) . build ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete Literal', 'Delete Invocation']",1471
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; if ( ( getActivity ( ) ) != null ) { TYPE_1 . METHOD_3 ( METHOD_4 ( ) . getString ( VAR_3 ) , getActivity ( ) ) ; } }","public void METHOD_1 ( ) { TYPE_1 . METHOD_3 ( METHOD_4 ( ) . getString ( VAR_3 ) , getActivity ( ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1472
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ( ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ) + STRING_1 ) ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ( ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ) + STRING_1 ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1473
public void execute ( ) { if ( ( to ) == ( VAR_1 ) ) { METHOD_1 ( ) ; } VAR_2 . setState ( to ) ; },public void execute ( ) { VAR_2 . setState ( to ) ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",1474
"public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 . METHOD_3 ( VAR_2 , VAR_3 . METHOD_4 ( ) ) ; } return VAR_1 . METHOD_5 ( VAR_4 , VAR_3 . METHOD_4 ( ) ) ; }","public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 . METHOD_3 ( VAR_2 , VAR_3 . METHOD_4 ( ) ) ; } else { return VAR_1 . METHOD_5 ( VAR_4 , VAR_3 . METHOD_4 ( ) ) ; } }","['Insert Block', 'Move Return']",1475
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return null ; return VAR_1 . METHOD_1 ( ) ; },public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1478
"public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { return ( ! ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) || ( ! ( TYPE_1 . METHOD_3 ( VAR_3 ) ) ) ; }","public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( ( TYPE_1 . METHOD_2 ( VAR_2 ) ) && ( TYPE_1 . METHOD_3 ( VAR_3 ) ) ) return false ; return true ; }","['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Move Invocation', 'Move Invocation', 'Insert Return', 'Insert Literal', 'Delete UnaryOperator', 'Delete UnaryOperator']",1479
public java.lang.String METHOD_1 ( ) { return VAR_1 . toLowerCase ( ) ; },public java.lang.String METHOD_1 ( ) { return text ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1481
private static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) . METHOD_2 ( VAR_1 class ) . METHOD_3 ( true ) ; },private static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) . METHOD_2 ( VAR_1 class ) ; },"['Move Invocation', 'Delete Literal', 'Delete Invocation']",1482
"public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ( ( VAR_1 ) / INT_1 ) , ( ( VAR_1 ) / INT_1 ) ) ; }","public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ( ( VAR_1 ) / INT_1 ) , VAR_1 ) ; }","['Insert FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1483
"public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . get ( STRING_1 ) ; java.lang.System.out.print ( new TYPE_2 ( VAR_1 , STRING_2 ) . METHOD_2 ( ) ) ; }","public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . get ( STRING_1 ) ; new TYPE_2 ( VAR_1 , STRING_2 ) . METHOD_2 ( ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",1484
private int METHOD_1 ( int position ) { return ( position / INT_1 ) * ( VAR_1 ) ; },private int METHOD_1 ( int position ) { return ( VAR_1 ) + ( ( position / INT_1 ) * ( VAR_1 ) ) ; },"['Insert BinaryOperator', 'Insert FieldRead', 'Move BinaryOperator']",1485
"public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , STRING_1 ) . METHOD_3 ( VAR_2 , STRING_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , STRING_1 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1486
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( 0 ) ; METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( 1 ) ; METHOD_4 ( ) ; },['Update Literal'],1487
"public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , ( ( TYPE_3 . METHOD_3 ( ) ) - ( TYPE_2 . METHOD_4 ( ) ) ) ) ; }","public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , TYPE_2 . METHOD_4 ( ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",1488
public void METHOD_1 ( ) { if ( ! ( info . METHOD_2 ( ) ) ) { info . METHOD_3 ( 0 ) ; VAR_1 . start ( ) ; } else info . METHOD_4 ( ) ; },public void METHOD_1 ( ) { info . METHOD_3 ( 0 ) ; VAR_1 . start ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1489
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( ) ; } },"public void METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; }","['Insert Parameter', 'Move Invocation', 'Insert TypeReference', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1491
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( false ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; },['Update Literal'],1492
public double METHOD_1 ( ) { return ( METHOD_2 ( ) ) + ( ( FLOAT_1 * ( METHOD_3 ( ) ) ) / ( TYPE_1 . METHOD_4 ( VAR_1 . length ) ) ) ; },public double METHOD_1 ( ) { return ( METHOD_2 ( ) ) + ( FLOAT_1 * ( TYPE_1 . METHOD_4 ( ( ( METHOD_3 ( ) ) / ( VAR_1 . length ) ) ) ) ) ; },"['Update BinaryOperator', 'Move FieldRead', 'Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead']",1493
public void METHOD_1 ( boolean VAR_1 ) { if ( ( METHOD_2 ( ) ) < ( METHOD_3 ( ) ) ) METHOD_4 ( VAR_1 ) ; state . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( boolean VAR_1 ) { if ( ( METHOD_2 ( ) ) < ( METHOD_3 ( ) ) ) METHOD_4 ( VAR_1 ) ; else state . METHOD_1 ( VAR_1 ) ; },"['Insert Block', 'Move Invocation']",1494
"private static boolean METHOD_1 ( TYPE_1 element ) { return ( ( VAR_1 . getContext ( ) ) instanceof TYPE_2 ) && ( TYPE_3 . METHOD_2 ( element . METHOD_3 ( ) , element . METHOD_4 ( ) ) ) ; }","private static boolean METHOD_1 ( TYPE_1 element ) { if ( ( VAR_1 . getContext ( ) ) instanceof TYPE_2 ) { return TYPE_3 . METHOD_2 ( element . METHOD_3 ( ) , element . METHOD_4 ( ) ) ; } return false ; }","['Insert If', 'Insert Return', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Move Return', 'Move Invocation', 'Delete BinaryOperator']",1496
protected void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; } },protected void METHOD_1 ( ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; },"['Move Assignment', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1497
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; },protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; super . METHOD_1 ( ) ; },['Move Invocation'],1498
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_1 instanceof TYPE_2 ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1499
public TYPE_1 get ( int i ) { if ( ( VAR_1 . size ( ) ) > i ) return this . VAR_1 . get ( i ) ; return null ; },public TYPE_1 get ( int i ) { return this . VAR_1 . get ( i ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1501
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { if ( ! ( VAR_4 ) ) { VAR_5 . i ( STRING_1 , STRING_2 ) ; return ; } METHOD_2 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_3 ( ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { METHOD_2 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_3 ( ) ) ; }","['Delete FieldRead', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1503
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != ( VAR_2 ) ) VAR_2 = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; },"['Move Assignment', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1504
"public static java.lang.String METHOD_1 ( android.content.Context context ) { return VAR_1 . getString ( context , VAR_2 , java.lang.String . METHOD_2 ( new java.util.Date ( ) . getTime ( ) ) ) ; }","public static java.lang.String METHOD_1 ( android.content.Context context ) { return VAR_1 . getString ( context , VAR_2 , new java.util.Date ( ) . toString ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move VariableRead', 'Move TypeAccess', 'Update Invocation', 'Delete TypeAccess', 'Delete Invocation']",1505
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_2 ( VAR_5 ) ; VAR_6 . METHOD_2 ( VAR_2 ) ; VAR_7 = false ; VAR_8 = false ; METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_2 ( VAR_5 ) ; VAR_6 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; VAR_7 = false ; VAR_8 = false ; },['Move Invocation'],1507
"public void METHOD_1 ( java.lang.String key , TYPE_1 value ) { if ( value != null ) { VAR_1 . put ( key , value ) ; } }","public void METHOD_1 ( java.lang.String key , TYPE_1 value ) { VAR_1 . put ( key , value ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1508
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) TYPE_1 . METHOD_2 ( new TYPE_1 ( ) ) ; return VAR_1 ; },public static synchronized TYPE_1 METHOD_1 ( ) { return VAR_1 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete ConstructorCall', 'Delete Invocation', 'Delete Block', 'Delete If']",1510
public double METHOD_1 ( ) { return ( ( ( VAR_1 ) * INT_1 ) * FLOAT_1 ) * INT_2 ; },public double METHOD_1 ( ) { return ( ( VAR_1 ) * INT_1 ) * FLOAT_1 ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1511
private void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 = 0 ; VAR_3 = 0 ; VAR_4 = 0 ; VAR_5 = 0 ; if ( ! ( VAR_6 . equals ( VAR_7 ) ) ) VAR_8 = 0 ; VAR_9 = 0 ; },private void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 = 0 ; VAR_3 = 0 ; VAR_4 = 0 ; VAR_5 = 0 ; VAR_8 = 0 ; VAR_9 = 0 ; },"['Move Assignment', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1512
public boolean METHOD_1 ( ) { return VAR_1 . toString ( ) . equals ( VAR_2 . toString ( ) ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 . toString ( ) ) == ( VAR_2 . toString ( ) ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Move Invocation', 'Delete Invocation']",1513
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { VAR_2 = VAR_1 ; view . METHOD_3 ( VAR_1 ) ; view . METHOD_4 ( ) ; } else { view . METHOD_5 ( ) ; view . METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { VAR_2 = VAR_1 ; view . METHOD_3 ( VAR_1 ) ; view . METHOD_4 ( ) ; } else view . METHOD_5 ( ) ; view . METHOD_4 ( ) ; },['Move Invocation'],1515
"private TYPE_1 METHOD_1 ( double VAR_1 , int i ) { return METHOD_1 ( METHOD_2 ( ) , VAR_1 , i ) ; }","private void METHOD_1 ( double VAR_1 , int i ) { METHOD_1 ( METHOD_2 ( ) , VAR_1 , i ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",1516
public void METHOD_1 ( TYPE_1 buffer ) throws java.io.IOException { super . METHOD_1 ( buffer ) ; if ( METHOD_2 ( ) ) { VAR_1 = buffer . METHOD_3 ( ) ; VAR_2 = buffer . METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 buffer ) throws java.io.IOException { super . METHOD_1 ( buffer ) ; VAR_1 = buffer . METHOD_3 ( ) ; VAR_2 = buffer . METHOD_3 ( ) ; },"['Move Assignment', 'Move Assignment', 'Delete Invocation', 'Delete Block', 'Delete If']",1517
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( this , VAR_2 , STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_4 ( STRING_2 ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( this , VAR_2 , STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; }",['Move Invocation'],1518
public void METHOD_1 ( java.lang.Throwable VAR_1 ) { if ( VAR_1 == null ) { METHOD_2 ( ) . METHOD_3 ( false ) ; } else { VAR_2 . METHOD_4 ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.Throwable VAR_1 ) { VAR_2 . METHOD_4 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1519
"private static TYPE_1 METHOD_1 ( int VAR_1 , java.util.Scanner VAR_2 ) { if ( VAR_1 == 1 ) { return new TYPE_2 ( ) ; } else { return null ; } }",private static TYPE_2 METHOD_1 ( ) { return new TYPE_2 ( ) ; },"['Update TypeReference', 'Move Return', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1520
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 ; java.lang.String message = METHOD_2 ( ) ; if ( message != null ) return TYPE_2 . METHOD_3 ( VAR_2 . trim ( ) ) ; return null ; },public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 ; java.lang.String message = METHOD_2 ( ) ; if ( message != null ) return TYPE_2 . METHOD_3 ( message ) ; return null ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1521
"private TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( count , VAR_2 ) ; }",private TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( count ) ; },['Delete TypeAccess'],1522
"private void METHOD_1 ( java.lang.String filePath , TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_3 . METHOD_2 ( ) , VAR_4 ) ; METHOD_3 ( filePath ) ; if ( VAR_1 != null ) METHOD_4 ( VAR_1 ) ; }","private void METHOD_1 ( java.lang.String filePath , TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_3 . METHOD_2 ( ) , VAR_4 ) ; METHOD_3 ( filePath ) ; METHOD_4 ( VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1523
public static boolean METHOD_1 ( java.lang.String [ ] VAR_1 ) { return new TYPE_1 ( ) . METHOD_1 ( VAR_1 ) ; },public static void METHOD_1 ( java.lang.String [ ] VAR_1 ) { new TYPE_1 ( ) . METHOD_1 ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",1524
"private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { TYPE_3 . METHOD_2 ( ( ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) * ( - 1 ) ) , VAR_1 . METHOD_4 ( ) ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { TYPE_3 . METHOD_2 ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; } }","['Move Invocation', 'Delete Literal', 'Delete UnaryOperator', 'Delete BinaryOperator']",1525
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return ( ( TYPE_3 ) ( TYPE_4 . METHOD_2 ( ) . METHOD_1 ( getClass ( ) ) ) ) ; },public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( ) . METHOD_1 ( getClass ( ) ) ; },['Delete TypeReference'],1527
"public void METHOD_1 ( java.lang.Object result ) { METHOD_1 ( 1 , result ) ; }","public boolean METHOD_1 ( java.lang.Object result ) { return METHOD_1 ( 1 , result ) ; }","['Update TypeReference', 'Insert Return', 'Move Invocation']",1528
"public double METHOD_1 ( double value ) { return TYPE_1 . METHOD_2 ( ( ( value / ( this . VAR_1 ) ) * INT_1 ) ) . METHOD_3 ( INT_2 , VAR_2 ) . METHOD_4 ( ) ; }","public double METHOD_1 ( double value ) { return new TYPE_1 ( ( ( value / ( this . VAR_1 ) ) * INT_1 ) ) . METHOD_3 ( INT_2 , VAR_2 ) . METHOD_4 ( ) ; }","['Update Invocation', 'Move Invocation', 'Update Invocation', 'Insert ConstructorCall', 'Move TypeAccess', 'Move TypeAccess', 'Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation']",1529
"public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 , ( ( TYPE_2 ) ( VAR_3 ) ) ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 , null ) ; }","['Insert Literal', 'Delete TypeReference', 'Delete TypeAccess']",1530
public java.lang.String METHOD_1 ( java.lang.String value ) { java.lang.String [ ] VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( value ) ) ; return METHOD_4 ( VAR_1 ) ; },public java.lang.String METHOD_1 ( java.lang.String value ) { java.lang.String [ ] VAR_1 = TYPE_1 . METHOD_2 ( value ) ; return METHOD_4 ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",1533
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_3 . getId ( ) ) ) return ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( VAR_4 ) ) ) ; return null ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( VAR_4 ) ) ) ; },"['Move Return', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1534
"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( getContext ( ) , VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_3 ( getContext ( ) ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; }","public void METHOD_1 ( ) { TYPE_2 VAR_3 = new TYPE_3 ( getContext ( ) ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; VAR_1 = new TYPE_1 ( getContext ( ) , VAR_2 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }","['Move Assignment', 'Move Invocation']",1535
private int METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { return VAR_2 . METHOD_2 ( ) ; } else { return VAR_1 ; } },private int METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { VAR_2 . METHOD_2 ( ) ; } else { return VAR_1 ; } return - 1 ; },"['Insert Return', 'Insert UnaryOperator', 'Move Invocation', 'Insert Literal', 'Delete Return']",1537
public boolean equals ( java.lang.Object VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . equals ( ( ( TYPE_1 ) ( VAR_1 ) ) . VAR_3 ) ; } else { return false ; } },public boolean equals ( java.lang.Object VAR_1 ) { return VAR_2 . equals ( ( ( TYPE_1 ) ( VAR_1 ) ) . VAR_3 ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1538
"private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_4 , VAR_5 ) ; METHOD_3 ( ) . METHOD_4 ( VAR_6 , VAR_1 , this ) . METHOD_5 ( ) ; }","private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_4 , VAR_5 ) ; METHOD_3 ( ) . METHOD_4 ( VAR_6 , VAR_1 , this ) ; }","['Move Invocation', 'Delete Invocation']",1540
"public boolean METHOD_1 ( TYPE_1 view , boolean VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) { if ( ( VAR_4 ) != null ) { return VAR_4 . METHOD_1 ( view , VAR_1 , VAR_2 , VAR_3 ) ; } return false ; }","public boolean METHOD_1 ( TYPE_1 view , boolean VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) { return VAR_4 . METHOD_1 ( view , VAR_1 , VAR_2 , VAR_3 ) ; }","['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1541
"public void METHOD_1 ( java.lang.Throwable t ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( VAR_2 , STRING_1 ) ; }","public void METHOD_1 ( java.lang.Throwable t ) { TYPE_1 . METHOD_4 ( VAR_2 , STRING_1 ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; }",['Move Invocation'],1542
public TYPE_1 METHOD_1 ( int position ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 . size ( ) ) > 0 ) ) return VAR_2 . get ( position ) ; else return null ; },public TYPE_1 METHOD_1 ( int position ) { return VAR_2 . get ( position ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1543
protected java.lang.Integer METHOD_1 ( java.lang.Void ... params ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_3 ( ) ) > 0 ) ) { return 1 ; } return 0 ; },protected java.lang.Integer METHOD_1 ( java.lang.Void ... params ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { return 1 ; } return 0 ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1544
"private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( TYPE_1 . METHOD_2 ( ( ( ( ( TYPE_2 . METHOD_3 ( CHAR_1 , VAR_2 . getString ( STRING_1 ) ) ) + ( VAR_3 ) ) + STRING_2 ) + VAR_1 ) ) ) ; }","private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( TYPE_1 . METHOD_2 ( ( ( ( TYPE_2 . METHOD_3 ( CHAR_1 , VAR_2 . getString ( STRING_1 ) ) ) + ( VAR_3 ) ) + VAR_1 ) ) ) ; }","['Move BinaryOperator', 'Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",1545
"private void METHOD_1 ( java.lang.String VAR_1 ) { long VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; VAR_5 . setText ( ( STRING_1 + ( VAR_6 . METHOD_3 ( VAR_2 ) ) ) ) ; }","private void METHOD_1 ( java.lang.String VAR_1 ) { long VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; VAR_5 . setText ( VAR_6 . METHOD_3 ( VAR_2 ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1547
"public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < java.lang.Void > VAR_2 ) { if ( VAR_1 != null ) { TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } }","public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < java.lang.Void > VAR_2 ) { TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1549
"public void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ! ( VAR_1 ) ) { VAR_2 . METHOD_3 ( this , VAR_3 ) ; } }","public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( this , VAR_3 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1550
"public void METHOD_1 ( TYPE_1 value ) { put ( STRING_1 , value . METHOD_2 ( ) ) ; }","public void METHOD_1 ( TYPE_1 value ) { put ( STRING_1 , value ) ; }","['Move VariableRead', 'Delete Invocation']",1552
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( ! ( VAR_2 . isEmpty ( ) ) ) VAR_3 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; },public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_3 . METHOD_3 ( VAR_1 ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1553
"public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) return VAR_3 . METHOD_2 ( VAR_1 , STRING_1 ) ; return VAR_1 . METHOD_3 ( STRING_1 ) ; }",public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_3 ( STRING_1 ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1554
"public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; } else if ( ! ( VAR_2 ) ) { METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( VAR_3 , STRING_1 ) ; } }","public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; } else { METHOD_3 ( ) ; } TYPE_1 . METHOD_4 ( VAR_3 , STRING_1 ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1555
"public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) . METHOD_4 ( VAR_1 , null , this ) ; } }","public void METHOD_1 ( ) { METHOD_3 ( ) . METHOD_4 ( VAR_1 , null , this ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1556
public TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) + 1 ) < ( VAR_2 . size ( ) ) ) { return VAR_2 . get ( ( ( VAR_1 ) + 1 ) ) ; } return null ; },public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) < ( VAR_2 . size ( ) ) ) { return VAR_2 . get ( ( ( VAR_1 ) + 1 ) ) ; } return null ; },"['Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1557
public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) == null ) { this . METHOD_2 ( ) ; } VAR_3 . add ( VAR_1 ) ; },public void METHOD_1 ( int VAR_1 ) { VAR_3 . add ( VAR_1 ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1558
protected static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; return VAR_1 ; },protected static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_1 . METHOD_2 ( null ) ; return VAR_1 ; },['Move Invocation'],1561
"public boolean METHOD_1 ( ) { return ( ! ( VAR_1 ) ) && ( METHOD_2 ( VAR_2 , VAR_3 ) ) ; }","public boolean METHOD_1 ( ) { return METHOD_2 ( VAR_2 , VAR_3 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",1562
public void update ( ) { VAR_1 . METHOD_1 ( ) ; if ( ( VAR_2 ) != null ) { METHOD_2 ( ) ; } },public void update ( ) { VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1564
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1565
private void METHOD_1 ( android.content.Context context ) { if ( ( VAR_1 ) != null ) { context . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; VAR_1 = null ; } context . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; },private void METHOD_1 ( android.content.Context context ) { if ( ( VAR_1 ) != null ) { context . METHOD_3 ( VAR_1 ) ; VAR_1 = null ; } context . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",1567
private void METHOD_1 ( ) { new TYPE_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; },private void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; new TYPE_1 ( VAR_1 ) ; },['Move ConstructorCall'],1569
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_3 ( ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1570
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( ( METHOD_2 ( ) . get ( VAR_1 ) ) != null ) { return METHOD_2 ( ) . get ( VAR_1 ) ; } return METHOD_1 ( ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . get ( VAR_1 ) ; },"['Move Return', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Invocation', 'Delete Return']",1572
public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( ( VAR_2 . size ( ) ) - 1 ) ) { VAR_1 = 0 ; } else { ( VAR_1 ) ++ ; } VAR_3 = VAR_2 . get ( VAR_1 ) ; },public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 . size ( ) ) ) { VAR_1 = 0 ; } else { ( VAR_1 ) ++ ; } VAR_3 = VAR_2 . get ( VAR_1 ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1577
"public void METHOD_1 ( TYPE_1 view , java.lang.String VAR_1 ) { if ( VAR_1 != null ) { VAR_2 . state ( ) . METHOD_2 ( ) . METHOD_1 ( METHOD_3 ( VAR_1 ) ) . commit ( ) ; } }","public void METHOD_1 ( TYPE_1 view , java.lang.String VAR_1 ) { if ( VAR_1 != null ) { view . METHOD_1 ( METHOD_3 ( VAR_1 ) ) ; } }","['Move Invocation', 'Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",1578
public int [ ] METHOD_1 ( ) { VAR_1 [ 0 ] = ( VAR_2 . METHOD_2 ( INT_1 ) ) + 1 ; VAR_1 [ 1 ] = ( VAR_2 . METHOD_2 ( INT_1 ) ) + 1 ; return VAR_1 ; },public int [ ] METHOD_1 ( ) { VAR_1 [ 0 ] = VAR_2 . METHOD_2 ( INT_1 ) ; VAR_1 [ 1 ] = VAR_2 . METHOD_2 ( INT_1 ) ; return VAR_1 ; },"['Move Invocation', 'Move Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",1579
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( null ) ; VAR_1 . METHOD_3 ( null ) ; VAR_1 . METHOD_4 ( null , METHOD_5 ( ) ) ; METHOD_6 ( ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_4 ( null , METHOD_5 ( ) ) ; }","['Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Invocation']",1580
public void METHOD_1 ( ) { java.lang.System.out.print ( STRING_1 ) ; java.lang.System.out.print ( ( ( ( ( ( METHOD_2 ( ) ) + STRING_2 ) + ( METHOD_3 ( ) ) ) + STRING_3 ) + ( METHOD_4 ( ) ) ) ) ; },public void METHOD_1 ( ) { java.lang.System.out.print ( STRING_1 ) ; java.lang.System.out.print ( ( ( ( ( METHOD_2 ( ) ) + ( METHOD_3 ( ) ) ) + STRING_3 ) + ( METHOD_4 ( ) ) ) ) ; },"['Move BinaryOperator', 'Move Invocation', 'Move FieldRead', 'Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1581
public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_2 . METHOD_1 ( VAR_1 ) ) && ( ( VAR_3 . METHOD_2 ( VAR_1 ) ) != null ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1582
"public void METHOD_1 ( java.lang.String message , boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( message , ( VAR_1 ? VAR_3 : VAR_4 ) ) ; VAR_5 . add ( VAR_2 ) ; VAR_6 . add ( VAR_2 ) ; VAR_7 . METHOD_2 ( ) ; }","public void METHOD_1 ( java.lang.String message , boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( message , ( VAR_1 ? VAR_3 : VAR_4 ) ) ; VAR_6 . add ( VAR_2 ) ; VAR_5 . add ( VAR_2 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1583
public static int METHOD_1 ( ) { if ( ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( ) ) != null ) ) && ( VAR_1 . METHOD_2 ( ) . VAR_2 ) ) return 1 ; else return 0 ; },public static int METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) . VAR_2 ) ) return 1 ; else return 0 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1585
"public void METHOD_1 ( java.lang.Throwable error , java.lang.Void result ) { if ( error != null ) { VAR_1 . error ( STRING_1 , error ) ; VAR_1 . error ( STRING_2 , VAR_2 ) ; } }","public void METHOD_1 ( java.lang.Throwable error , java.lang.Void result ) { VAR_1 . error ( STRING_1 , error ) ; VAR_1 . error ( STRING_2 , VAR_2 ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1586
"public void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 , final int VAR_3 , final int VAR_4 ) { this . VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 , final int VAR_3 , final int VAR_4 ) { this . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }","['Move ThisAccess', 'Delete FieldRead']",1587
public static boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_1 ( ) ) ; },public static boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1589
public void delete ( TYPE_1 VAR_1 ) { new TYPE_2 ( METHOD_1 ( ) ) . delete ( METHOD_2 ( ) ) . METHOD_3 ( METHOD_4 ( VAR_1 ) ) . METHOD_5 ( ) ; },public void delete ( TYPE_1 VAR_1 ) { new TYPE_2 ( METHOD_1 ( ) ) . delete ( METHOD_2 ( ) ) . METHOD_3 ( METHOD_4 ( VAR_1 ) ) ; },"['Move Invocation', 'Delete Invocation']",1591
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( rows ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( rows , VAR_2 ) ; }",public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( rows ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_2 ( rows ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; },"['Update Invocation', 'Insert Invocation', 'Insert TypeAccess', 'Move TypeAccess']",1592
private TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_2 ; } else if ( ( VAR_3 ) == VAR_1 ) { return VAR_4 ; } return null ; },private TYPE_1 METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_2 ; } return null ; },"['Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Block']",1593
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_2 . setEnabled ( false ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 . setEnabled ( false ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1594
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) == ( - INT_1 ) ) || ( ( VAR_2 ) == true ) ) METHOD_2 ( this ) ; else { METHOD_3 ( VAR_1 ) ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( - INT_1 ) ) METHOD_2 ( this ) ; else METHOD_3 ( VAR_1 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1596
protected boolean METHOD_1 ( java.lang.String query ) { if ( query == null ) { return true ; } return TYPE_1 . METHOD_2 ( query ) . METHOD_3 ( ) ; },protected boolean METHOD_1 ( java.lang.String query ) { if ( query == null ) { return true ; } return ! ( TYPE_1 . METHOD_2 ( query ) . METHOD_3 ( ) ) ; },"['Insert UnaryOperator', 'Move Invocation']",1597
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = METHOD_2 ( STRING_1 ) ; if ( VAR_1 != null ) METHOD_1 ( VAR_2 . split ( STRING_2 ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = METHOD_2 ( STRING_1 ) ; METHOD_1 ( VAR_2 . split ( STRING_2 ) ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1598
"public java.lang.String METHOD_1 ( java.lang.Long VAR_1 , java.lang.String VAR_2 ) { VAR_3 . assertThat ( VAR_1 , TYPE_1 . METHOD_2 ( 1L ) ) ; VAR_3 . assertThat ( VAR_2 , TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) ; return STRING_1 ; }","public java.lang.String METHOD_1 ( java.lang.Long VAR_1 ) { VAR_3 . assertThat ( VAR_1 , TYPE_1 . METHOD_2 ( 1L ) ) ; return STRING_1 ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",1599
"public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( VAR_2 ) ; } else { METHOD_2 ( VAR_3 ) ; } java.lang.String VAR_4 = METHOD_3 ( ) ; METHOD_4 ( METHOD_3 ( ) , true ) ; METHOD_5 ( VAR_4 ) ; }","public void METHOD_1 ( ) { METHOD_2 ( VAR_3 ) ; java.lang.String VAR_4 = METHOD_3 ( ) ; METHOD_4 ( METHOD_3 ( ) , true ) ; METHOD_5 ( VAR_4 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1600
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) this . VAR_2 = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_1 ; },"['Move Assignment', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1602
public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 . METHOD_2 ( ) ) == null ) ) { METHOD_3 ( ) ; } },public void METHOD_1 ( ) { if ( ( VAR_2 . METHOD_2 ( ) ) == null ) { METHOD_3 ( ) ; } },"['Move BinaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",1603
public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; } else if ( VAR_2 ) { METHOD_3 ( ) ; } else { super . METHOD_1 ( ) ; } },public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; } else { super . METHOD_1 ( ) ; } },"['Move If', 'Move FieldRead', 'Move Block', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1605
public static int METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) TYPE_1 . METHOD_2 ( ) ; return VAR_1 ; },public static int METHOD_1 ( ) { return VAR_1 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1606
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1607
public void METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) > 0 ) { throw new TYPE_1 ( ) ; } else { try { VAR_1 . remove ( 0 ) ; } catch ( TYPE_2 VAR_2 ) { throw VAR_2 ; } } },public void METHOD_1 ( ) { if ( ( VAR_1 . size ) > 0 ) { throw new TYPE_1 ( ) ; } else { try { VAR_1 . remove ( 0 ) ; } catch ( TYPE_2 VAR_2 ) { throw VAR_2 ; } } },"['Insert FieldRead', 'Move TypeAccess', 'Delete Invocation']",1608
"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_3 . METHOD_2 ( this ) ) { TYPE_2 . METHOD_3 ( this , STRING_1 , VAR_4 ) . show ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( this ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1610
private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; } VAR_3 . setText ( VAR_4 . METHOD_3 ( VAR_1 ) ) ; },private void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . setText ( VAR_4 . METHOD_3 ( VAR_1 ) ) ; },"['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1612
protected static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . arg ( STRING_1 ) . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; },protected static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . arg ( STRING_1 ) . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1613
public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ( ( VAR_2 ) + 1 ) ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ( ( VAR_2 ) - 1 ) ) ; },['Update BinaryOperator'],1614
public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( java.lang.Integer VAR_1 ) { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Update TypeReference', 'Update TypeAccess']",1615
public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( getName ( ) ) ) ; },public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( getName ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1616
"public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { return ( ( ( ( this . VAR_3 ) + VAR_1 ) + STRING_1 ) + VAR_2 ) + STRING_1 ; }","public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { return ( ( ( this . VAR_3 ) + VAR_1 ) + STRING_1 ) + VAR_2 ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1617
private java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_2 . toString ( ) ; } else { return VAR_3 . name ( ) ; } },private java.lang.String METHOD_1 ( ) { return VAR_2 . toString ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1619
private static int METHOD_1 ( android.content.Context context ) { if ( ( VAR_1 ) && ( ( VAR_2 . length ) > 0 ) ) return VAR_3 [ ( ( VAR_2 . length ) - 1 ) ] ; return - 1 ; },private static int METHOD_1 ( android.content.Context context ) { if ( VAR_1 ) return VAR_3 [ ( ( VAR_2 . length ) - 1 ) ] ; return - 1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1620
public void start ( ) { super . start ( ) ; METHOD_1 ( ) . start ( ) ; METHOD_2 ( ) ; VAR_1 . start ( ) ; },public void start ( ) { METHOD_1 ( ) . start ( ) ; super . start ( ) ; METHOD_2 ( ) ; VAR_1 . start ( ) ; },['Move Invocation'],1622
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 = null ; VAR_3 = null ; VAR_4 = null ; VAR_5 = null ; TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( ) ; METHOD_2 ( ) ; VAR_2 = null ; VAR_3 = null ; VAR_4 = null ; VAR_5 = null ; TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; },['Move Invocation'],1623
private boolean METHOD_1 ( ) { return ! ( ( VAR_1 . METHOD_2 ( ( i ) - > { return i < ( VAR_2 ) ? ++ i : i ; } ) ) < ( VAR_2 ) ) ; },private boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ( i ) - > { return i < ( VAR_2 ) ? ++ i : i ; } ) ) < ( VAR_2 ) ; },"['Move BinaryOperator', 'Delete UnaryOperator']",1625
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; try { new TYPE_2 ( VAR_1 , INT_1 ) . get ( ) ; } catch ( TYPE_3 VAR_2 ) { return ; } VAR_3 . fail ( ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; try { new TYPE_2 ( VAR_1 , INT_1 ) . get ( ) ; VAR_3 . fail ( ) ; } catch ( TYPE_3 VAR_2 ) { } }","['Move Invocation', 'Delete Return']",1626
public int METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_2 . length ( ) ) + ( TYPE_1 . METHOD_2 ( ) . METHOD_1 ( VAR_2 . length ( ) ) ) ; },public int METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . length ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator']",1627
public boolean equals ( java.lang.Object obj ) { if ( obj instanceof TYPE_1 ) { return ( ( TYPE_1 ) ( obj ) ) . VAR_1 . METHOD_1 ( VAR_1 ) ; } return false ; },public boolean equals ( java.lang.Object obj ) { if ( obj instanceof TYPE_1 ) { return ( ( ( TYPE_1 ) ( obj ) ) . id ) == ( id ) ; } return false ; },"['Insert BinaryOperator', 'Update FieldRead', 'Move FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1628
"public static java.lang.String METHOD_1 ( double VAR_1 ) { if ( ( VAR_1 % 1 ) == 0 ) { return java.lang.String.format ( STRING_1 , VAR_1 ) ; } else { return java.lang.String.format ( STRING_2 , VAR_1 ) ; } }","public static java.lang.String METHOD_1 ( double VAR_1 ) { if ( VAR_1 == 0 ) { return ""0"" ; } else { return java.lang.String.format ( STRING_2 , VAR_1 ) ; } }","['Update BinaryOperator', 'Move BinaryOperator', 'Move Literal', 'Insert Literal', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",1629
protected boolean METHOD_1 ( ) { return ( ( ( node ) != null ) && ( METHOD_2 ( ) ) ) && ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . contains ( fieldName ) ) ; },protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) && ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . contains ( fieldName ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1630
"private void METHOD_1 ( TYPE_1 p , java.lang.String VAR_1 ) { p . METHOD_2 ( ( ( byte ) ( VAR_1 != null ? 1 : 0 ) ) ) ; if ( VAR_1 != null ) p . METHOD_3 ( VAR_1 ) ; }","private void METHOD_1 ( TYPE_1 p , java.lang.String VAR_1 ) { p . METHOD_2 ( ( ( byte ) ( VAR_1 != null ? 1 : 0 ) ) ) ; p . METHOD_3 ( VAR_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1632
public void METHOD_1 ( ) { METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( null ) ; if ( VAR_2 . METHOD_4 ( ) ) { VAR_2 . METHOD_5 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_3 ( null ) ; METHOD_2 ( false ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1633
"public void METHOD_1 ( android.view.View VAR_1 , long VAR_2 , long VAR_3 , TYPE_1 listener ) { VAR_4 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , METHOD_4 ( VAR_1 ) , METHOD_5 ( ) , VAR_2 , VAR_6 , VAR_7 , VAR_3 , listener ) ; }","public void METHOD_1 ( android.view.View VAR_1 , long VAR_2 , long VAR_3 , TYPE_1 listener ) { VAR_4 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( METHOD_4 ( VAR_1 ) , METHOD_5 ( ) , VAR_2 , VAR_6 , VAR_7 , VAR_3 , listener ) ; }",['Delete VariableRead'],1634
"public TYPE_1 METHOD_1 ( int index ) { TYPE_1 VAR_1 = METHOD_2 ( index ) ; if ( VAR_1 == null ) { return null ; } METHOD_3 ( index , null ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( int index ) { TYPE_1 VAR_1 = METHOD_2 ( index ) ; if ( VAR_1 != null ) { METHOD_3 ( index , null ) ; return VAR_1 ; } return null ; }","['Move Return', 'Update BinaryOperator', 'Move Invocation', 'Move Return']",1635
public void METHOD_1 ( final int VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) ) == VAR_1 ) ) { VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; } },public void METHOD_1 ( final int VAR_1 ) { VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1636
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; },private void METHOD_1 ( ) { if ( ( VAR_2 ) != null ) { VAR_1 . METHOD_2 ( VAR_2 ) ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Invocation']",1637
"public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { if ( METHOD_2 ( VAR_2 ) ) { buffer . METHOD_1 ( METHOD_3 ( VAR_2 ) , VAR_1 ) ; METHOD_4 ( ) ; } else { METHOD_5 ( null ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { buffer . METHOD_1 ( METHOD_3 ( VAR_2 ) , VAR_1 ) ; METHOD_4 ( ) ; }","['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",1638
"private static void METHOD_1 ( TYPE_1 VAR_1 , int number ) { for ( int i = 0 ; i < number ; i ++ ) { VAR_2 . add ( new TYPE_1 ( STRING_1 , VAR_3 ) ) ; } }","private static void METHOD_1 ( TYPE_1 VAR_1 , int number ) { for ( int i = 0 ; i < number ; i ++ ) { VAR_2 . add ( new TYPE_1 ( STRING_1 ) ) ; } }",['Delete FieldRead'],1639
public boolean METHOD_1 ( ) { return METHOD_1 ( null ) ; },public void METHOD_1 ( ) { METHOD_1 ( null ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",1640
"protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ! ( VAR_2 ) ) VAR_3 . put ( java.lang.Thread . METHOD_2 ( ) , VAR_1 ) ; return VAR_1 ; }","protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_3 . put ( java.lang.Thread . METHOD_2 ( ) , VAR_1 ) ; return VAR_1 ; }","['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1641
public TYPE_1 METHOD_1 ( java.lang.String id ) { return VAR_1 . METHOD_1 ( id ) ; },public TYPE_1 METHOD_1 ( java.lang.String id ) { VAR_1 . METHOD_1 ( id ) ; return null ; },"['Move Invocation', 'Insert Literal']",1642
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 ) { if ( VAR_2 . METHOD_2 ( ) . equals ( VAR_1 ) ) { return true ; } } return false ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 ) { if ( ( VAR_2 . METHOD_2 ( ) ) == VAR_1 ) { return true ; } } return false ; },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",1643
"private void METHOD_1 ( java.util.HashMap < java.lang.String , java.lang.Integer > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { for ( java.lang.String VAR_3 : VAR_2 ) if ( ! ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) VAR_4 . put ( VAR_3 , 0 ) ; }","private void METHOD_1 ( java.util.HashMap < java.lang.String , java.lang.Integer > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { for ( java.lang.String VAR_3 : VAR_2 ) { VAR_4 . put ( VAR_3 , 0 ) ; } }","['Move Invocation', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1644
public void METHOD_1 ( ) { java.lang.String path = ( STRING_1 + STRING_2 ) + ( this . number ) ; if ( TYPE_1 . METHOD_2 ( path ) ) { java.io.File file = new java.io.File ( path ) ; VAR_1 . delete ( ) ; } },public void METHOD_1 ( ) { java.lang.String path = STRING_1 + ( this . number ) ; if ( ! ( TYPE_1 . METHOD_2 ( path ) ) ) { java.io.File file = new java.io.File ( path ) ; VAR_1 . delete ( ) ; } },"['Insert UnaryOperator', 'Move FieldRead', 'Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1646
public boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; return true ; } return false ; },public boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",1647
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } VAR_2 . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1649
boolean METHOD_1 ( TYPE_1 key ) { return this . VAR_1 . METHOD_1 ( key ) ; },void METHOD_1 ( TYPE_1 key ) { this . VAR_1 . METHOD_1 ( key ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",1651
public boolean METHOD_1 ( ) { return ( ( this . field ) != null ) && ( this . VAR_1 . getType ( ) . METHOD_1 ( ) ) ; },public boolean METHOD_1 ( ) { return ( this . field ) != null ; },"['Move BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator']",1653
"public void METHOD_1 ( TYPE_1 out , int VAR_1 ) throws java.io.IOException { METHOD_2 ( out , VAR_1 ) ; METHOD_1 ( out ) ; }",public void METHOD_1 ( TYPE_1 out ) throws java.io.IOException { },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation']",1655
"public boolean METHOD_1 ( java.lang.String str , java.lang.String pattern ) { return ( VAR_1 . METHOD_2 ( str , pattern ) ) && ( VAR_1 . METHOD_3 ( str , pattern ) ) ; }","public boolean METHOD_1 ( java.lang.String str , java.lang.String pattern ) { return VAR_1 . METHOD_3 ( str , pattern ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",1657
"private void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < java.lang.String > VAR_2 , java.util.List < java.lang.Object > values ) { VAR_3 . add ( STRING_1 ) ; VAR_4 . add ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < java.lang.String > VAR_2 , java.util.List < java.lang.Object > values ) { VAR_3 . add ( STRING_1 ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1658
public boolean METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) >= ( VAR_3 ) ) { if ( VAR_1 ) { TYPE_1 . METHOD_3 ( VAR_4 . METHOD_4 ( this ) ) ; } return true ; } return false ; },public boolean METHOD_1 ( ) { if ( ( VAR_2 . METHOD_2 ( ) ) >= ( VAR_3 ) ) { TYPE_1 . METHOD_3 ( VAR_4 . METHOD_4 ( this ) ) ; return true ; } return false ; },"['Move If', 'Move BinaryOperator', 'Move Return', 'Delete VariableRead', 'Delete TypeReference', 'Delete Parameter', 'Delete Block', 'Delete If']",1659
public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_2 . isEmpty ( ) ) ) { return VAR_3 ; } return VAR_4 . METHOD_2 ( VAR_1 ) ; },public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { return VAR_4 . METHOD_2 ( VAR_1 ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1660
public int METHOD_1 ( java.lang.String fieldName ) { return this . VAR_1 . METHOD_2 ( VAR_2 . toUpperCase ( ) ) ; },public int METHOD_1 ( java.lang.String fieldName ) { return this . VAR_1 . METHOD_2 ( fieldName ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1661
public java.util.List < TYPE_1 > METHOD_1 ( ) { return new java.util.ArrayList < TYPE_1 > ( this . VAR_1 . values ( ) ) ; },public java.util.Collection < TYPE_1 > METHOD_1 ( ) { return this . VAR_1 . values ( ) ; },"['Update TypeReference', 'Move Invocation', 'Delete ConstructorCall']",1662
void METHOD_1 ( final TYPE_1 view ) { VAR_1 . METHOD_2 ( view ) ; if ( ! ( view . METHOD_3 ( ) ) ) { VAR_1 . METHOD_1 ( ( ( TYPE_2 ) ( view ) ) ) ; } },void METHOD_1 ( final TYPE_2 view ) { VAR_1 . METHOD_2 ( view ) ; VAR_1 . METHOD_1 ( view ) ; },"['Update Invocation', 'Move Invocation', 'Update TypeReference', 'Move TypeAccess', 'Delete UnaryOperator', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1663
public TYPE_1 show ( ) { TYPE_1 VAR_1 = VAR_2 . get ( ( ( VAR_2 . size ( ) ) - 1 ) ) ; return VAR_1 ; },public TYPE_1 show ( ) { TYPE_1 VAR_1 = VAR_2 . get ( VAR_2 . size ( ) ) ; return VAR_1 ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",1664
public void METHOD_1 ( android.view.View view ) { if ( item . METHOD_2 ( ) ) item . METHOD_3 ( false ) ; else item . METHOD_3 ( true ) ; METHOD_4 ( ) ; },public void METHOD_1 ( android.view.View view ) { item . METHOD_3 ( true ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If', 'Delete Invocation']",1665
"public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_2 . METHOD_3 ( ) ) VAR_2 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( new TYPE_3 ( VAR_5 ) ) ; }","public void METHOD_1 ( TYPE_1 event , TYPE_2 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( new TYPE_3 ( VAR_5 ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1666
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { return STRING_1 ; } return STRING_2 ; },public java.lang.String METHOD_1 ( ) { return STRING_2 ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1667
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_3 . getId ( ) , VAR_1 ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; },"['Update Invocation', 'Delete TypeAccess', 'Delete Invocation']",1668
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { new TYPE_2 ( ) . execute ( VAR_1 ) ; return STRING_1 ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return new TYPE_2 ( ) . execute ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead']",1669
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1672
"private java.lang.String METHOD_1 ( java.lang.String name ) { return VAR_1 . replace ( STRING_1 , STRING_2 ) . replace ( STRING_3 , STRING_2 ) ; }","private java.lang.String METHOD_1 ( java.lang.String name ) { return VAR_1 . replace ( STRING_1 , STRING_2 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1673
void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( METHOD_2 ( ) ) == null ) && ( METHOD_3 ( ) ) ) { METHOD_4 ( VAR_1 ) ; } },void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_3 ( ) ) { METHOD_4 ( VAR_1 ) ; } },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1674
"TYPE_1 METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; buffer . METHOD_4 ( ) ; return TYPE_2 . METHOD_5 ( VAR_3 . array ( ) . METHOD_6 ( ) , 0 , buffer . METHOD_7 ( ) ) ; }","TYPE_1 METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; buffer . METHOD_4 ( ) ; return TYPE_2 . METHOD_5 ( VAR_3 . array ( ) , 0 , buffer . METHOD_7 ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move Literal', 'Move Invocation', 'Delete Invocation']",1675
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this . getClass ( ) . METHOD_3 ( ) , STRING_1 ) ; if ( METHOD_4 ( ) ) { METHOD_5 ( ) ; } }",public void METHOD_1 ( ) { METHOD_5 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1676
private java.lang.String METHOD_1 ( TYPE_1 type ) { if ( ( type . METHOD_2 ( ) ) == ( VAR_1 ) ) { return this . METHOD_3 ( type . METHOD_4 ( ) ) ; } return this . METHOD_5 ( type ) ; },private java.lang.String METHOD_1 ( TYPE_1 type ) { if ( ( type . METHOD_2 ( ) ) == ( VAR_1 ) ) { return this . METHOD_3 ( type . METHOD_4 ( ) ) ; } else { return this . METHOD_5 ( type ) ; } },"['Insert Block', 'Move Return']",1677
"public void METHOD_1 ( java.lang.String VAR_1 , int time ) { METHOD_2 ( VAR_1 , VAR_2 , new TYPE_1 ( time ) ) ; if ( METHOD_3 ( VAR_1 ) ) { VAR_3 = time ; } }","public void METHOD_1 ( java.lang.String VAR_1 , int time ) { METHOD_2 ( VAR_1 , VAR_2 , new TYPE_1 ( time ) ) ; VAR_3 = time ; }","['Move Assignment', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",1678
"protected int METHOD_1 ( int x , int y ) { return ( ( y * ( VAR_1 . length ) ) + x ) % ( VAR_1 . length ) ; }","protected int METHOD_1 ( int x , int y ) { return ( x * y ) % ( VAR_1 . length ) ; }","['Update BinaryOperator', 'Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",1679
public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { METHOD_3 ( ) ; } } },public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; } },"['Move If', 'Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1680
"public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return ( VAR_2 == ( VAR_3 ) ) || ( VAR_2 == ( VAR_4 ) ) ; }","public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { return VAR_2 == ( VAR_3 ) ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1681
public void METHOD_1 ( java.util.Date VAR_1 ) { if ( VAR_1 != null ) { this . VAR_1 = new java.util.Date ( VAR_2 . getTime ( ) ) ; } },public void METHOD_1 ( java.util.Date VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Move VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete ConstructorCall', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1682
public int METHOD_1 ( int position ) { return ( ( METHOD_2 ( position ) ) == ( VAR_1 ) ) || ( ( METHOD_2 ( position ) ) == ( VAR_2 ) ) ? VAR_3 . METHOD_3 ( ) : VAR_4 . METHOD_1 ( position ) ; },public int METHOD_1 ( int position ) { return ( METHOD_2 ( position ) ) == ( VAR_1 ) ? VAR_3 . METHOD_3 ( ) : VAR_4 . METHOD_1 ( position ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1683
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( null ) ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( new TYPE_1 ( ) ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( null ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( new TYPE_1 ( ) ) ; } },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1684
private void METHOD_1 ( ) { ( ( TYPE_1 ) ( METHOD_2 ( VAR_1 ) ) ) . setText ( ( STRING_1 + ( ( VAR_2 ) - INT_1 ) ) ) ; },private void METHOD_1 ( ) { ( ( TYPE_1 ) ( METHOD_2 ( VAR_1 ) ) ) . setText ( ( STRING_1 + ( VAR_2 ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1685
"public void remove ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_4 class , VAR_5 . getId ( ) ) ; VAR_6 . remove ( VAR_2 ) ; VAR_7 . METHOD_2 ( VAR_2 ) ; }","public void remove ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_4 class , VAR_5 . getId ( ) ) ; VAR_7 . METHOD_2 ( VAR_2 ) ; VAR_6 . remove ( VAR_2 ) ; }",['Move Invocation'],1686
"public java.lang.String METHOD_1 ( java.lang.String key ) { return METHOD_2 ( METHOD_1 ( key , VAR_1 . String class , null ) ) ; }","public java.lang.String METHOD_1 ( java.lang.String key ) { return METHOD_1 ( key , VAR_1 . String class , null ) ; }","['Move Invocation', 'Delete Invocation']",1688
public boolean METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) { java.lang.System.out.println ( STRING_1 ) ; return true ; } } return false ; },public boolean METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) { return true ; } } return false ; },['Move Invocation'],1689
public boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( 0 ) ) == ( VAR_1 . METHOD_2 ( ( ( ( VAR_2 ) * ( VAR_2 ) ) + 1 ) ) ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( 0 ) ) == ( VAR_1 . METHOD_2 ( ( ( VAR_2 ) + 1 ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move Invocation', 'Move Invocation', 'Update BinaryOperator', 'Move BinaryOperator', 'Move Literal', 'Delete FieldRead', 'Delete BinaryOperator']",1691
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_2 . setEnabled ( true ) ; VAR_1 . METHOD_2 ( false ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 . setEnabled ( true ) ; VAR_1 . METHOD_2 ( false ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1693
public static java.util.List < TYPE_1 > METHOD_1 ( ) { return new java.util.ArrayList ( VAR_1 . values ( ) ) ; },public static java.util.List < TYPE_1 > METHOD_1 ( ) { return ( ( java.util.List < TYPE_1 > ) ( VAR_1 . values ( ) ) ) ; },"['Insert Invocation', 'Insert TypeReference', 'Move TypeAccess', 'Insert TypeReference', 'Delete Invocation', 'Delete ConstructorCall']",1694
public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_2 ) && ( VAR_3 . METHOD_2 ( VAR_1 ) ) ; },public boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1696
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; if ( VAR_2 ) { METHOD_3 ( ) ; } else if ( VAR_3 ) { METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; if ( VAR_2 ) { METHOD_3 ( ) ; } else { METHOD_5 ( ) ; } }","['Move If', 'Move FieldRead', 'Move Block', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",1697
"protected boolean METHOD_1 ( TYPE_1 < ? > message , long VAR_1 ) { VAR_2 . set ( java.lang.Thread . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( ) ; throw new TYPE_2 ( STRING_1 ) ; }","protected boolean METHOD_1 ( TYPE_1 < ? > message , long VAR_1 ) { VAR_3 . METHOD_3 ( ) ; VAR_2 . set ( java.lang.Thread . METHOD_2 ( ) ) ; throw new TYPE_2 ( STRING_1 ) ; }",['Move Invocation'],1698
public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; },"['Move TypeAccess', 'Move TypeAccess', 'Delete Literal', 'Delete Invocation']",1699
private boolean METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 class ) ; if ( VAR_1 != null ) { VAR_3 = VAR_1 . METHOD_5 ( ) ; } return ( VAR_3 ) != null ; },private boolean METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 class ) ; VAR_3 = VAR_1 . METHOD_5 ( ) ; return ( VAR_3 ) != null ; },"['Move Assignment', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1700
"public static void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_2 . toLowerCase ( ) ) ; }","public static void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 ) ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1701
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) && ( TYPE_1 . METHOD_2 ( STRING_1 ) ) ) { VAR_2 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1702
private TYPE_1 METHOD_1 ( int id ) { java.lang.String VAR_1 = java.lang.String . METHOD_2 ( id ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_2 . METHOD_3 ( ) . equals ( VAR_1 ) ) { return VAR_2 ; } } return null ; },private TYPE_1 METHOD_1 ( int id ) { java.lang.String VAR_1 = java.lang.String . METHOD_2 ( id ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( ( VAR_2 . METHOD_3 ( ) ) == VAR_1 ) { return VAR_2 ; } } },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete Return']",1703
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { VAR_3 . METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",1704
protected int METHOD_1 ( int index ) { return ( VAR_1 . get ( ( ( VAR_1 . position ( ) ) + index ) ) ) & INT_1 ; },protected int METHOD_1 ( int index ) { return VAR_1 . get ( ( ( VAR_1 . position ( ) ) + index ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1705
public TYPE_1 METHOD_1 ( final java.lang.String path ) { this . VAR_1 = VAR_2 . get ( TYPE_2 . METHOD_2 ( path ) ) . METHOD_3 ( ) ; return this ; },public TYPE_1 METHOD_1 ( final java.lang.String path ) { this . VAR_1 = VAR_2 . get ( TYPE_2 . METHOD_2 ( path ) ) ; return this ; },"['Move Invocation', 'Delete Invocation']",1706
"public java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) { return VAR_2 . replaceAll ( VAR_3 , STRING_1 ) . trim ( ) ; }","public java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) { return VAR_2 . replaceAll ( VAR_3 , STRING_1 ) ; }","['Move Invocation', 'Delete Invocation']",1708
public boolean METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { return this . VAR_1 . METHOD_1 ( ) ; } return false ; },public boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; },"['Move Return', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1709
public void METHOD_1 ( ) { this . VAR_1 = VAR_2 . getText ( ) . trim ( ) . toLowerCase ( ) ; this . VAR_3 = VAR_4 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { this . VAR_1 = VAR_2 . getText ( ) . trim ( ) ; this . VAR_3 = VAR_4 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete Invocation']",1710
"public void METHOD_1 ( int position , float VAR_1 , int VAR_2 ) { if ( ( VAR_3 . METHOD_2 ( ) ) > 0 ) VAR_4 . METHOD_3 ( VAR_3 . METHOD_4 ( position ) . METHOD_5 ( ) ) ; VAR_4 . METHOD_6 ( ) ; }","public void METHOD_1 ( int position , float VAR_1 , int VAR_2 ) { VAR_4 . METHOD_3 ( VAR_3 . METHOD_4 ( position ) . METHOD_5 ( ) ) ; VAR_4 . METHOD_6 ( ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1711
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_4 ) { VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } else { VAR_3 . METHOD_5 ( ) ; VAR_1 . METHOD_5 ( ) ; } },public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_4 ) { VAR_3 . METHOD_5 ( ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Move Invocation']",1712
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_2 ) && ( ( VAR_3 ) == ( VAR_4 ) ) ) { METHOD_2 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_3 ) == ( VAR_4 ) ) { METHOD_2 ( ) ; } },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1714
public void METHOD_1 ( float VAR_1 ) { if ( VAR_1 != ( VAR_2 ) ) { VAR_2 = VAR_1 ; METHOD_2 ( ) ; } },public void METHOD_1 ( float VAR_1 ) { VAR_2 = VAR_1 ; },"['Move Assignment', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",1715
"public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_2 . assertTrue ( VAR_3 . METHOD_3 ( VAR_1 , STRING_1 ) ) ; }","public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; assertTrue ( VAR_3 . METHOD_3 ( VAR_1 , STRING_1 ) ) ; }",['Update TypeAccess'],1716
public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 != ( target ) ) { target = VAR_1 ; METHOD_2 ( ) ; } },public void METHOD_1 ( int VAR_1 ) { target = VAR_1 ; METHOD_2 ( ) ; },"['Move Assignment', 'Move Invocation', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1717
public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 != ( this . VAR_1 ) ) { this . VAR_1 = VAR_1 ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } } },public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 != ( this . VAR_1 ) ) { this . VAR_1 = VAR_1 ; VAR_2 . METHOD_2 ( VAR_1 ) ; } },"['Move If', 'Move BinaryOperator', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1718
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 , java.lang.String . METHOD_3 ( ( ( ( float ) ( VAR_1 . METHOD_4 ( ) ) ) / INT_1 ) ) , 0 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , java.lang.String . METHOD_3 ( ( ( ( float ) ( VAR_1 . METHOD_4 ( ) ) ) / INT_1 ) ) , 0 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1720
"public void METHOD_1 ( ) { if ( VAR_1 . equals ( VAR_2 . get ( token ) ) ) { VAR_2 . remove ( token ) ; VAR_3 . METHOD_2 ( token , VAR_4 ) ; } }","public void METHOD_1 ( ) { if ( VAR_2 . get ( token ) . equals ( url ) ) { VAR_2 . remove ( token ) ; VAR_3 . METHOD_2 ( token , VAR_4 ) ; } }","['Insert FieldRead', 'Delete TypeAccess']",1722
public int METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_2 . length ; } else { return 0 ; } },public int METHOD_1 ( ) { return VAR_2 . length ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1723
"TYPE_1 < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String path ) ;","TYPE_1 < java.lang.String > METHOD_1 ( java.lang.String VAR_2 , java.lang.String VAR_1 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String path ) ;",['Move Parameter'],1724
public void METHOD_1 ( TYPE_1 response ) { java.lang.System.out.println ( STRING_1 ) ; if ( VAR_1 . get ( STRING_2 ) . toString ( ) . METHOD_2 ( STRING_3 ) ) { VAR_2 = java.lang.Integer.parseInt ( VAR_1 . get ( STRING_4 ) . toString ( ) ) ; } },public void METHOD_1 ( TYPE_1 response ) { java.lang.System.out.println ( STRING_1 ) ; if ( ( VAR_1 . get ( STRING_2 ) ) == STRING_3 ) { VAR_2 = java.lang.Integer.parseInt ( VAR_1 . get ( STRING_4 ) . toString ( ) ) ; } },"['Insert BinaryOperator', 'Move Invocation', 'Insert FieldRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",1725
public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 ) < 0 ) { return null ; } return VAR_3 . get ( VAR_2 ) ; },public TYPE_1 METHOD_1 ( ) { return VAR_3 . get ( VAR_2 ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1726
public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . setEnabled ( false ) ; VAR_3 . setEnabled ( false ) ; if ( VAR_1 ) { VAR_4 . setEnabled ( false ) ; } VAR_5 . setEnabled ( false ) ; VAR_6 . setEnabled ( false ) ; },public void METHOD_1 ( ) { VAR_2 . setEnabled ( false ) ; VAR_3 . setEnabled ( false ) ; VAR_4 . setEnabled ( false ) ; VAR_5 . setEnabled ( false ) ; VAR_6 . setEnabled ( false ) ; },"['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Block', 'Delete If']",1727
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( ( ( java.util.Date ) ( VAR_2 . getValue ( ) ) ) , ( ( java.util.Date ) ( VAR_3 . getValue ( ) ) ) , VAR_4 ) ) { METHOD_3 ( ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ( ( java.util.Date ) ( VAR_2 . getValue ( ) ) ) , ( ( java.util.Date ) ( VAR_3 . getValue ( ) ) ) , VAR_4 ) ; METHOD_3 ( ) ; }","['Move Invocation', 'Move Invocation', 'Delete Block', 'Delete If']",1729
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_2 ( ) . METHOD_5 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_3 . METHOD_2 ( ) . METHOD_5 ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; },['Move Invocation'],1730
"public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) VAR_1 . METHOD_1 ( ) ; assertEquals ( VAR_1 . METHOD_2 ( ) . size ( ) , INT_2 ) ; }","public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) VAR_1 . METHOD_1 ( ) ; assertEquals ( VAR_1 . METHOD_2 ( ) . length , INT_2 ) ; }","['Update Invocation', 'Move Invocation', 'Insert FieldRead', 'Move TypeAccess', 'Move Invocation', 'Delete Invocation']",1731
protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) VAR_3 . add ( VAR_1 ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . add ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1733
"public java.lang.String METHOD_1 ( java.lang.String name ) { return VAR_1 . replaceAll ( STRING_1 , STRING_2 ) ; }","public java.lang.String METHOD_1 ( java.lang.String name ) { return VAR_1 . replaceAll ( STRING_1 , STRING_2 ) . toLowerCase ( ) ; }","['Insert Invocation', 'Move Invocation']",1734
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; },['Move Invocation'],1735
public boolean equals ( java.lang.Object obj ) { if ( obj instanceof TYPE_1 ) return ( ( ( TYPE_1 ) ( obj ) ) . METHOD_1 ( ) ) == ( METHOD_1 ( ) ) ; else return false ; },public boolean equals ( java.lang.Object obj ) { return ( ( ( TYPE_1 ) ( obj ) ) . METHOD_1 ( ) ) == ( METHOD_1 ( ) ) ; },"['Move Return', 'Delete VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1736
"public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , INT_1 ) ; update ( ) ; VAR_1 . METHOD_3 ( ) ; }","public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , INT_1 ) ; VAR_1 . METHOD_3 ( ) ; update ( ) ; }",['Move Invocation'],1737
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { METHOD_3 ( ) ; } else if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_3 ) ) { METHOD_4 ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { },"['Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If']",1738
public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_5 . METHOD_5 ( ) ) ; } },public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_5 . METHOD_5 ( ) ) ; VAR_2 . METHOD_2 ( ) ; } },['Move Invocation'],1739
public int METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) . size ( ) ) == 0 ) { return 0 ; } return ( METHOD_3 ( ) ) + 1 ; },public int METHOD_1 ( ) { return ( METHOD_3 ( ) ) + 1 ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1740
protected TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { VAR_2 = METHOD_2 ( ) ; VAR_1 = true ; } return VAR_2 ; },protected TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { VAR_1 = true ; VAR_2 = METHOD_2 ( ) ; } return METHOD_1 ( ) ; },"['Move Assignment', 'Insert Invocation', 'Delete FieldRead']",1741
public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 = VAR_2 . getValue ( METHOD_3 ( ) ) ; } },public void METHOD_1 ( ) { VAR_1 = VAR_2 . getValue ( METHOD_3 ( ) ) ; },"['Move Assignment', 'Delete Invocation', 'Delete Block', 'Delete If']",1742
"public void METHOD_1 ( java.lang.Exception VAR_1 , java.lang.String message ) { this . METHOD_1 ( TYPE_1 . METHOD_2 ( VAR_1 , message , 1 ) ) ; }",public void METHOD_1 ( java.lang.Exception VAR_1 ) { this . METHOD_1 ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Literal']",1747
private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) VAR_2 . METHOD_3 ( VAR_1 ) ; },private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",1748
"public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) < ( VAR_3 ) ) { TYPE_1 . METHOD_2 ( VAR_4 , ( STRING_1 + ( VAR_2 ) ) ) ; return ; } VAR_5 . METHOD_3 ( VAR_1 ) ; }",public void METHOD_1 ( boolean VAR_1 ) { VAR_5 . METHOD_3 ( VAR_1 ) ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1749
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) && ( ( VAR_2 ) != null ) ) { return VAR_2 . METHOD_1 ( ) ; } else { return null ; } },public TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return VAR_2 . METHOD_1 ( ) ; } else { return null ; } },"['Move FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1750
"public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_3 . show ( METHOD_3 ( ) , STRING_1 ) ; } }","public void METHOD_1 ( android.view.View VAR_1 ) { VAR_3 . show ( METHOD_3 ( ) , STRING_1 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1751
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( VAR_2 ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1752
public void METHOD_1 ( TYPE_1 VAR_1 ) { main . METHOD_2 ( ) . METHOD_3 ( ) ; main . METHOD_4 ( ) . METHOD_5 ( ) ; main . METHOD_6 ( ) ; new TYPE_2 ( new TYPE_3 ( null ) ) . start ( false ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { main . METHOD_2 ( ) . METHOD_3 ( ) ; main . METHOD_4 ( ) . METHOD_5 ( ) ; main . METHOD_6 ( ) ; new TYPE_2 ( new TYPE_3 ( null ) ) ; },"['Move ConstructorCall', 'Delete Literal', 'Delete Invocation']",1753
private void METHOD_1 ( TYPE_1 field ) { if ( ( field != null ) && ( ! ( VAR_1 ) ) ) { field . METHOD_2 ( VAR_2 ) ; } VAR_3 = false ; METHOD_3 ( ) ; },private void METHOD_1 ( ) { VAR_3 = false ; METHOD_3 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1755
"public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( ! VAR_2 ) && ( VAR_1 . METHOD_2 ( ) ) ) { METHOD_3 ( VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ! VAR_2 ) { METHOD_3 ( VAR_1 ) ; } }","['Move UnaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",1756
public java.util.List < java.util.Set < TYPE_1 > > METHOD_1 ( ) { return new java.util.ArrayList < java.util.Set < TYPE_1 > > ( VAR_1 ) ; },public java.util.List < java.util.Set < TYPE_1 > > METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete ConstructorCall']",1757
"public void METHOD_1 ( TYPE_1 p , TYPE_2 target ) { if ( ( VAR_1 ) != null ) { TYPE_3 . METHOD_2 ( p ) ; } else { java.lang.System.err.println ( STRING_1 ) ; } }","public void METHOD_1 ( TYPE_1 p , TYPE_2 target ) { TYPE_3 . METHOD_2 ( p ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1758
public void METHOD_1 ( TYPE_1 listener ) { if ( VAR_1 . METHOD_2 ( ) ) listener . METHOD_3 ( VAR_1 ) ; listener . METHOD_4 ( VAR_1 ) ; listener . METHOD_5 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 listener ) { listener . METHOD_3 ( VAR_1 ) ; listener . METHOD_4 ( VAR_1 ) ; listener . METHOD_5 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1759
"public static TYPE_1 start ( TYPE_2 VAR_1 , boolean VAR_2 ) throws TYPE_3 { return VAR_3 . start ( VAR_1 , null , VAR_2 ) . METHOD_1 ( ) ; }","public static TYPE_1 start ( TYPE_2 VAR_1 , boolean VAR_2 ) throws TYPE_3 { return VAR_3 . start ( VAR_1 , null , VAR_2 ) ; }","['Move Invocation', 'Delete Invocation']",1760
"public void METHOD_1 ( ) { assertEquals ( false , c . METHOD_2 ( null ) ) ; }",public void METHOD_1 ( ) { c . METHOD_2 ( null ) ; },"['Move Invocation', 'Delete Literal', 'Delete Invocation']",1761
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 ) ) { METHOD_2 ( ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1762
public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) == VAR_1 ) { return ; } VAR_2 = VAR_1 ; if ( ( ! VAR_1 ) && ( ( VAR_3 ) != null ) ) { VAR_3 . METHOD_2 ( false ) ; } },public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) == VAR_1 ) { return ; } VAR_2 = VAR_1 ; if ( ! VAR_1 ) { VAR_3 . METHOD_2 ( false ) ; } },"['Move UnaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1763
"public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( this , 1 ) ; VAR_2 . METHOD_3 ( this ) ; } else { } }","public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( this , 1 ) ; VAR_2 . METHOD_3 ( this ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete Block', 'Delete If']",1765
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 ; } else { METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; } return VAR_1 ; },public TYPE_1 METHOD_1 ( ) { return VAR_1 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",1766
"public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { return VAR_1 . equals ( VAR_2 ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { return ( VAR_1 . getId ( ) ) == ( ( ( TYPE_1 ) ( VAR_2 ) ) . getId ( ) ) ; }","['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Insert Invocation', 'Insert VariableRead', 'Insert TypeReference', 'Delete VariableRead']",1767
"public void METHOD_1 ( ) { if ( ( getContext ( ) ) != null ) { TYPE_1 . METHOD_2 ( getContext ( ) , VAR_1 , VAR_2 ) . show ( ) ; } }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( getContext ( ) , VAR_1 , VAR_2 ) . show ( ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1769
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 ) { VAR_4 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 ) { VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_2 , VAR_3 ) ; }",['Move Invocation'],1771
public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( ( VAR_1 . METHOD_2 ( ) ) == null ) { VAR_1 . METHOD_3 ( this ) ; } VAR_2 . METHOD_1 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_1 . METHOD_3 ( this ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1772
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setEnabled ( VAR_3 . METHOD_2 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_3 . METHOD_2 ( ) ) { VAR_2 . setEnabled ( true ) ; } else { VAR_2 . setEnabled ( false ) ; } },"['Insert If', 'Move Invocation', 'Insert Block', 'Insert Block', 'Insert Invocation', 'Insert Invocation', 'Move TypeAccess', 'Insert Literal', 'Insert TypeAccess', 'Insert Literal', 'Delete Invocation']",1774
"public static final boolean METHOD_1 ( float position , float VAR_1 , float VAR_2 , float VAR_3 ) { return TYPE_1 . METHOD_2 ( position , ( VAR_2 + VAR_1 ) , ( VAR_3 - VAR_1 ) ) ; }","public static final boolean METHOD_1 ( float VAR_2 , float VAR_3 , float position , float VAR_1 ) { return TYPE_1 . METHOD_2 ( position , ( VAR_2 + VAR_1 ) , ( VAR_3 - VAR_1 ) ) ; }","['Move Parameter', 'Move Parameter']",1775
public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 > 1 ) { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1776
private boolean METHOD_1 ( final int VAR_1 ) { VAR_2 &= ~ VAR_1 ; return ( VAR_2 ) != 0 ; },private boolean METHOD_1 ( final int VAR_1 ) { VAR_2 &= ~ VAR_1 ; if ( ( VAR_2 ) == 0 ) { return false ; } return true ; },"['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert Return', 'Insert Literal']",1777
private java.util.Set < TYPE_1 > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( VAR_1 . values ( ) ) ; },private java.util.Set < TYPE_1 > METHOD_1 ( ) { return ( ( java.util.Set < TYPE_1 > ) ( VAR_1 . values ( ) ) ) ; },"['Update Invocation', 'Insert TypeReference', 'Move TypeAccess', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation']",1778
public java.lang.String METHOD_1 ( ) { return label ; },public java.util.List < java.lang.String > METHOD_1 ( ) { return label ; },"['Update TypeReference', 'Insert TypeReference']",1779
public boolean METHOD_1 ( java.lang.Object VAR_1 ) { return ( VAR_1 instanceof java.lang.String ) || ( VAR_1 == null ) ; },public boolean METHOD_1 ( java.lang.Object VAR_1 ) { return VAR_1 instanceof java.lang.String ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1780
private void METHOD_1 ( java.io.File VAR_1 ) { VAR_2 . info ( ( STRING_1 + ( java.lang.String . METHOD_2 ( VAR_3 . delete ( ) ) ) ) ) ; },private void METHOD_1 ( java.io.File VAR_1 ) { VAR_3 . delete ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation']",1781
private boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_2 . equals ( VAR_3 ) ) || ( VAR_2 . equals ( VAR_4 ) ) ; },private boolean METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . equals ( VAR_3 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",1782
public java.lang.String METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return STRING_1 ; } else { return STRING_2 ; } },public java.lang.String METHOD_1 ( ) { return STRING_1 ; },"['Move Return', 'Delete Invocation', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1783
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_2 = VAR_1 ; return this ; },public void METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_2 = VAR_1 ; },"['Update TypeReference', 'Delete ThisAccess', 'Delete Return']",1784
"public TYPE_1 < java.lang.Integer > METHOD_1 ( java.lang.Integer VAR_1 ) { return METHOD_2 ( ( ( int ) ( VAR_1 ) ) , ( ( length ) - ( offset ) ) ) ; }","public TYPE_1 < java.lang.Integer > METHOD_1 ( java.lang.Integer VAR_1 ) { return METHOD_2 ( ( ( int ) ( VAR_1 ) ) , length ) ; }","['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1785
public void METHOD_1 ( ) { METHOD_2 ( ) ; try { METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } catch ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_7 ( ) ; } },public void METHOD_1 ( ) { try { METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_2 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } catch ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_7 ( ) ; } },['Move Invocation'],1786
"public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 , VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . execute ( ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 , VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; }","['Move Invocation', 'Delete Invocation']",1787
public void METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 ) { for ( java.lang.Integer VAR_2 : VAR_1 ) { VAR_3 . delete ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 . get ( VAR_2 ) . METHOD_3 ( ) ) ; } },public void METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 ) { for ( java.lang.Integer VAR_2 : VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_3 . get ( VAR_2 ) . METHOD_3 ( ) ) ; VAR_3 . delete ( VAR_2 ) ; } },['Move Invocation'],1789
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this ) . METHOD_1 ( ) ; METHOD_3 ( ) ; },private void METHOD_1 ( ) { METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( this ) . METHOD_1 ( ) ; },['Move Invocation'],1790
"public static void METHOD_1 ( int [ ] a , int [ ] p ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 . METHOD_2 ( p ) ; VAR_2 . METHOD_3 ( a , p ) ; VAR_3 . METHOD_4 ( a , p ) ; }","public static void METHOD_1 ( int [ ] a , int [ ] p ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_3 ( a , p ) ; VAR_3 . METHOD_4 ( a , p ) ; VAR_1 . METHOD_2 ( p ) ; }",['Move Invocation'],1791
public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { if ( VAR_2 . equals ( VAR_3 ) ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } },public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1792
public boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) . METHOD_3 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; } return false ; },public boolean METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; },"['Move Return', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1793
public void METHOD_1 ( TYPE_1 error ) { METHOD_2 ( false ) ; METHOD_3 ( error ) ; VAR_1 . setEnabled ( false ) ; },public void METHOD_1 ( TYPE_1 error ) { METHOD_3 ( error ) ; METHOD_2 ( false ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",1796
public int getId ( ) { if ( ( VAR_1 ) != null ) { return VAR_2 . getId ( ) ; } return - 1 ; },public int getId ( ) { return VAR_2 . getId ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete UnaryOperator', 'Delete Return']",1797
"public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_1 ( new TYPE_1 ( VAR_1 , VAR_3 ) ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_3 ) { VAR_2 . METHOD_1 ( new TYPE_1 ( VAR_1 , VAR_3 ) ) ; }","['Insert Parameter', 'Insert TypeReference', 'Update ConstructorCall', 'Insert VariableRead', 'Delete FieldRead']",1798
public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; METHOD_5 ( ) . METHOD_6 ( ) ; },"['Move Invocation', 'Delete Invocation']",1799
"public final void METHOD_1 ( java.lang.Throwable t ) { VAR_1 . error ( STRING_1 , t ) ; VAR_2 . METHOD_2 ( t ) ; }","public final void METHOD_1 ( java.lang.Throwable t ) { VAR_1 . error ( STRING_1 , t ) ; if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( t ) ; }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Invocation']",1800
public int METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 ; },public int METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1801
"public TYPE_1 replace ( TYPE_2 key , TYPE_1 value ) { if ( VAR_1 . METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( STRING_1 , key , value ) ; } return super . replace ( key , value ) ; }","public TYPE_1 replace ( TYPE_2 key , TYPE_1 value ) { VAR_1 . METHOD_2 ( STRING_1 , key , value ) ; return super . replace ( key , value ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1802
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( ( VAR_3 ) == null ) || ( ( VAR_4 ) == null ) ) return 0 ; else return VAR_5 . compareTo ( VAR_4 ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_5 . compareTo ( VAR_4 ) ; }","['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1803
"public static long METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) , ( ( ( TYPE_2 . METHOD_4 ( VAR_1 ) ) - ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) / INT_1 ) ) ; }",public static long METHOD_1 ( TYPE_1 VAR_1 ) { return ( TYPE_2 . METHOD_3 ( VAR_1 ) ) + ( ( ( TYPE_2 . METHOD_4 ( VAR_1 ) ) - ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) / INT_1 ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation']",1806
"public void METHOD_1 ( long VAR_1 ) { this . VAR_1 = TYPE_1 . METHOD_2 ( ( ( this . VAR_2 ) - ( this . startTime ) ) , 0 ) ; }",public void METHOD_1 ( long VAR_1 ) { this . VAR_1 = ( this . VAR_2 ) - ( this . startTime ) ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation']",1807
public java.util.Set < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; },public java.util.Set < TYPE_1 > METHOD_1 ( ) { return new java.util.HashSet < TYPE_1 > ( VAR_1 ) ; },"['Insert ConstructorCall', 'Move FieldRead']",1809
protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) ; },"['Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1811
public java.lang.String getText ( ) { return VAR_1 . getText ( ) . toString ( ) . trim ( ) ; },public java.lang.String getText ( ) { return VAR_1 . getText ( ) . toString ( ) ; },"['Move Invocation', 'Delete Invocation']",1812
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } VAR_2 . METHOD_1 ( ) ; },public void METHOD_1 ( ) { VAR_2 . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1815
public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; TYPE_1 . METHOD_4 ( VAR_2 . METHOD_3 ( ) ) ; METHOD_5 ( VAR_2 . METHOD_3 ( ) ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( position ) ; TYPE_1 . METHOD_4 ( position ) ; METHOD_5 ( position ) ; },"['Insert Invocation', 'Insert Invocation', 'Insert Invocation', 'Move TypeAccess', 'Insert FieldRead', 'Move TypeAccess', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1817
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) VAR_2 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1819
private void METHOD_1 ( ) { if ( ( p ) != null ) p . METHOD_2 ( ) ; },private void METHOD_1 ( ) { p . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1820
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; },public void METHOD_1 ( ) { VAR_2 . METHOD_3 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_6 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1821
public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 != null ) { if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_2 ) ) { VAR_1 . METHOD_3 ( ) ; } } } },public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_2 ) ) { VAR_1 . METHOD_3 ( ) ; } } },"['Move If', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1822
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws java.io.IOException { return TYPE_4 . METHOD_2 ( TYPE_5 , VAR_1 , VAR_2 ) ; }","public static TYPE_1 METHOD_1 ( java.io.InputStream VAR_1 , TYPE_3 VAR_2 ) throws java.io.IOException { return TYPE_5 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Update TypeReference', 'Update Invocation', 'Delete TypeAccess']",1823
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . setEnabled ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_4 . setEnabled ( VAR_3 . METHOD_4 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . setEnabled ( VAR_3 . METHOD_4 ( ) ) ; },"['Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation']",1824
protected boolean METHOD_1 ( ) { return ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( ! ( ( VAR_2 . get ( ) ) && ( VAR_3 ) ) ) ; },protected boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) ) && ( ! ( ( VAR_2 . get ( ) ) && ( VAR_3 ) ) ) ; },"['Move Invocation', 'Delete UnaryOperator']",1825
private void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_2 ) ) ) { VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( ( ( TYPE_1 . METHOD_5 ( ) ) + INT_1 ) ) ; } },private void METHOD_1 ( ) { VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( ( ( TYPE_1 . METHOD_5 ( ) ) + INT_1 ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1829
"private void METHOD_1 ( TYPE_1 VAR_1 , char VAR_2 ) { if ( ( ( VAR_3 . start ) < ( VAR_4 . length ) ) && ( ( VAR_1 . METHOD_2 ( ) ) == VAR_2 ) ) { ( VAR_3 . start ) ++ ; } }","private void METHOD_1 ( TYPE_1 VAR_1 , char VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == VAR_2 ) { ( VAR_3 . start ) ++ ; } }","['Move BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1831
"public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { return VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",1833
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { METHOD_2 ( ( ( VAR_3 ) && ( VAR_2 != null ) ? VAR_4 . replace ( VAR_5 , VAR_6 ) : VAR_2 ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { METHOD_2 ( ( VAR_3 ? VAR_4 . replace ( VAR_5 , VAR_6 ) : VAR_2 ) ) ; }","['Move FieldRead', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1834
"private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_6 ( ) . toString ( ) ) ; }","private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_5 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_6 ( ) . toString ( ) ) ; METHOD_4 ( VAR_1 ) ; }",['Move Invocation'],1835
"public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( ) ) != null ) ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( false , false ) ; } }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( false , false ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1836
"private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 context ) { VAR_2 . setState ( VAR_3 ) ; return METHOD_2 ( context ) ; }",private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { VAR_2 . setState ( VAR_3 ) ; return METHOD_2 ( ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1838
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; if ( METHOD_3 ( ) ) { METHOD_4 ( ) ; METHOD_5 ( ) ; } else { java.lang.System.err.println ( STRING_1 ) ; java.lang.System.err.println ( STRING_2 ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1839
public void METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) <= INT_1 ) { VAR_2 = ( VAR_2 ) + 1 ; } else { VAR_2 = 1 ; } } },public void METHOD_1 ( ) { if ( ( VAR_2 ) <= INT_1 ) { VAR_2 = ( VAR_2 ) + 1 ; } else { VAR_2 = 1 ; } },"['Move If', 'Delete FieldRead', 'Delete Block', 'Delete If']",1840
public java.util.ArrayList < TYPE_1 > METHOD_1 ( java.lang.String type ) { if ( this . VAR_1 . METHOD_2 ( type ) ) return this . VAR_2 . get ( type ) ; else return new java.util.ArrayList < TYPE_1 > ( ) ; },public java.util.ArrayList < TYPE_1 > METHOD_1 ( java.lang.String type ) { return this . VAR_2 . get ( type ) ; },"['Move Return', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",1841
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( ! ( VAR_2 ) ) { VAR_1 . METHOD_2 ( ) ; } } METHOD_3 ( ) ; super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } METHOD_3 ( ) ; super . METHOD_1 ( ) ; },"['Move If', 'Move BinaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1842
"public void METHOD_1 ( TYPE_1 date ) { if ( date == null ) METHOD_2 ( STRING_1 , STRING_2 ) ; else METHOD_2 ( STRING_1 , VAR_1 . toString ( ) ) ; }","public void METHOD_1 ( TYPE_1 date ) { if ( date == null ) METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_2 ( STRING_1 , VAR_1 . toString ( ) ) ; }","['Move Invocation', 'Delete Block']",1843
"public boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { return VAR_3 . getBoolean ( VAR_1 , VAR_2 ) ; } else { return true ; } }","public boolean METHOD_1 ( ) { return VAR_3 . getBoolean ( VAR_1 , VAR_2 ) ; }","['Move Return', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1844
public java.awt.Color METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 . METHOD_1 ( ) ; else return null ; },public java.awt.Color METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1845
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( new android.content.Intent ( this , VAR_2 class ) ) ; METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_3 ( ) ; },"['Delete ThisAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1847
"public boolean METHOD_1 ( final int VAR_1 , final TYPE_1 VAR_2 , final TYPE_2 VAR_3 ) { return ( this . METHOD_2 ( VAR_1 , VAR_2 ) ) && ( VAR_1 <= INT_1 ) ; }","public boolean METHOD_1 ( final int VAR_1 , final TYPE_1 VAR_2 , final TYPE_2 VAR_3 ) { return this . METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1849
"public void error ( java.lang.String VAR_1 , java.lang.Object ... VAR_2 ) throws java.lang.Exception { throw new TYPE_1 ( ( ( VAR_3 ) + 1 ) , java.lang.String.format ( VAR_1 , VAR_2 ) , VAR_4 ) ; }","public void error ( java.lang.String VAR_1 , java.lang.Object ... VAR_2 ) throws java.lang.Exception { throw new TYPE_1 ( VAR_3 , java.lang.String.format ( VAR_1 , VAR_2 ) , VAR_4 ) ; }","['Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1850
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_2 = this . VAR_3 . METHOD_2 ( java.util.Arrays.asList ( VAR_4 . split ( STRING_1 ) ) ) ; } },public void METHOD_1 ( ) { VAR_2 = this . VAR_3 . METHOD_2 ( java.util.Arrays.asList ( VAR_4 . split ( STRING_1 ) ) ) ; },"['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1851
public boolean METHOD_1 ( ) { return ( type . METHOD_1 ( ) ) && ( ! ( VAR_1 ) ) ; },public boolean METHOD_1 ( ) { return ( type . METHOD_1 ( ) ) && ( VAR_1 ) ; },"['Move FieldRead', 'Delete UnaryOperator']",1852
public boolean METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) != null ) && ( METHOD_2 ( ) . METHOD_1 ( ) ) ; },public boolean METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_1 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1853
public void METHOD_1 ( TYPE_1 state ) { super . METHOD_1 ( state ) ; VAR_1 = false ; VAR_2 = false ; VAR_3 . result = STRING_1 ; VAR_4 = new TYPE_2 ( this ) ; METHOD_2 ( VAR_4 ) ; },public void METHOD_1 ( TYPE_1 state ) { super . METHOD_1 ( state ) ; VAR_4 = new TYPE_2 ( this ) ; METHOD_2 ( VAR_4 ) ; VAR_1 = false ; VAR_2 = false ; VAR_3 . result = STRING_1 ; },"['Move Assignment', 'Move Invocation']",1856
"public void METHOD_1 ( ) { java.lang.System.out.println ( ( STRING_1 + ( VAR_1 . METHOD_2 ( INT_1 , INT_2 , INT_3 ) ) ) ) ; }","public void METHOD_1 ( ) { java.lang.System.out.println ( VAR_1 . METHOD_2 ( INT_1 , INT_2 , INT_3 ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",1857
public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) . get ( ) . METHOD_3 ( ) . METHOD_4 ( this ) ; },public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move ThisAccess', 'Delete Invocation']",1858
public java.lang.Boolean METHOD_1 ( final java.lang.Integer source ) { if ( null == source ) { return VAR_1 ; } return TYPE_1 . METHOD_2 ( source ) ; },public java.lang.Boolean METHOD_1 ( final java.lang.Integer source ) { return TYPE_1 . METHOD_2 ( source ) ; },"['Delete Literal', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",1859
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( size ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; TYPE_1 . METHOD_4 ( VAR_2 . METHOD_5 ( 0 ) , VAR_2 . METHOD_5 ( 1 ) ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( size ) ; TYPE_1 . METHOD_4 ( VAR_2 . METHOD_5 ( 0 ) , VAR_2 . METHOD_5 ( 1 ) ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; }",['Move Invocation'],1860
"public TYPE_1 METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 ) { return new TYPE_1 ( filename , VAR_2 , VAR_3 , method , VAR_4 , className , context , args , VAR_1 ) ; }","public TYPE_1 METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 ) { return new TYPE_1 ( filename , VAR_2 , VAR_3 , method , VAR_4 , context , args , VAR_1 ) ; }",['Delete FieldRead'],1861
private boolean METHOD_1 ( TYPE_1 path ) { if ( ( METHOD_2 ( path . METHOD_3 ( ) ) ) && ( TYPE_2 . METHOD_4 ( path ) . startsWith ( STRING_1 ) ) ) { return true ; } return false ; },private boolean METHOD_1 ( TYPE_1 path ) { if ( METHOD_2 ( path . METHOD_3 ( ) ) ) { if ( TYPE_2 . METHOD_4 ( path ) . startsWith ( STRING_1 ) ) { return true ; } } return false ; },"['Move Invocation', 'Insert Block', 'Insert If', 'Move Invocation', 'Move Block', 'Delete BinaryOperator']",1863
public java.lang.String toString ( ) { return ( ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( info ) ) + STRING_3 ) + ( position ) ) + STRING_4 ) + ( VAR_2 ) ; },public java.lang.String toString ( ) { return ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( info ) ) + STRING_3 ) + ( position ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1864
public void METHOD_1 ( TYPE_1 response ) { if ( this . VAR_1 ) this . VAR_2 . METHOD_2 ( response ) ; },public void METHOD_1 ( TYPE_1 response ) { this . VAR_2 . METHOD_2 ( response ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Block', 'Delete If']",1865
"public static java.lang.Boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.ClassNotFoundException , TYPE_1 { java.lang.String query = ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ; return VAR_3 . METHOD_2 ( query , STRING_4 ) ; }","public static java.lang.Boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.ClassNotFoundException , TYPE_1 { java.lang.String query = ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ; return ( VAR_3 . METHOD_2 ( query ) ) == 1 ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal', 'Delete TypeAccess']",1869
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_2 ( false ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( false ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1870
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { java.util.Collections.sort ( VAR_1 ) ; return this . toString ( ) ; } return STRING_1 ; },public java.lang.String METHOD_1 ( ) { java.util.Collections.sort ( VAR_1 ) ; return this . toString ( ) ; },"['Move Invocation', 'Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",1871
public TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) != ( VAR_2 ) ) && ( ( VAR_1 ) < ( METHOD_2 ( ) ) ) ) { return METHOD_3 ( VAR_1 ) ; } return null ; },public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) < ( METHOD_2 ( ) ) ) { return METHOD_3 ( VAR_1 ) ; } return null ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1873
"private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) ; VAR_2 = null ; } }","private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 = null ; }","['Move Invocation', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1877
"public double METHOD_1 ( double n ) { if ( n > 0 ) { return METHOD_2 ( n , ( n / INT_1 ) ) ; } return 0 ; }","public double METHOD_1 ( double n ) { return METHOD_2 ( n , ( n / INT_1 ) ) ; }","['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",1878
"public java.lang.String toString ( ) { return TYPE_1 . METHOD_1 ( METHOD_2 ( ) . toString ( ) ) . add ( STRING_1 , VAR_1 . intValue ( ) ) . toString ( ) ; }","public java.lang.String toString ( ) { return TYPE_1 . METHOD_1 ( type ( ) . toString ( ) ) . add ( STRING_1 , VAR_1 . intValue ( ) ) . toString ( ) ; }",['Update Invocation'],1879
"protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.util.Collection < TYPE_4 > VAR_3 ) throws TYPE_5 { return METHOD_1 ( VAR_1 , VAR_2 , null , VAR_3 , null ) ; }","protected TYPE_1 METHOD_1 ( ) throws TYPE_5 { return METHOD_1 ( null , null , null , null ) ; }","['Insert Literal', 'Insert Literal', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete Parameter', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead']",1880
public void METHOD_1 ( android.view.View view ) { if ( ( TYPE_1 . METHOD_2 ( this ) . METHOD_3 ( ) ) != ( VAR_1 ) ) { METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; } },public void METHOD_1 ( android.view.View view ) { METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1881
public boolean METHOD_1 ( ) { return ( ( this . index ) >= ( this . VAR_1 . size ( ) ) ) && ( ( this . VAR_1 . size ( ) ) != 0 ) ; },public boolean METHOD_1 ( ) { return ( this . index ) >= ( this . VAR_1 . size ( ) ) ; },"['Move BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1882
public void METHOD_1 ( ) { VAR_1 = ( ( int ) ( ( ( new java.util.Date ( ) . getTime ( ) ) / INT_1 ) - ( VAR_2 ) ) ) ; },public void METHOD_1 ( ) { VAR_1 = ( ( int ) ( ( new java.util.Date ( ) . getTime ( ) ) - ( VAR_2 ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move TypeReference', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",1883
public void show ( ) { super . show ( ) ; if ( ( VAR_1 ) != null ) { VAR_2 = ( ( ( TYPE_1 ) ( VAR_3 [ 0 ] ) ) . VAR_4 ) + 1 ; VAR_5 . METHOD_1 ( ) ; } },public void show ( ) { super . show ( ) ; if ( ( VAR_1 ) != null ) { VAR_2 = ( ( TYPE_1 ) ( VAR_3 [ 0 ] ) ) . VAR_4 ; VAR_5 . METHOD_1 ( ) ; } },"['Move FieldRead', 'Delete Literal', 'Delete BinaryOperator']",1886
public TYPE_1 METHOD_1 ( java.lang.Integer id ) { for ( TYPE_1 VAR_1 : VAR_2 ) if ( VAR_1 . METHOD_2 ( ) . equals ( id ) ) return VAR_1 ; return null ; },public TYPE_1 METHOD_1 ( java.lang.Integer id ) { for ( TYPE_1 VAR_1 : VAR_2 ) if ( ( VAR_1 . METHOD_2 ( ) ) == id ) return VAR_1 ; return null ; },"['Insert BinaryOperator', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",1887
"public double METHOD_1 ( ) { return - ( TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) , FLOAT_1 , 0 ) ) ; }","public double METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) , FLOAT_1 , 0 ) ; }","['Move Invocation', 'Delete UnaryOperator']",1888
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; VAR_2 = VAR_1 . METHOD_4 ( ) ; } } },public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; VAR_2 = VAR_1 . METHOD_4 ( ) ; } },"['Move If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1891
"public void METHOD_1 ( TYPE_1 p ) { if ( ( ( METHOD_2 ( ) ) == 0 ) || ( ( METHOD_3 ( p ) ) == null ) ) { return ; } METHOD_1 ( p , METHOD_3 ( p ) ) ; }","public void METHOD_1 ( TYPE_1 p ) { if ( ( METHOD_2 ( ) ) == 0 ) { return ; } METHOD_1 ( p , METHOD_3 ( p ) ) ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1893
"public void METHOD_1 ( int VAR_1 ) { if ( TYPE_1 . METHOD_2 ( getContext ( ) , VAR_2 ) ) { if ( VAR_3 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( ) ; VAR_4 . open ( ) ; } } }","public void METHOD_1 ( int VAR_1 ) { if ( TYPE_1 . METHOD_2 ( getContext ( ) , VAR_2 ) ) { VAR_3 . METHOD_4 ( ) ; VAR_4 . open ( ) ; } }","['Move If', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1894
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return ( VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) <= ( this . VAR_3 ) ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return ( VAR_1 . METHOD_2 ( VAR_2 ) ) <= ( this . VAR_3 ) ; }","['Update Invocation', 'Move Invocation', 'Move VariableRead', 'Delete Invocation']",1895
"TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( VAR_2 . startsWith ( STRING_1 ) ) { return METHOD_1 ( path ) ; } else { return METHOD_1 ( ( ( VAR_1 + CHAR_1 ) + path ) ) ; } }","TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { return METHOD_1 ( ( ( VAR_1 + CHAR_1 ) + path ) ) ; }","['Move Return', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1896
public static int METHOD_1 ( int VAR_1 ) { return ( VAR_1 > > INT_1 ) & INT_2 ; },public static int METHOD_1 ( int VAR_1 ) { return VAR_1 > > INT_1 ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1897
public int METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; },public int METHOD_1 ( ) { return ( METHOD_2 ( VAR_1 ) ) - 1 ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1900
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 = java.lang.Integer . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_4 = VAR_1 . METHOD_4 ( ) ; VAR_5 = VAR_1 . METHOD_5 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 = new java.lang.Integer ( VAR_1 . METHOD_3 ( ) ) ; VAR_4 = VAR_1 . METHOD_4 ( ) ; VAR_5 = VAR_1 . METHOD_5 ( ) ; },"['Insert ConstructorCall', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",1904
public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; if ( this . VAR_2 ) { this . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; if ( ( this . VAR_2 ) == true ) { this . METHOD_3 ( ) ; } },"['Insert BinaryOperator', 'Move FieldRead', 'Insert Literal']",1906
public void METHOD_1 ( ) { if ( VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; } TYPE_2 . METHOD_3 ( ) ; super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { TYPE_2 . METHOD_3 ( ) ; super . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1907
protected int METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( VAR_1 . METHOD_2 ( STRING_1 ) ) { return VAR_1 . METHOD_3 ( STRING_1 ) . getInt ( STRING_2 ) ; } else { return 0 ; } },protected int METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { return VAR_1 . METHOD_3 ( STRING_1 ) . getInt ( STRING_2 ) ; },"['Move Return', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1908
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ! ( VAR_2 . equals ( STRING_1 ) ) ) && ( ! ( VAR_2 . equals ( STRING_2 ) ) ) ) { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1909
"private java.lang.String METHOD_1 ( java.lang.String path ) { return VAR_1 . substring ( ( ( ( path . METHOD_2 ( TYPE_1 ) ) + ( VAR_2 . length ( ) ) ) + 1 ) , path . METHOD_3 ( STRING_1 ) ) ; }","private java.lang.String METHOD_1 ( java.lang.String path ) { return VAR_1 . substring ( ( ( path . METHOD_2 ( TYPE_1 ) ) + ( VAR_2 . length ( ) ) ) , path . METHOD_3 ( STRING_1 ) ) ; }","['Move BinaryOperator', 'Delete Literal', 'Delete BinaryOperator']",1910
protected void METHOD_1 ( android.content.Intent intent ) { super . METHOD_1 ( intent ) ; if ( ! ( METHOD_2 ( intent ) ) ) { METHOD_3 ( intent . METHOD_4 ( ) ) ; } },protected void METHOD_1 ( android.content.Intent intent ) { super . METHOD_1 ( intent ) ; METHOD_3 ( intent . METHOD_4 ( ) ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1911
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( this . VAR_2 . size ( ) ) > 0 ) { METHOD_2 ( VAR_1 ) ; } this . VAR_2 . put ( VAR_3 . getName ( ) , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . put ( VAR_3 . getName ( ) , VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }","['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1912
public boolean METHOD_1 ( TYPE_1 obj ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( obj ) ) ; if ( ( VAR_1 . METHOD_2 ( ) ) != null ) VAR_1 . METHOD_3 ( VAR_2 ) ; return true ; },public boolean METHOD_1 ( TYPE_1 obj ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( obj ) ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; return true ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1913
int METHOD_1 ( ) { return ( VAR_1 . size ( ) ) - 1 ; },int METHOD_1 ( ) { return VAR_1 . size ( ) ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",1914
public java.lang.String METHOD_1 ( ) { return ( ( VAR_1 ) == null ) || ( ! ( VAR_1 ) ) ? VAR_2 . toString ( ) : null ; },public java.lang.String METHOD_1 ( ) { return ( ( VAR_1 ) == null ) || ( ! ( VAR_1 ) ) ? value : null ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1915
"private static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 , ""true"" , ""false"" , ""0"" , STRING_3 , STRING_4 ) , STRING_5 ) ; }","private static java.lang.String METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 , ""true"" , ""false"" , ""0"" , STRING_3 , STRING_4 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete FieldRead', 'Delete ConstructorCall']",1916
public int METHOD_1 ( ) { int i = 0 ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( ! ( VAR_3 . isEmpty ( ) ) ) { i ++ ; } } return i ; },public int METHOD_1 ( ) { int i = 0 ; for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_3 . isEmpty ( ) ) { i ++ ; } } return i ; },"['Move Invocation', 'Delete UnaryOperator']",1917
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) . getValue ( ) ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( java.lang.String ) ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) ; },"['Move Invocation', 'Update TypeReference', 'Delete Invocation']",1918
public byte METHOD_1 ( ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { return ( ( byte ) ( super . VAR_3 [ ( ( VAR_4 ) + INT_1 ) ] ) ) ; } else { return - 1 ; } },public byte METHOD_1 ( ) { return ( ( byte ) ( super . VAR_3 [ ( ( VAR_4 ) + INT_1 ) ] ) ) ; },"['Move Return', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",1920
public int METHOD_1 ( ) { if ( ( VAR_1 ) != 0 ) { return ( ( int ) ( ( INT_1 * ( VAR_2 ) ) / ( VAR_1 ) ) ) ; } else { return 0 ; } },public int METHOD_1 ( ) { return ( ( int ) ( ( INT_1 * ( VAR_2 ) ) / ( VAR_1 ) ) ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1921
"private void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_3 [ ( VAR_1 * ( VAR_4 ) ) ] = VAR_2 ; }","private void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_1 != ( - 1 ) ) { VAR_3 [ ( VAR_1 * ( VAR_4 ) ) ] = VAR_2 ; } }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert UnaryOperator', 'Move Assignment', 'Insert Literal']",1923
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; },public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move TypeAccess', 'Delete Invocation']",1924
public void METHOD_1 ( ) throws java.lang.Exception { this . VAR_1 . METHOD_2 ( VAR_2 . get ( STRING_1 ) . METHOD_3 ( VAR_3 ) ) . METHOD_4 ( VAR_4 . status ( ) . METHOD_5 ( ) ) . METHOD_6 ( METHOD_7 ( STRING_2 ) ) ; },public void METHOD_1 ( ) throws java.lang.Exception { this . VAR_1 . METHOD_2 ( VAR_2 . get ( STRING_1 ) . METHOD_3 ( VAR_3 ) ) . METHOD_4 ( VAR_4 . status ( ) . METHOD_5 ( ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1925
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_2 = java.util.Calendar.getInstance ( ) ; METHOD_5 ( VAR_2 ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_4 ( ) ; VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_2 = java.util.Calendar.getInstance ( ) ; METHOD_5 ( VAR_2 ) ; },['Move Assignment'],1926
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",1927
public void METHOD_1 ( ) { ( VAR_1 ) -- ; METHOD_2 ( ) ; },public void METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) { ( VAR_1 ) -- ; METHOD_2 ( ) ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move UnaryOperator', 'Move Invocation']",1928
private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_1 = true ; } METHOD_4 ( ) ; },private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_1 = true ; METHOD_4 ( ) ; } },['Move Invocation'],1930
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) == null ) || ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == null ) { return true ; } return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; },"['Insert If', 'Move BinaryOperator', 'Insert Block', 'Move Invocation', 'Insert Return', 'Insert Literal', 'Delete BinaryOperator']",1931
public boolean METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { return true ; } return false ; },public boolean METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { return true ; } else { return false ; } },"['Insert Block', 'Move Return']",1933
public void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) VAR_2 . METHOD_2 ( ) ; else VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_2 ( ) ; METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_4 . METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1935
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ! ( VAR_1 ) ) VAR_2 . METHOD_2 ( STRING_1 ) ; return VAR_3 ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_3 ; },"['Delete FieldRead', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1936
public java.lang.String METHOD_1 ( ) { return ( VAR_1 ) + ( toString ( ) ) ; },public java.lang.String METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",1937
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; },protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; METHOD_5 ( ) ; },['Move Invocation'],1939
public java.lang.String METHOD_1 ( java.lang.String path ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_2 . append ( VAR_3 ) ; VAR_2 . append ( path ) ; VAR_2 . append ( VAR_4 ) ; return VAR_2 . toString ( ) ; },public java.lang.String METHOD_1 ( java.lang.String path ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_2 . append ( VAR_3 ) ; VAR_2 . append ( VAR_4 ) ; VAR_2 . append ( path ) ; return VAR_2 . toString ( ) ; },['Move Invocation'],1941
"public void METHOD_1 ( android.view.View VAR_1 ) { new TYPE_1 ( ) . execute ( ) ; TYPE_2 . METHOD_2 ( this , STRING_1 , VAR_2 ) . show ( ) ; }",public void METHOD_1 ( android.view.View VAR_1 ) { new TYPE_1 ( ) . execute ( ) ; },"['Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",1942
public java.lang.String METHOD_1 ( java.lang.String id ) { if ( id != null ) { return VAR_1 . get ( id ) ; } else { return null ; } },public java.lang.String METHOD_1 ( java.lang.String id ) { return VAR_1 . get ( id ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",1943
"public void METHOD_1 ( byte first , byte VAR_1 ) { VAR_2 = ( ( short ) ( ( ( first & INT_1 ) + ( INT_2 * ( VAR_1 & INT_1 ) ) ) - 1 ) ) ; }","public void METHOD_1 ( byte first , byte VAR_1 ) { VAR_2 = ( ( short ) ( ( first + ( INT_2 * VAR_1 ) ) - 1 ) ) ; }","['Update BinaryOperator', 'Move BinaryOperator', 'Move TypeReference', 'Update BinaryOperator', 'Move Literal', 'Move VariableRead', 'Update BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",1944
public java.lang.Void METHOD_1 ( java.lang.Void VAR_1 ) { METHOD_2 ( ) ; if ( VAR_2 ) METHOD_3 ( ) ; return null ; },public java.lang.Void METHOD_1 ( java.lang.Void VAR_1 ) { if ( VAR_2 ) METHOD_3 ( ) ; METHOD_2 ( ) ; return null ; },['Move Invocation'],1945
public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) VAR_2 . METHOD_2 ( ) ; return VAR_2 ; },public static TYPE_1 METHOD_1 ( ) { return VAR_2 ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1946
public boolean METHOD_1 ( TYPE_1 endTime ) { if ( ( ( startTime ) == null ) || ( endTime . METHOD_2 ( startTime ) ) ) { this . endTime = endTime ; return true ; } return false ; },public boolean METHOD_1 ( TYPE_1 endTime ) { if ( endTime . METHOD_2 ( startTime ) ) { this . endTime = endTime ; return true ; } return false ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1948
"private boolean METHOD_1 ( TYPE_1 item , java.lang.String type ) { if ( VAR_1 . equals ( item . METHOD_2 ( ) ) ) return true ; return false ; }","private boolean METHOD_1 ( TYPE_1 item , java.lang.String type ) { if ( item . METHOD_2 ( ) . equals ( type ) ) return true ; return false ; }","['Insert VariableRead', 'Delete TypeAccess']",1949
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( VAR_1 . METHOD_3 ( ) ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1952
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . add ( VAR_3 ) ; VAR_2 . add ( VAR_4 ) ; VAR_2 . add ( VAR_5 ) ; VAR_2 . add ( VAR_6 ) ; return VAR_1 ; },private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . add ( VAR_4 ) ; VAR_2 . add ( VAR_5 ) ; VAR_2 . add ( VAR_3 ) ; VAR_2 . add ( VAR_6 ) ; return VAR_1 ; },['Move Invocation'],1953
private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; if ( VAR_2 . METHOD_3 ( ) ) { VAR_2 . METHOD_2 ( ) ; } } },private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; VAR_2 . METHOD_2 ( ) ; } },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",1954
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.util.HashMap < java.lang.String , java.lang.String > parameters , TYPE_3 VAR_3 ) { METHOD_1 ( VAR_4 . toString ( ) , VAR_2 , parameters , VAR_3 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 ) { METHOD_1 ( VAR_4 . toString ( ) , VAR_2 , VAR_3 ) ; }","['Update TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",1956
"public void METHOD_1 ( TYPE_1 result ) { if ( ( VAR_1 ) != ( VAR_2 ) ) VAR_3 . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_4 , ( STRING_1 + ( VAR_1 ) ) ) ) ; }","public void METHOD_1 ( TYPE_1 result ) { if ( ( VAR_1 ) != ( VAR_2 ) ) VAR_3 . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_4 , ( STRING_1 + result ) ) ) ; }","['Insert VariableRead', 'Delete FieldRead']",1957
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; java.util.Set < java.lang.Object > VAR_3 = TYPE_3 . METHOD_3 ( VAR_4 . iterator ( ) ) ; return TYPE_4 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; },private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; java.util.Set < java.lang.Object > VAR_3 = TYPE_3 . METHOD_3 ( VAR_1 ) ; return TYPE_4 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",1959
"public void update ( TYPE_1 VAR_1 , double VAR_2 ) { x += ( VAR_3 ) * VAR_2 ; y += ( VAR_4 ) * VAR_2 ; super . update ( VAR_1 , VAR_2 ) ; }","public void update ( TYPE_1 VAR_1 , double VAR_2 ) { x += VAR_3 ; y += VAR_4 ; super . update ( VAR_1 , VAR_2 ) ; }","['Move FieldRead', 'Move FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete BinaryOperator']",1960
"protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_2 , METHOD_2 ( ) , VAR_3 , METHOD_3 ( ) , VAR_1 ) ; }","protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , METHOD_2 ( ) , METHOD_3 ( ) , VAR_1 ) ; }",['Move Invocation'],1961
public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 node : nodes ) { if ( ! ( VAR_1 . METHOD_2 ( ) . contains ( node ) ) ) { VAR_1 . METHOD_2 ( ) . add ( node ) ; } } },public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 node : nodes ) { VAR_1 . METHOD_2 ( ) . add ( node ) ; } },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1962
"public static java.lang.String toString ( TYPE_1 VAR_1 ) { return ( TYPE_2 . METHOD_1 ( java.lang.String . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) , INT_1 , ""0"" ) ) + ( java.lang.String . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ) ; }","public static java.lang.String toString ( TYPE_1 VAR_1 ) { return ( TYPE_2 . METHOD_1 ( java.lang.String . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) , INT_1 , ""0"" ) ) + ( java.lang.String . METHOD_2 ( VAR_1 ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",1963
public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( ( ( ( fileName ) + STRING_1 ) + ( VAR_2 . toString ( ) ) ) ) ; },public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( VAR_2 . toString ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",1964
public void info ( java.lang.Object msg ) { if ( VAR_1 . METHOD_1 ( TYPE_1 ) ) { java.lang.System.out.println ( ( STRING_1 + ( METHOD_2 ( msg ) ) ) ) ; } },public void info ( java.lang.Object msg ) { if ( TYPE_1 . METHOD_1 ( VAR_1 ) ) { java.lang.System.out.println ( ( STRING_1 + ( METHOD_2 ( msg ) ) ) ) ; } },['Move TypeAccess'],1966
public final void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { return ; } METHOD_3 ( ) ; } },public final void METHOD_1 ( ) { synchronized ( VAR_1 ) { METHOD_3 ( ) ; } },"['Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",1967
"public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; VAR_2 = new TYPE_2 ( STRING_2 , VAR_3 , VAR_4 , date , VAR_1 , VAR_5 , VAR_6 , VAR_7 , STRING_3 , STRING_4 , 1 ) ; }","public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; VAR_2 = new TYPE_2 ( STRING_2 , VAR_3 , VAR_4 , date , VAR_1 , VAR_5 , VAR_6 , VAR_7 , STRING_3 , STRING_4 ) ; }",['Delete Literal'],1968
"public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_3 ( new TYPE_1 ( INT_1 , INT_2 , INT_3 ) ) ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; assertEquals ( VAR_1 . METHOD_3 ( new TYPE_1 ( INT_1 , INT_2 , INT_3 ) ) , VAR_2 ) ; }",['Move TypeAccess'],1969
public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( VAR_1 ) ; },public boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1970
public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) ; if ( ( listener ) != null ) { listener . METHOD_1 ( VAR_2 . getText ( ) . toString ( ) ) ; } } },public void METHOD_1 ( ) { if ( ( ( listener ) != null ) && ( METHOD_2 ( ) ) ) { listener . METHOD_1 ( VAR_2 . getText ( ) . toString ( ) ) ; } VAR_1 . METHOD_3 ( ) ; },"['Move If', 'Move Invocation', 'Insert BinaryOperator', 'Move BinaryOperator', 'Move Invocation', 'Delete Block', 'Delete If']",1971
public void METHOD_1 ( boolean VAR_1 ) { if ( ! VAR_1 ) { METHOD_2 ( true ) ; setValue ( STRING_1 ) ; } else { METHOD_2 ( false ) ; } setState ( ) ; },public void METHOD_1 ( boolean VAR_1 ) { METHOD_2 ( ( ! VAR_1 ) ) ; if ( ! VAR_1 ) { setValue ( STRING_1 ) ; } },"['Move If', 'Update Invocation', 'Insert UnaryOperator', 'Insert VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Block']",1972
public java.lang.Boolean [ ] [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },public java.lang.Boolean [ ] [ ] METHOD_1 ( ) { return VAR_1 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1973
public TYPE_1 METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return null ; } else { return VAR_2 . METHOD_3 ( ) ; } },public TYPE_1 METHOD_1 ( ) { return VAR_2 . METHOD_3 ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1974
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_1 ( VAR_1 ) ; if ( ( METHOD_2 ( ) ) != null ) METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1975
public void handle ( TYPE_1 event ) { TYPE_2 node = event . METHOD_1 ( ) . METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_1 . delete ( ) ; },public void handle ( TYPE_1 event ) { TYPE_2 node = event . METHOD_1 ( ) . METHOD_2 ( ) ; VAR_1 . delete ( ) ; METHOD_3 ( ) ; },['Move Invocation'],1979
public void METHOD_1 ( ) { try { if ( null != ( VAR_1 ) ) { VAR_1 . METHOD_2 ( ) ; } } catch ( TYPE_1 VAR_2 ) { } VAR_3 = null ; VAR_1 = null ; VAR_4 = null ; },public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { } VAR_3 = null ; VAR_1 = null ; VAR_4 = null ; },"['Move Invocation', 'Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1981
"private void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { if ( ( ( VAR_1 ) && ( VAR_2 ) ) && ( ( VAR_3 ) != null ) ) { VAR_4 . start ( VAR_5 . METHOD_2 ( ) ) ; VAR_1 = false ; } }","private void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { if ( ( VAR_1 ) && ( VAR_2 ) ) { VAR_4 . start ( VAR_5 . METHOD_2 ( ) ) ; VAR_1 = false ; } }","['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",1983
"public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Boolean VAR_2 ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( VAR_4 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Boolean VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1984
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; return false ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return false ; },"['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation']",1987
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_3 . add ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . add ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1988
public int METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 && ( ! ( VAR_2 ) ) ) return INT_1 ; if ( ( getType ( ) . VAR_3 ) == VAR_4 ) { return VAR_5 ; } return getType ( ) . VAR_3 ; },public int METHOD_1 ( ) { if ( ! ( VAR_2 ) ) return INT_1 ; if ( ( getType ( ) . VAR_3 ) == VAR_4 ) { return VAR_5 ; } return getType ( ) . VAR_3 ; },"['Move UnaryOperator', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete BinaryOperator']",1989
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_1 ( VAR_2 ) ; if ( ( VAR_3 ) != null ) VAR_3 . METHOD_2 ( ) ; },public void METHOD_1 ( ) { VAR_3 . METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) VAR_1 . METHOD_1 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1990
public void METHOD_1 ( android.view.View view ) { VAR_1 += VAR_2 ; VAR_2 = 0 ; METHOD_2 ( 0 ) ; if ( ! ( METHOD_3 ( ) ) ) { METHOD_4 ( ) ; } },public void METHOD_1 ( android.view.View view ) { VAR_1 += VAR_2 ; VAR_2 = 0 ; METHOD_2 ( 0 ) ; METHOD_4 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",1991
"public static int METHOD_1 ( int x , int y ) { if ( y == 0 ) { return 0 ; } else { return x / y ; } }","public static int METHOD_1 ( int x , int y ) { return x / y ; }","['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",1993
public void METHOD_1 ( ) { METHOD_1 ( VAR_1 . size ( ) ) ; },public void METHOD_1 ( ) { METHOD_1 ( ( ( VAR_1 . size ( ) ) - 1 ) ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",1994
"public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; METHOD_3 ( VAR_4 ) ; METHOD_4 ( VAR_4 ) ; return VAR_4 ; }","public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { android.view.View VAR_4 = VAR_1 . METHOD_2 ( VAR_5 , VAR_2 , false ) ; METHOD_3 ( VAR_4 ) ; if ( VAR_3 == null ) METHOD_4 ( VAR_4 ) ; return VAR_4 ; }","['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Move Invocation']",1995
public double [ ] METHOD_1 ( ) { if ( ( VAR_1 ) instanceof TYPE_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return TYPE_2 . METHOD_2 ( VAR_2 . METHOD_1 ( ) ) ; } return null ; },public double [ ] METHOD_1 ( ) { if ( ( VAR_1 ) instanceof TYPE_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; TYPE_2 . METHOD_2 ( VAR_2 . METHOD_1 ( ) ) ; } return null ; },"['Move Invocation', 'Delete Return']",1997
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; super . METHOD_1 ( VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; super . METHOD_1 ( VAR_1 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",1998
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { },"['Delete TypeAccess', 'Delete Invocation']",1999
"public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { this . METHOD_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ) ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { this . METHOD_2 ( ( ( ( VAR_1 + STRING_2 ) + VAR_2 ) + STRING_3 ) ) ; }","['Move BinaryOperator', 'Move FieldRead', 'Move VariableRead', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2001
public void METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { VAR_2 = 0 ; VAR_3 = true ; VAR_4 = true ; VAR_5 = VAR_6 ; } else { VAR_7 . add ( VAR_8 . METHOD_2 ( ) ) ; } },public void METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { VAR_2 = 0 ; VAR_3 = true ; VAR_4 = true ; VAR_5 = VAR_6 ; } VAR_7 . add ( VAR_8 . METHOD_2 ( ) ) ; },"['Move Invocation', 'Delete Block']",2002
private void METHOD_1 ( ) { if ( ( VAR_1 ) > INT_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } },private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; },"['Move Invocation', 'Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2004
"public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { METHOD_2 ( ( ( VAR_3 . toString ( ) ) + STRING_1 ) ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { METHOD_2 ( VAR_3 . toString ( ) ) ; return true ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2005
public java.lang.String METHOD_1 ( ) { return ( STRING_1 + ( TYPE_1 . METHOD_2 ( name ) ) ) + STRING_1 ; },public java.lang.String METHOD_1 ( ) { return ( STRING_1 + ( name ) ) + STRING_1 ; },"['Move FieldRead', 'Delete TypeAccess', 'Delete Invocation']",2010
"public void METHOD_1 ( ) { for ( TYPE_1 t : VAR_1 ) { if ( t instanceof TYPE_2 ) METHOD_2 ( t , true , false ) ; VAR_1 . METHOD_3 ( t , false ) ; t = null ; } java.lang.System.out.println ( STRING_1 ) ; }","public void METHOD_1 ( ) { for ( TYPE_1 t : VAR_1 ) { if ( t instanceof TYPE_2 ) VAR_1 . METHOD_3 ( t , false ) ; t = null ; } java.lang.System.out.println ( STRING_1 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete Literal', 'Delete Invocation']",2011
"public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < TYPE_2 > VAR_1 ) { return TYPE_3 . METHOD_2 ( new TYPE_4 ( VAR_1 , context , VAR_2 , id , VAR_3 ) ) . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < TYPE_2 > VAR_1 ) { return TYPE_3 . METHOD_2 ( new TYPE_4 ( VAR_1 , context , VAR_2 , id , VAR_3 ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2012
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String ... args ) { return this . METHOD_2 ( VAR_2 . replace ( VAR_1 , args ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String ... args ) { this . METHOD_2 ( VAR_2 . replace ( VAR_1 , args ) ) ; return this ; }","['Move Invocation', 'Insert ThisAccess']",2013
public void METHOD_1 ( ) { if ( ( getActivity ( ) ) != null ) { ( ( TYPE_1 ) ( getActivity ( ) ) ) . METHOD_2 ( ) ; } },public void METHOD_1 ( ) { ( ( TYPE_1 ) ( getActivity ( ) ) ) . METHOD_2 ( ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2016
public TYPE_1 METHOD_1 ( int index ) { if ( ( ( VAR_1 ) != null ) && ( index < ( VAR_2 . size ( ) ) ) ) { return VAR_2 . get ( index ) ; } return null ; },public TYPE_1 METHOD_1 ( int index ) { if ( ( VAR_1 ) != null ) { return VAR_2 . get ( index ) ; } return null ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete BinaryOperator']",2017
public boolean METHOD_1 ( java.lang.Object VAR_1 ) { return ( METHOD_2 ( ) ) > 0 ; },public boolean METHOD_1 ( java.lang.Object VAR_1 ) { return ( this . METHOD_2 ( ) ) > 0 ; },['Insert ThisAccess'],2018
public TYPE_1 METHOD_1 ( java.lang.Integer t ) { throw new TYPE_2 ( ) ; },public void METHOD_1 ( java.lang.Integer t ) { throw new TYPE_2 ( ) ; },['Update TypeReference'],2020
public boolean METHOD_1 ( TYPE_1 item ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . remove ( VAR_3 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( VAR_3 . METHOD_3 ( ) ) ; return true ; },public boolean METHOD_1 ( TYPE_1 item ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . remove ( position ) ; METHOD_5 ( position ) ; VAR_1 . METHOD_4 ( ) ; return true ; },"['Insert Invocation', 'Insert Invocation', 'Move TypeAccess', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2021
"public static boolean METHOD_1 ( java.io.File file ) { return new java.io.File ( file , STRING_1 ) . METHOD_2 ( ) ; }","public static boolean METHOD_1 ( java.io.File file ) { return ! ( new java.io.File ( file , STRING_1 ) . METHOD_2 ( ) ) ; }","['Insert UnaryOperator', 'Move Invocation']",2022
"public void start ( ) { if ( ( this . VAR_1 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 , VAR_3 ) ; } }","public void start ( ) { VAR_2 . METHOD_1 ( VAR_1 , VAR_3 ) ; }","['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2023
public void METHOD_1 ( ) { if ( ( getView ( ) ) != null ) { getView ( ) . METHOD_2 ( ) ; METHOD_3 ( ) ; } },public void METHOD_1 ( ) { getView ( ) . METHOD_2 ( ) ; METHOD_3 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2024
public java.lang.String METHOD_1 ( ) { return ( VAR_1 ) + ( name ( ) ) ; },public java.lang.String METHOD_1 ( ) { return name ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2025
public boolean METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) + ( ( VAR_1 . METHOD_3 ( ) ) * ( METHOD_4 ( ) ) ) ) > ( VAR_1 . METHOD_5 ( ) ) ; },public boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) > ( ( VAR_1 . METHOD_5 ( ) ) + ( ( VAR_1 . METHOD_3 ( ) ) * ( METHOD_4 ( ) ) ) ) ; },"['Move Invocation', 'Move Invocation']",2026
protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = VAR_1 ; METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; },protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_2 = VAR_1 ; METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; super . METHOD_1 ( VAR_1 ) ; },['Move Invocation'],2027
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 . length ( ) ) > 0 ) { this . METHOD_1 ( java.lang.Float . METHOD_2 ( VAR_1 ) ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( java.lang.Float . METHOD_2 ( VAR_1 ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2028
private boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) ) ) && ( ! ( METHOD_2 ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) ) ; },private boolean METHOD_1 ( ) { return ( METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) ) && ( METHOD_2 ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) ; },"['Move Invocation', 'Move Invocation', 'Delete UnaryOperator', 'Delete UnaryOperator']",2029
"public void remove ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . remove ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_4 . METHOD_1 ( STRING_1 , VAR_1 ) ; } else { VAR_2 . METHOD_2 ( ) . METHOD_3 ( true ) ; } }",public void remove ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . remove ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( true ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2035
"public TYPE_1 METHOD_1 ( final TYPE_2 id ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) . get ( this . VAR_2 , id ) ; if ( VAR_1 != null ) VAR_1 . METHOD_3 ( ) ; return VAR_1 ; }","public TYPE_1 METHOD_1 ( final TYPE_2 id ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) . get ( this . VAR_2 , id ) ; VAR_1 . METHOD_3 ( ) ; return VAR_1 ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2036
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; while ( true ) { VAR_1 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { METHOD_2 ( ) ; while ( true ) { METHOD_3 ( ) ; } },"['Update TypeAccess', 'Update TypeAccess']",2037
"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 , java.lang.String token ) { return METHOD_2 ( token ) . METHOD_3 ( VAR_1 , ( VAR_2 * INT_1 ) ) ; }","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { return METHOD_2 ( ) . METHOD_3 ( VAR_1 , ( VAR_2 * INT_1 ) ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2038
"private static java.lang.String METHOD_1 ( java.lang.String text ) { return TYPE_1 . METHOD_2 ( VAR_1 . remove ( TYPE_2 . METHOD_3 ( text , CHAR_1 ) , STRING_1 ) ) ; }","private static java.lang.String METHOD_1 ( java.lang.String text ) { return VAR_1 . remove ( TYPE_2 . METHOD_3 ( text , CHAR_1 ) , STRING_1 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2039
public void METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_2 ) { METHOD_2 ( ( ( TYPE_1 ) ( VAR_1 ) ) ) ; } else TYPE_2 . METHOD_3 ( ( ( TYPE_1 ) ( VAR_1 ) ) ) ; },public void METHOD_1 ( java.lang.Object VAR_1 ) { METHOD_2 ( ( ( TYPE_1 ) ( VAR_1 ) ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete TypeAccess', 'Delete TypeReference', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2040
"private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( TYPE_3 . METHOD_2 ( ( ( VAR_2 ) + ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ) ) , ( STRING_1 + ( VAR_3 . toString ( ) ) ) ) ; }","private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) ) , ( STRING_1 + ( VAR_3 . toString ( ) ) ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2041
"public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { final TYPE_3 VAR_2 = METHOD_2 ( VAR_3 ) ; VAR_4 . assertThat ( TYPE_4 . METHOD_3 ( VAR_5 . toString ( VAR_2 ) ) , TYPE_5 . METHOD_4 ( VAR_1 ) ) ; return this ; }","public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { final TYPE_3 VAR_2 = METHOD_2 ( VAR_3 ) ; VAR_4 . assertThat ( VAR_5 . toString ( VAR_2 ) , TYPE_5 . METHOD_4 ( VAR_1 ) ) ; return this ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2042
"private TYPE_1 METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , TYPE_2 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ) ; }","private TYPE_1 METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) ; }","['Insert ConstructorCall', 'Insert FieldRead', 'Insert FieldRead', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2046
public boolean METHOD_1 ( ) { return ( ( this . METHOD_2 ( ) ) != null ) && ( ! ( this . METHOD_2 ( ) . equals ( STRING_1 ) ) ) ; },public boolean METHOD_1 ( ) { return ( this . METHOD_2 ( ) ) != null ; },"['Move BinaryOperator', 'Delete ThisAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",2047
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( ( - 1L ) ) ; if ( METHOD_3 ( ) ) METHOD_4 ( VAR_1 , VAR_2 ) ; }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( ( - 1L ) ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",2048
private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_3 . METHOD_3 ( ) ) { java.util.Collections.sort ( VAR_1 ) ; } METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; },private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; java.util.Collections.sort ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2049
public boolean METHOD_1 ( ) { return ( ( VAR_1 . METHOD_1 ( ) ) && ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ; },public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",2050
"public boolean METHOD_1 ( java.io.File VAR_1 , java.lang.String name ) { return ( name . METHOD_2 ( VAR_2 ) ) || ( name . METHOD_2 ( VAR_3 ) ) ; }","public boolean METHOD_1 ( java.io.File VAR_1 , java.lang.String name ) { return name . METHOD_2 ( VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",2051
"public void METHOD_1 ( ) { if ( ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( ) ) ) VAR_3 . show ( ) ; VAR_4 . i ( STRING_1 , STRING_2 ) ; }","public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) VAR_3 . show ( ) ; VAR_4 . i ( STRING_1 , STRING_2 ) ; }","['Move UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",2052
private boolean METHOD_1 ( java.lang.String title ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 . METHOD_2 ( METHOD_3 ( title ) ) . METHOD_4 ( ) ) { return true ; } } return false ; },private boolean METHOD_1 ( java.lang.String title ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 . METHOD_2 ( title ) . METHOD_4 ( ) ) { return true ; } } return false ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move VariableRead', 'Delete Invocation']",2053
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_3 . toString ( VAR_4 . METHOD_2 ( ) ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_4 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2054
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( - 1 ) != ( TYPE_2 . METHOD_2 ( ) ) ) { VAR_2 = TYPE_3 . METHOD_3 ( TYPE_2 . METHOD_2 ( ) ) . toString ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = TYPE_3 . METHOD_3 ( TYPE_2 . METHOD_2 ( ) ) . toString ( ) ; },"['Move Assignment', 'Delete Literal', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2055
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { this . VAR_1 = VAR_1 ; this . VAR_2 = true ; } else { this . VAR_2 = false ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { this . VAR_1 = VAR_1 ; this . VAR_2 = true ; } this . VAR_2 = false ; },"['Move Assignment', 'Delete Block']",2056
public void METHOD_1 ( ) { while ( true ) { synchronized ( VAR_1 ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { return ; } VAR_3 . METHOD_3 ( ) ; } } },public void METHOD_1 ( ) { while ( true ) { synchronized ( VAR_1 ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_2 ) { return ; } } VAR_3 . METHOD_3 ( ) ; } },['Move Invocation'],2057
public int METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) return METHOD_2 ( ) . size ( ) ; return 0 ; },public int METHOD_1 ( ) { return METHOD_2 ( ) . size ( ) ; },"['Move Return', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",2058
public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ( VAR_2 . size ( ) ) > 0 ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 ) != null ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2059
"public TYPE_1 execute ( ) { java.lang.System.out.println ( ( STRING_1 + ( message ) ) ) ; if ( VAR_1 ) { return new TYPE_1 ( 0L , STRING_2 ) ; } else { return new TYPE_1 ( INT_1 , STRING_3 ) ; } }",public boolean execute ( ) { java.lang.System.out.println ( ( STRING_1 + ( message ) ) ) ; return VAR_1 ; },"['Update TypeReference', 'Insert Return', 'Move FieldRead', 'Delete Literal', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete FieldRead', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",2060
"public boolean METHOD_1 ( TYPE_1 event , float x , float y , int VAR_1 , int VAR_2 ) { if ( VAR_3 ) VAR_4 . METHOD_2 ( ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 event , float x , float y , int VAR_1 , int VAR_2 ) { VAR_4 . METHOD_2 ( ) ; return true ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2062
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 . setValue ( TYPE_2 . METHOD_2 ( VAR_4 , getValue ( ) ) ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_2 . METHOD_4 ( VAR_6 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 . setValue ( TYPE_2 . METHOD_2 ( getValue ( ) , VAR_4 ) ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_2 . METHOD_4 ( VAR_6 ) ; }",['Move TypeAccess'],2063
public java.lang.Double getValue ( ) { try { return METHOD_1 ( java.lang.Double . METHOD_2 ( getText ( ) ) ) ; } catch ( TYPE_1 VAR_1 ) { return 0.0 ; } },public java.lang.Double getValue ( ) { try { return java.lang.Double . METHOD_2 ( getText ( ) ) ; } catch ( TYPE_1 VAR_1 ) { return 0.0 ; } },"['Move Invocation', 'Delete Invocation']",2064
public < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( final TYPE_2 < TYPE_1 > VAR_1 ) { return VAR_2 . METHOD_2 ( super . METHOD_1 ( VAR_1 ) ) ; },public < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( final TYPE_2 < TYPE_1 > VAR_1 ) { return super . METHOD_1 ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; },"['Move Invocation', 'Move Invocation', 'Move VariableRead']",2067
"public void METHOD_1 ( byte [ ] data , int offset , int count ) { if ( ( VAR_1 ) > 0 ) VAR_2 . METHOD_1 ( data , offset , count ) ; }","public void METHOD_1 ( byte [ ] data , int offset , int count ) { VAR_2 . METHOD_1 ( data , offset , count ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2068
boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ) . equals ( VAR_1 ) ) && ( VAR_2 ) ; },boolean METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) . equals ( VAR_1 ) ) { return VAR_2 ; } return false ; },"['Insert If', 'Move Invocation', 'Insert Block', 'Insert Literal', 'Insert Return', 'Move FieldRead', 'Delete BinaryOperator']",2070
"public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { VAR_1 . assertTrue ( ( ( TYPE_2 . METHOD_2 ( VAR_2 class . METHOD_3 ( STRING_1 ) ) ) == 0 ) ) ; }","public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { TYPE_2 . METHOD_2 ( VAR_2 class . METHOD_3 ( STRING_1 ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation']",2072
public int METHOD_1 ( ) { return ( VAR_1 . size ( ) ) + ( VAR_2 ) ; },public int METHOD_1 ( ) { return VAR_1 . size ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2073
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . add ( VAR_1 ) ; if ( ( VAR_3 . length ( ) ) > ( VAR_4 ) ) { this . VAR_4 = length ( ) ; } ( this . VAR_5 ) ++ ; },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . add ( VAR_1 ) ; this . VAR_4 = length ( ) ; ( this . VAR_5 ) ++ ; },"['Move Assignment', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2074
public static void METHOD_1 ( TYPE_1 obj ) { for ( int i = 0 ; i < ( ( VAR_1 ) + 1 ) ; i ++ ) { VAR_2 [ i ] = VAR_3 ; } },public static void METHOD_1 ( TYPE_1 obj ) { for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) { VAR_2 [ i ] = VAR_3 ; } },"['Update BinaryOperator', 'Move BinaryOperator', 'Move VariableRead', 'Delete Literal', 'Delete BinaryOperator']",2075
"private void init ( ) throws java.io.IOException , TYPE_1 { this . data = TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( file ) ) ) ; }","private void init ( ) throws java.io.IOException , TYPE_1 { this . data = TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_3 ( file ) ) ; }","['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2076
"public void METHOD_1 ( TYPE_1 < java.lang.String , java.lang.String > VAR_1 ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) { VAR_2 . add ( VAR_1 ) ; } METHOD_2 ( ) ; }","public void METHOD_1 ( TYPE_1 < java.lang.String , java.lang.String > VAR_1 ) { VAR_2 . add ( VAR_1 ) ; METHOD_2 ( ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2077
"public void METHOD_1 ( int count ) { assertThat ( METHOD_2 ( METHOD_3 ( STRING_1 ) , java.lang.Integer.toString ( count ) ) ) ; }","public void METHOD_1 ( int count ) { METHOD_2 ( METHOD_3 ( STRING_1 ) , java.lang.Integer.toString ( count ) ) ; }","['Move Invocation', 'Delete Invocation']",2078
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( ( VAR_1 ) != null ) && ( VAR_2 ) ) { VAR_1 . METHOD_1 ( ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_2 ) VAR_1 . METHOD_1 ( ) ; },"['Move FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2079
"public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_2 ( INT_1 , 1 , STRING_1 ) ; if ( VAR_2 ) METHOD_3 ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { if ( VAR_2 ) METHOD_2 ( INT_1 , 1 , STRING_1 ) ; }","['Move Invocation', 'Delete Invocation']",2080
"public boolean update ( TYPE_1 VAR_1 ) { return VAR_2 . update ( VAR_3 , VAR_1 ) ; }","public void update ( TYPE_1 VAR_1 ) { VAR_2 . update ( VAR_3 , VAR_1 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",2081
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_1 = VAR_1 ; return this ; },public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 != null ) { this . VAR_1 = VAR_1 ; } return this ; },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Move Assignment']",2083
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; if ( VAR_2 ) { VAR_3 . METHOD_3 ( ) ; } }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_3 . METHOD_3 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2084
public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } },public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2085
"public void METHOD_1 ( long VAR_1 , long VAR_2 ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } }","public void METHOD_1 ( long VAR_1 , long VAR_2 ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2087
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ( ( VAR_3 . getId ( ) ) + 1 ) ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . getId ( ) ) ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",2088
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { if ( ! ( VAR_1 ) ) VAR_2 = true ; return this ; },public TYPE_1 < TYPE_2 > METHOD_1 ( ) { VAR_2 = true ; return this ; },"['Move Assignment', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2089
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_1 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2090
public boolean METHOD_1 ( ) { return ! ( VAR_1 . get ( ) ) ; },public boolean METHOD_1 ( ) { return VAR_1 . get ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",2091
private static java.lang.String METHOD_1 ( android.content.Context context ) { if ( VAR_1 . isEmpty ( VAR_2 ) ) { VAR_2 = ( context . METHOD_2 ( ) ) + STRING_1 ; } return VAR_2 ; },private static java.lang.String METHOD_1 ( android.content.Context context ) { if ( VAR_1 . isEmpty ( VAR_2 ) ) { VAR_2 = context . METHOD_2 ( ) ; } return VAR_2 ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2092
"public TYPE_1 < ? , java.lang.String > METHOD_1 ( ) { this . METHOD_2 ( ) ; return VAR_1 . assertThat ( ( STRING_1 + ( VAR_2 . getName ( ) ) ) ) . METHOD_3 ( ) ; }","public TYPE_1 < ? , java.lang.String > METHOD_1 ( ) { this . METHOD_2 ( ) ; return VAR_1 . assertThat ( VAR_2 . getName ( ) ) . METHOD_3 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2093
public long getId ( ) { return VAR_1 ; },public long getId ( ) { return this . getId ( ) ; },"['Insert Invocation', 'Insert ThisAccess', 'Delete FieldRead']",2094
private void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( this ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_1 . METHOD_2 ( this ) ; METHOD_4 ( VAR_1 ) ; VAR_1 . METHOD_3 ( this ) ; METHOD_5 ( ) ; } },['Move Invocation'],2095
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { VAR_2 = VAR_1 ; } return TYPE_1 . METHOD_3 ( ) ; },public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = VAR_1 ; return TYPE_1 . METHOD_3 ( ) ; },"['Move Assignment', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2096
public TYPE_1 [ ] METHOD_1 ( ) { if ( VAR_1 ) METHOD_2 ( ) ; return VAR_2 ; },public TYPE_1 [ ] METHOD_1 ( ) { METHOD_2 ( ) ; return VAR_2 ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2098
"public boolean METHOD_1 ( int VAR_1 , java.lang.Object item ) { if ( VAR_2 . METHOD_1 ( VAR_1 , item ) ) { METHOD_2 ( item ) ; return true ; } return false ; }","public boolean METHOD_1 ( int VAR_1 , java.lang.Object item ) { return ( VAR_2 . METHOD_1 ( VAR_1 , item ) ) && ( METHOD_2 ( item ) ) ; }","['Insert BinaryOperator', 'Move Invocation', 'Move Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete Literal']",2099
public int METHOD_1 ( ) { if ( ( data ) != null ) { return VAR_1 . length ; } return 0 ; },public int METHOD_1 ( ) { return VAR_1 . length ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",2100
"public void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ( ( VAR_4 ) + ( VAR_5 ) ) , VAR_6 ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_7 , VAR_1 ) . METHOD_5 ( ) ; }","public void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , VAR_6 ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_7 , VAR_1 ) . METHOD_5 ( ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2101
"protected synchronized void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_2 == ( VAR_3 ) ) { VAR_4 = true ; response = VAR_1 ; if ( ( VAR_5 ) != null ) VAR_5 . METHOD_2 ( ) ; } }","protected synchronized void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_2 == ( VAR_3 ) ) { VAR_4 = true ; response = VAR_1 ; VAR_5 . METHOD_2 ( ) ; } }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2102
public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + ( VAR_1 . METHOD_1 ( ) ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ; },public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",2104
public float METHOD_1 ( ) { return ( VAR_1 ) * ( METHOD_2 ( ) ) ; },public float METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",2105
"public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) { VAR_2 = VAR_3 . METHOD_3 ( ) . METHOD_1 ( line , this ) ; } }","public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 = VAR_3 . METHOD_3 ( ) . METHOD_1 ( line , this ) ; } }","['Move UnaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2107
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . equals ( VAR_1 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 == null ) || ( VAR_2 . equals ( VAR_1 ) ) ; },"['Insert BinaryOperator', 'Insert BinaryOperator', 'Move Invocation', 'Insert VariableRead', 'Insert Literal']",2108
public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_1 ( ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { try { VAR_3 . METHOD_1 ( ) ; } catch ( TYPE_2 VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Move Invocation']",2109
"public void METHOD_1 ( TYPE_1 message , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { if ( VAR_3 ) { TYPE_4 . METHOD_2 ( ) . METHOD_3 ( message ) ; } }","public void METHOD_1 ( TYPE_1 message , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 . METHOD_2 ( ) . METHOD_3 ( message ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2110
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( STRING_1 , STRING_2 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( STRING_1 , STRING_2 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2111
public java.lang.Float METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return 0.0F ; else return VAR_1 ; },public float METHOD_1 ( ) { return VAR_1 ; },"['Update TypeReference', 'Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",2112
public void METHOD_1 ( TYPE_1 event ) { if ( ( ( VAR_1 ) != null ) && ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) ) METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 event ) { if ( ( ( VAR_1 ) == null ) || ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) == null ) ) return ; METHOD_4 ( ) ; },"['Move Invocation', 'Update BinaryOperator', 'Update BinaryOperator', 'Update BinaryOperator', 'Insert Return']",2113
private boolean METHOD_1 ( java.lang.String key ) { return ( ( ( TYPE_1 . METHOD_2 ( key ) ) == null ) && ( ( context ) != null ) ) && ( ( context . METHOD_3 ( key ) ) == null ) ; },private boolean METHOD_1 ( java.lang.String key ) { return ( ( TYPE_1 . METHOD_2 ( key ) ) == null ) && ( ( context . METHOD_3 ( key ) ) == null ) ; },"['Move BinaryOperator', 'Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2115
"public boolean METHOD_1 ( int VAR_1 , int VAR_2 , boolean VAR_3 ) { return METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; }","public void METHOD_1 ( int VAR_1 , int VAR_2 , boolean VAR_3 ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",2116
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { METHOD_3 ( 0 ) ; } else { METHOD_4 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) ; METHOD_4 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2118
"public void METHOD_1 ( TYPE_1 key , java.lang.Object VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_1 ( key , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 key , java.lang.Object VAR_1 ) { VAR_2 . METHOD_1 ( key , VAR_1 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2119
"private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = VAR_1 . METHOD_2 ( METHOD_3 ( ) , false , VAR_3 ) ; METHOD_4 ( ) ; } }","private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 . METHOD_2 ( METHOD_3 ( ) , false , VAR_3 ) ; METHOD_4 ( ) ; }","['Move Assignment', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2120
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( this ) . METHOD_3 ( VAR_1 , new TYPE_2 ( STRING_1 ) ) ; METHOD_4 ( ) ; if ( VAR_2 ) { METHOD_5 ( ) ; VAR_2 = false ; } }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( this ) . METHOD_3 ( VAR_1 , new TYPE_2 ( STRING_1 ) ) ; if ( VAR_2 ) { METHOD_5 ( ) ; VAR_2 = false ; } }",['Delete Invocation'],2121
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( ) ; } return VAR_2 . getValue ( ) ; },public java.lang.String METHOD_1 ( ) { return VAR_2 . getValue ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",2122
"public void METHOD_1 ( TYPE_1 VAR_1 , int error ) { if ( ( VAR_1 != null ) && ( ( VAR_2 ) != null ) ) { VAR_2 . METHOD_2 ( ) ; } VAR_2 = null ; }","public void METHOD_1 ( TYPE_1 VAR_1 , int error ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2123
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2124
public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; if ( null != ( this . VAR_2 ) ) { this . VAR_2 . METHOD_3 ( ) ; } },public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) ; },"['Delete Literal', 'Delete ThisAccess', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2126
"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , false ) ; VAR_1 = true ; if ( ! ( VAR_2 ) ) { METHOD_4 ( ) ; METHOD_5 ( true ) ; } if ( VAR_3 ) VAR_4 . METHOD_6 ( ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , false ) ; VAR_1 = true ; if ( ! ( VAR_2 ) ) { METHOD_4 ( ) ; METHOD_5 ( true ) ; } VAR_4 . METHOD_6 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2127
"public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( value ) ) ) { VAR_1 . put ( VAR_2 , value ) ; } else { VAR_1 . put ( VAR_2 , null ) ; } }","public void METHOD_1 ( java.lang.String value ) { VAR_1 . put ( VAR_2 , value ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",2128
"public double [ ] METHOD_1 ( long offset , double [ ] data ) { return METHOD_1 ( offset , ( ( int ) ( ( METHOD_2 ( ) ) - offset ) ) , data ) ; }","public double [ ] METHOD_1 ( long offset , double [ ] data ) { return METHOD_1 ( offset , ( ( int ) ( ( ( METHOD_2 ( ) ) - offset ) + 1 ) ) , data ) ; }","['Insert BinaryOperator', 'Move TypeReference', 'Move BinaryOperator', 'Insert Literal']",2129
public void METHOD_1 ( android.view.View view ) { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { METHOD_4 ( VAR_1 ) ; } else { if ( VAR_2 ) { METHOD_4 ( VAR_3 ) ; } else { METHOD_4 ( VAR_4 ) ; } } },public void METHOD_1 ( android.view.View view ) { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { METHOD_4 ( VAR_3 ) ; } else { METHOD_4 ( VAR_4 ) ; } },"['Move If', 'Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2132
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; },['Move Invocation'],2133
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { } else if ( ( VAR_3 ) == ""\n"" ) { VAR_4 = true ; } else { TYPE_2 . METHOD_2 ( VAR_3 ) ; VAR_5 += VAR_3 ; } }","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) == ""\n"" ) { VAR_4 = true ; } else { TYPE_2 . METHOD_2 ( VAR_3 ) ; VAR_5 += VAR_3 ; } }","['Move If', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete Block', 'Delete If']",2134
public java.lang.Boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; },public java.lang.Boolean METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_1 ( VAR_1 . METHOD_3 ( ) ) ; },"['Update Invocation', 'Update TypeAccess']",2135
public TYPE_1 update ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_1 ( ) . equals ( VAR_2 ) ) { } return VAR_3 . METHOD_2 ( VAR_1 ) ; },public TYPE_1 update ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_1 ( ) ) == ( VAR_2 ) ) { } return VAR_3 . METHOD_2 ( VAR_1 ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation']",2136
private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; },private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; METHOD_4 ( ) ; },['Delete Invocation'],2137
public static void main ( java.lang.String [ ] VAR_1 ) { TYPE_1 . METHOD_1 ( ) ; VAR_2 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; },public static void main ( java.lang.String [ ] VAR_1 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; TYPE_1 . METHOD_1 ( ) ; VAR_2 = TYPE_1 . METHOD_2 ( ) ; },"['Move Invocation', 'Move Assignment']",2138
void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ) ; } },void METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2139
public int METHOD_1 ( ) { return ( VAR_1 ) || ( VAR_2 ) ? VAR_3 : VAR_4 ; },public int METHOD_1 ( ) { return VAR_1 ? VAR_3 : VAR_4 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2142
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_1 = null ; } },public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_1 = null ; },"['Move Invocation', 'Move Invocation', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2145
private synchronized void METHOD_1 ( ) { synchronized ( VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { if ( VAR_2 != null ) VAR_2 . METHOD_2 ( ) ; } } },private synchronized void METHOD_1 ( ) { synchronized ( VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { VAR_2 . METHOD_2 ( ) ; } } },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2146
private java.lang.Object METHOD_1 ( ) { return java.lang.String . METHOD_2 ( VAR_1 . METHOD_1 ( VAR_2 ) ) ; },private java.lang.Object METHOD_1 ( ) { return VAR_1 . METHOD_1 ( VAR_2 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2147
public void METHOD_1 ( java.lang.String url ) { TYPE_1 . METHOD_2 ( VAR_1 . getContext ( ) ) . METHOD_3 ( url ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) . METHOD_6 ( TYPE_3 . METHOD_7 ( ) ) . METHOD_8 ( VAR_2 ) ; },public void METHOD_1 ( java.lang.String url ) { TYPE_1 . METHOD_2 ( VAR_1 . getContext ( ) ) . METHOD_3 ( url ) . METHOD_6 ( TYPE_3 . METHOD_7 ( ) ) . METHOD_8 ( VAR_2 ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move TypeAccess', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2149
public void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ) ; } VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2150
public void METHOD_1 ( java.lang.String name ) { this . VAR_1 = name ; },public void METHOD_1 ( java.lang.String name ) { VAR_1 = name ; },['Delete ThisAccess'],2151
"public void METHOD_1 ( ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ; VAR_1 . METHOD_2 ( false ) ; }","public void METHOD_1 ( ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( false ) ; }","['Move Invocation', 'Update Invocation']",2152
public TYPE_1 METHOD_1 ( ) throws java.lang.Throwable { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ) . METHOD_4 ( this ) ; return this ; } else { return VAR_2 . METHOD_1 ( ) ; } },public TYPE_1 METHOD_1 ( ) throws java.lang.Throwable { if ( VAR_1 . METHOD_2 ( ) ) VAR_1 . METHOD_3 ( ) . METHOD_4 ( this ) ; return VAR_2 . METHOD_1 ( ) ; },"['Move Return', 'Delete ThisAccess', 'Delete Return', 'Delete Block']",2153
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = java.lang.Double . METHOD_2 ( VAR_3 . getValue ( ) . toString ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = ( ( double ) ( VAR_3 . getValue ( ) ) ) ; },"['Move Invocation', 'Insert TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2154
"private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { return STRING_1 + ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ; }","private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2155
"private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) new TYPE_1 ( getActivity ( ) , this ) . execute ( VAR_2 . toString ( ) , VAR_1 . METHOD_2 ( ) ) ; }",private void METHOD_1 ( ) { new TYPE_1 ( this ) . execute ( VAR_1 . METHOD_2 ( ) ) ; },"['Move Invocation', 'Update ConstructorCall', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2156
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; super . METHOD_1 ( ) ; },"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , this ) ; }","['Move Invocation', 'Insert ThisAccess']",2158
public TYPE_1 < java.lang.Integer > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return TYPE_1 . METHOD_2 ( ) ; } return TYPE_1 . METHOD_3 ( VAR_1 . METHOD_1 ( ) ) ; },public int METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return - 1 ; } return VAR_1 . METHOD_1 ( ) ; },"['Update TypeReference', 'Move Invocation', 'Insert UnaryOperator', 'Insert Literal', 'Delete TypeReference', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2160
"public void METHOD_1 ( int position , int VAR_1 ) { if ( ( VAR_2 ) == null ) return ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; }","public void METHOD_1 ( int position , int VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; }","['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",2161
"public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_2 ( STRING_1 ) ; VAR_2 . assertEquals ( VAR_1 . METHOD_2 ( ) . getValue ( ) , STRING_1 ) ; }","public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_2 ( STRING_1 ) ; VAR_2 . assertEquals ( VAR_1 . METHOD_2 ( ) , STRING_1 ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Delete Invocation']",2163
public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( getString ( VAR_1 ) ) ; } },public void METHOD_1 ( ) { METHOD_3 ( getString ( VAR_1 ) ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",2164
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) != null ) || ( ( VAR_2 . METHOD_2 ( ) ) == true ) ) { VAR_2 . METHOD_3 ( ) ; } VAR_2 = VAR_1 ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) ; } VAR_2 = VAR_1 ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2165
public void METHOD_1 ( java.util.Set < java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; },public void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; },['Update TypeReference'],2167
public boolean METHOD_1 ( ) { return ( this . VAR_1 ) < INT_1 ; },public boolean METHOD_1 ( ) { if ( ( this . VAR_1 ) > INT_1 ) return false ; else return true ; },"['Insert If', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert Block', 'Insert Block', 'Insert Return', 'Insert Return', 'Insert Literal', 'Insert Literal', 'Delete Return']",2168
"public int METHOD_1 ( TYPE_1 handle , double VAR_1 , TYPE_2 listener ) throws TYPE_3 { return METHOD_2 ( handle , VAR_2 , VAR_1 , listener ) ; }","public int METHOD_1 ( TYPE_1 handle , double VAR_1 , TYPE_2 listener ) throws TYPE_3 { return METHOD_2 ( handle , VAR_1 , VAR_2 , listener ) ; }",['Move TypeAccess'],2170
public void METHOD_1 ( ) { VAR_1 = true ; if ( ( ! ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ) { VAR_4 = INT_1 * ( VAR_5 ) ; } METHOD_2 ( ) ; },public void METHOD_1 ( ) { VAR_1 = true ; if ( ! ( VAR_2 ) ) { VAR_4 = INT_1 * ( VAR_5 ) ; } METHOD_2 ( ) ; },"['Move UnaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",2171
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_2 . equals ( VAR_3 ) ) ) { VAR_4 . setText ( getString ( VAR_5 ) ) ; } else { VAR_4 . setText ( VAR_1 ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_4 . setText ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2172
public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return false ; } return VAR_1 . METHOD_2 ( ) ; },public boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2174
"public void METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int VAR_2 , int count ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; }","public void METHOD_1 ( java.lang.CharSequence VAR_1 , int start , int VAR_2 , int count ) { METHOD_3 ( ) ; }","['Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation']",2175
protected void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } super . METHOD_1 ( ) ; METHOD_3 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2176
"private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( ( VAR_3 ) > INT_1 ) || ( ( VAR_4 ) > INT_1 ) ) { return true ; } return METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) ; }","private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) ; }","['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2178
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { METHOD_2 ( ) ; } else { METHOD_3 ( VAR_2 ) ; } METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2179
"public TYPE_1 METHOD_1 ( ) { try { return VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_2 VAR_2 ) { VAR_3 . error ( VAR_2 , STRING_1 ) ; METHOD_3 ( ) ; } return null ; }","public TYPE_1 METHOD_1 ( ) { try { return VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_2 VAR_2 ) { VAR_3 . error ( VAR_2 , STRING_1 ) ; } finally { METHOD_3 ( ) ; } return null ; }",['Move Invocation'],2180
"public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( STRING_1 , ( STRING_2 + ( VAR_1 . METHOD_1 ( ) ) ) ) ; return VAR_1 . METHOD_1 ( ) ; } else { return STRING_3 ; } }","public java.lang.String METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , ( STRING_2 + ( VAR_1 . METHOD_1 ( ) ) ) ) ; return VAR_1 . METHOD_1 ( ) ; }","['Move Invocation', 'Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",2181
"protected TYPE_1 METHOD_1 ( ) { try { return VAR_1 . open ( VAR_2 ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_4 , VAR_3 ) ; return null ; } }",protected TYPE_1 METHOD_1 ( ) { try { if ( ( VAR_2 ) >= 0 ) { return VAR_1 . open ( VAR_2 ) ; } else { return null ; } } catch ( java.lang.Exception VAR_3 ) { return null ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Block', 'Insert FieldRead', 'Insert Literal', 'Move Return', 'Insert Return', 'Insert Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2182
"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 , VAR_3 ) . show ( ) ; TYPE_3 . METHOD_3 ( STRING_2 , STRING_3 ) ; }","public void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 , VAR_3 ) . show ( ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2183
public TYPE_1 METHOD_1 ( ) { return date . METHOD_2 ( ) ; },public java.lang.String METHOD_1 ( ) { return date . METHOD_2 ( ) . toString ( ) ; },"['Update TypeReference', 'Insert Invocation', 'Move Invocation']",2184
"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , new java.lang.Object [ ] { VAR_4 } ) ) TYPE_2 . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , new java.lang.Object [ ] { VAR_4 } ) ; TYPE_2 . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) ; }","['Move Invocation', 'Move Invocation', 'Delete Block', 'Delete If']",2185
"public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String value ) { VAR_1 . add ( java.lang.String.format ( STRING_1 , name , value ) ) ; return this ; }","public TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String value ) { VAR_1 . put ( name , value ) ; return this ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2186
public boolean METHOD_1 ( ) { return ( ! ( VAR_1 ) ) && ( ( ( VAR_2 . isEmpty ( ) ) || ( VAR_2 . contains ( VAR_3 ) ) ) || ( VAR_2 . contains ( VAR_4 ) ) ) ; },public boolean METHOD_1 ( ) { return ( ( VAR_2 . isEmpty ( ) ) || ( VAR_2 . contains ( VAR_3 ) ) ) || ( VAR_2 . contains ( VAR_4 ) ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",2189
"public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . METHOD_2 ( VAR_1 ) ) || ( ! ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) ) ) return ; TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; }","public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) return ; TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",2190
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . delete ( VAR_3 , ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_1 . METHOD_2 ( ) ) ) , null ) ; }",public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; },"['Update Invocation', 'Update TypeAccess', 'Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Literal']",2192
"public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { if ( VAR_2 != null ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; VAR_2 . METHOD_2 ( this ) ; } }","public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete ThisAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2193
"public void METHOD_1 ( final java.lang.String VAR_1 ) { METHOD_2 ( false , ( ) - > VAR_2 . METHOD_3 ( VAR_1 ) ) ; }",public void METHOD_1 ( final java.lang.String VAR_1 ) { VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Insert VariableRead']",2194
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . METHOD_3 ( TYPE_1 . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( VAR_2 class ) . METHOD_6 ( VAR_3 class ) ; },protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . METHOD_3 ( TYPE_1 . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( VAR_2 class ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2195
"public static java.io.File METHOD_1 ( ) { return new java.io.File ( VAR_1 , ( ( ( VAR_2 ) + ( TYPE_1 . METHOD_2 ( new java.util.Date ( TYPE_2 . METHOD_3 ( ) ) ) ) ) + ( VAR_3 ) ) ) ; }","public static java.io.File METHOD_1 ( ) { return new java.io.File ( VAR_1 , ( ( VAR_2 ) + ( TYPE_1 . METHOD_2 ( new java.util.Date ( TYPE_2 . METHOD_3 ( ) ) ) ) ) ) ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",2196
public int METHOD_1 ( ) { return ( VAR_1 ) - INT_1 ; },public int METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2197
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_4 ( ) ; },private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_1 . METHOD_3 ( ) . METHOD_5 ( ) . METHOD_4 ( ) ; },"['Move Invocation', 'Update Invocation', 'Update Invocation', 'Delete Invocation', 'Delete Invocation']",2199
public boolean METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return false ; } METHOD_3 ( ) ; METHOD_4 ( ) ; return true ; },public boolean METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return false ; } METHOD_4 ( ) ; METHOD_3 ( ) ; return true ; },['Move Invocation'],2200
"public float METHOD_1 ( ) { return VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 , VAR_4 . height ) ; }","public float METHOD_1 ( ) { return VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_4 . height , VAR_3 ) ; }",['Move TypeAccess'],2201
public TYPE_1 METHOD_1 ( java.lang.String title ) { this . title = title ; if ( ( VAR_1 ) != null ) { VAR_2 . setText ( title ) ; } return this ; },public TYPE_1 METHOD_1 ( java.lang.String title ) { this . title = title ; VAR_2 . setText ( title ) ; return this ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2202
public double METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; return METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( METHOD_6 ( ) ) . METHOD_7 ( VAR_1 ) ; },public long METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; return java.lang.Math.round ( METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( METHOD_6 ( ) ) . METHOD_7 ( VAR_1 ) ) ; },"['Update TypeReference', 'Insert Invocation', 'Insert TypeAccess', 'Move Invocation']",2203
public double METHOD_1 ( ) { if ( ( ( position ) > ( VAR_1 ) ) || ( ( position ) < ( ( - 1 ) * ( VAR_1 ) ) ) ) { return super . METHOD_1 ( ) ; } return 0 ; },public double METHOD_1 ( ) { return super . METHOD_1 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete UnaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",2204
protected void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 ) . equals ( VAR_1 ) ) ) { VAR_2 . METHOD_3 ( VAR_1 ) ; } },protected void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { VAR_2 . METHOD_3 ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2205
"public java.io.File METHOD_1 ( ) { java.lang.String VAR_1 = new TYPE_1 ( STRING_1 ) . format ( new java.util.Date ( ) ) ; java.io.File VAR_2 = new java.io.File ( VAR_3 , ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ; return VAR_2 ; }",public java.io.File METHOD_1 ( ) { java.lang.String VAR_1 = new TYPE_1 ( STRING_1 ) . format ( new java.util.Date ( ) ) ; java.io.File VAR_2 = new java.io.File ( ( ( ( ( VAR_3 ) + VAR_1 ) + STRING_2 ) + STRING_3 ) ) ; return VAR_2 ; },"['Update ConstructorCall', 'Insert BinaryOperator', 'Move FieldRead', 'Move VariableRead']",2207
public boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return true ; } return true ; },public boolean METHOD_1 ( ) { return true ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2208
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; this . METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( false ) ; } },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; this . METHOD_2 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",2209
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; java.lang.System.out.println ( VAR_1 ) ; ( VAR_2 ) ++ ; if ( ( VAR_3 . expr ) != null ) VAR_4 . METHOD_3 ( this ) ; ( VAR_2 ) -- ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; java.lang.System.out.println ( VAR_1 ) ; ( VAR_2 ) ++ ; VAR_4 . METHOD_3 ( this ) ; ( VAR_2 ) -- ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2210
"public void METHOD_1 ( android.view.View view ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { METHOD_2 ( ) ; } else { TYPE_1 . METHOD_3 ( this , STRING_1 , VAR_2 ) . show ( ) ; } }",public void METHOD_1 ( android.view.View view ) { METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",2211
private void METHOD_1 ( TYPE_1 result ) { VAR_1 = result ; if ( result . METHOD_2 ( ) ) return ; if ( VAR_2 ) VAR_3 = result . METHOD_3 ( ) ; else VAR_4 = result . METHOD_3 ( ) ; },private void METHOD_1 ( TYPE_1 result ) { VAR_1 = result ; if ( result . METHOD_2 ( ) ) return ; if ( VAR_2 ) VAR_3 = result . METHOD_3 ( ) ; VAR_4 = result . METHOD_3 ( ) ; },"['Move Assignment', 'Delete Block']",2213
public void METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } else if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) ; } } },public void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( ) ; } },"['Move Block', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Block', 'Delete If', 'Delete Block']",2214
private void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( true ) ; METHOD_4 ( ) ; } METHOD_5 ( VAR_1 ) ; },private void METHOD_1 ( ) { METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; },"['Move Invocation', 'Delete Invocation', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",2215
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) { METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } VAR_1 . METHOD_5 ( this ) ; this . VAR_3 . add ( VAR_1 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( this ) ; this . VAR_3 . add ( VAR_1 ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",2217
"private void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) != null ) { TYPE_2 . METHOD_2 ( VAR_2 . getType ( ) , VAR_1 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; } }","private void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) != null ) { VAR_3 . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_2 . getType ( ) , VAR_1 . METHOD_3 ( ) ) ; } }",['Move Invocation'],2218
"public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_2 , VAR_1 ) ; return STRING_1 ; }","public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_2 ) ; return STRING_1 ; }",['Delete VariableRead'],2219
boolean METHOD_1 ( ) { return ! ( VAR_1 ) ; },boolean METHOD_1 ( ) { return VAR_1 ; },"['Move FieldRead', 'Delete UnaryOperator']",2220
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_3 . id ( ) . toLowerCase ( ) , VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_3 . id ( ) , VAR_1 ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move VariableRead', 'Delete Invocation']",2221
"public static TYPE_1 METHOD_1 ( final long VAR_1 , final int VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; return new TYPE_3 ( VAR_1 , VAR_2 ) . METHOD_3 ( ) ; }","public static TYPE_1 METHOD_1 ( final long VAR_1 , final int VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; return new TYPE_3 ( VAR_1 , VAR_2 ) ; }","['Move ConstructorCall', 'Delete Invocation']",2223
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 ) ) { if ( VAR_3 ) { METHOD_2 ( ) ; } METHOD_3 ( STRING_1 ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( VAR_2 ) ) { METHOD_3 ( STRING_1 ) ; } },"['Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2224
"private void METHOD_1 ( ) { METHOD_2 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_3 ( ( ( ( VAR_2 ) | ( VAR_3 ) ) | ( VAR_4 ) ) ) ; METHOD_4 ( intent ) ; }","private void METHOD_1 ( ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; METHOD_4 ( intent ) ; METHOD_2 ( ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Invocation']",2225
"public boolean METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { return METHOD_2 ( VAR_1 , VAR_3 , VAR_2 ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { METHOD_2 ( VAR_1 , VAR_3 , VAR_2 ) ; }","['Update TypeReference', 'Move Invocation', 'Delete Return']",2228
"private void set ( ) { if ( ( VAR_1 [ 0 ] ) != ( - 1 ) ) { VAR_2 . METHOD_1 ( VAR_3 , VAR_4 , ( ( VAR_5 ) - 1 ) , VAR_6 , VAR_1 ) ; } }","private void set ( ) { if ( ( VAR_1 [ 0 ] ) != ( - 1 ) ) { VAR_2 . METHOD_1 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_1 ) ; } }","['Insert TypeAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator']",2229
protected boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 != null ) && ( VAR_1 == ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; },protected boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return VAR_1 == ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; },"['Move BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2231
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = VAR_1 ; if ( ( VAR_3 ) == null ) { METHOD_2 ( ) ; } },public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = VAR_1 ; METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2232
public void METHOD_1 ( ) { if ( ( ( state ) == ( VAR_1 ) ) || ( ( state ) == ( VAR_2 ) ) ) { if ( METHOD_2 ( ) ) { state = VAR_3 ; } else { state = VAR_4 ; } } },public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { state = VAR_3 ; } else { state = VAR_4 ; } },"['Move If', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2234
public java.lang.String METHOD_1 ( ) { return ( ( number ) + STRING_1 ) + ( name ) ; },public java.lang.String METHOD_1 ( ) { return ( ( name ) + STRING_1 ) + ( number ) ; },"['Move BinaryOperator', 'Move BinaryOperator', 'Move FieldRead']",2236
public boolean METHOD_1 ( ) { return ( ( this . VAR_1 ) != null ) && ( this . VAR_1 . METHOD_1 ( ) ) ; },public boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2237
public void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) != FLOAT_1 ) { VAR_2 = event . METHOD_2 ( ) ; VAR_3 = event . METHOD_3 ( ) ; } },public void METHOD_1 ( TYPE_1 event ) { VAR_2 = event . METHOD_2 ( ) ; VAR_3 = event . METHOD_3 ( ) ; },"['Move Assignment', 'Move Assignment', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2238
"private void METHOD_1 ( ) { if ( ! ( VAR_1 . getText ( ) . toString ( ) . trim ( ) . isEmpty ( ) ) ) { VAR_2 = true ; VAR_3 . METHOD_2 ( 0 , 0 , VAR_4 , 0 ) ; } }","private void METHOD_1 ( ) { VAR_2 = true ; VAR_3 . METHOD_2 ( 0 , 0 , VAR_4 , 0 ) ; }","['Move Assignment', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2239
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { METHOD_3 ( VAR_1 ) ; } },public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2240
public void execute ( TYPE_1 param ) { item . METHOD_1 ( param ) ; VAR_1 . add ( item ) ; if ( ( VAR_2 ) instanceof TYPE_2 ) ( ( TYPE_2 ) ( VAR_2 ) ) . METHOD_2 ( ) ; },public void execute ( TYPE_1 param ) { item . METHOD_1 ( param ) ; VAR_1 . add ( item ) ; ( ( TYPE_2 ) ( VAR_2 ) ) . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2241
public boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( ) ) != 0 ) ; },public boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ) ) != 0 ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2242
"public boolean METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( java.lang.Double . METHOD_2 ( ( ( VAR_2 ) - ( VAR_3 ) ) , VAR_4 ) ) >= 0 ) ) { return false ; } return true ; }","public boolean METHOD_1 ( ) { if ( ( ( java.lang.Double . METHOD_2 ( ( ( VAR_2 ) + ( VAR_3 ) ) , VAR_4 ) ) > 0 ) || ( ( VAR_1 ) == null ) ) { return false ; } return true ; }","['Move BinaryOperator', 'Update BinaryOperator', 'Update BinaryOperator']",2243
public void METHOD_1 ( ) { try { if ( ! ( VAR_1 ) ) { c . METHOD_2 ( ) ; } } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { try { c . METHOD_2 ( ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } super . METHOD_1 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2244
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ( ( VAR_2 ) + STRING_1 ) ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",2246
public void METHOD_1 ( ) { if ( ( ( this . startTime ) > 0 ) && ( ( VAR_1 ) <= ( - 1 ) ) ) { this . VAR_1 = TYPE_1 . METHOD_2 ( ) ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) <= ( - 1 ) ) { this . VAR_1 = TYPE_1 . METHOD_2 ( ) ; } },"['Move BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2247
public java.lang.Boolean METHOD_1 ( ) { if ( null == ( VAR_1 ) ) { return false ; } return VAR_1 ; },public java.lang.Boolean METHOD_1 ( ) { return VAR_1 ; },"['Delete Literal', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2248
"private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , ( ( java.lang.Long . METHOD_4 ( VAR_2 . getText ( ) . toString ( ) ) . METHOD_5 ( ) ) * INT_1 ) ) . METHOD_6 ( ) ; }","private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , java.lang.Long . METHOD_4 ( VAR_2 . getText ( ) . toString ( ) ) . METHOD_5 ( ) ) . METHOD_6 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2250
"public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String format , java.lang.Object ... args ) { if ( TYPE_1 . METHOD_2 ( VAR_2 ) ) VAR_3 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 , STRING_1 , format , args ) ) ; }","public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String format , java.lang.Object ... args ) { VAR_3 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 , STRING_1 , format , args ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2251
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_1 . METHOD_3 ( ) . METHOD_2 ( ) ) ) { return ; } else { METHOD_4 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_4 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",2252
"public void METHOD_1 ( TYPE_1 context ) { if ( ( METHOD_2 ( context , true ) ) == ( VAR_1 ) ) { context . METHOD_3 ( false ) ; } else { context . METHOD_3 ( true ) ; } }","public void METHOD_1 ( TYPE_1 context ) { METHOD_2 ( context , true ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete VariableRead', 'Delete Literal', 'Delete Invocation', 'Delete Block', 'Delete If']",2254
java.lang.String METHOD_1 ( ) { return this . VAR_1 ; },java.lang.String METHOD_1 ( ) { return this . METHOD_1 ( ) ; },"['Insert Invocation', 'Move ThisAccess', 'Delete FieldRead']",2255
public java.util.Set < java.lang.String > METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) return new java.util.HashSet < java.lang.String > ( ) ; return VAR_1 ; },public java.util.Set < java.lang.String > METHOD_1 ( ) { return VAR_1 ; },"['Delete ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ConstructorCall', 'Delete Return', 'Delete Block', 'Delete If']",2256
"public java.lang.String toString ( ) { return new java.lang.StringBuilder ( super . toString ( ) ) . append ( STRING_1 ) . append ( STRING_2 ) . append ( ""\n"" ) . toString ( ) ; }",public java.lang.String toString ( ) { return new java.lang.StringBuilder ( super . toString ( ) ) . append ( STRING_1 ) . append ( STRING_2 ) . toString ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete Literal', 'Delete Invocation']",2259
public void METHOD_1 ( ) throws TYPE_1 { java.lang.System.out.println ( STRING_1 ) ; VAR_1 = METHOD_2 ( ) ; VAR_2 = METHOD_3 ( ) ; },public void METHOD_1 ( ) throws TYPE_1 { java.lang.System.out.println ( STRING_1 ) ; VAR_2 = METHOD_3 ( ) ; VAR_1 = METHOD_2 ( ) ; },['Move Assignment'],2261
public static TYPE_1 METHOD_1 ( java.util.Date date ) { return new TYPE_1 ( ( ( VAR_1 . getTime ( ) ) - ( INT_1 * INT_2 ) ) ) ; },public static TYPE_1 METHOD_1 ( java.util.Date date ) { return new TYPE_1 ( VAR_1 . getTime ( ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",2263
private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; return VAR_1 ; },private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( VAR_2 . METHOD_3 ( ) ) ; } return VAR_1 ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2264
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( this . VAR_1 ) ) this . VAR_2 . METHOD_2 ( ) ; },protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; this . VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2266
"public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException { return TYPE_1 . METHOD_2 ( METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) , VAR_3 , VAR_4 class ) ) ; }","public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException { return TYPE_1 . METHOD_2 ( METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 , VAR_3 ) , VAR_4 class ) ) ; }",['Move VariableRead'],2267
public void METHOD_1 ( ) { if ( ! ( VAR_1 . get ( ) ) ) { VAR_2 . METHOD_2 ( ) ; } },public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2268
"public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_2 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( intent ) ; }","public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( intent ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2269
"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 a = VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; return TYPE_1 . METHOD_5 ( ( STRING_1 + ( a . METHOD_6 ( ) ) ) ) ; }","public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 a = VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; return TYPE_1 . METHOD_5 ( a . METHOD_6 ( ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2271
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_2 ) VAR_3 . METHOD_2 ( VAR_4 ) ; else VAR_3 . METHOD_2 ( VAR_5 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_5 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2273
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) == null ) { METHOD_2 ( STRING_1 ) ; } else { VAR_3 . METHOD_3 ( ) ; METHOD_4 ( true ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_3 . METHOD_3 ( ) ; METHOD_4 ( true ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2274
public TYPE_1 METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) return null ; return ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ; },public TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ; },"['Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2275
"public void METHOD_1 ( ) { this . VAR_1 = METHOD_2 ( new TYPE_1 ( ) , VAR_2 ) . build ( ) ; }",public void METHOD_1 ( ) { this . VAR_1 = METHOD_2 ( new TYPE_1 ( ) ) . build ( ) ; },['Delete TypeAccess'],2277
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) . length ) > 0 ) { return ( VAR_1 . METHOD_2 ( ) [ 0 ] ) instanceof TYPE_2 ; } return false ; },public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) [ 0 ] ) instanceof TYPE_2 ; },"['Move Return', 'Delete VariableRead', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",2278
public int METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( this ) ; return VAR_1 . remove ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) ; },public int METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; java.lang.System.out.println ( this ) ; return VAR_1 . remove ( TYPE_1 . METHOD_3 ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2279
"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( VAR_4 , STRING_1 ) ; }","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( VAR_4 , STRING_1 ) ; }",['Move Invocation'],2280
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( VAR_1 . getName ( ) ) ; },public void METHOD_1 ( ) { METHOD_2 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2282
public void METHOD_1 ( TYPE_1 event ) { if ( event . METHOD_2 ( ) . equals ( VAR_1 ) ) METHOD_3 ( ) ; },public void METHOD_1 ( TYPE_1 event ) { METHOD_3 ( ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2284
private boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; return ! ( VAR_3 . METHOD_4 ( VAR_2 ) . isEmpty ( ) ) ; },private boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; return VAR_3 . METHOD_4 ( VAR_2 ) . isEmpty ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",2286
"public java.util.ArrayList < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) throws java.io.IOException , TYPE_1 , TYPE_2 , TYPE_3 { if ( VAR_2 ) METHOD_2 ( ) ; java.util.ArrayList < java.lang.String > results = METHOD_3 ( VAR_1 ) ; java.lang.System.out.print ( VAR_2 ) ; return results ; }","public java.util.ArrayList < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 , TYPE_2 , TYPE_3 { METHOD_2 ( ) ; java.util.ArrayList < java.lang.String > results = METHOD_3 ( VAR_1 ) ; return results ; }","['Move Invocation', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",2287
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( VAR_1 . METHOD_2 ( ) . equals ( VAR_2 ) ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2288
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( getActivity ( ) ) ) ) { TYPE_1 . METHOD_3 ( getActivity ( ) ) ; return ; } METHOD_4 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { METHOD_4 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",2290
"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return METHOD_2 ( VAR_1 , VAR_2 , CHAR_1 ) ; }","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , CHAR_1 ) ; }","['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2291
"public void METHOD_1 ( final TYPE_1 p , final TYPE_2 c ) throws java.io.IOException { assertEquals ( ( ( VAR_1 . length ) + INT_1 ) , VAR_2 . getData ( ) . length ) ; }","public void METHOD_1 ( final TYPE_1 p , final TYPE_2 c ) throws java.io.IOException { assertEquals ( VAR_1 . length , VAR_2 . getData ( ) . length ) ; }","['Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2292
"public TYPE_1 build ( ) { return new TYPE_1 ( this . first , this . VAR_1 , this . VAR_2 , this . VAR_3 , this . count ) ; }","public TYPE_1 build ( ) { return new TYPE_1 ( this . first , this . VAR_2 , this . VAR_1 , this . VAR_3 , this . count ) ; }",['Move FieldRead'],2293
public void METHOD_1 ( TYPE_1 listener ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( listener ) ; } },public void METHOD_1 ( TYPE_1 listener ) { VAR_1 . METHOD_1 ( listener ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2295
public boolean equals ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) return ( this . getColor ( ) ) == ( VAR_2 . getColor ( ) ) ; return false ; },public boolean equals ( TYPE_1 VAR_1 ) { return ( this . getColor ( ) ) == ( VAR_2 . getColor ( ) ) ; },"['Move Return', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",2296
"public void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( true ) . equals ( STRING_1 ) ) { METHOD_3 ( STRING_2 ) ; } else { new TYPE_2 ( ) . show ( METHOD_4 ( ) , STRING_3 ) ; } }","public void METHOD_1 ( ) { new TYPE_2 ( ) . show ( METHOD_4 ( ) , STRING_3 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2297
public void METHOD_1 ( android.view.View view ) { VAR_1 = true ; if ( ! ( VAR_2 ) ) METHOD_2 ( ) ; VAR_1 = false ; },public void METHOD_1 ( android.view.View view ) { VAR_1 = true ; METHOD_2 ( ) ; VAR_1 = false ; },"['Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2298
private void METHOD_1 ( ) { if ( ( ! ( METHOD_2 ( ) ) ) && ( ! ( METHOD_3 ( ) ) ) ) { if ( ( getActivity ( ) ) != null ) { getActivity ( ) . METHOD_4 ( ) ; } } },private void METHOD_1 ( ) { if ( ( ! ( METHOD_2 ( ) ) ) && ( ! ( METHOD_3 ( ) ) ) ) { getActivity ( ) . METHOD_4 ( ) ; } },"['Move If', 'Move BinaryOperator', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2299
protected java.lang.Void METHOD_1 ( java.lang.Void ... params ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 . size ( ) ) > 0 ) ) { METHOD_2 ( VAR_1 ) ; } return null ; },protected java.lang.Void METHOD_1 ( java.lang.Void ... params ) { METHOD_2 ( VAR_1 ) ; return null ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2303
public java.lang.String METHOD_1 ( java.lang.String id ) { VAR_1 . METHOD_2 ( java.lang.Long . METHOD_3 ( id ) . METHOD_4 ( ) ) ; return STRING_1 ; },public java.lang.String METHOD_1 ( java.lang.String id ) { VAR_1 . METHOD_2 ( java.lang.Long.parseLong ( id ) ) ; return STRING_1 ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Update Invocation', 'Delete Invocation']",2304
"public void METHOD_1 ( java.util.List < TYPE_1 > data ) { METHOD_1 ( VAR_1 . size ( ) , data ) ; }","public void METHOD_1 ( java.util.List < TYPE_1 > data ) { METHOD_1 ( ( ( VAR_1 . size ( ) ) - 1 ) , data ) ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",2305
"public void METHOD_1 ( TYPE_1 p , TYPE_2 VAR_1 ) { VAR_2 = p ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( ( VAR_4 ) - > VAR_4 . METHOD_4 ( VAR_1 , p ) ) ; }",public void METHOD_1 ( TYPE_1 p ) { VAR_2 = p ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( ( VAR_4 ) - > VAR_4 . METHOD_4 ( p ) ) ; },"['Delete TypeReference', 'Delete Parameter', 'Delete VariableRead']",2309
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == 1 ) { VAR_3 . setText ( java.lang.Integer.toString ( VAR_4 . METHOD_2 ( ) ) ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . setText ( java.lang.Integer.toString ( VAR_4 . METHOD_2 ( ) ) ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2310
private TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( java.lang.Math.abs ( ( ( TYPE_2 . METHOD_2 ( ) ) % ( VAR_1 . size ( ) ) ) ) ) ; },private TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ( ( TYPE_2 . METHOD_2 ( ) ) % ( VAR_1 . size ( ) ) ) ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2311
public void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; } },public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2312
public static java.lang.Long METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( STRING_1 . equals ( VAR_1 ) ) ) return VAR_2 ; return java.lang.Long.parseLong ( VAR_1 ) ; },public static java.lang.Long METHOD_1 ( java.lang.String VAR_1 ) { if ( STRING_1 . equals ( VAR_1 ) ) return - 1L ; return java.lang.Long.parseLong ( VAR_1 ) ; },"['Move Invocation', 'Insert UnaryOperator', 'Insert Literal', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete FieldRead']",2314
private void METHOD_1 ( final java.lang.String info ) { VAR_1 . METHOD_2 ( ( ) - > VAR_1 . METHOD_3 ( info ) ) ; },private void METHOD_1 ( final java.lang.String info ) { VAR_1 . METHOD_2 ( ( ) - > { VAR_1 . METHOD_3 ( info ) ; } ) ; },"['Insert Invocation', 'Insert TypeAccess', 'Insert VariableRead']",2315
"public java.lang.String getContext ( ) { return VAR_1 . trim ( ) . replaceAll ( STRING_1 , STRING_2 ) ; }",public java.lang.String getContext ( ) { return context ; },"['Insert FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2316
public boolean delete ( ) { return VAR_1 . delete ( ) ; },public void delete ( ) { VAR_1 . delete ( ) ; },"['Update TypeReference', 'Move Invocation', 'Delete Return']",2317
public void METHOD_1 ( TYPE_1 event ) { if ( METHOD_2 ( event . METHOD_3 ( ) ) ) { if ( ( event . METHOD_4 ( ) ) == ( VAR_1 ) ) { event . METHOD_5 ( METHOD_6 ( STRING_1 ) ) ; } } },public void METHOD_1 ( TYPE_1 event ) { if ( ( event . METHOD_4 ( ) ) == ( VAR_1 ) ) { event . METHOD_5 ( METHOD_6 ( STRING_1 ) ) ; } },"['Move If', 'Delete VariableRead', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",2318
"private static void METHOD_1 ( int VAR_1 ) { TYPE_1 . METHOD_2 ( java.lang.Math.abs ( VAR_1 ) , STRING_1 , VAR_2 , VAR_3 ) ; }","private static void METHOD_1 ( int VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 , VAR_2 , VAR_3 ) ; }","['Move VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2319
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 . start ( ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . start ( ) ; },"['Insert Invocation', 'Insert ThisAccess', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2320
public static boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 type : VAR_2 . values ( ) ) { if ( VAR_3 . name ( ) . METHOD_2 ( VAR_1 ) ) { return true ; } } return false ; },public static boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 type : VAR_2 . values ( ) ) { return VAR_3 . name ( ) . METHOD_2 ( VAR_1 ) ; } return false ; },"['Insert Return', 'Move Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2321
private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { METHOD_3 ( ) . info ( STRING_1 ) ; } if ( VAR_2 . METHOD_2 ( ) ) { METHOD_3 ( ) . info ( STRING_2 ) ; } },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2322
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } this . METHOD_3 ( ) ; super . METHOD_1 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; this . METHOD_3 ( ) ; super . METHOD_1 ( ) ; },"['Move Invocation', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2323
"public void METHOD_1 ( java.util.Map < ? extends TYPE_1 , ? extends TYPE_2 > VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( STRING_1 , VAR_1 ) ; } super . METHOD_1 ( VAR_1 ) ; }","public void METHOD_1 ( java.util.Map < ? extends TYPE_1 , ? extends TYPE_2 > VAR_1 ) { VAR_2 . METHOD_3 ( STRING_1 , VAR_1 ) ; super . METHOD_1 ( VAR_1 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2324
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . remove ( VAR_1 . METHOD_2 ( ) ) ; this . VAR_3 . remove ( VAR_1 . METHOD_2 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . remove ( VAR_1 ) ; this . VAR_3 . remove ( VAR_1 ) ; },"['Move VariableRead', 'Move VariableRead', 'Delete Invocation', 'Delete Invocation']",2325
public long METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return 0 ; } return VAR_1 . METHOD_1 ( ) ; },public long METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2326
"public java.lang.Object METHOD_1 ( java.lang.Object VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 type , java.lang.Class < ? extends TYPE_4 < ? > > VAR_4 ) { if ( VAR_5 ) { VAR_6 = TYPE_5 . METHOD_2 ( VAR_1 ) ; } return VAR_1 ; }","public java.lang.Object METHOD_1 ( java.lang.Object VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 type , java.lang.Class < ? extends TYPE_4 < ? > > VAR_4 ) { VAR_6 = TYPE_5 . METHOD_2 ( VAR_1 ) ; return VAR_1 ; }","['Move Assignment', 'Delete FieldRead', 'Delete Block', 'Delete If']",2327
public int METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) if ( VAR_3 . equals ( VAR_2 . get ( i ) ) ) return i ; return - 1 ; },public int METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) if ( VAR_1 == ( VAR_2 . get ( i ) ) ) return i ; return - 1 ; },"['Insert BinaryOperator', 'Insert VariableRead', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2328
"public void METHOD_1 ( double VAR_1 , double VAR_2 ) { if ( ( VAR_3 ) != null ) VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","public void METHOD_1 ( double VAR_1 , double VAR_2 ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2330
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) . METHOD_6 ( TYPE_4 . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ) ; },public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) . METHOD_6 ( TYPE_4 . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ) ; },"['Update Invocation', 'Move Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation']",2333
"public void METHOD_1 ( TYPE_1 error ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 , java.lang.String.format ( STRING_2 , VAR_2 , error . METHOD_3 ( ) ) ) ; }","public void METHOD_1 ( TYPE_1 error ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 , error . METHOD_3 ( ) ) ; }","['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2334
"public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; if ( VAR_2 ) { intent . METHOD_2 ( 1 ) ; METHOD_3 ( intent ) ; } else { METHOD_3 ( intent ) ; } }","public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; intent . METHOD_2 ( 1 ) ; METHOD_3 ( intent ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2335
public double METHOD_1 ( int VAR_1 ) { return TYPE_1 . METHOD_2 ( ( ( ( this . VAR_2 [ VAR_1 ] . VAR_3 ) - ( ( ( VAR_4 ) / INT_1 ) - FLOAT_1 ) ) / ( VAR_5 ) ) ) ; },public double METHOD_1 ( int VAR_1 ) { return TYPE_1 . METHOD_2 ( ( ( ( ( this . VAR_2 [ VAR_1 ] . VAR_3 ) - ( ( VAR_4 ) / INT_1 ) ) - FLOAT_1 ) / ( VAR_5 ) ) ) ; },"['Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Update BinaryOperator', 'Move BinaryOperator', 'Move FieldRead', 'Move BinaryOperator']",2336
public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; ( ( android.widget.Button ) ( METHOD_2 ( VAR_2 ) ) ) . setText ( STRING_1 ) ; },public void METHOD_1 ( ) { METHOD_2 ( VAR_2 ) . setEnabled ( true ) ; ( ( android.widget.Button ) ( METHOD_2 ( VAR_2 ) ) ) . setText ( STRING_1 ) ; },"['Update Invocation', 'Insert Invocation', 'Insert Literal', 'Insert TypeAccess', 'Delete TypeAccess']",2337
"protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( VAR_1 != null ) { METHOD_2 ( VAR_1 ) ; } else { TYPE_2 . METHOD_3 ( this , VAR_2 , VAR_3 ) ; } }",protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete ThisAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2338
"public double METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; VAR_1 . format ( STRING_2 , VAR_2 ) ; return VAR_2 ; }",public double METHOD_1 ( ) { return VAR_2 ; },"['Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2339
"private void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 ) VAR_3 . i ( VAR_4 , VAR_1 ) ; }","private void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 . i ( VAR_4 , VAR_1 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2340
"private static java.lang.String METHOD_1 ( java.lang.Object id ) throws TYPE_1 { if ( id == null ) { return null ; } else { return TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( id ) . replace ( STRING_1 , STRING_2 ) ) ; } }","private static java.lang.String METHOD_1 ( java.lang.Object id ) throws TYPE_1 { if ( id == null ) { return null ; } else { return VAR_1 . METHOD_3 ( id ) . replace ( STRING_1 , STRING_2 ) ; } }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2341
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) . compareTo ( VAR_3 . get ( VAR_2 . METHOD_2 ( ) ) ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return VAR_3 . get ( VAR_1 . METHOD_2 ( ) . toString ( ) ) . compareTo ( VAR_3 . get ( VAR_2 . METHOD_2 ( ) . toString ( ) ) ) ; }","['Insert Invocation', 'Insert Invocation', 'Move Invocation', 'Move Invocation']",2344
"private java.util.Calendar METHOD_1 ( ) { java.util.Calendar VAR_1 = java.util.Calendar.getInstance ( ) ; VAR_2 . set ( VAR_2 . get ( VAR_3 ) , ( ( VAR_2 . get ( VAR_4 ) ) + 1 ) , VAR_2 . get ( VAR_5 ) ) ; return VAR_1 ; }","private java.util.Calendar METHOD_1 ( ) { java.util.Calendar VAR_1 = java.util.Calendar.getInstance ( ) ; VAR_2 . set ( VAR_2 . get ( VAR_3 ) , VAR_2 . get ( VAR_4 ) , VAR_2 . get ( VAR_5 ) ) ; return VAR_1 ; }","['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",2346
"public final boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 position , TYPE_3 VAR_2 ) { if ( METHOD_2 ( VAR_1 , position , VAR_2 ) ) { return VAR_3 . METHOD_1 ( position , VAR_2 ) ; } else { return false ; } }","public final boolean METHOD_1 ( TYPE_2 position , TYPE_3 VAR_2 ) { return VAR_3 . METHOD_1 ( position , VAR_2 ) ; }","['Move Return', 'Delete TypeReference', 'Delete Parameter', 'Delete VariableRead', 'Delete VariableRead', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2347
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; return STRING_1 ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; return STRING_1 ; },['Update TypeAccess'],2348
"private static TYPE_1 METHOD_1 ( TYPE_2 path ) { return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) , path . METHOD_4 ( ) ) ; }","private static TYPE_1 METHOD_1 ( TYPE_2 path ) { return TYPE_3 . METHOD_2 ( VAR_1 , path . METHOD_4 ( ) ) ; }","['Move TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2349
"private void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( VAR_2 , new TYPE_2 ( VAR_2 , VAR_3 . METHOD_3 ( VAR_4 , VAR_5 . getText ( ) . trim ( ) ) , VAR_6 ) ) ; }","private void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( VAR_2 , new TYPE_2 ( VAR_2 , ( ! ( VAR_3 . METHOD_3 ( VAR_4 , VAR_5 . getText ( ) . trim ( ) ) ) ) , VAR_6 ) ) ; }","['Insert UnaryOperator', 'Move Invocation']",2351
public TYPE_1 METHOD_1 ( java.lang.Integer id ) { if ( ( id - 1 ) < ( this . VAR_1 . size ( ) ) ) { return this . VAR_1 . get ( ( id - 1 ) ) ; } else { return null ; } },public TYPE_1 METHOD_1 ( java.lang.Integer id ) { return this . VAR_1 . get ( id ) ; },"['Move Return', 'Move VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2352
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . equals ( VAR_1 ) ) return true ; if ( ( VAR_3 ) != null ) return VAR_4 . contains ( VAR_1 ) ; return VAR_5 . contains ( VAR_1 ) ; },public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_5 . contains ( VAR_1 ) ) || ( VAR_2 . equals ( VAR_1 ) ) ; },"['Insert BinaryOperator', 'Move Invocation', 'Move Invocation', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete If']",2353
public java.lang.String getId ( ) { return STRING_1 + ( id ) ; },public long getId ( ) { return id ; },"['Update TypeReference', 'Move FieldRead', 'Delete FieldRead', 'Delete BinaryOperator']",2354
"protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ( ( VAR_1 . METHOD_5 ( ) ) + STRING_1 ) ) ; }","protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2356
"public TYPE_1 METHOD_1 ( final TYPE_2 t ) { return ( ( TYPE_3 ) ( function . METHOD_1 ( t ) ) ) . METHOD_1 ( t , VAR_1 ) ; }","public TYPE_1 METHOD_1 ( final TYPE_2 t ) { return ( ( TYPE_3 ) ( function ) ) . METHOD_1 ( t , VAR_1 ) ; }","['Insert FieldRead', 'Move TypeReference', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation']",2357
public void start ( ) { VAR_1 = VAR_2 . METHOD_1 ( TYPE_1 . METHOD_2 ( ) ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_2 ( ) ) . METHOD_5 ( this ) ; },public void start ( ) { VAR_1 = VAR_2 . METHOD_1 ( TYPE_1 . METHOD_2 ( ) ) . METHOD_4 ( TYPE_1 . METHOD_2 ( ) ) . METHOD_5 ( this ) ; },"['Update Invocation', 'Move Invocation', 'Update Invocation', 'Move ThisAccess', 'Move Invocation', 'Delete Invocation']",2359
public boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) > 0 ) { return ! ( VAR_1 . get ( METHOD_2 ( ) ) . VAR_2 . isEmpty ( ) ) ; } else { return false ; } },public boolean METHOD_1 ( ) { return ! ( VAR_1 . isEmpty ( ) ) ; },"['Insert Return', 'Insert UnaryOperator', 'Insert Invocation', 'Move TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2361
protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; },protected void METHOD_1 ( java.lang.Void VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; super . METHOD_1 ( VAR_1 ) ; },['Move Invocation'],2362
"private TYPE_1 METHOD_1 ( TYPE_1 key , TYPE_1 message ) { return message . METHOD_2 ( key , METHOD_3 ( ) ) ; }","private TYPE_1 METHOD_1 ( TYPE_1 message , TYPE_1 key ) { return message . METHOD_2 ( key , METHOD_3 ( ) ) ; }",['Move Parameter'],2363
public void METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_3 . error ( VAR_2 . METHOD_2 ( ) ) ; } TYPE_2 . METHOD_3 ( this ) ; },public void METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_3 . error ( VAR_2 ) ; } TYPE_2 . METHOD_3 ( this ) ; },"['Update Invocation', 'Move Invocation', 'Move TypeAccess', 'Delete Invocation']",2364
public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) < INT_1 ) return INT_2 ; return INT_3 ; },public int METHOD_1 ( TYPE_1 VAR_1 ) { return INT_3 ; },"['Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",2365
private boolean METHOD_1 ( ) { return ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ; },private boolean METHOD_1 ( ) { return ( ( VAR_2 ) != null ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ; },"['Move BinaryOperator', 'Move UnaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2366
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return this . VAR_2 . get ( VAR_3 . toLowerCase ( ) ) ; },public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return this . VAR_2 . get ( VAR_1 ) ; },"['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2367
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_3 > listener , TYPE_4 VAR_2 , TYPE_5 VAR_3 , TYPE_6 VAR_4 ) { TYPE_7 . METHOD_2 ( VAR_5 , VAR_1 , listener , VAR_2 , VAR_3 , this . VAR_6 , VAR_4 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_3 > listener , TYPE_4 VAR_2 , TYPE_5 VAR_3 , TYPE_6 VAR_4 ) { TYPE_7 . METHOD_2 ( VAR_5 , VAR_1 , listener , VAR_2 , this . VAR_6 , VAR_3 , VAR_4 ) ; }",['Move VariableRead'],2368
public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + STRING_2 ) + ( id ) ) + CHAR_1 ) + STRING_3 ) + ( VAR_1 ) ) + CHAR_2 ; },public java.lang.String toString ( ) { return ( ( ( STRING_1 + STRING_2 ) + ( id ) ) + CHAR_1 ) + CHAR_2 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",2369
"public int METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getString ( VAR_3 , null ) ; if ( VAR_1 == null ) return VAR_4 ; return java.lang.Integer.parseInt ( VAR_5 . trim ( ) ) ; }","public int METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getString ( VAR_3 , null ) ; if ( VAR_1 == null ) return VAR_4 ; return java.lang.Integer.parseInt ( VAR_1 ) ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2370
public void METHOD_1 ( int VAR_1 ) { VAR_2 . setText ( ( ( ( ( getString ( VAR_3 ) ) + STRING_1 ) + VAR_1 ) + STRING_2 ) ) ; },public void METHOD_1 ( int VAR_1 ) { VAR_2 . setText ( ( ( ( getString ( VAR_3 ) ) + STRING_1 ) + VAR_1 ) ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",2371
private static TYPE_1 METHOD_1 ( java.lang.String className ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( className ) ) ) { return VAR_2 . get ( className ) ; } return VAR_3 ; },private static TYPE_1 METHOD_1 ( java.lang.String className ) { if ( VAR_1 . METHOD_2 ( className ) ) { return VAR_2 . get ( className ) ; } return VAR_3 ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2372
private boolean METHOD_1 ( ) { return ( listener . METHOD_2 ( ) ) || ( ( ( listener . METHOD_3 ( ) ) != null ) && ( ( VAR_1 ) > 0 ) ) ; },private boolean METHOD_1 ( ) { return ( ( listener . METHOD_3 ( ) ) != null ) && ( ( VAR_1 ) > 0 ) ; },"['Move BinaryOperator', 'Delete FieldRead', 'Delete Invocation', 'Delete BinaryOperator']",2373
public TYPE_1 METHOD_1 ( java.lang.String value ) { if ( ( value == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ) { return VAR_2 . error ( STRING_1 ) ; } else { return TYPE_1 . METHOD_2 ( ) ; } },public TYPE_1 METHOD_1 ( java.lang.String value ) { if ( ( value == null ) || ( VAR_1 . isEmpty ( ) ) ) { return VAR_2 . error ( STRING_1 ) ; } else { return TYPE_1 . METHOD_2 ( ) ; } },"['Update BinaryOperator', 'Move BinaryOperator', 'Move BinaryOperator', 'Update Invocation', 'Delete Literal', 'Delete BinaryOperator']",2374
public void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 ) TYPE_2 . METHOD_2 ( ) . METHOD_1 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . METHOD_2 ( ) . METHOD_1 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2376
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_4 ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; },"['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2377
public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( status ) ) { VAR_2 . METHOD_1 ( ) ; for ( TYPE_1 VAR_3 : VAR_4 ) { VAR_3 . METHOD_1 ( ) ; } status = VAR_5 ; } },public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( status ) ) { status = VAR_5 ; VAR_2 . METHOD_1 ( ) ; for ( TYPE_1 VAR_3 : VAR_4 ) { VAR_3 . METHOD_1 ( ) ; } } },['Move Assignment'],2378
private static java.lang.String METHOD_1 ( TYPE_1 source ) { return source . METHOD_2 ( ) . METHOD_3 ( ) . toLowerCase ( ) ; },private static java.lang.String METHOD_1 ( TYPE_1 source ) { return source . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Invocation', 'Delete Invocation']",2379
public void METHOD_1 ( float VAR_1 ) { VAR_2 = ( ( int ) ( ( VAR_1 * INT_1 ) / ( VAR_3 ) ) ) ; METHOD_2 ( ) ; },public void METHOD_1 ( float VAR_1 ) { VAR_2 = ( ( int ) ( ( ( ( - 1 ) * VAR_1 ) * INT_1 ) / ( VAR_3 ) ) ) ; METHOD_2 ( ) ; },"['Insert BinaryOperator', 'Insert UnaryOperator', 'Move VariableRead', 'Insert Literal']",2380
private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 . METHOD_2 ( ) ) { VAR_3 . delete ( VAR_2 ) ; METHOD_1 ( VAR_2 ) ; } },private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 . METHOD_2 ( ) ) { METHOD_1 ( VAR_2 ) ; VAR_3 . delete ( VAR_1 ) ; } },"['Move Invocation', 'Update VariableRead']",2381
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 type , java.lang.Object VAR_2 ) { if ( VAR_3 . getValue ( type ) . equals ( VAR_2 ) ) { return TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 type , java.lang.Object VAR_2 ) { if ( ( VAR_3 . get ( type ) . getValue ( ) ) == VAR_2 ) { return TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } return true ; }","['Insert BinaryOperator', 'Update Invocation', 'Move Invocation', 'Move VariableRead', 'Update Invocation']",2383
"public void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_1 . METHOD_4 ( VAR_1 ) ; } }","public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_1 . METHOD_4 ( VAR_1 ) ; }","['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2385
public boolean METHOD_1 ( java.lang.Object VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; return true ; } else return false ; },public void METHOD_1 ( java.lang.Object VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; },"['Update TypeReference', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2386
public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return false ; } else { return true ; } },public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return true ; } else { return false ; } },"['Move Return', 'Move Return']",2390
public boolean METHOD_1 ( ) { return ( ( this . VAR_1 ) > 0.0F ) || ( this . METHOD_2 ( ) ) ; },public boolean METHOD_1 ( ) { return ( this . VAR_1 ) > 0.0F ; },"['Move BinaryOperator', 'Delete ThisAccess', 'Delete Invocation', 'Delete BinaryOperator']",2393
"public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_3 ) - ( VAR_4 ) ; }","public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_4 ) - ( VAR_3 ) ; }",['Move FieldRead'],2394
public java.lang.String getName ( ) { if ( ! ( VAR_1 ) ) METHOD_1 ( ) ; return name ; },public java.lang.String getName ( ) { return name ; },"['Delete FieldRead', 'Delete UnaryOperator', 'Delete Invocation', 'Delete Block', 'Delete If']",2396
"public void METHOD_1 ( TYPE_1 message , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { if ( VAR_3 ) { TYPE_4 . METHOD_2 ( ) . METHOD_1 ( VAR_1 , message ) ; } }","public void METHOD_1 ( TYPE_1 message , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 . METHOD_2 ( ) . METHOD_1 ( VAR_1 , message ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Block', 'Delete If']",2397
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( ! ( VAR_2 ) ) ) handle ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) handle ( ) ; },"['Move UnaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",2398
public java.lang.String METHOD_1 ( ) { return ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) + ( VAR_2 ) ; },public java.lang.String METHOD_1 ( ) { return null ; },"['Insert Literal', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete BinaryOperator']",2400
"public void METHOD_1 ( java.lang.Throwable t ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; if ( VAR_4 != null ) { TYPE_1 . METHOD_3 ( VAR_4 , STRING_1 , VAR_5 ) . show ( ) ; } }","public void METHOD_1 ( java.lang.Throwable t ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_3 ( VAR_4 , STRING_1 , VAR_5 ) . show ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2401
"public void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( new TYPE_3 ( VAR_3 ) . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , METHOD_5 ( ) , VAR_2 ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_3 , VAR_1 . METHOD_4 ( ) , METHOD_5 ( ) , VAR_2 ) ; }","['Insert TypeAccess', 'Delete FieldRead', 'Delete ConstructorCall', 'Delete Invocation']",2402
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2404
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; VAR_2 = null ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } },private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; VAR_2 = null ; try { VAR_1 . METHOD_3 ( ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } },"['Move Assignment', 'Move Assignment']",2405
public static TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 = new TYPE_1 ( ) ; } return VAR_1 ; },public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } return VAR_1 ; },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator']",2406
"protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; view . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 ) ; view . METHOD_3 ( ) ; }",protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; },"['Delete FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete Invocation']",2407
"public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . put ( VAR_4 . toLowerCase ( ) , VAR_2 ) ; METHOD_2 ( ) ; }","public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; METHOD_2 ( ) ; }","['Insert VariableRead', 'Delete TypeAccess', 'Delete Invocation']",2408
"public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { if ( ! ( VAR_2 . equals ( STRING_1 ) ) ) VAR_3 . METHOD_2 ( string ) ; VAR_4 . setState ( new TYPE_2 ( VAR_3 , VAR_5 ) ) ; }","public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { VAR_3 . METHOD_2 ( string ) ; VAR_4 . setState ( new TYPE_2 ( VAR_3 , VAR_5 ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2409
"public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; TYPE_2 . METHOD_2 ( VAR_3 , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) ; METHOD_3 ( VAR_1 ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_3 , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) ; }",['Move Invocation'],2410
public java.lang.String METHOD_1 ( int position ) { return VAR_1 . get ( position ) . getString ( ) ; },public java.lang.String METHOD_1 ( int position ) { return VAR_1 . get ( position ) ; },"['Move Invocation', 'Delete Invocation']",2411
"public java.lang.Integer METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_3 . equals ( STRING_1 ) ) { return ( start ) + VAR_2 ; } else { return ( end ) + VAR_1 ; } }","public java.lang.Integer METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_3 . equals ( STRING_1 ) ) { return start ; } else { return ( end ) + VAR_2 ; } }","['Insert Return', 'Move Return', 'Move FieldRead', 'Move FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete Return']",2412
"public void METHOD_1 ( final TYPE_1 VAR_1 , java.lang.String source ) { if ( source == null ) { return ; } VAR_1 . METHOD_1 ( source ) ; }","public void METHOD_1 ( final TYPE_1 VAR_1 , java.lang.String source ) { VAR_1 . METHOD_1 ( source ) ; }","['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",2413
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( VAR_1 ) != null ) { VAR_2 = 0 ; VAR_1 . METHOD_4 ( VAR_3 ) ; } },public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_2 = 0 ; VAR_1 . METHOD_4 ( VAR_3 ) ; },"['Move Assignment', 'Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2414
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( ( VAR_2 ) >= 0 ) && ( ( VAR_2 ) < ( VAR_3 . size ( ) ) ) ) { TYPE_1 . METHOD_2 ( VAR_2 ) ; } },public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2415
"public int compareTo ( final TYPE_1 VAR_1 ) { return java.lang.Double . METHOD_1 ( VAR_2 , this . VAR_3 ) ; }",public int compareTo ( final TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == ( this . VAR_3 ) ) return 0 ; if ( ( VAR_2 ) < ( this . VAR_3 ) ) return - 1 ; return 1 ; },"['Insert If', 'Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert BinaryOperator', 'Insert Block', 'Insert Literal', 'Insert FieldRead', 'Move FieldRead', 'Insert Return', 'Insert FieldRead', 'Insert FieldRead', 'Insert Return', 'Insert Literal', 'Insert ThisAccess', 'Insert UnaryOperator', 'Insert Literal', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2416
protected java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 ) ; },protected java.lang.String METHOD_1 ( ) { return new java.lang.String ( VAR_1 ) ; },"['Insert ConstructorCall', 'Insert FieldRead', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2418
public void METHOD_1 ( ) { super . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( false ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( ) ; } VAR_1 . METHOD_4 ( ) ; },public void METHOD_1 ( ) { super . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( false ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete Invocation']",2419
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( ) ) { METHOD_4 ( ) ; } },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; },"['Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Block', 'Delete If']",2420
"private void METHOD_1 ( ) { if ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; final TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( ) ; VAR_3 . METHOD_1 ( VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; VAR_1 = false ; } }","private void METHOD_1 ( ) { if ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; final TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( ) ; VAR_3 . METHOD_1 ( VAR_4 ) ; VAR_1 = false ; } }",['Move Invocation'],2421
"public void METHOD_1 ( ) throws TYPE_1 { if ( ! ( VAR_1 . METHOD_1 ( INT_1 , VAR_2 ) ) ) fail ( STRING_1 ) ; }",public void METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_1 ( ) ; },"['Insert Invocation', 'Move TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2422
"public static TYPE_1 METHOD_1 ( double VAR_1 , double VAR_2 ) { double VAR_3 = ( ( INT_1 * VAR_1 ) * ( 1 - VAR_1 ) ) / VAR_2 ; return TYPE_1 . METHOD_1 ( VAR_3 ) ; }","public static TYPE_1 METHOD_1 ( double VAR_1 , double VAR_2 ) { double VAR_3 = ( VAR_1 * ( 1 - VAR_1 ) ) / VAR_2 ; return TYPE_1 . METHOD_1 ( VAR_3 ) ; }","['Move VariableRead', 'Delete FieldRead', 'Delete BinaryOperator']",2423
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( ) ) { METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ; } TYPE_4 . METHOD_5 ( VAR_2 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2424
"public static java.lang.String METHOD_1 ( android.content.Context context ) { if ( ( context != null ) && ( ( context . METHOD_2 ( ) ) != null ) ) { return TYPE_1 . METHOD_3 ( context ) . getString ( VAR_1 , VAR_2 ) ; } return VAR_2 ; }","public static java.lang.String METHOD_1 ( android.content.Context context ) { if ( context != null ) { return TYPE_1 . METHOD_3 ( context ) . getString ( VAR_1 , VAR_2 ) ; } return VAR_2 ; }","['Move BinaryOperator', 'Delete VariableRead', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2425
"public void METHOD_1 ( float x , float y ) { super . METHOD_1 ( x , y ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( x , y ) ; } }","public void METHOD_1 ( float x , float y ) { super . METHOD_1 ( x , y ) ; VAR_1 . METHOD_1 ( x , y ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2427
"protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 . getType ( ) ) != null ) { METHOD_2 ( VAR_1 . getType ( ) . METHOD_3 ( ) , METHOD_4 ( ) ) ; } }","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 . getType ( ) . METHOD_3 ( ) , METHOD_4 ( ) ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2428
public void METHOD_1 ( TYPE_1 i ) { if ( METHOD_2 ( ) ) METHOD_3 ( STRING_1 ) ; else { METHOD_4 ( 0 ) ; new TYPE_2 ( ) . execute ( ) ; } },public void METHOD_1 ( TYPE_1 i ) { METHOD_4 ( 0 ) ; new TYPE_2 ( ) . execute ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete Invocation', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete Block', 'Delete If']",2429
public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; VAR_1 . METHOD_2 ( ) ; assert ! ( VAR_1 . METHOD_3 ( ) ) ; },public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; VAR_1 . METHOD_2 ( ) ; assert VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",2430
public TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return TYPE_2 . METHOD_2 ( ) ; } else { return TYPE_2 . METHOD_3 ( ) ; } },public TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_3 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",2431
"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ! ( VAR_1 instanceof TYPE_3 ) ) { METHOD_2 ( VAR_2 ) ; } }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_1 , VAR_2 ) ; }","['Move Invocation', 'Move VariableRead', 'Delete TypeAccess', 'Delete BinaryOperator', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2432
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return VAR_2 . METHOD_2 ( ) ; } else { return VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ; } },public TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_1 ( ) ) != null ) ) { return VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ; } else { return null ; } },"['Insert BinaryOperator', 'Update BinaryOperator', 'Move BinaryOperator', 'Insert BinaryOperator', 'Move Return', 'Insert Return', 'Insert Invocation', 'Insert Literal', 'Insert Literal', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Return']",2433
"public boolean METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( context , VAR_1 . METHOD_3 ( context ) ) ; return ( VAR_2 != null ) && ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ; }","public boolean METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( context , VAR_1 . METHOD_3 ( context ) ) ; return TYPE_2 . METHOD_4 ( VAR_2 ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2434
"public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < java.lang.String > VAR_2 ) { if ( ( VAR_3 . METHOD_2 ( VAR_1 ) ) == ( VAR_4 ) ) { return METHOD_1 ( VAR_3 . METHOD_3 ( ) , VAR_2 ) ; } return false ; }","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < java.lang.String > VAR_2 ) { if ( ( VAR_3 . METHOD_2 ( VAR_1 ) ) == ( VAR_4 ) ) { METHOD_1 ( VAR_3 . METHOD_3 ( ) , VAR_2 ) ; } }","['Update TypeReference', 'Move Invocation', 'Delete Return', 'Delete Literal', 'Delete Return']",2435
private void METHOD_1 ( int VAR_1 ) { VAR_2 . remove ( VAR_1 ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } },private void METHOD_1 ( int VAR_1 ) { VAR_2 . remove ( VAR_1 ) ; },"['Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2436
public void METHOD_1 ( boolean show ) { VAR_1 = show ; if ( ( VAR_1 ) && ( ( ( VAR_2 ) == null ) || ( ( VAR_3 ) == null ) ) ) { METHOD_2 ( ) ; } },public void METHOD_1 ( boolean show ) { VAR_1 = show ; METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2437
private void METHOD_1 ( java.lang.String message ) { if ( ( ( VAR_1 ) != null ) && ( ! ( VAR_2 . equals ( STRING_1 ) ) ) ) { VAR_1 . METHOD_2 ( message ) ; } },private void METHOD_1 ( java.lang.String message ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( message ) ; } },"['Move BinaryOperator', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete BinaryOperator']",2438
"public static void METHOD_1 ( java.lang.String type , java.lang.String msg ) { if ( VAR_1 . equals ( STRING_1 ) ) TYPE_1 . METHOD_2 ( type , msg , INT_1 ) ; }","public static void METHOD_1 ( java.lang.String type , java.lang.String msg ) { TYPE_1 . METHOD_2 ( type , msg , INT_1 ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2439
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_6 ( ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; },"['Delete Invocation', 'Delete Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2440
"public static java.lang.String METHOD_1 ( java.lang.String value ) { if ( ! ( value . METHOD_2 ( STRING_1 ) ) ) { value = VAR_1 . toUpperCase ( ) ; value = VAR_1 . replaceAll ( STRING_2 , STRING_3 ) ; } return value ; }","public static java.lang.String METHOD_1 ( java.lang.String value ) { value = VAR_1 . toUpperCase ( ) ; value = VAR_1 . replaceAll ( STRING_2 , STRING_3 ) ; return value ; }","['Move Assignment', 'Move Assignment', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2441
"public void update ( TYPE_1 VAR_1 , int VAR_2 ) throws TYPE_2 { synchronized ( VAR_3 ) { for ( TYPE_3 VAR_4 : VAR_5 . values ( ) ) { VAR_6 . update ( VAR_1 , VAR_2 ) ; } } }","public void update ( TYPE_1 VAR_1 , int VAR_2 ) throws TYPE_2 { synchronized ( VAR_3 ) { for ( TYPE_3 VAR_4 : VAR_3 ) { VAR_6 . update ( VAR_1 , VAR_2 ) ; } } }","['Insert FieldRead', 'Move FieldRead', 'Delete TypeAccess', 'Delete Invocation']",2443
public int METHOD_1 ( ) { return ( VAR_1 . size ( ) ) - 1 ; },public int METHOD_1 ( ) { return VAR_1 . size ( ) ; },"['Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",2444
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( ) ) ) && ( VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; },private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . METHOD_3 ( ) ) && ( VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; },"['Move BinaryOperator', 'Move Invocation', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",2445
public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 . size ( ) ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ; },public java.lang.String toString ( ) { return ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 . size ( ) ) ) + STRING_3 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",2446
"public boolean contains ( TYPE_1 p ) { if ( p == null ) throw new java.lang.NullPointerException ( ) ; return contains ( p , VAR_1 , true ) ; }","public boolean contains ( TYPE_1 p ) { if ( p == null ) throw new java.lang.NullPointerException ( ) ; return ( contains ( p , VAR_1 , true ) ) != null ; }","['Insert BinaryOperator', 'Move Invocation', 'Insert Literal']",2447
public TYPE_1 METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_1 ( ) ; },public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_1 ( ) ; return null ; },"['Move Invocation', 'Insert Literal']",2448
"public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( METHOD_2 ( VAR_1 , null ) ) != null ; }","public boolean METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 , null ) ; }","['Update Invocation', 'Move Invocation', 'Delete Literal', 'Delete BinaryOperator']",2449
"public long METHOD_1 ( ) throws TYPE_1 { if ( ( obj ) != null ) { return obj . METHOD_2 ( STRING_1 ) ; } else { TYPE_2 . METHOD_3 ( VAR_1 , STRING_2 , VAR_2 ) . show ( ) ; return - 1 ; } }",public long METHOD_1 ( ) throws TYPE_1 { return obj . METHOD_2 ( STRING_1 ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Invocation', 'Delete Literal', 'Delete UnaryOperator', 'Delete Return', 'Delete Block', 'Delete If']",2450
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_1 ( ) { if ( ! ( VAR_2 ) ) VAR_3 . METHOD_3 ( ) ; } } ) ; },public void METHOD_1 ( ) { if ( ! ( VAR_2 ) ) { VAR_1 . METHOD_2 ( new TYPE_1 ( ) { public void METHOD_1 ( ) { VAR_3 . METHOD_3 ( ) ; } } ) ; } },['Move Invocation'],2451
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 . METHOD_1 ( ) ; return null ; },public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; },"['Move Return', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If', 'Delete Literal', 'Delete Return']",2452
"public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( VAR_2 , this , VAR_1 . METHOD_3 ( ) ) ; } this . METHOD_4 ( ) ; }","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_2 , this , VAR_1 . METHOD_3 ( ) ) ; this . METHOD_4 ( ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2453
"public void METHOD_1 ( java.util.Date VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 , VAR_1 ) . METHOD_4 ( ) ; }","public void METHOD_1 ( java.util.Date VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 , VAR_1 ) ; }","['Move Invocation', 'Delete Invocation']",2454
"public void METHOD_1 ( TYPE_1 view , TYPE_2 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( view , VAR_1 ) ; } }","public void METHOD_1 ( TYPE_1 view , TYPE_2 VAR_1 ) { VAR_2 . METHOD_1 ( view , VAR_1 ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2455
public static boolean METHOD_1 ( int [ ] [ ] VAR_1 ) { if ( ( TYPE_1 . METHOD_2 ( VAR_1 ) . i ) == ( - 1 ) ) { return true ; } return false ; },public static boolean METHOD_1 ( int [ ] [ ] VAR_1 ) { if ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) == ( - 1 ) ) { return true ; } return false ; },"['Move Invocation', 'Delete FieldRead']",2456
"public boolean METHOD_1 ( TYPE_1 item ) { TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_3 ( VAR_3 ) ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; return true ; }","public boolean METHOD_1 ( TYPE_1 item ) { VAR_4 . METHOD_2 ( VAR_3 ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_3 ( VAR_3 ) ) ; return true ; }",['Move Invocation'],2457
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( false ) ; VAR_2 . METHOD_3 ( ) ; },public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( false ) ; super . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2459
"public static boolean METHOD_1 ( final java.lang.String VAR_1 ) { return ( TYPE_1 . METHOD_1 ( VAR_1 , null ) ) || ( TYPE_1 . METHOD_1 ( VAR_1 , STRING_1 , true ) ) ; }","public static boolean METHOD_1 ( final java.lang.String VAR_1 ) { return TYPE_1 . METHOD_1 ( VAR_1 , null ) ; }","['Move Invocation', 'Delete TypeAccess', 'Delete VariableRead', 'Delete TypeAccess', 'Delete Literal', 'Delete Invocation', 'Delete BinaryOperator']",2460
"public java.lang.String toString ( TYPE_1 message ) { if ( message == null ) return null ; return message . METHOD_1 ( ) . replace ( STRING_1 , STRING_2 ) ; }",public java.lang.String toString ( TYPE_1 message ) { if ( message == null ) return null ; return message . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2461
"TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String > id ) { return METHOD_2 ( METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( METHOD_5 ( ) ) ) , VAR_1 . set ( METHOD_6 ( ) ) , METHOD_7 ( ) ) ; }","TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String > id ) { return METHOD_2 ( METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( METHOD_5 ( ) ) , VAR_1 . set ( METHOD_6 ( ) ) ) , METHOD_7 ( ) ) ; }",['Move Invocation'],2464
public java.lang.String METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) return STRING_1 ; return VAR_1 ; },public java.lang.String METHOD_1 ( ) { return STRING_1 ; },"['Move Return', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If', 'Delete FieldRead', 'Delete Return']",2467
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.System.out.println ( STRING_1 ) ; },public void METHOD_1 ( TYPE_1 b ) { java.lang.System.out.println ( STRING_1 ) ; TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; },"['Move Invocation', 'Update Parameter']",2468
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_2 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2469
public void METHOD_1 ( java.lang.Boolean VAR_1 ) { VAR_2 = VAR_1 ; },public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; },['Update TypeReference'],2471
public void METHOD_1 ( TYPE_1 event ) { if ( ( event . METHOD_2 ( ) ) == true ) { VAR_1 . info ( STRING_1 ) ; TYPE_2 . METHOD_3 ( ( ) - > VAR_2 . METHOD_4 ( ) ) ; } },public void METHOD_1 ( TYPE_1 event ) { if ( ( event . METHOD_2 ( ) ) == true ) { VAR_2 . METHOD_4 ( ) ; } },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert Invocation', 'Insert Literal', 'Insert Invocation', 'Insert VariableRead', 'Insert TypeAccess', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2472
"public void METHOD_1 ( android.view.View VAR_1 ) { long result = VAR_2 . METHOD_2 ( VAR_3 , null , METHOD_3 ( ) . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( getContext ( ) , ( result + STRING_1 ) , VAR_4 ) . show ( ) ; }","public void METHOD_1 ( android.view.View VAR_1 ) { long result = VAR_2 . METHOD_2 ( VAR_3 , null , METHOD_3 ( ) . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( getContext ( ) , ( result + STRING_1 ) , VAR_4 ) ; }","['Move Invocation', 'Delete Invocation']",2474
public void init ( ) { if ( ( VAR_1 ) != null ) VAR_2 . init ( ) ; },public void init ( ) { VAR_2 . init ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2475
public double METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) return VAR_1 ; return METHOD_2 ( ) . METHOD_1 ( ) ; },public double METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_1 ( ) ; },"['Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",2477
"public void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_4 ) { VAR_3 . METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; } }","public void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_4 ) { VAR_3 . METHOD_2 ( new TYPE_2 ( ) ) ; } }",['Delete FieldRead'],2478
"public void METHOD_1 ( int VAR_1 , java.lang.String message ) { if ( ( ( VAR_2 ) == VAR_1 ) && ( ( view ) != null ) ) { view . METHOD_2 ( ) ; } VAR_3 . METHOD_1 ( VAR_1 , message ) ; }","public void METHOD_1 ( int VAR_1 , java.lang.String message ) { VAR_3 . METHOD_1 ( VAR_1 , message ) ; }","['Delete FieldRead', 'Delete VariableRead', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete FieldRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2479
public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( TYPE_1 . METHOD_1 ( ) ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; },"['Move Invocation', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",2480
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; } else { VAR_3 . METHOD_3 ( VAR_2 ) ; } METHOD_4 ( ) ; },public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; METHOD_4 ( ) ; },"['Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2481
"public void METHOD_1 ( int VAR_1 , int height ) { if ( ( ( VAR_2 ) != null ) && ( ! ( VAR_3 ) ) ) VAR_2 . METHOD_1 ( VAR_1 , height ) ; VAR_4 . METHOD_1 ( VAR_1 , height ) ; }","public void METHOD_1 ( int VAR_1 , int height ) { if ( ( VAR_2 ) != null ) VAR_2 . METHOD_1 ( VAR_1 , height ) ; VAR_4 . METHOD_1 ( VAR_1 , height ) ; }","['Move BinaryOperator', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete BinaryOperator']",2484
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ( VAR_2 ) != null ) { VAR_1 = VAR_3 ; } METHOD_1 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; },public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ( VAR_2 ) != null ) { VAR_1 = VAR_4 ; } else { } METHOD_1 ( VAR_1 ) ; },"['Insert Block', 'Update FieldRead', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation']",2486
public java.lang.String getValue ( TYPE_1 VAR_1 ) { java.lang.Integer VAR_2 = VAR_1 . METHOD_1 ( ) ; return ( VAR_3 . toString ( ) ) + STRING_1 ; },public java.lang.String getValue ( TYPE_1 VAR_1 ) { java.lang.Integer VAR_2 = VAR_1 . METHOD_1 ( ) ; return VAR_3 . toString ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete BinaryOperator']",2487
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 . values ( ) ) ; VAR_3 . METHOD_3 ( ) ; },public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) ; },"['Insert TypeAccess', 'Delete TypeAccess', 'Delete Invocation']",2488
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 ( ) ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 ( ) ) ; VAR_1 . METHOD_2 ( ) ; },['Move Invocation'],2490
"public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_2 ) != null ) VAR_1 . METHOD_2 ( STRING_1 , VAR_3 . getId ( ) ) ; }","public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_3 . getId ( ) ) ; }","['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2491
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; },protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; super . METHOD_1 ( ) ; },['Move Invocation'],2492
public int METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) < INT_1 ) { return VAR_1 . size ( ) ; } else { return INT_1 ; } },public int METHOD_1 ( ) { return VAR_1 . size ( ) ; },"['Move Return', 'Delete TypeAccess', 'Delete Invocation', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete Block', 'Delete FieldRead', 'Delete Return', 'Delete Block', 'Delete If']",2493
"public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_3 ) ; } }","public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , ( ( VAR_3 ) - 1 ) ) ; } }","['Insert BinaryOperator', 'Insert FieldRead', 'Insert Literal', 'Delete TypeAccess']",2494
public void METHOD_1 ( TYPE_1 value ) { METHOD_2 ( value ) ; },public void METHOD_1 ( TYPE_1 value ) { if ( value != null ) METHOD_2 ( value ) ; },"['Insert If', 'Insert BinaryOperator', 'Insert Block', 'Insert VariableRead', 'Insert Literal', 'Move Invocation']",2495
"public TYPE_1 < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { if ( ( this . VAR_3 ) != null ) { return this . VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } return null ; }","public TYPE_1 < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { if ( ( this . VAR_3 ) != null ) { this . VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } return null ; }","['Move Invocation', 'Delete Return']",2496
public void METHOD_1 ( boolean VAR_1 ) { if ( ! ( this . VAR_1 ) ) { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( boolean VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Delete ThisAccess', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2498
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( VAR_1 ) ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_2 ( ) ; } else { java.lang.System.out.println ( STRING_2 ) ; } },public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_2 ( ) ; },"['Move Invocation', 'Move Invocation', 'Delete FieldRead', 'Delete UnaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete TypeAccess', 'Delete FieldRead', 'Delete TypeAccess', 'Delete Invocation', 'Delete Block', 'Delete If']",2500
"public boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < TYPE_2 , java.util.List < TYPE_1 > > VAR_2 , java.util.List < TYPE_3 > VAR_3 ) { return true ; }","public boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_3 > VAR_3 ) { return true ; }","['Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete TypeReference', 'Delete Parameter']",2501
public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == true ) { VAR_2 = true ; } else if ( ( VAR_1 ) == false ) { VAR_2 = false ; } return VAR_2 ; },public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == true ) { VAR_2 = true ; } else { VAR_2 = false ; } return VAR_2 ; },"['Move If', 'Move BinaryOperator', 'Move Block', 'Move Block', 'Move Assignment', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2502
public TYPE_1 METHOD_1 ( int position ) { if ( position > ( METHOD_2 ( ) ) ) return VAR_1 . get ( ( position % ( METHOD_2 ( ) ) ) ) ; else return VAR_1 . get ( position ) ; },public TYPE_1 METHOD_1 ( int position ) { return VAR_1 . get ( position ) ; },"['Move Return', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator', 'Delete Invocation', 'Delete Return', 'Delete Block', 'Delete Block', 'Delete If']",2503
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return new TYPE_1 ( file . METHOD_2 ( ) . METHOD_3 ( ) ) ; },public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return new TYPE_1 ( file . METHOD_3 ( ) ) ; },"['Update Invocation', 'Move Invocation', 'Delete Invocation']",2504
public java.lang.String toString ( ) { return ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( content ) ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ; },public java.lang.String toString ( ) { return ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( content ) ) + STRING_4 ; },"['Move BinaryOperator', 'Move FieldRead', 'Delete FieldRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator']",2505
public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) . list ( ) ; },public java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . list ( ) ; },"['Update Invocation', 'Move Invocation', 'Delete TypeAccess', 'Delete Invocation']",2506
public boolean METHOD_1 ( java.lang.Class VAR_1 ) { return ( this . VAR_2 . METHOD_2 ( VAR_1 ) ) || ( this . VAR_3 . METHOD_2 ( VAR_1 ) ) ; },public boolean METHOD_1 ( java.lang.Class VAR_1 ) { return this . VAR_2 . METHOD_2 ( VAR_1 ) ; },"['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete VariableRead', 'Delete Invocation', 'Delete BinaryOperator']",2507
public void METHOD_1 ( TYPE_1 node ) { METHOD_1 ( node . METHOD_2 ( ) ) ; METHOD_1 ( node . METHOD_3 ( ) ) ; },public void METHOD_1 ( TYPE_1 node ) { METHOD_1 ( node . METHOD_3 ( ) ) ; METHOD_1 ( node . METHOD_2 ( ) ) ; },['Move Invocation'],2510
"public void METHOD_1 ( int i , java.lang.String VAR_1 ) { if ( ! ( this . VAR_2 . isEmpty ( ) ) ) { this . VAR_2 . set ( i , VAR_1 ) ; } }","public void METHOD_1 ( int i , java.lang.String VAR_1 ) { this . VAR_2 . set ( i , VAR_1 ) ; }","['Move Invocation', 'Delete ThisAccess', 'Delete FieldRead', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2512
"private void METHOD_1 ( double VAR_1 , double VAR_2 ) { METHOD_2 ( 1 ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_1 ) ; }","private void METHOD_1 ( double VAR_1 , double VAR_2 ) { METHOD_2 ( 1 ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( ) ; METHOD_6 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; }",['Move Invocation'],2514
public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( INT_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( INT_3 ) ; java.lang.System.out.println ( VAR_1 . METHOD_1 ( ) ) ; },public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( INT_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( INT_3 ) ; java.lang.System.out.println ( VAR_1 ) ; },"['Move VariableRead', 'Delete Invocation']",2515
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { this . VAR_1 = VAR_1 ; } },public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { this . VAR_1 = VAR_1 ; },"['Move Assignment', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2516
"public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { if ( VAR_1 != null ) METHOD_2 ( new TYPE_2 ( getActivity ( ) , VAR_2 , VAR_1 ) ) ; }","public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { METHOD_2 ( new TYPE_2 ( getActivity ( ) , VAR_2 , VAR_1 ) ) ; }","['Move Invocation', 'Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2517
"public boolean METHOD_1 ( int x , int y ) { if ( ( y < ( size ) ) && ( x < ( size ) ) ) return VAR_1 [ METHOD_2 ( y ) ] [ METHOD_3 ( x ) ] ; else return false ; }","public boolean METHOD_1 ( int x , int y ) { return VAR_1 [ METHOD_2 ( y ) ] [ METHOD_3 ( x ) ] ; }","['Move Return', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete VariableRead', 'Delete FieldRead', 'Delete BinaryOperator', 'Delete BinaryOperator', 'Delete Block', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2518
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( 0 ) ; VAR_2 . METHOD_4 ( 0 ) ; VAR_2 . METHOD_5 ( 0 ) ; VAR_3 . METHOD_6 ( ) ; VAR_3 . METHOD_7 ( 0 ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( 0 ) ; VAR_2 . METHOD_4 ( 0 ) ; VAR_2 . METHOD_5 ( 0 ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_6 ( ) ; VAR_3 . METHOD_7 ( 0 ) ; },['Move Invocation'],2519
public static TYPE_1 [ ] METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return null ; } return VAR_1 . METHOD_3 ( ) ; },public static TYPE_1 [ ] METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( VAR_1 . METHOD_2 ( ) ) { return null ; } return VAR_1 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete UnaryOperator']",2520
"TYPE_1 METHOD_1 ( ) { return METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) , METHOD_5 ( ) ) ; }","TYPE_1 METHOD_1 ( ) { return METHOD_2 ( METHOD_5 ( ) , METHOD_4 ( ) , METHOD_3 ( ) ) ; }","['Move Invocation', 'Move Invocation']",2521
private void METHOD_1 ( ) { METHOD_2 ( VAR_1 . get ( 0 ) ) ; },private void METHOD_1 ( ) { METHOD_2 ( VAR_1 . get ( i ) ) ; },"['Insert FieldRead', 'Delete Literal']",2522
"public boolean METHOD_1 ( android.view.View VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) TYPE_1 . METHOD_3 ( ) . METHOD_4 ( METHOD_5 ( ) , METHOD_6 ( ) ) ; return true ; }","public boolean METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 . METHOD_3 ( ) . METHOD_4 ( METHOD_5 ( ) , METHOD_6 ( ) ) ; return true ; }","['Move Invocation', 'Delete Invocation', 'Delete UnaryOperator', 'Delete Block', 'Delete If']",2523
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != ( this ) ) { VAR_1 . METHOD_2 ( this ) ; VAR_2 . add ( VAR_1 ) ; } else { VAR_2 . add ( VAR_1 ) ; } },public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( this ) ; VAR_2 . add ( VAR_1 ) ; },"['Move Invocation', 'Move Invocation', 'Delete VariableRead', 'Delete ThisAccess', 'Delete BinaryOperator', 'Delete Block', 'Delete TypeAccess', 'Delete VariableRead', 'Delete Invocation', 'Delete Block', 'Delete If']",2525
public void METHOD_1 ( ) { java.lang.System.out.println ( ( ( ( value ) + STRING_1 ) + ( VAR_1 ) ) ) ; },public java.lang.String METHOD_1 ( ) { return ( ( value ) + STRING_1 ) + ( VAR_1 ) ; },"['Update TypeReference', 'Insert Return', 'Move BinaryOperator', 'Delete TypeAccess', 'Delete FieldRead', 'Delete Invocation']",2526
public TYPE_1 METHOD_1 ( ) { if ( ( ( length ( ) ) > 0 ) && ( ( METHOD_2 ( ) ) < ( VAR_1 ) ) ) { ( VAR_2 ) ++ ; METHOD_1 ( ) ; } return this ; },public TYPE_1 METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) < ( VAR_1 ) ) { ( VAR_2 ) ++ ; METHOD_1 ( ) ; } return this ; },"['Move BinaryOperator', 'Delete Invocation', 'Delete Literal', 'Delete BinaryOperator', 'Delete BinaryOperator']",2527
"public static double METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { return 1.0 / ( ( TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_1 , VAR_7 ) ) - 1 ) ; }","public static double METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { return 1.0 / ( TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_1 , VAR_7 ) ) ; }","['Update BinaryOperator', 'Move BinaryOperator', 'Move Literal', 'Delete Literal', 'Delete BinaryOperator']",2528
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 . METHOD_2 ( ) ; } else { METHOD_3 ( ) ; java.lang.System.exit ( 0 ) ; } METHOD_4 ( ) ; },public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 . METHOD_2 ( ) ; } else { METHOD_3 ( ) ; METHOD_4 ( ) ; java.lang.System.exit ( 0 ) ; } },['Move Invocation'],2529
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return null ; } return VAR_1 . METHOD_2 ( ) ; },public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) ; },"['Delete VariableRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Literal', 'Delete Return', 'Delete Block', 'Delete If']",2530
private void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( VAR_2 ) ; VAR_1 = false ; } if ( ( VAR_3 ) != null ) { VAR_4 . METHOD_3 ( ) ; } },private void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( VAR_2 ) ; VAR_1 = false ; } VAR_4 . METHOD_3 ( ) ; },"['Move Invocation', 'Delete FieldRead', 'Delete Literal', 'Delete BinaryOperator', 'Delete Block', 'Delete If']",2532
